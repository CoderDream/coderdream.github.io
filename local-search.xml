<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用腾讯云镜像源加速npm</title>
    <link href="/2024/01/30/%E4%BD%BF%E7%94%A8%E8%85%BE%E8%AE%AF%E4%BA%91%E9%95%9C%E5%83%8F%E6%BA%90%E5%8A%A0%E9%80%9Fnpm/"/>
    <url>/2024/01/30/%E4%BD%BF%E7%94%A8%E8%85%BE%E8%AE%AF%E4%BA%91%E9%95%9C%E5%83%8F%E6%BA%90%E5%8A%A0%E9%80%9Fnpm/</url>
    
    <content type="html"><![CDATA[<p>使用前请确保您已安装Node.js及npm<br>设置方法<br>运行以下命令：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">npm config <span class="hljs-keyword">set</span> registry <span class="hljs-comment">http:</span>//<span class="hljs-comment">mirrors.cloud.tencent.com</span>/npm/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CentOS设置node环境变量</title>
    <link href="/2024/01/30/CentOS%E8%AE%BE%E7%BD%AEnode%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <url>/2024/01/30/CentOS%E8%AE%BE%E7%BD%AEnode%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<ul><li><p>1.查询是否有node</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">echo</span> $PATH     <span class="hljs-string">//</span>查看是否有<span class="hljs-string">/usr/local/bin</span>。<br><span class="hljs-keyword">ls</span> -l <span class="hljs-string">/usr/local/bin</span> | grep node     <span class="hljs-string">//</span>看看node是否确实存在。<br><span class="hljs-keyword">ls</span> -l <span class="hljs-string">/usr/local/bin/node</span>            <span class="hljs-string">//</span>同上<br></code></pre></td></tr></table></figure></li><li><p>2.进入管理员权限</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">su</span> root / sudo <span class="hljs-keyword">su</span><br></code></pre></td></tr></table></figure></li><li><p>3.profile文件更改</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">//如果<span class="hljs-keyword">profile</span>文件不存在<br>touch  /etc/<span class="hljs-keyword">profile</span><br><span class="hljs-keyword">vi</span> /etc/<span class="hljs-keyword">profile</span><br></code></pre></td></tr></table></figure><blockquote><p>然后输入下列代码,并保存</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">NODE_HOME</span>=<span class="hljs-string">&quot;/usr/local&quot;</span><br><span class="hljs-built_in">export</span> NODE_HOME<br><span class="hljs-attribute">CLASS_PATH</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$NODE_HOME</span>&quot;</span><br><span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;.<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$NODE_HOME</span>/bin/&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>4.profile激活</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>1、持续集成及Jenkins介绍</title>
    <link href="/2024/01/29/1%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%8F%8AJenkins%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/01/29/1%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%8F%8AJenkins%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="1、持续集成及Jenkins介绍"><a href="#1、持续集成及Jenkins介绍" class="headerlink" title="1、持续集成及Jenkins介绍"></a>1<strong>、持续集成及</strong>Jenkins<strong>介绍</strong></h2><p>软件开发生命周期</p><p>软件开发生命周期又叫做<strong>SDLC</strong>（Software Development Life Cycle），它是集合了计划、开发、测试和部署过程的集合。如下图所示 ：</p><p><img src="/images/pasted-1706590229965.png" alt="upload successful"></p><ul><li>需求分析</li></ul><p>这是生命周期的第一阶段，根据项目需求，团队执行一个可行性计划的分析。项目需求可能是公司内部或者客户提出的。这阶段主要是对信息的收集，也有可能是对现有项目的改善和重新做一个新的项目。还要分析项目的预算多长，可以从哪方面受益及布局，这也是项目创建的目标。</p><ul><li>设计</li></ul><p>第二阶段就是设计阶段，系统架构和满意状态（就是要做成什么样子，有什么功能），和创建一个项目计划。计划可以使用图表，布局设计或者文者的方式呈现。</p><ul><li>实现</li></ul><p>第三阶段就是实现阶段，项目经理创建和分配工作给开者，开发者根据任务和在设计阶段定义的目标进行开发代码。依据项目的大小和复杂程度，可以需要数月或更长时间才能完成。</p><ul><li>测试</li></ul><p>测试人员进行代码测试 ，包括功能测试、代码测试、压力测试等。</p><ul><li>进化</li></ul><p>最后进阶段就是对产品不断的进化改进和维护阶段，根据用户的使用情况，可能需要对某功能进行修改，bug修复，功能增加等。</p><h3 id="软件开发瀑布模型"><a href="#软件开发瀑布模型" class="headerlink" title="软件开发瀑布模型"></a>软件开发瀑布模型</h3><p>瀑布模型是最著名和最常使用的软件开发模型。瀑布模型就是一系列的软件开发过程。它是由制造业繁衍出来的。一个高度化的结构流程在一个方向上流动，有点像生产线一样。在瀑布模型创建之初，没有其它开发的模型，有很多东西全靠开发人员去猜测，去开发。这样的模型仅适用于那些简单的软件开 发， 但是已经不适合现在的开发了。</p><p>下图对软件开发模型的一个阐述。</p><p><img src="/images/pasted-1706596581852.png" alt="upload successful"></p><table><thead><tr><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>简单易用和理解</td><td>各个阶段的划分完全固定，阶段之间产生大量的文档，极大地增加了工作量。</td></tr><tr><td>当前一阶段完成后，您只需要去关注后续阶段。</td><td>由于开发模型是线性的，用户只有等到整个过程的末期才能见到开发成果，从而增加了开发风险。</td></tr><tr><td>为项目提供了按阶段划分的检查节点</td><td>瀑布模型的突出缺点是不适应用户需求的变化。</td></tr></tbody></table><h3 id="软件的敏捷开发"><a href="#软件的敏捷开发" class="headerlink" title="软件的敏捷开发"></a>软件的敏捷开发</h3><h4 id="什么是敏捷开发？"><a href="#什么是敏捷开发？" class="headerlink" title="什么是敏捷开发？"></a>什么是敏捷开发？</h4><p>敏捷开发（Agile Development） 的核心是迭代开发（Iterative Development） 与 增量开发</p><p>（Incremental Development） 。</p><ul><li><strong>何为迭代开发？</strong></li></ul><p>对于大型软件项目，传统的开发方式是采用一个大周期（比如一年）进行开发，整个过程就是一次”大开发”；迭代开发的方式则不一样，它将开发过程拆分成多个小周期，即一次”大开发”变成多次”小开发”，每次小开发都是同样的流程，所以看上去就好像重复在做同样的步骤。</p><p>举例来说，SpaceX 公司想造一个大推力火箭，将人类送到火星。但是，它不是一开始就造大火箭，而是先造一个最简陋的小火箭 Falcon 1。结果，第一次发射就爆炸了，直到第四次发射，才成功进入轨道。然后，开发了中型火箭 Falcon 9，九年中发射了70次。最后，才开发 Falcon 重型火箭。如果 SpaceX 不采用迭代开发，它可能直到现在还无法上天。</p><ul><li><strong>何为增量开发？</strong></li></ul><p>软件的每个版本，都会新增一个用户可以感知的完整功能。也就是说，按照新增功能来划分迭代。</p><p>举例来说，房产公司开发一个10栋楼的小区。如果采用增量开发的模式，该公司第一个迭代就是交付一号楼，第二个迭代交付二号楼 每个迭代都是完成一栋完整的楼。而不是第一个迭代挖好10栋楼的地基，第二个迭代建好每栋楼的骨架，第三个迭代架设屋顶……</p><h4 id="敏捷开发如何迭代？"><a href="#敏捷开发如何迭代？" class="headerlink" title="敏捷开发如何迭代？"></a>敏捷开发如何迭代？</h4><p>虽然敏捷开发将软件开发分成多个迭代，但是也要求，每次迭代都是一个完整的软件开发周期，必须按照软件工程的方法论，进行正规的流程管理。</p><p><img src="/images/pasted-1706596609959.png" alt="upload successful"></p><h4 id="敏捷开发有什么好处？"><a href="#敏捷开发有什么好处？" class="headerlink" title="敏捷开发有什么好处？"></a>敏捷开发有什么好处？</h4><ul><li><strong>早期交付</strong></li></ul><p>敏捷开发的第一个好处，就是早期交付，从而大大降低成本。 还是以上一节的房产公司为例，如果按照传统的”瀑布开发模式”，先挖10栋楼的地基、再盖骨架、然后架设屋顶，每个阶段都等到前一个阶段完成后开始，可能需要两年才能一次性交付10栋楼。也就是说，如果不考虑预售，该项目必须等到两年后才能回款。 敏捷开发是六个月后交付一号楼，后面每两个月交付一栋楼。因此，半年就能回款10%，后面每个月都会有现金流，资金压力就大大减轻了。</p><ul><li><strong>降低风险</strong></li></ul><p>敏捷开发的第二个好处是，及时了解市场需求，降低产品不适用的风险。 请想一想，哪一种情况损失比较小：10栋楼都造好以后，才发现卖不出去，还是造好第一栋楼，就发现卖不出去，从而改进或停建后面9栋楼？</p><h3 id="什么是持续集成"><a href="#什么是持续集成" class="headerlink" title="什么是持续集成"></a>什么是持续集成</h3><p>持续集成（ Continuous integration ， 简称 CI ）指的是，频繁地（一天多次）将代码集成到主干。</p><p>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p><p>通过持续集成， 团队可以快速的从一个功能到另一个功能，简而言之，敏捷软件开发很大一部分都要归功于持续集成。</p><ul><li><strong>持续集成的流程</strong></li></ul><p><img src="/images/pasted-1706596633827.png" alt="upload successful"></p><p>根据持续集成的设计，代码从提交到生产，整个过程有以下几步。</p><ul><li>提交</li></ul><p>流程的第一步，是开发者向代码仓库提交代码。所有后面的步骤都始于本地代码的一次提交（commit）。</p><ul><li>测试（第一轮）</li></ul><p>代码仓库对commit操作配置了钩子（hook），只要提交代码或者合并进主干，就会跑自动化测试。</p><ul><li>构建</li></ul><p>通过第一轮测试，代码就可以合并进主干，就算可以交付了。</p><p>交付后，就先进行构建（build），再进入第二轮测试。所谓构建，指的是将源码转换为可以运行的实际代码，比如安装依赖，配置各种资源（样式表、JS脚本、图片）等等。</p><ul><li>测试（第二轮）</li></ul><p>构建完成，就要进行第二轮测试。如果第一轮已经涵盖了所有测试内容，第二轮可以省略，当然，这时构建步骤也要移到第一轮测试前面。</p><ul><li>部署</li></ul><p>过了第二轮测试，当前代码就是一个可以直接部署的版本（artifact）。将这个版本的所有文件打包（tar ﬁlename.tar * ）存档，发到生产服务器。</p><ul><li>回滚</li></ul><p>一旦当前版本发生问题，就要回滚到上一个版本的构建结果。最简单的做法就是修改一下符号链接，指向上一个版本的目录。</p><h3 id="持续集成的组成要素"><a href="#持续集成的组成要素" class="headerlink" title="持续集成的组成要素"></a>持续集成的组成要素</h3><ul><li>一个自动构建过程， 从检出代码、 编译构建、 运行测试、 结果记录、 测试统计等都是自动完成的， 无需人工干预。</li><li>一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，一般使用SVN或Git。</li><li>一个持续集成服务器， Jenkins 就是一个配置简单和使用方便的持续集成服务器。</li></ul><p><img src="/images/pasted-1706596661856.png" alt="upload successful"></p><p>持续集成的好处</p><p>1、降低风险，由于持续集成不断去构建，编译和测试，可以很早期发现问题，所以修复的代价就少；</p><p>2、对系统健康持续检查，减少发布风险带来的问题；</p><p>3、减少重复性工作；</p><p>4、持续部署，提供可部署单元包；</p><p>5、持续交付可供使用的版本；</p><p>6、增强团队信心；</p><h3 id="Jenkins介绍"><a href="#Jenkins介绍" class="headerlink" title="Jenkins介绍"></a>Jenkins<strong>介绍</strong></h3><p>Jenkins 是一款流行的开源持续集成（Continuous Integration）工具，广泛用于项目开发，具有自动化构建、测试和部署等功能。官网： <a href="http://jenkins-ci.org/">http://jenkins-ci.org/</a>。</p><p>Jenkins的特征：</p><ul><li>开源的Java语言开发持续集成工具，支持持续集成，持续部署。</li><li>易于安装部署配置：可通过yum安装,或下载war包以及通过docker容器等快速实现安装部署，可方便web界面配置管理。</li><li>消息通知及测试报告：集成RSS&#x2F;E-mail通过RSS发布构建结果或当构建完成时通过e-mail通知，生成JUnit&#x2F;TestNG测试报告。</li><li>分布式构建：支持Jenkins能够让多台计算机一起构建&#x2F;测试。</li><li>文件识别：Jenkins能够跟踪哪次构建生成哪些jar，哪次构建使用哪个版本的jar等。</li><li>丰富的插件支持：支持扩展插件，你可以开发适合自己团队使用的工具，如git，svn，maven，docker等。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>部署 Hexo 到 GitHub Pages</title>
    <link href="/2024/01/29/%E9%83%A8%E7%BD%B2%20Hexo%20%E5%88%B0%20GitHub%20Pages/"/>
    <url>/2024/01/29/%E9%83%A8%E7%BD%B2%20Hexo%20%E5%88%B0%20GitHub%20Pages/</url>
    
    <content type="html"><![CDATA[<p>部署 Hexo 到 GitHub Pages</p><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p><p>首先安装 hexo-deployer-git：</p><p>npm install hexo-deployer-git –save<br>然后修改 _config.yml 文件末尾的 Deployment 部分，修改成如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@github.com:用户名/用户名.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>完成后运行 hexo d 将网站上传部署到 GitHub Pages。</p><p>完成！这时访问我们的 GitHub 域名 https:&#x2F;&#x2F;用户名.github.io 就可以看到 Hexo 网站了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/01/29/Promise/"/>
    <url>/2024/01/29/Promise/</url>
    
    <content type="html"><![CDATA[<p>差不多 <a href="https://www.jianshu.com/u/111497859846">https://www.jianshu.com/u/111497859846</a> 最新回答 &#x2F; 不朽的战斗机</p><p>回调的四个问题</p><p>Promise 详解<br>new Promise(<br>    &#x2F;* 执行器 executor *&#x2F;<br>    function (resolve, reject){<br>        resolve() &#x2F;&#x2F; 数据处理完成</p><pre><code class="hljs">    reject() // 数据处理出错&#125;</code></pre><p>).then(function A() {<br>        &#x2F;&#x2F; 成功，下一步<br>    }, function B() {<br>        &#x2F;&#x2F; 失败，做相应处理<br>    }<br>);</p><p>Promise 是一个代理对象，他和原先要进行的操作并无关系<br>它通过引入一个回调，避免更多的回调</p><h3 id="Promise-的3种状态："><a href="#Promise-的3种状态：" class="headerlink" title="Promise 的3种状态："></a>Promise 的3种状态：</h3><table><thead><tr><th align="left">英文</th><th align="center">中文</th><th align="right">说明</th></tr></thead><tbody><tr><td align="left">pending</td><td align="center">[待定]</td><td align="right">初始状态</td></tr><tr><td align="left">fulfilled</td><td align="center">[实现]</td><td align="right">操作成功</td></tr><tr><td align="left">rejected</td><td align="center">[被否决]</td><td align="right">操作失败</td></tr></tbody></table><p>Promise 状态发生改变，就会触发 .then() 里的响应函数处理后续步骤。<br>Promise 状态一经改变，不会再变。</p><h3 id="Promise-实例一经创建，执行器立即执行。"><a href="#Promise-实例一经创建，执行器立即执行。" class="headerlink" title="Promise 实例一经创建，执行器立即执行。"></a>Promise 实例一经创建，执行器立即执行。</h3><p><img src="/Promise%5CPromise_01.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/01/29/hello-world/"/>
    <url>/2024/01/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2022年第31周</title>
    <link href="/2022/07/25/2022Week31/"/>
    <url>/2022/07/25/2022Week31/</url>
    
    <content type="html"><![CDATA[<h2 id="2022年第31周（2022-07-25-2022-07-31）"><a href="#2022年第31周（2022-07-25-2022-07-31）" class="headerlink" title="2022年第31周（2022&#x2F;07&#x2F;25~2022&#x2F;07&#x2F;31）"></a>2022年第31周（2022&#x2F;07&#x2F;25~2022&#x2F;07&#x2F;31）</h2><ol><li><a href="https://www.jianshu.com/p/13c0b3ca7c71">nvm安装（Windows篇）</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>nodejs14</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS 7</title>
    <link href="/2020/01/15/CentOS/"/>
    <url>/2020/01/15/CentOS/</url>
    
    <content type="html"><![CDATA[<h2 id="CentOS-7-重启网络服务命令"><a href="#CentOS-7-重启网络服务命令" class="headerlink" title="CentOS 7 重启网络服务命令"></a>CentOS 7 重启网络服务命令</h2><p>重新启动网络：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> network.service<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service network restart</span><br></code></pre></td></tr></table></figure><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>RSS</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020年第03周</title>
    <link href="/2020/01/14/2020Week03/"/>
    <url>/2020/01/14/2020Week03/</url>
    
    <content type="html"><![CDATA[<h2 id="2020年第03周（2020-01-13-2020-01-19）"><a href="#2020年第03周（2020-01-13-2020-01-19）" class="headerlink" title="2020年第03周（2020&#x2F;01&#x2F;13~2020&#x2F;01&#x2F;19）"></a>2020年第03周（2020&#x2F;01&#x2F;13~2020&#x2F;01&#x2F;19）</h2><ol><li><a href="https://www.jianshu.com/p/aa5cb2ec0e73">PDF文件如何转成markdown格式</a></li></ol><h2 id="导出-pdf-文件中的图片"><a href="#导出-pdf-文件中的图片" class="headerlink" title="导出 pdf 文件中的图片"></a>导出 pdf 文件中的图片</h2><ol><li><p>Acrobat 版本：                                                                                                       </p><img src="/2020/01/14/2020Week03/01.png" class=""></li><li><p>导出为图像，jpg，勾选【导出所有图像】：                                                                                                      </p><img src="/2020/01/14/2020Week03/02.png" class=""></li><li><p>设置格式：                                                                                                       </p> <img src="/2020/01/14/2020Week03/03.png" class="">：</li><li><p>导出结果：                                                                                                       </p><img src="/2020/01/14/2020Week03/04.png" class=""></li><li><p>最后用 rename 重命名：                                                                                                      </p><img src="/2020/01/14/2020Week03/05.png" class=""></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pdf</tag>
      
      <tag>jpg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSS Reader实例开发之存储本地数据</title>
    <link href="/2020/01/10/RSS_Data_Sava2Local/"/>
    <url>/2020/01/10/RSS_Data_Sava2Local/</url>
    
    <content type="html"><![CDATA[<h2 id="存储本地数据"><a href="#存储本地数据" class="headerlink" title="存储本地数据"></a>存储本地数据</h2><p>iPhone系统为应用程序提供了多种存储本地数据的方式，包括文件和数据库。为了保证安全，每个应用程序都有自己独立的存储区，其他应用程序无法直接访问。此外，大数据还可以存储在手机的SD卡内，存储在SD卡的数据可以被所有应用程序读写。</p><p>受到无线网络的速度限制，RSS Reader需要把抓取的内容存储到本地，以便快速显示给用户，这个功能利用数据库存储最容易实现。此外，RSS Reader还需要保存用户的设置。下面，我们分别来编写这两个功能。</p><h2 id="使用SQLite数据库"><a href="#使用SQLite数据库" class="headerlink" title="使用SQLite数据库"></a>使用SQLite数据库</h2><p>和其他智能手机平台相比，iPhone平台提供了一个非常完善的数据库存储机制。iPhone系统使用SQLite作为内置的数据库引擎，应用程序可以非常方便地使用数据库来存储数据，并使用标准的SQL语言来查询和修改数据，极大地增强了应用程序的能力和灵活性。</p><p>SQLite是用C语言编写的微型数据库引擎，特点是小巧，速度快，以单一文件存储数据库数据，非常适合移动平台。iPhone系统已经对SQLite进行了封装，提供了简单的Java接口。</p><p>在使用SQLite时，我们还需要注意：</p><ol><li>SQLite不支持外键，因此，一对多关系需要由应用程序自身维护；</li><li>SQLite不支持JDBC接口，需要熟悉iPhone提供的API，好消息是API接口相当简单；</li><li>SQLite仅支持几种数据类型：INTEGER，REAL，TEXT和BLOB等；</li><li>SQLite不严格区分数据的类型，例如存储的是INTEGER照样可以用getString()读出来。</li></ol><p>RSS Reader需要处理两种类型的数据：RSS订阅源和RSS的Item，因此，我们建立Subscription和Item这两种类型的JavaBean，并创建对应的表结构。</p><p>Subscription对应的表subs：</p><table><thead><tr><th align="left">列名</th><th align="center">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">_id</td><td align="center">long</td><td align="left">自增主键</td></tr><tr><td align="left">url</td><td align="center">text</td><td align="left">RSS的URL地址</td></tr><tr><td align="left">title</td><td align="center">text</td><td align="left">RSS的标题</td></tr><tr><td align="left">description</td><td align="center">text</td><td align="left">RSS的描述</td></tr><tr><td align="left">last_updated</td><td align="center">long</td><td align="left">最后更新时间</td></tr><tr><td align="left">frequency</td><td align="center">long</td><td align="left">抓取频率</td></tr></tbody></table><pre><code class="hljs">                                    |</code></pre><h3 id="Item对应的表item："><a href="#Item对应的表item：" class="headerlink" title="Item对应的表item："></a>Item对应的表item：</h3><table><thead><tr><th align="left">列名</th><th align="center">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">_id</td><td align="center">long</td><td align="left">自增主键</td></tr><tr><td align="left">subs_id</td><td align="center">long</td><td align="left">模拟外键，关联Subscription</td></tr><tr><td align="left">unread</td><td align="center">long</td><td align="left">是否未读，1&#x3D;未读，0&#x3D;已读</td></tr><tr><td align="left">url</td><td align="center">text</td><td align="left">Item的URL地址</td></tr><tr><td align="left">title</td><td align="center">text</td><td align="left">Item的标题</td></tr><tr><td align="left">author</td><td align="center">text</td><td align="left">Item的作者</td></tr><tr><td align="left">published</td><td align="center">text</td><td align="left">Item的发布时间</td></tr><tr><td align="left">content</td><td align="center">text</td><td align="left">Item的内容</td></tr></tbody></table><p>SQLite支持long类型的自增主键，且iPhone的系统应用程序均默认使用该类型主键。为了与iPhone的系统应用程序和其他应用程序保持一致的主键规则，应当首先考虑使用这种类型的主键。此外，iPhone系统默认的主键名称是“_id”，该常量定义在android.provider.BaseColumns._ID，根据一致性原则，我们自定义的SubscriptionColumns和ItemColumns应当从BaseColumns派生，并直接使用常量_ID作为主键名称。</p><h3 id="SubscriptionColumns定义如下："><a href="#SubscriptionColumns定义如下：" class="headerlink" title="SubscriptionColumns定义如下："></a>SubscriptionColumns定义如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SubscriptionColumns</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseColumns</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TABLE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;subs&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;url&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TITLE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;title&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DESCRIPTION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;description&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LAST_UPDATED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;last_updated&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FREQUENCY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;frequency&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] ALL_COLUMNS = &#123; _ID, URL, TITLE, DESCRIPTION, LAST_UPDATED, FREQUENCY &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ItemColumns定义如下："><a href="#ItemColumns定义如下：" class="headerlink" title="ItemColumns定义如下："></a>ItemColumns定义如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ItemColumns</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseColumns</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TABLE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;item&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SUBS_ID</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;subs_id&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">UNREAD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;unread&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;url&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TITLE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;title&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">AUTHOR</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;author&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PUBLISHED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;published&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONTENT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;content&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] ALL_COLUMNS = &#123; _ID, SUBS_ID, UNREAD, URL, TITLE, AUTHOR, PUBLISHED, CONTENT &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>SQLite数据库API的主要接口就是SQLiteDatabase对象，提供了创建和删除数据库、创建和删除表以及最常用的增删改查的全部功能。要使用SQLite数据库，可以直接创建SQLiteDatabase对象，还可以利用iPhone系统提供的SQLiteOpenHelper对象更方便地操作SQLite数据库。</p><p>使用SQLiteOpenHelper时，我们需要从SQLiteOpenHelper派生一个子类，并提供一个显示的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadingOpenHelper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SQLiteOpenHelper</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReadingOpenHelper</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, <span class="hljs-string">&quot;reader.db&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><p>在构造方法中，需要传入数据库文件名“reader.db”，该文件由于放在RSS Reader应用程序的私有目录下，并且只能被RSS Reader应用程序访问，所以不存在文件名冲突。最后一个参数1表示版本号。</p><p>当第一次运行RSS Reader时，数据库并不存在，此时，SQLiteOpenHelper会自动为我们创建数据库，然后，onCreate()方法将被调用，我们需要覆写该方法，创建所有的表和索引，并插入初始数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(SQLiteDatabase db)</span> &#123;<br>    db.execSQL(<span class="hljs-string">&quot;CREATE TABLE subs ...&quot;</span>);<br>    db.execSQL(<span class="hljs-string">&quot;CREATE TABLE item ...&quot;</span>);<br>    db.execSQL(<span class="hljs-string">&quot;INSERT INTO subs ...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>当RSS Reader升级后，例如，从版本1升级到版本2时，SQLiteOpenHelper检查到已存在的数据库版本和升级版本不同，就会调用onUpgrade()方法，让应用程序自己更新旧版本的数据。我们需要覆写该方法，并编写升级数据的逻辑。在RSS Reader中，我们用最简单的方法，即删除旧的表，然后再创建新表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span>  <br>publid <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>升级数据库的逻辑仅在新版本和旧版本使用了不同的数据库表结构时才需要。  </p><p>有了ReadingOpenHelper，创建和升级数据库的功能就实现了。下一步，我们编写一个ReadingOperator类，它持有一个ReadingOpenHelper和一个SQLiteDatabase对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadingOperator</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">SQLiteDatabase</span> <span class="hljs-variable">db</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ReadingOpenHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReadingOperator</span><span class="hljs-params">(Context context)</span> &#123;<br>        helper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReadingOpenHelper</span>(context);<br>        db = helper.getWritableDatabase();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        db.close();<br>        helper.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> SQLiteDatabase <span class="hljs-title function_">getCurrentDb</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> db;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>注意到SQLiteDatabase是通过ReadingOpenHelper的getWritableDatabase()获取的，表示该SQLiteDatabase可读写。如果你只需要读取而不需要写入数据库，可以用getReadableDatabase()获取。SQLiteDatabase对象不需要反复打开和关闭，通常我们在应用程序启动时打开，在应用程序结束时关闭，在应用程序的生命周期内，可以随时通过getCurrentDb()方法获取SQLiteDatabase对象。</p><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>除了可以直接构造SQL语句查询外，更简单常用的是使用SQLiteDatabase提供的query()方法，该方法定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Subscription <span class="hljs-title function_">queryById</span><span class="hljs-params">(String id)</span> &#123;<br>    <span class="hljs-type">Cursor</span> <span class="hljs-variable">cursor</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        cursor = db.query(<span class="hljs-string">&quot;subs&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;_id=?&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; id &#125;, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-keyword">if</span> (cursor.moveToFirst()) &#123;<br>            <span class="hljs-keyword">return</span> mappingToSubs(cursor);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        close(cursor);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要循环Cursor获得所有的行数据，使用如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cursor</span> <span class="hljs-variable">cursor</span> <span class="hljs-operator">=</span> db.query(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> cursor.getCount();<br><span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> Collections.emptyList();<br>&#125;<br>cursor.moveToFirst();<br><span class="hljs-keyword">while</span> (!cursor.isAfterLast()) &#123;<br>    cursor.getString(<span class="hljs-string">&quot;&quot;</span>);<br>    cursor.moveToNext();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>插入数据需要使用SQLiteDatabase提供的insert()方法，例如，插入一个Subscription的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">insertItem</span><span class="hljs-params">(<span class="hljs-type">long</span> subs_id, String url, <span class="hljs-type">long</span> published, String title, String author, String content)</span> &#123;<br>    <span class="hljs-type">ContentValues</span> <span class="hljs-variable">cv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentValues</span>();<br>    cv.put(ItemColumns.SUBS_ID, subs_id);<br>    cv.put(ItemColumns.URL, url);<br>    cv.put(ItemColumns.PUBLISHED, published);<br>    cv.put(ItemColumns.UNREAD, <span class="hljs-number">1</span>);<br>    cv.put(ItemColumns.TITLE, title);<br>    cv.put(ItemColumns.AUTHOR, author);<br>    cv.put(ItemColumns.CONTENT, content);<br>    <span class="hljs-keyword">return</span> db.insert(ItemColumns.TABLE_NAME, <span class="hljs-literal">null</span>, cv);<br>&#125;<br></code></pre></td></tr></table></figure><p>insert()方法需要传入一个ContentValues对象，SQLiteDatabase会根据ContentValues对象构造出“INSERT table (column list) VALUES( value list)”语句。</p><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p>更新数据和插入数据类似，把需要更新的字段放入ContentValues中，然后调用SQLiteDatabase的update()方法，并传入where语句和可选的参数即可。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ContentValues</span> <span class="hljs-variable">cv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentValues</span>(); <br>cv.put(ItemColumns.UNREAD, <span class="hljs-number">1</span>); <br>db.update(ItemColumns.TABLE_NAME, cv, <span class="hljs-string">&quot;_id=?&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; id &#125;);  <br></code></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>删除数据需要使用SQLiteDatabase的delete()方法，需要传入table名称和可选的where条件及参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">database.delete(<span class="hljs-string">&quot;subs&quot;</span>, <span class="hljs-string">&quot;_id=?&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; id &#125;);  <br></code></pre></td></tr></table></figure><p>通过SQLiteDatabase，我们就可以完成所有的增删改查操作。</p><h2 id="使用SharedPreferences存储应用程序设置"><a href="#使用SharedPreferences存储应用程序设置" class="headerlink" title="使用SharedPreferences存储应用程序设置"></a>使用SharedPreferences存储应用程序设置</h2><p>当我们需要在应用程序中保存用户的一些设置时，由于这些数据基本上是以key-value形式表示的，用SQLite数据库就显得大材小用了，而且，查询起来比较麻烦。实际上，iPhone系统已经为我们提供了SharedPreferences来存储应用程序的设置。</p><p>使用SharedPrefernces非常容易。在Activity中，直接调用getSharedPreferences()方法就可以获得SharedPrefernces的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SharedPreferences</span> <span class="hljs-variable">pref</span> <span class="hljs-operator">=</span> getSharedPreferences(<span class="hljs-string">&quot;app_pref&quot;</span>, MODE_PRIVATE);  <br></code></pre></td></tr></table></figure><p>getSharedPreferences()方法需要两个参数：SharedPrefernces的名称和打开模式。默认的MODE_PRIVATE表示该SharedPrefernces仅仅能够被这个应用程序访问（包含该应用程序所有的组件），其他应用程序均无法访问。MODE_WORLD_READABLE和MODE_WORLD_WRITEABLE模式则表示允许其他应用程序以只读方式和可读写方式访问SharedPrefernces。</p><p>然后，我们就可以通过SharedPreferences的getInt()，getBoolean()等方法获得对应的值，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> pref.getInt(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-number">3</span>);  <br></code></pre></td></tr></table></figure><p>两个参数分别是key和默认值。当SharedPrefernces不存在该key时，将返回默认值。<br>需要保存一个设置时，通过SharedPreferences的edit()方法获得一个SharedPreferences.Editor的实例，然后，调用put方法设置key和对应的value，最后，不要忘记通过commit()方法将更改写入文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">SharedPreferences.<span class="hljs-type">Editor</span> <span class="hljs-variable">editor</span> <span class="hljs-operator">=</span> pref.edit();<br>editor.putBoolean(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-literal">true</span>);<br>editor.putInt(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-number">123</span>);<br>editor.commit(); <br></code></pre></td></tr></table></figure><p>RSS Reader使用SharedPrefernces保存用户的3个设置：</p><table><thead><tr><th align="left">描述</th><th align="center">Key</th><th align="center">类型</th><th align="center">缺省值</th></tr></thead><tbody><tr><td align="left">是否仅显示未读项</td><td align="center">UnreadOnly</td><td align="center">boolean</td><td align="center">true</td></tr><tr><td align="left">刷新频率（分钟）</td><td align="center">Freq</td><td align="center">int</td><td align="center">3</td></tr><tr><td align="left">删除过期项（周）</td><td align="center">Expires</td><td align="center">int</td><td align="center">3</td></tr></tbody></table><p>除了使用SharedPrefernces外，对于一个单独的Activity，还可以通过Bundle保存或读取Activity的一些状态，Bundle实例是通过Activity的onCreate()方法参数传递给Activity的，用Bundle保存的数据只能被这个Activity访问，适合保存Activity自身的状态。</p><h2 id="使用ContentProvider"><a href="#使用ContentProvider" class="headerlink" title="使用ContentProvider"></a>使用ContentProvider</h2><p>我们已经知道，每个iPhone应用程序都有自己独立的存储区，如果应用程序A需要访问应用程序B的数据时，就需要应用程序B提供对外的数据接口。在iPhone平台中，任何应用程序都可以通过ContentProvider对外提供数据访问接口。</p><p>ContentProvider为iPhone应用程序定义了一套统一的数据访问接口，通过URI进行数据操作。例如，iPhone系统的Contacts系统应用程序就提供了访问联系人的ContentProvider。要列出所有联系人，使用的URI为“content:&#x2F;&#x2F;contacts&#x2F;people”，要获得ID为1的某个联系人，使用的URI为“content:&#x2F;&#x2F;contacts&#x2F;people&#x2F;1”。所有的查询和修改操作都可以通过ContentResolver完成。</p><p>通过ContentProvider机制访问第三方应用程序数据的好处在于，无需了解数据是由谁提供的，以及数据的存储方式，所有应用程序都使用统一的接口访问其他应用程序的数据，应用程序之间的耦合度极低。</p><p>以iPhone系统自带的Contacts应用程序为例，我们来通过ContentProvider读取手机联系人信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ContentResolver</span> <span class="hljs-variable">cr</span> <span class="hljs-operator">=</span> getContentResolver();<br><span class="hljs-type">Cursor</span> <span class="hljs-variable">cursor</span> <span class="hljs-operator">=</span> cr.query(People.CONTENT_URI, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>List&lt;String&gt; contacts_names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><span class="hljs-keyword">if</span>(cursor.moveToFirst()) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">column</span> <span class="hljs-operator">=</span> cursor.getColumnIndex(People.NAME);<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> cursor.getString(column);<br>        contacts_names.add(name);<br>    &#125; <span class="hljs-keyword">while</span> (cursor.moveToNext());<br>&#125;<br>cursor.close();<br></code></pre></td></tr></table></figure><p>ContentResolver通过Activity的getContentResolver()获得，然后，根据联系人的URI查询，该URI常量定义在android.provider.Contacts.People.CONTENT_URI中，得到游标对象Cursor，类似JDBC的ResultSet。循环Cursor就可以读取所有的联系人信息。</p><p>ContentResolver还提供insert()、update()和delete()方法，可以完整地实现数据的增删改查操作。<br>封装ContentProvider</p><p>RSS Reader也可以通过ContentProvider对外暴露数据访问接口，这样，其他应用程序就可以访问到Subscription和Item这两种数据。<br>要实现ContentProvider，我们首先要定义URI。在iPhone系统中，URI格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">content:<span class="hljs-comment">//authority/entity/id  </span><br></code></pre></td></tr></table></figure><p>其中，“content:&#x2F;&#x2F;”是iPhone系统定义的schema，无法改变，authority用于区分不同的ContentProvider，由小写字母和“.”构成，在系统中必须唯一，通常由域名和应用程序名构成（注意：iPhone系统应用程序的authority是简单的单词，例如contacts，但是第三方应用要避免简单单词形式的authority），entity是数据类型，若要查询某个ID的entity，则可以附加上“&#x2F;id”。</p><p>下面，我们开始为RSS Reader定义一个ContentProvider，供第三方应用程序使用。</p><p>首先，从android.content.ContentProvider派生一个ReadingProvider：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.expressme.wireless.reader.provider; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadingProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ContentProvider</span> &#123; <br>    <span class="hljs-comment">//... </span><br>&#125; <br></code></pre></td></tr></table></figure><p>其次，我们需要定义一个唯一的authority，可以通过ReadingProvider的完整类名获得：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">AUTHORITY</span> <span class="hljs-operator">=</span> ReadingProvider.class.getName().toLowerCase();  <br></code></pre></td></tr></table></figure><p>我们需要暴露Subscription和Item这两种数据类型。根据ContentProvider的惯例，定义URI如下：</p><p>| 数据类型  | URI  |<br>|:————- |: ————-:|<br>|全部Subscription|content:&#x2F;&#x2F; org.expressme.wireless.reader.provider.readingprovider&#x2F;subscriptions|<br>|某个ID的Subscription|content:&#x2F;&#x2F; org.expressme.wireless.reader.provider.readingprovider&#x2F;subscriptions&#x2F;#|<br>|全部Item|content:&#x2F;&#x2F; org.expressme.wireless.reader.provider.readingprovider&#x2F;items|<br>|某个ID的Item|content:&#x2F;&#x2F; org.expressme.wireless.reader.provider.readingprovider&#x2F;items&#x2F;#|</p><p>当第三方应用程序通过URI对我们的数据进行增删改查操作时，相应的insert()、delete()、update()和query()方法就会执行。我们需要实现这4个方法，并且，根据不同的URI做不同的操作。</p><p>我们不需要编写解析URI的代码，iPhone系统已经为我们提供了UriMatcher来匹配URI。只需要为以上4种URI定义好常量，添加匹配规则即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_ALL_SUBSCRIPTIONS</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_SINGLE_SUBSCRIPTION</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_ALL_ITEMS</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_SINGLE_ITEM</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">UriMatcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UriMatcher</span>(UriMatcher.NO_MATCH);<br><span class="hljs-keyword">static</span> &#123;<br>    matcher.addURI(AUTHORITY, <span class="hljs-string">&quot;subscriptions&quot;</span>, TYPE_ALL_SUBSCRIPTIONS);<br>    matcher.addURI(AUTHORITY, <span class="hljs-string">&quot;subscriptions/#&quot;</span>, TYPE_SINGLE_SUBSCRIPTION);<br>    matcher.addURI(AUTHORITY, <span class="hljs-string">&quot;items&quot;</span>, TYPE_ALL_ITEMS);<br>    matcher.addURI(AUTHORITY, <span class="hljs-string">&quot;items/#&quot;</span>, TYPE_SINGLE_ITEM);<br>&#125;<br></code></pre></td></tr></table></figure><p>以query()为例，根据传入的Uri，分别查询所有的Subscription，某个ID的Subscription，所有的Item和某个ID的Item：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Cursor <span class="hljs-title function_">query</span><span class="hljs-params">(Uri uri, String[] projection, String selection, String[] selectionArgs, String sort)</span> &#123;<br>    <span class="hljs-keyword">switch</span> (matcher.match(uri)) &#123;<br>    <span class="hljs-keyword">case</span> TYPE_ALL_SUBSCRIPTIONS:<br>        <span class="hljs-keyword">return</span> operator.getCurrentDb().query(SubscriptionColumns.TABLE_NAME, projection, selection, selectionArgs,<br>                <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, sort);<br>    <span class="hljs-keyword">case</span> TYPE_SINGLE_SUBSCRIPTION:<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s_id</span> <span class="hljs-operator">=</span> uri.getPathSegments().get(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> operator.getCurrentDb().query(SubscriptionColumns.TABLE_NAME, projection,<br>                SubscriptionColumns._ID + <span class="hljs-string">&quot;=&quot;</span> + s_id, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">case</span> TYPE_ALL_ITEMS:<br>        <span class="hljs-keyword">return</span> operator.getCurrentDb().query(ItemColumns.TABLE_NAME, projection, selection, selectionArgs, <span class="hljs-literal">null</span>,<br>                <span class="hljs-literal">null</span>, sort);<br>    <span class="hljs-keyword">case</span> TYPE_SINGLE_ITEM:<br>        <span class="hljs-type">String</span> <span class="hljs-variable">i_id</span> <span class="hljs-operator">=</span> uri.getPathSegments().get(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> operator.getCurrentDb().query(ItemColumns.TABLE_NAME, projection, ItemColumns._ID + <span class="hljs-string">&quot;=&quot;</span> + i_id, <span class="hljs-literal">null</span>,<br>                <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Uri: &quot;</span> + uri.toString());<br>&#125;<br><br></code></pre></td></tr></table></figure><p>insert()和query()类似，但是，仅允许TYPE_ALL_SUBSCRIPTIONS和TYPE_ALL_ITEMS这两种类型，insert()和query()类似，但是，仅允许TYPE_ALL_SUBSCRIPTIONS和TYPE_ALL_ITEMS这两种类型，并且，需要返回新插入数据的Uri，因为需要向客户端返回包含ID的URI。使用静态方法ContentUris.withAppendedId就可以构造一个含ID的Uri对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Uri <span class="hljs-title function_">insert</span><span class="hljs-params">(Uri uri, ContentValues initialValues)</span> &#123; <br>    <span class="hljs-type">long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>; <br>    <span class="hljs-keyword">switch</span> (matcher.match(uri)) &#123; <br>        <span class="hljs-keyword">case</span> TYPE_ALL_SUBSCRIPTIONS: <br>            id = operator.getCurrentDb().insertOrThrow(SubscriptionColumns.TABLE_NAME, <span class="hljs-literal">null</span>, initialValues); <br>            <span class="hljs-keyword">return</span> ContentUris.withAppendedId(SubscriptionColumns.URI, <span class="hljs-number">0L</span>); <br>        <span class="hljs-keyword">case</span> TYPE_ALL_ITEMS: <br>            id = operator.getCurrentDb().insertOrThrow(ItemColumns.TABLE_NAME, <span class="hljs-literal">null</span>, initialValues); <br>            <span class="hljs-keyword">return</span> ContentUris.withAppendedId(ItemColumns.URI, id); <br>    &#125; <br>    <br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Uri: &quot;</span> + uri.toString()); <br>&#125;<br></code></pre></td></tr></table></figure><p>当第三方应用程序使用我们的ContentProvider时，还需要知道URI、字段名称等信息，这些常量定义在SubscriptionColumns和ItemColumns中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SubscriptionColumns</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseColumns</span> &#123;   <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Uri</span> <span class="hljs-variable">URI</span> <span class="hljs-operator">=</span> Uri.parse(<span class="hljs-string">&quot;content://&quot;</span> + ReadingProvider.AUTHORITY + <span class="hljs-string">&quot;/subscriptions&quot;</span>);   <br>  <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TABLE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;subs&quot;</span>;   <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;url&quot;</span>;   <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TITLE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;title&quot;</span>;   <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DESCRIPTION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;description&quot;</span>;   <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LAST_VISITED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;last_visited&quot;</span>;   <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FREQUENCY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;frequency&quot;</span>;   <br>  <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] ALL_COLUMNS = &#123; _ID, URL, TITLE, DESCRIPTION, LAST_VISITED, FREQUENCY &#125;;   <br>&#125; <br></code></pre></td></tr></table></figure><p>现在，我们已经实现了一个完整的ContentProvider，可以对外提供两种类型的数据访问接口。对于RSS Reader自身的Activity来说，需要做的代码重构就是使用ContentProvider来代替直接操作数据库的ReadingOperator，这样，就使得应用程序各组件之间的耦合程度更低了，此外，第三方应用程序也可以通过ContentProvider读取RSS Reader应用的数据，而无需知道数据的提供者和存储方式。</p>]]></content>
    
    
    <categories>
      
      <category>RSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020年第02周</title>
    <link href="/2020/01/08/2020Week02/"/>
    <url>/2020/01/08/2020Week02/</url>
    
    <content type="html"><![CDATA[<h2 id="2020年第02周（2020-01-06-2020-01-12）"><a href="#2020年第02周（2020-01-06-2020-01-12）" class="headerlink" title="2020年第02周（2020&#x2F;01&#x2F;06~2020&#x2F;01&#x2F;12）"></a>2020年第02周（2020&#x2F;01&#x2F;06~2020&#x2F;01&#x2F;12）</h2><ol><li><a href="https://blog.csdn.net/qianbin3200896/article/details/90180980">VSCode 中 Python 代码自动格式化方法</a></li><li><a href="https://www.cnblogs.com/xiaojwang/p/11331202.html">用 VSCode 配置 Python 开发环境</a></li><li><a href="https://blog.csdn.net/BNK_along/article/details/84000953">VSCode 写 Python 时的代码错误提醒和自动格式化</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>VSCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目开发之 LiteRSS</title>
    <link href="/2020/01/08/LiteRSS/"/>
    <url>/2020/01/08/LiteRSS/</url>
    
    <content type="html"><![CDATA[<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://www.jianshu.com/p/bd4bcc717503">Swift4.x 截取字符串、从字符串中查找子串位置</a></li><li><a href="https://www.jianshu.com/p/7c2e456c6734">Node.js实现简易版”RSSReader”</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>RSS</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020年第01周</title>
    <link href="/2020/01/03/2020Week01/"/>
    <url>/2020/01/03/2020Week01/</url>
    
    <content type="html"><![CDATA[<h2 id="2020年第01周（2019-12-30-2020-01-05）"><a href="#2020年第01周（2019-12-30-2020-01-05）" class="headerlink" title="2020年第01周（2019&#x2F;12&#x2F;30~2020&#x2F;01&#x2F;05）"></a>2020年第01周（2019&#x2F;12&#x2F;30~2020&#x2F;01&#x2F;05）</h2><ol><li><a href="https://www.cnblogs.com/zp900704/p/11688041.html">使用nodejs操作mongodb的正确姿势</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nodejs</tag>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>verdaccio</title>
    <link href="/2019/12/26/verdaccio/"/>
    <url>/2019/12/26/verdaccio/</url>
    
    <content type="html"><![CDATA[<h1 id="Verdaccio-安装"><a href="#Verdaccio-安装" class="headerlink" title="Verdaccio 安装"></a>Verdaccio 安装</h1><ul><li>安装Verdaccio</li></ul><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">npm install</span> <span class="hljs-literal">-</span><span class="hljs-comment">g verdaccio</span> <span class="hljs-literal">--</span><span class="hljs-comment">unsafe</span><span class="hljs-literal">-</span><span class="hljs-comment">perm=true</span> <span class="hljs-literal">--</span><span class="hljs-comment">allow</span><span class="hljs-literal">-</span><span class="hljs-comment">root</span><br></code></pre></td></tr></table></figure><ul><li>启动前配置verdaccio文件<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">vim /root/.config/verdaccio/config.yaml<br></code></pre></td></tr></table></figure></li></ul><p>&#x3D; 在末尾添加：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">listen</span>:<br>  <span class="hljs-attribute">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">4873</span><br></code></pre></td></tr></table></figure><ul><li>完整配置文件：  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#</span><br><span class="hljs-comment"># This is the default config file. It allows all users to do anything,</span><br><span class="hljs-comment"># so don&#x27;t use it on production systems.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Look here for more config file examples:</span><br><span class="hljs-comment"># https://github.com/verdaccio/verdaccio/tree/master/conf</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment"># path to a directory with all packages</span><br><span class="hljs-attr">storage:</span> <span class="hljs-string">/data/verdacciodata/storage</span><br><span class="hljs-comment"># path to a directory with plugins to include</span><br><span class="hljs-attr">plugins:</span> <span class="hljs-string">./plugins</span><br><br><span class="hljs-attr">web:</span><br>  <span class="hljs-attr">title:</span> <span class="hljs-string">Verdaccio</span><br>  <span class="hljs-comment"># comment out to disable gravatar support</span><br>  <span class="hljs-comment"># gravatar: false</span><br>  <span class="hljs-comment"># by default packages are ordercer ascendant (asc|desc)</span><br>  <span class="hljs-comment"># sort_packages: asc</span><br><br><span class="hljs-attr">auth:</span><br>  <span class="hljs-attr">htpasswd:</span><br>    <span class="hljs-attr">file:</span> <span class="hljs-string">./htpasswd</span><br>    <span class="hljs-comment"># Maximum amount of users allowed to register, defaults to &quot;+inf&quot;.</span><br>    <span class="hljs-comment"># You can set this to -1 to disable registration.</span><br>    <span class="hljs-comment"># max_users: 1000</span><br><br><span class="hljs-comment"># a list of other known repositories we can talk to</span><br><span class="hljs-attr">uplinks:</span><br>  <span class="hljs-attr">npmjs:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">https://registry.npmjs.org/</span><br><br><span class="hljs-attr">packages:</span><br>  <span class="hljs-string">&#x27;@*/*&#x27;</span><span class="hljs-string">:</span><br>    <span class="hljs-comment"># scoped packages</span><br>    <span class="hljs-attr">access:</span> <span class="hljs-string">$all</span><br>    <span class="hljs-attr">publish:</span> <span class="hljs-string">$authenticated</span><br>    <span class="hljs-attr">unpublish:</span> <span class="hljs-string">$authenticated</span><br>    <span class="hljs-attr">proxy:</span> <span class="hljs-string">npmjs</span><br><br>  <span class="hljs-string">&#x27;**&#x27;</span><span class="hljs-string">:</span><br>    <span class="hljs-comment"># allow all users (including non-authenticated users) to read and</span><br>    <span class="hljs-comment"># publish all packages</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># you can specify usernames/groupnames (depending on your auth plugin)</span><br>    <span class="hljs-comment"># and three keywords: &quot;$all&quot;, &quot;$anonymous&quot;, &quot;$authenticated&quot;</span><br>    <span class="hljs-attr">access:</span> <span class="hljs-string">$all</span><br><br>    <span class="hljs-comment"># allow all known users to publish/publish packages</span><br>    <span class="hljs-comment"># (anyone can register by default, remember?)</span><br>    <span class="hljs-attr">publish:</span> <span class="hljs-string">$authenticated</span><br>    <span class="hljs-attr">unpublish:</span> <span class="hljs-string">$authenticated</span><br><br>    <span class="hljs-comment"># if package is not available locally, proxy requests to &#x27;npmjs&#x27; registry</span><br>    <span class="hljs-attr">proxy:</span> <span class="hljs-string">npmjs</span><br><br><span class="hljs-comment"># You can specify HTTP/1.1 server keep alive timeout in seconds for incoming connections.</span><br><span class="hljs-comment"># A value of 0 makes the http server behave similarly to Node.js versions prior to 8.0.0, which did not have a keep-alive timeout.</span><br><span class="hljs-comment"># WORKAROUND: Through given configuration you can workaround following issue https://github.com/verdaccio/verdaccio/issues/301. Set to 0 in case 60 is not enough.</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">keepAliveTimeout:</span> <span class="hljs-number">60</span><br><br><span class="hljs-attr">middlewares:</span><br>  <span class="hljs-attr">audit:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># log settings</span><br><span class="hljs-attr">logs:</span><br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">type:</span> <span class="hljs-string">stdout</span>, <span class="hljs-attr">format:</span> <span class="hljs-string">pretty</span>, <span class="hljs-attr">level:</span> <span class="hljs-string">http</span> &#125;<br>  <span class="hljs-comment">#- &#123;type: file, path: verdaccio.log, level: info&#125;</span><br><span class="hljs-comment">#experiments:</span><br><span class="hljs-comment">#  # support for npm token command</span><br><span class="hljs-comment">#  token: false</span><br><br><span class="hljs-attr">listen:</span><br>  <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:4873</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="打开-4873-端口的防火墙："><a href="#打开-4873-端口的防火墙：" class="headerlink" title="打开 4873 端口的防火墙："></a>打开 4873 端口的防火墙：</h2><ol><li><p>查看firewall服务状态</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status firewalld</span><br></code></pre></td></tr></table></figure></li><li><p>查看firewall的状态</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--state</span><br></code></pre></td></tr></table></figure></li><li><p>开启、重启、关闭、firewalld.service服务</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 开启</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>firewalld start<br><span class="hljs-comment"># 重启</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>firewalld restart<br><span class="hljs-comment"># 关闭</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>firewalld stop<br>```  <br><br>4. 查看防火墙规则<br></code></pre></td></tr></table></figure><p>firewall-cmd –list-all </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs"><br>5、查询、开放、关闭端口  <br></code></pre></td></tr></table></figure></li></ol><h1 id="查询端口是否开放"><a href="#查询端口是否开放" class="headerlink" title="查询端口是否开放"></a>查询端口是否开放</h1><p>firewall-cmd –query-port&#x3D;4873&#x2F;tcp</p><h1 id="开放4873端口"><a href="#开放4873端口" class="headerlink" title="开放4873端口"></a>开放4873端口</h1><p>firewall-cmd –permanent –add-port&#x3D;4873&#x2F;tcp</p><h1 id="移除端口"><a href="#移除端口" class="headerlink" title="移除端口"></a>移除端口</h1><p>firewall-cmd –permanent –remove-port&#x3D;4873&#x2F;tcp<br>#重启防火墙(修改配置后要重启防火墙)<br>firewall-cmd –reload</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 参数解释</span><br><span class="hljs-bullet">1.</span> firwall-cmd：是Linux提供的操作firewall的一个工具；<br><span class="hljs-bullet">2.</span> --permanent：表示设置为持久；<br><span class="hljs-bullet">3.</span> --add-port：标识添加的端口；<br><br><span class="hljs-section"># 设置 npm 源</span><br><span class="hljs-bullet">-</span> 添加源<br></code></pre></td></tr></table></figure><p>npm add S229 <a href="http://10.100.254.229:4873/">http://10.100.254.229:4873</a></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-bullet">- </span>修改源<br></code></pre></td></tr></table></figure><p>nrm use S229</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-bullet">- </span>添加用户<br></code></pre></td></tr></table></figure><p>npm adduser –registry <a href="http://10.100.254.229:4873/">http://10.100.254.229:4873</a></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-bullet">- </span>登陆<br></code></pre></td></tr></table></figure><p>npm login</p><pre><code class="hljs">输入添加用户时的用户名密码然后就可以本机往源上发布应用了。## 参考文档1. [CentOS 7.3防火墙配置](https://www.cnblogs.com/xxoome/p/7115614.html)2. [CentOS 7 搭建verdaccio](https://blog.csdn.net/xujiamin0022016/article/details/94585366)3. [CentOS 系统使用verdaccio搭建npm私库](https://www.cnblogs.com/sghy/p/9759010.html)</code></pre>]]></content>
    
    
    <categories>
      
      <category>NodeJS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>verdaccio</tag>
      
      <tag>firewall</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第51周</title>
    <link href="/2019/12/19/2019Week51/"/>
    <url>/2019/12/19/2019Week51/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第51周（2019-12-16-2019-12-22）"><a href="#2019年第51周（2019-12-16-2019-12-22）" class="headerlink" title="2019年第51周（2019&#x2F;12&#x2F;16~2019&#x2F;12&#x2F;22）"></a>2019年第51周（2019&#x2F;12&#x2F;16~2019&#x2F;12&#x2F;22）</h2><ol><li><a href="https://www.cnblogs.com/gme5/p/11765151.html">CentOS 7 安装 MongoDB</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB</title>
    <link href="/2019/12/19/MongoDB/"/>
    <url>/2019/12/19/MongoDB/</url>
    
    <content type="html"><![CDATA[<h2 id="1-配置存储库"><a href="#1-配置存储库" class="headerlink" title="1. 配置存储库"></a>1. 配置存储库</h2><p>创建一个&#x2F;etc&#x2F;yum.repos.d&#x2F;mongodb-enterprise.repo文件，以便可以使用以下yum命令直接安装MongoDB Enterprise。内容如下 ：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mongodb-enterprise]</span><br><span class="hljs-attr">name</span>=MongoDB Enterprise Repository<br><span class="hljs-attr">baseurl</span>=https://repo.mongodb.com/yum/redhat/<span class="hljs-variable">$releasever</span>/mongodb-enterprise/<span class="hljs-number">4.2</span>/<span class="hljs-variable">$basearch</span>/<br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgkey</span>=https://www.mongodb.org/static/pgp/server-<span class="hljs-number">4.2</span>.asc<br></code></pre></td></tr></table></figure><h2 id="2-执行命令安装"><a href="#2-执行命令安装" class="headerlink" title="2. 执行命令安装"></a>2. 执行命令安装</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> -y mongodb-enterprise<br></code></pre></td></tr></table></figure><h2 id="3-禁止yum自动升级MongoDB，在-etc-yum-conf中加入以下内容排除："><a href="#3-禁止yum自动升级MongoDB，在-etc-yum-conf中加入以下内容排除：" class="headerlink" title="3. 禁止yum自动升级MongoDB，在&#x2F;etc&#x2F;yum.conf中加入以下内容排除："></a>3. 禁止yum自动升级MongoDB，在&#x2F;etc&#x2F;yum.conf中加入以下内容排除：</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">exclude</span>=mongodb-enterprise,mongodb-enterprise-server,mongodb-enterprise-shell,mongodb-enterprise-mongos,mongodb-enterprise-tools<br></code></pre></td></tr></table></figure><h2 id="4-启动MongoDB服务"><a href="#4-启动MongoDB服务" class="headerlink" title="4. 启动MongoDB服务"></a>4. 启动MongoDB服务</h2><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl start mongod<br><span class="hljs-comment">#设置开机启动</span><br><span class="hljs-params">system</span>ctl enable mongod<br></code></pre></td></tr></table></figure><h2 id="5-开启允许远程登录"><a href="#5-开启允许远程登录" class="headerlink" title="5. 开启允许远程登录"></a>5. 开启允许远程登录</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vi</span> /etc/mongod.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><p>找到net:项，修改如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">net:</span><br><span class="hljs-symbol">  port:</span> <span class="hljs-number">27017</span><br><span class="hljs-symbol">  bindIp:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> <span class="hljs-meta">#允许任意IP连接</span><br></code></pre></td></tr></table></figure><h2 id="6-然后重启mongo"><a href="#6-然后重启mongo" class="headerlink" title="6. 然后重启mongo"></a>6. 然后重启mongo</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart mongod</span><br></code></pre></td></tr></table></figure><h2 id="7-开放MongoDB访问端口：27017"><a href="#7-开放MongoDB访问端口：27017" class="headerlink" title="7. 开放MongoDB访问端口：27017"></a>7. 开放MongoDB访问端口：27017</h2><ul><li>查看27017端口是否开启<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --query-port=27017/tcp</span><br></code></pre></td></tr></table></figure></li><li>开启27017端口<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=27017/tcp --permanent<br></code></pre></td></tr></table></figure></li><li>重启防火墙<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--reload</span><br></code></pre></td></tr></table></figure></li><li>再次查看27017端口是否开启<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --query-port=27017/tcp</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="8-测试远程访问"><a href="#8-测试远程访问" class="headerlink" title="8. 测试远程访问"></a>8. 测试远程访问</h2><p>最后就可以远程用 NoSQLBooster for MongoDB 客户端访问了</p><p>参考文档：<a href="https://www.cnblogs.com/gme5/p/11765151.html">CentOS 7 安装 MongoDB</a></p>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL</title>
    <link href="/2019/12/19/MySQL/"/>
    <url>/2019/12/19/MySQL/</url>
    
    <content type="html"><![CDATA[<h1 id="在-CentOS-下安装"><a href="#在-CentOS-下安装" class="headerlink" title="在 CentOS 下安装"></a>在 CentOS 下安装</h1><h2 id="一、安装YUM-Repo"><a href="#一、安装YUM-Repo" class="headerlink" title="一、安装YUM Repo"></a>一、安装YUM Repo</h2><ol><li>由于CentOS 的yum源中没有mysql，需要到mysql的官网下载yum repo配置文件。<br>下载命令：<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>dev.mysql.com<span class="hljs-regexp">/get/my</span>sql57-community-release-el7-<span class="hljs-number">9</span>.noarch.rpm<br></code></pre></td></tr></table></figure></li><li>然后进行repo的安装：<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -ivh mysql57-community-release-el7-<span class="hljs-number">9</span>.noarch.rpm<br></code></pre></td></tr></table></figure></li></ol><p>执行完成后会在&#x2F;etc&#x2F;yum.repos.d&#x2F;目录下生成两个repo文件mysql-community.repo mysql-community-source.repo</p><h2 id="二、使用yum命令即可完成安装"><a href="#二、使用yum命令即可完成安装" class="headerlink" title="二、使用yum命令即可完成安装"></a>二、使用yum命令即可完成安装</h2><p>注意：必须进入到 &#x2F;etc&#x2F;yum.repos.d&#x2F;目录后再执行以下脚本</p><p>1、安装命令：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">yum install mysql-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>2、启动msyql：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> mysqld <span class="hljs-comment">#启动MySQL</span><br></code></pre></td></tr></table></figure><p>3、获取安装时的临时密码（在第一次登录时就是用这个密码）：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">grep <span class="hljs-string">&#x27;temporary password&#x27;</span> /<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/mysqld.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><h2 id="三、登录："><a href="#三、登录：" class="headerlink" title="三、登录："></a>三、登录：</h2><p>1、方式一（已验证）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -u root -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><p>然后输入密码（刚刚获取的临时密码）</p><h2 id="四、登录成功后修改密码"><a href="#四、登录成功后修改密码" class="headerlink" title="四、登录成功后修改密码"></a>四、登录成功后修改密码</h2><ol><li><p>首先需要设置密码的验证强度等级，设置 validate_password_policy 的全局参数为 LOW 即可，输入设值语句</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> global <span class="hljs-attribute">validate_password_policy</span>=LOW;<br></code></pre></td></tr></table></figure><p>进行设值，</p></li><li><p>当前密码长度为 8 ，如果不介意的话就不用修改了，按照通用的来讲，设置为 6 位的密码，设置 validate_password_length 的全局参数为 6 即可，输入设值语句</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> global <span class="hljs-attribute">validate_password_length</span>=6;<br></code></pre></td></tr></table></figure><p>进行设值</p></li><li><p>现在可以为 mysql 设置简单密码了，只要满足六位的长度即可，输入修改语句</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br></code></pre></td></tr></table></figure><p>可以看到修改成功，表示密码策略修改成功了！！！</p></li></ol><h2 id="打开防火墙3306端口"><a href="#打开防火墙3306端口" class="headerlink" title="打开防火墙3306端口"></a>打开防火墙3306端口</h2><ul><li><p>添加指定需要开放的端口：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=3306/tcp</span> <span class="hljs-literal">--</span><span class="hljs-comment">permanent</span><br></code></pre></td></tr></table></figure></li><li><p>重载入添加的端口：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--reload</span><br></code></pre></td></tr></table></figure></li><li><p>查询指定端口是否开启成功：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --query-port=3306/tcp</span><br></code></pre></td></tr></table></figure></li></ul><p>最后就可以远程用 Navicat 客户端访问了</p><p>参考文档：<a href="https://blog.csdn.net/wohiusdashi/article/details/89358071">CentOS7下安装mysql5.7</a></p>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第49周</title>
    <link href="/2019/12/02/2019Week49/"/>
    <url>/2019/12/02/2019Week49/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第49周（2019-12-02-2019-12-08）"><a href="#2019年第49周（2019-12-02-2019-12-08）" class="headerlink" title="2019年第49周（2019&#x2F;12&#x2F;02~2019&#x2F;12&#x2F;08）"></a>2019年第49周（2019&#x2F;12&#x2F;02~2019&#x2F;12&#x2F;08）</h2><ol><li><a href="http://baijiahao.baidu.com/s?id=1597912220585159305">谷歌网盘快速下载大文件方法</a></li><li><a href="https://www.52pojie.cn/thread-819833-1-1.html">推荐另一个映射One Drive的软件。支持XP，和Windows server系统</a></li><li><a href="https://www.cnblogs.com/52fhy/p/5991344.html">Docker之Compose服务编排</a></li><li><a href="https://juejin.im/post/5d3955f851882551c37fbeef">Docker零基础到实战 三剑客之 Compose</a></li><li><a href="https://juejin.im/post/5dde46b2e51d4554350715f5">node 项目从构建到使用 jenkins + docker + nginx + mysql + redis 自动化部署</a></li><li><a href="https://juejin.im/post/5d369d6e5188253a2e1b93ff">jenkins+docker+vue项目的自动部署环境(案例)</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>谷歌网盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第48周</title>
    <link href="/2019/11/26/2019Week48/"/>
    <url>/2019/11/26/2019Week48/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第48周（2019-11-25-2019-12-01）"><a href="#2019年第48周（2019-11-25-2019-12-01）" class="headerlink" title="2019年第48周（2019&#x2F;11&#x2F;25~2019&#x2F;12&#x2F;01）"></a>2019年第48周（2019&#x2F;11&#x2F;25~2019&#x2F;12&#x2F;01）</h2><ol><li><a href="https://www.cnblogs.com/eczhou/p/7860616.html">NodeJs中类定义及类使用</a></li><li><a href="https://coderdream.github.io/2019/11/14/mocha/">mocha 教程</a></li><li><a href="https://www.jianshu.com/p/47575895bc54">使用mocha进行单元测试(同步与异步)</a></li><li><a href="https://www.jianshu.com/p/c2ff916fadc5">nodejs中的 Promise 基本操作</a></li><li><a href="https://www.cnblogs.com/wwjchina/p/10949806.html">ubuntu 下 mysql 数据库存储路径修改</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mocha</tag>
      
      <tag>nodejs</tag>
      
      <tag>mongodb</tag>
      
      <tag>Promise</tag>
      
      <tag>mysql</tag>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第47周</title>
    <link href="/2019/11/20/2019Week47/"/>
    <url>/2019/11/20/2019Week47/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第47周（2019-11-18-2019-11-24）"><a href="#2019年第47周（2019-11-18-2019-11-24）" class="headerlink" title="2019年第47周（2019&#x2F;11&#x2F;18~2019&#x2F;11&#x2F;24）"></a>2019年第47周（2019&#x2F;11&#x2F;18~2019&#x2F;11&#x2F;24）</h2><ol><li><a href="http://tieba.baidu.com/p/6269570072">vmware 15.5 pro unlocker 安装出现问题，怎么解决</a></li><li><a href="https://blog.csdn.net/zhaoxiang66/article/details/79894209">利用nodejs对本地json文件进行增删改查</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JSON</tag>
      
      <tag>VMWare</tag>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mocha</title>
    <link href="/2019/11/14/mocha/"/>
    <url>/2019/11/14/mocha/</url>
    
    <content type="html"><![CDATA[<h2 id="应用开发"><a href="#应用开发" class="headerlink" title="应用开发"></a>应用开发</h2><ul><li><p>package.json  </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&#123;<br>  <span class="hljs-string">...</span><br>  <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;    <br>    <span class="hljs-string">&quot;request&quot;</span>: <span class="hljs-string">&quot;^2.88.0&quot;</span>,<br>    <span class="hljs-string">&quot;chai&quot;</span>: <span class="hljs-string">&quot;^4.2.0&quot;</span>,<br>    <span class="hljs-string">&quot;mocha&quot;</span>: <span class="hljs-string">&quot;^6.2.0&quot;</span>,<br>    <span class="hljs-string">&quot;mochawesome&quot;</span>: <span class="hljs-string">&quot;^4.1.0&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>join_quant_test.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-comment">//let expect = require(&#x27;chai&#x27;).expect;</span><br><span class="hljs-keyword">const</span> &#123;describe&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mocha&quot;</span>);<br><span class="hljs-keyword">let</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;request&#x27;</span>);<br><br><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;Join Quant 聚宽的 API 的测试&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> url, token;<br>    <span class="hljs-comment">// 在本区块所有测试用例执行之前执行 （执行异步方法）</span><br>    <span class="hljs-title function_">before</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27; # before # &#x27;</span>);<br>        url = <span class="hljs-string">&quot;https://dataapi.joinquant.com/apis&quot;</span>;<br>        <span class="hljs-keyword">const</span> requestData = &#123;<br>            <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;get_token&quot;</span>,<br>            <span class="hljs-string">&quot;mob&quot;</span>: <span class="hljs-string">&quot;13995526589&quot;</span>,<br>            <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;Cq.123456&quot;</span><br>        &#125;;<br>        <span class="hljs-title function_">request</span>(&#123;<br>            <span class="hljs-attr">url</span>: url,<br>            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>            <span class="hljs-attr">body</span>:<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(requestData)<br>        &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">error, response, _token</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(_token);<br>            token = _token;<br>            <span class="hljs-title function_">done</span>();<br>        &#125;);<br>    &#125;);<br><br>    <span class="hljs-comment">// 在本区块所有测试用例执行之后执行</span><br>    <span class="hljs-title function_">after</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27; # after # &#x27;</span>);<br>    &#125;);<br><br>    <span class="hljs-comment">// 在本区块每个测试用例之前执行</span><br>    <span class="hljs-title function_">beforeEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27; # beforeEach # &#x27;</span>);<br>    &#125;);<br><br>    <span class="hljs-comment">// 在本区块每个测试用例之后执行</span><br>    <span class="hljs-title function_">afterEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27; # afterEach # &#x27;</span>);<br>    &#125;);<br><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;get_security_info&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;## &#x27;</span> + token);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;## &#x27;</span> + url);<br>        <span class="hljs-keyword">const</span> requestData = &#123;<br>            <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;get_security_info&quot;</span>,<br>            <span class="hljs-string">&quot;token&quot;</span>: token,<br>            <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;502050.XSHG&quot;</span><br>        &#125;;<br>        <span class="hljs-title function_">request</span>(&#123;<br>            <span class="hljs-attr">url</span>: url,<br>            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>            <span class="hljs-attr">body</span>:<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(requestData)<br>        &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">error, response, body</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(body)<br>        &#125;);<br><br>        <span class="hljs-comment">// const result = await performanceResultService.findPgWorkIds(body, ctx);</span><br>        <span class="hljs-comment">// console.log(&#x27;###########&#x27;);</span><br>        <span class="hljs-comment">// console.log(result);</span><br>        <span class="hljs-comment">// expect(10).to.be.equal(result.length);</span><br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>Console  </p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean"> # before # <br><span class="hljs-number">5</span>b6a9ba5b1f07ab76c2b7b2e04ca09bba42cc0 # beforeEach # <br>## <span class="hljs-number">5</span>b6a9ba5b1f07ab76c2b7b2e04ca09bba42cc0<br>## https:<span class="hljs-comment">//dataapi.joinquant.com/apis</span><br> # afterEach # <br> # after # <span class="hljs-keyword">code</span>,display_name,name,start_date,end_date,type,parent<br><span class="hljs-number">502050.</span>XSHG,上证<span class="hljs-number">50</span>B,SZ50B,<span class="hljs-number">2015</span><span class="hljs-number">-04</span><span class="hljs-number">-27</span>,<span class="hljs-number">2200</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span>,fjb,<span class="hljs-number">502048.</span>XSHG<br></code></pre></td></tr></table></figure></li></ul><h2 id="命令行方式执行mocha"><a href="#命令行方式执行mocha" class="headerlink" title="命令行方式执行mocha"></a>命令行方式执行mocha</h2><ul><li><p>npm 允许在package.json文件里面，使用scripts字段定义脚本命令。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&#123;<br>  <span class="hljs-string">//</span> <span class="hljs-string">...</span><br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;node build.js&quot;</span>,<br><span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;mocha&quot;</span>,<br><span class="hljs-string">&quot;test:mocha&quot;</span>: <span class="hljs-string">&quot;nyc -a --reporter=html mocha --recursive test/mapstorage_test.js&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>命令行下使用npm run命令，就可以执行这段脚本。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ npm run build <br><span class="hljs-comment"># 等同于执行</span><br>$ <span class="hljs-keyword">node</span> <span class="hljs-title">build</span>.js<br></code></pre></td></tr></table></figure></li><li><p>说明：</p></li></ul><ol><li>npm run test，执行所有的test文件；</li><li>npm run test:mocha，执行特定的文件test&#x2F;mapstorage_test.js；</li><li>nyc -a –reporter&#x3D;html，生成覆盖率报告。</li></ol><h2 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h2><ol><li><a href="https://www.jianshu.com/p/47575895bc54">使用mocha进行单元测试</a></li><li><a href="https://cloud.tencent.com/developer/ask/116244">mocha before() 中的异步函数在it() spec之前完成了吗？</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html">npm scripts 使用指南</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>mocha</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mocha</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第46周</title>
    <link href="/2019/11/13/2019Week46/"/>
    <url>/2019/11/13/2019Week46/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第46周（2019-11-11-2019-11-17）"><a href="#2019年第46周（2019-11-11-2019-11-17）" class="headerlink" title="2019年第46周（2019&#x2F;11&#x2F;11~2019&#x2F;11&#x2F;17）"></a>2019年第46周（2019&#x2F;11&#x2F;11~2019&#x2F;11&#x2F;17）</h2><ol><li><a href="https://blog.csdn.net/caonuoqi/article/details/51699865">Microsoft Office 2016(ProPlus&#x2F;Visio&#x2F;Project) VOL 简体中文版</a></li><li>&nbsp;<br><escape><span id="more"></span></escape></li></ol>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Office</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第45周</title>
    <link href="/2019/11/08/2019Week45/"/>
    <url>/2019/11/08/2019Week45/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第45周（2019-11-04-2019-11-10）"><a href="#2019年第45周（2019-11-04-2019-11-10）" class="headerlink" title="2019年第45周（2019&#x2F;11&#x2F;04~2019&#x2F;11&#x2F;10）"></a>2019年第45周（2019&#x2F;11&#x2F;04~2019&#x2F;11&#x2F;10）</h2><ol><li><a href="https://www.cnblogs.com/hujunzheng/p/10508044.html">使用pdfBox实现pdf转图片，解决中文方块乱码等问题</a></li><li><a href="http://www.xwood.net/_site_domain_/_root/5870/5874/t_c279299.html">通过apache的pdfbox、poi定义PdfToImg工具类将pdf转图片格式、多图片进行合并一张等逻辑处理</a></li><li><a href="https://www.jianshu.com/p/7222874ce005">pdf转图片程序(java pdfbox实现)</a></li><li><a href="https://www.jb51.net/article/144380.htm">Java实现PDF转图片的方法(可用)</a> </li><li><a href="https://zhidao.baidu.com/question/54064551.html">Java中怎样获得一个文件夹中的所有文件名</a></li><li><a href="https://blog.csdn.net/u014155085/article/details/86077614">使用pdfBox实现pdf转图片，解决中文方块乱码等问题</a></li><li><a href="https://blog.csdn.net/xqnode/article/details/80525995">Java pdf和jpg互转</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Acrobat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第44周</title>
    <link href="/2019/10/31/2019Week44/"/>
    <url>/2019/10/31/2019Week44/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第44周（2019-10-28-2019-11-03）"><a href="#2019年第44周（2019-10-28-2019-11-03）" class="headerlink" title="2019年第44周（2019&#x2F;10&#x2F;28~2019&#x2F;11&#x2F;03）"></a>2019年第44周（2019&#x2F;10&#x2F;28~2019&#x2F;11&#x2F;03）</h2><ol><li><p><a href="https://www.52pojie.cn/thread-1033848-1-1.html">Adobe Acrobat DC 解决打开强制登录</a></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">Adobe Acrobat DC 使用注册机激活，弹出试用期到期，或者必须使用账号登录才能使用。<br><br>可以通过以下方法尝试解决：<br><span class="hljs-number">1.</span>打开注册表（运行 regedit），依次找到<br>HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Adobe\Adobe Acrobat\DC\Activation<br><span class="hljs-number">2.</span>在右边新建一个 DWORD32类型的值，命名为“IsAMTEnforced”，修改数值为<span class="hljs-number">1</span><br><span class="hljs-number">3.</span>使用注册机重新激活。<br><br>Adobe Acrobat DC 安装包是官方下载，使用注册机可以激活。<br></code></pre></td></tr></table></figure></li><li></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Acrobat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python3</title>
    <link href="/2019/10/25/Python3/"/>
    <url>/2019/10/25/Python3/</url>
    
    <content type="html"><![CDATA[<h2 id="PyCharm中Python代码提示：Shadows-name-from-outer-scope"><a href="#PyCharm中Python代码提示：Shadows-name-from-outer-scope" class="headerlink" title="PyCharm中Python代码提示：Shadows name from outer scope"></a>PyCharm中Python代码提示：Shadows name from outer scope</h2><p>确保函数内部和外部的变量名不要重复，这样就不会导致可能由此导致的错误了。</p><ul><li>错误示例<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">arg1=<span class="hljs-string">&#x27;test&#x27;</span></span>):<br>arg1 = arg1   <span class="hljs-comment"># 错误，内部变量名字最后不要和外部变量名字一致</span><br><br>arg1=<span class="hljs-string">&#x27;test2&#x27;</span>  <span class="hljs-comment"># 错误，这里最后不要和调用的函数变量名字一致</span><br>func1(arg1=arg1)<br></code></pre></td></tr></table></figure></li></ul><h2 id="Simplify-Chained-Comparison"><a href="#Simplify-Chained-Comparison" class="headerlink" title="Simplify Chained Comparison"></a>Simplify Chained Comparison</h2><ul><li>issue:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> x &gt;= start <span class="hljs-keyword">and</span> x &lt;= end:<br>    <span class="hljs-comment"># do stuff</span><br></code></pre></td></tr></table></figure></li><li>fixed<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">if</span> <span class="hljs-built_in">start</span> &lt;= x &lt;= <span class="hljs-keyword">end</span>:<br>    <span class="hljs-comment"># do stuff</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.cnblogs.com/EmptyRabbit/p/7679093.html">Python命名规范</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Pycharm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第43周</title>
    <link href="/2019/10/23/2019Week43/"/>
    <url>/2019/10/23/2019Week43/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第43周（2019-10-21-2019-10-27）"><a href="#2019年第43周（2019-10-21-2019-10-27）" class="headerlink" title="2019年第43周（2019&#x2F;10&#x2F;21~2019&#x2F;10&#x2F;27）"></a>2019年第43周（2019&#x2F;10&#x2F;21~2019&#x2F;10&#x2F;27）</h2><ol><li><a href="https://www.cnblogs.com/zhuzhenwei918/p/6198821.html">正则表达式之数字验证</a></li><li><a href="https://blog.csdn.net/leaderwsh/article/details/80771178">解决bson.errors.InvalidDocument: Cannot encode object:错误的一种方法</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第42周</title>
    <link href="/2019/10/15/2019Week42/"/>
    <url>/2019/10/15/2019Week42/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第42周（2019-10-14-2019-10-20）"><a href="#2019年第42周（2019-10-14-2019-10-20）" class="headerlink" title="2019年第42周（2019&#x2F;10&#x2F;14~2019&#x2F;10&#x2F;20）"></a>2019年第42周（2019&#x2F;10&#x2F;14~2019&#x2F;10&#x2F;20）</h2><ol><li><a href="https://www.rt-thread.org/qa/forum.php?mod=viewthread&tid=11479">github加速解决方案，速度达到1Mib&#x2F;s以上</a></li><li><a href="https://blog.csdn.net/w958660278/article/details/81161224">加速国内Github访问</a></li><li><a href="https://www.cnblogs.com/jpfss/p/10214200.html">Sublime Text3配置SublimeREPL快捷键的方法（Python）</a></li><li><a href="https://www.cnblogs.com/JackyXu2018/p/8821482.html">SubLime Text 3 配置 SublimeREPL 来交互式调试程序</a></li><li><a href="https://blog.csdn.net/Shenpibaipao/article/details/80232307">打造一款好看又轻量的Python IDE-Sublime Text 3</a></li><li><a href="https://blog.csdn.net/qq_31443999/article/details/88750833">Windows 10更改pip源</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>Python</tag>
      
      <tag>Sublime</tag>
      
      <tag>SublimeREPL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>量化交易</title>
    <link href="/2019/10/11/Stock/"/>
    <url>/2019/10/11/Stock/</url>
    
    <content type="html"><![CDATA[<h2 id="设计文档"><a href="#设计文档" class="headerlink" title="设计文档"></a>设计文档</h2><ol><li>本Topic在什么时候执行（做什么事情 数据来源与流向）；</li><li>表结构及说明（JSON）（库名、集合名、输入表（网站URL、API）、输出表）</li><li>活动图（map reduce计算逻辑）</li><li>性能（input、batch、map、reduce、output、done）（说明什么时候使用done或oneDone、异步池和线程池【堆叠型或分身型】【池的大小】）</li></ol><h2 id="上证数据"><a href="#上证数据" class="headerlink" title="上证数据"></a>上证数据</h2><ol><li><a href="http://www.sse.com.cn/assortment/stock/list/info/price/index.shtml?COMPANY_CODE=600004">行情图表-广州白云国际机场股份有限公司600004</a></li></ol><h2 id="工具与教程"><a href="#工具与教程" class="headerlink" title="工具与教程"></a>工具与教程</h2><ol><li><a href="http://www.ddooo.com/softdown/149400.htm">Studio 3T(MongoDB数据库GUI连接工具) v2019.3.0破解版</a></li><li><a href="https://blog.csdn.net/lvtula/article/details/97623856">Robo3T使用小结</a></li><li><a href="https://blog.csdn.net/u010010606/article/details/79666382">mongo学习笔记二：用户授权和auth登录</a></li><li><a href="https://blog.csdn.net/xuxiannian/article/details/92614392">Mongo认证授权</a></li><li><a href="https://blog.csdn.net/u013388603/article/details/96479343">PyCharm专业最新版2019.1（含激活码）</a></li><li><a href="https://www.runoob.com/mongodb/mongodb-tutorial.html">MongoDB 教程</a></li><li><a href="https://blog.csdn.net/sinat_21591675/article/details/82770360">将pip源更换到国内镜像</a></li><li><a href="https://c.m.163.com/news/a/EKHVUP2O05444XTU.html">爬取90%的网页，只需学会这13行爬虫通用代码框架——Python版！</a></li><li><a href="https://www.cnblogs.com/wj-1314/p/9830950.html">深度学习之PyTorch实战（1）——基础学习及搭建环境</a></li><li><a href="http://www.361way.com/python-stock-tushare/4579.html">Python stock数据包tushare</a></li><li><a href="">股票数据分析（一）数据获取</a></li><li><a href="https://blog.csdn.net/qtlyx/article/details/88559876">tick数据研究</a></li><li><a href="https://www.cnblogs.com/dennis-liucd/p/7669161.html">Python爬虫抓取东方财富网股票数据并实现MySQL数据库存储</a></li><li><a href="https://blog.csdn.net/weixin_43738731/article/details/85274820">Node.js连接MongoDB数据库时出现DeprecationWarning: current URL string parser is deprecated</a></li><li><a href="https://blog.csdn.net/weixin_38421869/article/details/88976181">6小时爬完上交所和深交所的年报问询函</a></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">let</span> client = <span class="hljs-keyword">await</span> MongoClient.connect(mongoUrl,&#123; useUnifiedTopology: <span class="hljs-literal">true</span> &#125;);<br></code></pre></td></tr></table></figure><ol start="15"><li><a href="https://www.kancloud.cn/yunye/axios/234845">Axios 中文说明</a></li></ol><ul><li>设置代理<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">axios.get(dfUrl, &#123;<br>    responseType: <span class="hljs-string">&#x27;stream&#x27;</span>,<br>    proxy: &#123;<br>        host: <span class="hljs-string">&#x27;10.100.254.229&#x27;</span>,<br>        port: <span class="hljs-number">3128</span><br>    &#125;<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">(res)</span> =&gt;</span> &#123;<br>    res.data.<span class="hljs-literal">on</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-function"><span class="hljs-params">(a, b, c)</span> =&gt;</span> &#123;<br>        body += iconv.decode(a, <span class="hljs-string">&quot;gb2312&quot;</span>);<br>    &#125;);<br>    res.data.<span class="hljs-literal">on</span>(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-function"><span class="hljs-params">(a)</span> =&gt;</span> &#123;<br>        resolve(body);<br>    &#125;);<br>&#125;).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-params">(err)</span> =&gt;</span> &#123;<br>    reject(err);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ol><li><a href="http://www.pianshen.com/article/9798139749/">Python爬虫爬取东方财富网的股票信息</a></li><li><a href="https://cloud.tencent.com/developer/news/326580">Python爬虫（5）：比Selenium快100倍的方法爬东方财富网财务报表</a></li><li><a href="">爬虫笔记——东方财富科创板数据爬取（requests方法）</a></li><li><a href="https://blog.csdn.net/binosun/article/details/78697332">东方财富数据爬取</a></li><li><a href="https://www.jianshu.com/p/5ae89abe3d7b">Python爬虫入门：以东方财富网为例</a></li></ol><h2 id="量化研究"><a href="#量化研究" class="headerlink" title="量化研究"></a>量化研究</h2><ol><li><a href="https://github.com/maxmon/abu_ml">机器学习技术研究室</a></li><li><a href="https://github.com/bbfamily/abu">阿布量化交易系统</a></li><li><a href="https://github.com/francinexue/xuefu">基于pyalgotrade的回测框架</a></li><li><a href="https://mp.weixin.qq.com/s/zONzrvBSCom4SA-_RchEpQ">PyTorch 1.3重磅发布，TensorFlow有未来吗？</a></li></ol><h2 id="pymongo"><a href="#pymongo" class="headerlink" title="pymongo"></a>pymongo</h2><ol><li><a href="https://cloud.tencent.com/developer/ask/49413/answer/79739">如何将pymongo.cursor.Cursor转换为字典？</a></li></ol><h2 id="常用Linux-Ubuntu命令"><a href="#常用Linux-Ubuntu命令" class="headerlink" title="常用Linux&#x2F;Ubuntu命令"></a>常用Linux&#x2F;Ubuntu命令</h2><ul><li><p>查看文件（文件夹）路径</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">chenqing<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:/usr/bin</span><span class="hljs-variable">$ </span>which mongo<br>/usr/bin/mongo<br></code></pre></td></tr></table></figure></li><li><p>查看文件（文件夹）在哪个分区</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">chenqing<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:/usr/bin</span><span class="hljs-variable">$ </span>df -h /usr/bin<br><span class="hljs-title class_">Filesystem</span>      <span class="hljs-title class_">Size</span>  <span class="hljs-title class_">Used</span> <span class="hljs-title class_">Avail</span> <span class="hljs-title class_">Use</span>% <span class="hljs-title class_">Mounted</span> on<br>/dev/sda1        <span class="hljs-number">37</span>G   <span class="hljs-number">12</span>G   <span class="hljs-number">24</span>G  <span class="hljs-number">33</span>% /<br></code></pre></td></tr></table></figure></li><li><p>查看文件大小</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">root@ubuntu:/data/mongodata/data<span class="hljs-comment"># ls -hl</span><br>total 289M<br>drwxr-xr-x<span class="hljs-number"> 2 </span>mongodb mongodb 4.0K Oct<span class="hljs-number"> 14 </span>10:27 journal<br>-rw-------<span class="hljs-number"> 1 </span>mongodb mongodb  64M Oct<span class="hljs-number"> 14 </span>08:25 local.0<br>-rw-------<span class="hljs-number"> 1 </span>mongodb mongodb  16M Oct<span class="hljs-number"> 14 </span>08:25 local.ns<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>mongodb mongodb   <span class="hljs-number"> 5 </span>Oct<span class="hljs-number"> 14 </span>08:25 mongod.lock<br>-rw-------<span class="hljs-number"> 1 </span>mongodb nogroup  64M Oct<span class="hljs-number"> 14 </span>14:04 quant_01.0<br>-rw-------<span class="hljs-number"> 1 </span>mongodb nogroup 128M Oct<span class="hljs-number"> 14 </span>14:04 quant_01.1<br>-rw-------<span class="hljs-number"> 1 </span>mongodb nogroup  16M Oct<span class="hljs-number"> 14 </span>14:04 quant_01.ns<br>drwxr-xr-x<span class="hljs-number"> 2 </span>mongodb nogroup 4.0K Oct<span class="hljs-number"> 14 </span>11:33 _tmp<br></code></pre></td></tr></table></figure></li></ul><p>参考文档：<a href="https://www.linuxidc.com/Linux/2018-02/150995.htm">Linux或Ubuntu中查看磁盘空间大小的10个df命令</a></p><h2 id="安装django"><a href="#安装django" class="headerlink" title="安装django"></a>安装django</h2><p><a href="https://www.cnblogs.com/liuyuan216/p/3510594.html">vim模式下报错E37: No write since last change (add ! to override)</a></p><p>:w!</p><p>sudo 打开</p><p><a href="https://blog.csdn.net/sinat_21591675/article/details/82770360">将pip源更换到国内镜像</a></p><ul><li><p>先创建 ~&#x2F;.pip&#x2F; 文件夹，再创建 ~&#x2F;.pip&#x2F;pip.conf 文件，然后新增内容  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[<span class="hljs-keyword">global</span>]<br><span class="hljs-keyword">index</span>-url = https://pypi.tuna.tsinghua.edu.cn/simple<br>[install]<br><span class="hljs-keyword">trusted</span>-host = https://pypi.tuna.tsinghua.edu.cn<br></code></pre></td></tr></table></figure></li><li><p><a href="https://stackoverflow.com/questions/43398961/pip-module-has-no-attribute-main">PIP module has no attribute “main”</a>  </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">easy_install <span class="hljs-comment">--upgrade pip worked for me.</span><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> tushare<br>pip <span class="hljs-keyword">install</span> pandas<br>pip <span class="hljs-keyword">install</span> pymongo<br>pip <span class="hljs-keyword">install</span> matplotlib<br>pip <span class="hljs-keyword">install</span> bs4<br></code></pre></td></tr></table></figure><h2 id="东方财富网"><a href="#东方财富网" class="headerlink" title="东方财富网"></a>东方财富网</h2><ul><li>d</li></ul><h2 id="JSON-相关"><a href="#JSON-相关" class="headerlink" title="JSON 相关"></a>JSON 相关</h2><ul><li>生成JSON<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-keyword">let</span> params = &#123;&#125;;<br><span class="hljs-keyword">if</span> (url.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;?&#x27;</span>) !== -<span class="hljs-number">1</span>) &#123;<br>    params = url.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;?&quot;</span>);<br>    <span class="hljs-comment">// console.log(params);</span><br>    params = params[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> $i = <span class="hljs-number">0</span>; $i &lt; params.<span class="hljs-property">length</span>; $i++) &#123;<br>        <span class="hljs-keyword">let</span> myitem = params[$i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>);<br>        <span class="hljs-comment">//console.log(myitem[0] + &quot;===========&quot; + myitem[1] + &quot;\n&quot;);</span><br>        <span class="hljs-keyword">let</span> itemKey = myitem[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">let</span> itemValue = myitem[<span class="hljs-number">1</span>];<br>        param[myitem[<span class="hljs-number">0</span>]] = myitem[<span class="hljs-number">1</span>];<br>        <span class="hljs-comment">//param[itemKey] = itemValue;</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(param, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;\t&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ul><ol><li><a href="https://www.cnblogs.com/ningvsban/p/3660654.html">JSON.stringify 语法实例讲解</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>Stock</category>
      
      <category>Linux</category>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第39周</title>
    <link href="/2019/09/23/2019Week39/"/>
    <url>/2019/09/23/2019Week39/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第39周（2019-09-23-2019-09-29）"><a href="#2019年第39周（2019-09-23-2019-09-29）" class="headerlink" title="2019年第39周（2019&#x2F;09&#x2F;23~2019&#x2F;09&#x2F;29）"></a>2019年第39周（2019&#x2F;09&#x2F;23~2019&#x2F;09&#x2F;29）</h2><ol><li><a href="https://www.cnblogs.com/Molly0925/p/6062857.html">关于Linux系统使用遇到的问题-1：vi 打开只读(readonly)文件如何退出保存？</a></li><li><a href="https://blog.csdn.net/u010684585/article/details/78444006">在Ubuntu下如何压缩一个文件夹</a></li></ol><pre><code class="hljs">sudo tar zcvf work.tar.gz work/sudo tar jcvf work.tar.bz2 work/sudo tar cvf work.tar work记住了，要加sudo 顺便也写一下解压缩吧tar xzvf work.tar.gztar xjvf work.tar.bz2tar xvf work.tar</code></pre><ol start="3"><li><a href="https://www.cnblogs.com/chenlove/p/10186934.html">Ubuntu开启端口（持久化）</a></li><li><a href="https://blog.csdn.net/liyuejin/article/details/78410132">使用Docker安装部署Gitlab</a></li><li><a href="https://github.com/ElecRex/tianmao_spider">天猫商城爬虫实战练习</a></li><li><a href="https://github.com/zhangjinzhi/Summary">股票与爬虫</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>vi</tag>
      
      <tag>Docker</tag>
      
      <tag>Gitlab</tag>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第40周</title>
    <link href="/2019/09/23/2019Week40/"/>
    <url>/2019/09/23/2019Week40/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第40周（2019-09-23-2019-09-29）"><a href="#2019年第40周（2019-09-23-2019-09-29）" class="headerlink" title="2019年第40周（2019&#x2F;09&#x2F;23~2019&#x2F;09&#x2F;29）"></a>2019年第40周（2019&#x2F;09&#x2F;23~2019&#x2F;09&#x2F;29）</h2><ol><li><a href="https://www.cnblogs.com/Molly0925/p/6062857.html">bare</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>vi</tag>
      
      <tag>Docker</tag>
      
      <tag>Gitlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MacDown</title>
    <link href="/2019/09/20/MacDown_Help/"/>
    <url>/2019/09/20/MacDown_Help/</url>
    
    <content type="html"><![CDATA[<h1 id="MacDown"><a href="#MacDown" class="headerlink" title="MacDown"></a>MacDown</h1><p><img src="http://macdown.uranusjr.com/static/images/logo-160.png" alt="MacDown logo"></p><p>Hello there! I’m <strong>MacDown</strong>, the open source Markdown editor for OS X.</p><p>Let me introduce myself.</p><h2 id="Markdown-and-I"><a href="#Markdown-and-I" class="headerlink" title="Markdown and I"></a>Markdown and I</h2><p><strong>Markdown</strong> is a plain text formatting syntax created by John Gruber, aiming to provide a easy-to-read and feasible markup. The original Markdown syntax specification can be found <a href="http://daringfireball.net/projects/markdown/syntax">here</a>.</p><p><strong>MacDown</strong> is created as a simple-to-use editor for Markdown documents. I render your Markdown contents real-time into HTML, and display them in a preview panel.</p><p><img src="http://d.pr/i/10UGP+" alt="MacDown Screenshot"></p><p>I support all the original Markdown syntaxes. But I can do so much more! Various popular but non-standard syntaxes can be turned on&#x2F;off from the <a href="#markdown-pane"><strong>Markdown</strong> preference pane</a>.</p><p>You can specify extra HTML rendering options through the <a href="#rendering-pane"><strong>Rendering</strong> preference pane</a>.</p><p>You can customize the editor window to you liking in the <a href="#editor-pane"><strong>Editor</strong> preferences pane</a>:</p><p>You can configure various application (that’s me!) behaviors in the <a href="#general-pane"><strong>General</strong> preference pane</a>.</p><h2 id="The-Basics"><a href="#The-Basics" class="headerlink" title="The Basics"></a>The Basics</h2><p>Before I tell you about all the extra syntaxes and capabilities I have, I’ll introduce you to the basics of standard markdown. If you already know markdown, and want to jump straight to learning about the fancier things I can do, I suggest you skip to the <a href="#markdown-pane"><strong>Markdown</strong> preference pane</a>. Lets jump right in.  </p><h3 id="Line-Breaks"><a href="#Line-Breaks" class="headerlink" title="Line Breaks"></a>Line Breaks</h3><p>To force a line break, put two spaces and a newline (return) at the end of the line.</p><ul><li><p>This two-line bullet<br>won’t break</p></li><li><p>This two-line bullet<br>will break</p></li></ul><p>Here is the code:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust">* This two-line bul<span class="hljs-keyword">let</span> <br><span class="hljs-variable">won</span><span class="hljs-symbol">&#x27;t</span> <span class="hljs-keyword">break</span><br><br>* This two-line bul<span class="hljs-keyword">let</span>  <br><span class="hljs-variable">will</span> <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h3 id="Strong-and-Emphasize"><a href="#Strong-and-Emphasize" class="headerlink" title="Strong and Emphasize"></a>Strong and Emphasize</h3><p><strong>Strong</strong>: <code>**Strong**</code> or <code>__Strong__</code> (Command-B)<br><em>Emphasize</em>: <code>*Emphasize*</code> or <code>_Emphasize_</code>[^emphasize] (Command-I)</p><h3 id="Headers-like-this-one"><a href="#Headers-like-this-one" class="headerlink" title="Headers (like this one!)"></a>Headers (like this one!)</h3><pre><code class="hljs">Header 1========Header 2--------</code></pre><p>or</p><pre><code class="hljs"># Header 1## Header 2### Header 3#### Header 4##### Header 5###### Header 6</code></pre><h3 id="Links-and-Email"><a href="#Links-and-Email" class="headerlink" title="Links and Email"></a>Links and Email</h3><h4 id="Inline"><a href="#Inline" class="headerlink" title="Inline"></a>Inline</h4><p>Just put angle brackets around an email and it becomes clickable: <a href="mailto:&#x75;&#114;&#97;&#110;&#117;&#115;&#x6a;&#114;&#64;&#103;&#109;&#97;&#105;&#108;&#46;&#x63;&#x6f;&#109;">&#x75;&#114;&#97;&#110;&#117;&#115;&#x6a;&#114;&#64;&#103;&#109;&#97;&#105;&#108;&#46;&#x63;&#x6f;&#109;</a><br><code>&lt;uranusjr@gmail.com&gt;</code>  </p><p>Same thing with urls: <a href="http://macdown.uranusjr.com/">http://macdown.uranusjr.com</a><br><code> &lt;http://macdown.uranusjr.com&gt;</code>  </p><p>Perhaps you want to some link text like this: <a href="http://macdown.uranusjr.com/" title="Title">Macdown Website</a><br><code>[Macdown Website](http://macdown.uranusjr.com &quot;Title&quot;)</code> (The title is optional)  </p><h4 id="Reference-style"><a href="#Reference-style" class="headerlink" title="Reference style"></a>Reference style</h4><p>Sometimes it looks too messy to include big long urls inline, or you want to keep all your urls together.  </p><p>Make <a href="http://macdown.uranusjr.com/" title="Title">a link</a> <code>[a link][arbitrary_id]</code> then on it’s own line anywhere else in the file:<br><code>[arbitrary_id]: http://macdown.uranusjr.com &quot;Title&quot;</code></p><p>If the link text itself would make a good id, you can link <a href="http://macdown.uranusjr.com/">like this</a> <code>[like this][]</code>, then on it’s own line anywhere else in the file:<br><code>[like this]: http://macdown.uranusjr.com</code>  </p><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><h4 id="Inline-1"><a href="#Inline-1" class="headerlink" title="Inline"></a>Inline</h4><p><code>![Alt Image Text](path/or/url/to.jpg &quot;Optional Title&quot;)</code></p><h4 id="Reference-style-1"><a href="#Reference-style-1" class="headerlink" title="Reference style"></a>Reference style</h4><p><code>![Alt Image Text][image-id]</code><br>on it’s own line elsewhere:<br><code>[image-id]: path/or/url/to.jpg &quot;Optional Title&quot;</code></p><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><ul><li>Lists must be preceded by a blank line (or block element)</li><li>Unordered lists start each item with a <code>*</code></li></ul><ul><li><code>-</code> works too<ul><li>Indent a level to make a nested list<ol><li>Ordered lists are supported.</li><li>Start each item (number-period-space) like <code>1. </code></li><li>It doesn’t matter what number you use, I will render them sequentially</li><li>So you might want to start each line with <code>1.</code> and let me sort it out</li></ol></li></ul></li></ul><p>Here is the code:</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">* Lists must be preceded <span class="hljs-keyword">by</span> a blank line (<span class="hljs-built_in">or</span> block element)<br>* Unordered lists start <span class="hljs-keyword">each</span> item <span class="hljs-keyword">with</span> a `*`<br>- `-` works too<br>* Indent a level <span class="hljs-keyword">to</span> make a nested list<br><span class="hljs-number">1</span>. Ordered lists are supported.<br><span class="hljs-number">2</span>. Start <span class="hljs-keyword">each</span> item (number-period-space) <span class="hljs-built_in">like</span> `<span class="hljs-number">1</span>. `<br><span class="hljs-number">42</span>. It doesn<span class="hljs-comment">&#x27;t matter what number you use, I will render them sequentially</span><br><span class="hljs-number">1</span>. So you might want <span class="hljs-keyword">to</span> start <span class="hljs-keyword">each</span> line <span class="hljs-keyword">with</span> `<span class="hljs-number">1</span>.` <span class="hljs-built_in">and</span> <span class="hljs-keyword">let</span> <span class="hljs-keyword">me</span> sort it out<br></code></pre></td></tr></table></figure><h3 id="Block-Quote"><a href="#Block-Quote" class="headerlink" title="Block Quote"></a>Block Quote</h3><blockquote><p>Angle brackets <code>&gt;</code> are used for block quotes.<br>Technically not every line needs to start with a <code>&gt;</code> as long as<br>there are no empty lines between paragraphs.<br>Looks kinda ugly though.</p><blockquote><p>Block quotes can be nested.  </p><blockquote><p>Multiple Levels</p></blockquote></blockquote><p>Most markdown syntaxes work inside block quotes.</p><ul><li>Lists</li><li><a href="http://macdown.uranusjr.com/" title="Title">Links</a></li><li>Etc.</li></ul></blockquote><p>Here is the code:</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Angle</span> brackets <span class="hljs-string">`&gt;`</span> are used <span class="hljs-keyword">for</span> block quotes.  </span><br>Technically not every line needs to start with a `&gt;` as long as<br>there are no empty lines between paragraphs.  <br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Looks</span> kinda ugly though.</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&gt; <span class="hljs-title class_">Block</span> quotes can be nested.  </span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&gt; &gt; <span class="hljs-title class_">Multiple</span> <span class="hljs-title class_">Levels</span></span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Most</span> markdown syntaxes work inside block quotes.</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">* <span class="hljs-title class_">Lists</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">* [<span class="hljs-title class_">Links</span>][arbitrary_id]</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">* <span class="hljs-title class_">Etc</span>.</span><br></code></pre></td></tr></table></figure><h3 id="Inline-Code"><a href="#Inline-Code" class="headerlink" title="Inline Code"></a>Inline Code</h3><p><code>Inline code</code> is indicated by surrounding it with backticks:<br><code>`Inline code`</code></p><h2 id="If-your-code-has-backticks-that-need-to-be-displayed-you-can-use-double-backticks-print-‘Hello-world-’"><a href="#If-your-code-has-backticks-that-need-to-be-displayed-you-can-use-double-backticks-print-‘Hello-world-’" class="headerlink" title="If your code has `backticks`  that need to be displayed, you can use double backticks:print(‘Hello world!’)"></a>If your <code>code has `backticks` </code> that need to be displayed, you can use double backticks:<br><figure class="highlight plaintext"><figcaption><span>``Code with `backticks` `` ````  (mind the spaces preceding the final set of backticks)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs `"><br><br>### Block Code<br>If you indent at least four spaces or one tab, I&#x27;ll display a code block.<br><br>print(&#x27;This is a code block&#x27;)<br>print(&#x27;The block must be preceded by a blank line&#x27;)<br>print(&#x27;Then indent at least 4 spaces or 1 tab&#x27;)<br>print(&#x27;Nesting does nothing. Your code is displayed Literally&#x27;)<br><br>I also know how to do something called [Fenced Code Blocks](#fenced-code-block) which I will tell you about later.<br><br>### Horizontal Rules<br>If you type three asterisks `***` or three dashes `---` on a line, I&#x27;ll display a horizontal rule:<br><br>***<br><br><br>## &lt;a name=&quot;markdown-pane&quot;&gt;&lt;/a&gt;The Markdown Preference Pane<br>This is where I keep all preferences related to how I parse markdown into html.  <br>![Markdown preferences pane](http://d.pr/i/RQEi+)<br><br>### Document Formatting<br>The ***Smartypants*** extension automatically transforms straight quotes (`&quot;` and `&#x27;`) in your text into typographer’s quotes (`“`, `”`, `‘`, and `’`) according to the context. Very useful if you’re a typography freak like I am. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence.<br><br><br>### Block Formatting<br><br>#### Table<br><br>This is a table:<br><br>First Header  | Second Header<br>------------- | -------------<br>Content Cell  | Content Cell<br>Content Cell  | Content Cell<br><br>You can align cell contents with syntax like this:<br><br>| Left Aligned  | Center Aligned  | Right Aligned |<br>|:------------- |:---------------:| -------------:|<br>| col 3 is      | some wordy text |         $1600 |<br>| col 2 is      | centered        |           $12 |<br>| zebra stripes | are neat        |            $1 |<br><br>The left- and right-most pipes (`|`) are only aesthetic, and can be omitted. The spaces don’t matter, either. Alignment depends solely on `:` marks.<br><br>#### &lt;a name=&quot;fenced-code-block&quot;&gt;Fenced Code Block&lt;/a&gt;<br><br>This is a fenced code block:<br><br></code></pre></td></tr></table></figure><br>print(‘Hello world!’)<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><br>You can also use waves (`~`) instead of back ticks (`` ` ``):<br><br>~~~<br>print(&#x27;Hello world!&#x27;)<br>~~~<br><br><br>You can add an optional language ID at the end of the first line. The language ID will only be used to highlight the code inside if you tick the <span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>Enable highlighting in code blocks<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span> option. This is what happens if you enable it:<br><br>![Syntax highlighting example](http://d.pr/i/9HM6+)<br><br>I support many popular languages as well as some generic syntax descriptions that can be used if your language of choice is not supported. See [relevant sections on the official site](http://macdown.uranusjr.com/features/) for a full list of supported syntaxes.<br><br><br><span class="hljs-comment">### Inline Formatting</span><br><br>The following is a list of optional inline markups supported:<br><br>Option name         |<span class="hljs-string"> Markup           </span>|<span class="hljs-string"> Result if enabled     </span>|<br>--------------------|<span class="hljs-string">------------------</span>|<span class="hljs-string">-----------------------</span>|<br>Intra-word emphasis |<span class="hljs-string"> So A\*maz\*ing   </span>|<span class="hljs-string"> So A&lt;em&gt;maz&lt;/em&gt;ing   </span>|<br>Strikethrough       |<span class="hljs-string"> \~~Much wow\~~   </span>|<span class="hljs-string"> &lt;del&gt;Much wow&lt;/del&gt;   </span>|<br>Underline [^under]  |<span class="hljs-string"> \_So doge\_      </span>|<span class="hljs-string"> &lt;u&gt;So doge&lt;/u&gt;        </span>|<br>Quote [^quote]      |<span class="hljs-string"> \&quot;Such editor\&quot;  </span>|<span class="hljs-string"> &lt;q&gt;Such editor&lt;/q&gt;    </span>|<br>Highlight           |<span class="hljs-string"> \==So good\==    </span>|<span class="hljs-string"> &lt;mark&gt;So good&lt;/mark&gt;  </span>|<br>Superscript         |<span class="hljs-string"> hoge\^(fuga)     </span>|<span class="hljs-string"> hoge&lt;sup&gt;fuga&lt;/sup&gt;   </span>|<br>Autolink            |<span class="hljs-string"> http://t.co      </span>|<span class="hljs-string"> &lt;http://t.co&gt;         </span>|<br>Footnotes           |<span class="hljs-string"> [\^4] and [\^4]: </span>|<span class="hljs-string"> [^4] and footnote 4   </span>|<br><br>[^4]: You don&#x27;t have to use a number. Arbitrary things like `[^footy note4]` and `[^footy note4]:` will also work. <span class="hljs-keyword">But</span> they will <span class="hljs-symbol">*</span>render<span class="hljs-symbol">*</span> as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes. <br><br><br><br><br><span class="hljs-comment">## &lt;a name=&quot;rendering-pane&quot;&gt;&lt;/a&gt;The Rendering Preference Pane</span><br>This is where I keep preferences relating to how I render and style the parsed markdown in the preview window.  <br>![Rendering preferences pane](http://d.pr/i/rT4d+)<br><br><span class="hljs-comment">### CSS</span><br>You can choose different css files for me to use to render your html. You can even customize or add your own custom css files.<br><br><span class="hljs-comment">### Syntax Highlighting</span><br>You have already seen how I can syntax highlight your fenced code blocks. See the [Fenced Code Block](<span class="hljs-comment">#fenced-code-block) section if you haven’t! You can also choose different themes for syntax highlighting.</span><br><br><span class="hljs-comment">### TeX-like Math Syntax</span><br>I can also render TeX-like math syntaxes, if you allow me to.[^math] I can do inline math like this: \\( 1 + 1 \\) or this (in MathML): <span class="hljs-variable">&lt;math&gt;</span><span class="hljs-variable">&lt;mn&gt;</span>1<span class="hljs-variable">&lt;/mn&gt;</span><span class="hljs-variable">&lt;mo&gt;</span>+<span class="hljs-variable">&lt;/mo&gt;</span><span class="hljs-variable">&lt;mn&gt;</span>1<span class="hljs-variable">&lt;/mn&gt;</span><span class="hljs-variable">&lt;/math&gt;</span>, and block math:<br><br>\\[<br>    A^T_S = B<br>\\]<br><br>or (in MathML)<br><br><span class="hljs-variable">&lt;math display=&quot;block&quot;&gt;</span><br>    <span class="hljs-variable">&lt;msubsup&gt;</span><span class="hljs-variable">&lt;mi&gt;</span>A<span class="hljs-variable">&lt;/mi&gt;</span> <span class="hljs-variable">&lt;mi&gt;</span>S<span class="hljs-variable">&lt;/mi&gt;</span> <span class="hljs-variable">&lt;mi&gt;</span>T<span class="hljs-variable">&lt;/mi&gt;</span><span class="hljs-variable">&lt;/msubsup&gt;</span><br>    <span class="hljs-variable">&lt;mo&gt;</span>=<span class="hljs-variable">&lt;/mo&gt;</span><br>    <span class="hljs-variable">&lt;mi&gt;</span>B<span class="hljs-variable">&lt;/mi&gt;</span><br><span class="hljs-variable">&lt;/math&gt;</span><br><br><br><br><span class="hljs-comment">### Task List Syntax</span><br>1. [x] I can render checkbox list syntax<br><span class="hljs-symbol">*</span> [x] I support nesting<br><span class="hljs-symbol">*</span> [x] I support ordered <span class="hljs-symbol">*</span>and<span class="hljs-symbol">*</span> unordered lists<br>2. [ ] I don&#x27;t support clicking checkboxes directly in the html window<br><br><br><span class="hljs-comment">### Jekyll front-matter</span><br>If you like, I can display Jekyll front-matter in a nice table. Just make sure you put the front-matter at the very beginning of the file, and fence it with `---`. For example:<br><br></code></pre></td></tr></table></figure></h2><h2 id="title-“Macdown-is-my-friend”date-2014-06-06-20-00-00"><a href="#title-“Macdown-is-my-friend”date-2014-06-06-20-00-00" class="headerlink" title="title: “Macdown is my friend”date: 2014-06-06 20:00:00"></a>title: “Macdown is my friend”<br>date: 2014-06-06 20:00:00</h2><pre><code class="hljs">### Render newline literallyNormally I require you to put two spaces and a newline (aka return) at the end of a line in order to create a line break. If you like, I can render a newline any time you end a line with a newline. However, if you enable this, markdown that looks lovely when I render it might look pretty funky when you let some *other* program render it.## &lt;a name=&quot;general-pane&quot;&gt;&lt;/a&gt;The General Preferences PaneThis is where I keep preferences related to application behavior.  ![General preferences pane](http://d.pr/i/rvwu+)The General Preferences Pane allows you to tell me how you want me to behave. For example, do you want me to make sure there is a document open when I launch? You can also tell me if I should constantly update the preview window as you type, or wait for you to hit `command-R` instead. Maybe you prefer your editor window on the right? Or to see the word-count as you type. This is also the place to tell me if you are interested in pre-releases of me, or just want to stick to better-tested official releases.  ## &lt;a name=&quot;editor-pane&quot;&gt;&lt;/a&gt;The Editor Preference PaneThis is where I keep preferences related to the behavior and styling of the editing window.  ![Editor preferences pane](http://d.pr/i/6OL5+)### StylingMy editor provides syntax highlighting. You can edit the base font and the coloring/sizing theme. I provided some default themes (courtesy of [Mou](http://mouapp.com)’s creator, Chen Luo) if you don’t know where to start.You can also edit, or even add new themes if you want to! Just click the ***Reveal*** button, and start moving things around. Remember to use the correct file extension (`.styles`), though. I’m picky about that.I offer auto-completion and other functions to ease your editing experience. If you don’t like it, however, you can turn them off.## Hack OnThat’s about it. Thanks for listening. I’ll be quiet from now on (unless there’s an update about the app—I’ll remind you for that!).Happy writing![^emphasize]: If **Underlines** is turned on, `_this notation_` will render as underlined instead of emphasized [^under]: If **Underline** is disabled `_this_` will be rendered as *emphasized* instead of being underlined.[^quote]: **Quote** replaces literal `&quot;` characters with html `&lt;q&gt;` tags. **Quote** and **Smartypants** are syntactically incompatible. If both are enabled, **Quote** takes precedence. Note that **Quote** is different from *blockquote*, which is part of standard Markdown.[^math]: Internet connection required.</code></pre>]]></content>
    
    
    <categories>
      
      <category>MacDown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MacDown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第38周</title>
    <link href="/2019/09/16/2019Week38/"/>
    <url>/2019/09/16/2019Week38/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第38周（2019-09-16-2019-09-22）"><a href="#2019年第38周（2019-09-16-2019-09-22）" class="headerlink" title="2019年第38周（2019&#x2F;09&#x2F;16~2019&#x2F;09&#x2F;22）"></a>2019年第38周（2019&#x2F;09&#x2F;16~2019&#x2F;09&#x2F;22）</h2><ol><li><a href="https://my.oschina.net/u/263874/blog/1549465">sequelize update 原生sql 没有返回值(事务)</a></li><li><a href="https://jingyan.baidu.com/article/597a06431ae2cf312a524379.html">pdf文档怎么双面打印</a></li><li><a href="https://www.cnblogs.com/zhongyehai/p/10643624.html">解决linux下svn update 产生Node remains in conflict的问题</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sequelize</tag>
      
      <tag>事务</tag>
      
      <tag>pdf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins</title>
    <link href="/2019/09/10/Jenkins/"/>
    <url>/2019/09/10/Jenkins/</url>
    
    <content type="html"><![CDATA[<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol><li><a href="https://blog.csdn.net/iamniconico/article/details/82023173">Jenkins安装及自动部署Maven项目</a></li><li><a href="https://blog.csdn.net/m0_37444820/article/details/80865240">Jenkins+Maven+Git 自动化构建</a></li></ol><h1 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h1><p>下载相应的jdk软件包，然后解压安装，这里包名称为：jdk-8u221-linux-x64.tar.gz</p><ul><li><p>解压</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># tar -xzf jdk-8u221-linux-x64.tar.gz</span><br></code></pre></td></tr></table></figure></li><li><p>新建文件夹</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># mkdir -p /usr/java/</span><br></code></pre></td></tr></table></figure></li><li><p>拷贝jdk到新文件夹中</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># mv jdk1.8.0_221/ /usr/java/</span><br></code></pre></td></tr></table></figure></li></ul><p>然后配置环境变量，这样可以任何地方引用jdk，如下配置：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># vim /etc/profile </span><br></code></pre></td></tr></table></figure><p>最后面加入以下语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_221<br><span class="hljs-built_in">export</span> CLASSPATH=<span class="hljs-variable">$CLASSPATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/lib:<span class="hljs-variable">$JAVA_HOME</span>/jre/lib<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$JAVA_HOME</span>/jre/bin:<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$HOMR</span>/bin<br></code></pre></td></tr></table></figure><ul><li>使环境变量马上生效  <figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># source /etc/profile</span><br></code></pre></td></tr></table></figure></li><li>查看java版本，看到java version “1.8.0_221”版本即代表Java JDK安装成功(在centos7 当中操作指令集是不一样的 ，jdk1.7 查看版本号可以通过 java -Vand java –version 查看，而jdk1.8 就得通过 java -version来查看版本号了)。<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">[root@localhost ~]<span class="hljs-comment"># java -version</span><br><span class="hljs-keyword">java </span>version <span class="hljs-string">&quot;1.8.0_221&quot;</span><br><span class="hljs-keyword">Java(TM) </span>SE Runtime Environment (<span class="hljs-keyword">build </span><span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>_221-<span class="hljs-keyword">b11)</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">Java </span>HotSpot(TM) <span class="hljs-number">64</span>-<span class="hljs-keyword">Bit </span>Server VM (<span class="hljs-keyword">build </span><span class="hljs-number">25</span>.<span class="hljs-number">221</span>-<span class="hljs-keyword">b11, </span>mixed mode)<br></code></pre></td></tr></table></figure></li></ul><h1 id="安装-Tomcat"><a href="#安装-Tomcat" class="headerlink" title="安装 Tomcat"></a>安装 Tomcat</h1><p>下载相应的tomcat软件包，然后解压安装，这里包名称为：apache-tomcat-8.5.45.tar.gz</p><ul><li><p>解压</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># tar -xzf apache-tomcat-8.5.45.tar.gz</span><br></code></pre></td></tr></table></figure></li><li><p>新建文件夹</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># mkdir -p /usr/local/tomcat</span><br></code></pre></td></tr></table></figure></li><li><p>拷贝tomcat到新文件夹中</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># mv apache-tomcat-8.5.45/* /usr/local/tomcat/</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h2><ul><li><p>移动文件夹  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv .<span class="hljs-regexp">/WorkReport/</span>web.xml .<span class="hljs-regexp">/WorkReport/</span>WEB-INF/<br>注：移动<span class="hljs-regexp">/WorkReport/</span>web.xml文件到<span class="hljs-regexp">/WorkReport/</span>WEB-INF/<br><br>mv <span class="hljs-regexp">/data/</span>new <span class="hljs-regexp">/data/</span>old/<br>注：移动<span class="hljs-regexp">/data/</span>new 到<span class="hljs-regexp">/data/</span>old/文件夹下<br>注意点：移动文件夹的话就不要再加 / 了<br><br>如果是移动文件夹下的所有文件的话就可以文件夹后面跟上 /* <br><br><br>mv <span class="hljs-regexp">/data/</span>new<span class="hljs-regexp">/* /</span>data<span class="hljs-regexp">/old/</span><br></code></pre></td></tr></table></figure></li><li><p>删除文件夹</p></li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> tomcat]<span class="hljs-meta"># rm -rf apache-tomcat-8.5.45/</span><br></code></pre></td></tr></table></figure><h1 id="打开防火墙8080端口"><a href="#打开防火墙8080端口" class="headerlink" title="打开防火墙8080端口"></a>打开防火墙8080端口</h1><ul><li>打开端口并检查<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">添加指定需要开放的端口：<br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --add-port=8080/tcp --permanent</span><br>重载入添加的端口：<br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --reload</span><br>查询指定端口是否开启成功：<br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --query-port=8080/tcp</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h2><ul><li><p>把得到的war包直接扔到tomcat下webapps&#x2F;ROOT&#x2F;下，启动tomcat，Jenkins就安装完毕！</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@localhost</span> <span class="hljs-operator">~</span>]#cp jenkins.war <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>webapps<span class="hljs-regexp">/ROOT/</span><br></code></pre></td></tr></table></figure></li><li><p>启动tomcat</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@localhost ~]#<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>bin/startup.sh<br>Using CATALINA_BASE:   <span class="hljs-regexp">/usr/</span>local/tomcat<br>Using CATALINA_HOME:   <span class="hljs-regexp">/usr/</span>local/tomcat<br>Using CATALINA_TMPDIR: <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>temp<br>Using JRE_HOME:        <span class="hljs-regexp">/usr/</span>java/jdk1.<span class="hljs-number">8.0</span>_221<br>Using <span class="hljs-keyword">CLASSPATH</span>:       <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>bin<span class="hljs-regexp">/bootstrap.jar:/u</span>sr<span class="hljs-regexp">/local/</span>tomcat<span class="hljs-regexp">/bin/</span>tomcat-juli.jar<br>Tomcat started.<br></code></pre></td></tr></table></figure></li><li><p>停止tomcat</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta">#/usr/local/tomcat/bin/shutdown.sh</span><br></code></pre></td></tr></table></figure></li><li><p>查看日志</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@localhost</span> <span class="hljs-operator">~</span>]#tail <span class="hljs-operator">-</span>fn <span class="hljs-number">100</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>logs<span class="hljs-operator">/</span>catalina.out<br></code></pre></td></tr></table></figure></li><li><p>查看安装密码</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@localhost</span> <span class="hljs-operator">~</span>]# cat <span class="hljs-regexp">/root/</span>.jenkins<span class="hljs-regexp">/secrets/</span>initialAdminPassword<br>999065bef28b4e2f964699e3e78140f9<br></code></pre></td></tr></table></figure></li></ul><p><img src="/Jenkins%5Csnap0001.jpg"></p><p><img src="/Jenkins%5Csnap0002.jpg"></p><h2 id="Maven-安装"><a href="#Maven-安装" class="headerlink" title="Maven 安装"></a>Maven 安装</h2><ul><li><p>下载 Maven</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-<span class="hljs-number">3</span>/<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">2</span>/binaries/apache-maven-<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">2</span>-bin.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># tar -xzf apache-maven-3.6.2-bin.tar.gz</span><br></code></pre></td></tr></table></figure></li><li><p>新建文件夹</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># mkdir -p /usr/local/maven</span><br></code></pre></td></tr></table></figure></li><li><p>拷贝tomcat到新文件夹中</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># mv apache-maven-3.6.2/* /usr/local/maven/</span><br></code></pre></td></tr></table></figure></li><li><p>查看 mvn 帮助</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># cd /usr/local/maven/bin</span><br>[root<span class="hljs-symbol">@localhost</span> bin]<span class="hljs-meta"># ./mvn --help</span><br></code></pre></td></tr></table></figure><p>反向代理设置有误</p></li></ul><p><a href="http://10.100.254.229:8080/jenkins/configure"></a></p><ul><li><p>设置全局变量（系统设置-》全局工具配置）<br><img src="/Jenkins%5Csnap0003.jpg"></p></li><li><p>设置JDK<br><img src="/Jenkins%5Csnap0004.jpg"></p></li><li><p>设置Maven<br><img src="/Jenkins%5Csnap0005.jpg"></p></li><li><p>d</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure></li><li><p>d</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure></li><li><p>d</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第37周</title>
    <link href="/2019/09/09/2019Week37/"/>
    <url>/2019/09/09/2019Week37/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第37周（2019-09-09-x7e2019-09-15）"><a href="#2019年第37周（2019-09-09-x7e2019-09-15）" class="headerlink" title="2019年第37周（2019&#x2F;09&#x2F;09\x7e2019&#x2F;09&#x2F;15）"></a>2019年第37周（2019&#x2F;09&#x2F;09\x7e2019&#x2F;09&#x2F;15）</h2><ol><li><a href="https://www.cnblogs.com/yuzhongwusan/archive/2008/12/15/1355378.html">Array数组元素的添加和删除</a></li><li><a href="https://www.cnblogs.com/SapphireCastle/p/6395141.html">Centos 软连接和硬链接</a></li><li><a href="https://blog.csdn.net/sayWhat_sayHello/article/details/79924007">CentOS误删 &#x2F;etc&#x2F;profile 的内容（默认，初始配置）</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue 项目构建与开发入门</title>
    <link href="/2019/08/30/vue/"/>
    <url>/2019/08/30/vue/</url>
    
    <content type="html"><![CDATA[<h1 id="开篇：Vue-CLI-3-项目构建基础"><a href="#开篇：Vue-CLI-3-项目构建基础" class="headerlink" title="开篇：Vue CLI 3 项目构建基础"></a>开篇：Vue CLI 3 项目构建基础</h1><p>大家好，当你点进这个标题，开始阅读本章的时候，说明你对 <code>Vue.js</code> 是充满好奇心和求知欲的。我之前写过一篇文章，这样评价 Vue.js，称它是“简单却不失优雅，小巧而不乏大匠”的作品，正如其官网介绍的“易用，灵活和高效”那样。其实框架是 Vue.js 的本质，而真正了解它的人则会把它当成一件作品来欣赏。</p><p>Vue.js 作为一门轻量级、易上手的前端框架，从入门难度和学习曲线上相对其他框架来说算是占据优势的，越来越多的人开始投入 Vue.js 的怀抱，走进 Vue.js 的世界。那么接下来屏幕前的你不妨一起来和我从零开始构建一个 Vue 项目，体会一下 Vue.js 的精彩绝伦。</p><h2 id="依赖工具"><a href="#依赖工具" class="headerlink" title="依赖工具"></a>依赖工具</h2><p>在构建一个 Vue 项目前，我们先要确保你本地安装了 <code>Node</code> 环境以及包管理工具 <code>npm</code>，打开终端运行：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 查看 node 版本</span><br><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br><br><span class="hljs-comment"># 查看 npm 版本</span><br>npm -v<br><br></code></pre></td></tr></table></figure><p>如果成功打印出版本号，说明你本地具备了 node 的运行环境，我们可以使用 npm 来安装管理项目的依赖，而如果没有或报错，则你需要去 <a href="https://nodejs.org/en/">node 官网</a>进行 node 的下载及安装，如图：</p> <img src="/2019/08/30/vue/166c5eb2c6f04593.png" class=""><p>左边的版本是推荐安装的稳定版本，也就是目前已经被正式列入标准的版本，而右边的版本是当前最新的版本，该版本包含了一些新的特性，还未被完全列入标准，可能以后会有所变动。这里建议大家安装最新的 node 稳定版进行开发。</p><h2 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h2><p>当我们安装完 node 后便可以开始进行后续的构建工作了，那么这里我主要给大家介绍下最便捷的脚手架构建。</p><h3 id="1-什么是脚手架"><a href="#1-什么是脚手架" class="headerlink" title="1. 什么是脚手架"></a>1. 什么是脚手架</h3><p>很多人可能经常会听到“脚手架”三个字，无论是前端还是后台，其实它在生活中的含义是为了保证各施工过程顺利进行而搭设的工作平台。因此作为一个工作平台，前端的脚手架可以理解为能够帮助我们快速构建前端项目的一个工具或平台。</p><h3 id="2-vue-cli"><a href="#2-vue-cli" class="headerlink" title="2. vue-cli"></a>2. vue-cli</h3><p>其实说到脚手架，目前很多主流的前端框架都提供了各自官方的脚手架工具，以帮助开发者快速构建起自己的项目，比如 <code>Vue</code>、<code>React</code> 等，这里我们就来介绍下 Vue 的脚手架工具 <code>vue-cli</code>。</p><p>vue-cli 经历了几个版本的迭代，目前最新的版本是 3.x，也是本小册构建项目所使用的版本，我们一起来看下其人性化的构建流程：</p><h4 id="a-安装"><a href="#a-安装" class="headerlink" title="a. 安装"></a>a. 安装</h4><p>我们可以在终端通过以下命令全局安装 vue-cli：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-comment"># 安装 Vue CLI 3.x</span><br><span class="hljs-built_in">npm</span> i -g @vue/cli<br><br></code></pre></td></tr></table></figure><p>如果你习惯使用 <code>yarn</code>，你也可以：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 没有全局安装yarn需执行此命令</span><br>npm i -g yarn<br>yarn <span class="hljs-keyword">global</span> add <span class="hljs-symbol">@vue</span>/cli<br><br></code></pre></td></tr></table></figure><p>注意因为是全局安装，所以 vue-cli 是全局的包，它和我们所处的项目没有关系。同时我们这里介绍的 CLI 版本是最新的 3.x，它和 2.x 版本存在着很大的区别，具体的讲解会在后续章节中进行介绍。</p><h4 id="b-构建"><a href="#b-构建" class="headerlink" title="b. 构建"></a>b. 构建</h4><p>安装完 vue-cli 后，我们在你想要创建的项目目录地址下执行构建命令：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># my-project 是你的项目名称</span><br>vue create <span class="hljs-keyword">my</span>-project<br><br></code></pre></td></tr></table></figure><p>执行完上述命令后，会出现一系列的选择项，我们可以根据自己的需要进行选择，流程图如下：</p><img src="/2019/08/30/vue/16412343fab2e351.png" class=""><p>如果你只想构建一个基础的 Vue 项目，那么使用 <code>Babel</code>、<code>Router</code>、<code>Vuex</code>、<code>CSS Pre-processors</code> 就足够了，最后选择你喜欢的包管理工具 npm or yarn。</p><h4 id="c-启动"><a href="#c-启动" class="headerlink" title="c. 启动"></a>c. 启动</h4><p>等待构建完成后你便可以运行命令来启动你的 Vue 项目：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 打开项目目录</span><br>cd vue-project<br><br><span class="hljs-comment"># 启动项目</span><br>yarn serve<br><br><span class="hljs-comment"># or</span><br>npm <span class="hljs-built_in">run</span> serve<br><br></code></pre></td></tr></table></figure><p>需要注意的是如果启动的时候出现报错或者包丢失等情况，最好将 node 或者 yarn （如果使用）的版本更新到最新重新构建。</p><p>成功后打开浏览器地址：<a href="http://localhost:8080/">http://localhost:8080/</a> 可以看到如下界面：</p> <img src="/2019/08/30/vue/164125dcfb6fa7d5.png" class=""><h4 id="d-目录结构"><a href="#d-目录结构" class="headerlink" title="d. 目录结构"></a>d. 目录结构</h4><p>最后脚手架生成的目录结构如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">├── node_modules     <span class="hljs-comment"># 项目依赖包目录</span><br>├── public<br>│   ├── favicon.ico  <span class="hljs-comment"># ico图标</span><br>│   └── index.html   <span class="hljs-comment"># 首页模板</span><br>├── src <br>│   ├── assets       <span class="hljs-comment"># 样式图片目录</span><br>│   ├── components   <span class="hljs-comment"># 组件目录</span><br>│   ├── views        <span class="hljs-comment"># 页面目录</span><br>│   ├── App.vue      <span class="hljs-comment"># 父组件</span><br>│   ├── main.<span class="hljs-keyword">js </span>     <span class="hljs-comment"># 入口文件</span><br>│   ├── router.<span class="hljs-keyword">js </span>   <span class="hljs-comment"># 路由配置文件</span><br>│   └── store.<span class="hljs-keyword">js </span>    <span class="hljs-comment"># vuex状态管理文件</span><br>├── .gitignore       <span class="hljs-comment"># git忽略文件</span><br>├── .postcssrc.<span class="hljs-keyword">js </span>   <span class="hljs-comment"># postcss配置文件</span><br>├── <span class="hljs-keyword">babel.config.js </span> <span class="hljs-comment"># babel配置文件</span><br>├── package.<span class="hljs-keyword">json </span>    <span class="hljs-comment"># 包管理文件</span><br>└── yarn.lock        <span class="hljs-comment"># yarn依赖信息文件</span><br><br></code></pre></td></tr></table></figure><p>根据你安装时选择的依赖不同，最后生成的目录结构也会有所差异。</p><h3 id="3-可视化界面"><a href="#3-可视化界面" class="headerlink" title="3. 可视化界面"></a>3. 可视化界面</h3><p>当然，除了使用上述命令行构建外，<code>vue-cli 3.x</code> 还提供了可视化的操作界面，在项目目录下我们运行如下命令开启图形化界面：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">vue ui</span><br><br></code></pre></td></tr></table></figure><p>之后浏览器会自动打开本地 <code>8000</code> 端口，页面如下：</p><img src="/2019/08/30/vue/1643ca037f818a81.png" class=""><p>如果你还没有任何项目，那么可以点击创建或者直接导入现有的项目。创建项目和我们使用命令行的步骤基本相同，完全可视化操作，一定程度上降低了构建和使用的难度。项目创建或导入成功后你便可以进入项目进行可视化管理了。</p><img src="/2019/08/30/vue/1643ca8799bb4491.png" class=""><p>在整个管理界面中，我们可以为自己的项目安装 CLI 提供的插件，比如安装 <code>@vue/cli-plugin-babel</code> 插件，同时我们也可以配置相应插件的配置项，进行代码的编译、热更新、检查等。详细的操作大家可以自己进行手动尝试，相信你会发现意想不到的惊喜。</p><h2 id="你还需要了解什么"><a href="#你还需要了解什么" class="headerlink" title="你还需要了解什么"></a>你还需要了解什么</h2><p>上方我们用 vue-cli 成功生成了一个最基础的 Vue 项目，麻雀虽小，五脏俱全，但是想要让麻雀飞起来，我们还要不断的给它进行拓展训练，那么我们还需要了解什么呢？</p> <img src="/2019/08/30/vue/165f2c3a9c4f640c.png" class=""><p>以上这些内容（包含但不限于）将会在本小册的接下来几章进行详细的讲解，你准备好了吗？</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文主要讲述了使用 vue-cli 脚手架进行 Vue 项目构建的基本知识，从构建的流程中我们不难发现 Vue 提供给了我们一套非常灵活可配置的工具，其小巧而不乏大匠的魅力不言而喻。希望大家能够从构建开始，逐渐领略 Vue.js 的匠心，激发自己的对 Vue 的兴趣。</p><h1 id="构建基础篇-1：你需要了解的包管理工具与配置项"><a href="#构建基础篇-1：你需要了解的包管理工具与配置项" class="headerlink" title="构建基础篇 1：你需要了解的包管理工具与配置项"></a>构建基础篇 1：你需要了解的包管理工具与配置项</h1><p>任何一个项目的构建离不开工具和统一的管理标准，在项目开发和维护过程中，我们需要了解安装包的相应工具和配置文件，以此来有效的进行项目的迭代和版本的更新，为项目提供基本的运行环境。本文将详细介绍构建 Vue.js 项目相关的依赖包安装工具和相应的配置文件，为大家提供参考。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>相信大家对于包管理工具的使用一定不会陌生，毕竟它已经成为前端项目中必不可少的一部分，为了照顾部分零基础用户，这里我们做一个简单的介绍。</p><h3 id="1-npm-与-package-json"><a href="#1-npm-与-package-json" class="headerlink" title="1. npm 与 package.json"></a>1. npm 与 package.json</h3><p>npm 是 Node Package Manager 的简称，顾名思义，它是 node 的包管理工具，也是目前世界上最大的开源库生态系统。官方地址为：<a href="https://www.npmjs.com/">https://www.npmjs.com/</a>，你可以在里面找到数以万计的开源包。</p><p>使用 npm 包下载量统计工具，比如 <a href="https://npm-stat.com/">npm-start</a>，我们可以查看相应包在一定时间范围内的下载量数据，下面是 <code>vue-cli</code> 和 <code>@vue/cli</code> 的下载量趋势：</p><img src="/2019/08/30/vue/16441d9cefe89881.png" class=""><p>在上篇文章中我们介绍了使用 vue-cli 来构建自己的项目，并生成了相应的目录结构，而在最外层目录中，我们可以看到有 <code>package.json</code> 这一文件，该文件便是我们需要了解的包管理文件。</p><p>我们先来看一下该文件里面的内容：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;my-project&quot;</span>, <br>    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.1.0&quot;</span>, <br>    <span class="hljs-string">&quot;private&quot;</span>: true, <br>    <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;serve&quot;</span>: <span class="hljs-string">&quot;vue-cli-service serve&quot;</span>,<br>        <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;vue-cli-service build&quot;</span>,<br>        <span class="hljs-string">&quot;lint&quot;</span>: <span class="hljs-string">&quot;vue-cli-service lint&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;vue&quot;</span>: <span class="hljs-string">&quot;^2.5.16&quot;</span>,<br>        <span class="hljs-string">&quot;vue-router&quot;</span>: <span class="hljs-string">&quot;^3.0.1&quot;</span>,<br>        <span class="hljs-string">&quot;vuex&quot;</span>: <span class="hljs-string">&quot;^3.0.1&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;devDependencies&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;@vue/cli-plugin-babel&quot;</span>: <span class="hljs-string">&quot;^3.0.0-beta.15&quot;</span>,<br>        <span class="hljs-string">&quot;@vue/cli-service&quot;</span>: <span class="hljs-string">&quot;^3.0.0-beta.15&quot;</span>,<br>        <span class="hljs-string">&quot;less&quot;</span>: <span class="hljs-string">&quot;^3.0.4&quot;</span>,<br>        <span class="hljs-string">&quot;less-loader&quot;</span>: <span class="hljs-string">&quot;^4.1.0&quot;</span>,<br>        <span class="hljs-string">&quot;vue-template-compiler&quot;</span>: <span class="hljs-string">&quot;^2.5.16&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;browserslist&quot;</span>: [<br>        <span class="hljs-string">&quot;&gt; 1%&quot;,</span><br><span class="hljs-string">        &quot;</span><span class="hljs-keyword">last</span> <span class="hljs-number">2</span> versions<span class="hljs-string">&quot;,</span><br><span class="hljs-string">        &quot;</span><span class="hljs-keyword">not</span> ie &lt;= <span class="hljs-number">8</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>可以看到该文件是由一系列键值对构成的 JSON 对象，每一个键值对都有其相应的作用，比如 scripts 脚本命令的配置，我们在终端启动项目运行的 <code>npm run serve</code> 命令其实便是执行了 scripts 配置下的 serve 项命令 <code>vue-cli-service serve</code> ，我们可以在 scripts 下自己修改或添加相应的项目命令。</p><p>而 dependencies 和 devDependencies 分别为项目生产环境和开发环境的依赖包配置，也就是说像 <code>@vue/cli-service</code> 这样只用于项目开发时的包我们可以放在 devDependencies 下，但像 <code>vue-router</code> 这样结合在项目上线代码中的包应该放在 dependencies 下。</p><p>详细的package.json文件配置项介绍可以参考：<a href="https://docs.npmjs.com/files/package.json">package.json</a></p><h3 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h3><p>在简单的了解了 package.json 文件后，我们再来看下包管理工具的常用命令。一般在项目的构建和开发阶段，我们常用的 npm 命令有：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-comment"># 生成 package.json 文件（需要手动选择配置）</span><br><span class="hljs-built_in">npm</span> init<br><br><span class="hljs-comment"># 生成 package.json 文件（使用默认配置）</span><br><span class="hljs-built_in">npm</span> init -y<br><br><span class="hljs-comment"># 一键安装 package.json 下的依赖包</span><br><span class="hljs-built_in">npm</span> i<br><br><span class="hljs-comment"># 在项目中安装包名为 xxx 的依赖包（配置在 dependencies 下）</span><br><span class="hljs-built_in">npm</span> i xxx<br><br><span class="hljs-comment"># 在项目中安装包名为 xxx 的依赖包（配置在 dependencies 下）</span><br><span class="hljs-built_in">npm</span> i xxx --save<br><br><span class="hljs-comment"># 在项目中安装包名为 xxx 的依赖包（配置在 devDependencies 下）</span><br><span class="hljs-built_in">npm</span> i xxx --save-dev<br><br><span class="hljs-comment"># 全局安装包名为 xxx 的依赖包</span><br><span class="hljs-built_in">npm</span> i -g xxx<br><br><span class="hljs-comment"># 运行 package.json 中 scripts 下的命令</span><br><span class="hljs-built_in">npm</span> run xxx<br><br></code></pre></td></tr></table></figure><p>比较陌生但实用的有：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-comment"># 打开 xxx 包的主页</span><br><span class="hljs-built_in">npm</span> home xxx<br><br><span class="hljs-comment"># 打开 xxx 包的代码仓库</span><br><span class="hljs-built_in">npm</span> repo xxx<br><br><span class="hljs-comment"># 将当前模块发布到 npmjs.com，需要先登录</span><br><span class="hljs-built_in">npm</span> publish<br><br></code></pre></td></tr></table></figure><p>相比 npm，<a href="https://yarnpkg.com/zh-Hans/">yarn</a> 相信大家也不会陌生，它是由 facebook 推出并开源的包管理工具，具有速度快，安全性高，可靠性强等主要优势，它的常用命令如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 生成 package.json 文件（需要手动选择配置）</span><br>yarn <span class="hljs-keyword">init</span><br><br><span class="hljs-meta"># 生成 package.json 文件（使用默认配置）</span><br>yarn <span class="hljs-keyword">init</span> -y<br><br><span class="hljs-meta"># 一键安装 package.json 下的依赖包</span><br>yarn<br><br><span class="hljs-meta"># 在项目中安装包名为 xxx 的依赖包（配置在 dependencies 下）,同时 yarn.lock 也会被更新</span><br>yarn <span class="hljs-keyword">add</span> xxx<br><br><span class="hljs-meta"># 在项目中安装包名为 xxx 的依赖包（配置在配置在 devDependencies 下）,同时 yarn.lock 也会被更新</span><br>yarn <span class="hljs-keyword">add</span> xxx --dev<br><br><span class="hljs-meta"># 全局安装包名为 xxx 的依</span><br>yarn <span class="hljs-keyword">global</span> <span class="hljs-keyword">add</span> xxx<br><br><span class="hljs-meta"># 运行 package.json 中 scripts 下的命令</span><br>yarn xxx<br><br></code></pre></td></tr></table></figure><p>比较陌生但实用的有：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-comment"># 列出 xxx 包的版本信息</span><br>yarn outdated xxx<br><br><span class="hljs-comment"># 验证当前项目 package.json 里的依赖版本和 yarn 的 lock 文件是否匹配</span><br>yarn<span class="hljs-built_in"> check</span><br><span class="hljs-built_in"></span><br><span class="hljs-comment"># 将当前模块发布到 npmjs.com，需要先登录</span><br>yarn publish<br><br></code></pre></td></tr></table></figure><p>以上便是 npm 与 yarn 包管理工具的常用及实用命令，需要注意的是，本小册的讲解将会优先使用 yarn 命令进行包的管理和安装。</p><h3 id="3-第三方插件配置"><a href="#3-第三方插件配置" class="headerlink" title="3. 第三方插件配置"></a>3. 第三方插件配置</h3><p>在上方的 package.json 文件中我们可以看到有 browserslist 这一配置项，那么该配置项便是这里所说的第三方插件配置，该配置的主要作用是用于在不同的前端工具之间共享目标浏览器和 Node.js 的版本：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;browserslist&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;&gt; 1%&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 表示包含所有使用率 &gt; 1% 的浏览器</span><br>    <span class="hljs-string">&quot;last 2 versions&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 表示包含浏览器最新的两个版本</span><br>    <span class="hljs-string">&quot;not ie &lt;= 8&quot;</span> <span class="hljs-comment">// 表示不包含 ie8 及以下版本</span><br><span class="hljs-punctuation">]</span><br><br></code></pre></td></tr></table></figure><p>比如像 <a href="https://www.npmjs.com/package/autoprefixer">autoprefixer</a> 这样的插件需要把你写的 css 样式适配不同的浏览器，那么这里要针对哪些浏览器呢，就是上面配置中所包含的。</p><p>而如果写在 autoprefixer 的配置中，那么会存在一个问题，万一其他第三方插件也需要浏览器的包含范围用于实现其特定的功能，那么就又得在其配置中设置一遍，这样就无法得以共用。所以在 package.json 中配置 browserslist 的属性使得所有工具都会自动找到目标浏览器。</p><p>当然，你也可以单独写在 .browserslistrc 的文件中：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># Browsers that we support </span><br><br>&gt; <span class="hljs-number">1</span>%<br><span class="hljs-keyword">last</span> <span class="hljs-number">2</span> versions<br><span class="hljs-keyword">not</span> ie &lt;= <span class="hljs-number">8</span><br><br></code></pre></td></tr></table></figure><p>至于它是如何去衡量浏览器的使用率和版本的，数据都是来源于 <a href="https://caniuse.com/">Can I Use</a>。你也可以访问 <a href="http://browserl.ist/">http://browserl.ist/</a> 去搜索配置项所包含的浏览器列表，比如搜索 <code>last 2 versions</code> 会得到你想要的结果，或者在项目终端运行如下命令查看：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">npx browserslist</span><br><br></code></pre></td></tr></table></figure><p>除了上述插件的配置，项目中常用的插件还有：babel、postcss 等，有兴趣的同学可以访问其官网进行了解。</p><h3 id="4-vue-cli-包安装"><a href="#4-vue-cli-包安装" class="headerlink" title="4. vue-cli 包安装"></a>4. vue-cli 包安装</h3><p>在上述的教程中，我们使用 npm 或 yarn 进行了包的安装和配置，除了以上两种方法，vue-cli 3.x 还提供了其专属的 <code>vue add</code> 命令，但是需要注意的是该命令安装的包是以 @vue&#x2F;cli-plugin 或者 vue-cli-plugin 开头，即只能安装 Vue 集成的包。</p><p>比如运行：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">vue <span class="hljs-keyword">add </span><span class="hljs-keyword">jquery</span><br><span class="hljs-keyword"></span><br></code></pre></td></tr></table></figure><p>其会安装 <code>vue-cli-plugin-jquery</code>，很显然这个插件不存在便会安装失败。又或者你运行：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">vue <span class="hljs-keyword">add</span><span class="language-bash"> @vue/eslint</span><br><br></code></pre></td></tr></table></figure><p>其会解析为完整的包名 <code>@vue/cli-plugin-eslint</code>，因为该包存在所以会安装成功。</p><p>同时，不同于 npm 或 yarn 的安装， <code>vue add</code> 不仅会将包安装到你的项目中，其还会改变项目的代码或文件结构，所以安装前最好提交你的代码至仓库。</p><p>另外 vue add 中还有两个特例，如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 安装 vue-router</span><br>vue <span class="hljs-built_in">add</span> router<br><br><span class="hljs-comment"># 安装 vuex</span><br>vue <span class="hljs-built_in">add</span> vuex<br><br></code></pre></td></tr></table></figure><p>这两个命令会直接安装 vue-router 和 vuex 并改变你的代码结构，使你的项目集成这两个配置，并不会去安装添加 vue-cli-plugin 或 @vue&#x2F;cli-plugin 前缀的包。</p><h2 id="结语-1"><a href="#结语-1" class="headerlink" title="结语"></a>结语</h2><p>不积跬步无以至千里，不积小流无以成江海。本文主要介绍了在 Vue 项目构建前期需要了解的包管理工具与配置的知识点，只有了解了基本的工具使用才能熟练的对项目进行按需配置，希望大家在接下来的学习中能够学以致用，付诸实践。</p><h2 id="思考-作业"><a href="#思考-作业" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>文章中使用的一些 npm 包名为什么要用 <code>@</code> 开头？</p></li><li><p>除了文章中介绍的 <code>browserslist</code> 这样的配置项可以写在单独的文件中外，还有哪些常用的配置项可以这样操作？又是如何配置的？</p></li><li><p>Vue CLI 3 还集成了哪些包，可以通过 <code>vue add</code> 命令安装？</p></li></ul><h1 id="构建基础篇-2：webpack-在-CLI-3-中的应用"><a href="#构建基础篇-2：webpack-在-CLI-3-中的应用" class="headerlink" title="构建基础篇 2：webpack 在 CLI 3 中的应用"></a>构建基础篇 2：webpack 在 CLI 3 中的应用</h1><p>webpack 作为目前最流行的项目打包工具，被广泛使用于项目的构建和开发过程中，其实说它是打包工具有点大材小用了，我个人认为它是一个集前端自动化、模块化、组件化于一体的可拓展系统，你可以根据自己的需要来进行一系列的配置和安装，最终实现你需要的功能并进行打包输出。</p><p>而在 Vue 的项目中，webpack 同样充当着举足轻重的作用，比如打包压缩、异步加载、模块化管理等等。如果你了解 webpack 那么相信本文会让你更了解其在 Vue 中的使用，如果你是一个 webpack 小白，那么也没事，相信你会很容易的了解它在项目中的配置和功能。</p><h2 id="webpack-的使用"><a href="#webpack-的使用" class="headerlink" title="webpack 的使用"></a>webpack 的使用</h2><h3 id="1-与-vue-cli-2-x-的差异"><a href="#1-与-vue-cli-2-x-的差异" class="headerlink" title="1. 与 vue-cli 2.x 的差异"></a>1. 与 vue-cli 2.x 的差异</h3><p>如果你使用过 vue-cli 2.x，那么你应该了解其构建出的目录会包含相应的 webpack 配置文件，但是在 vue-cli 3.x 中你却见不到一份关于 webpack 的配置文件，难道 3.x 抛弃了 webpack？其实不然，3.x 提供了一种开箱即用的模式，即你无需配置 webpack 就可以运行项目，并且它提供了一个 vue.config.js 文件来满足开发者对其封装的 webpack 默认配置的修改。如图：</p><img src="/2019/08/30/vue/164c05d8ad965059.png" class=""><h3 id="2-vue-config-js-的配置"><a href="#2-vue-config-js-的配置" class="headerlink" title="2. vue.config.js 的配置"></a>2. vue.config.js 的配置</h3><p>通过上方新老版本的对比，我们可以清晰的看出 vue.config.js 的配置项结构，如果你构建的项目中没有该文件，那么你需要在根目录手动创建它。下面我们就来介绍一下其常用配置项的功能和用途：</p><h3 id="a-baseurl"><a href="#a-baseurl" class="headerlink" title="a. baseurl"></a>a. baseurl</h3><p>在第一节《Vue CLI 3 项目构建基础》中我们通过 vue-cli 3.x 成功构建并在浏览器中打开 <code>http://localhost:8080/</code> 展示了项目首页。如果现在你想要将项目地址加一个二级目录，比如：<code>http://localhost:8080/vue/</code>，那么我们需要在 vue.config.js 里配置 baseurl 这一项：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// vue.config.js</span><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>    ...<br>    <br>    baseUrl: <span class="hljs-string">&#x27;vue&#x27;</span>,<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>其改变的其实是 webpack 配置文件中 output 的 <code>publicPath</code> 项，这时候你重启终端再次打开页面的时候我们首页的 url 就会变成带二级目录的形式。</p><h3 id="b-outputDir"><a href="#b-outputDir" class="headerlink" title="b. outputDir"></a>b. outputDir</h3><p>如果你想将构建好的文件打包输出到 output 文件夹下（默认是 dist 文件夹），你可以配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// vue.config.js</span><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>    ...<br>    <br>    outputDir: <span class="hljs-string">&#x27;output&#x27;</span>,<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后运行命令 <code>yarn build</code> 进行打包输出，你会发现项目跟目录会创建 output 文件夹， 这其实改变了 webpack 配置中 output 下的 <code>path</code> 项，修改了文件的输出路径。</p><h3 id="c-productionSourceMap"><a href="#c-productionSourceMap" class="headerlink" title="c. productionSourceMap"></a>c. productionSourceMap</h3><p>该配置项用于设置是否为生产环境构建生成 source map，一般在生产环境下为了快速定位错误信息，我们都会开启 source map：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// vue.config.js</span><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>    ...<br>    <br>    productionSourceMap: <span class="hljs-literal">true</span>,<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>该配置会修改 webpack 中 <code>devtool</code> 项的值为 <code>source-map</code>。</p><p>开启 source map 后，我们打包输出的文件中会包含 js 对应的 .map 文件，其用途可以参考：<a href="http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html">JavaScript Source Map 详解</a></p><h3 id="d-chainWebpack"><a href="#d-chainWebpack" class="headerlink" title="d. chainWebpack"></a>d. chainWebpack</h3><p>chainWebpack 配置项允许我们更细粒度的控制 webpack 的内部配置，其集成的是 <a href="https://github.com/mozilla-neutrino/webpack-chain">webpack-chain</a> 这一插件，该插件可以让我们能够使用链式操作来修改配置，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 用于做相应的合并处理</span><br><span class="hljs-keyword">const</span> merge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-merge&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    ...<br>    <br>    <span class="hljs-comment">// config 参数为已经解析好的 webpack 配置</span><br>    <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        config.<span class="hljs-property">module</span><br>            .<span class="hljs-title function_">rule</span>(<span class="hljs-string">&#x27;images&#x27;</span>)<br>            .<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;url-loader&#x27;</span>)<br>            .<span class="hljs-title function_">tap</span>(<span class="hljs-function"><span class="hljs-params">options</span> =&gt;</span><br>                <span class="hljs-title function_">merge</span>(options, &#123;<br>                  <span class="hljs-attr">limit</span>: <span class="hljs-number">5120</span>,<br>                &#125;)<br>            )<br>    &#125;<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>以上操作我们可以成功修改 webpack 中 module 项里配置 rules 规则为图片下的 url-loader 值，将其 limit 限制改为 5M，修改后的 webpack 配置代码如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs lua">&#123;<br>    ...<br>    <br>    <span class="hljs-built_in">module</span>: &#123;<br>        rules: [<br>            &#123;   <br>                /* <span class="hljs-built_in">config</span>.<span class="hljs-built_in">module</span>.rule(<span class="hljs-string">&#x27;images&#x27;</span>) */<br>                test: /\.(png|jpe?g|gif|webp)(\?.*)?$/,<br>                use: [<br>                    /* <span class="hljs-built_in">config</span>.<span class="hljs-built_in">module</span>.rule(<span class="hljs-string">&#x27;images&#x27;</span>).use(<span class="hljs-string">&#x27;url-loader&#x27;</span>) */<br>                    &#123;<br>                        loader: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>                        options: &#123;<br>                            limit: <span class="hljs-number">5120</span>,<br>                            name: <span class="hljs-string">&#x27;img/[name].[hash:8].[ext]&#x27;</span><br>                        &#125;<br>                    &#125;<br>                ]<br>            &#125;<br>        ]<br>    &#125;<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里需要注意的是我们使用了 webpack-merge 这一插件，该插件用于做 webpack 配置的合并处理，这样 options 下面的其他值就不会被覆盖或改变。</p><p>关于 webpack-chain 的使用可以参考其 github 官方地址：<a href="https://github.com/mozilla-neutrino/webpack-chain">https://github.com/mozilla-neutrino/webpack-chain</a>，它提供了操作类似 JavaScript Set 和 Map 的方式，以及一系列速记方法。</p> <img src="/2019/08/30/vue/166c58e690ddb43d.png" class=""><h3 id="e-configureWebpack"><a href="#e-configureWebpack" class="headerlink" title="e. configureWebpack"></a>e. configureWebpack</h3><p>除了上述使用 chainWebpack 来改变 webpack 内部配置外，我们还可以使用 configureWebpack 来进行修改，两者的不同点在于 chainWebpack 是链式修改，而 configureWebpack 更倾向于整体替换和修改。示例代码如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// vue.config.js</span><br>module.exports = &#123;<br>    ...<br>    <br>    <span class="hljs-comment">// config 参数为已经解析好的 webpack 配置</span><br>    configureWebpack: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// config.plugins = []; // 这样会直接将 plugins 置空</span><br>        <br>        <span class="hljs-comment">// 使用 return 一个对象会通过 webpack-merge 进行合并，plugins 不会置空</span><br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">plugins</span>: []<br>        &#125;<br>    &#125;<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>configureWebpack 可以直接是一个对象，也可以是一个函数，如果是对象它会直接使用 webpack-merge 对其进行合并处理，如果是函数，你可以直接使用其 config 参数来修改 webpack 中的配置，或者返回一个对象来进行 merge 处理。</p><p>你可以在项目目录下运行 <code>vue inspect</code> 来查看你修改后的 webpack 完整配置，当然你也可以缩小审查范围，比如：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 只查看 plugins 的内容</span><br>vue <span class="hljs-keyword">inspect </span>plugins<br><br></code></pre></td></tr></table></figure><h3 id="f-devServer"><a href="#f-devServer" class="headerlink" title="f. devServer"></a>f. devServer</h3><p>vue.config.js 还提供了 devServer 项用于配置 webpack-dev-server 的行为，使得我们可以对本地服务器进行相应配置，我们在命令行中运行的 <code>yarn serve</code> 对应的命令 <code>vue-cli-service serve</code> 其实便是基于 webpack-dev-server 开启的一个本地服务器，其常用配置参数如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// vue.config.js</span><br>module.exports = &#123;<br>    ...<br>    <br>    devServer: &#123;<br>        <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否自动打开浏览器页面</span><br>        host: <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-comment">// 指定使用一个 host。默认是 localhost</span><br>        port: <span class="hljs-number">8080</span>, <span class="hljs-comment">// 端口地址</span><br>        https: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 使用https提供服务</span><br>        proxy: <span class="hljs-literal">null</span>, <span class="hljs-comment">// string | Object 代理设置</span><br>        <br>        <span class="hljs-comment">// 提供在服务器内部的其他中间件之前执行自定义中间件的能力</span><br>        before: <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;<br>          <span class="hljs-comment">// `app` 是一个 express 实例</span><br>        &#125;<br>    &#125;<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当然除了以上参数，其支持所有的 webpack-dev-server 中的选项，比如 <code>historyApiFallback</code> 用于重写路由（会在后续的多页应用配置中讲解）、progress 将运行进度输出到控制台等，具体可参考：<a href="https://www.webpackjs.com/configuration/dev-server/">devServer</a></p><p>以上讲解了 vue.config.js 中一些常用的配置项功能，具体的配置实现需要结合实际项目进行，完整的配置项可以查看：<a href="https://github.com/vuejs/vue-cli/blob/ce3e2d475d63895cbb40f62425bb6b3237469bcd/docs/zh/config/README.md">vue.config.js</a></p><h3 id="3-默认插件简介"><a href="#3-默认插件简介" class="headerlink" title="3. 默认插件简介"></a>3. 默认插件简介</h3><p>通过对 vue.config.js 的了解，我们知道了 vue-cli 3.x 为我们默认封装了项目运行的常用 webpack 配置，那么它给我们提供了哪些默认插件，每一个 plugin 又有着怎样的用途呢？除了使用 <code>vue inspect plugins</code> 我们还可以通过运行 <code>vue ui</code> 进入可视化页面查看，步骤如下：</p><ul><li>打开可视化页面，点击对应项目进入管理页面（如果没有对应项目，需要导入或新建）</li><li>点击侧边栏 Tasks 选项，再点击二级栏 inspect 选项</li><li>点击 Run task 按钮执行审查命令</li></ul><p>如图所示：</p><img src="/2019/08/30/vue/164c15d1f97432b5.png" class=""><p>最后我们从输出的内容中找到 plugins 数组，其包含了如下插件（配置项已经省略，增加了定义插件的代码）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// vue-loader是 webpack 的加载器，允许你以单文件组件的格式编写 Vue 组件</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VueLoaderPlugin</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;vue-loader/lib/plugin&#x27;</span>);<br><br><span class="hljs-comment">// webpack 内置插件，用于创建在编译时可以配置的全局常量</span><br><span class="hljs-keyword">const</span> &#123; DefinePlugin &#125; = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);<br><br><span class="hljs-comment">// 用于强制所有模块的完整路径必需与磁盘上实际路径的确切大小写相匹配</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CaseSensitivePathsPlugin</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;case-sensitive-paths-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">// 识别某些类型的 webpack 错误并整理，以提供开发人员更好的体验。</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">FriendlyErrorsPlugin</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;friendly-errors-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">// 将 CSS 提取到单独的文件中，为每个包含 CSS 的 JS 文件创建一个 CSS 文件</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MiniCssExtractPlugin</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&quot;mini-css-extract-plugin&quot;</span>);<br><br><span class="hljs-comment">// 用于在 webpack 构建期间优化、最小化 CSS文件</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">OptimizeCssnanoPlugin</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">// webpack 内置插件，用于根据模块的相对路径生成 hash 作为模块 id, 一般用于生产环境</span><br><span class="hljs-keyword">const</span> &#123; HashedModuleIdsPlugin &#125; = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);<br><br><span class="hljs-comment">// 用于根据模板或使用加载器生成 HTML 文件</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">HtmlWebpackPlugin</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">// 用于在使用 html-webpack-plugin 生成的 html 中添加 &lt;link rel =&#x27;preload&#x27;&gt; 或 &lt;link rel =&#x27;prefetch&#x27;&gt;，有助于异步加载</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PreloadPlugin</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;preload-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">// 用于将单个文件或整个目录复制到构建目录</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CopyWebpackPlugin</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;copy-webpack-plugin&#x27;</span>);<br><br>module.exports = &#123;<br>    plugins: [<br>        <span class="hljs-comment">/* config.plugin(&#x27;vue-loader&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueLoaderPlugin</span>(), <br>        <br>        <span class="hljs-comment">/* config.plugin(&#x27;define&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefinePlugin</span>(),<br>        <br>        <span class="hljs-comment">/* config.plugin(&#x27;case-sensitive-paths&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">CaseSensitivePathsPlugin</span>(),<br>        <br>        <span class="hljs-comment">/* config.plugin(&#x27;friendly-errors&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">FriendlyErrorsWebpackPlugin</span>(),<br>        <br>        <span class="hljs-comment">/* config.plugin(&#x27;extract-css&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>(),<br>        <br>        <span class="hljs-comment">/* config.plugin(&#x27;optimize-css&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">OptimizeCssnanoPlugin</span>(),<br>        <br>        <span class="hljs-comment">/* config.plugin(&#x27;hash-module-ids&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedModuleIdsPlugin</span>(),<br>        <br>        <span class="hljs-comment">/* config.plugin(&#x27;html&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(),<br>        <br>        <span class="hljs-comment">/* config.plugin(&#x27;preload&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">PreloadPlugin</span>(),<br>        <br>        <span class="hljs-comment">/* config.plugin(&#x27;copy&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyWebpackPlugin</span>()<br>    ]<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们可以看到每个插件上方都添加了使用 chainWebpack 访问的方式，同时我也添加了每个插件相应的用途注释，需要注意的是要区分 webpack 内置插件和第三方插件的区别，如果是内置插件则无需安装下载，而外部插件大家可以直接访问：<a href="https://www.npmjs.com/">https://www.npmjs.com/</a> 搜索对应的插件，了解其详细的 api 设置。</p><h2 id="结语-2"><a href="#结语-2" class="headerlink" title="结语"></a>结语</h2><p>本文主要阐述了 vue-cli 3.x 下基于 vue.config.js 配置 webpack 的主要方法，同时也介绍了其默认的 webpack 插件与主要功能，相信大家在了解 webpack 的知识后能够更加轻松的开展后续内容的学习，为接下来项目的构建和开发奠定基础。</p><h2 id="思考-作业-1"><a href="#思考-作业-1" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>除了文章中介绍的配置项，<code>vue.config.js</code> 中还有哪些额外的配置？</p></li><li><p><code>webpack-merge</code> 的合并原理是怎样的？</p></li><li><p>使用 <code>chainWebpack</code> 获取到 webpack 中的某一插件后，如何修改其配置？</p></li></ul><h1 id="构建基础篇-3：env-文件与环境设置"><a href="#构建基础篇-3：env-文件与环境设置" class="headerlink" title="构建基础篇 3：env 文件与环境设置"></a>构建基础篇 3：env 文件与环境设置</h1><p>在实际项目的开发中，我们一般会经历项目的开发阶段、测试阶段和最终上线阶段，每一个阶段对于项目代码的要求可能都不尽相同，那么我们如何能够游刃有余的在不同阶段下使我们的项目呈现不同的效果，使用不同的功能呢？这里就需要引入<strong>环境</strong>的概念。</p><p>一般一个项目都会有以下 3 种环境：</p><ul><li>开发环境（开发阶段，本地开发版本，一般会使用一些调试工具或额外的辅助功能）</li><li>测试环境（测试阶段，上线前版本，除了一些 bug 的修复，基本不会和上线版本有很大差别）</li><li>生产环境（上线阶段，正式对外发布的版本，一般会进行优化，关掉错误报告）</li></ul><p>作为一名开发人员，我们可能需要针对每一种环境编写一些不同的代码并且保证这些代码运行在正确的环境中，那么我们应该如何在代码中判断项目所处的环境同时执行不同的代码呢？这就需要我们进行正确的环境配置和管理。</p><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><h3 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h3><p>正确的配置环境首先需要我们认识不同环境配置之间的关系，如图所示：</p> <img src="/2019/08/30/vue/16749778e85b5370.png" class=""><p>我们从上图中可以了解到每一个环境其实有其不同的配置，同时它们也存在着交集部分，交集便是它们都共有的配置项，那么在 Vue 中我们应该如何处理呢？</p><p>我们可以在根目录下创建以下形式的文件进行不同环境下变量的配置：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">.env</span>                <span class="hljs-comment"># 在所有的环境中被载入</span><br><span class="hljs-string">.env.local</span>          <span class="hljs-comment"># 在所有的环境中被载入，但会被 git 忽略</span><br><span class="hljs-string">.env.</span>[mode]         <span class="hljs-comment"># 只在指定的模式中被载入</span><br><span class="hljs-string">.env.</span>[mode]<span class="hljs-string">.local</span>   <span class="hljs-comment"># 只在指定的模式中被载入，但会被 git 忽略</span><br><br></code></pre></td></tr></table></figure><p>比如我们创建一个名为 .env.stage 的文件，该文件表明其只在 stage 环境下被加载，在这个文件中，我们可以配置如下键值对的变量：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">NODE_ENV</span>=stage<br><span class="hljs-attr">VUE_APP_TITLE</span>=stage mode<br><br></code></pre></td></tr></table></figure><p>这时候我们怎么在 vue.config.js 中访问这些变量呢？很简单，使用 <code>process.env.[name]</code> 进行访问就可以了，比如：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// vue.config.js</span><br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(process.env.NODE_ENV); <span class="hljs-comment">// development（在终端输出）</span><br><br></code></pre></td></tr></table></figure><p>当你运行 <code>yarn serve</code> 命令后会发现输出的是 development，因为 <code>vue-cli-service serve</code> 命令默认设置的环境是 development，你需要修改 package.json 中的 serve 脚本的命令为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;serve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service serve --mode stage&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p><code>--mode stage</code> 其实就是修改了 webpack 4 中的 mode 配置项为 stage，同时其会读取对应 .env.[model] 文件下的配置，如果没找到对应配置文件，其会使用默认环境 development，同样 <code>vue-cli-service build</code> 会使用默认环境 production。</p><p>这时候如果你再创建一个 .env 的文件，再次配置重复的变量，但是值不同，如：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">NODE_ENV</span>=staging<br><span class="hljs-attr">VUE_APP_TITLE</span>=staging mode<br><span class="hljs-attr">VUE_APP_NAME</span>=project<br><br></code></pre></td></tr></table></figure><p>因为 .env 文件会被所有环境加载，即公共配置，那么最终我们运行 <code>vue-cli-service serve</code> 打印出来的是哪个呢？答案是 <strong>stage</strong>，但是如果是 .env.stage.local 文件中配置成上方这样，答案便是 <strong>staging</strong>，所以 .env.[mode].local 会覆盖 .env.[mode] 下的相同配置。同理 .env.local 会覆盖 .env 下的相同配置。</p><p>由此可以得出结论，相同配置项的权重：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.env</span>.<span class="hljs-selector-attr">[mode]</span><span class="hljs-selector-class">.local</span> &gt; <span class="hljs-selector-class">.env</span>.<span class="hljs-selector-attr">[mode]</span> &gt; <span class="hljs-selector-class">.env</span><span class="hljs-selector-class">.local</span> &gt; <span class="hljs-selector-class">.env</span> <br><br></code></pre></td></tr></table></figure><p>但是需要注意的是，除了相同配置项权重大的覆盖小的，不同配置项它们会进行合并操作，类似于 Javascript 中的 Object.assign 的用法。</p><h3 id="2-环境注入"><a href="#2-环境注入" class="headerlink" title="2. 环境注入"></a>2. 环境注入</h3><p>通过上述配置文件的创建，我们成功使用命令行的形式对项目环境进行了设置并可以自由切换，但是需要注意的是我们在 Vue 的前端代码中打印出的 <code>process.env</code> 与 vue.config.js 中输出的可能是不一样的，这需要普及一个知识点：webpack 通过 DefinePlugin 内置插件将 process.env 注入到客户端代码中。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// webpack 配置</span><br>&#123;<br>    ...<br>    <br>    plugins: <span class="hljs-type"></span>[<br>        <span class="hljs-keyword">new</span> <span class="hljs-type">webpack</span>.DefinePlugin(&#123;<br>            <span class="hljs-string">&#x27;process.env&#x27;</span>: <span class="hljs-type"></span>&#123;<br>                NODE_ENV: <span class="hljs-type">JSON</span>.stringify(process.env.NODE_ENV)<br>            &#125;<br>        &#125;),<br>    ],<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>由于 vue-cli 3.x 封装的 webpack 配置中已经帮我们完成了这个功能，所以我们可以直接在客户端代码中打印出 process.env 的值，该对象可以包含多个键值对，也就是说可以注入多个值，但是经过 CLI 封装后仅支持注入环境配置文件中以 <code>VUE_APP_</code> 开头的变量，而 <code>NODE_ENV</code> 和 <code>BASE_URL</code> 这两个特殊变量除外。比如我们在权重最高的 .env.stage.local 文件中写入：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">NODE_ENV</span>=stage2<br><span class="hljs-attr">VUE_APP_TITLE</span>=stage mode2<br><span class="hljs-attr">NAME</span>=vue<br><br></code></pre></td></tr></table></figure><p>然后我们尝试在 vue.config.js 中打印 <code>process.env</code>，终端输出：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lasso">&#123;<br>    <span class="hljs-params">...</span><br>    <br>    npm_config_ignore_scripts: <span class="hljs-string">&#x27;&#x27;</span>,<br>    npm_config_version_git_sign: <span class="hljs-string">&#x27;&#x27;</span>,<br>    npm_config_ignore_optional: <span class="hljs-string">&#x27;&#x27;</span>,<br>    npm_config_init_version: <span class="hljs-string">&#x27;1.0.0&#x27;</span>,<br>    npm_package_dependencies_vue_router: <span class="hljs-string">&#x27;^3.0.1&#x27;</span>,<br>    npm_config_version_tag_prefix: <span class="hljs-string">&#x27;v&#x27;</span>,<br>    npm_node_execpath: <span class="hljs-string">&#x27;/usr/local/bin/node&#x27;</span>,<br>    NODE_ENV: <span class="hljs-string">&#x27;stage2&#x27;</span>,<br>    VUE_APP_TITLE: <span class="hljs-string">&#x27;stage mode2&#x27;</span>,<br>    NAME: <span class="hljs-string">&#x27;vue&#x27;</span>,<br>    BABEL_ENV: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <br>    <span class="hljs-params">...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到输出内容除了我们环境配置中的变量外还包含了很多 npm 的信息，但是我们在入口文件 main.js 中打印会发现输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;BASE_URL&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/vue/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;NODE_ENV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stage2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;VUE_APP_TITLE&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stage mode2&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>可见注入时过滤调了非 <code>VUE_APP_</code> 开头的变量，其中多出的 <code>BASE_URL</code> 为你在 vue.config.js 设置的值，默认为 &#x2F;，其在环境配置文件中设置无效。</p> <img src="/2019/08/30/vue/167497acd942516e.png" class=""><h3 id="3-额外配置"><a href="#3-额外配置" class="headerlink" title="3. 额外配置"></a>3. 额外配置</h3><p>以上我们通过新建配置文件的方式为项目不同环境配置不同的变量值，能够实现项目基本的环境管理，但是 .env 这样的配置文件中的参数目前只支持静态值，无法使用动态参数，在某些情况下无法实现特定需求，这时候我们可以在根目录下新建 config 文件夹用于存放一些额外的配置文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* 配置文件 index.js */</span><br><br><span class="hljs-comment">// 公共变量</span><br><span class="hljs-keyword">const</span> com = &#123;<br>    <span class="hljs-attr">IP</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>)<br>&#125;;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><br>    <span class="hljs-comment">// 开发环境变量</span><br>    <span class="hljs-attr">dev</span>: &#123;<br>    <span class="hljs-attr">env</span>: &#123;<br>            <span class="hljs-attr">TYPE</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-string">&#x27;dev&#x27;</span>),<br>            ...com<br>    &#125;<br>    &#125;,<br>    <br>    <span class="hljs-comment">// 生产环境变量</span><br>    <span class="hljs-attr">build</span>: &#123;<br>    <span class="hljs-attr">env</span>: &#123;<br>            <span class="hljs-attr">TYPE</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-string">&#x27;prod&#x27;</span>),<br>            ...com<br>    &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上方代码我们把环境变量分为了公共变量、开发环境变量和生产环境变量，当然这些变量可能是动态的，比如用户的 ip 等。现在我们要在 vue.config.js 里注入这些变量，我们可以使用 chainWebpack 修改 DefinePlugin 中的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* vue.config.js */</span><br><span class="hljs-keyword">const</span> configs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./config&#x27;</span>);<br><br><span class="hljs-comment">// 用于做相应的 merge 处理</span><br><span class="hljs-keyword">const</span> merge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-merge&#x27;</span>);<br><br><span class="hljs-comment">// 根据环境判断使用哪份配置</span><br><span class="hljs-keyword">const</span> cfg = process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span> ? configs.<span class="hljs-property">build</span>.<span class="hljs-property">env</span> : configs.<span class="hljs-property">dev</span>.<span class="hljs-property">env</span>;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    ...<br>    <br>    <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        config.<span class="hljs-title function_">plugin</span>(<span class="hljs-string">&#x27;define&#x27;</span>)<br>            .<span class="hljs-title function_">tap</span>(<span class="hljs-function"><span class="hljs-params">args</span> =&gt;</span> &#123;<br>                <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;process.env&#x27;</span>;<br>                <br>                <span class="hljs-comment">// 使用 merge 保证原始值不变</span><br>                args[<span class="hljs-number">0</span>][name] = <span class="hljs-title function_">merge</span>(args[<span class="hljs-number">0</span>][name], cfg);<br>    <br>                <span class="hljs-keyword">return</span> args<br>            &#125;)<br>    &#125;,<br><br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后我们可以在客户端成功打印出包含动态配置的对象：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;NODE_ENV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stage2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;VUE_APP_TITLE&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stage mode2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;BASE_URL&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/vue/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;TYPE&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dev&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;IP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxx&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h3 id="4-实际场景"><a href="#4-实际场景" class="headerlink" title="4. 实际场景"></a>4. 实际场景</h3><p>结合以上环境变量的配置，我们项目中一般会遇到一些实际场景： 比如在非线上环境我们可以给自己的移动端项目开启 <a href="https://github.com/Tencent/vConsole">vConsole</a> 调试，但是在线上环境肯定不需要开启这一功能，我们可以在入口文件中进行设置，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* main.js */</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-comment">// 如果是非线上环境，加载 VConsole</span><br><span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> !== <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">VConsole</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vconsole/dist/vconsole.min.js&#x27;</span>);<br>    <span class="hljs-keyword">var</span> vConsole = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VConsole</span>();<br>&#125;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  router,<br>  store,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br><br></code></pre></td></tr></table></figure><p>vConsole 是一款用于移动网页的轻量级，可扩展的前端开发工具，可以看作是移动端浏览器的控制台，如图：</p> <img src="/2019/08/30/vue/164d2204ddfd1384.png" class=""><p>另外我们还可以使用配置中的 BASE_URL 来设置路由的 base 参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* router.js */</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/Home.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/About.vue&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>)<br><br><span class="hljs-keyword">let</span> base = <span class="hljs-string">`<span class="hljs-subst">$&#123;process.env.BASE_URL&#125;</span>`</span>; <span class="hljs-comment">// 获取二级目录</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;history&#x27;</span>,<br>    <span class="hljs-attr">base</span>: base, <span class="hljs-comment">// 设置 base 值</span><br>    <span class="hljs-attr">routes</span>: [<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span><br>        &#125;<br>    ]<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>每一个环境变量你都可以用于项目的一些地方，它提供给了我们一种全局的可访问形式，也是基于 Node 开发的特性所在。</p><h2 id="结语-3"><a href="#结语-3" class="headerlink" title="结语"></a>结语</h2><p>环境的配置和管理对于项目的构建起到了至关重要的作用，通过给项目配置不同的环境不仅可以增加开发的灵活性、提高程序的拓展性，同时也有助于帮助我们去了解并分析项目在不同环境下的运行机制，建立全局观念。</p><h2 id="思考-作业-2"><a href="#思考-作业-2" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>webpack 通过 DefinePlugin 内置插件将 process.env 注入到客户端代码中时，<code>process.env.NODE_ENV</code> 为什么要进行 JSON.stringify 处理？</p></li><li><p><code>process.env</code> 中如何获取 package.json 中 name 的值？</p></li><li><p>如何在 package.json 中的 scripts 字段中定义一些自定义脚本来切换不同的环境？</p></li></ul><h1 id="构建实战篇-1：单页应用的基本配置"><a href="#构建实战篇-1：单页应用的基本配置" class="headerlink" title="构建实战篇 1：单页应用的基本配置"></a>构建实战篇 1：单页应用的基本配置</h1><p>前几篇文章我们介绍了 Vue 项目构建及运行的前期工作，包括 webpack 的配置、环境变量的使用等，在了解并掌握了这些前期准备工作后，那么接下来我们可以走进 Vue 项目的内部，一探其内部配置的基本构成。</p> <img src="/2019/08/30/vue/164d69c00ea9e1cc.png" class=""><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="1-路由配置"><a href="#1-路由配置" class="headerlink" title="1. 路由配置"></a>1. 路由配置</h3><p>由于 Vue 这类型的框架都是以一个或多个单页构成，在单页内部跳转并不会重新渲染 HTML 文件，其路由可以由前端进行控制，因此我们需要在项目内部编写相应的路由文件，Vue 会解析这些文件中的配置并进行对应的跳转渲染。</p><p>我们来看一下 CLI 给我们生成的 router.js 文件的配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* router.js */</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/Home.vue&#x27;</span> <span class="hljs-comment">// 引入 Home 组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/About.vue&#x27;</span> <span class="hljs-comment">// 引入 About 组件</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>) <span class="hljs-comment">// 注册路由</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>    <span class="hljs-attr">routes</span>: [&#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>    &#125;, &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span><br>    &#125;]<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>这份配置可以算是最基础的路由配置，有以下几点需要进行优化：</p><ul><li>如果路由存在二级目录，需要添加 base 属性，否则默认为 “&#x2F;“</li><li>默认路由模式是 hash 模式，会携带 # 标记，与真实 url 不符，可以改为 history 模式</li><li>页面组件没有进行按需加载，可以使用 <code>require.ensure()</code> 来进行优化</li></ul><p>下面是我们优化结束的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* router.js */</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-comment">// 引入 Home 组件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = resolve =&gt; &#123;<br>    <span class="hljs-built_in">require</span>.<span class="hljs-title function_">ensure</span>([<span class="hljs-string">&#x27;./views/Home.vue&#x27;</span>], <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./views/Home.vue&#x27;</span>))<br>    &#125;)<br>&#125;<br><br><span class="hljs-comment">// 引入 About 组件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">About</span> = resolve =&gt; &#123;<br>    <span class="hljs-built_in">require</span>.<span class="hljs-title function_">ensure</span>([<span class="hljs-string">&#x27;./views/About.vue&#x27;</span>], <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./views/About.vue&#x27;</span>))<br>    &#125;)<br>&#125;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>)<br><br><span class="hljs-keyword">let</span> base = <span class="hljs-string">`<span class="hljs-subst">$&#123;process.env.BASE_URL&#125;</span>`</span> <span class="hljs-comment">// 动态获取二级目录</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;history&#x27;</span>,<br>    <span class="hljs-attr">base</span>: base,<br>    <span class="hljs-attr">routes</span>: [&#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>    &#125;, &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span><br>    &#125;]<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>改为 history 后我们 url 的路径就变成了 <code>http://127.0.0.1:8080/vue/about</code>，而不是原来的 <code>http://127.0.0.1:8080/vue/#/about</code>，但是需要注意页面渲染 404 的问题，具体可查阅：<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html">HTML5 History 模式</a>。</p><p>而在异步加载的优化上，我们使用了 webpack 提供的 require.ensure() 进行了代码拆分，主要区别在于没有优化前，访问 Home 页面会一起加载 About 组件的资源，因为它们打包进了一个 app.js 中：</p><img src="/2019/08/30/vue/164d754590f2d34d.png" class=""><p>但是优化过后，它们分别被拆分成了 2.js 和 3.js：</p><img src="/2019/08/30/vue/164d7569cad0a655.png" class=""><img src="/2019/08/30/vue/164d7567ab535a4c.png" class=""><p>如此，只有当用户点击了某页面，才会加载对应页面的 js 文件，实现了按需加载的功能。</p><blockquote><p>webpack 在编译时，会静态地解析代码中的 require.ensure()，同时将模块添加到一个分开的 chunk 当中。这个新的 chunk 会被 webpack 通过 jsonp 来按需加载。</p></blockquote><p>关于 <code>require.ensure()</code> 的知识点可以参考官方文档：<a href="https://webpack.js.org/api/module-methods/#require-ensure">require.ensure</a>。</p><p>当然，除了使用 require.ensure 来拆分代码，<a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html#%E6%8A%8A%E7%BB%84%E4%BB%B6%E6%8C%89%E7%BB%84%E5%88%86%E5%9D%97">Vue Router</a> 官方文档还推荐使用动态 <code>import</code> 语法来进行代码分块，比如上述 require.ensure 代码可以修改为：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-regexp">//</span> 引入 Home 组件<br>const Home = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./views/Home.vue&#x27;</span>);<br><br><span class="hljs-regexp">//</span> 引入 About 组件<br>const About = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./views/About.vue&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p>其余代码可以保持不变，仍然可以实现同样的功能。如果你想给拆分出的文件命名，可以尝试一下 webpack 提供的 <code>Magic Comments</code>（魔法注释）：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">const</span> Home = () =&gt; <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName:&#x27;home&#x27;*/</span> <span class="hljs-string">&#x27;./views/Home.vue&#x27;</span>);<br><br></code></pre></td></tr></table></figure><h3 id="2-Vuex-配置"><a href="#2-Vuex-配置" class="headerlink" title="2. Vuex 配置"></a>2. Vuex 配置</h3><p>除了 vue-router，如果你的项目需要用到 <a href="https://vuex.vuejs.org/zh/">Vuex</a> ，那么你应该对它有一定的了解，Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。这里我们先来看一下使用 CLI 生成的配置文件 store.js 中的内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php">import Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br>import Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br>Vue.<span class="hljs-keyword">use</span>(Vuex)<br><br>export <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title function_ invoke__">Store</span>(&#123;<br>    <span class="hljs-attr">state</span>: &#123;<br><br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br><br>    &#125;,<br>    <span class="hljs-attr">actions</span>: &#123;<br><br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>该配置文件便是 Vuex 的配置文件，主要有 4 个核心点：state、mutations、actions 及 getter，详细的介绍大家可以参考官方文档：<a href="https://vuex.vuejs.org/zh/guide/state.html">核心概念</a>，这里我用一句话介绍它们之间的关系就是：<strong>我们可以通过 actions 异步提交 mutations 去 修改 state 的值并通过 getter 获取</strong>。</p><p>需要注意的是不是每一个项目都适合使用 Vuex，如果你的项目是中大型项目，那么使用 Vuex 来管理错综复杂的状态数据是很有帮助的，而为了后期的拓展性和可维护性，这里不建议使用 CLI 生成的一份配置文件来管理所有的状态操作，我们可以把它拆分为以下目录：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">└── store<br>    ├── index.<span class="hljs-keyword">js </span>         <span class="hljs-comment"># 我们组装模块并导出 store 的地方</span><br>    ├── actions.<span class="hljs-keyword">js </span>       <span class="hljs-comment"># 根级别的 action</span><br>    ├── mutations.<span class="hljs-keyword">js </span>     <span class="hljs-comment"># 根级别的 mutation</span><br>    └── modules<br>        ├── moduleA.<span class="hljs-keyword">js </span>   <span class="hljs-comment"># A模块</span><br>        └── moduleB.<span class="hljs-keyword">js </span>   <span class="hljs-comment"># B模块</span><br><br></code></pre></td></tr></table></figure><img src="/2019/08/30/vue/166c0985b8c2ae68.png" class=""><p>与单个 store.js 文件不同的是，我们按模块进行了划分，每个模块中都可以包含自己 4 个核心功能。比如模块 A 中：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs pf">/* moduleA.js */<br><br><span class="hljs-keyword">const</span> moduleA = &#123;<br>    <span class="hljs-keyword">state</span>: &#123; <br>        text: &#x27;hello&#x27;<br>    &#125;,<br>    mutations: &#123;<br>        addText (<span class="hljs-keyword">state</span>, txt) &#123;<br>            // 这里的 `<span class="hljs-keyword">state</span>` 对象是模块的局部状态<br>            <span class="hljs-keyword">state</span>.text += txt<br>        &#125;<br>    &#125;,<br>    <br>    actions: &#123;<br>        <span class="hljs-built_in">set</span>Text (&#123; commit &#125;) &#123;<br>            commit(&#x27;addText&#x27;, &#x27; world&#x27;)<br>        &#125;<br>    &#125;,<br><br>    getters: &#123;<br>        getText (<span class="hljs-keyword">state</span>) &#123;<br>            return <span class="hljs-keyword">state</span>.text + &#x27;!&#x27;<br>        &#125;<br>    &#125;<br>&#125;<br><br>export <span class="hljs-keyword">default</span> moduleA<br><br></code></pre></td></tr></table></figure><p>上方我们导出 A 模块，并在 index.js 中引入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* index.js */</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> moduleA <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/moduleA&#x27;</span><br><span class="hljs-keyword">import</span> moduleB <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/moduleB&#x27;</span><br><span class="hljs-keyword">import</span> &#123; mutations &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mutations&#x27;</span><br><span class="hljs-keyword">import</span> actions <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./actions&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">state</span>: &#123;<br>        <span class="hljs-attr">groups</span>: [<span class="hljs-number">1</span>]<br>    &#125;,<br>    <span class="hljs-attr">modules</span>: &#123;<br>        moduleA, <span class="hljs-comment">// 引入 A 模块</span><br>        moduleB, <span class="hljs-comment">// 引入 B 模块</span><br>    &#125;,<br>    actions, <span class="hljs-comment">// 根级别的 action</span><br>    mutations, <span class="hljs-comment">// 根级别的 mutations</span><br>    <br>    <span class="hljs-comment">// 根级别的 getters</span><br>    <span class="hljs-attr">getters</span>: &#123;<br>        getGroups (state) &#123;<br>            <span class="hljs-keyword">return</span> state.<span class="hljs-property">groups</span><br>        &#125;<br>    &#125;   <br>&#125;)<br><br></code></pre></td></tr></table></figure><p>这样项目中状态的模块划分就更加清晰，对应模块的状态我们只需要修改相应模块文件即可。详细的案例代码可参考文末 github 地址。</p><h3 id="3-接口配置"><a href="#3-接口配置" class="headerlink" title="3. 接口配置"></a>3. 接口配置</h3><p>在项目的开发过程中，我们也少不了与后台服务器进行数据的获取和交互，这一般都是通过接口完成的，那么我们如何进行合理的接口配置呢？我们可以在 src 目录下新建 services 文件夹用于存放接口文件：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">└── src<br>    └── services<br>        ├── http.<span class="hljs-keyword">js </span>     <span class="hljs-comment"># 接口封装</span><br>        ├── moduleA.<span class="hljs-keyword">js </span>   <span class="hljs-comment"># A模块接口</span><br>        └── moduleB.<span class="hljs-keyword">js </span>   <span class="hljs-comment"># B模块接口</span><br><br></code></pre></td></tr></table></figure><p>为了让接口便于管理，我们同样使用不同的文件来配置不同模块的接口，同时由于接口的调用 ajax 请求代码重复部分较多，我们可以对其进行简单的封装，比如在 http.js 中（fetch为例）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* http.js */</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;whatwg-fetch&#x27;</span><br><br><span class="hljs-comment">// HTTP 工具类</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Http</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">async</span> <span class="hljs-title function_">request</span>(<span class="hljs-params">method, url, data</span>) &#123;<br>        <span class="hljs-keyword">const</span> param = &#123;<br>            <span class="hljs-attr">method</span>: method,<br>            <span class="hljs-attr">headers</span>: &#123;<br>                <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>            url += <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">formatQuery</span>(data)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            param[<span class="hljs-string">&#x27;body&#x27;</span>] = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data)<br>        &#125;<br><br>        <span class="hljs-comment">// Tips.loading(); // 可调用 loading 组件</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetch</span>(url, param).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isSuccess</span>(response))<br>                .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>                    <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()<br>            &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">// 判断请求是否成功</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">isSuccess</span>(<span class="hljs-params">res</span>) &#123;<br>        <span class="hljs-keyword">if</span> (res.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; res.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;<br>            <span class="hljs-keyword">return</span> res<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">requestException</span>(res)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 处理异常</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">requestException</span>(<span class="hljs-params">res</span>) &#123;<br>        <span class="hljs-keyword">const</span> error = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(res.<span class="hljs-property">statusText</span>)<br><br>        error.<span class="hljs-property">response</span> = res<br><br>        <span class="hljs-keyword">throw</span> error<br>    &#125;<br>    <br>    <span class="hljs-comment">// url处理</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">formatQuery</span>(<span class="hljs-params">query</span>) &#123;<br>        <span class="hljs-keyword">let</span> params = [];<br><br>        <span class="hljs-keyword">if</span> (query) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">in</span> query) &#123;<br>                <span class="hljs-keyword">let</span> vals = query[item];<br>                <span class="hljs-keyword">if</span> (vals !== <span class="hljs-literal">undefined</span>) &#123;<br>                    params.<span class="hljs-title function_">push</span>(item + <span class="hljs-string">&#x27;=&#x27;</span> + query[item])<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> params.<span class="hljs-property">length</span> ? <span class="hljs-string">&#x27;?&#x27;</span> + params.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>) : <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 处理 get 请求</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">url, data</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, url, data)<br>    &#125;<br>    <br>    <span class="hljs-comment">// 处理 put 请求</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">url, data</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(<span class="hljs-string">&#x27;PUT&#x27;</span>, url, data)<br>    &#125;<br>    <br>    <span class="hljs-comment">// 处理 post 请求</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">url, data</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(<span class="hljs-string">&#x27;POST&#x27;</span>, url, data)<br>    &#125;<br>    <br>    <span class="hljs-comment">// 处理 patch 请求</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">patch</span>(<span class="hljs-params">url, data</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(<span class="hljs-string">&#x27;PATCH&#x27;</span>, url, data)<br>    &#125;<br>    <br>    <span class="hljs-comment">// 处理 delete 请求</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">url, data</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(<span class="hljs-string">&#x27;DELETE&#x27;</span>, url, data)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>封装完毕后我们在 moduleA.js 中配置一个 github 的开放接口：<code>https://api.github.com/repos/octokit/octokit.rb</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">/* moduleA.js */</span><br><span class="hljs-keyword">import</span> Http from <span class="hljs-string">&#x27;./http&#x27;</span><br><br><span class="hljs-comment">// 获取测试数据</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getTestData = () =&gt; &#123;<br>    <span class="hljs-keyword">return</span> Http.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;https://api.github.com/repos/octokit/octokit.rb&#x27;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后在项目页面中进行调用，会成功获取 github 返回的数据，但是一般我们在项目中配置接口的时候会直接省略项目 url 部分，比如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">/* moduleA.js */</span><br><span class="hljs-keyword">import</span> Http from <span class="hljs-string">&#x27;./http&#x27;</span><br><br><span class="hljs-comment">// 获取测试数据</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getTestData = () =&gt; &#123;<br>    <span class="hljs-keyword">return</span> Http.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;/repos/octokit/octokit.rb&#x27;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这时候我们再次调用接口的时候会发现其调用地址为本地地址：<code>http://127.0.0.1:8080/repos/octokit/octokit.rb</code>，那么为了让其指向 <code>https://api.github.com</code>，我们需要在 vue.config.js 中进行 devServer 的配置：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">/* vue.config.js */<br><br>module.exports = &#123;<br>    <span class="hljs-string">...</span><br>    <br>    devServer: &#123;<br>    <br>        <span class="hljs-string">//</span> string | Object 代理设置<br>        proxy: &#123;<br>        <br>            <span class="hljs-string">//</span> 接口是 &#x27;<span class="hljs-string">/repos</span>&#x27; 开头的才用代理<br>            &#x27;<span class="hljs-string">/repos</span>&#x27;: &#123;<br>                target: &#x27;https:<span class="hljs-string">//api.github.com</span>&#x27;, <span class="hljs-string">//</span> 目标地址<br>                changeOrigin: <span class="hljs-literal">true</span>, <span class="hljs-string">//</span> 是否改变源地址<br>                <span class="hljs-string">//</span> pathRewrite: &#123;&#x27;^<span class="hljs-string">/api</span>&#x27;: &#x27;&#x27;&#125;<br>            &#125;<br>        &#125;,<br>    &#125;<br>    <br>    <span class="hljs-string">...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 devServer 中 我们配置 proxy 进行接口的代理，将我们本地地址转换为真实的服务器地址，此时我们同样能顺利的获取到数据，不同点在于接口状态变成了 304（重定向）：</p><img src="/2019/08/30/vue/164e55db6ccb45cb.png" class=""><h3 id="4-公共设施配置"><a href="#4-公共设施配置" class="headerlink" title="4. 公共设施配置"></a>4. 公共设施配置</h3><p>最后我们项目开发中肯定需要对一些公共的方法进行封装使用，这里我把它称之为公共设施，那么我们可以在 src 目录下建一个 common 文件夹来存放其配置文件：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">└── src<br>    └── common<br>        ├── index.<span class="hljs-keyword">js </span>     <span class="hljs-comment"># 公共配置入口</span><br>        ├── validate.<span class="hljs-keyword">js </span>  <span class="hljs-comment"># 表单验证配置</span><br>        └── other.<span class="hljs-keyword">js </span>     <span class="hljs-comment"># 其他配置</span><br><br></code></pre></td></tr></table></figure><p>在入口文件中我们可以向外暴露其他功能配置的模块，比如：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/* index.js */</span><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">Validate</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./validate&#x27;</span><br><span class="hljs-keyword">import</span> Other <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./other&#x27;</span><br><br>export &#123;<br>    <span class="hljs-keyword">Validate</span>,<br>    Other,<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样我们在页面中只需要引入一个 index.js 即可。</p><h2 id="结语-4"><a href="#结语-4" class="headerlink" title="结语"></a>结语</h2><p>本文介绍了 Vue 单页应用的一些基本配置，从项目构建层面阐述了各文件的主要配置方式和注意点，由于本文并不是一篇文档类的配置说明，并不会详细介绍各配置文件的 API 功能，大家可以访问文中列出的官方文档进行查阅。</p><p>本案例代码地址：<a href="https://github.com/luozhihao/vue-project-code/tree/master/single-page-project">single-page-project</a></p><h2 id="思考-作业-3"><a href="#思考-作业-3" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>devServer 中 proxy 的 key 值代表什么？如果再添加一个 <code>/reposed</code> 的配置会产生什么隐患？</p></li><li><p>如何配置 webpack 使得 <code>require.ensure()</code> 拆分出的 js 文件具有自定义文件名？</p></li></ul><h1 id="构建实战篇-2：使用-pages-构建多页应用"><a href="#构建实战篇-2：使用-pages-构建多页应用" class="headerlink" title="构建实战篇 2：使用 pages 构建多页应用"></a>构建实战篇 2：使用 pages 构建多页应用</h1><p>经过对单页应用配置的了解，相信大家应该对如何构建一个 Vue 单页应用项目已经有所收获和体会，在大部分实际场景中，我们都可以构建单页应用来进行项目的开发和迭代，然而对于项目复杂度过高或者页面模块之间差异化较大的项目，我们可以选择构建多页应用来实现。那么什么是多页应用，如何构建一个多页应用便是本文所要阐述的内容。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>首先我们可以把多页应用理解为由多个单页构成的应用，而何谓多个单页呢？其实你可以把一个单页看成是一个 html 文件，那么多个单页便是多个 html 文件，多页应用便是由多个 html 组成的应用，如下图所示：</p></blockquote> <img src="/2019/08/30/vue/164eb40e7ae7fb85.png" class=""><p>既然多页应用拥有多个 html，那么同样其应该拥有多个独立的入口文件、组件、路由、vuex 等。没错，说简单一点就是<strong>多页应用的每个单页都可以拥有单页应用 src 目录下的文件及功能</strong>，我们来看一下一个基础多页应用的目录结构：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">├── node_modules               <span class="hljs-comment"># 项目依赖包目录</span><br>├── <span class="hljs-keyword">build </span>                     <span class="hljs-comment"># 项目 webpack 功能目录</span><br>├── <span class="hljs-built_in">config</span>                     <span class="hljs-comment"># 项目配置项文件夹</span><br>├── src                        <span class="hljs-comment"># 前端资源目录</span><br>│   ├── images                 <span class="hljs-comment"># 图片目录</span><br>│   ├── components             <span class="hljs-comment"># 公共组件目录</span><br>│   ├── pages                  <span class="hljs-comment"># 页面目录</span><br>│   │   ├── page1              <span class="hljs-comment"># page1 目录</span><br>│   │   │   ├── components     <span class="hljs-comment"># page1 组件目录</span><br>│   │   │   ├── router         <span class="hljs-comment"># page1 路由目录</span><br>│   │   │   ├── views          <span class="hljs-comment"># page1 页面目录</span><br>│   │   │   ├── page1.html     <span class="hljs-comment"># page1 html 模板</span><br>│   │   │   ├── page1.vue      <span class="hljs-comment"># page1 vue 配置文件</span><br>│   │   │   └── page1.<span class="hljs-keyword">js </span>      <span class="hljs-comment"># page1 入口文件</span><br>│   │   ├── page2              <span class="hljs-comment"># page2 目录</span><br>│   │   └── index              <span class="hljs-comment"># index 目录</span><br>│   ├── common                 <span class="hljs-comment"># 公共方法目录</span><br>│   └── store                  <span class="hljs-comment"># 状态管理 store 目录</span><br>├── .gitignore                 <span class="hljs-comment"># git 忽略文件</span><br>├── .env                       <span class="hljs-comment"># 全局环境配置文件</span><br>├── .env.dev                   <span class="hljs-comment"># 开发环境配置文件</span><br>├── .postcssrc.<span class="hljs-keyword">js </span>             <span class="hljs-comment"># postcss 配置文件</span><br>├── <span class="hljs-keyword">babel.config.js </span>           <span class="hljs-comment"># babel 配置文件</span><br>├── package.<span class="hljs-keyword">json </span>              <span class="hljs-comment"># 包管理文件</span><br>├── vue.config.<span class="hljs-keyword">js </span>             <span class="hljs-comment"># CLI 配置文件</span><br>└── yarn.lock                  <span class="hljs-comment"># yarn 依赖信息文件</span><br><br></code></pre></td></tr></table></figure><p>根据上方目录结构我们可以看出其实 pages 下的一个目录就是一个单页包含的功能，这里我们包含了 3 个目录就构成了多页应用。</p><p>除了目录结构的不同外，其实区别单页应用，多页应用在很多配置上都需要进行修改，比如单入口变为多入口、单模板变为多模板等，那么下面我们就来了解一下多页应用的具体实现。</p><h2 id="多入口"><a href="#多入口" class="headerlink" title="多入口"></a>多入口</h2><p>在单页应用中，我们的入口文件只有一个，CLI 默认配置的是 main.js，但是到了多页应用，我们的入口文件便包含了 page1.js、page2.js、index.js等，数量取决于 pages 文件夹下目录的个数，这时候为了项目的可拓展性，我们需要自动计算入口文件的数量并解析路径配置到 webpack 中的 entry 属性上，如：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift">module.exports <span class="hljs-operator">=</span> &#123;<br>    <span class="hljs-operator">...</span><br>    <br>    entry: &#123;<br>        page1: &#x27;<span class="hljs-regexp">/xxx/</span>pages<span class="hljs-regexp">/page1/</span>page1.js&#x27;,<br>        page2: &#x27;<span class="hljs-regexp">/xxx/</span>pages<span class="hljs-regexp">/page2/</span>page2.js&#x27;,<br>        index: &#x27;<span class="hljs-regexp">/xxx/</span>pages<span class="hljs-regexp">/index/</span>index.js&#x27;,<br>    &#125;,<br>    <br>    <span class="hljs-operator">...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>那么我们如何读取并解析这样的路径呢，这里就需要使用工具和函数来解决了。我们可以在根目录新建 build 文件夹存放 utils.js 这样共用的 webpack 功能性文件，并加入多入口读取解析方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* utils.js */</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-comment">// glob 是 webpack 安装时依赖的一个第三方模块，该模块允许你使用 * 等符号,</span><br><span class="hljs-comment">// 例如 lib/*.js 就是获取 lib 文件夹下的所有 js 后缀名的文件</span><br><span class="hljs-keyword">const</span> glob = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;glob&#x27;</span>);<br><br><span class="hljs-comment">// 取得相应的页面路径，因为之前的配置，所以是 src 文件夹下的 pages 文件夹</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PAGE_PATH</span> = path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;../src/pages&#x27;</span>);<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">* 多入口配置</span><br><span class="hljs-comment">* 通过 glob 模块读取 pages 文件夹下的所有对应文件夹下的 js * 后缀文件，如果该文件存在</span><br><span class="hljs-comment">* 那么就作为入口处理</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">getEntries</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> entryFiles = glob.<span class="hljs-title function_">sync</span>(<span class="hljs-variable constant_">PAGE_PATH</span> + <span class="hljs-string">&#x27;/*/*.js&#x27;</span>) <span class="hljs-comment">// 同步读取所有入口文件</span><br>    <span class="hljs-keyword">let</span> map = &#123;&#125;<br>    <br>    <span class="hljs-comment">// 遍历所有入口文件</span><br>    entryFiles.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">filePath</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// 获取文件名</span><br>        <span class="hljs-keyword">let</span> filename = filePath.<span class="hljs-title function_">substring</span>(filePath.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;\/&#x27;</span>) + <span class="hljs-number">1</span>, filePath.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;.&#x27;</span>))<br>        <br>        <span class="hljs-comment">// 以键值对的形式存储</span><br>        map[filename] = filePath <br>    &#125;)<br>    <br>    <span class="hljs-keyword">return</span> map<br>&#125;<br><br></code></pre></td></tr></table></figure> <img src="/2019/08/30/vue/166c0c419bc53201.png" class=""><p>上方我们使用了 <a href="https://github.com/isaacs/node-glob">glob</a> 这一第三方模块读取所有 pages 文件夹下的入口文件，其需要进行安装：<code>yarn add glob --dev</code></p><p>读取并存储完毕后，我们得到了一个入口文件的对象集合，这个对象我们便可以将其设置到 webpack 的 entry 属性上，这里我们需要修改 vue.config.js 的配置来间接修改 webpack 的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* vue.config.js */</span><br><br><span class="hljs-keyword">const</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./build/utils&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    ...<br>    <br>    <span class="hljs-attr">configureWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        config.<span class="hljs-property">entry</span> = utils.<span class="hljs-title function_">getEntries</span>()<br>    &#125;,<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样我们多入口的设置便完成了，当然这并不是 CLI 所希望的操作，后面我们会进行改进。</p><h2 id="多模板"><a href="#多模板" class="headerlink" title="多模板"></a>多模板</h2><p>相对于多入口来说，多模板的配置也是大同小异，这里所说的模板便是每个 page 下的 html 模板文件，而模板文件的作用主要用于 webpack 中 <code>html-webpack-plugin</code> 插件的配置，其会根据模板文件生产一个编译后的 html 文件并自动加入携带 hash 的脚本和样式，基本配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* webpack 配置文件 */</span><br><span class="hljs-type">const</span> <span class="hljs-variable">HtmlWebpackPlugin</span> <span class="hljs-operator">=</span> require(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>) <span class="hljs-comment">// 安装并引用插件</span><br><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>    ...<br>    <br>    plugins: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>            title: <span class="hljs-string">&#x27;My Page&#x27;</span>, <span class="hljs-comment">// 生成 html 中的 title</span><br>            filename: <span class="hljs-string">&#x27;demo.html&#x27;</span>, <span class="hljs-comment">// 生成 html 的文件名</span><br>            template: <span class="hljs-string">&#x27;xxx/xxx/demo.html&#x27;</span>, <span class="hljs-comment">// 模板路径</span><br>            chunks: [<span class="hljs-string">&#x27;manifest&#x27;</span>, <span class="hljs-string">&#x27;vendor&#x27;</span>, <span class="hljs-string">&#x27;demo&#x27;</span>], <span class="hljs-comment">// 所要包含的模块</span><br>            inject: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否注入资源</span><br>        &#125;)<br>    ]<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>以上是单模板的配置，那么如果是多模板只要继续往 plugins 数组中添加 HtmlWebpackPlugin 即可，但是为了和多入口一样能够灵活的获取 pages 目录下所有模板文件并进行配置，我们可以在 utils.js 中添加多模板的读取解析方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* utils.js */</span><br><br><span class="hljs-comment">// 多页面输出配置</span><br><span class="hljs-comment">// 与上面的多页面入口配置相同，读取 page 文件夹下的对应的 html 后缀文件，然后放入数组中</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">htmlPlugin</span> = <span class="hljs-function"><span class="hljs-params">configs</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> entryHtml = glob.<span class="hljs-title function_">sync</span>(<span class="hljs-variable constant_">PAGE_PATH</span> + <span class="hljs-string">&#x27;/*/*.html&#x27;</span>)<br>    <span class="hljs-keyword">let</span> arr = []<br>    <br>    entryHtml.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">filePath</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> filename = filePath.<span class="hljs-title function_">substring</span>(filePath.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;\/&#x27;</span>) + <span class="hljs-number">1</span>, filePath.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;.&#x27;</span>))<br>        <span class="hljs-keyword">let</span> conf = &#123;<br>            <span class="hljs-attr">template</span>: filePath, <span class="hljs-comment">// 模板路径</span><br>            <span class="hljs-attr">filename</span>: filename + <span class="hljs-string">&#x27;.html&#x27;</span>, <span class="hljs-comment">// 生成 html 的文件名</span><br>            <span class="hljs-attr">chunks</span>: [<span class="hljs-string">&#x27;manifest&#x27;</span>, <span class="hljs-string">&#x27;vendor&#x27;</span>,  filename],<br>            <span class="hljs-attr">inject</span>: <span class="hljs-literal">true</span>,<br>        &#125;<br>        <br>        <span class="hljs-comment">// 如果有自定义配置可以进行 merge</span><br>        <span class="hljs-keyword">if</span> (configs) &#123;<br>            conf = <span class="hljs-title function_">merge</span>(conf, configs)<br>        &#125;<br>        <br>        <span class="hljs-comment">// 针对生产环境配置</span><br>        <span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>            conf = <span class="hljs-title function_">merge</span>(conf, &#123;<br>                <span class="hljs-attr">minify</span>: &#123;<br>                    <span class="hljs-attr">removeComments</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 删除 html 中的注释代码</span><br>                    <span class="hljs-attr">collapseWhitespace</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 删除 html 中的空白符</span><br>                    <span class="hljs-comment">// removeAttributeQuotes: true // 删除 html 元素中属性的引号</span><br>                &#125;,<br>                <span class="hljs-attr">chunksSortMode</span>: <span class="hljs-string">&#x27;manual&#x27;</span> <span class="hljs-comment">// 按 manual 的顺序引入</span><br>            &#125;)<br>        &#125;<br>        <br>        arr.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(conf))<br>    &#125;)<br>    <br>    <span class="hljs-keyword">return</span> arr<br>&#125;<br><br></code></pre></td></tr></table></figure> <img src="/2019/08/30/vue/166c0c888939ac36.png" class=""><p>以上我们仍然是使用 glob 读取所有模板文件，然后将其遍历并设置每个模板的 config，同时针对一些自定义配置和生产环境的配置进行了 merge 处理，其中自定义配置的功能我会在下节进行介绍，这里介绍一下生产环境下 <code>minify</code> 配置的作用：<strong>将 html-minifier 的选项作为对象来缩小输出</strong>。</p><p><a href="https://github.com/kangax/html-minifier">html-minifier</a> 是一款用于缩小 html 文件大小的工具，其有很多配置项功能，包括上述所列举的常用的删除注释、空白、引号等。</p><p>当我们编写完了多模板的方法后，我们同样可以在 vue.config.js 中进行配置，与多入口不同的是我们在 configureWebpack 中不能直接替换 plugins 的值，因为它还包含了其他插件，这时候大家还记得第 3 节中讲到的使用 return 返回一个对象来进行 merge 操作吗？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* vue.config.js */</span><br><br><span class="hljs-keyword">const</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./build/utils&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    ...<br>    <br>    <span class="hljs-attr">configureWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        config.<span class="hljs-property">entry</span> = utils.<span class="hljs-title function_">getEntries</span>() <span class="hljs-comment">// 直接覆盖 entry 配置</span><br>        <br>        <span class="hljs-comment">// 使用 return 一个对象会通过 webpack-merge 进行合并，plugins 不会置空</span><br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">plugins</span>: [...utils.<span class="hljs-title function_">htmlPlugin</span>()]<br>        &#125;<br>    &#125;,<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如此我们多页应用的多入口和多模板的配置就完成了，这时候我们运行命令 <code>yarn build</code> 后你会发现 dist 目录下生成了 3 个 html 文件，分别是 index.html、page1.html 和 page2.html。</p><h2 id="使用-pages-配置"><a href="#使用-pages-配置" class="headerlink" title="使用 pages 配置"></a>使用 pages 配置</h2><p>其实，在 vue.config.js 中，我们还有一个配置没有使用，便是 pages。pages 对象允许我们为应用配置多个入口及模板，这就为我们的多页应用提供了开放的配置入口。官方示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* vue.config.js */</span><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>    pages: &#123;<br>        index: &#123;<br>            <span class="hljs-comment">// page 的入口</span><br>            entry: <span class="hljs-string">&#x27;src/index/main.js&#x27;</span>,<br>            <span class="hljs-comment">// 模板来源</span><br>            template: <span class="hljs-string">&#x27;public/index.html&#x27;</span>,<br>            <span class="hljs-comment">// 在 dist/index.html 的输出</span><br>            filename: <span class="hljs-string">&#x27;index.html&#x27;</span>,<br>            <span class="hljs-comment">// 当使用 title 选项时，</span><br>            <span class="hljs-comment">// template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br>            title: <span class="hljs-string">&#x27;Index Page&#x27;</span>,<br>            <span class="hljs-comment">// 在这个页面中包含的块，默认情况下会包含</span><br>            <span class="hljs-comment">// 提取出来的通用 chunk 和 vendor chunk。</span><br>            chunks: [<span class="hljs-string">&#x27;chunk-vendors&#x27;</span>, <span class="hljs-string">&#x27;chunk-common&#x27;</span>, <span class="hljs-string">&#x27;index&#x27;</span>]<br>        &#125;,<br>        <span class="hljs-comment">// 当使用只有入口的字符串格式时，</span><br>        <span class="hljs-comment">// 模板会被推导为 `public/subpage.html`</span><br>        <span class="hljs-comment">// 并且如果找不到的话，就回退到 `public/index.html`。</span><br>        <span class="hljs-comment">// 输出文件名会被推导为 `subpage.html`。</span><br>        subpage: <span class="hljs-string">&#x27;src/subpage/main.js&#x27;</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们不难发现，pages 对象中的 key 就是入口的别名，而其 value 对象其实是入口 entry 和模板属性的合并，这样我们上述介绍的获取多入口和多模板的方法就可以合并成一个函数来进行多页的处理，合并后的 setPages 方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// pages 多入口配置</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">setPages</span> = <span class="hljs-function"><span class="hljs-params">configs</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> entryFiles = glob.<span class="hljs-title function_">sync</span>(<span class="hljs-variable constant_">PAGE_PATH</span> + <span class="hljs-string">&#x27;/*/*.js&#x27;</span>)<br>    <span class="hljs-keyword">let</span> map = &#123;&#125;<br><br>    entryFiles.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">filePath</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> filename = filePath.<span class="hljs-title function_">substring</span>(filePath.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;\/&#x27;</span>) + <span class="hljs-number">1</span>, filePath.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;.&#x27;</span>))<br>        <span class="hljs-keyword">let</span> tmp = filePath.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, filePath.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;\/&#x27;</span>))<br><br>        <span class="hljs-keyword">let</span> conf = &#123;<br>            <span class="hljs-comment">// page 的入口</span><br>            <span class="hljs-attr">entry</span>: filePath, <br>            <span class="hljs-comment">// 模板来源</span><br>            <span class="hljs-attr">template</span>: tmp + <span class="hljs-string">&#x27;.html&#x27;</span>, <br>            <span class="hljs-comment">// 在 dist/index.html 的输出</span><br>            <span class="hljs-attr">filename</span>: filename + <span class="hljs-string">&#x27;.html&#x27;</span>, <br>            <span class="hljs-comment">// 页面模板需要加对应的js脚本，如果不加这行则每个页面都会引入所有的js脚本</span><br>            <span class="hljs-attr">chunks</span>: [<span class="hljs-string">&#x27;manifest&#x27;</span>, <span class="hljs-string">&#x27;vendor&#x27;</span>, filename], <br>            <span class="hljs-attr">inject</span>: <span class="hljs-literal">true</span>,<br>        &#125;;<br><br>        <span class="hljs-keyword">if</span> (configs) &#123;<br>            conf = <span class="hljs-title function_">merge</span>(conf, configs)<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>            conf = <span class="hljs-title function_">merge</span>(conf, &#123;<br>                <span class="hljs-attr">minify</span>: &#123;<br>                    <span class="hljs-attr">removeComments</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 删除 html 中的注释代码</span><br>                    <span class="hljs-attr">collapseWhitespace</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 删除 html 中的空白符</span><br>                    <span class="hljs-comment">// removeAttributeQuotes: true // 删除 html 元素中属性的引号</span><br>                &#125;,<br>                <span class="hljs-attr">chunksSortMode</span>: <span class="hljs-string">&#x27;manual&#x27;</span><span class="hljs-comment">// 按 manual 的顺序引入</span><br>            &#125;)<br>        &#125;<br><br>        map[filename] = conf<br>    &#125;)<br><br>    <span class="hljs-keyword">return</span> map<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上述代码我们 return 出的 map 对象就是 pages 所需要的配置项结构，我们只需在 vue.config.js 中引用即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* vue.config.js */</span><br><br><span class="hljs-type">const</span> <span class="hljs-variable">utils</span> <span class="hljs-operator">=</span> require(<span class="hljs-string">&#x27;./build/utils&#x27;</span>)<br><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>    ...<br>    <br>    pages: utils.setPages(),<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样我们多页应用基于 pages 配置的改进就大功告成了，当你运行打包命令来查看输出结果的时候，你会发现和之前的方式相比并没有什么变化，这就说明这两种方式都适用于多页的构建，但是这里还是推荐大家使用更便捷的 pages 配置。</p><h2 id="结语-5"><a href="#结语-5" class="headerlink" title="结语"></a>结语</h2><p>本文主要讲解了多页应用开发中多入口和多模板的实现方式，通过针对 webpack 配置的修改我们基本了解了多页模式与单页模式的差异性，下篇文章我们将以本文内容为基础进一步完善我们的多页应用配置，使其能够正常适应实际的开发与生产。</p><p>本案例代码地址：<a href="https://github.com/luozhihao/vue-project-code/tree/master/multi-page-project">multi-page-project</a></p><h2 id="思考-作业-4"><a href="#思考-作业-4" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>多页应用相比单页应用有哪些优点和缺点？</p></li><li><p><code>chunksSortMode</code> 除了文中介绍的 <code>manual</code> 手动排序外，还有哪些排序方式？</p></li><li><p>glob 中 <code>*</code> 和 <code>**</code> 的区别是什么？</p></li></ul><h1 id="构建实战篇-3：多页路由与模板解析"><a href="#构建实战篇-3：多页路由与模板解析" class="headerlink" title="构建实战篇 3：多页路由与模板解析"></a>构建实战篇 3：多页路由与模板解析</h1><p>上篇文章中我们成功打包并输出了多页文件，而构建一个多页应用能够让我们进一步了解项目配置的可拓展性，可以对学习 Vue 和 webpack 起到强化训练的效果，本文将在此基础上主要针对多页路由及模板的配置进行系列的介绍。</p><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><h3 id="1-跳转"><a href="#1-跳转" class="headerlink" title="1. 跳转"></a>1. 跳转</h3><p>在配置路由前，首先我们要明确一点就是，多页应用中的每个单页都是相互隔离的，即如果你想从 page1 下的路由跳到 page2 下的路由，你无法使用 vue-router 中的方法进行跳转，需要使用原生方法：<code>location.href</code> 或 <code>location.replace</code>。</p><p>此外为了能够清晰的分辨路由属于哪个单页，我们应该给每个单页路由添加前缀，比如：</p><ul><li>index 单页：&#x2F;vue&#x2F;</li><li>page1 单页：&#x2F;vue&#x2F;page1&#x2F;</li><li>page2 单页：&#x2F;vue&#x2F;page2&#x2F;</li></ul><p>其中 &#x2F;vue&#x2F; 为项目的二级目录，其后的目录代表路由属于哪个单页。因此我们每个单页的路由配置可以像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* page1 单页路由配置 */</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-comment">// 首页</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = (<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">require</span>.<span class="hljs-title function_">ensure</span>([<span class="hljs-string">&#x27;../views/home.vue&#x27;</span>], <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../views/home.vue&#x27;</span>))<br>    &#125;)<br>&#125;)<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>)<br><br><span class="hljs-keyword">let</span> base = <span class="hljs-string">`<span class="hljs-subst">$&#123;process.env.BASE_URL&#125;</span>`</span> + <span class="hljs-string">&#x27;page1&#x27;</span>; <span class="hljs-comment">// 添加单页前缀</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;history&#x27;</span>,<br>    <span class="hljs-attr">base</span>: base,<br>    <span class="hljs-attr">routes</span>: [<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>        &#125;,<br>    ]<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>我们通过设置路由的 base 值来为每个单页添加路由前缀，如果是 index 单页我们无需拼接路由前缀，直接跳转至二级目录即可。</p><p>那么在单页间跳转的地方，我们可以这样写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;goFn(&#x27;&#x27;)&quot;</span>&gt;</span>Index<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> |<br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;goFn(&#x27;page1&#x27;)&quot;</span>&gt;</span>Page1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> |<br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;goFn(&#x27;page2&#x27;)&quot;</span>&gt;</span>Page2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> |<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">goFn</span>(<span class="hljs-params">name</span>) &#123;</span><br><span class="language-javascript">            location.<span class="hljs-property">href</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;process.env.BASE_URL&#125;</span>`</span> + name</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>但是为了保持和 Vue 路由跳转同样的风格，我可以对单页之间的跳转做一下封装，实现一个 <code>Navigator</code> 类，类的代码可以查看本文最后的示例，封装完成后我们可以将跳转方法修改为：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xl">this.$openRouter(&#123;<br>    <span class="hljs-keyword">name</span>: <span class="hljs-keyword">name</span>, <span class="hljs-comment">// 跳转地址</span><br>    query: &#123;<br>        <span class="hljs-keyword">text</span>: <span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-comment">// 可以进行参数传递</span><br>    &#125;,<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>使用上述 <code>$openRouter</code> 方法我们还需要一个前提条件，便是将其绑定到 Vue 的原型链上，我们在所有单页的入口文件中添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Navigator</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../common&#x27;</span> <span class="hljs-comment">// 引入 Navigator</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$openRouter</span> = <span class="hljs-title class_">Navigator</span>.<span class="hljs-property">openRouter</span>; <span class="hljs-comment">// 添加至 Vue 原型链</span><br><br></code></pre></td></tr></table></figure><p>至此我们已经能够成功模仿 vue-router 进行单页间的跳转，但是需要注意的是因为其本质使用的是 location 跳转，所以必然会产生浏览器的刷新与重载。</p><h3 id="2-重定向"><a href="#2-重定向" class="headerlink" title="2. 重定向"></a>2. 重定向</h3><p>当我们完成上述路由跳转的功能后，可以在本地服务器上来进行一下测试，你会发现 Index 首页可以正常打开，但是跳转 Page1、Page2 却仍然处于 Index 父组件下，这是因为浏览器认为你所要跳转的页面还是在 Index 根路由下，同时又没有匹配到 Index 单页中对应的路由。这时候我们服务器需要做一次重定向，将下方路由指向对应的 html 文件即可：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/vue/</span>page1 -&gt; <span class="hljs-regexp">/vue/</span>page1.html<br><span class="hljs-regexp">/vue/</span>page2 -&gt; <span class="hljs-regexp">/vue/</span>page2.html<br><br></code></pre></td></tr></table></figure><p>在 vue.config.js 中，我们需要对 devServer 进行配置，添加 <code>historyApiFallback</code> 配置项，该配置项主要用于解决 HTML5 History API 产生的问题，比如其 rewrites 选项用于重写路由：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* vue.config.js */</span><br><br><span class="hljs-keyword">let</span> baseUrl = <span class="hljs-string">&#x27;/vue/&#x27;</span>;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    ...<br>    <br>    <span class="hljs-attr">devServer</span>: &#123;<br>        <span class="hljs-attr">historyApiFallback</span>: &#123;<br>            <span class="hljs-attr">rewrites</span>: [<br>                &#123; <span class="hljs-attr">from</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(baseUrl + <span class="hljs-string">&#x27;page1&#x27;</span>), <span class="hljs-attr">to</span>: baseUrl + <span class="hljs-string">&#x27;page1.html&#x27;</span> &#125;,<br>                &#123; <span class="hljs-attr">from</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(baseUrl + <span class="hljs-string">&#x27;page2&#x27;</span>), <span class="hljs-attr">to</span>: baseUrl + <span class="hljs-string">&#x27;page2.html&#x27;</span> &#125;,<br>            ]<br>        &#125;<br>    &#125;<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上方我们通过 rewrites 匹配正则表达式的方式将 <code>/vue/page1</code> 这样的路由替换为访问服务器下正确 html 文件的形式，如此不同单页间便可以进行正确跳转和访问了。最后需要注意的是如果你的应用发布到正式服务器上，你同样需要让服务器或者中间层作出合理解析，参考：<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90">HTML5 History 模式 # 后端配置例子</a></p><p>而更多关于 historyApiFallback 的信息可以访问：<a href="https://github.com/bripkens/connect-history-api-fallback">connect-history-api-fallback</a></p><h2 id="模板配置"><a href="#模板配置" class="headerlink" title="模板配置"></a>模板配置</h2><p>上篇文章我们已经介绍了关于多模板的读取和配置，在配置 html-webpack-plugin 的时候我们提到了自定义配置，这里我将结合模板渲染的功能来进行统一介绍。</p><h3 id="1-模板渲染"><a href="#1-模板渲染" class="headerlink" title="1. 模板渲染"></a>1. 模板渲染</h3><p>这里所说的模板渲染是在我们的 html 模板文件中使用 html-webpack-plugin 提供的 <a href="https://github.com/jaketrent/html-webpack-template/blob/86f285d5c790a6c15263f5cc50fd666d51f974fd/index.html">default template</a> 语法进行模板编写，比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>模板<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    &lt;% for (var chunk in htmlWebpackPlugin.files.css) &#123; %&gt;<br>        &lt;% if(htmlWebpackPlugin.files.css[chunk]) &#123;%&gt;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&lt;%= htmlWebpackPlugin.files.css[chunk] %&gt;&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><br>        &lt;%&#125;%&gt;<br>    &lt;% &#125; %&gt;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- built files will be auto injected --&gt;</span><br><br>    &lt;% for (var chunk in htmlWebpackPlugin.files.js) &#123; %&gt;<br>        &lt;% if(htmlWebpackPlugin.files.js[chunk]) &#123;%&gt;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&lt;%= htmlWebpackPlugin.files.js[chunk] %&gt;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        &lt;%&#125;%&gt;<br>    &lt;% &#125; %&gt;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>以上我们使用模板语法手动获取并遍历 htmlWebpackPlugin 打包后的文件并生成到模板中，其中的 <code>htmlWebpackPlugin</code> 变量是模板提供的可访问变量，其有以下特定数据：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-string">&quot;htmlWebpackPlugin&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;files&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;css&quot;</span>: [ <span class="hljs-string">&quot;main.css&quot;</span> ],<br>        <span class="hljs-string">&quot;js&quot;</span>: [ <span class="hljs-string">&quot;assets/head_bundle.js&quot;</span>, <span class="hljs-string">&quot;assets/main_bundle.js&quot;</span>],<br>        <span class="hljs-string">&quot;chunks&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;head&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;entry&quot;</span>: <span class="hljs-string">&quot;assets/head_bundle.js&quot;</span>,<br>                <span class="hljs-string">&quot;css&quot;</span>: [ <span class="hljs-string">&quot;main.css&quot;</span> ]<br>            &#125;,<br>            <span class="hljs-string">&quot;main&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;entry&quot;</span>: <span class="hljs-string">&quot;assets/main_bundle.js&quot;</span>,<br>                <span class="hljs-string">&quot;css&quot;</span>: []<br>            &#125;,<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们通过 <code>htmlWebpackPlugin.files</code> 可以获取打包输出的 js 及 css 文件路径，包括入口文件路径等。</p><p>需要注意的是如果你在模板中编写了插入对应 js 及 css 的语法，你需要设置 <code>inject</code> 的值为 false 来关闭资源的自动注入：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/* utils.js */</span><br>...<br><br><span class="hljs-keyword">let</span> conf = &#123;<br>    entry: filePath, <span class="hljs-comment">// page 的入口</span><br>    template: filePath, <span class="hljs-comment">// 模板路径</span><br>    filename: filename + <span class="hljs-string">&#x27;.html&#x27;</span>, <span class="hljs-comment">// 生成 html 的文件名</span><br>    chunks: [<span class="hljs-string">&#x27;manifest&#x27;</span>, <span class="hljs-string">&#x27;vendor&#x27;</span>,  filename],<br>    inject: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 关闭资源自动注入</span><br>&#125;<br><br>...<br><br></code></pre></td></tr></table></figure><p>否则在页面会引入两次资源，如下图所示：</p> <img src="/2019/08/30/vue/164fb7b172500b55.png" class=""><h3 id="2-自定义配置"><a href="#2-自定义配置" class="headerlink" title="2. 自定义配置"></a>2. 自定义配置</h3><p>在模板渲染中，我们只能够使用 htmlWebpackPlugin 内部的一些属性和方法来进行模板的定制化开发，那么如果遇到需要根据不同环境来引入不同资源，同时不同模板间的配置还可能不一样的需求情况的话，我们使用自定义配置会比较方便。比如我们需要在生产环境模板中引入第三方统计脚本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* vue.config.js */</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    ...<br>    <br>    <span class="hljs-attr">pages</span>: utils.<span class="hljs-title function_">setPages</span>(&#123;<br>        <span class="hljs-title function_">addScript</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">                    &lt;script src=&quot;https://s95.cnzz.com/z_stat.php?id=xxx&amp;web_id=xxx&quot; language=&quot;JavaScript&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">                `</span><br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>    &#125;),<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后在页面模板中通过 <code>htmlWebpackPlugin.options</code> 获取自定义配置对象并进行输出：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;% <span class="hljs-keyword">if</span>(htmlWebpackPlugin.options.addScript)&#123; %&gt;<br>    &lt;%= htmlWebpackPlugin.options.addScript() %&gt;<br>&lt;%&#125;%&gt;<br><br></code></pre></td></tr></table></figure><p>同时你也可以针对个别模板进行配置，比如我想只在 Index 单页中添加统计脚本，在 Page1 单页中添加其他脚本，那么你可以给 addScript 传入标识符来进行判断输出，比如：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;% <span class="hljs-keyword">if</span>(htmlWebpackPlugin.options.addScript)&#123; %&gt;<br>    &lt;%= htmlWebpackPlugin.options.addScript(<span class="hljs-string">&#x27;index&#x27;</span>) %&gt;<br>&lt;%&#125;%&gt;<br><br></code></pre></td></tr></table></figure><p>同时为 addScript 方法添加参数 from：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">addScript</span>(<span class="hljs-params"><span class="hljs-keyword">from</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>        <span class="hljs-keyword">let</span> url = <span class="hljs-string">&quot;https://xxx&quot;</span>;<br>    <br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">from</span> === <span class="hljs-string">&#x27;index&#x27;</span>) &#123;<br>            url = <span class="hljs-string">&quot;https://s95.cnzz.com/z_stat.php?id=xxx&amp;web_id=xxx&quot;</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">            &lt;script src=<span class="hljs-subst">$&#123;url&#125;</span> language=&quot;JavaScript&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">        `</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样我们就完成了自定义配置中的模板渲染功能。当然根据实际项目需求你的自定义配置项可能会更加复杂和灵活。</p><h2 id="结语-6"><a href="#结语-6" class="headerlink" title="结语"></a>结语</h2><p>通过 2 小节的学习，相信大家对 Vue 多页应用的构建已经有所了解。本文在第 1 节的基础上重点介绍了多页路由及模板的配置，阐述了其与单页应用的不同之处，同时针对模板自定义配置的使用场景给出了简单的实例，希望大家在了解的基础上将下方的实例代码作为参考，进行相应的实战。</p><p>本案例代码地址：<a href="https://github.com/luozhihao/vue-project-code/tree/master/multi-page-project">multi-page-project</a></p><h2 id="思考-作业-5"><a href="#思考-作业-5" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>多页应用中各自的 <code>Vuex Store</code> 信息能实现共享吗？</p></li><li><p>html-webpack-plugin 如何解析非 .html 的模板，比如 .hbs，应该如何配置？</p></li></ul><h1 id="构建实战篇-4：项目整合与优化"><a href="#构建实战篇-4：项目整合与优化" class="headerlink" title="构建实战篇 4：项目整合与优化"></a>构建实战篇 4：项目整合与优化</h1><p>前几小节，我们讲述了 Vue 项目构建的整体流程，从无到有的实现了单页和多页应用的功能配置，但在实现的过程中不乏一些可以整合的功能点及可行性的优化方案，就像大楼造完需要进行最后的项目验收改进一样，有待我们进一步的去完善。</p><h2 id="使用-alias-简化路径"><a href="#使用-alias-简化路径" class="headerlink" title="使用 alias 简化路径"></a>使用 alias 简化路径</h2><p>使用 webpack 构建过 Vue 项目的同学应该知道 <code>alias</code> 的作用，我们可以使用它将复杂的文件路径定义成一个变量来访问。在不使用 alias 的项目中，我们引入文件的时候通常会去计算被引入文件对于引入它的文件的相对路径，比如像这样：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> HelloWorld <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../../../HelloWorld.vue&#x27;</span><br><br></code></pre></td></tr></table></figure><p>一旦相对层次结构较深，我们就很难去定位所引入文件的具体位置，其实这并不是我们应该操心的地方，完全可以交给 webpack 来进行处理。在原生的 webpack 配置中我们可以定义 alias 来解决这一问题：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs stylus">const path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br>const resolve = dir =&gt; &#123;<br>    return path<span class="hljs-selector-class">.join</span>(__dirname, dir)<br>&#125;<br><br>module<span class="hljs-selector-class">.exports</span> = &#123;<br>    ...<br>    <br>    resolve: &#123;<br>        alias: &#123;<br>            <span class="hljs-string">&#x27;@&#x27;</span>: <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src&#x27;</span>), <span class="hljs-comment">// 定义 src 目录变量</span><br>            _lib: <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src/common&#x27;</span>), <span class="hljs-comment">// 定义 common 目录变量,</span><br>            _com: <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src/components&#x27;</span>), <span class="hljs-comment">// 定义 components 目录变量,</span><br>            _img: <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src/images&#x27;</span>), <span class="hljs-comment">// 定义 images 目录变量,</span><br>            _ser: <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src/services&#x27;</span>), <span class="hljs-comment">// 定义 services 目录变量,</span><br>        &#125;<br>    &#125;,<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上方我们在 webpack resolve（解析）对象下配置 alias 的值，将常用的一些路径赋值给了我们自定义的变量，这样我们便可以将第一个例子简化为：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> HelloWorld <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;_com/HelloWorld.vue&#x27;</span><br><br></code></pre></td></tr></table></figure><p>而在 CLI 3.x 中我们无法直接操作 webpack 的配置文件，我们需要通过 chainWebpack 来进行间接修改，代码如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">/* vue.config.js */</span><br>module<span class="hljs-selector-class">.exports</span> = &#123;<br>    ...<br>    <br>    chainWebpack: config =&gt; &#123;<br>        config<span class="hljs-selector-class">.resolve</span><span class="hljs-selector-class">.alias</span><br>            <span class="hljs-selector-class">.set</span>(<span class="hljs-string">&#x27;@&#x27;</span>, <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src&#x27;</span>))<br>            <span class="hljs-selector-class">.set</span>(<span class="hljs-string">&#x27;_lib&#x27;</span>, <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src/common&#x27;</span>))<br>            <span class="hljs-selector-class">.set</span>(<span class="hljs-string">&#x27;_com&#x27;</span>, <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src/components&#x27;</span>))<br>            <span class="hljs-selector-class">.set</span>(<span class="hljs-string">&#x27;_img&#x27;</span>, <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src/images&#x27;</span>))<br>            <span class="hljs-selector-class">.set</span>(<span class="hljs-string">&#x27;_ser&#x27;</span>, <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src/services&#x27;</span>))<br>    &#125;,<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样我们修改 webpack alias 来简化路径的优化就实现了。但是需要注意的是对于在样式及 html 模板中引用路径的简写时，前面需要加上 <code>～</code> 符，否则路径解析会失败，如：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">.img &#123;<br>    background: (~_img/home.png);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="整合功能模块"><a href="#整合功能模块" class="headerlink" title="整合功能模块"></a>整合功能模块</h2><p>在多页应用的构建中，由于存在多个入口文件，因此会出现重复书写相同入口配置的情况，这样对于后期的修改和维护都不是特别友好，需要修改所有入口文件的相同配置，比如在 index 单页的入口中我们引用了 VConsole 及 performance 的配置，同时在 Vue 实例上还添加了 $openRouter 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./index.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/store/&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Navigator</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../common&#x27;</span><br><br><span class="hljs-comment">// 如果是非线上环境，不加载 VConsole</span><br><span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> !== <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">VConsole</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vconsole/dist/vconsole.min.js&#x27;</span>);<br>    <span class="hljs-keyword">var</span> vConsole = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VConsole</span>();<br><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">performance</span> = <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">$openRouter</span> = <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$openRouter</span> = <span class="hljs-title class_">Navigator</span>.<span class="hljs-property">openRouter</span>;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  router,<br>  store,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>而在 page1 和 page2 的入口文件中也同样进行了上述配置，那我们该如何整合这些重复代码，使其能够实现一次修改多处生效的功能呢？最简单的方法便是封装成一个共用方法来进行调用，这里我们可以在 common 文件夹下新建 entryConfig 文件夹用于放置入口文件中公共配置的封装，封装代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Navigator</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../index&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (<span class="hljs-title class_">Vue</span>) =&gt; &#123;<br><br>    <span class="hljs-comment">// 如果是非线上环境，不加载 VConsole</span><br>    <span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> !== <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">VConsole</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vconsole/dist/vconsole.min.js&#x27;</span>);<br>        <span class="hljs-keyword">var</span> vConsole = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VConsole</span>();<br><br>        <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">performance</span> = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property">$openRouter</span> = <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$openRouter</span> = <span class="hljs-title class_">Navigator</span>.<span class="hljs-property">openRouter</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上述代码我们向外暴露了一个函数，在调用它的入口文件中传入 Vue 实例作为参数即可实现内部功能的共用，我们可以将原本的入口文件简化为:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./index.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/store/&#x27;</span><br><span class="hljs-keyword">import</span> entryConfig <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;_lib/entryConfig/&#x27;</span><br><br><span class="hljs-comment">// 调用公共方法加载配置</span><br><span class="hljs-title function_">entryConfig</span>(<span class="hljs-title class_">Vue</span>)<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  router,<br>  store,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>这样我们便完成了入口文件配置的整合，当然你还可以给该函数传入 router 实例及自定义参数用于其他共用配置的封装。</p><h2 id="开启-Gzip-压缩"><a href="#开启-Gzip-压缩" class="headerlink" title="开启 Gzip 压缩"></a>开启 Gzip 压缩</h2><p>在《webpack 在 CLI 3 中的应用》章节，我们介绍了 CLI 为我们内置的 webpack plugins，使用这些内置插件基本已经能够满足我们大多数项目的构建和优化，当然你仍然可以为项目添加自己想要的插件来实现一些差异化的功能，比如使用 <a href="https://www.npmjs.com/package/compression-webpack-plugin">compression-webpack-plugin</a> 来开启 Gzip 压缩。在 vue.config.js 配置文件中，我们通过 configureWebpack 中返回一个对象来实现 plugins 的合并：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* vue.config.js */</span><br><span class="hljs-keyword">const</span> isPro = process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    ...<br>    <br>    <span class="hljs-attr">configureWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (isPro) &#123;<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">plugins</span>: [<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompressionWebpackPlugin</span>(&#123;<br>                         <span class="hljs-comment">// 目标文件名称。[path] 被替换为原始文件的路径和 [query] 查询</span><br>                        <span class="hljs-attr">asset</span>: <span class="hljs-string">&#x27;[path].gz[query]&#x27;</span>,<br>                        <span class="hljs-comment">// 使用 gzip 压缩</span><br>                        <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;gzip&#x27;</span>, <br>                        <span class="hljs-comment">// 处理与此正则相匹配的所有文件</span><br>                        <span class="hljs-attr">test</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<br>                            <span class="hljs-string">&#x27;\\.(js|css)$&#x27;</span><br>                        ),<br>                        <span class="hljs-comment">// 只处理大于此大小的文件</span><br>                        <span class="hljs-attr">threshold</span>: <span class="hljs-number">10240</span>,<br>                        <span class="hljs-comment">// 最小压缩比达到 0.8 时才会被压缩</span><br>                        <span class="hljs-attr">minRatio</span>: <span class="hljs-number">0.8</span>，<br>                    &#125;)<br>                ]<br>            &#125;<br>        &#125;<br>    &#125;<br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上方我们通过在生产环境中增加 Gzip 压缩配置实现了打包后输出增加对应的 .gz 为后缀的文件，而由于我们配置项中配置的是只压缩大小超过 10240B（10kB）的 JS 及 CSS，因此不满足条件的文件不会进行 Gzip 压缩。</p><p>Gzip 压缩能在普通压缩的基础上再进行 50% 以上 的压缩，我们可以直接来看下控制台的输出对比图：</p> <img src="/2019/08/30/vue/1654de7a38472ab8.png" class=""><p>很明显，Gzip 压缩后的文件体积得到了很大程度的减小，这对于浏览器资源加载速度的提升起到了非常有效的帮助。但是需要注意的是访问 Gzip 压缩的文件需要服务端进行相应配置，以下是 Nginx Gzip 压缩的流程：</p><blockquote><p>Nginx 开启 Gzip 压缩配置后，其会根据配置情况对指定的类型文件进行压缩，主要针对 JS 与 CSS 。如果文件路径中存在与原文件同名（加了个 .gz），Nginx 会获取 gz 文件，如果找不到，会主动进行 Gzip 压缩。</p></blockquote><h2 id="结语-7"><a href="#结语-7" class="headerlink" title="结语"></a>结语</h2><p>至此，一路走来，我们成功完成了本小册 Vue 项目构建部分的教程，从 CLI 3.x 的使用到项目内外部环境的配置，再到最后多页应用的拓展，我们循序渐进、由浅入深的讲解了 Vue 项目构建的主要知识点及详细流程，希望大家能够在此基础上举一反三，结合实际代码，将理论知识转化为实际运用，配合自己的理解，一步步实现自己的项目构建，并为构建出的项目添砖加瓦，实现质的飞跃。</p><h2 id="思考-作业-6"><a href="#思考-作业-6" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>除了本文中介绍的项目优化方法，还有哪些常见的优化手段？如何通过 Vue CLI 3 配置实现？</p></li><li><p>总结并对比 Vue CLI 2.x，Vue CLI 3.x 在项目构建方面有哪些优势和不足？</p></li></ul><h1 id="开发指南篇-1：从编码技巧与规范开始"><a href="#开发指南篇-1：从编码技巧与规范开始" class="headerlink" title="开发指南篇 1：从编码技巧与规范开始"></a>开发指南篇 1：从编码技巧与规范开始</h1><p>当我们完成项目的构建，进入开发阶段的时候，除了你需要了解框架本身的知识点外，我们还需要提前掌握一些项目的编码技巧与规范，在根源上解决之后因编码缺陷而导致的项目维护困难、性能下降等常见问题，为项目多人开发提供编码的一致性。</p><p>本文将罗列项目中常用的一些编码技巧与规范来帮助大家提升代码质量，并会结合代码片段加强大家的理解与认知。当然不是所有实例都是针对 Vue.js 开发的，有些同样也适用于其他前端项目。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="1-使用对象代替-if-及-switch"><a href="#1-使用对象代替-if-及-switch" class="headerlink" title="1. 使用对象代替 if 及 switch"></a>1. 使用对象代替 if 及 switch</h3><p>在很多情况下，我们经常会遇到循环判断执行赋值操作的场景，一般我们都会使用 if 及 switch 的条件判断，如果符合则执行赋值，不符合则进入下个判断，比如：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sqf">let <span class="hljs-built_in">name</span> = <span class="hljs-string">&#x27;lisi&#x27;</span>;<br>let age = <span class="hljs-number">18</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">name</span> === <span class="hljs-string">&#x27;zhangsan&#x27;</span>) &#123;<br>    age = <span class="hljs-number">21</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">name</span> === <span class="hljs-string">&#x27;lisi&#x27;</span>) &#123;<br>    age = <span class="hljs-number">18</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">name</span> === <span class="hljs-string">&#x27;wangwu&#x27;</span>) &#123;<br>    age = <span class="hljs-number">12</span>;<br>&#125;<br><br><span class="hljs-comment">// 或者</span><br><span class="hljs-keyword">switch</span>(<span class="hljs-built_in">name</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;zhangsan&#x27;</span>:<br>        age = <span class="hljs-number">21</span>;<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;lisi&#x27;</span>:<br>        age = <span class="hljs-number">18</span>;<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;wangwu&#x27;</span>:<br>        age = <span class="hljs-number">12</span>;<br>        <span class="hljs-keyword">break</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样的写法不仅冗余，而且代码执行效率不高，我们可以使用对象的形式简写：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">let name</span> = <span class="hljs-string">&#x27;lisi&#x27;</span>;<br><span class="hljs-attribute">let obj</span> = &#123;<br>    zhangsan: 21,<br>    lisi: 18,<br>    wangwu: 12<br>&#125;;<br><br><span class="hljs-attribute">let age</span> = obj[name] || 18;<br><br></code></pre></td></tr></table></figure><p>以上这种技巧适用于循环判断一次赋值的情况，如果判断过后有较多处理逻辑的还需要使用 if 或 switch 等方法。</p><h3 id="2-使用-Array-from-快速生成数组"><a href="#2-使用-Array-from-快速生成数组" class="headerlink" title="2. 使用 Array.from 快速生成数组"></a>2. 使用 Array.from 快速生成数组</h3><p>一般我们生成一个有规律的数组会使用循环插入的方法，比如使用时间选择插件时，我们可能需要将小时数存放在数组中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">let</span> hours = [];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = 0; i &lt; 24; i++) &#123;<br>    hours.push(i + <span class="hljs-string">&#x27;时&#x27;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果使用 Array.from 我们可以简写为：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">let hours = <span class="hljs-built_in">Array</span>.<span class="hljs-keyword">from</span>(&#123; length: <span class="hljs-number">24</span> &#125;, <span class="hljs-function"><span class="hljs-params">(value, index)</span> =&gt;</span> index + <span class="hljs-string">&#x27;时&#x27;</span>);<br><br></code></pre></td></tr></table></figure><h3 id="3-使用-router-beforeEach-来处理跳转前逻辑"><a href="#3-使用-router-beforeEach-来处理跳转前逻辑" class="headerlink" title="3. 使用 router.beforeEach 来处理跳转前逻辑"></a>3. 使用 router.beforeEach 来处理跳转前逻辑</h3><p>在某些情况下，我们需要在路由跳转前处理一些特定的业务逻辑，比如修改路由跳转、设置 title 等，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>)<br><br><span class="hljs-comment">// 首页</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = (<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">require</span>.<span class="hljs-title function_">ensure</span>([<span class="hljs-string">&#x27;../views/home.vue&#x27;</span>], <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../views/home.vue&#x27;</span>))<br>    &#125;)<br>&#125;)<br><br><span class="hljs-keyword">let</span> base = <span class="hljs-string">`<span class="hljs-subst">$&#123;process.env.BASE_URL&#125;</span>`</span>;<br><br><span class="hljs-keyword">let</span> router =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;history&#x27;</span>,<br>    <span class="hljs-attr">base</span>: base,<br>    <span class="hljs-attr">routes</span>: [<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>,<br>            <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;首页&#x27;</span> &#125;<br>        &#125;,<br>    ]<br>&#125;)<br><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> title = to.<span class="hljs-property">meta</span> &amp;&amp; to.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span>;<br>    <br>    <span class="hljs-keyword">if</span> (title) &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = title; <span class="hljs-comment">// 设置页面 title</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (to.<span class="hljs-property">name</span> === <span class="hljs-string">&#x27;home&#x27;</span>) &#123;<br>    <br>        <span class="hljs-comment">// 拦截并跳转至 page2 单页，$openRouter 方法在第 5 节中封装</span><br>        <span class="hljs-title class_">Vue</span>.$openRouter(&#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;page2&#x27;</span><br>        &#125;);<br>    &#125;<br>    <br>    <span class="hljs-title function_">next</span>();<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br></code></pre></td></tr></table></figure><p>注意最后需要调用 <code>next()</code> 方法执行路由跳转。</p><h3 id="4-使用-v-if-来优化页面加载"><a href="#4-使用-v-if-来优化页面加载" class="headerlink" title="4. 使用 v-if 来优化页面加载"></a>4. 使用 v-if 来优化页面加载</h3><p>在 Vue 页面中，一些模块可能需要用户主动触发才会显示，比如弹框组件等这样的子组件，那么我们可以使用 <code>v-if</code> 来进行按需渲染，没必要一进页面就渲染所有模块。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showModuleB = true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module-b</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isShowModuleB&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">module-b</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> moduleB <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;components/moduleB&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">isShowModuleB</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">        &#125;  </span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">        moduleB</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>这样当 isShowModuleB 为 false 的时候便不会加载该模块下的代码，包括一些耗时的接口调用。当然 v-if 主要适用于代码量较多、用户点击不是很频繁的模块的显示隐藏，同时如果涉及到权限问题的代码都需要使用 v-if，而不是 v-show。</p><h3 id="5-路由跳转尽量使用-name-而不是-path"><a href="#5-路由跳转尽量使用-name-而不是-path" class="headerlink" title="5. 路由跳转尽量使用 name 而不是 path"></a>5. 路由跳转尽量使用 name 而不是 path</h3><p>我们前期配置的路由路径后期难免会进行修改，如果我们页面跳转的地方全是使用的 <code>path</code>，那么我们需要修改所有涉及该 path 的页面，这样不利于项目的维护。而相对于 path，name 使用起来就方便多了，因为其具有唯一性，即使我们修改了 path，还可以使用原来的 <code>name</code> 值进行跳转。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade">this.<span class="hljs-symbol">$router</span>.<span class="hljs-built_in">push</span>(&#123; <br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;page1&#x27;</span><br>&#125;);<br><br><span class="hljs-comment">// 而不是</span><br>this.<span class="hljs-symbol">$router</span>.<span class="hljs-built_in">push</span>(&#123; <br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;page1&#x27;</span><br>&#125;);<br><br></code></pre></td></tr></table></figure><h3 id="6-使用-key-来优化-v-for-循环"><a href="#6-使用-key-来优化-v-for-循环" class="headerlink" title="6. 使用 key 来优化 v-for 循环"></a>6. 使用 key 来优化 v-for 循环</h3><p><code>v-for</code> 是 Vue 提供的基于源数据多次渲染元素或模板块的指令。正因为是数据驱动，所以在修改列表数据的时候，Vue 内部会根据 key 值去判断某个值是否被修改，其会重新渲染修改后的值，否则复用之前的元素。</p><p>这里如果数据中存在唯一表示 id，则推荐使用 id 作为 key，如果没有则可以使用数组的下标 index 作为 key。因为如果在数组中间插入值，其之后的 index 会发生改变，即使数据没变 Vue 也会进行重新渲染，所以最好的办法是使用数组中不会变化且唯一的那一项作为 key 值。例如：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in arr&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item.data</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">arr</span>: [</span></span><br><span class="language-javascript"><span class="language-xml">                &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;a&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;b&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;c&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            ]</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h3 id="7-使用-computed-代替-watch"><a href="#7-使用-computed-代替-watch" class="headerlink" title="7. 使用 computed 代替 watch"></a>7. 使用 computed 代替 watch</h3><p>很多时候页面会出现 <code>watch</code> 的滥用而导致一系列问题的产生，而通常更好的办法是使用 <code>computed</code> 属性，首先需要区别它们有什么区别：</p><ul><li>watch：当监测的属性变化时会自动执行对应的回调函数</li><li>computed：计算的属性只有在它的相关依赖发生改变时才会重新求值</li></ul><p>其实它们在功能上还是有所区别的，但是有时候可以实现同样的效果，而 computed 会更胜一筹，比如：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;firstName&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">fullName</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">fullName2</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        reurn &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">fullName2</span>: <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    </span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 使用 computed</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">computed</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">fullName</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    </span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 使用 watch</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">watch</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">firstName</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">newVal, oldVal</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">fullName2</span> = newVal + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">lastName</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">newVal, oldVal</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">fullName2</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27; &#x27;</span> + newVal;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>上方我们通过对比可以看到，在处理多数据联动的情况下，使用 computed 会更加合理一点。</p> <img src="/2019/08/30/vue/166cafdda21ccc5b.png" class=""><p>computed 监测的是依赖值，依赖值不变的情况下其会直接读取缓存进行复用，变化的情况下才会重新计算；而 watch 监测的是属性值， 只要属性值发生变化，其都会触发执行回调函数来执行一系列操作。</p><h3 id="8-统一管理缓存变量"><a href="#8-统一管理缓存变量" class="headerlink" title="8. 统一管理缓存变量"></a>8. 统一管理缓存变量</h3><p>在项目中或多或少会使用浏览器缓存，比如 sessionStorage 和 localStorage，当一个项目中存在很多这样的缓存存取情况的时候就会变得难以维护和管理，因为其就像全局变量一样散落在项目的各个地方，这时候我们应该将这些变量统一管理起来，放到一个或多个文件中去，比如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">/* types.js */</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> USER_NAME = <span class="hljs-string">&#x27;userName&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> TOKEN = <span class="hljs-string">&#x27;token&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p>在需要存取的时候，直接引用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">USER_NAME</span>, <span class="hljs-variable constant_">TOKEN</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../types.js&#x27;</span><br><br><span class="hljs-variable language_">sessionStorage</span>[<span class="hljs-variable constant_">USER_NAME</span>] = <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-variable language_">localStorage</span>[<span class="hljs-variable constant_">TOKEN</span>] = <span class="hljs-string">&#x27;xxx&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p>使用这种方法的好处在于一旦我们需要修改变量名，直接修改管理文件中的值即可，无需修改使用它的页面，同时这也可以避免命名冲突等问题的出现，这类似于 vuex 中 mutations 变量的管理。</p><h3 id="9-使用-setTimeout-代替-setInterval"><a href="#9-使用-setTimeout-代替-setInterval" class="headerlink" title="9. 使用 setTimeout 代替 setInterval"></a>9. 使用 setTimeout 代替 setInterval</h3><p>一般情况下我们在项目里不建议使用 <code>setInterval</code>，因为其会存在代码的执行间隔比预期小以及 “丢帧” 的现象，原因在于其本身的实现逻辑。很多人会认为 setInterval 中第二个时间参数的作用是经过该毫秒数执行回调方法，其实不然，其真正的作用是<strong>经过该毫秒数将回调方法放置到队列中去</strong>，但是如果队列中存在正在执行的方法，其会等待之前的方法完毕再执行，如果存在还未执行的代码实例，其不会插入到队列中去，也就产生了 “丢帧”。</p><p>而 setTimeout 并不会出现这样的现象，因为每一次调用都会产生了一个新定时器，同时在前一个定时器代码执行完之前，不会向队列插入新的定时器代码。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-regexp">//</span> 该定时器实际会在 <span class="hljs-number">3</span>s 后立即触发下一次回调<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-regexp">//</span> 执行完这里的代码需要 <span class="hljs-number">2</span>s<br>&#125;, <span class="hljs-number">1000</span>);<br><br><span class="hljs-regexp">//</span> 使用 <span class="hljs-built_in">setTimeout</span> 改写，<span class="hljs-number">4</span>秒后触发下一次回调<br>let doSometing = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-regexp">//</span> 执行完这里的代码需要 <span class="hljs-number">2</span>s<br>    <br>    <span class="hljs-built_in">setTimeout</span>(doSometing, <span class="hljs-number">1000</span>);<br>&#125;<br><br>doSometing();<br><br></code></pre></td></tr></table></figure><p>延伸阅读：<a href="https://segmentfault.com/a/1190000011282175">对于“不用setInterval，用setTimeout”的理解</a></p><h3 id="10-不要使用-for-in-循环来遍历数组"><a href="#10-不要使用-for-in-循环来遍历数组" class="headerlink" title="10. 不要使用 for in 循环来遍历数组"></a>10. 不要使用 for in 循环来遍历数组</h3><p>大家应该都知道 <code>for in</code> 循环是用于遍历对象的，但它可以用来遍历数组吗？答案是可以的，因为数组在某种意义上也是对象，但是如果用其遍历数组会存在一些隐患：其会遍历数组原型链上的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> arr) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[key]); <span class="hljs-comment">// 会正常打印 1, 2</span><br>&#125;<br><br><span class="hljs-comment">// 但是如果在 Array 原型链上添加一个方法</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">test</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> arr) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[key]); <span class="hljs-comment">// 此时会打印 1, 2, ƒ () &#123;&#125;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>因为我们不能保证项目代码中不会对数组原型链进行操作，也不能保证引入的第三方库不对其进行操作，所以不要使用 for in 循环来遍历数组。</p><h2 id="结语-8"><a href="#结语-8" class="headerlink" title="结语"></a>结语</h2><p>本文罗列了 10 个项目开发中常见的编码技巧与规范，其实技巧和规范之间本身就是相辅相成的，所以没有分别进行罗列。当然实际的项目开发中存在着很多这样的例子需要大家自己去归纳和整理，比如使用 <code>name</code> 来命名你的组件等。如果你有不错的点子，也可以分享在下方的评论区域中供大家学习。</p><p>拓展阅读：<a href="https://github.com/ecomfe/spec">前端各类规范集合</a></p><h2 id="思考-作业-7"><a href="#思考-作业-7" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>可以使用哪些技巧来实现数组的循环遍历、去重等？</p></li><li><p>在 Vue 项目中如何使用 <code>ESLint</code> 来规范 JS 代码的编写？</p></li><li><p>.vue 单文件组件中如何进行代码的格式化？</p></li></ul><h1 id="开发指南篇-2：学会编写可复用性模块"><a href="#开发指南篇-2：学会编写可复用性模块" class="headerlink" title="开发指南篇 2：学会编写可复用性模块"></a>开发指南篇 2：学会编写可复用性模块</h1><p>在生活中，重复的机械劳动会消耗我们的时间和精力，提高生产成本，降低工作效率。同样，在代码世界中，编写重复的代码会导致代码的冗余，页面性能的下降以及后期维护成本的增加。由此可见将重复的事情复用起来是提高生产效率、降低维护成本的不二之选。</p><p>在 Vue 项目中，每一个页面都可以看作是由大大小小的模块构成的，即便是一行代码、一个函数、一个组件都可以看作是一个个自由的模块。那么提高代码的复用性的关键便在于编写可复用的模块，也就是编写可复用的代码、函数和组件等。</p><h2 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h2><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">let person = [];<br><br>for (let i = 0; i &lt; data.obj.items.length; i++) &#123;<br>    <span class="hljs-attribute">person.push(&#123;</span><br><span class="hljs-attribute">        name</span>: data<span class="hljs-variable">.obj</span><span class="hljs-variable">.items</span>[i]<span class="hljs-variable">.name</span>,<br>        age: data<span class="hljs-variable">.obj</span><span class="hljs-variable">.items</span>[i]<span class="hljs-variable">.age</span><br>    &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>不知道上方代码给你的第一印象是什么？总之给我的印象是糟糕的，因为出现了重复性的代码片段 <code>data.obj.items</code>，可能这样的代码在我们团队开发中随处可见，这也说明了重复编码现象其实无处不在。</p><p>面对自己编写的代码，我们应该保持一颗去重的心，发现重复的地方就相当于找到了可以复用的模块。在不复用的情况下，上述代码一旦需要修改变量 <code>items</code> 为 <code>lists</code>，那么我们就得修改 3 处地方，不知不觉就增加了维护成本。而到时候往往修改你代码的人并不是你自己，所以对自己好点，对他人也会好点。复用后的代码如下：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">let</span> person = [];<br><span class="hljs-built_in">let</span> <span class="hljs-built_in">values</span> = data.obj.items;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">values</span>.<span class="hljs-built_in">length</span>; i++) &#123;<br>    person.<span class="hljs-built_in">push</span>(&#123;<br>        name: <span class="hljs-built_in">values</span>[i].name,<br>        age: <span class="hljs-built_in">values</span>[i].age<br>    &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们通过将 data.obj.items 的值赋值给变量 values 来实现了复用，此时修改 <code>items</code> 为 <code>lists</code> 的话我们只需修改一处地方即可，不管是维护成本还是代码可读性上，复用的优势都显而易见。</p><h2 id="封装成一个函数"><a href="#封装成一个函数" class="headerlink" title="封装成一个函数"></a>封装成一个函数</h2><p>除了使用变量的赋值缓存使用来解决数据的重复读取外，我们在开发过程中重复性更多的也许是功能点的重复，比如：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tempalte</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;str1&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;str2&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">str1.slice</span>(<span class="hljs-name">1</span>).toUpperCase() &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">str2.slice</span>(<span class="hljs-name">1</span>).toUpperCase() &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>上述代码的重复功能点在于截取输入框中第二个字符开始到最后的值并把它们转化成大写字母，像这样很简单的操作虽然重复使用也不会出现太大的问题，但是如果是代码量较多的操作呢？重复书写相同功能的代码是一种不经过大脑思考的行为，我们需要对其进行优化，这里我们可以把功能点封装成一个函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-title function_">sliceUpperCase</span>(<span class="hljs-params">val</span>) &#123;<br>            <span class="hljs-keyword">return</span> val.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">toUpperCase</span>()<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如此我们只要在用到该方法的地方调用即可，将值传入其中并返回新值。当然像在双花括号插值和 v-bind 表达式中重复的功能点我们可以封装成过滤器比较合适：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 单文件组件注册过滤器</span><br>filters: &#123;<br>    sliceUpperCase(<span class="hljs-keyword">val</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">val</span>.slice(<span class="hljs-number">1</span>).toUpperCase()<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 全局注册过滤器</span><br>Vue.filter(<span class="hljs-string">&#x27;sliceUpperCase&#x27;</span>, function (<span class="hljs-keyword">val</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">val</span>.slice(<span class="hljs-number">1</span>).toUpperCase()<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>然后在 html 中使用“管道”符进行过滤：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">str1</span> | toUpperCase &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">str2</span> | toUpperCase &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>这样我们就把重复的功能性代码封装成了函数，而不管是过滤器还是正常的方法封装，其本质都是函数的封装。</p><h2 id="封装成一个组件"><a href="#封装成一个组件" class="headerlink" title="封装成一个组件"></a>封装成一个组件</h2><p>相比较于函数的封装，规模更大一点的便是组件的封装，组件包含了模板、脚本以及样式的代码，在实际开发中组件的使用频率也是非常大的，我们项目中的每一个页面其实都可以看作是一个父组件，其可以包含很多子组件，子组件通过接收父组件的值来渲染页面，父组件通过响应子组件的回调来触发事件。</p><p>封装一个组件主要包含两种方式，一种是最常见的整体封装，用户通过改变数据源来呈现不同的页面状态，代码结构不可定制化。例如：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span>&gt;<br>    &lt;<span class="hljs-keyword">my</span>-component data=<span class="hljs-string">&quot;我是父组件传入子组件的数据&quot;</span>&gt;&lt;/<span class="hljs-keyword">my</span>-component&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br><br></code></pre></td></tr></table></figure><p>另一种便是自定义封装，也就是插槽(slot)，我们可以开放一部分槽位给父组件，使其能够进行一定程度的定制化，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">my-component</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;我是父组件传入子组件的数据&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;customize&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这是定制化的数据<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>在 myComponent 组件中我们便可以接收对应的 slot：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">data</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;customize&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>这里我们通过定义 slot 标签的 name 值为 customize 来接收父组件在使用该组件时在 template 标签上定义的 slot&#x3D;”customize” 中的代码，不同父组件可以定制不同的 slot 代码来实现差异化的插槽。最终渲染出来的代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是父组件传入子组件的数据<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这是定制化的数据<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>这样我们就完成了一个小型组件的封装，将共用代码封装到组件中去，页面需要引入的时候直接使用 import 并进行相应注册即可，当然你也可以进行全局的引入：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> myComponent <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../myComponent.vue&#x27;</span><br><br><span class="hljs-comment">// 全局</span><br>Vue.component(<span class="hljs-string">&#x27;my-component&#x27;</span>, myComponent)<br><br></code></pre></td></tr></table></figure><h2 id="封装成一个插件"><a href="#封装成一个插件" class="headerlink" title="封装成一个插件"></a>封装成一个插件</h2><p>在某些情况下，我们封装的内容可能不需要使用者对其内部代码结构进行了解，其只需要熟悉我们提供出来的相应方法和 api 即可，这需要我们更系统性的将公用部分逻辑封装成插件，来为项目添加全局功能，比如常见的 loading 功能、弹框功能等。</p><p>Vue 提供给了我们一个 install 方法来编写插件，使用该方法中的第一个 Vue 构造器参数可以为项目添加全局方法、资源、选项等。比如我们可以给组件添加一个简单的全局调用方法来实现插件的编写：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">/* toast.js */</span><br>import ToastComponent from <span class="hljs-string">&#x27;./toast.vue&#x27;</span> <span class="hljs-comment">// 引入组件</span><br><br>let <span class="hljs-symbol">$vm</span><br><br>export default &#123;    <br>    install(Vue, options) &#123;<br>        <br>        <span class="hljs-comment">// 判断实例是否存在</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-symbol">$vm</span>) &#123;            <br>            const ToastPlugin = Vue.extend(ToastComponent); <span class="hljs-comment">// 创建一个“扩展实例构造器”</span><br>            <br>            <span class="hljs-comment">// 创建 $vm 实例</span><br>            <span class="hljs-symbol">$vm</span> = <span class="hljs-keyword">new</span> ToastPlugin(&#123;                <br>                <span class="hljs-attr">el</span>: document.createElement(<span class="hljs-string">&#x27;div&#x27;</span>)  <span class="hljs-comment">// 声明挂载元素          </span><br>            &#125;);            <br>            <br>            document.body.appendChild(<span class="hljs-symbol">$vm</span>.<span class="hljs-symbol">$el</span>); <span class="hljs-comment">// 把 toast 组件的 DOM 添加到 body 里</span><br>        &#125; <br>        <br>        <span class="hljs-comment">// 给 toast 设置自定义文案和时间</span><br>        let toast = <span class="hljs-function">(<span class="hljs-params"><span class="hljs-built_in">text</span>, duration</span>) =&gt;</span> &#123;<br>            <span class="hljs-symbol">$vm</span>.<span class="hljs-built_in">text</span> = <span class="hljs-built_in">text</span>;<br>            <span class="hljs-symbol">$vm</span>.duration = duration;<br>            <br>            <span class="hljs-comment">// 在指定 duration 之后让 toast 消失</span><br>            setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>                <span class="hljs-symbol">$vm</span>.isShow = <span class="hljs-literal">false</span>;  <br>            &#125;, <span class="hljs-symbol">$vm</span>.duration);<br>        &#125;<br>        <br>        <span class="hljs-comment">// 判断 Vue.$toast 是否存在</span><br>        <span class="hljs-keyword">if</span> (!Vue.<span class="hljs-symbol">$toast</span>) &#123;            <br>            Vue.<span class="hljs-symbol">$toast</span> = toast;        <br>        &#125;        <br>        <br>        Vue.prototype.<span class="hljs-symbol">$toast</span> = Vue.<span class="hljs-symbol">$toast</span>; <span class="hljs-comment">// 全局添加 $toast 事件</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="/2019/08/30/vue/166cb0b518f4c53c.png" class=""><p>成功编写完插件的 JS 脚本后，我们在入口文件中需要通过 Vue.use() 来注册一下该插件：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> Toast <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/widgets/toast/toast.js&#x27;</span><br><br>Vue.use(Toast); <span class="hljs-comment">// 注册 Toast</span><br><br></code></pre></td></tr></table></figure><p>最后我们在需要调用它的地方直接传入配置项使用即可，比如：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-built_in">this</span>.<span class="hljs-variable">$toast</span>(<span class="hljs-string">&#x27;Hello World&#x27;</span>, <span class="hljs-number">2000</span>);<br><br></code></pre></td></tr></table></figure><p>当然你也可以不使用 install 方法来编写插件，直接采用导出一个封装好的实例方法并将其挂载到 Vue 的原型链上来实现相同的功能。</p><p>更详细的编写插件和实例的方法可以参考我之前写的一篇文章：<a href="https://mp.weixin.qq.com/s/Aqgh7Dkialhm9v8U0wBuqg">Vue 插件编写与实战</a></p><h2 id="结语-9"><a href="#结语-9" class="headerlink" title="结语"></a>结语</h2><p>本文讲解了编写可复用性模块的常见方法，通过出现了重复代码 -&gt; 封装成一个变量 -&gt; 封装成一个函数 -&gt; 封装成一个组件 -&gt; 封装成一个插件，一步步将重复代码进行分析和复用。而与重复代码做斗争是一个持久性的过程，我们需要时刻保持一种“强迫症”的心态去整理复用项目中的重复代码，做好编码的严谨和自律。</p><h2 id="思考-作业-8"><a href="#思考-作业-8" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>在 Vue 中如何添加全局自定义指令？</p></li><li><p>在 vue 路由切换时如何全局隐藏某个插件？比如文中的 toast</p></li><li><p>如何实现一个表单验证插件？需要运用到哪些知识？</p></li></ul><h1 id="开发指南篇-3：合理划分容器组件与展示组件"><a href="#开发指南篇-3：合理划分容器组件与展示组件" class="headerlink" title="开发指南篇 3：合理划分容器组件与展示组件"></a>开发指南篇 3：合理划分容器组件与展示组件</h1><p>上篇文章我们提到了组件的概念，组件是目前模块化、组件化开发模式中必不可少的单元形式，那么除了其概念和可复用性外，我们对它的职能划分了解多少呢？</p><p>本文将立足 Vue 组件的职能来谈谈我个人对于其划分的理解，唯有了解不同类型组件的职能才能编写出可维护、低耦合的前端代码。</p><h2 id="组件的职能划分"><a href="#组件的职能划分" class="headerlink" title="组件的职能划分"></a>组件的职能划分</h2><p>如果要将 Vue 组件按照职能划分，我们可以将其分为两种类型：容器组件和展示组件。</p><p>容器组件和展示组件的概念来自于 <code>Redux</code> 文档，那么首先什么是容器组件呢？顾名思义，它是一个容器性质的组件，我们可以把它理解为最外层的父组件，也就是最顶层的组件，一般我们把它放置在 <code>views</code> 文件夹下，其功能主要用于做数据提取与实现公共逻辑，然后渲染对应的子组件。</p><p>另一类组件叫做展示组件，字面意思就是主要用于做展示的组件，其主要功能是负责接收从容器组件传输过来的数据并在页面上渲染，实现其内部独有的功能逻辑。</p><p>一个页面中容器组件与展示组件的关系如下图所示：</p> <img src="/2019/08/30/vue/16533670555c3f00.png" class=""><p>上图我们以博客首页为例，容器组件就是整个首页最外层的父组件，而展示组件就包含了导航栏、文章列表、底部等子组件，代码层面如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">navigation</span> @<span class="hljs-attr">count</span>=<span class="hljs-string">&quot;countFn&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">navigation</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">:list</span>=<span class="hljs-string">&quot;articleList&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">foot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">import</span> &#123; mapActions, mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">SET_BLOG_DATA</span>(); <span class="hljs-comment">// 调用接口获取数据</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">            ...<span class="hljs-title function_">mapGetters</span>([<span class="hljs-string">&#x27;articleList&#x27;</span>]), <span class="hljs-comment">// 监听 state</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            ...<span class="hljs-title function_">mapActions</span>([<span class="hljs-string">&#x27;SET_BLOG_DATA&#x27;</span>, <span class="hljs-string">&#x27;SET_NAV_COUNT&#x27;</span>]),</span><br><span class="language-javascript">            <span class="hljs-title function_">countFn</span>(<span class="hljs-params">item</span>) &#123;</span><br><span class="language-javascript">            </span><br><span class="language-javascript">                <span class="hljs-comment">// 调用接口存储导航点击次数并跳转，通过派发 action 的形式来发起 state 变化</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">SET_NAV_COUNT</span>(&#123; <span class="hljs-attr">type</span>: item.<span class="hljs-property">type</span> &#125;);</span><br><span class="language-javascript">                </span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">name</span>: item.<span class="hljs-property">route</span>&#125;);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>以上是首页容器组件中的主要代码，其主要做了两件事情：数据的传递和回调的处理，当然还可以包括处理一些该页面中不属于任何一个展示组件的方法，比如校验登录状态。在一个容器组件中可以包含多个展示组件，下面我们来看一下展示组件 <code>Navigation</code> 中的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> </span><br><span class="hljs-tag">            <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in nav&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span><br><span class="hljs-tag">            @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;goNav(item)&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;item.name&quot;</span></span><br><span class="hljs-tag">        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">nav</span>: [&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;首页&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">route</span>: <span class="hljs-string">&#x27;index&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;index&#x27;</span></span><br><span class="language-javascript">                &#125;, &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;文章&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">route</span>: <span class="hljs-string">&#x27;article&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;article&#x27;</span> </span><br><span class="language-javascript">                &#125;, &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;关于&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">route</span>: <span class="hljs-string">&#x27;about&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;about&#x27;</span> </span><br><span class="language-javascript">                &#125;]</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">goNav</span>(<span class="hljs-params">item</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;count&#x27;</span>, item); <span class="hljs-comment">// 触发回调</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><code>Navigation</code> 导航组件只负责自己内部的数据渲染和回调逻辑，对于存储每个导航的点击量及跳转逻辑来说，作为展示组件这并不是其所关心的，所以我们需要通过触发容器组件回调的方式来实现。再来看一下展示组件 <code>Article</code> 的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> </span><br><span class="hljs-tag">            <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span><br><span class="hljs-tag">            @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;goPage(item.id)&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;item.title&quot;</span></span><br><span class="hljs-tag">        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">props</span>: &#123;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">            <span class="hljs-comment">// 接收容器组件数据</span></span><br><span class="language-javascript">            <span class="hljs-attr">list</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">default</span>: [],</span><br><span class="language-javascript">                <span class="hljs-attr">type</span>: <span class="hljs-title class_">Array</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>展示组件 Article 中动态的数据通过 <code>props</code> 从父组件中获取，其内部只处理文章列表的渲染工作，这样很好的将 UI 层面和应用层面进行了分离，便于今后该组件的复用。</p><p>此外 <code>Foot</code> 组件为纯静态组件，其只负责内部数据的渲染，不接收外部的数据和回调方法，这里就不做介绍了。</p><p>从以上代码示例中我们不难发现容器组件和展示组件的主要区别和注意点：</p><p>展示组件</p><p>容器组件</p><p>作用</p><p>描述如何展现（骨架、样式）</p><p>描述如何运行（数据获取、状态更新）</p><p>是否使用 Vuex</p><p>否</p><p>是</p><p>数据来源</p><p>props</p><p>监听 Vuex state</p><p>数据修改</p><p>从 props 调用回调函数</p><p>向 Vuex 派发 actions</p><p>相比较如果上述的博客首页不做组件的划分，全部逻辑都放在一个组件中，那么必然会导致代码的臃肿和难以维护，而一旦划分了容器组件和展示组件，后期如果哪个页面同样需要展示文章列表，我们只需要传递不同的数据直接复用即可。</p><h2 id="组件的层次结构"><a href="#组件的层次结构" class="headerlink" title="组件的层次结构"></a>组件的层次结构</h2><p>了解了组件职能的划分后，我们再来看一下组件的层次结构。关于组件的层次，一般页面中不宜嵌套超过 3 层的组件，因为超过 3 层后父子组件的通信就会变得相对困难，不利于项目的开发和维护。3 层结构的容器组件与展示组件的数据传递如下：</p> <img src="/2019/08/30/vue/165387907893eb84.png" class=""><p>可见组件的层次越深数据传递的过程就会变得越复杂，当然这取决于你如何划分容器组件和展示组件，比如我们可以将上述博客首页换一种划分方式：</p> <img src="/2019/08/30/vue/1653884e4abef22f.png" class=""><p>上图我们页面中存在 3 个容器组件，每个容器组件又可以包含各自的展示组件，这样一定程度上可以减少组件的层次嵌套深度。当然展示组件中也可以包含对应的容器组件来解决数据传输的问题：</p> <img src="/2019/08/30/vue/165388d3df0a32c5.png" class=""><p>这样展示组件 B 下面的容器组件 C 便可以不依赖于容器组件 A 的数据，其可以单独的进行数据获取和状态更新。</p><p>而对于那些你不知道应该划分为容器组件和展示组件的组件，比如一些耦合度较高的组件，那么你可以暂时归类到其他组件中，混用容器和展示，随着日后功能的逐渐清晰，我们再将其进行划分。</p><h2 id="结语-10"><a href="#结语-10" class="headerlink" title="结语"></a>结语</h2><p>本文主要介绍了容器组件和展示组件的概念和层次划分，在编码上，容器组件和展示组件各司其职，它们将容器和展示更好的分离，提高了组件的重用度，降低了功能上的耦合度，为高效、高质量的代码开发奠定了基础。</p><h2 id="思考-作业-9"><a href="#思考-作业-9" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>如果你了解 React，那么试想一下在 React 中展示组件与容器组件有哪些异同点？</p></li><li><p>如果需要你对掘金首页进行组件的划分，你会如何划分其结构和层次？</p></li><li><p>在子组件的 <code>props</code> 中，如何动态的设置默认值？</p></li></ul><h1 id="开发指南篇-4：数据驱动与拼图游戏"><a href="#开发指南篇-4：数据驱动与拼图游戏" class="headerlink" title="开发指南篇 4：数据驱动与拼图游戏"></a>开发指南篇 4：数据驱动与拼图游戏</h1><p>数据驱动是 Vue 框架的核心特性之一，也是 Vue 响应式原理的具体体现，相信大家对其应该深有体会，尤其是在操作数据来触发页面更新的时候。</p><p>为了让大家更加了解数据驱动的理念，并解决使用过程中可能出现的一系列问题，本文将结合比较常见和简单的 “拼图游戏” 来展示 Vue 数据驱动的魅力所在。</p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>首先我们先来看一下实现的 “拼图游戏” 的动态效果：</p> <img src="/2019/08/30/vue/16580710e190e86c.gif" class=""><p>在不操作 <code>DOM</code> 的情况下实现以上功能其实需要我们对 Vue 数据驱动及数据可视化有一个非常清楚的认知，在操作数据的同时驱动可视化界面的还原。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>接下来我们来看一下实现该拼图游戏的功能点及关键代码：</p><h3 id="游戏面板的构建"><a href="#游戏面板的构建" class="headerlink" title="游戏面板的构建"></a>游戏面板的构建</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!-- HTML 部分 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;puzzle-wrap&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#x27;puzzle&#x27;: true, &#x27;puzzle-empty&#x27;: !puzzle&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(puzzle, index) in puzzles&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;puzzle&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 数据部分</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">puzzles</span>: <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">15</span> &#125;, <span class="hljs-function">(<span class="hljs-params">value, index</span>) =&gt;</span> index + <span class="hljs-number">1</span>)<br>        &#125;<br>    &#125;,<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上方我们使用 <code>v-for</code> 循环构建了从 1 ～ 15 按顺序排列的方块格子，也就是拼图完成时候的顺序，但是拼图游戏一开始数字的顺序应该是无序的，也是随机打乱的，那么我们怎么实现呢？可以使用下方的随机排列函数：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shuffle</span><span class="hljs-params">(arr)</span></span> &#123;<br>    let <span class="hljs-built_in">len</span> = arr.length<br>    <br>    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span> - <span class="hljs-number">1</span>; i++) &#123;<br>        let idx = Math.<span class="hljs-built_in">floor</span>(Math.<span class="hljs-built_in">random</span>() * (<span class="hljs-built_in">len</span> - i))<br>        let temp = arr[idx]<br>        arr[idx] = arr[<span class="hljs-built_in">len</span> - i - <span class="hljs-number">1</span>]<br>        arr[<span class="hljs-built_in">len</span> - i - <span class="hljs-number">1</span>] = temp<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> arr<br>&#125;<br><br></code></pre></td></tr></table></figure><p>该函数中我们使用 <code>Math.random()</code> 来返回 0 和 1 之间的伪随机数，可能为 0，但总是小于1，[0, 1)，而通过这一特性我们可以实现生成 n-m，包含 n 但不包含 m 的整数，具体步骤如下：</p><ul><li>第一步算出 <code>m-n</code> 的值，假设等于 w</li><li>第二步 <code>Math.random() * w</code></li><li>第三步 <code>Math.random() * w + n</code></li><li>第四步 <code>Math.floor(Math.random() * w + n)</code></li></ul><p>在 <code>shuffle</code> 函数中 n 值永远是 0，而 w（即 len - i） 值随着循环 i 值的变大而不断减小。</p><blockquote><p>在上面的算法里，我们每一次循环从前 len - i 个元素里随机一个位置，将这个元素和第 len - i 个元素进行交换，迭代直到 i &#x3D; len - 1 为止。</p></blockquote><p>这一便实现了数组的随机打乱。最后我们需要在数组末尾追加一个空值来显示唯一一个空白格子：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">this</span>.puzzles.<span class="hljs-keyword">push</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><br></code></pre></td></tr></table></figure><h3 id="交换方块位置"><a href="#交换方块位置" class="headerlink" title="交换方块位置"></a>交换方块位置</h3><p>实现随机数字后，当我们点击方块，如果其上下左右存在为空的格子就需要将其进行交换，而由于是数据驱动界面，这里我们便需要交换两者在数组中的位置来实现：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">export default &#123;<br>    methods: &#123;<br>        <br>        <span class="hljs-comment">// 点击方块</span><br>        moveFn(index) &#123;<br>            let puzzles = <span class="hljs-keyword">this</span>.puzzles<br><br>            <span class="hljs-comment">// 获取点击位置上下左右的值</span><br>            let leftNum = <span class="hljs-keyword">this</span>.puzzles[index - <span class="hljs-number">1</span>],<br>                rightNum = <span class="hljs-keyword">this</span>.puzzles[index + <span class="hljs-number">1</span>],<br>                topNum = <span class="hljs-keyword">this</span>.puzzles[index - <span class="hljs-number">4</span>],<br>                bottomNum = <span class="hljs-keyword">this</span>.puzzles[index + <span class="hljs-number">4</span>]<br><br>            <span class="hljs-comment">// 和为空的位置交换数值</span><br>            <span class="hljs-keyword">if</span> (leftNum === <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; index % <span class="hljs-number">4</span>) &#123;<br>                <span class="hljs-keyword">this</span>.setPuzzle(index, -<span class="hljs-number">1</span>)<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rightNum === <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; <span class="hljs-number">3</span> !== index % <span class="hljs-number">4</span>) &#123;<br>                <span class="hljs-keyword">this</span>.setPuzzle(index, <span class="hljs-number">1</span>)<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (topNum === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>                <span class="hljs-keyword">this</span>.setPuzzle(index, -<span class="hljs-number">4</span>)<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bottomNum === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>                <span class="hljs-keyword">this</span>.setPuzzle(index, <span class="hljs-number">4</span>)<br>            &#125;<br>        &#125;,<br><br>        <span class="hljs-comment">// 设置数组值</span><br>        setPuzzle(index, num) &#123;<br>            let curNum = <span class="hljs-keyword">this</span>.puzzles[index]<br>            <br>            <span class="hljs-keyword">this</span>.$<span class="hljs-keyword">set</span>(<span class="hljs-keyword">this</span>.puzzles, index + num, curNum)<br>            <span class="hljs-keyword">this</span>.$<span class="hljs-keyword">set</span>(<span class="hljs-keyword">this</span>.puzzles, index, <span class="hljs-string">&#x27;&#x27;</span>)<br>        &#125;,<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>由于是 16 宫格的拼图，所以我们在点击获取位置的时候需要考虑边界情况，比如第 4 个格子为空，我们点击第 5 个格子不应该交换它们，因为在界面上第 4 个格子不在第 5 个格子的左侧，所以我们使用 <code>index % 4</code> 的方法来进行边界的判断，同时使用 Vue 提供的 <code>$set</code> 方法来将响应属性添加到数组上。</p><h3 id="校验是否过关"><a href="#校验是否过关" class="headerlink" title="校验是否过关"></a>校验是否过关</h3><p>最后我们需要校验游戏是否过关，我们只需要在最后一个格子为空时去进行校验即可：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.puzzles[<span class="hljs-number">15</span>] === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>    const <span class="hljs-keyword">new</span><span class="hljs-type">Puzzles</span> = <span class="hljs-built_in">this</span>.puzzles.slice(<span class="hljs-number">0</span>, <span class="hljs-number">15</span>)<br>    const isPass = <span class="hljs-keyword">new</span><span class="hljs-type">Puzzles</span>.every((e, i) =&gt; e === i + <span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">if</span> (isPass) &#123;<br>        alert (<span class="hljs-string">&#x27;恭喜，闯关成功！&#x27;</span>)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们使用数组的 <code>every</code> 方法来简化代码的复杂度，当所有数字大小和对应的数组下标 + 1 相吻合时即会返回 <code>true</code>。</p><p>如此我们便完成了一个简单拼图游戏的功能。</p><h2 id="盲点及误区"><a href="#盲点及误区" class="headerlink" title="盲点及误区"></a>盲点及误区</h2><p>在实现拼图游戏后，有些同学可能会存在一些疑惑，比如：数组赋值为什么要用 $set 方法？数组随机打乱为什么不用 sort 排序呢？下面便来进行讲解：</p><h3 id="为什么要用-set-方法"><a href="#为什么要用-set-方法" class="headerlink" title="为什么要用 $set 方法"></a>为什么要用 $set 方法</h3><p>大家应该都知道如果不用 <code>$set</code> 方法我们可以直接通过操作数组索引的形式对数组进行赋值，从而交换拼图的中两者的数据：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 设置数组值</span><br><span class="hljs-function"><span class="hljs-title">setPuzzle</span><span class="hljs-params">(index, num)</span></span> &#123;<br>    let curNum = this<span class="hljs-selector-class">.puzzles</span><span class="hljs-selector-attr">[index]</span><br>    <br>    this<span class="hljs-selector-class">.puzzles</span><span class="hljs-selector-attr">[index + num]</span> = curNum<br>    this<span class="hljs-selector-class">.puzzles</span><span class="hljs-selector-attr">[index]</span> = <span class="hljs-string">&#x27;&#x27;</span><br>    <br>    <span class="hljs-comment">// this.$set(this.puzzles, index + num, curNum)</span><br>    <span class="hljs-comment">// this.$set(this.puzzles, index, &#x27;&#x27;)</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>但是你会发现这样做数据是改变了，但是页面并没有因此重新渲染，这是为什么呢？其实 Vue 官方已经给出了明确的答案：</p><blockquote><p>由于 JavaScript 的限制，Vue 不能检测以下变动的数组：</p><ul><li>当你利用索引直接设置一个项时，例如：vm.items[indexOfItem] &#x3D; newValue</li><li>当你修改数组的长度时，例如：vm.items.length &#x3D; newLength</li></ul></blockquote><p>我们这里使用的便是第一种利用索引的方式，由于 Vue 检测不到数组变动，因此页面便无法重绘。同样 Vue 也不能检测对象属性的添加或删除，需要使用 <code>Vue.set(object, key, value)</code> 方法来实现。</p><p>其实还有一种比较取巧的方式便是强制重新渲染 Vue 实例来解决这一问题：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 设置数组值</span><br><span class="hljs-function"><span class="hljs-title">setPuzzle</span><span class="hljs-params">(index, num)</span></span> &#123;<br>    let curNum = this<span class="hljs-selector-class">.puzzles</span><span class="hljs-selector-attr">[index]</span><br>    <br>    this<span class="hljs-selector-class">.puzzles</span><span class="hljs-selector-attr">[index + num]</span> = curNum<br>    this<span class="hljs-selector-class">.puzzles</span><span class="hljs-selector-attr">[index]</span> = <span class="hljs-string">&#x27;&#x27;</span><br>    <br>    this.<span class="hljs-variable">$forceUpdate</span>() <span class="hljs-comment">// 迫使 Vue 实例重新渲染</span><br>    <br>    <span class="hljs-comment">// this.$set(this.puzzles, index + num, curNum)</span><br>    <span class="hljs-comment">// this.$set(this.puzzles, index, &#x27;&#x27;)</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>上方我们使用了 Vue 提供的 <code>$forceUpdate</code> 方法迫使 Vue 实例重新渲染，这样改变的数据就会被更新的页面中去。但是最好不要这样操作，因为这会导致 Vue 重新遍历此对象所有的属性，一定程度上会影响页面的性能。</p><h3 id="为什么不用-sort-排序"><a href="#为什么不用-sort-排序" class="headerlink" title="为什么不用 sort 排序"></a>为什么不用 sort 排序</h3><p>其实 sort 方法也能够实现数组的随机排序，代码如下：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">let puzzleArr = <span class="hljs-built_in">Array</span>.<span class="hljs-keyword">from</span>(&#123; length: <span class="hljs-number">15</span> &#125;, <span class="hljs-function"><span class="hljs-params">(value, index)</span> =&gt;</span> index + <span class="hljs-number">1</span>);<br><br><span class="hljs-regexp">//</span> 随机打乱数组<br>puzzleArr = puzzleArr.sort(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.random() - <span class="hljs-number">0.5</span><br>&#125;);<br><br></code></pre></td></tr></table></figure><p>我们通过使用 <code>Math.random()</code> 的随机数减去 0.5 来返回一个大于、等于或小于 0 的数，sort 方法会根据接收到的值来对相互比较的数据进行升序或是降序排列。</p><p>但是由于 JavaScript 内置排序算法的缺陷性，使用 sort 排序的结果并不随机分布，经过大量的测试你会发现<strong>越大的数字出现在越后面的概率越大</strong>。</p><p>由于本文并非是一篇介绍 sort 排序的文章，关于论证其缺陷性的话题这里就不进行详细展开了，感兴趣的同学可以进一步进行探究。</p><h2 id="结语-11"><a href="#结语-11" class="headerlink" title="结语"></a>结语</h2><p>本文实例是基于我之前写的一篇关于利用 Vue.js 实现拼图游戏的文章上进行了改进和优化，希望通过这样一个小游戏来强化大家对于 Vue 数据驱动的理解。相比操作 DOM 元素，操作数据其实更加的便捷和快速，可以使用较少的代码来实现一些较为复杂的逻辑。</p><p>具体实例代码可以参考：<a href="https://github.com/luozhihao/vue-project-code/blob/ea7294370af888084be41c10c914b4fedbf3f400/ui-framework-project/src/views/demo/puzzle.vue">puzzle</a></p><h2 id="思考-作业-10"><a href="#思考-作业-10" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>Vue 中监听数据变化的原理是什么？是通过何种方式实现的？</p></li><li><p>如何论证原生 JS 中 sort 排序后越大的数字出现在越后面的概率越大？</p></li><li><p>如何使用 <code>Math.random()</code> 生成 n-m，不包含 n 但包含 m 的整数？</p></li></ul><h1 id="开发指南篇-5：Vue-API-盲点解析"><a href="#开发指南篇-5：Vue-API-盲点解析" class="headerlink" title="开发指南篇 5：Vue API 盲点解析"></a>开发指南篇 5：Vue API 盲点解析</h1><p>在了解了一些实用的开发技巧和编码理念后，我们在项目的开发过程中难免也会遇到因为不熟悉 Vue API 而导致的技术问题，而往往就是这样的一些问题消耗了我们大量的开发时间，造成代码可读性下降、功能紊乱甚至 <code>bug</code> 量的增加，其根本原因还是自己对 Vue API 的 “<strong>无知</strong>”。</p><p>本文将介绍 Vue 项目开发中比较难以理解并可能被你忽视的 API，唯有知己知彼，才能百战不殆。</p><h2 id="API-解析"><a href="#API-解析" class="headerlink" title="API 解析"></a>API 解析</h2><h3 id="使用-performance-开启性能追踪"><a href="#使用-performance-开启性能追踪" class="headerlink" title="使用 performance 开启性能追踪"></a>使用 performance 开启性能追踪</h3><p><code>performance API</code> 是 Vue 全局配置 API 中的一个，我们可以使用它来进行网页性能的追踪，我们可以在入口文件中添加：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> (process.env.NODE_ENV !== <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>    Vue.<span class="hljs-built_in">config</span>.performance = <span class="hljs-literal">true</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>来开启这一功能，该 API（2.2.0 新增）功能只适用于开发模式和支持 <code>performance.mark</code> API 的浏览器上，开启后我们可以下载 <a href="https://chrome.google.com/webstore/search/vue%20performance%20devtool">Vue Performance Devtool</a> 这一 chrome 插件来看查看各个组件的加载情况，如图：</p><img src="/2019/08/30/vue/165100a377b1bac9.png" class=""><p>从中我们可以清晰的看到页面组件在每个阶段的耗时情况，而针对耗时比较久的组件，我们便可以对其进行相应优化。</p><p>而其在 Vue 源码中主要使用了 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Performance">window.performance</a> 来获取网页性能数据，其中包含了 <code>performance.mark</code> 和 <code>performance.measure</code>。</p><ul><li>performance.mark 主要用于创建标记</li><li>performance.measure 主要用于记录两个标记的时间间隔</li></ul><p>例如：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby">performance.mark(<span class="hljs-string">&#x27;start&#x27;</span>); <span class="hljs-regexp">//</span> 创建 start 标记<br>performance.mark(<span class="hljs-string">&#x27;end&#x27;</span>); <span class="hljs-regexp">//</span> 创建 <span class="hljs-keyword">end</span> 标记<br><br>performance.measure(<span class="hljs-string">&#x27;output&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>, <span class="hljs-string">&#x27;end&#x27;</span>); <span class="hljs-regexp">//</span> 计算两者时间间隔<br><br>performance.getEntriesByName(<span class="hljs-string">&#x27;output&#x27;</span>); <span class="hljs-regexp">//</span> 获取标记，返回值是一个数组，包含了间隔时间数据<br><br></code></pre></td></tr></table></figure><p>熟练的使用 performance 我们可以查看并分析网页的很多数据，为我们项目优化提供保障。除了上述介绍的两个方法，我们还可以使用 <code>performance.timing</code> 来计算页面各个阶段的加载情况，关于 performance.timing 的介绍可以查看我之前写的一篇文章：<a href="https://www.cnblogs.com/luozhihao/p/4681564.html">利用 Navigation Timing 测量页面加载时间</a></p><h3 id="使用-errorHandler-来捕获异常"><a href="#使用-errorHandler-来捕获异常" class="headerlink" title="使用 errorHandler 来捕获异常"></a>使用 errorHandler 来捕获异常</h3><p>在浏览器异常捕获的方法上，我们熟知的一般有：<code>try ... catch</code> 和 <code>window.onerror</code>，这也是原生 JavaScript 提供给我们处理异常的方式。但是在 Vue 2.x 中如果你一如既往的想使用 window.onerror 来捕获异常，那么其实你是捕获不到的，因为异常信息被框架自身的异常机制捕获了，你可以使用 <code>errorHandler</code> 来进行异常信息的获取：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">errorHandler</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">err, vm, info</span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; <br>        message, <span class="hljs-comment">// 异常信息</span><br>        name, <span class="hljs-comment">// 异常名称</span><br>        stack  <span class="hljs-comment">// 异常堆栈信息</span><br>    &#125; = err;<br><br>    <span class="hljs-comment">// vm 为抛出异常的 Vue 实例</span><br>    <span class="hljs-comment">// info 为 Vue 特定的错误信息，比如错误所在的生命周期钩子</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>在入口文件中加入上述代码后，我们便可以捕获到 Vue 项目中的一些异常信息了，但是需要注意的是 Vue 2.4.0 起的版本才支持捕获 Vue 自定义事件处理函数内部的错误，比如:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">my-component</span> @<span class="hljs-attr">eventFn</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">doSomething</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// a is not defined</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>使用 Vue 中的异常捕获机制，我们可以针对捕获到的数据进行分析和上报，为实现前端异常监控奠定基础。关于对异常捕获的详细介绍，感兴趣的同学可以查看我的这篇文章：<a href="https://www.cnblogs.com/luozhihao/p/8635507.html">谈谈前端异常捕获与上报</a></p><h3 id="使用-nextTick-将回调延迟到下次-DOM-更新循环之后执行"><a href="#使用-nextTick-将回调延迟到下次-DOM-更新循环之后执行" class="headerlink" title="使用 nextTick 将回调延迟到下次 DOM 更新循环之后执行"></a>使用 nextTick 将回调延迟到下次 DOM 更新循环之后执行</h3><p>在某些情况下，我们改变页面中绑定的数据后需要对新视图进行一些操作，而这时候新视图其实还未生成，需要等待 DOM 的更新后才能获取的到，在这种场景下我们便可以使用 nextTick 来延迟回调的执行。比如未使用 <code>nextTick</code> 时的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in arr&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">arr</span>: []</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getData</span>();</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">box</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;hello&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>上方代码我们在实际运行的时候肯定会报错，因为我们获取 DOM 元素 li 的时候其还未被渲染，我们将方法放入 nextTick 回调中即可解决该问题：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-built_in">this</span>.<span class="hljs-variable">$nextTick</span>(() =&gt; &#123;<br>    <span class="hljs-built_in">this</span>.<span class="hljs-variable">$refs</span>.box.getElementsByTagName(<span class="hljs-string">&#x27;li&#x27;</span>)[<span class="hljs-number">0</span>].innerHTML = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>当然你也可以使用 ES6 的 <code>async/await</code> 语法来改写上述方法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp">methods: &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">async</span> <span class="hljs-title">getData</span>()</span> &#123;<br>        <span class="hljs-keyword">this</span>.arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>        <br>        <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.$nextTick();<br>        <br>        <span class="hljs-keyword">this</span>.$refs.box.getElementsByTagName(<span class="hljs-string">&#x27;li&#x27;</span>)[<span class="hljs-number">0</span>].innerHTML = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>那么接下来我们来分析下 Vue 是如何做到的，其源码中使用了 3 种方式：</p><ul><li>promise.then 延迟调用</li><li>setTimeout(func, 0) 延迟功能</li><li>MutationObserver 监听变化</li></ul><p>前两种方式相信大家都比较熟悉，其都具备延迟执行的功能，我们也可以直接替换 nextTick 为这两种方式中的一种，同样可以解决问题。这里主要介绍下 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver">MutationObserver</a> 这一 HTML5 新特性，那么什么是 <code>MutationObserver</code> 呢？用一句话介绍就是：我们可以使用它创建一个观察者对象，其会监听某个 DOM 元素，并在它的 DOM 树发生变化时执行我们提供的回调函数。实例化代码及配置如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 传入回调函数进行实例化</span><br><span class="hljs-keyword">var</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function"><span class="hljs-params">mutations</span> =&gt;</span> &#123;<br>    mutations.forEach(<span class="hljs-function"><span class="hljs-params">mutation</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(mutation.type);<br>    &#125;)<br>&#125;);<br><br><span class="hljs-comment">// 选择目标节点</span><br><span class="hljs-keyword">var</span> target = document.querySelector(<span class="hljs-string">&#x27;#box&#x27;</span>);<br> <br><span class="hljs-comment">// 配置观察选项</span><br><span class="hljs-keyword">var</span> config = &#123; <br>    <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否观察属性的变动</span><br>    childList: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否观察子节点的变动（指新增，删除或者更改）</span><br>    characterData: <span class="hljs-literal">true</span> <span class="hljs-comment">// 是否观察节点内容或节点文本的变动</span><br>&#125;;<br> <br><span class="hljs-comment">// 传入目标节点和观察选项</span><br>observer.observe(target, config);<br> <br><span class="hljs-comment">// 停止观察</span><br>observer.disconnect();<br><br></code></pre></td></tr></table></figure><p>这样我们便可以观察 id 为 box 下的 DOM 树变化，一旦发生变化就会触发相应的回调方法，实现延迟调用的功能。</p><h3 id="使用-watch-的深度遍历和立即调用功能"><a href="#使用-watch-的深度遍历和立即调用功能" class="headerlink" title="使用 watch 的深度遍历和立即调用功能"></a>使用 watch 的深度遍历和立即调用功能</h3><p>相信很多同学使用 <code>watch</code> 来监听数据变化的时候通常只使用过其中的 <code>handler</code> 回调，其实其还有两个参数，便是：</p><ul><li>deep 设置为 true 用于监听对象内部值的变化</li><li>immediate 设置为 true 将立即以表达式的当前值触发回调</li></ul><p>我们来看下代码中的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;obj.a = 2&quot;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">obj</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">obj</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">handler</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">newVal, oldVal</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newVal); </span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>以上代码我们修改了 obj 对象中 a 属性的值，我们可以触发其 watch 中的 handler 回调输出新的对象，而如果不加 <code>deep: true</code>，我们只能监听 obj 的改变，并不会触发回调。同时我们也添加了 <code>immediate: true</code> 配置，其会立即以 obj 的当前值触发回调。</p><p>在 Vue 源码中，主要使用了 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty (obj, key, option)</a> 方法来实现数据的监听，同时其也是 Vue 数据双向绑定的关键方法之一。示例代码如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Observer</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> result = <span class="hljs-literal">null</span>;<br>    <br>    Object.defineProperty(this, <span class="hljs-string">&#x27;result&#x27;</span>, &#123;<br>        <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;你访问了 result&#x27;</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;,<br>        <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;<br>            result = value;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;你设置了 result = &#x27;</span> + value);<br>        &#125;<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Observer(); <span class="hljs-comment">// 实例化</span><br><br>app.result; <span class="hljs-comment">// 你访问了 result</span><br>app.result = <span class="hljs-number">11</span>; <span class="hljs-comment">// 你设置了 result = 11</span><br><br></code></pre></td></tr></table></figure><p>我们通过实例化了 <code>Observer</code> 方法来实现了一个简单的监听数据访问与变化的功能。<code>Object.defineProperty</code> 是 ES5 的语法，这也就是为什么 Vue 不支持 IE8 以及更低版本浏览器的主要原因。</p><h3 id="对低开销的静态组件使用-v-once"><a href="#对低开销的静态组件使用-v-once" class="headerlink" title="对低开销的静态组件使用 v-once"></a>对低开销的静态组件使用 v-once</h3><p>Vue 提供了 <code>v-once</code> 指令用于只渲染元素和组件一次，一般可以用于存在大量静态数据组件的更新性能优化，注意是大量静态数据，因为少数情况下我们的页面渲染会因为一些静态数据而变慢。如果你需要对一个组件使用 v-once，可以直接在组件上绑定：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;my-component v-once <span class="hljs-symbol">:data=<span class="hljs-string">&quot;msg&quot;</span>&gt;&lt;/my-component&gt;</span><br><br></code></pre></td></tr></table></figure><p>这时候因为组件绑定了 v-once，所以无论 msg 的值如何变化，组件内渲染的永远是其第一次获取到的初始值。因此我们在使用 v-once 的时候需要考虑该组件今后的更新情况，避免不必要的问题产生。</p><h3 id="使用-isServer-判断当前实例是否运行于服务器"><a href="#使用-isServer-判断当前实例是否运行于服务器" class="headerlink" title="使用 $isServer 判断当前实例是否运行于服务器"></a>使用 $isServer 判断当前实例是否运行于服务器</h3><p>当我们的 Vue 项目中存在服务端渲染（SSR）的时候，有些项目文件可能会同时在客户端和服务端加载，这时候代码中的一些客户端浏览器才支持的属性或变量在服务端便会加载出错，比如 window、 document 等，这时候我们需要进行环境的判断来区分客户端和服务端，如果你不知道 <code>$isServer</code>，那么你可能会使用 <code>try ... catch</code> 或者 <code>process.env.VUE_ENV</code> 来判断：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">document</span>.title = <span class="hljs-string">&#x27;test&#x27;</span>;<br>&#125; <span class="hljs-keyword">catch</span>(e) &#123;&#125;<br><br><span class="hljs-comment">// process.env.VUE_ENV 需要在 webpack 中进行配置</span><br><span class="hljs-keyword">if</span> (process.env.VUE_ENV === <span class="hljs-string">&#x27;client&#x27;</span>) &#123;<br>    <span class="hljs-built_in">document</span>.title = <span class="hljs-string">&#x27;test&#x27;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>而使用 $isServer 则无需进行配置，在组件中直接使用该 API 即可：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.$isServer) &#123;<br>    <span class="hljs-built_in">document</span>.title = <span class="hljs-string">&#x27;test&#x27;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>其源码中使用了 <code>Object.defineProperty</code> 来进行数据监测：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&#x27;$isServer&#x27;</span>, &#123;<br>    <span class="hljs-attr">get</span>: isServerRendering<br>&#125;);<br><br><span class="hljs-keyword">var</span> _isServer;<br><span class="hljs-keyword">var</span> isServerRendering = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (_isServer === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!inBrowser &amp;&amp; !inWeex &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">global</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>            _isServer = <span class="hljs-variable language_">global</span>[<span class="hljs-string">&#x27;process&#x27;</span>].<span class="hljs-property">env</span>.<span class="hljs-property">VUE_ENV</span> === <span class="hljs-string">&#x27;server&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            _isServer = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> _isServer<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>当我们访问 $isServer 属性时，其会调用 <code>isServerRendering</code> 方法，该方法会首先判断当前环境，如果在浏览器或者 Weex 下则返回 false，否则继续判断当前全局环境下的 <code>process.env.VUE_ENV</code> 是否为 server 来返回最终结果。</p><h2 id="结语-12"><a href="#结语-12" class="headerlink" title="结语"></a>结语</h2><p>每一门语言、一个框架都有其 API 文档，在 Vue 的项目开发过程中，很多时候当你一筹莫展之际，你可以尝试浏览一下 Vue 的 API 列表，或许你就会柳暗花明。</p><h2 id="思考-作业-11"><a href="#思考-作业-11" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>使用 watch 监听某一值时，同时修改该值两次会触发几次 watch 回调？</p></li><li><p>使用 <code>errorHandler</code> 捕获异常堆栈后如何解析 <code>source-map</code> 信息？</p></li><li><p>除了本文介绍的 Vue 盲点外，还有哪些需要注意并容易忽略的 API？</p></li></ul><h1 id="开发拓展篇-1：扩充你的开发工具"><a href="#开发拓展篇-1：扩充你的开发工具" class="headerlink" title="开发拓展篇 1：扩充你的开发工具"></a>开发拓展篇 1：扩充你的开发工具</h1><p>在项目开发中，工具的使用起到了至关重要的作用，正所谓工欲善其事，必先利其器，掌握一些实用的开发工具能够使我们的开发效率事半功倍。</p><p>那么我们应该掌握哪些开发工具的使用方法呢？其实一路走来，我们已经介绍的开发工具包括了 <code>npm</code>、<code>yarn</code>、<code>webpack</code> 以及一些集成在项目中的工具包，这些工具一定程度上都大大简化了我们的开发流程，起到了项目助推剂的作用。因此在开发工具的学习上我们应该抱着宜多不宜少的心态，积极主动的扩充自己的工具库。</p><h2 id="巧用-Chrome-插件"><a href="#巧用-Chrome-插件" class="headerlink" title="巧用 Chrome 插件"></a>巧用 Chrome 插件</h2><p>首先，既然说到工具，那我们不得不介绍下占据浏览器市场份额霸主地位的 <code>Chrome</code> 了。相信每一个从事前端开发的同学都对其寄存着一种亲切感，因为只要是参与 web 项目的开发就基本上离不开它的关照，比如它提供的调试控制台以及数以万计的插件等。</p><p>而作为一名前端开发人员，我想你的 Chrome 浏览器地址栏右侧肯定排列着几款你钟爱的插件，使用的插件数量越多说明了你掌握的 Chrome 技能越多，同时一定程度上也凸显了你的开发能力。</p><p>那么接下来我们不妨来认识一下几款实用的 Chrome 插件：</p><h3 id="Vue-js-devtools"><a href="#Vue-js-devtools" class="headerlink" title="Vue.js devtools"></a>Vue.js devtools</h3><p>首先介绍的肯定是 <a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN">Vue.js devtools</a>，它是 Vue 官方发布的一款调试 Vue 项目的插件，支持数据模拟与调试。相信从事过 Vue 项目开发的同学都已经把它收入在自己的工具库中了，它的界面如下：</p><img src="/2019/08/30/vue/1655c88fb776ea32.png" class=""><p>成功安装它之后，在 Vue 项目的页面中我们可以打开 Chrome 控制台选择 Vue 的 tab 进行页面调试。</p><h3 id="Vue-Performance-Devtool"><a href="#Vue-Performance-Devtool" class="headerlink" title="Vue Performance Devtool"></a>Vue Performance Devtool</h3><p>在《Vue API 盲点解析》章节我们已经介绍了 <a href="https://chrome.google.com/webstore/detail/vue-performance-devtool/koljilikekcjfeecjefimopfffhkjbne">Vue Performance Devtool</a> 这款插件，它可以分析我们页面中各个组件的性能情况，从而在其基础上我们可以有针对性的对组件的代码进行优化，如下图所示：</p><img src="/2019/08/30/vue/1655c94f6dc46001.png" class=""><p>同样安装完毕后，我们可以打开 Chrome 控制台选择 <code>Vue Performance</code> 的 tab 进行组件的性能观察。</p><h3 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h3><p><a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en">Postman</a> 相信大家都比较熟悉，它是一款非常好用的接口调试工具。在 Vue 项目开发中，我们或多或少需要对后台提供的接口进行测试，比如传递数据并查看返回结果等，这时候使用 Postman 便可以完成这些任务。</p><img src="/2019/08/30/vue/1655cfc5e3d6690d.png" class=""><p>Postman 会当作 Chrome 应用程序安装到你的电脑上，打开后我们可以选择请求方式（GET／POST），输入请求 URL 以及设置传递参数来进行接口的调用。</p><h3 id="Web-Developer"><a href="#Web-Developer" class="headerlink" title="Web Developer"></a>Web Developer</h3><p><a href="https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm">Web Developer</a> 是一款强大的用于操作网页中各项资源与浏览器的插件，比如一键禁用 JS、编辑 CSS、清除 Cookie 等。</p><img src="/2019/08/30/vue/1655cc3216d01a59.png" class=""><p>虽然说一些功能我们也可以在 Chrome 控制台实现，但其提供的快捷键能够十分方便的让我们在页面中操作某些资源。</p><h3 id="Google-PageSpeed-Insights-API-Extension"><a href="#Google-PageSpeed-Insights-API-Extension" class="headerlink" title="Google PageSpeed Insights API Extension"></a>Google PageSpeed Insights API Extension</h3><p>PageSpeed Insights (PSI) 是 <code>Google</code> 在全球范围内应用最广的开发者工具之一，其中文网页版 <a href="developers.google.cn/speed/pagespeed/insights/">developers.google.cn&#x2F;speed&#x2F;pagespeed&#x2F;insights&#x2F;</a> 也已经发布。作为一款专注于改进网页性能的开发者工具，它主要具有以下两个优势：<strong>真实的网页运行速度</strong> 及 <strong>优化建议</strong>。</p><img src="/2019/08/30/vue/1655d1231520ea25.png" class=""><p>为了便于使用，我们可以直接下载 Chrome 插件 <a href="https://chrome.google.com/webstore/detail/google-pagespeed-insights/hfebkooaidmeboeblkkejdoepilnnjhn">Google PageSpeed Insights API Extension</a> 来对当前访问网址进行测试和分析。</p><h3 id="FeHelper"><a href="#FeHelper" class="headerlink" title="FeHelper"></a>FeHelper</h3><p>FeHelper 是百度 FE 团队开发的一款前端工具集插件，包含代码压缩／性能检测／字符串编解码等功能，能够帮助我们完成一些琐碎的开发任务。</p><img src="/2019/08/30/vue/1655d245e1bd2730.png" class=""><p>FeHelper 为我们提供了十多种快捷功能，在需要的时候我们直接点击插件图标选择对应功能即可，操作起来十分便捷。</p><h3 id="Can-I-Use"><a href="#Can-I-Use" class="headerlink" title="Can I Use"></a>Can I Use</h3><p><a href="https://chrome.google.com/webstore/detail/can-i-use/decehbilpgknnlnkbgkcggjbgjbphljb">Can I Use</a> 是 <a href="https://caniuse.com/">https://caniuse.com/</a> 网页版的插件。我们可以使用其来查看某一特性的浏览器支持程度，确保主流浏览器的支持。</p><p>1655d38dca6e9973.png)</p><p>使用 Chrome 插件形式的 Can I Use 我们可以快捷的查看项目中用到的某一特性的浏览器支持范围，同时还可以查看支持程度和兼容方式。</p><h3 id="其他实用插件"><a href="#其他实用插件" class="headerlink" title="其他实用插件"></a>其他实用插件</h3><ul><li><a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc">JSONView</a> ：一款可以将后台返回的 JSON 字符串数据自动格式化成规范 JSON 格式的插件</li><li><a href="https://chrome.google.com/webstore/detail/whatfont/jabopobgcpjmedljpbcaablpmlmfcogm">WhatFont</a>：一款可以显示浏览器中选择文字的字体类型／字号／颜色的插件</li><li><a href="https://chrome.google.com/webstore/detail/the-qr-code-extension/oijdcdmnjjgnnhgljmhkjlablaejfeeb">The QR Code Extension</a>：一款允许当前页面生成二维码，并使用网络摄像头扫描二维码的插件</li><li><a href="https://chrome.google.com/webstore/detail/test-ie/eldlkpeoddgbmpjlnpfblfpgodnojfjl?hl=zh-CN">Test IE</a>：一款可以模拟 <code>IE</code> 及其他主流浏览器的插件，但大部分模拟场景需要付费才能使用</li><li><a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg">Wappalyzer</a>：一款查看当前网站使用的前后端技术的插件，帮助你学习和认识优秀网站的技术选型</li><li><a href="https://chrome.google.com/webstore/detail/mobileresponsive-web-desi/elmekokodcohlommfikpmojheggnbelo">Mobile&#x2F;Responsive Web Design Tester</a>：一款用于测试页面在不同机型下呈现的插件</li><li><a href="https://chrome.google.com/webstore/detail/resolution-test/idhfcdbheobinplaamokffboaccidbal">Resolution Test</a>：一款用于测试页面在不同分辨率下呈现的插件</li></ul><p>以上我们介绍了一些非常实用的 chrome 拓展插件来助力我们的前端开发，为项目开发提供了工具解决方案，同时也有助于帮助大家开启以工具为向导的开发模式。</p><h2 id="分析你的包文件"><a href="#分析你的包文件" class="headerlink" title="分析你的包文件"></a>分析你的包文件</h2><p>每当我们使用 webpack 打包项目代码的时候，你可能需要关注一下打包生成的每个 js 文件的大小以及其包含的内容，这对于优化项目打包速度和提升页面加载性能都有十分大的帮助。</p><p>这里我们推荐使用 <a href="https://www.npmjs.com/package/webpack-bundle-analyzer">webpack-bundle-analyzer</a> 这一款 webpack 插件来进行包文件的分析，下面我们就来介绍下其配置和使用方法。</p><p>首先作为一款需要内置在代码中的开发分析工具，我们需要安装并在 webpack 的 plugins 中添加该插件：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#  安装命令</span><br>yarn <span class="hljs-built_in">add</span> webpack-bundle-analyzer <span class="hljs-comment">--dev</span><br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* vue.config.js */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">BundleAnalyzerPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-bundle-analyzer&#x27;</span>).<span class="hljs-property">BundleAnalyzerPlugin</span><br><br><span class="hljs-keyword">const</span> isPro = process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <br>    ... <br>    <br>    <span class="hljs-attr">configureWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (isPro) &#123;<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">plugins</span>: [<br>                <br>                    <span class="hljs-comment">// 使用包分析工具</span><br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">BundleAnalyzerPlugin</span>()<br>                ]<br>            &#125;<br>        &#125;<br>    &#125;,<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样我们在生产环境下打包便可以在浏览器 8888 端口（默认）下打开页面进行包文件的分析，如下图所示：</p><img src="/2019/08/30/vue/16561c54b9091a30.png" class=""><p>图中区域内包含了我们打包出的所有 js 文件，我们可以以不同的颜色进行区分，同时我们也可以点击某一区块进行放大观察，以此来分析是否存在较大或重复的模块。而在页面左侧存在一个筛选面板，在该面板中我们能勾选需要查看的文件来进行显示，同时也可以切换查看原始、普通及 <code>GZIP</code> 压缩模式下的文件大小。</p><p>使用好 webpack-bundle-analyzer 工具我们可以快速的找到需要合并的模块，解决文件冗余，为资源优化提供可行性方案。</p><h2 id="调试移动端页面"><a href="#调试移动端页面" class="headerlink" title="调试移动端页面"></a>调试移动端页面</h2><p>除了 Chrome 插件及打包分析工具的介绍外，我们再来了解下移动端页面的调试工具。相比 PC 端调试，移动端调试可能稍微复杂一点，但是只要熟练的使用好 “工具” 这一东西，我们同样可以在移动端的世界中游刃有余。</p><p>作为一名 <code>Mac</code> 及 <code>iOS</code> 用户，这里我主要介绍在 <code>iPhone</code> 手机中调试页面的方法，当然最后也会简单介绍一下 <code>Android</code> 手机页面的调试方法。</p><p>首先我们得具备这些工具：iPhone 手机一部、数据线一条、Mac 电脑一台。在满足以上要求后我们需要把手机通过数据线连接上 Mac 电脑，连接完毕后便可以进行如下步骤的设置：</p><h4 id="1-打开苹果手机的-Web-检查器-（设置-Safari浏览器-高级-Web检查器），一般情况下默认是开启的"><a href="#1-打开苹果手机的-Web-检查器-（设置-Safari浏览器-高级-Web检查器），一般情况下默认是开启的" class="headerlink" title="1. 打开苹果手机的 Web 检查器 （设置 &gt; Safari浏览器 &gt; 高级 &gt; Web检查器），一般情况下默认是开启的"></a>1. 打开苹果手机的 <code>Web 检查器</code> （设置 &gt; Safari浏览器 &gt; 高级 &gt; Web检查器），一般情况下默认是开启的</h4><h4 id="2-打开-Mac-上的-Safari-的-“开发”菜单，一般情况下默认是开启的"><a href="#2-打开-Mac-上的-Safari-的-“开发”菜单，一般情况下默认是开启的" class="headerlink" title="2. 打开 Mac 上的 Safari 的 “开发”菜单，一般情况下默认是开启的"></a>2. 打开 Mac 上的 <code>Safari</code> 的 <code>“开发”菜单</code>，一般情况下默认是开启的</h4> <img src="/2019/08/30/vue/1656272c36a04d93.png" class=""><h4 id="3-在手机-Safari-浏览器中打开你需要调试的页面"><a href="#3-在手机-Safari-浏览器中打开你需要调试的页面" class="headerlink" title="3. 在手机 Safari 浏览器中打开你需要调试的页面"></a>3. 在手机 Safari 浏览器中打开你需要调试的页面</h4><h4 id="4-在-Mac-Safari-浏览器中选择你需要调试的页面（开发-你的-iPhone-你的页面地址）"><a href="#4-在-Mac-Safari-浏览器中选择你需要调试的页面（开发-你的-iPhone-你的页面地址）" class="headerlink" title="4. 在 Mac Safari 浏览器中选择你需要调试的页面（开发 &gt; 你的 iPhone &gt; 你的页面地址）"></a>4. 在 Mac Safari 浏览器中选择你需要调试的页面（开发 &gt; 你的 iPhone &gt; 你的页面地址）</h4><h4 id="5-点击地址后弹出如图所示的控制台，你便可以在该控制台中进行调试了"><a href="#5-点击地址后弹出如图所示的控制台，你便可以在该控制台中进行调试了" class="headerlink" title="5. 点击地址后弹出如图所示的控制台，你便可以在该控制台中进行调试了"></a>5. 点击地址后弹出如图所示的控制台，你便可以在该控制台中进行调试了</h4><img src="/2019/08/30/vue/165627afd786c2d0.png" class=""><p>最后你可以针对你的移动端页面进行断点调试、操作缓存、查看网络及资源等，帮助你快速的定位和解决问题。</p><p>而在 Android 手机中，我们同样可以对移动端页面进行调试，主要不同点在于 IOS 使用的工具是 iPhone 和 Mac，Android 使用的工具主要是 Android 手机和 Windows 系统罢了（Mac 也可以使用模拟器），当然还需要借助 Chrome 的帮助。</p><p>这里主要介绍一下 Chrome 中的 <code>inspect</code>，我们可以在 Chrome 地址栏输入：<code>chrome://inspect/</code> 来捕获手机访问的页面地址，前提是你的 Android 手机通过数据线连接上了电脑并开启了相应权限，最后获取到的地址会在 <code>Remote Target</code> 中显示：</p><img src="/2019/08/30/vue/165628f25bf53e10.png" class=""><p>点击相应的地址会弹出一个控制台，你可以在该控制台中进行页面的调试。</p><h2 id="结语-13"><a href="#结语-13" class="headerlink" title="结语"></a>结语</h2><p>本文介绍了 Vue 项目开发时常用的 Chrome 插件、包分析工具以及移动端调试工具，这些开发工具的使用能够帮助我们快速的定位项目中出现的一些疑难杂症，而唯有 “用正确的工具，做正确的事情” 才能有效的彰显工具对于项目开发和维护的重要性，使我们的工具库能够发挥它真正的价值。</p><h2 id="思考-作业-12"><a href="#思考-作业-12" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p><code>webpack-bundle-analyzer</code> 有哪些配置项？分别有什么作用？</p></li><li><p>除了本文介绍的开发工具外，还有哪些比较实用的开发工具？</p></li></ul><h1 id="开发拓展篇-2：将-UI-界面交给第三方库"><a href="#开发拓展篇-2：将-UI-界面交给第三方库" class="headerlink" title="开发拓展篇 2：将 UI 界面交给第三方库"></a>开发拓展篇 2：将 UI 界面交给第三方库</h1><p>当你了解了 Vue 项目构建和开发的基本知识后，我认为接下来你一定想亲自在构建出的项目中填充自己的业务和功能逻辑，因为目前其还是空白的。</p><p>但是这里我不会教你如何实现一个具体的业务和功能模块，因为每个人想要实现的东西都可能不尽相同。如果你想快速开发一款应用，并且不想过多的操心页面 <code>UI</code> 层次的内容，比如你不想去实现一个下拉 UI 组件或设计一个 <code>icon</code> 图标，那么我想你有必要了解下 UI 库及图标库的应用。</p><h2 id="UI-库"><a href="#UI-库" class="headerlink" title="UI 库"></a>UI 库</h2><p>UI 库是脱离 JS 框架外的一种 “工具”，相比 JS 框架可以帮助你实现各种业务逻辑，其更关注于页面 UI 层面的实现，比如提供和业务无关的弹窗、导航、表单组件等，为项目 UI 层面的功能提供解决方案，比如 <a href="https://jqueryui.com/">jQuery UI</a>。</p><p>而由于本小册介绍的 JS 框架是 Vue，所以在 Vue 项目中我们需要使用基于 Vue 开发的 UI 库。本文将以比较流行的 <a href="https://doc.vux.li/zh-CN/">Vux</a> 为例，其目前 github star 数已在 14 k 左右。</p><blockquote><p>Vux 是一款是基于 <a href="https://weui.io/">WeUI</a> 和 <code>Vue(2.x)</code> 开发的移动端 UI 组件库，主要服务于微信页面。</p></blockquote><h3 id="Vux-的安装和配置"><a href="#Vux-的安装和配置" class="headerlink" title="Vux 的安装和配置"></a>Vux 的安装和配置</h3><p>那么我们如何在项目中使用 Vux 呢？首先我们先要进行安装：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">yarn <span class="hljs-built_in">add</span> vux <br><br><span class="hljs-comment"># 或者</span><br>npm install vux <span class="hljs-comment">--save</span><br><br></code></pre></td></tr></table></figure><p>同时我们还需要安装 <a href="https://doc.vux.li/zh-CN/vux-loader/about.html">vux-loader</a>：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">yarn <span class="hljs-built_in">add</span> vux-loader <span class="hljs-comment">--dev</span><br><br><span class="hljs-comment"># 或者</span><br>npm install vux-loader <span class="hljs-comment">--save-dev</span><br><br></code></pre></td></tr></table></figure><p>安装完成后，我们需要在项目中进行配置，而由于目前 Vux 官网的配置教程未对 Vue CLI 3.x 作出说明，我们先来看下其目前的介绍：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* build/webpack.base.conf.js */</span><br><span class="hljs-type">const</span> <span class="hljs-variable">vuxLoader</span> <span class="hljs-operator">=</span> require(<span class="hljs-string">&#x27;vux-loader&#x27;</span>)<br><span class="hljs-type">const</span> <span class="hljs-variable">webpackConfig</span> <span class="hljs-operator">=</span> originalConfig <span class="hljs-comment">// 原来的 module.exports 代码赋值给变量 webpackConfig</span><br><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = vuxLoader.merge(webpackConfig, &#123;<br>    plugins: [<span class="hljs-string">&#x27;vux-ui&#x27;</span>]<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>官方目前的配置是在 Vue CLI 2.x 的 <code>build/webpack.base.conf.js</code> 文件中进行修改，merge <code>vux-loader</code> 的配置项。那么在 Vue CLI 3.x 中其实原理是一样的，不一样的地方在于我们无法直接修改 webpack 配置文件，而需要通过 vue.config.js 中的 <code>configureWebpack</code> 配置项来进行修改罢了。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* vue.config.js */</span><br><span class="hljs-keyword">const</span> vuxLoader = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vux-loader&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    ...<br>    <br>    <span class="hljs-attr">configureWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        vuxLoader.<span class="hljs-title function_">merge</span>(config, &#123;<br>            <span class="hljs-attr">plugins</span>: [<span class="hljs-string">&#x27;vux-ui&#x27;</span>]<br>        &#125;)<br>    &#125;,<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>configureWebpack 配置中提供的 <code>config</code> 参数便是 webpack 的配置内容，也可以看作是官方文档中提到的原来在 <code>webpack.base.conf.js</code> 中的 <code>module.exports</code> 代码。</p><h3 id="Vux-的使用"><a href="#Vux-的使用" class="headerlink" title="Vux 的使用"></a>Vux 的使用</h3><p>当我们配置好 Vux 后，我们便可以在项目中使用了。Vux 为我们提供了很多项目中常用的组件和工具函数等，比如我们在全局父组件 App.vue 中添加一个底部导航：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!-- App.vue --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">tabbar</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">tabbar-item</span> <span class="hljs-attr">:link</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;name: &#x27;demo&#x27;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>Demo<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">tabbar-item</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">tabbar-item</span> <span class="hljs-attr">:link</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;name: &#x27;laboratory&#x27;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>实验室<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">tabbar-item</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">tabbar-item</span> <span class="hljs-attr">:link</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;name: &#x27;about&#x27;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">tabbar-item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">tabbar</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; Tabbar, TabbarItem &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vux&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    components: &#123;</span><br><span class="hljs-template-variable">        Tabbar,</span><br><span class="hljs-template-variable">        TabbarItem,</span><br><span class="hljs-template-variable">    &#125;</span><span class="language-xml"></span><br><span class="language-xml">&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;~vux/src/styles/reset.less&#x27;</span>;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>我们通过引入组件的方式将导航组 <code>Tabbar</code>、<code>TabbarItem</code> 件引入并注册到页面中，这样通过 Vux 文档中的介绍我们便可以对相应组件进行配置。呈现效果如下：</p> <img src="/2019/08/30/vue/165bd384922ca66c.png" class=""><p>需要注意的是我们需要在 App.vue 中引入 Vux 的 <code>reset</code> 样式 less 文件以解决样式呈现不统一的问题。关于其他 Vux 组件的配置可以参考官方文档：<a href="https://doc.vux.li/zh-CN/components/actionsheet.html">组件</a></p><h3 id="其他-UI-库（框架）"><a href="#其他-UI-库（框架）" class="headerlink" title="其他 UI 库（框架）"></a>其他 UI 库（框架）</h3><p>除了上方介绍的 Vux 外，类似的 Vue 的第三方 UI 库还有很多，这里我列举几个比较常用的：</p><ul><li><a href="https://www.iviewui.com/">iview</a>：一套基于 Vue.js 的高质量 UI 组件库（PC端）</li><li><a href="https://github.com/iview/iview-admin">iView Admin</a>：搭配使用iView UI组件库形成的一套后台集成解决方案（PC端）</li><li><a href="http://element-cn.eleme.io/#/zh-CN">Element</a>：一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库（PC端）</li><li><a href="http://okoala.github.io/vue-antd/#!/docs/introduce">Vue Antd</a>：Ant Design 的 Vue 实现，开发和服务于企业级后台产品（PC端）</li><li><a href="http://yuche.github.io/vue-strap/">VueStrap</a>：一款 Bootstrap 风格的 Vue UI 库（PC端）</li><li><a href="http://mint-ui.github.io/#!/zh-cn">Mint UI</a>：由饿了么前端开发的基于 Vue.js 的移动端组件库（移动端）</li><li><a href="https://wangdahoo.github.io/vonic-documents/#/?id=vonic">Vonic</a>：一个基于 vue.js 和 ionic 样式的 UI 框架，用于快速构建移动端单页应用（移动端）</li><li><a href="https://youzan.github.io/vant/#/zh-CN/intro">Vant</a>：轻量、可靠的移动端 Vue 组件库（移动端）</li><li><a href="https://didi.github.io/cube-ui/#/zh-CN/docs/introduction">Cube UI</a>：基于 Vue.js 实现的精致移动端组件库（移动端）</li></ul><h2 id="图标库"><a href="#图标库" class="headerlink" title="图标库"></a>图标库</h2><p>了解完 UI 库，我们再来了解下图标库。图标库，顾名思义就是汇聚了大量图标的仓库，在这样的仓库中我们可以查找并下载我们想要的图标，甚至还可以制定颜色和大小。</p><p>在项目中使用图标库可以为我们的项目制定统一的图标管理标准，同时一定程度上也可以减少项目图片的数量。下面我们便来介绍下目前最流行的一款图标库 <a href="http://www.iconfont.cn/">Iconfont</a>。</p><h3 id="使用-Iconfont-下载管理图标"><a href="#使用-Iconfont-下载管理图标" class="headerlink" title="使用 Iconfont 下载管理图标"></a>使用 Iconfont 下载管理图标</h3><blockquote><p><code>Iconfont</code> 是阿里妈妈 <code>MUX</code> 倾力打造的矢量图标管理、交流平台。 设计师将图标上传到 Iconfont 平台，用户可以自定义下载多种格式的 icon，平台也可将图标转换为字体，便于前端工程师自由调整与调用。</p></blockquote><img src="/2019/08/30/vue/165be177f5aae7ae.png" class=""><p>在 Iconfont 首页，我们可以点击图标库来进行图标的搜索。这里我们可以点击官方图标库后选择 Ant Design 官方图标库进入。</p><img src="/2019/08/30/vue/165be30ebede83c8.png" class=""><p>进入对应的图标库后，我们可以选择对应的图标加入购物车，同时购物车会更新添加后的图标数量。</p><img src="/2019/08/30/vue/165be34e414e5849.png" class=""><p>选择完成后，为了使图标便于今后管理，我们可以新建一个项目并将图标移入项目中。在项目中，我们便可以进行图标的添加、删除和下载等操作（需要登录）。</p><img src="/2019/08/30/vue/165be3a4e7cf82e4.png" class=""><p>这里我们采用将图标下载到本地的方式进行使用，当然你也可以使用在线链接，但这会受到网络的影响。</p><h3 id="Iconfont-的使用"><a href="#Iconfont-的使用" class="headerlink" title="Iconfont 的使用"></a>Iconfont 的使用</h3><p>下载到本地后，我们需要将文件夹中的 <code>iconfont.css</code>、<code>iconfont.eot</code>、<code>iconfont.svg</code>、<code>iconfont.ttf</code> 和 <code>iconfont.woff</code> 文件统一放到项目中去，比如我们可以放入新建的 assets 文件夹的 iconfont 中去。而 iconfont.css 便是管理这样图标字体的样式文件，我们可以将其引入到入口文件中：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">/* main.js */</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./assets/iconfont/iconfont.css&#x27;</span><br><br></code></pre></td></tr></table></figure><p>引入后我们便可以在项目中通过给 html 标签添加样式名称的方式来进行图标的使用，比如我们在上方 Vux 的导航上添加图标：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!-- App.vue --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">tabbar</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">tabbar-item</span> <span class="hljs-attr">:link</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;name: &#x27;demo&#x27;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-bulb&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>Demo<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">tabbar-item</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">tabbar-item</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-experiment&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>实验室<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">tabbar-item</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">tabbar-item</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-deploymentunit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">tabbar-item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">tabbar</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>按照 Vux 导航文档添加名称为 <code>icon</code> 的 <code>solt</code> 插槽后，我们还需要在标签上添加对应图标的 class 名称，比如 <code>iconfont icon-bulb</code>，最终我们的展示效果如图所示：</p> <img src="/2019/08/30/vue/165be50abd042347.png" class=""><h3 id="其他图标库"><a href="#其他图标库" class="headerlink" title="其他图标库"></a>其他图标库</h3><p>除了 Iconfont，常用的图标库还有：</p><ul><li><a href="https://fontawesome.com/">Font Awesome</a>：世界上最受欢迎且最易于使用的图标集</li><li><a href="https://ionicons.com/">Ionicons</a> ：精美的开源图标库，可以用于Web，iOS，Android和桌面应用程序</li><li><a href="https://themify.me/themify-icons">Themify</a>：一套用于网页设计和应用程序的完整图标</li></ul><p>相信以上这些图标库就足以使你应付所有项目了。</p><h2 id="结语-14"><a href="#结语-14" class="headerlink" title="结语"></a>结语</h2><p>本文介绍了 Vue 项目开发中可能会使用到的 UI 库与图标库的应用，以 Vux 和 Iconfont 为例讲解了它们在项目中的使用方法和注意事项，相信大家能够在项目构建和开发的基础上使用 UI 库与图标库快速实现自己的项目 UI 层面的功能和展示，为自己的项目添砖加瓦。</p><p>具体实例代码可以参考：<a href="https://github.com/luozhihao/vue-project-code/tree/master/ui-framework-project">ui-framework-project</a></p><h2 id="思考-作业-13"><a href="#思考-作业-13" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>查看 Vux 源码，尝试自己编写一个 UI 插件</p></li><li><p>Iconfont 是矢量图标库，其相比位图的主要区别是什么？</p></li></ul><h1 id="开发拓展篇-3：尝试使用外部数据"><a href="#开发拓展篇-3：尝试使用外部数据" class="headerlink" title="开发拓展篇 3：尝试使用外部数据"></a>开发拓展篇 3：尝试使用外部数据</h1><p>当你应用的 UI 层面已经趋于完善的时候，接下来你就需要去获取动态的数据来实现真实的应用场景。那么动态数据从哪里来呢？前端主要还是通过接口的形式获取。</p><p>如果有专业的接口开发人员和你一起完成一个应用，那么你只需要和他定义好接口的入参和出参，然后进行调用就好了，这也是公司中前端与后台的常见合作方式。</p><p>而在以下场景下，你可能并不需要或者并没有后台工程师提供接口给你：</p><ul><li>你个人开发的项目</li><li>你的应用数据来源于外部</li></ul><p>这时候你就需要通过调用<strong>第三方接口</strong>来实现应用的数据交互与展现。那么接下来我们就来介绍下第三方接口的使用。</p><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>大多数情况下，我们调用的第三方接口都是完全或者部分开源及免费的，因此只要在合理的范围内使用我们便可以实现一些简单的数据交互。本文将以<a href="https://www.juhe.cn/docs">聚合数据</a>提供的第三方接口 API 为例进行讲解。</p><h3 id="聚合数据"><a href="#聚合数据" class="headerlink" title="聚合数据"></a>聚合数据</h3><blockquote><p>聚合数据是国内领先的基础数据服务商， 以自有数据为基础，各种便捷服务整合以及第三方数据接入，为互联网开发全行业提供标准化 API 技术支撑服务的 DaaS 平台。</p></blockquote><p>在官网 API 首页（<a href="https://www.juhe.cn/docs">https://www.juhe.cn/docs</a>）我们可以选择你想要的接口类型进行调用，如下图所示：</p><img src="/2019/08/30/vue/165e11791a44f6ee.png" class=""><p>其中包含了免费及付费的接口类型，如果只是用于单个的调用或测试，建议大家使用免费接口就可以了（非会员只能申请一个免费接口，比较坑），但如果你的应用准备上架或发布，你最好付费以获得更多的调用和使用接口的次数。</p><p>点击你想使用的接口后你便可以查看该接口的 API 文档，包括接口地址、请求方式、请求示例及返回示例等，比如这里我点击“笑话大全”：</p><img src="/2019/08/30/vue/165e122c43a04e11.png" class=""><p>调用接口需要平台提供的 <code>AppKey</code>，在你注册登录个人中心的<strong>我的数据</strong>中可以查看对应接口的 <code>AppKey</code>：</p><img src="/2019/08/30/vue/165e13bbbf50ff00.png" class=""><p>获取到 AppKey 后我们便可以对接口进行测试了，这里我们可以直接通过对应接口的测试按钮进行测试，当然你也可以通过 <code>postman</code> 工具进行调试：</p><img src="/2019/08/30/vue/165e14381021f3dd.png" class=""><p>测试完毕后，我们便可以在 Vue 项目中接入我们的第三方接口，实现动态数据和功能。</p><h3 id="其他第三方接口"><a href="#其他第三方接口" class="headerlink" title="其他第三方接口"></a>其他第三方接口</h3><p>除了整合型的第三方接口聚合数据外，其他比较实用的第三方接口还有：</p><ul><li><a href="https://lbs.amap.com/">高德地图</a>：访问高德地图的 Web API</li><li><a href="https://developer.github.com/v3/">GitHub</a>：世界上领先的软件开发平台</li><li><a href="http://api.fanyi.baidu.com/api/trans/product/index">百度翻译</a>：支持多种语言之间的相互翻译</li><li><a href="https://www.heweather.com/documents/">和风天气</a>：中国天气信息</li><li><a href="https://www.avatardata.cn/Docs">阿凡达数据</a> ：提供中国可用的 API</li></ul><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><p>接下来，我们便可以在 Vue 项目中接入第三方接口来实现数据的交互。这里我们以接入聚合数据的<code>历史上的今天</code>接口为例。</p><p>首先我们来看一下该接口的请求详情：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts">请求地址：http:<span class="hljs-comment">//api.juheapi.com/japi/toh</span><br>请求参数：v=<span class="hljs-number">1.0</span><span class="hljs-variable">&amp;month</span>=<span class="hljs-number">10</span><span class="hljs-variable">&amp;day</span>=<span class="hljs-number">31</span><span class="hljs-variable">&amp;key</span>=你的AppKey<br>请求方式：GET<br><br></code></pre></td></tr></table></figure><p>上方详情中我们可以看到请求参数主要有 4 个，分别为：</p><ul><li>v：string 类型。版本，当前：1.0</li><li>month：int 类型。月份，如：10</li><li>day：int 类型。日，如：1</li><li>key：string 类型。你的 AppKey</li></ul><p>通过接口入参的说明我们可以知道唯一可以变的数据便是月份和日期，所以我们页面中得有选择<strong>月日</strong>的功能。</p><p>另外我们再来看一下该接口的出参示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;error_code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;请求成功！&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;day&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;des&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1907年11月1日 电影导演吴永刚诞生 &amp;emsp;&amp;emsp;吴永刚，1907年11月1日生于江苏吴县。1932年后参加影片《三个摩登女性》、《母性之光》的拍摄工作。1934年在联华影片公司编导处女作《神女》，一举成名，...&quot;</span><span class="hljs-punctuation">,</span>  <br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9000</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;lunar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;丁未年九月廿六&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;month&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;pic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>  <br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;电影导演吴永刚诞生&quot;</span><span class="hljs-punctuation">,</span>  <br>            <span class="hljs-attr">&quot;year&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1907</span>  <br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>通过上方示例，我们可以获取<strong>历史上的今天</strong>的标题、详情、图片等，这些数据可以用于页面展示。</p><p>这样经过接口入参和出参的分析，我们可以使用 Vux 构建一个简单的页面，如下图所示：</p> <img src="/2019/08/30/vue/165e2c1f6997c9cc.png" class=""><p>通过点击上图中“查看历史上的今天”按钮，便可以调用接口获取数据列表并渲染。主要代码如下：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">datetime-view</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;datetime&quot;</span> <span class="hljs-attr">:format</span>=<span class="hljs-string">&quot;format&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">datetime-view</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>选中值: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">value</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-padding&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">x-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click.native</span>=<span class="hljs-string">&quot;watchHistory&quot;</span>&gt;</span>查看历史上的今天<span class="hljs-tag">&lt;/<span class="hljs-name">x-button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">panel</span> <span class="hljs-attr">header</span>=<span class="hljs-string">&quot;历史上的今天&quot;</span> <span class="hljs-attr">:list</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">panel</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">DatetimeView</span>, <span class="hljs-title class_">XButton</span>, <span class="hljs-title class_">Panel</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vux&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; getHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;_ser/moduleB&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;10-31&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;MM-DD&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">list</span>: []</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">watchHistory</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">let</span> data = <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        </span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = [];</span></span><br><span class="language-javascript"><span class="language-xml">        </span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">getHistory</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">v</span>: <span class="hljs-string">&#x27;1.0&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">month</span>: data[<span class="hljs-number">0</span>],</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">day</span>: data[<span class="hljs-number">1</span>],</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;d6ceaf9be9f116ae45e7699845d87056&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">error_code</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    response.<span class="hljs-property">result</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                            <span class="hljs-attr">title</span>: e.<span class="hljs-property">title</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                            <span class="hljs-attr">desc</span>: e.<span class="hljs-property">des</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                            <span class="hljs-attr">src</span>: e.<span class="hljs-property">pic</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">                    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">DatetimeView</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">XButton</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">Panel</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>上方我们通过调用封装的 <code>getHistory</code> 接口名称进行数据的获取，在本地调用的过程中需要注意跨域的问题，可以配置 devServer 的 proxy 代理来解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* vue.config.js */</span><br><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>    devServer: &#123;<br>        proxy: &#123;<br>            <span class="hljs-string">&#x27;/juheapi&#x27;</span>: &#123;<br>                target: <span class="hljs-string">&#x27;http://api.juheapi.com/&#x27;</span>,<br>                changeOrigin: <span class="hljs-literal">true</span>,<br>                pathRewrite: &#123;<span class="hljs-string">&#x27;^/juheapi&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>具体实例代码可以参考：<a href="https://github.com/luozhihao/vue-project-code/tree/master/ui-framework-project">ui-framework-project</a></p><p>这样我们便完成了使用第三方接口获取数据实现页面渲染的功能，为自己的应用填充了数据和功能。</p><h2 id="结语-15"><a href="#结语-15" class="headerlink" title="结语"></a>结语</h2><p>第三方接口的使用能够帮助我们快速的获取数据并实现应用的动态交互，同时也有助于解决接口开发的人力及服务器资源消耗，为部分 Vue 项目开发提供数据保障。</p><p>至此，本小册的开发部分章节也将告一段落。在这部分的内容中我们一起学习了 Vue 项目开发的实用技巧、方法和工具，并在构建出的项目基础上了解并实践了 Vue 开发的相关技术要点。希望这部分内容的介绍能够巩固大家对于 Vue 开发的基础知识，弥补 Vue 开发的技能空白。</p><h2 id="思考-作业-14"><a href="#思考-作业-14" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>自己通过调用外部数据完成一个页面动态的数据渲染</p></li><li><p>devServer 的 proxy 代理是如何实现接口转换和重定向的？各配置项的作用是什么？</p></li></ul><h1 id="总结篇：写在最后"><a href="#总结篇：写在最后" class="headerlink" title="总结篇：写在最后"></a>总结篇：写在最后</h1><p>看到这里，也就是要和大家说再见的时候了，其实还有很多想和大家分享的内容没能来得及一一阐述，但是没有关系，我相信在今后学习 Vue 的道路上我们永远会保持关注，彼此照应，一起学习，一起进步。</p><p>而正所谓温故而知新，可以为师矣，接下来我们不妨一起回顾下本小册的主要内容。</p><h2 id="回顾与总结"><a href="#回顾与总结" class="headerlink" title="回顾与总结"></a>回顾与总结</h2><p>浏览小册目录，我们可以清楚的将小册的内容归类为构建与开发两部分，这也是本小册所要分享的知识点所在。</p><p>在小册构建部分我们由浅入深的进行了项目构建的学习，在 <code>Vue CLI 3.x</code> 的基础上，从基础构建开始，经历了 <code>npm</code> 与 <code>yarn</code> 的使用、<code>webpack</code> 的配置以及项目环境的注入，最后通过单页应用和多页应用的构建实战来进一步强化大家的认知，并对构建出的项目进行了整合和优化。</p><p>而在小册开发部分，我们主要针对 Vue 项目开发过程中可能遇到的技术点、难点及优化点进行了指南性的介绍，包括了编码技巧与规范、可复用性模块的编写、组件的职能划分、数据驱动的介绍以及 Vue API 的解析等，通过理论结合实战的形式一步步地帮助大家构筑 Vue 开发知识体系。</p><p>相对于偏具体实战性质的书籍，本小册主要偏向理论及应用层面。因为小册没有针对实现某一系统性的功能或项目进行详细的讲解，而是介绍了从无到有开发一个 Vue 基础项目的方法和经验，本着“授人以渔”的宗旨给大家进行应用性质的指南，而至于具体的业务及功能场景，则需要大家自己去填充。</p><h2 id="进阶与提升"><a href="#进阶与提升" class="headerlink" title="进阶与提升"></a>进阶与提升</h2><p>由于本小册定位是一本入门提升级的书籍，很多底层和原理性的知识都没能够在此详细介绍，如果你看完本小册并已经充分掌握了小册中的知识体系，或许接下来你可能有点迷茫，不知道下一步该如何完善自己的项目。不用担心，你可以按照下图的知识路线进一步提升自己，将一个纯前端的项目发展为由<strong>前端 —— 中间层</strong>组成的真正前后端分离的项目，如下图所示：</p><img src="/2019/08/30/vue/166b1039eecd39a9.png" class=""><p>本小册讲解的是上图中纯前端部分的内容，而所谓的 Node 中间层其实就是处于前端数据请求与后台响应渲染中间位置的架构，它是运行在服务端的，可以帮助我们启动脱离于后台项目的前端服务并实现数据的中转处理与页面渲染等功能。</p><p>这里我们需要了解 Node.js 的 Web 开发框架 <a href="https://github.com/koajs/koa">Koa</a>（或者 <a href="https://github.com/expressjs/express">Express</a>）, 你可以尝试使用 Koa 项目脚手架 <a href="https://github.com/17koa/koa-generator">koa-generator</a> 来实现一个简单的中间层项目。</p><p>在我们的 Vue 项目中，我们通过 webpack 打包在 dist 目录下输出了用于生产环境的静态文件，那么这些静态文件最后哪里会使用它们？其实我们可以通过启动 Node 服务来进行加载并渲染入口 html，也就是最终我们将这些文件放在服务器上运行的效果。</p><img src="/2019/08/30/vue/166cafe8fabd52d3.png" class=""><p>当然中间层的作用远不止渲染我们打包后的页面这么简单，通过添加一些 <code>middleware</code>（中间件）我们可以将客户端的一些功能转移到服务端处理，比如登录验证、用户信息获取、路由重定向以及各页面业务逻辑的封装等。感兴趣的同学可以以此为进阶和提升的下一个目标。</p><h2 id="作者寄语"><a href="#作者寄语" class="headerlink" title="作者寄语"></a>作者寄语</h2><p>文森特·梵高曾经说过：“不要吹灭你的灵感和你的想象力; 不要成为你的模型的奴隶。” 看完本小册，你可能并没有学到什么，但是我希望你能发现什么，发现自己的灵感，发挥自己的想象力去继续深挖填充小册中介绍的内容，永远不要止步于当下，你还有很多东西需要去学习。</p><p>我们应该抱着玩的心态的去尝试各种新鲜的技术，然后回归运用到应用中去，毕竟世界那么大，每一个 <code>Hello Wrold</code> 实战都是你打开未知大门的钥匙。</p><p>有些时候你花了时间去学习，但是最后总会茫然的感觉自己并没有收获任何实际性的东西，其实你忽略了自己的思想，忽略了思想上的提升。就好比有些人上了四年大学，当他回望大学生涯的时候会发现大学并没有教会他什么，但却给了他一种思想，而这种思想正塑造了自己的人生。</p><p>Vue 的学习并非一朝一夕就能完成的，不要吝啬自己的学习时间，也不要局限于 Vue 本身，因为所有知识都是融会贯通的，当你学会了 <code>React</code> 的时候再来看看 Vue 的文档，或许也会有一种似曾相识的亲切感。</p><p>最后，愿自己码梦为生，笔耕不辍；愿你码到成功，初心不改。</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>如果你喜欢我的文章并想继续关注“劳卜”我的话，可以扫一扫下方的二维码关注我的微信公众号「前端呼啦圈」，第一时间获取我的原创推送。</p> <img src="/2019/08/30/vue/166b60f778687af7.png" class=""><p>同时也可以关注我的博客：<a href="http://www.cnblogs.com/luozhihao/">http://www.cnblogs.com/luozhihao/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 相关文档</title>
    <link href="/2019/08/29/Docker/"/>
    <url>/2019/08/29/Docker/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker-相关文档"><a href="#Docker-相关文档" class="headerlink" title="Docker 相关文档"></a>Docker 相关文档</h2><ul><li><a href="https://blog.csdn.net/r939126607/article/details/83350186">centos7.3环境下的docker安装 切换docker国内镜像源</a></li></ul><p><escape><span id="more"></span></escape></p><ul><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost /]# sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure></li><li><p>过程</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Loaded</span> plugins: fastestmirror<br><span class="hljs-attribute">Loading</span> mirror speeds from cached hostfile<br><span class="hljs-attribute">Package</span> yum-utils-<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">31</span>-<span class="hljs-number">50</span>.el7.noarch already installed and latest version<br><span class="hljs-attribute">Package</span> device-mapper-persistent-data-<span class="hljs-number">0</span>.<span class="hljs-number">7</span>.<span class="hljs-number">3</span>-<span class="hljs-number">3</span>.el7.x86_64 already installed and latest version<br><span class="hljs-attribute">Package</span> <span class="hljs-number">7</span>:lvm2-<span class="hljs-number">2</span>.<span class="hljs-number">02</span>.<span class="hljs-number">180</span>-<span class="hljs-number">10</span>.el7_6.<span class="hljs-number">8</span>.x86_64 already installed and latest version<br><span class="hljs-attribute">Nothing</span> to do<br></code></pre></td></tr></table></figure></li><li><p>添加taobao镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost /]# sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure></li><li><p>log</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">Loaded plugins: fastestmirror<br>adding repo from: http://mirrors.aliyun.<span class="hljs-keyword">com</span>/docker-<span class="hljs-keyword">ce</span>/linux/centos/docker-<span class="hljs-keyword">ce</span>.repo<br>grabbing <span class="hljs-keyword">file</span> http://mirrors.aliyun.<span class="hljs-keyword">com</span>/docker-<span class="hljs-keyword">ce</span>/linux/centos/docker-<span class="hljs-keyword">ce</span>.repo <span class="hljs-keyword">to</span> /etc/yum.repos.d/docker-<span class="hljs-keyword">ce</span>.repo<br>repo saved <span class="hljs-keyword">to</span> /etc/yum.repos.d/docker-<span class="hljs-keyword">ce</span>.repo<br></code></pre></td></tr></table></figure></li><li><p>查看列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost /]# yum list docker-ce --showduplicates | sort -r<br></code></pre></td></tr></table></figure></li><li><p>结果</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Loading</span> mirror speeds from cached hostfile<br><span class="hljs-attribute">Loaded</span> plugins: fastestmirror<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">19</span>.<span class="hljs-number">03</span>.<span class="hljs-number">1</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">19</span>.<span class="hljs-number">03</span>.<span class="hljs-number">0</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">8</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">7</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">6</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">5</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">4</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">3</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">2</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">1</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">0</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">18</span>.<span class="hljs-number">06</span>.<span class="hljs-number">3</span>.ce-<span class="hljs-number">3</span>.el7                    docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">18</span>.<span class="hljs-number">06</span>.<span class="hljs-number">2</span>.ce-<span class="hljs-number">3</span>.el7                    docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">18</span>.<span class="hljs-number">06</span>.<span class="hljs-number">1</span>.ce-<span class="hljs-number">3</span>.el7                    docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">18</span>.<span class="hljs-number">06</span>.<span class="hljs-number">0</span>.ce-<span class="hljs-number">3</span>.el7                    docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">18</span>.<span class="hljs-number">03</span>.<span class="hljs-number">1</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">18</span>.<span class="hljs-number">03</span>.<span class="hljs-number">0</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">12</span>.<span class="hljs-number">1</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">09</span>.<span class="hljs-number">1</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">09</span>.<span class="hljs-number">0</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">06</span>.<span class="hljs-number">2</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">06</span>.<span class="hljs-number">1</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">06</span>.<span class="hljs-number">0</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">03</span>.<span class="hljs-number">3</span>.ce-<span class="hljs-number">1</span>.el7                    docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">03</span>.<span class="hljs-number">2</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">03</span>.<span class="hljs-number">1</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">03</span>.<span class="hljs-number">0</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">Available</span> Packages<br></code></pre></td></tr></table></figure></li><li><p>安装最新版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost /]# sudo yum install docker-ce-18.06.3.ce<br></code></pre></td></tr></table></figure></li><li><p>过程</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs subunit">Loaded plugins: fastestmirror<br>Loading mirror speeds from cached hostfile<br>Resolving Dependencies<br>--&gt; Running transaction check<br>---&gt; Package docker-ce.x86_64 0:18.06.3.ce<span class="hljs-string">-3</span>.el7 will be installed<br>--&gt; Processing Dependency: container-selinux &gt;= 2.9 for package: docker-ce<span class="hljs-string">-18</span>.06.3.ce<span class="hljs-string">-3</span>.el7.x86_64<br>--&gt; Processing Dependency: libltdl.so.7()(64bit) for package: docker-ce<span class="hljs-string">-18</span>.06.3.ce<span class="hljs-string">-3</span>.el7.x86_64<br>--&gt; Running transaction check<br>---&gt; Package container-selinux.noarch 2:2.107<span class="hljs-string">-1</span>.el7_6 will be installed<br>---&gt; Package libtool-ltdl.x86_64 0:2.4.2<span class="hljs-string">-22</span>.el7_3 will be installed<br>--&gt; Finished Dependency Resolution<br><br>Dependencies Resolved<br><br>==============================================================================================================================<br> Package                          Arch                  Version                         Repository                       Size<br>==============================================================================================================================<br>Installing:<br> docker-ce                        x86_64                18.06.3.ce<span class="hljs-string">-3</span>.el7                docker-ce-stable                 41 M<br>Installing for dependencies:<br> container-selinux                noarch                2:2.107<span class="hljs-string">-1</span>.el7_6                 extras                           39 k<br> libtool-ltdl                     x86_64                2.4.2<span class="hljs-string">-22</span>.el7_3                  base                             49 k<br><br>Transaction Summary<br>==============================================================================================================================<br>Install  1 Package (<span class="hljs-string">+2</span> Dependent packages)<br><br>Total size: 41 M<br>Total download size: 41 M<br>Installed size: 168 M<br>Is this ok [y/d/N]: y<br>Downloading packages:<br>Delta RPMs disabled because /usr/bin/applydeltarpm not installed.<br>(1/2): libtool-ltdl<span class="hljs-string">-2</span>.4.2<span class="hljs-string">-22</span>.el7_3.x86_64.rpm                                                          |  49 kB  00:00:00     <br>warning: /var/cache/yum/x86_64/7/docker-ce-stable/packages/docker-ce<span class="hljs-string">-18</span>.06.3.ce<span class="hljs-string">-3</span>.el7.x86_64.rpm: Header V4 RSA/SHA512 Signature, key ID 621e9f35: NOKEY<br>Public key for docker-ce<span class="hljs-string">-18</span>.06.3.ce<span class="hljs-string">-3</span>.el7.x86_64.rpm is not installed<br>(2/2): docker-ce<span class="hljs-string">-18</span>.06.3.ce<span class="hljs-string">-3</span>.el7.x86_64.rpm                                                           |  41 MB  00:00:07     <br>------------------------------------------------------------------------------------------------------------------------------<br>Total                                                                                         5.1 MB/s |  41 MB  00:00:07     <br>Retrieving key from https://mirrors.aliyun.com/docker-ce/linux/centos/gpg<br>Importing GPG key 0x621E9F35:<br> Userid     : &quot;Docker Release (CE rpm) &lt;docker@docker.com&gt;&quot;<br> Fingerprint: 060a 61c5 1b55 8a7f 742b 77aa c52f eb6b 621e 9f35<br> From       : https://mirrors.aliyun.com/docker-ce/linux/centos/gpg<br>Is this ok [y/N]: y<br>Running transaction check<br>Running transaction test<br>Transaction test succeeded<br>Running transaction<br>  Installing : 2:container-selinux<span class="hljs-string">-2</span>.107<span class="hljs-string">-1</span>.el7_6.noarch                                                                   1/3 <br>  Installing : libtool-ltdl<span class="hljs-string">-2</span>.4.2<span class="hljs-string">-22</span>.el7_3.x86_64                                                                         2/3 <br>  Installing : docker-ce<span class="hljs-string">-18</span>.06.3.ce<span class="hljs-string">-3</span>.el7.x86_64                                                                          3/3 <br>  Verifying  : libtool-ltdl<span class="hljs-string">-2</span>.4.2<span class="hljs-string">-22</span>.el7_3.x86_64                                                                         1/3 <br>  Verifying  : docker-ce<span class="hljs-string">-18</span>.06.3.ce<span class="hljs-string">-3</span>.el7.x86_64                                                                          2/3 <br>  Verifying  : 2:container-selinux<span class="hljs-string">-2</span>.107<span class="hljs-string">-1</span>.el7_6.noarch                                                                   3/3 <br><br>Installed:<br>  docker-ce.x86_64 0:18.06.3.ce<span class="hljs-string">-3</span>.el7                                                                                         <br><br>Dependency Installed:<br>  container-selinux.noarch 2:2.107<span class="hljs-string">-1</span>.el7_6                        libtool-ltdl.x86_64 0:2.4.2<span class="hljs-string">-22</span>.el7_3                       <br><br>Complete!<br></code></pre></td></tr></table></figure></li><li><p>添加开机启动服务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@localhost /]<span class="hljs-comment"># sudo systemctl start docker</span><br>[root@localhost /]<span class="hljs-comment"># sudo systemctl enable docker</span><br>Created symlink from <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/mu</span>lti-user.target.wants<span class="hljs-regexp">/docker.service to /u</span>sr<span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/</span>docker.service.<br></code></pre></td></tr></table></figure></li><li><p>查看docker版本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@localhost</span> <span class="hljs-string">/</span>]<span class="hljs-comment"># docker version</span><br><span class="hljs-attr">Client:</span><br> <span class="hljs-attr">Version:</span>           <span class="hljs-number">18.06</span><span class="hljs-number">.3</span><span class="hljs-string">-ce</span><br> <span class="hljs-attr">API version:</span>       <span class="hljs-number">1.38</span><br> <span class="hljs-attr">Go version:</span>        <span class="hljs-string">go1.10.3</span><br> <span class="hljs-attr">Git commit:</span>        <span class="hljs-string">d7080c1</span><br> <span class="hljs-attr">Built:</span>             <span class="hljs-string">Wed</span> <span class="hljs-string">Feb</span> <span class="hljs-number">20</span> <span class="hljs-number">02</span><span class="hljs-string">:26:51</span> <span class="hljs-number">2019</span><br> <span class="hljs-attr">OS/Arch:</span>           <span class="hljs-string">linux/amd64</span><br> <span class="hljs-attr">Experimental:</span>      <span class="hljs-literal">false</span><br><br><span class="hljs-attr">Server:</span><br> <span class="hljs-attr">Engine:</span><br>  <span class="hljs-attr">Version:</span>          <span class="hljs-number">18.06</span><span class="hljs-number">.3</span><span class="hljs-string">-ce</span><br>  <span class="hljs-attr">API version:</span>      <span class="hljs-number">1.38</span> <span class="hljs-string">(minimum</span> <span class="hljs-string">version</span> <span class="hljs-number">1.12</span><span class="hljs-string">)</span><br>  <span class="hljs-attr">Go version:</span>       <span class="hljs-string">go1.10.3</span><br>  <span class="hljs-attr">Git commit:</span>       <span class="hljs-string">d7080c1</span><br>  <span class="hljs-attr">Built:</span>            <span class="hljs-string">Wed</span> <span class="hljs-string">Feb</span> <span class="hljs-number">20</span> <span class="hljs-number">02</span><span class="hljs-string">:28:17</span> <span class="hljs-number">2019</span><br>  <span class="hljs-attr">OS/Arch:</span>          <span class="hljs-string">linux/amd64</span><br>  <span class="hljs-attr">Experimental:</span>     <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li><p>建议更换docker的镜像源</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@localhost</span> <span class="hljs-regexp">/]# vi /</span>etc<span class="hljs-regexp">/docker/</span>daemon.json<br></code></pre></td></tr></table></figure></li><li><p>新增内容</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br><span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重启docker</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> /]<span class="hljs-meta"># systemctl restart docker.service</span><br></code></pre></td></tr></table></figure></li><li><p>查看镜像列表</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@localhost /]<span class="hljs-comment"># docker images</span><br>REPOSITORY          <span class="hljs-keyword">TAG</span>                 <span class="hljs-title">IMAGE</span> ID            CREATED             SIZE<br></code></pre></td></tr></table></figure></li><li><p>查看docker版本</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">[root@localhost /]<span class="hljs-comment"># docker -v</span><br>Docker <span class="hljs-built_in">version</span> <span class="hljs-number">18.06</span><span class="hljs-number">.3</span>-ce, build d7080c1<br></code></pre></td></tr></table></figure></li><li><p>卸载已安装的docker</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livescript">yum -y remove docker <span class="hljs-string">\</span><br>              docker-ce <span class="hljs-string">\</span><br>              docker-ce-cli <span class="hljs-string">\</span><br>              containerd.io <span class="hljs-string">\</span><br>              docker-client <span class="hljs-string">\</span><br>              docker-client-latest <span class="hljs-string">\</span><br>              docker-common <span class="hljs-string">\</span><br>              docker-latest <span class="hljs-string">\</span><br>              docker-latest-logrotate <span class="hljs-string">\</span><br>              docker-logrotate <span class="hljs-string">\</span><br>              docker-engine<br></code></pre></td></tr></table></figure></li><li><p>安装适合的版本</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> -y install docker-ce-<span class="hljs-number">18</span>.<span class="hljs-number">03</span>.<span class="hljs-number">0</span>.ce<br></code></pre></td></tr></table></figure></li><li><p>查看镜像列表命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span><br></code></pre></td></tr></table></figure></li><li><p>镜像列表</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@localhost demo001]<span class="hljs-comment"># docker images</span><br>REPOSITORY          <span class="hljs-keyword">TAG</span>                 <span class="hljs-title">IMAGE</span> ID            CREATED             SIZE<br><span class="hljs-tag">&lt;none&gt;</span>              <span class="hljs-tag">&lt;none&gt;</span>              <span class="hljs-number">4</span>fba9be82837        <span class="hljs-number">8</span> minutes ago       <span class="hljs-number">995M</span>B<br><span class="hljs-keyword">node</span>                <span class="hljs-title">latest</span>              b18afbdfc458        <span class="hljs-number">8</span> days ago          <span class="hljs-number">908M</span>B<br>centos              <span class="hljs-number">7</span>                   <span class="hljs-number">67</span>fa590cfc1c        <span class="hljs-number">9</span> days ago          <span class="hljs-number">202M</span>B<br>centos              latest              <span class="hljs-number">67</span>fa590cfc1c        <span class="hljs-number">9</span> days ago          <span class="hljs-number">202M</span>B<br><span class="hljs-keyword">node</span>                <span class="hljs-title">8</span>.<span class="hljs-number">11.3</span>-slim         <span class="hljs-number">1</span>d5555ef5229        <span class="hljs-number">13</span> months ago       <span class="hljs-number">182M</span>B<br></code></pre></td></tr></table></figure></li><li><p>根据镜像id设置Tag</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker <span class="hljs-keyword">tag</span> <span class="hljs-title">4fba9be82837</span> todoapp<br></code></pre></td></tr></table></figure></li><li><p>运行实例</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -p <span class="hljs-number">8000</span>:<span class="hljs-number">8000</span> --name example1 todoapp<br></code></pre></td></tr></table></figure></li><li><p>在浏览器运行</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//10.100.254.229:8000</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>CentOS</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第34周</title>
    <link href="/2019/08/19/2019Week34/"/>
    <url>/2019/08/19/2019Week34/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第34周（2019-08-19-2019-08-25）"><a href="#2019年第34周（2019-08-19-2019-08-25）" class="headerlink" title="2019年第34周（2019&#x2F;08&#x2F;19~2019&#x2F;08&#x2F;25）"></a>2019年第34周（2019&#x2F;08&#x2F;19~2019&#x2F;08&#x2F;25）</h2><ol><li><a href="https://www.jianshu.com/p/7d2e584cbcc1">node模块之xlsx使用</a></li><li><a href="https://www.cnblogs.com/yadiblogs/p/8818277.html">vue（一）使用vue-cli搭建项目</a></li><li><a href="https://blog.csdn.net/wq18512847606/article/details/80790584">vue + iview项目构建</a></li><li><a href="https://juejin.im/post/58c0e882da2f60186d6d4818">vue + iview 项目实践总结 【完】</a></li><li><a href="https://blog.csdn.net/xuehu837769474/article/details/81984937">Vue+ElementUI从零开始搭建自己的网站（一、环境搭建）</a></li><li><a href="https://blog.csdn.net/xuehu837769474/article/details/82012361">Vue+ElementUI从零开始搭建自己的网站（二、导航组件）</a></li><li><a href="https://blog.csdn.net/xuehu837769474/article/details/82012917">Vue+ElementUI从零开始搭建自己的网站（三、组件间的通信）</a></li><li><a href="https://www.cnblogs.com/andysd/p/3809960.html">SQL SERVER 2008分页</a></li><li><a href="https://hot.cnbeta.com/articles/game/878979.htm">教育类游戏前景好 美国已超越中国成为最大购买国</a></li><li><a href="https://www.cnblogs.com/peiyu1988/p/7766594.html">Nodejs MSSQL详细解读</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>game</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BJC_Efficiency 相关文档</title>
    <link href="/2019/08/13/BJC_Efficiency/"/>
    <url>/2019/08/13/BJC_Efficiency/</url>
    
    <content type="html"><![CDATA[<p>自动生成 Model</p><p><escape><span id="more"></span></escape></p><h2 id="自动生成-Model"><a href="#自动生成-Model" class="headerlink" title="自动生成 Model"></a>自动生成 Model</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;BJC_Efficiency&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;dialect&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;mssql&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;10.100.254.163&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;user&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;sa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;bjc.123&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;database&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;BJC_Efficiency&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tables&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;COM_PG&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;COM_Organization&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;PE_PerformanceResult&quot;</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="新建-Run-Debug-配置："><a href="#新建-Run-Debug-配置：" class="headerlink" title="新建 Run&#x2F;Debug 配置："></a>新建 Run&#x2F;Debug 配置：</h3><ol><li>【Add New Configuration】-&gt;【Node.js】</li><li>【Name: DBModelBuild】</li><li>[Working directory: D:\svn_mobile3\PDRC_Mobile\Application_Development_v20190716\10_System\bjc_logic\service_performance\node_modules@bjc\sequelize-auto-sql\bin】</li><li>【JavaScript file: build.js】</li><li>运行，src下会自动生成相关的Model和DataManager类。</li></ol><h2 id="Excel-读写"><a href="#Excel-读写" class="headerlink" title="Excel 读写"></a>Excel 读写</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;@bjc/excelfiles_proxy&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;xlsx&quot;</span>: <span class="hljs-string">&quot;^0.15.0&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>src\xlsx_proxy.js<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nodejs"><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nodejs"><br></code></pre></td></tr></table></figure><h2 id="调用RESTful"><a href="#调用RESTful" class="headerlink" title="调用RESTful"></a>调用RESTful</h2><h3 id="Method-findPerformanceResult"><a href="#Method-findPerformanceResult" class="headerlink" title="Method: findPerformanceResult"></a>Method: findPerformanceResult</h3><ul><li><p>url:　<a href="http://127.0.0.1:9901/performance/findPerformanceResult">http://127.0.0.1:9901/performance/findPerformanceResult</a></p></li><li><p>method: POST</p></li><li><p>body: raw&#x2F;JSON(application&#x2F;json)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;contextId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;XXXX&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;performanceQuarter&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2019-07-01&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;leaderWorkId&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;B-00010&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;pageCount&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;4&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;pageNumber&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;WorkID&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;orderType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ASC&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>result: </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;rn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;WorkId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;B-00045&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;IsManualInput&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;PerformanceQuarter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2019-07-01T00:00:00.000Z&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;RealCapacity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.8090909090909089</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;RealYield&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10.024510183109221</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;WorkSaturation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.177669615846371</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;PerformanceLevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;B&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;rn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;6&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;WorkId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;B-00097&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;IsManualInput&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;PerformanceQuarter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2019-07-01T00:00:00.000Z&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;RealCapacity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2.1909090909090914</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;RealYield&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">13.056020539075796</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;WorkSaturation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.11696451093374</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;PerformanceLevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;B&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;rn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;WorkId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;B-00111&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;IsManualInput&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;PerformanceQuarter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2019-07-01T00:00:00.000Z&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;RealCapacity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3.9</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;RealYield&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">39.57148519805875</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;WorkSaturation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.984854113956933</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;PerformanceLevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;B&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;rn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;8&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;WorkId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;B-00146&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;IsManualInput&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;PerformanceQuarter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2019-07-01T00:00:00.000Z&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;RealCapacity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3.127272727272727</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;RealYield&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21.052609318033028</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;WorkSaturation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.3738392686547716</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;PerformanceLevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Method-savePerformanceResult"><a href="#Method-savePerformanceResult" class="headerlink" title="Method: savePerformanceResult"></a>Method: savePerformanceResult</h3><ul><li><p>url:　<a href="http://127.0.0.1:9901/performance/savePerformanceResult">http://127.0.0.1:9901/performance/savePerformanceResult</a></p></li><li><p>method: POST</p></li><li><p>body: raw&#x2F;JSON(application&#x2F;json)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;contextId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;XXXX&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;performanceQuarter&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2019-07-01&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;workId&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;B-00010&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;performanceLevel&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;B&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>result:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="多表联查优化"><a href="#多表联查优化" class="headerlink" title="多表联查优化"></a>多表联查优化</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> TOP <span class="hljs-number">10</span> * <span class="hljs-keyword">FROM</span> (<br><span class="hljs-keyword">SELECT</span> row_number () <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> WorkId) <span class="hljs-keyword">AS</span> rn,*<span class="hljs-keyword">FROM</span> <br>(<br><span class="hljs-keyword">SELECT</span> <br>t2.WorkId,<br>t3.IsManualInput,<br>t3.PerformanceQuarter,<br>t4.RealCapacity,<br>t4.RealYield,<br>t4.WorkSaturation,<br>t3.PerformanceLevel <br><span class="hljs-keyword">FROM</span> COM_Organization t1 <br><span class="hljs-keyword">JOIN</span> COM_Employee t2 <br><span class="hljs-keyword">ON</span> t2.DepartmentID=t1.DepartmentID <span class="hljs-keyword">AND</span> t2.WorkId!=t1.DepartmentLeaderWorkID <br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PE_PerformanceResult t3 <br><span class="hljs-keyword">ON</span>  t3.PerformanceQuarter=<span class="hljs-string">&#x27;2019-07-01&#x27;</span> <span class="hljs-keyword">and</span> t3.PGWorkID=t2.WorkId<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> (<br><span class="hljs-keyword">SELECT</span> <br>PGWorkID,<br><span class="hljs-built_in">SUM</span> (RealCapacity) <span class="hljs-keyword">AS</span> RealCapacity,<br><span class="hljs-built_in">SUM</span> (RealYield) <span class="hljs-keyword">AS</span> RealYield,<br><span class="hljs-built_in">AVG</span> (WorkSaturation) <span class="hljs-keyword">AS</span> WorkSaturation <br><span class="hljs-keyword">FROM</span> <br>(<br><span class="hljs-keyword">SELECT</span> <br>PGWorkID,MonthDate,<br><span class="hljs-built_in">MAX</span> (RealCapacity) <span class="hljs-keyword">AS</span> RealCapacity,<br><span class="hljs-built_in">SUM</span> (RealYield) <span class="hljs-keyword">AS</span> RealYield,<br><span class="hljs-built_in">MAX</span> (WorkSaturation) <span class="hljs-keyword">AS</span> WorkSaturation <br><span class="hljs-keyword">FROM</span> BI_Inc_EmployeeMonthlyBills <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> PGWorkID,MonthDate<br>) t5 <span class="hljs-keyword">WHERE</span> MonthDate <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;2019-07-01&#x27;</span>,<span class="hljs-string">&#x27;2019-08-01&#x27;</span>,<span class="hljs-string">&#x27;2019-09-01&#x27;</span>) <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> PGWorkID<br>) t4 <span class="hljs-keyword">ON</span> t4.PGWorkID=t2.WorkId <br><span class="hljs-keyword">WHERE</span> t1.DepartmentLeaderWorkID=<span class="hljs-string">&#x27;B-00010&#x27;</span><br>) t6<br>) t7 <br><span class="hljs-keyword">WHERE</span> rn&gt;<span class="hljs-number">190</span> <span class="hljs-keyword">AND</span> rn&lt;= <span class="hljs-number">200</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> WorkID <span class="hljs-keyword">ASC</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rn</span>WorkIdIsManualInputPerformanceQuarterRealCapacityRealYieldWorkSaturationPerformanceLevel<br><span class="hljs-attribute">191</span>B-<span class="hljs-number">01946</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">3</span>.<span class="hljs-number">8181818181818180</span><span class="hljs-number">1</span>.<span class="hljs-number">234703067573610</span><span class="hljs-number">0</span>.<span class="hljs-number">1553764221168356</span>A<br><span class="hljs-attribute">192</span>B-<span class="hljs-number">01947</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">2</span>.<span class="hljs-number">9000000000000000</span><span class="hljs-number">0</span>.<span class="hljs-number">558169415157516</span><span class="hljs-number">0</span>.<span class="hljs-number">1396570045274133</span>B<br><span class="hljs-attribute">193</span>B-<span class="hljs-number">01953</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">3</span>.<span class="hljs-number">7545454545454550</span><span class="hljs-number">21</span>.<span class="hljs-number">144014548130287</span><span class="hljs-number">1</span>.<span class="hljs-number">1020818503759093</span>S<br><span class="hljs-attribute">194</span>B-<span class="hljs-number">01962</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">2</span>.<span class="hljs-number">6318181818181820</span><span class="hljs-number">3</span>.<span class="hljs-number">724766914439220</span><span class="hljs-number">0</span>.<span class="hljs-number">3096933942466470</span>B<br><span class="hljs-attribute">195</span>B-<span class="hljs-number">01965</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">4</span>.<span class="hljs-number">3363636363636370</span><span class="hljs-number">4</span>.<span class="hljs-number">839967513395080</span><span class="hljs-number">0</span>.<span class="hljs-number">2941409418006996</span>D<br><span class="hljs-attribute">196</span>B-<span class="hljs-number">01976</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">3</span>.<span class="hljs-number">6545454545454550</span><span class="hljs-number">9</span>.<span class="hljs-number">470733298575336</span><span class="hljs-number">0</span>.<span class="hljs-number">6903430017060930</span>B<br><span class="hljs-attribute">197</span>B-<span class="hljs-number">02005</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">2</span>.<span class="hljs-number">3636363636363640</span><span class="hljs-number">5</span>.<span class="hljs-number">122364662635264</span><span class="hljs-number">0</span>.<span class="hljs-number">4986870407582120</span>B<br><span class="hljs-attribute">198</span>B-<span class="hljs-number">02006</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">3</span>.<span class="hljs-number">7000000000000000</span><span class="hljs-number">5</span>.<span class="hljs-number">606239704435784</span><span class="hljs-number">0</span>.<span class="hljs-number">4057021572542080</span>A<br><span class="hljs-attribute">199</span>B-<span class="hljs-number">02008</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">1</span>.<span class="hljs-number">9772727272727270</span><span class="hljs-number">19</span>.<span class="hljs-number">069847624367282</span><span class="hljs-number">1</span>.<span class="hljs-number">7885872213177436</span>S<br><span class="hljs-attribute">200</span>B-<span class="hljs-number">02012</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">2</span>.<span class="hljs-number">5000000000000000</span><span class="hljs-number">11</span>.<span class="hljs-number">711574060042021</span><span class="hljs-number">1</span>.<span class="hljs-number">1842042415696036</span>B<br></code></pre></td></tr></table></figure><ul><li><p>问题分析：<br>  t4表查询的结果的所有键都没有索引，增加一个索引解决问题。</p></li><li><p>问题解决<br>  给表【BI_Inc_EmployeeMonthlyBills】的【PGWorkID】添加索引，效率从2~3秒缩减到1秒以内。</p></li></ul><h2 id="iView-AutoComplete"><a href="#iView-AutoComplete" class="headerlink" title="iView AutoComplete"></a>iView AutoComplete</h2><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AutoComplete</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value2&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">@<span class="hljs-attr">on-search</span>=<span class="hljs-string">&quot;filterMethod2&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;工号&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:200px&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in data2&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.value&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.workId&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item.value</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">AutoComplete</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&lt;script&gt;<br>    export default &#123;<br>        data () &#123;<br>            return &#123;<br>                value2: &#x27;&#x27;,<br>data2: [&#123;workId:&#x27;B-<span class="hljs-number">0002</span>1&#x27;,value: &#x27;B-<span class="hljs-number">0002</span>1[PG_B-<span class="hljs-number">0002</span>1]&#x27;&#125;,<br>  &#123;workId:&#x27;B-<span class="hljs-number">0002</span>2&#x27;,value: &#x27;B-<span class="hljs-number">0002</span>2[PG_B-<span class="hljs-number">0002</span>2]&#x27;&#125;,<br>  &#123;workId:&#x27;B-<span class="hljs-number">0002</span>5&#x27;,value: &#x27;B-<span class="hljs-number">0002</span>5[PG_B-<span class="hljs-number">0002</span>5]&#x27;&#125;,<br>  &#123;workId:&#x27;B-<span class="hljs-number">1003</span>6&#x27;,value: &#x27;B-<span class="hljs-number">1003</span>6[PG_B-<span class="hljs-number">0003</span>6]&#x27;&#125;,<br>  &#123;workId:&#x27;B-<span class="hljs-number">1004</span>5&#x27;,value: &#x27;B-<span class="hljs-number">1004</span>5[PG_B-<span class="hljs-number">0004</span>5]&#x27;&#125;],<br>data2Backup: [&#123;workId:&#x27;B-<span class="hljs-number">0002</span>1&#x27;,value: &#x27;B-<span class="hljs-number">0002</span>1[PG_B-<span class="hljs-number">0002</span>1]&#x27;&#125;,<br>  &#123;workId:&#x27;B-<span class="hljs-number">0002</span>2&#x27;,value: &#x27;B-<span class="hljs-number">0002</span>2[PG_B-<span class="hljs-number">0002</span>2]&#x27;&#125;,<br>  &#123;workId:&#x27;B-<span class="hljs-number">0002</span>5&#x27;,value: &#x27;B-<span class="hljs-number">0002</span>5[PG_B-<span class="hljs-number">0002</span>5]&#x27;&#125;,<br>  &#123;workId:&#x27;B-<span class="hljs-number">1003</span>6&#x27;,value: &#x27;B-<span class="hljs-number">1003</span>6[PG_B-<span class="hljs-number">0003</span>6]&#x27;&#125;,<br>  &#123;workId:&#x27;B-<span class="hljs-number">1004</span>5&#x27;,value: &#x27;B-<span class="hljs-number">1004</span>5[PG_B-<span class="hljs-number">0004</span>5]&#x27;&#125;],<br>            &#125;<br>        &#125;,<br>methods: &#123;<br>filterMethod2(value) &#123;<br><span class="hljs-comment">//debugger;</span><br>this.data2 = this.data2Backup;<br>this.data2 = this.data2.filter((item) =&gt; &#123;<br>  return item.workId.indexOf(value) !== -<span class="hljs-number">1</span>;<br>&#125;);<br><span class="hljs-comment">//option.value.toUpperCase().indexOf(value.toUpperCase()) !== -1;</span><br>&#125;<br>&#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><ul><li><p>方法定义 <strong>async</strong> 和 <strong>await</strong> 成对出现  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-title function_">findJobLevels</span>(<span class="hljs-params">workidListJson</span>)&#123;<br>    <span class="hljs-keyword">let</span> jobLevelArray = [];<br>    <span class="hljs-keyword">let</span> url = <span class="hljs-string">&#x27;http://kaoqin.bill-jc.com/wechatOA/api/salaryRate/getUserInfo&#x27;</span>;<br><br>    <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">post</span>(url, workidListJson)<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>            <span class="hljs-comment">//console.log(response.data.Data);</span><br>            response.<span class="hljs-property">data</span>.<span class="hljs-property">Data</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br>                jobLevelArray.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-title class_">WorkId</span>: item.<span class="hljs-property">workId</span>, <span class="hljs-title class_">JobLevel</span>: item.<span class="hljs-property">education</span>&#125;);<span class="hljs-comment">//jobLevel</span><br>            &#125;);<br>        &#125;)<br>        .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>        &#125;);<br><br>    <span class="hljs-keyword">return</span> jobLevelArray;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方法调用：异步的方法用异步的方式调用，在then方面里面用匿名函数处理返回的对象  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> body = &#123;<br>    <span class="hljs-string">&quot;workidList&quot;</span>: <span class="hljs-string">&quot;B-203,B-35219,B-31523,B-34142&quot;</span><br>&#125;;<br><br><br><span class="hljs-keyword">let</span> performanceResultService = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PerformanceResultService</span>(config);<br><span class="hljs-comment">// 异步的方法用异步的方式调用，在then方面里面用匿名函数处理返回的对象</span><br>performanceResultService.<span class="hljs-title function_">findJobLevels</span>(body).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>)=&gt;</span>&#123;<br>    result.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item.<span class="hljs-property">WorkId</span> + <span class="hljs-string">&quot;:&quot;</span> + item.<span class="hljs-property">JobLevel</span>)<br>    &#125;);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h2 id="多表联查"><a href="#多表联查" class="headerlink" title="多表联查"></a>多表联查</h2><ul><li><p>config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> appConfig = &#123;<br>    <span class="hljs-attr">connections</span>: &#123;<br>        <span class="hljs-string">&quot;MSSQL_CONNECTION&quot;</span>: &#123;<br>            <span class="hljs-attr">dbType</span>: <span class="hljs-string">&quot;mssql&quot;</span>,<br>            <span class="hljs-attr">connectionString</span>: &#123;<br>                <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;sa&#x27;</span>,<br>                <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;XXX&#x27;</span>,<br>                <span class="hljs-attr">server</span>: <span class="hljs-string">&#x27;10.100.254.XXX&#x27;</span>,<br>                <span class="hljs-attr">database</span>: <span class="hljs-string">&#x27;XXX&#x27;</span>,<br>                <span class="hljs-attr">port</span>: <span class="hljs-number">1433</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = appConfig<br></code></pre></td></tr></table></figure></li><li><p>emp.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Sequelize</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;sequelize&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Op</span> = <span class="hljs-title class_">Sequelize</span>.<span class="hljs-property">Op</span>;<br><span class="hljs-keyword">let</span> config = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../config&quot;</span>);<br><br><span class="hljs-keyword">const</span> sequelize = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sequelize</span>(config.<span class="hljs-property">connections</span>.<span class="hljs-property">MSSQL_CONNECTION</span>.<span class="hljs-property">connectionString</span>.<span class="hljs-property">database</span>, config.<span class="hljs-property">connections</span>.<span class="hljs-property">MSSQL_CONNECTION</span>.<span class="hljs-property">connectionString</span>.<span class="hljs-property">user</span>, config.<span class="hljs-property">connections</span>.<span class="hljs-property">MSSQL_CONNECTION</span>.<span class="hljs-property">connectionString</span>.<span class="hljs-property">password</span>, &#123;<br>    <span class="hljs-attr">host</span>: config.<span class="hljs-property">connections</span>.<span class="hljs-property">MSSQL_CONNECTION</span>.<span class="hljs-property">connectionString</span>.<span class="hljs-property">server</span>,<br>    <span class="hljs-attr">dialect</span>: <span class="hljs-string">&#x27;mssql&#x27;</span>,<br>    <span class="hljs-attr">pool</span>: &#123;<br>        <span class="hljs-attr">max</span>: <span class="hljs-number">5</span>,<br>        <span class="hljs-attr">min</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">idle</span>: <span class="hljs-number">30000</span><br>    &#125;<br>&#125;);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">DataTypes</span> = <span class="hljs-title class_">Sequelize</span>.<span class="hljs-property">DataTypes</span>;<br><br><span class="hljs-keyword">const</span> users = sequelize.<span class="hljs-title function_">define</span>(<span class="hljs-string">&#x27;u&#x27;</span>, &#123;<br>    <span class="hljs-title class_">WorkId</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-title function_">STRING</span>(<span class="hljs-number">50</span>),<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">primaryKey</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;工号&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">UserName</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">STRING</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;姓名&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">UserPWD</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">STRING</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;密码&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">CreateTime</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">BIGINT</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;记录时间&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">DepartmentID</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-title function_">STRING</span>(<span class="hljs-number">50</span>),<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;部门编号&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">MountGuardDate</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">BIGINT</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;入职时间&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">LaidOffDate</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">BIGINT</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;离职时间&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">Email</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">STRING</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;邮箱&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">Phone</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-title function_">STRING</span>(<span class="hljs-number">16</span>),<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;电话&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">IsLock</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">INTEGER</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;是否锁定&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">Gender</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-title function_">STRING</span>(<span class="hljs-number">50</span>),<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;性别&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">EmployeeType</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">INTEGER</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;员工类型&quot;</span><br>    &#125;<br>&#125;, &#123;<br>    <span class="hljs-attr">tableName</span>: <span class="hljs-string">&#x27;COM_Employee&#x27;</span><br>&#125;);<br><br><span class="hljs-keyword">const</span> organizations = sequelize.<span class="hljs-title function_">define</span>(<span class="hljs-string">&#x27;o&#x27;</span>, &#123;<br>    <span class="hljs-title class_">DepartmentID</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-title function_">STRING</span>(<span class="hljs-number">50</span>),<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">primaryKey</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;部门编号&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">DepartmentName</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">STRING</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;部门名称&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">DepartmentLeaderWorkID</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-title function_">STRING</span>(<span class="hljs-number">50</span>),<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;部门领导工号&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">DepartmentLeaderName</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-title function_">STRING</span>(<span class="hljs-number">16</span>),<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;部门领导姓名&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">ParentDepartmentID</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">STRING</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;上级部门&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">DepartmentLeaderEmail</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-title function_">STRING</span>(<span class="hljs-number">200</span>),<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;部门领导邮箱&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">DepartmentLeaderPhone</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-title function_">STRING</span>(<span class="hljs-number">16</span>),<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;部门领导电话&quot;</span><br>    &#125;<br>&#125;, &#123;<br>    <span class="hljs-attr">tableName</span>: <span class="hljs-string">&#x27;COM_Organization&#x27;</span><br>&#125;);<br>users.<span class="hljs-title function_">belongsTo</span>(organizations, &#123; <span class="hljs-attr">foreignKey</span>: <span class="hljs-string">&#x27;DepartmentID&#x27;</span>, <span class="hljs-attr">targetKey</span>: <span class="hljs-string">&#x27;DepartmentID&#x27;</span>, <span class="hljs-attr">as</span>: <span class="hljs-string">&#x27;d&#x27;</span> &#125;);<br><br>users.<span class="hljs-title function_">findAll</span>(&#123;<br>    <span class="hljs-attr">attributes</span>: [<span class="hljs-string">&#x27;WorkId&#x27;</span>, <span class="hljs-string">&#x27;UserName&#x27;</span>],<br>    <span class="hljs-attr">include</span>: [&#123;<br>        <span class="hljs-attr">model</span>: organizations,<br>        <span class="hljs-attr">as</span>: <span class="hljs-string">&#x27;d&#x27;</span>,<br>        <span class="hljs-attr">attributes</span>: [<span class="hljs-string">&#x27;DepartmentLeaderId&#x27;</span>],<br>        <span class="hljs-attr">where</span>: &#123;<br>            <span class="hljs-title class_">DepartmentLeaderWorkID</span>:  [<span class="hljs-string">&#x27;B-00010&#x27;</span>, <span class="hljs-string">&#x27;B-00011&#x27;</span>]<br>        &#125;<br>    &#125;],<br>    <span class="hljs-comment">//raw:true</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(result))<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>参考文档：<a href="https://www.cnblogs.com/hss-blog/articles/10220267.html">Sequelize 关联查询数据合并字段</a></p></li></ul><h1 id="初始化数据（员工表和部门表）"><a href="#初始化数据（员工表和部门表）" class="headerlink" title="初始化数据（员工表和部门表）"></a>初始化数据（员工表和部门表）</h1><ul><li>查询得到所有结果及关系<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">SELECT<br><span class="hljs-built_in">t1</span>.WorkId,<br><span class="hljs-built_in">t1</span>.UserName,<br><span class="hljs-built_in">t1</span>.UserPWD,<br><span class="hljs-built_in">t1</span>.CreateTime,<br><span class="hljs-built_in">t1</span>.DepartmentID,<br><span class="hljs-built_in">t2</span>.DepartmentLeaderWorkID,<br><span class="hljs-built_in">t3</span>.DepartmentLeaderWorkID ParentDepartmentLeaderWorkID,<br><span class="hljs-built_in">t1</span>.MountGuardDate,<br><span class="hljs-built_in">t1</span>.LaidOffDate,<br><span class="hljs-built_in">t1</span>.Email,<br><span class="hljs-built_in">t1</span>.Phone,<br><span class="hljs-built_in">t1</span>.IsLock,<br><span class="hljs-built_in">t1</span>.Gender,<br><span class="hljs-built_in">t1</span>.EmployeeType <br>FROM<br>COM_Employee <span class="hljs-built_in">t1</span>,<br>COM_Organization <span class="hljs-built_in">t2</span><br>LEFT <span class="hljs-keyword">JOIN </span>COM_Organization <span class="hljs-built_in">t3</span> ON <span class="hljs-built_in">t2</span>.ParentDepartmentID= <span class="hljs-built_in">t3</span>.DepartmentID <br>WHERE<br><span class="hljs-built_in">t1</span>.DepartmentID= <span class="hljs-built_in">t2</span>.DepartmentID;<br></code></pre></td></tr></table></figure></li><li>查询结果<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs subunit">WorkIdUserNameUserPWDCreateTimeDepartmentIDDepartmentLeaderWorkIDParentDepartmentLeaderWorkIDMountGuardDateLaidOffDateEmailPhoneIsLockGenderEmployeeType<br>B<span class="hljs-string">-00001</span>TE_B<span class="hljs-string">-00001</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000da520f0-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00001</span>NULL2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00001@billjc.comNULLNULLNULL1<br>B<span class="hljs-string">-00002</span>TE_B<span class="hljs-string">-00002</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000dab6280-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00002</span>NULL2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00002@billjc.comNULLNULLNULL1<br>B<span class="hljs-string">-00003</span>TL_B<span class="hljs-string">-00003</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000dac25d0-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00003</span>B<span class="hljs-string">-00001</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00003@billjc.comNULLNULLNULL2<br>B<span class="hljs-string">-00004</span>TL_B<span class="hljs-string">-00004</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000dace920-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00004</span>B<span class="hljs-string">-00002</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00004@billjc.comNULLNULLNULL2<br>B<span class="hljs-string">-00005</span>TL_B<span class="hljs-string">-00005</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000dadac70-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00005</span>B<span class="hljs-string">-00002</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00005@billjc.comNULLNULLNULL2<br>B<span class="hljs-string">-00006</span>TL_B<span class="hljs-string">-00006</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000dae48b0-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-30669</span>B<span class="hljs-string">-00001</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00006@billjc.comNULLNULLNULL2<br>B<span class="hljs-string">-00007</span>TL_B<span class="hljs-string">-00007</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000daf0c00-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00007</span>B<span class="hljs-string">-00002</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00007@billjc.comNULLNULLNULL2<br>B<span class="hljs-string">-00008</span>TL_B<span class="hljs-string">-00008</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000dafa840-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00008</span>B<span class="hljs-string">-00001</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00008@billjc.comNULLNULLNULL2<br>B<span class="hljs-string">-00009</span>TL_B<span class="hljs-string">-00009</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000db06b90-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00009</span>B<span class="hljs-string">-00002</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00009@billjc.comNULLNULLNULL2<br>B<span class="hljs-string">-00010</span>TL_B<span class="hljs-string">-00010</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000db12ee0-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00010</span>B<span class="hljs-string">-00001</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00010@billjc.comNULLNULLNULL2<br>B<span class="hljs-string">-00011</span>TL_B<span class="hljs-string">-00011</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000db1cb20-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00011</span>B<span class="hljs-string">-00001</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00011@billjc.comNULLNULLNULL2<br>B<span class="hljs-string">-00012</span>TL_B<span class="hljs-string">-00012</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000db28e70-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00012</span>B<span class="hljs-string">-00002</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00012@billjc.comNULLNULLNULL2<br>...<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Activiti6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第31周</title>
    <link href="/2019/08/12/2019Week33/"/>
    <url>/2019/08/12/2019Week33/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第31周（2019-08-12-2019-08-18）"><a href="#2019年第31周（2019-08-12-2019-08-18）" class="headerlink" title="2019年第31周（2019&#x2F;08&#x2F;12~2019&#x2F;08&#x2F;18）"></a>2019年第31周（2019&#x2F;08&#x2F;12~2019&#x2F;08&#x2F;18）</h2><ol><li><a href="https://www.jianshu.com/p/7d2e584cbcc1">node模块之xlsx使用</a></li><li><a href="https://www.cnblogs.com/yadiblogs/p/8818277.html">vue（一）使用vue-cli搭建项目</a></li><li><a href="https://blog.csdn.net/wq18512847606/article/details/80790584">vue + iview项目构建</a></li><li><a href="https://juejin.im/post/58c0e882da2f60186d6d4818">vue + iview 项目实践总结 【完】</a></li><li><a href="https://blog.csdn.net/xuehu837769474/article/details/81984937">Vue+ElementUI从零开始搭建自己的网站（一、环境搭建）</a></li><li><a href="https://blog.csdn.net/xuehu837769474/article/details/82012361">Vue+ElementUI从零开始搭建自己的网站（二、导航组件）</a></li><li><a href="https://blog.csdn.net/xuehu837769474/article/details/82012917">Vue+ElementUI从零开始搭建自己的网站（三、组件间的通信）</a></li><li><a href="https://www.cnblogs.com/andysd/p/3809960.html">SQL SERVER 2008分页</a></li><li><a href="https://hot.cnbeta.com/articles/game/878979.htm">教育类游戏前景好 美国已超越中国成为最大购买国</a></li><li><a href="https://www.cnblogs.com/peiyu1988/p/7766594.html">Nodejs MSSQL详细解读</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>game</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PowerDesigner 反向工程 - SQL Server 2008</title>
    <link href="/2019/08/08/PowerDesigner/"/>
    <url>/2019/08/08/PowerDesigner/</url>
    
    <content type="html"><![CDATA[<ul><li>PowerDesigner 反向工程 - SQL Server 2008<br><escape><span id="more"></span></escape></li></ul><p>&nbsp;</p><h2 id="反向工程"><a href="#反向工程" class="headerlink" title="反向工程"></a>反向工程</h2><ol><li><p>依次选择菜单：【File】-&gt;【Reverse Engineer】-&gt;【Database…】<br><img src="/PowerDesigner%5CPD_001.png">                                                            </p></li><li><p>【DBMS】选择【Miscrosoft SQL Server 2008】，然后点击【确定】按钮：<br><img src="/PowerDesigner%5CPD_002.png">                                                            </p></li><li><p>在【Connect to Data Source】面板中，【Data Source】选择【ODBC machine data source:】，然后点击【Configure…】按钮：<br><img src="/PowerDesigner%5CPD_003.png">                                                            </p></li><li><p>在【Configure Data Connections】面板中，选择第一个面板【ODBC Machine Data Sources】，然后点击【Add Data Source】按钮：<br><img src="/PowerDesigner%5CPD_004.png"></p></li><li><p>在弹出的【创建新数据源】面板中，选择【系统数据源(只用于当前机器)】：<br><img src="/PowerDesigner%5CPD_005.png">                                                            </p></li><li><p>接下来，选择【SQL Server】<br><img src="/PowerDesigner%5CPD_006.png">                                                            </p></li><li><p>最后，点击【完成】按钮：<br><img src="/PowerDesigner%5CPD_007.png">                                                                                                                       </p></li><li><p>在弹出的【创建到 SQL Server 的新数据源】面板中，依次输入【名称】和【服务器IP地址】：<br><img src="/PowerDesigner%5CPD_008.png">                                                            </p></li><li><p>接下来，选择【使用用户输入登录ID和密码的 SQL Server 验证】，同时输入【登录用户名】和【密码】：<br><img src="/PowerDesigner%5CPD_009.png">                                                            </p></li><li><p>接下来，不做任何修改，点击【下一步】：<br><img src="/PowerDesigner%5CPD_010.png"></p></li><li><p>最后，点击【完成】按钮，数据源创建完成：<br><img src="/PowerDesigner%5CPD_011.png">                                                            </p></li><li><p>接下来，在【ODBC Microsoft SQL Server 安装】面板中，点击【测试数据源】按钮：<br><img src="/PowerDesigner%5CPD_012.png"></p></li><li><p>测试结果：【测试成功】：<br><img src="/PowerDesigner%5CPD_013.png">                                                            </p></li><li><p>数据源创建完毕：<br><img src="/PowerDesigner%5CPD_014.png">                                                            </p></li><li><p>下拉选框中可以看到刚才创建的数据源【pdrcdb】：<br><img src="/PowerDesigner%5CPD_015.png">                                                            </p></li><li><p>选择下拉选框中的数据源，然后输入密码，点击【Connect】按钮：<br><img src="/PowerDesigner%5CPD_016.png"></p></li><li><p>回到反向工程数据源选择页面，点击【确认】按钮：<br><img src="/PowerDesigner%5CPD_017.png">                                                            </p></li><li><p>在弹出的【Database Reverse Engineering】页面中，默认会选择所有的数据库【All Databases】，同时默认勾选了【Table】选项：<br><img src="/PowerDesigner%5CPD_018.png">                                                            </p></li><li><p>选择【BJC_PDRC】数据库：<br><img src="/PowerDesigner%5CPD_019.png">                                                            </p></li><li><p>按需要选择【视图】，最后点击【OK】按钮，开始反向工程：<br><img src="/PowerDesigner%5CPD_020.png">                                                            </p></li><li><p>最终的反向工程结果：<br><img src="/PowerDesigner%5CPD_021.png"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
      <tag>PowerDesigner</tag>
      
      <tag>Reverse Engineer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第31周</title>
    <link href="/2019/07/30/2019Week31/"/>
    <url>/2019/07/30/2019Week31/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第31周（2019-07-29-2019-08-04）"><a href="#2019年第31周（2019-07-29-2019-08-04）" class="headerlink" title="2019年第31周（2019&#x2F;07&#x2F;29~2019&#x2F;08&#x2F;04）"></a>2019年第31周（2019&#x2F;07&#x2F;29~2019&#x2F;08&#x2F;04）</h2><ol><li><a href="https://github.com/fjqingyou/PotPlayer_Subtitle_Translate_Baidu">PotPlayer 字幕在线翻译插件 - 百度平台</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PotPlayer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Photoshop</title>
    <link href="/2019/07/24/Photoshop/"/>
    <url>/2019/07/24/Photoshop/</url>
    
    <content type="html"><![CDATA[<ol><li>抠图</li><li>裁剪</li><li>复制（轻移）</li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p><p><strong>任何图片都要先去掉图层锁定再进行操作</strong></p><ol><li>抠图<ol><li>选择【魔棒工具】（Shift+W）</li><li>点击需要删除的区域，然后按Delete键</li></ol></li><li>裁剪<ol><li>选择【移动工具】（Shift+V）</li><li>在有内容的图像左侧标尺区域点击向右拖动，生成垂直参考线；</li><li>在有内容的图像顶部标尺区域点击向下拖动，生成水平参考线；</li><li>选择【矩形选框工具】（Shift+M），选择需要的区域</li><li>菜单【图像】-》【裁剪】</li></ol></li><li>复制（轻移）<ol><li>选择【矩形选框工具】（Shift+M），选择需要的区域</li><li>选择【移动工具】（Shift+V）</li><li>按住【Alt】键，然后按向上或下箭头，垂直粘贴矩形区域；</li><li>按住【Alt】键，然后按向左或右箭头，水平粘贴矩形区域；</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Photoshop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Photoshop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第30周</title>
    <link href="/2019/07/22/2019Week30/"/>
    <url>/2019/07/22/2019Week30/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第30周（2019-07-22-2019-07-28）"><a href="#2019年第30周（2019-07-22-2019-07-28）" class="headerlink" title="2019年第30周（2019&#x2F;07&#x2F;22~2019&#x2F;07&#x2F;28）"></a>2019年第30周（2019&#x2F;07&#x2F;22~2019&#x2F;07&#x2F;28）</h2><ol><li><a href="https://cloud.tencent.com/developer/article/1337723">iOS使用 cocoapods 安装libwebp 错误Error installing libwebp</a></li><li><a href="https://blog.csdn.net/amberoot/article/details/80930804">Swift3.0之代码裁剪图片（只显示部分图片</a></li><li><a href="https://www.jianshu.com/p/4de39664adfa">Swift 4.2 自定义相机</a></li><li><a href="https://www.jianshu.com/p/5f5160c50a4b">iOS端支持WebP格式图片的显示及NSData、UIImage转换</a></li><li><a href="https://www.cnblogs.com/sxlfybb/p/3791973.html">Swift UIImage加载远程图片和圆角矩形</a></li><li><a href="https://cloud.tencent.com/developer/news/123268">21个免费音效素材库</a></li><li><a href="https://www.jb51.net/softs/608184.html">AddBorder(图片批量添加指定颜色边框工具) 最新绿色免费版</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webp</tag>
      
      <tag>libwebp</tag>
      
      <tag>UIImage</tag>
      
      <tag>素材</tag>
      
      <tag>Software</tag>
      
      <tag>Green</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第29周</title>
    <link href="/2019/07/17/2019Week29/"/>
    <url>/2019/07/17/2019Week29/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第29周（2019-07-15-2019-07-21）"><a href="#2019年第29周（2019-07-15-2019-07-21）" class="headerlink" title="2019年第29周（2019&#x2F;07&#x2F;15~2019&#x2F;07&#x2F;21）"></a>2019年第29周（2019&#x2F;07&#x2F;15~2019&#x2F;07&#x2F;21）</h2><ol><li><a href="https://www.cnblogs.com/cylblogs/p/7390678.html">sequelize-auto orm 自动生成models</a></li><li><a href="https://www.cnblogs.com/llcdxh/p/9721304.html">使用sequelize-auto生成sequelize的Models</a></li><li><a href="https://www.npmjs.com/package/sequelize-auto">sequelize-auto</a></li><li><a href="https://github.com/sequelize/sequelize-auto/issues/360">user not recognized when in cmd(mssql用户名认证失败)</a></li><li><a href="http://zhu329599788.lofter.com/post/1cae8994_d0eaf1a">sequelize定义实体对象 默认自动将名加S变复数</a></li><li><a href="https://convertio.co/zh/pdf-epub/">PDF到EPUB转换器</a></li><li><a href="https://sigil-ebook.com/">sigil-epub制作</a></li><li><a href="http://www.cocoachina.com/articles/10814">iOS-Core-Animation-Advanced-Techniques（一）</a></li><li><a href="http://www.cocoachina.com/articles/10816">iOS-Core-Animation-Advanced-Techniques（二）</a></li><li><a href="http://www.cocoachina.com/articles/10827">iOS-Core-Animation-Advanced-Techniques（三）</a></li><li><a href="http://www.cocoachina.com/articles/10840">iOS-Core-Animation-Advanced-Techniques(七)</a></li><li><a href="https://blog.csdn.net/liu943367080/article/details/80626721">iOS 添加自定义的字体 Fonts provided by application</a></li><li><a href="https://github.com/ronggang/PT-Plugin-Plus/wiki">PT-Plugin-Plus</a></li><li><a href="https://blog.csdn.net/mydo/article/details/79146646">Cocoa利用TexturePacker创建的纹理图集实现角色的帧动画</a></li><li><a href="http://www.hangge.com/blog/cache/detail_732.html">Swift - 使用atlas图集实现动画效果（SpriteKit游戏开发）</a></li><li><a href="https://www.cnblogs.com/apiapia/p/9512007.html">一步一步图文介绍SpriteKit使用TexturePacker导出的纹理集Altas</a></li><li><a href="https://www.jianshu.com/p/2eae8bfb5fc1">(一)宇宙大战Space Battle – 新建场景SCENE、精灵节点、PARTICLE粒子及背景音乐</a></li><li><a href="https://www.jianshu.com/p/74a52b7c03e3">(二)宇宙大战Space Battle – SpriteKit 无限循环背景Endless、SpriteKit物理碰撞、CoreMotion加速计</a></li><li><a href="https://www.jianshu.com/p/038c092b4636">(三)宇宙大战Space Battle – 场景SCENE切换、UserDefaults统计分数、Particle粒子效果</a></li><li><a href="http://www.ifiero.com/">ifiero-不错的学习SpriteKit的网站</a></li><li><a href="https://www.emanueleferonato.com/">emanueleferonato-不错的学习HTML5游戏源码网站</a></li><li><a href="https://segmentfault.com/u/catzzz/articles?page=2">SpriteKit+Swift学习笔记</a></li><li><a href="https://github.com/mogocat/balloonCat">balloonCat</a></li><li><a href="https://blog.csdn.net/iamcuilong/article/details/78982856?t=1515920221156">Win7下更改iTunes备份路径最便捷的方法(亲测win10同样适用)</a></li><li><a href="https://blog.csdn.net/a411358606/article/details/52179422">iOS逆向工程——获取app素材图片</a></li><li><a href="https://blog.csdn.net/weixin_34174422/article/details/87089334">iOS如何提取APP中的素材</a></li><li><a href="https://jingyan.baidu.com/article/a501d80c224bacec630f5edc.html">如何提取iOS App素材</a></li><li><a href="https://blog.csdn.net/weixin_34174105/article/details/90850552">如何导出 iOS App 的 .ipa 文件？</a></li><li><a href="https://blog.csdn.net/aa464971/article/details/87955711">用Apple Configurator 2提取ipa文件</a></li><li><a href="https://blog.csdn.net/weixin_43276913/article/details/84555205">MAC 命令行拷贝文件夹</a></li><li><a href="https://www.cnblogs.com/firstrate/p/6796526.html">WebP 极限压缩及ios实现</a></li><li><a href="https://www.jianshu.com/p/478d680322bf">iOS支持webp格式图片</a></li><li><a href="https://www.jianshu.com/p/f97081867cf6">iOS 展示WebP图片（通过SDWebImage实现对.webp格式图片的支持）</a></li><li><a href="https://www.jianshu.com/p/5f5160c50a4b">iOS端支持WebP格式图片的显示及NSData、UIImage转换</a></li><li><a href="https://blog.csdn.net/callzjy/article/details/68067481">Swift3播放webp</a></li><li><a href="https://github.com/SDWebImage/SDWebImageWebPCoder">SDWebImageWebPCoder</a></li><li><a href="https://github.com/SDWebImage/SDWebImage">SDWebImage</a></li><li><a href="https://www.cnblogs.com/iOSDeng/p/7890511.html">webp格式图片在iOS中的使用-YYWebImage</a></li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp -R <span class="hljs-regexp">/Users/</span>coderdream<span class="hljs-regexp">/Library/</span>Group\ Containers<span class="hljs-regexp">/K36BKF7T3D.group.com.apple.configurator/</span>Library<span class="hljs-regexp">/Caches/</span>Assets<span class="hljs-regexp">/TemporaryItems/</span>MobileApps .<br></code></pre></td></tr></table></figure><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>sequelize</tag>
      
      <tag>orm</tag>
      
      <tag>epub</tag>
      
      <tag>sigil</tag>
      
      <tag>Animation</tag>
      
      <tag>Fonts</tag>
      
      <tag>PT</tag>
      
      <tag>SpriteKit</tag>
      
      <tag>Game</tag>
      
      <tag>HTML5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第28周</title>
    <link href="/2019/07/08/2019Week28/"/>
    <url>/2019/07/08/2019Week28/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第28周（2019-07-08-x7e2019-07-14）"><a href="#2019年第28周（2019-07-08-x7e2019-07-14）" class="headerlink" title="2019年第28周（2019&#x2F;07&#x2F;08\x7e2019&#x2F;07&#x2F;14）"></a>2019年第28周（2019&#x2F;07&#x2F;08\x7e2019&#x2F;07&#x2F;14）</h2><ol><li><a href="https://www.jianshu.com/p/e2a017d97c23">1个小工具，解决无法在电脑上用微信读书并轻松做笔记写书评的难题</a></li><li><a href="https://www.cnblogs.com/lisa090818/p/4226787.html">iOS教程：Core Data数据持久性存储基础教程</a></li><li><a href="https://www.cnblogs.com/lisa090818/p/4226794.html">iOS教程：如何使用Core Data – 预加载和引入数据</a></li><li><a href="https://www.cnblogs.com/lisa090818/p/4226802.html">iOS教程：如何使用NSFetchedResultsController</a></li><li><a href="https://www.jianshu.com/p/fdb22c04339a">CoreData高能组合拳NSFetchedResultsController</a></li><li><a href="https://www.jianshu.com/p/0f8dda24468c">转载 - ios核心动画高级技巧（视觉效果）</a></li><li><a href="https://www.jianshu.com/p/a03873018b38">iOS核心动画高级技巧：第一部分-图层</a></li><li><a href="https://www.jianshu.com/p/cb7bdc5872b9">iOS核心动画高级技巧：第二部分-动画</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信读书</tag>
      
      <tag>动画</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第27周</title>
    <link href="/2019/07/02/2019Week27/"/>
    <url>/2019/07/02/2019Week27/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第27周（2019-07-01-2019-07-07）"><a href="#2019年第27周（2019-07-01-2019-07-07）" class="headerlink" title="2019年第27周（2019&#x2F;07&#x2F;01~2019&#x2F;07&#x2F;07）"></a>2019年第27周（2019&#x2F;07&#x2F;01~2019&#x2F;07&#x2F;07）</h2><ol><li><a href="https://icon.wuruihong.com/">批量生成 iOS Android 图标</a></li><li><a href="https://www.cnblogs.com/baixiaozheng/p/4989856.html">在eclipse中安装TestNG</a></li><li><a href="https://www.cnblogs.com/liguo-rong/p/8026966.html">Windows Server 2008R2 FTP服务器搭建详细图解</a></li><li><a href="https://www.jianshu.com/p/cf721e511b29">2.GoogleAdMob–Google广告 SDK</a></li><li><a href="">Google 广告投放(iOS)</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS projects</tag>
      
      <tag>图标</tag>
      
      <tag>TestNG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第26周</title>
    <link href="/2019/06/26/2019Week26/"/>
    <url>/2019/06/26/2019Week26/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第26周（2019-06-24-2019-06-30）"><a href="#2019年第26周（2019-06-24-2019-06-30）" class="headerlink" title="2019年第26周（2019&#x2F;06&#x2F;24~2019&#x2F;06&#x2F;30）"></a>2019年第26周（2019&#x2F;06&#x2F;24~2019&#x2F;06&#x2F;30）</h2><ol><li><a href="https://www.jianshu.com/p/f919b454ad2c">iOS App间文件共享</a></li><li><a href="https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html">System-Declared Uniform Type Identifiers</a></li><li><a href="https://blog.csdn.net/totogo2010/article/details/29182385">iOS App让自己的应用在其他应用中打开列表中显示</a></li><li><a href="https://blog.csdn.net/u011154007/article/details/73549134">IOS 打开预览pdf、ppt、excel、word、tet、rtf、csv格式的文件，微信文件分享</a></li><li><a href="https://blog.csdn.net/chmod_R_755/article/details/78561607">iOS文件夹共享Files</a></li><li><a href="https://blog.csdn.net/tianjiqcs/article/details/71410398">让自己开发的iOS App通过iTunes共享文件到Document目录</a></li><li><a href="https://www.jianshu.com/p/acf4232b47a1">iOS实现App之间文件分享方法</a></li><li><a href="https://juejin.im/post/5cfe40dae51d45590a445b1b">【翻译】WWDC 2019 ：优秀的开发习惯</a></li><li><a href="https://juejin.im/post/5d09a3ccf265da1b8d162078">22 个 iOS 开发热门开源项目</a></li><li><a href="https://icodesign.me/posts/swift-combine/">Swift Combine 入门导读</a></li><li><a href="https://link.juejin.im/?target=https://mp.weixin.qq.com/s/x_jFcKeXSbtdK0CnfayFsw">新晋网红SwiftUI——淘宝带你初体验</a></li><li><a href="https://github.com/joelparkerhenderson/demo_swift_excel_xlsx_reader_writer">Demo Swift Excel Xlsx Reader Writer</a></li><li><a href="https://juejin.im/post/5d09d585e51d455d6c0ad927">无侵入埋点</a></li><li><a href="https://www.jianshu.com/p/4dca6e64ef15">WWDC - SwiftUI - 初恋般的感觉</a></li><li><a href="https://www.jianshu.com/p/2e074db792ba">史上最详细的iOS之事件的传递和响应机制-原理篇</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第25周</title>
    <link href="/2019/06/17/2019Week25/"/>
    <url>/2019/06/17/2019Week25/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第25周（2019-06-17-2019-06-23）"><a href="#2019年第25周（2019-06-17-2019-06-23）" class="headerlink" title="2019年第25周（2019&#x2F;06&#x2F;17~2019&#x2F;06&#x2F;23）"></a>2019年第25周（2019&#x2F;06&#x2F;17~2019&#x2F;06&#x2F;23）</h2><ol><li><a href="https://github.com/spkingr/30-iOS-swift-projects-in-100-days">30-iOS-swift-projects-in-100-days</a></li><li><a href="https://www.jianshu.com/p/c6ae28964ad5">抓住iOS的未来 - 30天学习编写30个Swift小程序</a></li><li><a href="https://juejin.im/post/5d0a099ff265da1b8811e055">如何使用shouldRasterize属性进行性能调优</a></li><li><a href="https://juejin.im/post/5d05b45bf265da1bcc193ff4">SwiftUI or Flutter ?</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第24周</title>
    <link href="/2019/06/10/2019Week24/"/>
    <url>/2019/06/10/2019Week24/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第24周（2019-06-10-2019-06-16）"><a href="#2019年第24周（2019-06-10-2019-06-16）" class="headerlink" title="2019年第24周（2019&#x2F;06&#x2F;10~2019&#x2F;06&#x2F;16）"></a>2019年第24周（2019&#x2F;06&#x2F;10~2019&#x2F;06&#x2F;16）</h2><ol><li><a href="https://blog.csdn.net/Erice_s/article/details/80202536">Github Markdown 中的复选框按钮的实现</a></li><li><a href="https://www.jianshu.com/p/3c7995ffc4da">Swift-自定义UITableViewCell和View(XIB和纯代码)</a></li><li><a href="https://www.cnblogs.com/oxsir/p/9726602.html">Windows系统下搭建私有npm仓储服务器, 打包并推送到私有npm仓储服务器</a></li><li><a href="https://www.cnblogs.com/hai-cheng/p/8670395.html">nssm 在Windows上部署服务</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p><h2 id="Windows-系统下搭建私有-npm-仓储服务器-Sinopia"><a href="#Windows-系统下搭建私有-npm-仓储服务器-Sinopia" class="headerlink" title="Windows 系统下搭建私有 npm 仓储服务器 Sinopia"></a>Windows 系统下搭建私有 npm 仓储服务器 Sinopia</h2><ol><li><p>安装 Python</p></li><li><p>安装 NodeJs</p></li><li><p>安装 Sinopia  </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g sinopia<br></code></pre></td></tr></table></figure></li><li><p>打开端口4873端口</p><ol><li>Windows 防火墙 -&gt; 高级设置 -&gt; 入站规则 -&gt; 新建规则 -&gt; 端口 -&gt; TCP、本地特定端口：4873</li></ol></li><li><p>配置 Sinopia</p><ol><li>打开C:\Users\Administrator\AppData\Roaming\sinopia\config.yaml文件, (请将Administrator替换为你的windows用户名)</li><li>在文件末尾增加以下代码, 保存并退出   <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># listen ip and port</span><br><span class="hljs-attribute">listen</span>: <span class="hljs-number">0.0.0.0:4873</span>  <br></code></pre></td></tr></table></figure></li></ol></li><li><p>新增用户（输入用户名、密码和邮箱地址）                                        </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">npm adduser <span class="hljs-params">--registry</span> http:<span class="hljs-string">//10.100.254.163</span><span class="hljs-function">:4873</span>    <br></code></pre></td></tr></table></figure></li></ol><p><img src="/2019Week24%5C01.jpg"><br>7. 访问并登录（用户名&#x2F;密码：pdrc&#x2F;pdrc)<br><img src="/2019Week24%5C02.jpg">  </p><h2 id="使用-nssm-将-Sinopia-作为-Windows-服务开机启动"><a href="#使用-nssm-将-Sinopia-作为-Windows-服务开机启动" class="headerlink" title="使用 nssm 将 Sinopia 作为 Windows 服务开机启动"></a>使用 nssm 将 Sinopia 作为 Windows 服务开机启动</h2><ol><li><p>下载NSSM       <a href="http://www.nssm.cc/release/nssm-2.24.zip">download</a></p></li><li><p>根据自己的平台，将32&#x2F;64位nssm.exe文件解压至任意文件夹。</p></li><li><p>cmd定位至nssm.exe所在目录。</p></li><li><p>输入 nssm install {服务名称}，即注册服务的名称。注册服务弹出如下NSSM界面。<br><img src="/2019Week24%5C07.jpg">  </p></li><li><p>我们要执行的文件为sinopia.cmd， 路径为: C:\Users\Administrator\AppData\Roaming\npm\sinopia.cmd<br><img src="/2019Week24%5C03.jpg">  </p></li><li><p>完成路径配置后，Startup directory会自动配置，我们这里不用再修改，直接点击【Install service】创建服务：<br><img src="/2019Week24%5C04.jpg"></p></li><li><p>启动服务之前先修改配置，用于支持 IP 地址访问<br>打开 C:\Windows\System32\config\systemprofile\AppData\Roaming\sinopia\config.yaml 文件，在文件末尾增加以下代码, 保存并退出  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># listen ip and port</span><br><span class="hljs-attribute">listen</span>: <span class="hljs-number">0.0.0.0:4873</span> <br></code></pre></td></tr></table></figure></li><li><p>启动服务：<br><img src="/2019Week24%5C05.jpg"></p></li><li><p>启动成功后，任务管理器中有 node.exe 的进程：<br><img src="/2019Week24%5C06.jpg"></p></li><li><p>本机访问 <a href="http://10.100.254.163:4873/">http://10.100.254.163:4873</a></p></li><li><p>新增用户（输入用户名、密码和邮箱地址）   </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">npm adduser <span class="hljs-params">--registry</span> http:<span class="hljs-string">//10.100.254.163</span><span class="hljs-function">:4873</span>    <br></code></pre></td></tr></table></figure></li><li><p>创建用户成功后，其他机器就可以通过IP地址访问并登录了。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>Github</tag>
      
      <tag>Sinopia</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第23周</title>
    <link href="/2019/06/03/2019Week23/"/>
    <url>/2019/06/03/2019Week23/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第23周（2019-06-03-2019-06-09）"><a href="#2019年第23周（2019-06-03-2019-06-09）" class="headerlink" title="2019年第23周（2019&#x2F;06&#x2F;03~2019&#x2F;06&#x2F;09）"></a>2019年第23周（2019&#x2F;06&#x2F;03~2019&#x2F;06&#x2F;09）</h2><ol><li><a href="https://blog.csdn.net/qq_32768743/article/details/85713116">设置WebStorm不检测javascript分号</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dir</tag>
      
      <tag>WebStorm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 开发环境</title>
    <link href="/2019/05/29/Java_Env/"/>
    <url>/2019/05/29/Java_Env/</url>
    
    <content type="html"><![CDATA[<p><escape><span id="more"></span></escape></p><p>&nbsp;</p><h3 id="Java-环境设置之-eclipse-设置"><a href="#Java-环境设置之-eclipse-设置" class="headerlink" title="Java 环境设置之 eclipse 设置"></a>Java 环境设置之 eclipse 设置</h3><ul><li>设置文件编码格式<br><img src="/Java_Env%5Cenv_01.png">  </li><li>设置字体和大小<br><img src="/Java_Env%5Cenv_02.png">    </li><li>设置 JDK<br><img src="/Java_Env%5Cenv_03.png">    </li><li>设置 Maven 版本及安装路径<br><img src="/Java_Env%5Cenv_04.png">   </li><li>设置 Maven 配置文件路径<br><img src="/Java_Env%5Cenv_05.png">   </li><li>设置 Tomcat 安装路径<br><img src="/Java_Env%5Cenv_06.png"></li></ul><h3 id="jetty-配置"><a href="#jetty-配置" class="headerlink" title="jetty 配置"></a>jetty 配置</h3><ul><li><p>pom.xml</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>jetty-demo<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-war-plugin --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">packagingExcludes</span>&gt;</span>WEB-INF/lib/*.jar<span class="hljs-tag">&lt;/<span class="hljs-name">packagingExcludes</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- Run As : maven build : Goals : mybatis-generator:generate -D mybatis.generator.overwrite=true --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">verbose</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">verbose</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">skip</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">skip</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-maven-plugin --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.eclipse.jetty<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.4.7.v20170914<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">scanIntervalSeconds</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">scanIntervalSeconds</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">httpConnector</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>8088<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">idleTimeout</span>&gt;</span>60000<span class="hljs-tag">&lt;/<span class="hljs-name">idleTimeout</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">httpConnector</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">webApp</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">contextPath</span>&gt;</span>/$</span><span class="hljs-template-variable">&#123;project.build.finalName&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">contextPath</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">webApp</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>执行 Maven 命令：<br>在工程的pom.xml文件上点击【右键】-&gt; 【Run As】 -&gt; 【3 Maven build…】，在命令 Goals 中, 输入jetty:run 命令开始启动jetty，同时将项目部署到jetty中。</p></li><li><p>参考文档：<a href="https://jingyan.baidu.com/article/d3b74d64f07e101f77e60906.html">如何将maven项目发布到jetty中</a></p></li></ul><h3 id="applicationContext-xml-编译报错"><a href="#applicationContext-xml-编译报错" class="headerlink" title="applicationContext.xml 编译报错"></a>applicationContext.xml 编译报错</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cvc-complex-<span class="hljs-keyword">type</span><span class="hljs-number">.2</span><span class="hljs-number">.4</span>.c: The matching wildcard <span class="hljs-keyword">is</span> <span class="hljs-keyword">strict</span>, but <span class="hljs-keyword">no</span> declaration can be <span class="hljs-built_in">found</span> <span class="hljs-keyword">for</span> element <span class="hljs-string">&#x27;context:component-scan&#x27;</span>.<br><br>cvc-complex-<span class="hljs-keyword">type</span><span class="hljs-number">.2</span><span class="hljs-number">.4</span>.c: The matching wildcard <span class="hljs-keyword">is</span> <span class="hljs-keyword">strict</span>, but <span class="hljs-keyword">no</span> declaration can be <span class="hljs-built_in">found</span> <span class="hljs-keyword">for</span> element <span class="hljs-string">&#x27;aop:aspectj-autoproxy&#x27;</span>.<br></code></pre></td></tr></table></figure><ul><li>指定版本号<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans<br>        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<br>        http://www.springframework.org/schema/context<br>        http://www.springframework.org/schema/context/spring-context-4.3.xsd<br>        http://www.springframework.org/schema/aop<br>        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd<br>        http://www.springframework.org/schema/tx<br>        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd&quot;<br></code></pre></td></tr></table></figure></li></ul><h3 id="testng-xml报错"><a href="#testng-xml报错" class="headerlink" title="testng.xml报错"></a>testng.xml报错</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">Referenced file contains errors (http://testng.org/testng-1.0.dtd).  <br>For more information, right click on the message in the Problems View and select &quot;Show Details...&quot;<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">The content of element <span class="hljs-built_in">type</span> <span class="hljs-string">&quot;context&quot;</span> <span class="hljs-keyword">is</span> incomplete, it must <span class="hljs-keyword">match</span> <span class="hljs-comment">&quot;(property*,plugin*,commentGenerator?,(connectionFactory|</span><br>jdbcConnection),javaTypeResolver?,javaModelGenerator,sqlMapGenerator?,javaClientGenerator?,table+)<span class="hljs-comment">&quot;.</span><br></code></pre></td></tr></table></figure><ul><li><p>table 标签至少有一个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--生成对应表及类名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> </span><br></code></pre></td></tr></table></figure></li><li><p>Maven install 报错</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">[ERROR] Failed to<span class="hljs-built_in"> execute </span>goal org.apache.maven.plugins:maven-compiler-plugin:3.1:compile (default-compile) on project pdrc: Compilation failure<br>[ERROR] No compiler is provided in this environment. Perhaps you are running on a JRE rather than a JDK?<br>[ERROR] -&gt; [Help 1]<br></code></pre></td></tr></table></figure></li><li><p>启动Tomcat报错</p></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">五月 <span class="hljs-number">29</span>, <span class="hljs-number">2019</span> <span class="hljs-number">10</span>:<span class="hljs-number">40</span>:<span class="hljs-number">12</span> 上午 org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardContext</span> listenerStart<br>严重: Error configuring application listener of class <span class="hljs-selector-attr">[org.springframework.web.util.Log4jConfigListener]</span><br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ClassNotFoundException</span>: org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.Log4jConfigListener</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.loader</span><span class="hljs-selector-class">.WebappClassLoaderBase</span><span class="hljs-selector-class">.loadClass</span>(WebappClassLoaderBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1285</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.loader</span><span class="hljs-selector-class">.WebappClassLoaderBase</span><span class="hljs-selector-class">.loadClass</span>(WebappClassLoaderBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1119</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.DefaultInstanceManager</span><span class="hljs-selector-class">.loadClass</span>(DefaultInstanceManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">512</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.DefaultInstanceManager</span><span class="hljs-selector-class">.loadClassMaybePrivileged</span>(DefaultInstanceManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">493</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.DefaultInstanceManager</span><span class="hljs-selector-class">.newInstance</span>(DefaultInstanceManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">119</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardContext</span><span class="hljs-selector-class">.listenerStart</span>(StandardContext<span class="hljs-selector-class">.java</span>:<span class="hljs-number">4667</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardContext</span><span class="hljs-selector-class">.startInternal</span>(StandardContext<span class="hljs-selector-class">.java</span>:<span class="hljs-number">5207</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.LifecycleBase</span><span class="hljs-selector-class">.start</span>(LifecycleBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">150</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span>.ContainerBase<span class="hljs-variable">$StartChild</span><span class="hljs-selector-class">.call</span>(ContainerBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1419</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span>.ContainerBase<span class="hljs-variable">$StartChild</span><span class="hljs-selector-class">.call</span>(ContainerBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1409</span>)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.FutureTask</span><span class="hljs-selector-class">.run</span>(Unknown Source)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.ThreadPoolExecutor</span><span class="hljs-selector-class">.runWorker</span>(Unknown Source)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span>.ThreadPoolExecutor<span class="hljs-variable">$Worker</span><span class="hljs-selector-class">.run</span>(Unknown Source)<br>at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.run</span>(Unknown Source)<br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//localhost:8088/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第22周</title>
    <link href="/2019/05/27/2019Week22/"/>
    <url>/2019/05/27/2019Week22/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第22周（2019-05-27-2019-05-31）"><a href="#2019年第22周（2019-05-27-2019-05-31）" class="headerlink" title="2019年第22周（2019&#x2F;05&#x2F;27~2019&#x2F;05&#x2F;31）"></a>2019年第22周（2019&#x2F;05&#x2F;27~2019&#x2F;05&#x2F;31）</h2><ol><li><a href="https://baike.so.com/doc/10040871-10521086.html">用 dir 查看一个目录下所有文件和文件夹的大小</a></li><li><a href="https://blog.csdn.net/qq_33658067/article/details/52757777">使用tree命令导出windows的文件夹&#x2F;文件的目录树</a></li><li><a href="https://www.cnblogs.com/libra0920/p/6394003.html">eclipse启动项目报错：java.lang.ClassNotFoundException: ContextLoaderListener</a></li><li><a href="https://blog.csdn.net/jiegegeaa1/article/details/81543427">运用Maven将web项目部署到jetty（IDEA 环境）</a></li><li><a href="https://jingyan.baidu.com/article/d3b74d64f07e101f77e60906.html">如何将maven项目发布到jetty中（eclipse 环境）</a></li><li><a href="https://www.cnblogs.com/qiaojie/p/5560388.html">Sublime Text3 配置 NodeJs 环境</a></li><li><a href="https://www.cnblogs.com/xinglejun/p/10682847.html">Sublime Text3 最新版3207 安装及破解</a></li><li><a href="https://www.jianshu.com/p/23b823d6e786">解决 Sublime Text3 packagecontrol.io 无法访问的问题</a></li></ol><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><ol><li><a href="https://noahgilmore.com/blog/uibutton-padding/">UIButton: Padding Between Image and Text</a></li><li><a href="https://www.jianshu.com/p/78bbcc15eac3">SpriteKit中SKSpriteNode拖动的简单实现</a></li><li><a href="https://juejin.im/post/5ceba9af6fb9a07ece67ae6d">iOS 常用布局方式之Frame</a></li><li><a href="https://www.jianshu.com/p/0455f7a9ebe8">iOS UIButton根据内容自动布局</a></li><li><a href="https://www.jianshu.com/p/0cc657becbe9">SpriteKit框架之浅谈物理引擎</a></li><li><a href="https://www.jianshu.com/p/aff13f3355f4">SpriteKit之浅谈AnchorPoint(锚点)的使用</a></li></ol><h3 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h3><ol><li><a href="https://www.jianshu.com/p/e3922cac9cfe">1.UIKit框架（一） —— UIKit动力学和移动效果（一）</a></li><li><a href="https://www.jianshu.com/p/82d1532c32d0">2.UIKit框架（二） —— UIKit动力学和移动效果（二）</a></li><li><a href="https://github.com/CoderDream/iOS_Best_Practice/tree/master/UIKitDemo/01">UIKit动力学和移动效果笔记</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dir</span> /a /s &gt;&gt; 002.txt<br></code></pre></td></tr></table></figure><h2 id="Sublime-Text3-配置-NodeJs-环境-笔记"><a href="#Sublime-Text3-配置-NodeJs-环境-笔记" class="headerlink" title="Sublime Text3 配置 NodeJs 环境 笔记"></a>Sublime Text3 配置 NodeJs 环境 笔记</h2><ul><li><p>找到nodejs的安装目录</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">CoderDreamdeiMac:~ coderdream$ which <span class="hljs-keyword">node</span><br><span class="hljs-title">/usr</span>/local/bin/<span class="hljs-keyword">node</span><span class="hljs-title"></span><br></code></pre></td></tr></table></figure></li><li><p>Nodejs.sublime-settings 修改结果  </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&#123;<br>  <span class="hljs-string">//</span> save before running commands<br>  <span class="hljs-string">&quot;save_first&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-string">//</span> <span class="hljs-keyword">if</span> present, use this <span class="hljs-keyword">command</span> instead of plain <span class="hljs-string">&quot;node&quot;</span><br>  <span class="hljs-string">//</span> e.g. <span class="hljs-string">&quot;/usr/bin/node&quot;</span> or <span class="hljs-string">&quot;C:\bin\node.exe&quot;</span><br>  <span class="hljs-string">&quot;node_command&quot;</span>: <span class="hljs-string">&quot;/usr/local/bin/node&quot;</span>, <span class="hljs-string">//</span>   <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">//</span> Same for NPM <span class="hljs-keyword">command</span><br>  <span class="hljs-string">&quot;npm_command&quot;</span>: <span class="hljs-string">&quot;/usr/local/bin/npm&quot;</span>, <span class="hljs-string">//</span> <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">//</span> as &#x27;NODE_PATH&#x27; environment variable for node runtime<br>  <span class="hljs-string">&quot;node_path&quot;</span>: <span class="hljs-literal">false</span>,<br><br>  <span class="hljs-string">&quot;expert_mode&quot;</span>: <span class="hljs-literal">false</span>,<br><br>  <span class="hljs-string">&quot;output_to_new_tab&quot;</span>: <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Nodejs.sublime-build 修改encoding 为 utf8  和 osx （路径与实际一致即可，参考上面的路径）</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nsis">&#123;<br>  <span class="hljs-string">&quot;cmd&quot;</span>: [<span class="hljs-string">&quot;node&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span>],<br>  <span class="hljs-string">&quot;file_regex&quot;</span>: <span class="hljs-string">&quot;^[ ]*File \&quot;</span>(...*?)\<span class="hljs-string">&quot;, line ([0-9]*)&quot;</span>,<br>  <span class="hljs-string">&quot;selector&quot;</span>: <span class="hljs-string">&quot;source.js&quot;</span>,<br>  <span class="hljs-string">&quot;shell&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-string">&quot;encoding&quot;</span>: <span class="hljs-string">&quot;utf8&quot;</span>,//<span class="hljs-string">&quot;cp1252&quot;</span>,<br>  <span class="hljs-string">&quot;windows&quot;</span>:<br>    &#123;<br>        <span class="hljs-string">&quot;shell_cmd&quot;</span>: <span class="hljs-string">&quot;taskkill /F /IM node.exe &amp; node <span class="hljs-variable">$file</span>&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;linux&quot;</span>:<br>    &#123;<br>        <span class="hljs-string">&quot;shell_cmd&quot;</span>: <span class="hljs-string">&quot;killall node; /usr/bin/env node <span class="hljs-variable">$file</span>&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;osx&quot;</span>:<br>    &#123;<br>        <span class="hljs-string">&quot;shell_cmd&quot;</span>: <span class="hljs-string">&quot;killall node; /usr/local/bin/env node <span class="hljs-variable">$file</span>&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tree</tag>
      
      <tag>dir</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sudoku</title>
    <link href="/2019/05/24/iOS_Game/"/>
    <url>/2019/05/24/iOS_Game/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://github.com/cokecoffe/sudoku">sudoku</a></li><li><a href="https://github.com/coding2233/UnitySudoku">UnitySudoku</a></li><li><a href="https://github.com/CoderDream/ZZSudoku">ZZSudoku</a></li><li><a href="https://u19006311.pipipan.com/fs/19006311-326792217">数独从入门到精通_慕容漪汐_中国纺织_2016.10.zip</a></li></ol><p><escape><span id="more"></span></escape>  </p>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sudoku</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpriteKit</title>
    <link href="/2019/05/24/SpriteKit/"/>
    <url>/2019/05/24/SpriteKit/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://www.jianshu.com/p/1184f4d52b77">SpriteKit之轻量级瓦片地图生成工具SDmapNode详解</a></li><li><a href="https://www.jianshu.com/p/0ab9bb735ec2">SpriteKit框架之浅谈瓦片地图简介以及TML地图文件的创建使用</a></li><li><a href="https://www.jianshu.com/p/493686eaf0d7">SpriteKit框架之浅谈节点碰撞的实现</a></li><li><a href="https://www.jianshu.com/p/ee0d9b1077cc">SpriteKit框架之SKPhysicsBody的移动和连接</a></li><li><a href="https://www.jianshu.com/p/4046bab3a63d">SpriteKit框架之关于物理引擎属性的那点事</a></li><li><a href="https://www.jianshu.com/p/0cc657becbe9">SpriteKit框架之浅谈物理引擎 (2016.08.30 19:22)</a></li><li><a href="https://www.jianshu.com/p/78bbcc15eac3">SpriteKit中SKSpriteNode拖动的简单实现(2016.08.26 20:29)</a></li><li><a href="https://www.jianshu.com/p/2efc153200c9">SpriteKit框架之最全动作介绍 没有之一(2016.08.26 20:27)</a></li><li><a href="https://developer.apple.com/documentation/spritekit">Apple Sprite Kit</a></li><li><a href="https://www.jianshu.com/p/493686eaf0d7">SpriteKit框架之浅谈节点碰撞的实现(2016.09.01 10:38)</a></li><li><a href="https://www.jianshu.com/p/78bbcc15eac3">SpriteKit中SKSpriteNode拖动的简单实现(2016.08.26 20:29)</a></li><li><a href="https://github.com/KirstenDunst/SpriteKitGame">KirstenDunst&#x2F;SpriteKitGame</a></li><li><a href="https://www.raywenderlich.com/71-spritekit-tutorial-for-beginners">SpriteKit Tutorial for Beginners</a></li><li><a href="https://blog.csdn.net/kmyhy/article/details/78182569">如何用 Sprite Kit 和 Swift 制作一个逃逸游戏-第一部分</a></li><li><a href="https://blog.csdn.net/kmyhy/article/details/78182611">如何用 Sprite Kit 和 Swift 制作一个逃逸游戏-第二部分</a></li><li><a href="https://blog.csdn.net/colouful987/article/category/2898663">Sprite Kit(用Swift做个游戏)</a></li><li><a href="https://blog.csdn.net/silk_bar/article/category/6175612">swift实战入门-手把手教你编写2048</a></li></ol><p><escape><span id="more"></span></escape>  </p>]]></content>
    
    
    <categories>
      
      <category>SpriteKit</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpriteKit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第21周</title>
    <link href="/2019/05/20/2019Week21/"/>
    <url>/2019/05/20/2019Week21/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第21周（2019-05-20-2019-05-26）"><a href="#2019年第21周（2019-05-20-2019-05-26）" class="headerlink" title="2019年第21周（2019&#x2F;05&#x2F;20~2019&#x2F;05&#x2F;26）"></a>2019年第21周（2019&#x2F;05&#x2F;20~2019&#x2F;05&#x2F;26）</h2><ol><li><a href="https://baike.so.com/doc/10040871-10521086.html">WBS - 工作分解结构</a></li><li><a href="https://www.jianshu.com/p/235bc6c3ca77">使用 Charles 获取 https 的数据</a></li><li><a href="https://juejin.im/post/5cc5ca4ae51d456e2446fd38?utm_source=gold_browser_extension">iOS应用模块化的思考及落地方案（一）模块的划分及模块化工作流程</a></li><li><a href="https://www.jianshu.com/p/470b9ad2d1a0">五一流水(2016)</a></li><li><a href="https://www.jianshu.com/p/ee9505460b71">iOS-Instuments使用详解</a></li><li><a href="https://www.jianshu.com/p/ba08804ce056">一名一线开发对于App架构和组件化的思考</a></li><li><a href="https://www.jianshu.com/p/3ed4151d928c">从0到1实现一个模块间通信的服务组件</a></li><li><a href="https://www.cnblogs.com/longiang7510/p/5867805.html">优化UITableViewCell高度计算的那些事</a></li><li><a href="https://zhidao.baidu.com/question/1049840751738563139.html">Mac下Zip压缩包解压后文件名出现乱码，怎么解决</a></li><li><a href="http://www.pc6.com/mac/113482.html">The Unarchiver Mac版 V4.1.0</a></li><li><a href="https://jingyan.baidu.com/article/495ba84109975338b30edee7.html">怎么将VUZ格式电子书转PDF 有妙法</a></li><li><a href="https://baijiahao.baidu.com/s?id=1627235697905043031">如何做出的包子馒头又白又大，松软还好吃</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>WBS</tag>
      
      <tag>摄影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第20周</title>
    <link href="/2019/05/13/2019Week20/"/>
    <url>/2019/05/13/2019Week20/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第20周（2019-05-13-2019-05-20）"><a href="#2019年第20周（2019-05-13-2019-05-20）" class="headerlink" title="2019年第20周（2019&#x2F;05&#x2F;13~2019&#x2F;05&#x2F;20）"></a>2019年第20周（2019&#x2F;05&#x2F;13~2019&#x2F;05&#x2F;20）</h2><ol><li><a href="https://juejin.im/post/5cd4e784f265da038733bc4b">马蜂窝 iOS App 启动治理：回归用户体验</a></li><li><a href="https://jingyan.baidu.com/article/215817f7a49ef61eda142300.html">Adobe Acrobat DC怎样添加水印？</a></li><li><a href="https://www.cnbeta.com/articles/tech/845015.htm">Google I&#x2F;O 2019全纪录 : AI惊艳Android Q 真香 还有两款新硬件</a></li><li><a href="https://juejin.im/post/5cd053b051882541332f5bdb">Audio Unit: iOS中最底层最强大音频控制API</a></li><li><a href="https://www.cnblogs.com/weiqt/articles/1826847.html">SQL Server中使用convert进行日期转换</a></li><li><a href="https://juejin.im/post/5ccc7d3fe51d453afc760317">搞事情之 Vapor 初探</a></li><li><a href="https://jingyan.baidu.com/article/fdbd4277b0b81fb89e3f48b7.html">手机版b站下载的视频在文件夹哪里</a></li><li><a href="https://jingyan.baidu.com/article/215817f74703191eda142384.html">如何将blv格式文件转为MP4格式文件</a></li><li><a href="https://www.94afx.com/a/diannaoruanjian/193.html">字幕通YeeCaption破解版|中文破解版（全功能版本）</a></li><li><a href="https://blog.csdn.net/jinshelj/article/details/84543635">Beyond Compare v4.2.8 Build 23479 32bit+64bit windows破解版</a></li><li><a href="https://www.luochenzhimu.com/archives/4814.html">文件对比 Beyond Compare v4.2.9 (build 23626) for Win&amp;Mac&amp;Linux</a></li><li><a href="https://blog.csdn.net/liitdar/article/details/79908464">beyond compare 4常见问题及相关配置</a></li><li><a href="http://www.hao7di.com/ruanjian/changyongxiaoruanjian/432.html">BeyondCompare(4.2.7)绿色破解版，文件对比神器</a></li><li><a href="https://blog.csdn.net/sinat_29891353/article/details/83989038">BeyondCompare this license key has been revoked: 1822-9597解决办法 </a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS项目</tag>
      
      <tag>BeyondCompare</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第18周</title>
    <link href="/2019/04/29/2019Week18/"/>
    <url>/2019/04/29/2019Week18/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第18周（2019-04-29-2019-05-05）"><a href="#2019年第18周（2019-04-29-2019-05-05）" class="headerlink" title="2019年第18周（2019&#x2F;04&#x2F;29~2019&#x2F;05&#x2F;05）"></a>2019年第18周（2019&#x2F;04&#x2F;29~2019&#x2F;05&#x2F;05）</h2><ol><li><a href="https://www.jianshu.com/p/f2be1fcb77d3">高仿喜马拉雅项目 - Swift5版本</a></li><li><a href="https://www.jianshu.com/p/01ca73387481">(Swift) iOS Apps with REST APIs(序列)</a></li><li><a href="https://www.v2ex.com/t/558050#reply53">40 老码农分享下半年的全站开发的故事</a></li><li><a href="https://www.v2ex.com/t/494517">2 天时间用 Swift 撸了一个捷径分享小站</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ETL 作业</title>
    <link href="/2019/04/26/ETL_Job/"/>
    <url>/2019/04/26/ETL_Job/</url>
    
    <content type="html"><![CDATA[<ul><li>作业<br><escape><span id="more"></span></escape></li></ul><p>&nbsp;</p><h2 id="创建作业"><a href="#创建作业" class="headerlink" title="创建作业"></a>创建作业</h2><ul><li><p>新建作业<br><img src="/ETL_Job%5Csnap0001.png">  </p></li><li><p>作业详情<br><img src="/ETL_Job%5Csnap0002.png">  </p></li><li><p>作业步骤<br><img src="/ETL_Job%5Csnap0003.png">  </p></li><li><p>作业步骤属性<br><img src="/ETL_Job%5Csnap0004.png"></p></li><li><p>作业计划<br><img src="/ETL_Job%5Csnap0005.png">  </p></li><li><p>计划详情<br><img src="/ETL_Job%5Csnap0006.png">  </p></li><li><p>作业开始步骤菜单<br><img src="/ETL_Job%5Csnap0007.png">  </p></li><li><p>开始执行作业<br><img src="/ETL_Job%5Csnap0008.png">  </p></li><li><p>作业执行中<br><img src="/ETL_Job%5Csnap0009.png">  </p></li><li><p>作业执行完成<br><img src="/ETL_Job%5Csnap0010.png"></p></li><li><p>查看作业历史记录菜单<br><img src="/ETL_Job%5Csnap0011.png">  </p></li><li><p>作业日志列表<br><img src="/ETL_Job%5Csnap0012.png"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ETL</tag>
      
      <tag>Job</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ETL 小技巧</title>
    <link href="/2019/04/26/ETL_Tips/"/>
    <url>/2019/04/26/ETL_Tips/</url>
    
    <content type="html"><![CDATA[<ul><li>生成随机数</li><li>弹窗<br><escape><span id="more"></span></escape></li></ul><p>&nbsp;</p><h2 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C#">Random random = <span class="hljs-keyword">new</span> Random();<br><span class="hljs-built_in">int</span> n = random.Next(<span class="hljs-number">75</span>, <span class="hljs-number">250</span>);   <span class="hljs-comment">//生成75-250之间的随机数</span><br><span class="hljs-built_in">decimal</span> ran = (<span class="hljs-built_in">decimal</span>) n / <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><h2 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a>弹窗</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">using</span> System.Windows.Forms;<br><br>MessageBox.Show(ran.ToString());<br></code></pre></td></tr></table></figure><h2 id="日期相关"><a href="#日期相关" class="headerlink" title="日期相关"></a>日期相关</h2><ul><li><p>日期计算  </p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">DateTime</span> dt = <span class="hljs-built_in">DateTime</span>.Now;<br><span class="hljs-comment">//Dts.Variables[&quot;CurrentDate&quot;].Value = dt;</span><br><span class="hljs-comment">//DateTime </span><br><span class="hljs-comment">//dt = new DateTime(2019, 12, 15);</span><br><span class="hljs-comment">//string dtString = dt.ToString();</span><br><span class="hljs-comment">//MessageBox.Show(dtString);</span><br><span class="hljs-built_in">DateTime</span> lastFinancialDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DateTime</span>(dt.Year, dt.Month, <span class="hljs-number">1</span>);<br><span class="hljs-comment">//lastFinancialDate = lastFinancialDate.AddMonths(-1);</span><br><span class="hljs-built_in">DateTime</span> dataStartDate = lastFinancialDate.AddMonths(<span class="hljs-number">-1</span>); <span class="hljs-comment">// new DateTime(dt.Year, dt.Month, 1);</span><br><span class="hljs-built_in">DateTime</span> dataEndDate = lastFinancialDate.AddDays(<span class="hljs-number">-1</span>);<br></code></pre></td></tr></table></figure></li><li><p>获取日期字符串</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">string queryDateTime <span class="hljs-operator">=</span> DateTime.Now.ToString(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>)<span class="hljs-comment">; //  fff</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ETL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ETL 最佳实践之计算产能偏差</title>
    <link href="/2019/04/25/ETL_CalcCapacityDeviation/"/>
    <url>/2019/04/25/ETL_CalcCapacityDeviation/</url>
    
    <content type="html"><![CDATA[<ul><li>生成产品维度数据</li><li>刷新 Project_Detail 表的上一个版本的项目ID<br><escape><span id="more"></span></escape></li></ul><p>&nbsp;</p><h1 id="查找项目列表"><a href="#查找项目列表" class="headerlink" title="查找项目列表"></a>查找项目列表</h1><ul><li><p>查询脚本  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>a.ProjectID,<br>b.[WorkID],<br>d.[PK_日期],<br>c.RecordDate,<br>c.[BSD],<br>c.[RealCapacity],<br>c.[CapacityDeviation],<br>e.[AddDate],<br>e.[InDate],<br>e.[DelDate]<br><span class="hljs-keyword">FROM</span><br>Project_Detail a<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> HumanMap b <br><span class="hljs-keyword">ON</span> a.ProjectID <span class="hljs-operator">=</span> b.ProjectID<br><span class="hljs-keyword">JOIN</span> PDRC_A_DATE d <br><span class="hljs-keyword">ON</span> d.[PK_日期]<span class="hljs-operator">&gt;=</span>b.InPro_Date <br><span class="hljs-keyword">AND</span> d.[PK_日期]<span class="hljs-operator">&lt;=</span>b.OutPro_Date<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> DEV_BSD_IDLE c <br><span class="hljs-keyword">ON</span> b.WORKID <span class="hljs-operator">=</span> c.WORKID <br><span class="hljs-keyword">AND</span> c.RecordDate<span class="hljs-operator">&lt;=</span>b.OutPro_Date <br><span class="hljs-keyword">AND</span> c.RecordDate<span class="hljs-operator">=</span>d.[PK_日期]<br><span class="hljs-keyword">JOIN</span> RC_DEV_AEGIS e <br><span class="hljs-keyword">ON</span> b.WORKID <span class="hljs-operator">=</span> e.WORKID<br></code></pre></td></tr></table></figure></li><li><p>结构图<br><img src="/ETL_CalcCapacityDeviation%5Csnap0101.png"></p></li><li><p>结构图<br><img src="/ETL_CalcCapacityDeviation%5Csnap0102.png"></p></li></ul><h1 id="生成产品维度数据"><a href="#生成产品维度数据" class="headerlink" title="生成产品维度数据"></a>生成产品维度数据</h1><h2 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h2><ol><li>数据库：BI 库  </li><li>涉及的表：<ul><li>Project_Detail</li><li>HumanMap</li><li>PDRC_A_DATE</li><li>DEV_BSD_IDLE</li><li>RC_DEV_AEGIS</li></ul></li></ol><p>对于缺少考勤的数据，默认为全天的产能</p>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSIS</tag>
      
      <tag>ETL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第17周</title>
    <link href="/2019/04/22/2019Week17/"/>
    <url>/2019/04/22/2019Week17/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第17周（2019-04-22-2019-04-28）"><a href="#2019年第17周（2019-04-22-2019-04-28）" class="headerlink" title="2019年第17周（2019&#x2F;04&#x2F;22~2019&#x2F;04&#x2F;28）"></a>2019年第17周（2019&#x2F;04&#x2F;22~2019&#x2F;04&#x2F;28）</h2><ol><li><a href="https://blog.csdn.net/wstoneh01/article/details/50578331">SQL Server中的四舍五入函数ROUND</a></li><li><a href="https://www.cnblogs.com/gudujianxiao/archive/2012/02/10/2344198.html">SSIS的控制流之For循环容器</a></li><li><a href="http://www.885.com/a/245669.html">你适合炒股吗？到底什么样的人最适合炒股呢？</a></li><li><a href="https://www.jianshu.com/p/7339031f2257">60 余家免费正版图片网站，应该是目前最全的的集合了</a></li><li><a href="https://blog.csdn.net/u010178308/article/details/84281447">SQL SERVER跨服务器(跨库)查询</a></li></ol><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><ul><li><a href="https://bbs.csdn.net/topics/390545868">安装SQLserver2008r2出现“试图执行未经授权的操作”</a><br>安装时取消对兼容模式的勾选，重新安装就可以了。</li></ul><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
      <tag>SSIS</tag>
      
      <tag>股票</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第15周</title>
    <link href="/2019/04/09/2019Week15/"/>
    <url>/2019/04/09/2019Week15/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第15周（2019-04-08-2019-04-014）"><a href="#2019年第15周（2019-04-08-2019-04-014）" class="headerlink" title="2019年第15周（2019&#x2F;04&#x2F;08~2019&#x2F;04&#x2F;014）"></a>2019年第15周（2019&#x2F;04&#x2F;08~2019&#x2F;04&#x2F;014）</h2><ol><li><a href="http://www.cnblogs.com/yao62995/p/5773578.html">Tensorflow 图解分析 （Session, Graph, Kernels, Devices）</a></li><li><a href="https://www.jianshu.com/p/3536990b86b7">iOS-设计模式详解</a></li><li><a href="https://www.jianshu.com/p/4fbaebeb77ea">iOS-性能优化总结(附实例)</a></li><li><a href="http://wereadteam.github.io/2016/05/03/WeRead-Performance/">微信读书 iOS 性能优化总结</a></li><li><a href="http://www.cocoachina.com/bbs/read.php?tid=1683991">xcode 7.3.1 真机测试出错</a></li><li><a href="https://jingyan.baidu.com/article/e2284b2b906adee2e7118d61.html">iPhone6如何快速还原网络设置</a></li><li><a href="http://www.w3school.com.cn/sql/func_datediff.asp">SQL Server DATEDIFF() 函数</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tensorflow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第14周</title>
    <link href="/2019/04/01/2019Week14/"/>
    <url>/2019/04/01/2019Week14/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第14周（2019-04-01-2019-04-07）"><a href="#2019年第14周（2019-04-01-2019-04-07）" class="headerlink" title="2019年第14周（2019&#x2F;04&#x2F;01~2019&#x2F;04&#x2F;07）"></a>2019年第14周（2019&#x2F;04&#x2F;01~2019&#x2F;04&#x2F;07）</h2><ol><li><a href="https://www.jianshu.com/p/f50a6830f83c">iOS移动开发没人要了？</a></li><li><a href="https://www.jianshu.com/p/b7f7f3831354">奶香十足的豆沙包和糖三角，粗粮也能甜蜜蜜</a></li><li><a href="https://www.jianshu.com/p/7ed5840fa3d9">4月我家最爱的素菜，一周吃3回，每次上桌最先抢光，比肉还受欢迎</a></li><li><a href="https://bujige.net/blog/Recite-10000-Vocabulary.html">拒绝速食鸡汤，程序员的『10000』单词之路</a></li><li><a href="https://blog.csdn.net/u012551928/article/details/81094698">vmware 安装的苹果系统 安装tools不成功和无法适应分辨率问题</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第131周</title>
    <link href="/2019/03/29/2019Week13/"/>
    <url>/2019/03/29/2019Week13/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第13周（2019-03-25-2019-03-31）"><a href="#2019年第13周（2019-03-25-2019-03-31）" class="headerlink" title="2019年第13周（2019&#x2F;03&#x2F;25~2019&#x2F;03&#x2F;31）"></a>2019年第13周（2019&#x2F;03&#x2F;25~2019&#x2F;03&#x2F;31）</h2><ol><li><a href="http://bbs.pcbeta.com/viewthread-1802992-1-1.html">授人以渔用原版dmg镜像制作可在虚拟机安装的cdr苹果系统镜像</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1694153-1-16.html">macOS 懒人版制作app</a></li><li><a href="http://d11.applex.net/macos/10.14.x/Install.macOS.Mojave.10.14.4.08.dmg">macOS.Mojave.10.14.4.08.dmg</a></li><li><a href="https://www.cnbeta.com/articles/tech/832201.htm">华为2018年财报：净利润593亿元 同比增长25.1%</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CDR</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SourceTree</title>
    <link href="/2019/03/14/SourceTree/"/>
    <url>/2019/03/14/SourceTree/</url>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ol><li><a href="https://product-downloads.atlassian.com/software/sourcetree/ga/Sourcetree_3.1.1_213.zip">Windows</a></li><li><a href="https://product-downloads.atlassian.com/software/sourcetree/ga/Sourcetree_3.1.2_216.zip">Mac</a></li></ol><h2 id="生成秘钥文件"><a href="#生成秘钥文件" class="headerlink" title="生成秘钥文件"></a>生成秘钥文件</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">$ ssh-keygen -t rsa -<span class="hljs-keyword">b</span> <span class="hljs-number">4096</span> -C <span class="hljs-string">&quot;coderdream@gmail.com&quot;</span><br></code></pre></td></tr></table></figure><h2 id="将秘钥内容添加到-GitHub-中："><a href="#将秘钥内容添加到-GitHub-中：" class="headerlink" title="将秘钥内容添加到 GitHub 中："></a>将秘钥内容添加到 GitHub 中：</h2><ul><li>秘钥地址：C:\Users\xxx\.ssh\id_rsa.pub</li><li><a href="https://github.com/settings/ssh/new">SSH keys &#x2F; Add new</a></li></ul><h2 id="系统设置："><a href="#系统设置：" class="headerlink" title="系统设置："></a>系统设置：</h2><ul><li><p>SSH客户端配置，客户端选择【OpenSSH】：<br>  <img src="/SourceTree%5Csnap0001.png"></p></li><li><p>添加 GitHub 账户：<br>  <img src="/SourceTree%5Csnap0002.png"></p></li></ul><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SourceTree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第11周</title>
    <link href="/2019/03/11/2019Week11/"/>
    <url>/2019/03/11/2019Week11/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第11周（2019-03-11-2019-03-17）"><a href="#2019年第11周（2019-03-11-2019-03-17）" class="headerlink" title="2019年第11周（2019&#x2F;03&#x2F;11~2019&#x2F;03&#x2F;17）"></a>2019年第11周（2019&#x2F;03&#x2F;11~2019&#x2F;03&#x2F;17）</h2><ol><li><a href="https://www.cnblogs.com/ljhdo/p/5174681.html">SSIS 数据类型和类型转换</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSIS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cocoapods</title>
    <link href="/2019/03/08/CocoaPods/"/>
    <url>/2019/03/08/CocoaPods/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://www.jianshu.com/p/90ca71b3b94a">Pods &#x2F;usr&#x2F;bin&#x2F;git clone https://github.com/CocoaPods/Specs.git master</a></li><li><a href="https://mirror.tuna.tsinghua.edu.cn/help/CocoaPods/">清华大学 CocoaPods 镜像使用帮助</a></li><li><a href="https://www.cnblogs.com/zhuyanboyue/p/6118950.html">CocoaPods最新安装及跳过pod setup快速安装教程</a></li><li><a href="https://blog.csdn.net/iotjin/article/details/81603148">首次 pod setup 慢解决方案</a></li><li><a href="https://www.jianshu.com/p/98ff07ecf4b8">CocoaPods 的简单快速安装方法</a></li><li><a href="https://www.jianshu.com/p/1bb0ad42cb2e">CocoaPods安装 详细</a></li><li><a href="https://gems.ruby-china.com/">RubyGems 镜像</a></li><li><a href="https://www.cnblogs.com/chuancheng/p/8443677.html">iOS安装CocoaPods详细过程</a></li><li><a href="https://www.jianshu.com/p/a1a1d4e549e6">使用国内镜像下载cocoapods -&gt;master</a></li><li><a href="http://cocoapodscn.com/">COCOAPODSCN.COM SPECS 中国镜像站</a></li></ol><h3 id="Cocoapods-使用技巧"><a href="#Cocoapods-使用技巧" class="headerlink" title="Cocoapods 使用技巧"></a>Cocoapods 使用技巧</h3><p>每次我们执行pod install、pod update时都会更新整个specs库，这样非常费时，所以想在不更新specs库的前提下安装三方库。<br>只有当觉得specs库太旧了之后或者specs库里面找不到某个三方库时才进行更新specs库。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">pod install --<span class="hljs-keyword">verbose</span> --<span class="hljs-keyword">no</span>-repo-<span class="hljs-keyword">update</span><br>pod <span class="hljs-keyword">update</span> --<span class="hljs-keyword">verbose</span> --<span class="hljs-keyword">no</span>-repo-<span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure><p>作者：SuperDanny<br>链接：<a href="https://www.jianshu.com/p/098a7dcf67e4">https://www.jianshu.com/p/098a7dcf67e4</a><br>来源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。  </p><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CocoaPods</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第10周</title>
    <link href="/2019/03/05/2019Week10/"/>
    <url>/2019/03/05/2019Week10/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第10周（2019-03-04-2019-03-10）"><a href="#2019年第10周（2019-03-04-2019-03-10）" class="headerlink" title="2019年第10周（2019&#x2F;03&#x2F;04~2019&#x2F;03&#x2F;10）"></a>2019年第10周（2019&#x2F;03&#x2F;04~2019&#x2F;03&#x2F;10）</h2><ol><li><a href="http://blog.sina.com.cn/s/blog_61d7fba70102wzaf.html">文件快拷工具FastCopy的基本操作</a></li><li><a href="https://blog.csdn.net/wuwo333/article/details/81005135">千万级别文件Copy工具</a></li><li><a href="https://blog.csdn.net/fyq891014/article/details/50935807">Foxmail7.2 账号帐号邮件备份和恢复</a></li><li><a href="https://zhidao.baidu.com/question/556714047.html">如何屏蔽adobe激活服务器 ？</a></li><li><a href="https://jingyan.baidu.com/article/925f8cb8a15813c0dde056f8.html">Adblock使用简明教程</a></li><li><a href="https://www.jianshu.com/p/f71457a2a70c">Chrome插件</a></li><li><a href="https://blog.csdn.net/xueqiang03/article/details/80702771">64位Navicat Premium 12.0.29安装、激活与使用教程</a></li><li><a href="https://blog.csdn.net/xuhongyuan2010/article/details/46287329">SQL取前几条数据</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chrome</tag>
      
      <tag>FastCopy</tag>
      
      <tag>Foxmail</tag>
      
      <tag>Navicat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第9周</title>
    <link href="/2019/02/26/2019Week09/"/>
    <url>/2019/02/26/2019Week09/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第9周（2019-02-25-2019-03-03）"><a href="#2019年第9周（2019-02-25-2019-03-03）" class="headerlink" title="2019年第9周（2019&#x2F;02&#x2F;25~2019&#x2F;03&#x2F;03）"></a>2019年第9周（2019&#x2F;02&#x2F;25~2019&#x2F;03&#x2F;03）</h2><ol><li><a href="https://www.tpyyes.com/a/object-c_ios/2018/0628/644.html">UIImageView异步加载网络图片并显示图片的方法示例_Swift 4教程</a></li><li><a href="https://www.jianshu.com/p/d8c3477f4dc3">4.IOS(swift)-scrollView(tableView) ·图片加载逻辑的优化</a></li><li><a href="https://post.smzdm.com/p/a997840o/">追剧、办公、看小说…7个网站，让你万事无忧</a>  </li><li><a href="https://post.smzdm.com/p/aqnd04zk/">前员工告诉你，怎么撸交行信用卡的羊毛</a>  </li><li><a href="https://post.smzdm.com/p/a6lnw65o/">瞒天过海，移花接木—分享一下我心中十五部顶级的高智商犯罪电影</a>  </li><li><a href="https://test.smzdm.com/pingce/p/70126446/">入坑8年的烘培老鸟带你了解，拥有1台【顶配台式蒸烤箱】是怎样的一种体验？</a> </li><li><a href="https://blog.csdn.net/hbblzjy/article/details/53392135">Swift基础之使用Alamofire库进行网络请求和断点下载</a> </li><li><a href="https://www.cnblogs.com/jukaiit/p/9283498.html">【iOS开发】Alamofire框架的使用一 —— 基本用法</a> </li><li><a href="https://www.jianshu.com/p/f8c3adb056cf">【iOS开发】Alamofire框架的使用一 —— 基本用法</a></li><li><a href="https://www.jianshu.com/p/903b678d2d3f">【iOS开发】Alamofire框架的使用二 —— 高级用法</a> </li><li><a href="https://www.cnblogs.com/Amoyios/p/6288440.html">Alamofire 4.0 迁移指南</a> </li><li><a href="https://www.jianshu.com/p/f05cb2d24555">AlamoFire的使用(下载队列，断点续传)</a> </li><li><a href="https://www.cnblogs.com/LiuChengLi/p/4862541.html">iOS9 http不能访问网络——在Xcode中将https改成http方式</a> </li><li><a href="https://blog.csdn.net/kuangdacaikuang/article/details/80687004">swift 4 tableViewCell动态加载网络图片问题处理</a> </li><li><a href="https://blog.csdn.net/u014636932/article/details/74913498">iOS开发学习笔记之swift3.0几种加载网络图片的方法</a> </li><li><a href="https://www.cnblogs.com/Jenaral/p/5722431.html">Alamofire 框架浅析</a> </li><li><a href="https://blog.csdn.net/hello_hwc/article/details/72853786">Alamofire的设计之道</a> </li><li><a href="https://cloud.tencent.com/developer/article/1332607">用 Swift 编写网络层单元测试</a> </li><li><a href="https://www.jianshu.com/p/07b1ec36a689">Swift Alamofire</a> </li><li><a href="https://www.jianshu.com/p/78c106db4530">Alamofire 使用心得</a> </li><li><a href="https://blog.csdn.net/SunFlowerInRain/article/details/76207022">翻译_Alamofire的使用教程</a> </li><li><a href="https://blog.csdn.net/difffate/article/details/77945239">PowerDesigner显示Comment注释</a> </li><li><a href="https://github.com/Quick/Quick/blob/master/Documentation/zh-cn/ArrangeActAssert.md">编写高效的 XCTest 测试: Arrange，Act 和 Assert</a> </li><li><a href="https://onevcat.com/2014/02/ios-test-with-kiwi/">TDD的iOS开发初步以及Kiwi使用入门</a> </li><li><a href="https://www.raywenderlich.com/1752-unit-testing-tutorial-mocking-objects">Unit Testing Tutorial: Mocking Objects</a> </li><li><a href="https://www.jianshu.com/p/36c5682da0f7">如何为网络接口编写单元测试</a> </li><li><a href="https://www.jianshu.com/p/c54f0cc08c20">iOS单元测试和UI测试</a> </li><li><a href="https://www.jianshu.com/p/f13fc6aed467">使用swift给objc项目做单元测试</a> </li><li><a href="https://cloud.tencent.com/developer/article/1332605">开源项目——『看知乎』iOS 版</a> </li><li><a href="https://cloud.tencent.com/developer/article/1332611">Swift API 设计指南（上）</a> </li><li><a href="https://cloud.tencent.com/developer/article/1332612">Swift API 设计指南（下）</a> </li><li><a href="https://cloud.tencent.com/developer/article/1332615">试水 Mac 开发 —— 代码生成器</a> </li><li><a href="https://www.jianshu.com/p/6d090e9cdf15">Swift性能的一些测试</a> </li><li><a href="https://www.jianshu.com/p/be32739d8aae">iOS如何开始单元测试（swift版）</a> </li><li><a href="https://www.cnblogs.com/wolfman4secret/p/5078036.html">Swift中的单元测试</a> </li><li><a href="https://www.jianshu.com/p/56c916bbfad1">一些好用swift三方框架</a> </li><li><a href="https://juejin.im/post/5c6a0b6ef265da2de660f83f">用这些 iOS 技巧让你的 APP 性能更佳</a> </li><li><a href="https://juejin.im/post/5c6a0abaf265da2dc675a9b2">Swift：通过示例避免内存泄漏</a> </li><li><a href="https://juejin.im/post/5c653aa6e51d457fbf5dc298">来一次有侧重点的区分Swift与Objective-C</a> </li><li><a href="https://juejin.im/post/5c62caf6e51d457fc905dd75">AppDelegate的模块化+瘦身</a> </li><li><a href="https://www.jianshu.com/p/4522a4cf9fc9">Swift下UserDefaults的常见使用和注意事项</a>   </li><li><a href="https://www.cnblogs.com/hanivy/p/7550666.html">SublimeText 批量清除空行</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>23种设计模式及案例整理分享</title>
    <link href="/2019/02/21/DesignPatternIntroduce/"/>
    <url>/2019/02/21/DesignPatternIntroduce/</url>
    
    <content type="html"><![CDATA[<h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><ul><li><a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F">创建型模式</a><ul><li><a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F">工厂模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F">抽象工厂模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">单例模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F">建造者模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F">原型模式</a></li></ul></li><li><a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F">结构型模式</a>  <ul><li><a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F">适配器模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F">装饰器模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F">代理模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F">外观模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F">桥接模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F">组合模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F">享元模式</a></li></ul></li><li><a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F">行为型模式</a><ul><li><a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F">策略模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F">模板模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F">观察者模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F">迭代器模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F">责任链模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F">命令模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F">备忘录模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F">状态模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F">访问者模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F">中介者模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F">解释器模式</a></li></ul></li></ul><p>&nbsp;<br><escape><span id="more"></span></escape></p><p><img src="/DesignPatternIntroduce%5C640.jpg"></p><hr><h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h1><hr><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p><ul><li>详解<br><strong>意图</strong>：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。<br><strong>主要解决</strong>：主要解决接口选择的问题。<br><strong>何时使用</strong>：我们明确地计划不同条件下创建不同实例时。<br><strong>如何解决</strong>：让其子类实现工厂接口，返回的也是一个抽象的产品。<br><strong>关键代码</strong>：创建过程在其子类执行。<br><strong>应用实例</strong>： 1、您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。 2、Hibernate 换数据库只需换方言和驱动就可以。<br><strong>优点</strong>： 1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。<br><strong>缺点</strong>：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。<br><strong>使用场景</strong>： 1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。 2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。 3、设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。<br><strong>注意事项</strong>：作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</li></ul><hr><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p><ul><li>详解<br><strong>意图</strong>：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。<br><strong>主要解决</strong>：主要解决接口选择的问题。<br><strong>何时使用</strong>：系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。<br><strong>如何解决</strong>：在一个产品族里面，定义多个产品。<br><strong>关键代码</strong>：在一个工厂里聚合多个同类产品。<br><strong>应用实例</strong>：工作了，为了参加一些聚会，肯定有两套或多套衣服吧，比如说有商务装（成套，一系列具体产品）、时尚装（成套，一系列具体产品），甚至对于一个家庭来说，可能有商务女装、商务男装、时尚女装、时尚男装，这些也都是成套的，即一系列具体产品。假设一种情况（现实中是不存在的，要不然，没法进入共产主义了，但有利于说明抽象工厂模式），在您的家中，某一个衣柜（具体工厂）只能存放某一种这样的衣服（成套，一系列具体产品），每次拿这种成套的衣服时也自然要从这个衣柜中取出了。用 OO 的思想去理解，所有的衣柜（具体工厂）都是衣柜类的（抽象工厂）某一个，而每一件成套的衣服又包括具体的上衣（某一具体产品），裤子（某一具体产品），这些具体的上衣其实也都是上衣（抽象产品），具体的裤子也都是裤子（另一个抽象产品）。<br><strong>优点</strong>：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。<br><strong>缺点</strong>：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。<br><strong>使用场景</strong>： 1、QQ 换皮肤，一整套一起换。 2、生成不同操作系统的程序。<br><strong>注意事项</strong>：产品族难扩展，产品等级易扩展。</li></ul><hr><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><blockquote><p>注意：<br>1、单例类只能有一个实例。<br>2、单例类必须自己创建自己的唯一实例。<br>3、单例类必须给所有其他对象提供这一实例。  </p></blockquote><ul><li>详解<br><strong>意图</strong>：保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br><strong>主要解决</strong>：一个全局使用的类频繁地创建与销毁。<br><strong>何时使用</strong>：当您想控制实例数目，节省系统资源的时候。<br><strong>如何解决</strong>：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。<br><strong>关键代码</strong>：构造函数是私有的。<br><strong>应用实例</strong>： 1、一个党只能有一个主席。 2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。 3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。<br><strong>优点</strong>： 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。 2、避免对资源的多重占用（比如写文件操作）。<br><strong>缺点</strong>：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。<br><strong>使用场景</strong>： 1、要求生产唯一序列号。 2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 3、创建的一个对象需要消耗的资源过多，比如 I&#x2F;O 与数据库的连接等。<br><strong>注意事项</strong>：getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</li></ul><hr><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p><ul><li>详解<br><strong>意图</strong>：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。<br><strong>主要解决</strong>：主要解决在软件系统中，有时候面临着”一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。<br><strong>何时使用</strong>：一些基本部件不会变，而其组合经常变化的时候。<br><strong>如何解决</strong>：将变与不变分离开。<br><strong>关键代码</strong>：建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。<br><strong>应用实例</strong>： 1、去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的”套餐”。 2、JAVA 中的 StringBuilder。<br><strong>优点</strong>： 1、建造者独立，易扩展。 2、便于控制细节风险。<br><strong>缺点</strong>： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。<br><strong>使用场景</strong>： 1、需要生成的对象具有复杂的内部结构。 2、需要生成的对象内部属性本身相互依赖。<br><strong>注意事项</strong>：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</li></ul><hr><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p><ul><li>详解<br><strong>意图</strong>：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。<br><strong>主要解决</strong>：在运行期建立和删除原型。<br><strong>何时使用</strong>： 1、当一个系统应该独立于它的产品创建，构成和表示时。 2、当要实例化的类是在运行时刻指定时，例如，通过动态装载。 3、为了避免创建一个与产品类层次平行的工厂类层次时。 4、当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。<br><strong>如何解决</strong>：利用已有的一个原型对象，快速地生成和原型对象一样的实例。<br><strong>关键代码</strong>： 1、实现克隆操作，在 JAVA 继承 Cloneable，重写 clone()，在 .NET 中可以使用 Object 类的 MemberwiseClone() 方法来实现对象的浅拷贝或通过序列化的方式来实现深拷贝。 2、原型模式同样用于隔离类对象的使用者和具体类型（易变类）之间的耦合关系，它同样要求这些”易变类”拥有稳定的接口。<br><strong>应用实例</strong>： 1、细胞分裂。 2、JAVA 中的 Object clone() 方法。<br><strong>优点</strong>： 1、性能提高。 2、逃避构造函数的约束。<br><strong>缺点</strong>： 1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。 2、必须实现 Cloneable 接口。<br><strong>使用场景</strong>： 1、资源优化场景。 2、类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。 3、性能和安全要求的场景。 4、通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。 5、一个对象多个修改者的场景。 6、一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。 7、在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与 Java 融为浑然一体，大家可以随手拿来使用。<br><strong>注意事项</strong>：与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现 Cloneable，重写，深拷贝是通过实现 Serializable 读取二进制流。</li></ul><hr><h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><hr><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。<br>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。<br>我们通过下面的实例来演示适配器模式的使用。其中，音频播放器设备只能播放 mp3 文件，通过使用一个更高级的音频播放器来播放 vlc 和 mp4 文件。</p><ul><li>详解<br><strong>意图</strong>：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。<br><strong>主要解决</strong>：主要解决在软件系统中，常常要将一些”现存的对象”放到新的环境中，而新环境要求的接口是现对象不能满足的。<br><strong>何时使用</strong>： 1、系统需要使用现有的类，而此类的接口不符合系统的需要。 2、想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。 3、通过接口转换，将一个类插入另一个类系中。（比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现飞的接口。）<br><strong>如何解决</strong>：继承或依赖（推荐）。<br><strong>关键代码</strong>：适配器继承或依赖已有的对象，实现想要的目标接口。<br><strong>应用实例</strong>： 1、美国电器 110V，中国 220V，就要有一个适配器将 110V 转化为 220V。 2、JAVA JDK 1.1 提供了 Enumeration 接口，而在 1.2 中提供了 Iterator 接口，想要使用 1.2 的 JDK，则要将以前系统的 Enumeration 接口转化为 Iterator 接口，这时就需要适配器模式。 3、在 LINUX 上运行 WINDOWS 程序。 4、JAVA 中的 jdbc。<br><strong>优点</strong>： 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。<br><strong>缺点</strong>： 1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。 2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。<br><strong>使用场景</strong>：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。<br><strong>注意事项</strong>：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。</li></ul><hr><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。<br>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。<br>我们通过下面的实例来演示装饰器模式的用法。其中，我们将把一个形状装饰上不同的颜色，同时又不改变形状类。</p><ul><li>详解<br><strong>意图</strong>：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。<br><strong>主要解决</strong>：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。<br><strong>何时使用</strong>：在不想增加很多子类的情况下扩展类。<br><strong>如何解决</strong>：将具体功能职责划分，同时继承装饰者模式。<br><strong>关键代码</strong>： 1、Component 类充当抽象角色，不应该具体实现。 2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。<br><strong>应用实例</strong>： 1、孙悟空有 72 变，当他变成”庙宇”后，他的根本还是一只猴子，但是他又有了庙宇的功能。 2、不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。<br><strong>优点</strong>：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。<br><strong>缺点</strong>：多层装饰比较复杂。<br><strong>使用场景</strong>： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。<br><strong>注意事项</strong>：可代替继承。</li></ul><hr><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。<br>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p><ul><li>详解<br><strong>意图</strong>：为其他对象提供一种代理以控制对这个对象的访问。<br><strong>主要解决</strong>：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。<br><strong>何时使用</strong>：想在访问一个类时做一些控制。<br><strong>如何解决</strong>：增加中间层。<br><strong>关键代码</strong>：实现与被代理类组合。<br><strong>应用实例</strong>： 1、Windows 里面的快捷方式。 2、猪八戒去找高翠兰结果是孙悟空变的，可以这样理解：把高翠兰的外貌抽象出来，高翠兰本人和孙悟空都实现了这个接口，猪八戒访问高翠兰的时候看不出来这个是孙悟空，所以说孙悟空是高翠兰代理类。 3、买火车票不一定在火车站买，也可以去代售点。 4、一张支票或银行存单是账户中资金的代理。支票在市场交易中用来代替现金，并提供对签发人账号上资金的控制。 5、spring aop。<br><strong>优点</strong>： 1、职责清晰。 2、高扩展性。 3、智能化。<br><strong>缺点</strong>： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。<br><strong>使用场景</strong>：按职责来划分，通常有以下使用场景： 1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理。<br><strong>注意事项</strong>： 1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。 2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</li></ul><hr><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p>外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。<br>这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。</p><ul><li>详解<br><strong>意图</strong>：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。<br><strong>主要解决</strong>：降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。<br><strong>何时使用</strong>： 1、客户端不需要知道系统内部的复杂联系，整个系统只需提供一个”接待员”即可。 2、定义系统的入口。<br><strong>如何解决</strong>：客户端不与系统耦合，外观类与系统耦合。<br><strong>关键代码</strong>：在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。<br><strong>应用实例</strong>： 1、去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。 2、JAVA 的三层开发模式。<br><strong>优点</strong>： 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。<br><strong>缺点</strong>：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。<br><strong>使用场景</strong>： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。<br><strong>注意事项</strong>：在层次化结构中，可以使用外观模式定义系统中每一层的入口。</li></ul><hr><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。<br>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。<br>我们通过下面的实例来演示桥接模式（Bridge Pattern）的用法。其中，可以使用相同的抽象类方法但是不同的桥接实现类，来画出不同颜色的圆。</p><ul><li>详解<br><strong>意图</strong>：将抽象部分与实现部分分离，使它们都可以独立的变化。<br><strong>主要解决</strong>：在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。<br><strong>何时使用</strong>：实现系统可能有多个角度分类，每一种角度都可能变化。<br><strong>如何解决</strong>：把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。<br><strong>关键代码</strong>：抽象类依赖实现类。<br><strong>应用实例</strong>： 1、猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择。 2、墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。<br><strong>优点</strong>： 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。<br><strong>缺点</strong>：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。<br><strong>使用场景</strong>： 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。<br><strong>注意事项</strong>：对于两个独立变化的维度，使用桥接模式再适合不过了。</li></ul><hr><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p>组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。<br>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。<br>我们通过下面的实例来演示组合模式的用法。实例演示了一个组织中员工的层次结构。</p><ul><li>详解<br><strong>意图</strong>：将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。<br><strong>主要解决</strong>：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。<br><strong>何时使用</strong>： 1、您想表示对象的部分-整体层次结构（树形结构）。 2、您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。<br><strong>如何解决</strong>：树枝和叶子实现统一接口，树枝内部组合该接口。<br><strong>关键代码</strong>：树枝内部组合该接口，并且含有内部属性 List，里面放 Component。<br><strong>应用实例</strong>： 1、算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作数、操作符和另一个操作数。 2、在 JAVA AWT 和 SWING 中，对于 Button 和 Checkbox 是树叶，Container 是树枝。<br><strong>优点</strong>： 1、高层模块调用简单。 2、节点自由增加。<br><strong>缺点</strong>：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。<br><strong>使用场景</strong>：部分、整体场景，如树形菜单，文件、文件夹的管理。<br><strong>注意事项</strong>：定义时为具体类。</li></ul><hr><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。<br>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。我们将通过创建 5 个对象来画出 20 个分布于不同位置的圆来演示这种模式。由于只有 5 种可用的颜色，所以 color 属性被用来检查现有的 Circle 对象。</p><ul><li>详解<br><strong>意图</strong>：运用共享技术有效地支持大量细粒度的对象。<br><strong>主要解决</strong>：在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。<br><strong>何时使用</strong>： 1、系统中有大量对象。 2、这些对象消耗大量内存。 3、这些对象的状态大部分可以外部化。 4、这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。 5、系统不依赖于这些对象身份，这些对象是不可分辨的。<br><strong>如何解决</strong>：用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。<br><strong>关键代码</strong>：用 HashMap 存储这些对象。<br><strong>应用实例</strong>： 1、JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。 2、数据库的数据池。<br><strong>优点</strong>：大大减少对象的创建，降低系统的内存，使效率提高。<br><strong>缺点</strong>：提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。<br><strong>使用场景</strong>： 1、系统有大量相似对象。 2、需要缓冲池的场景。<br><strong>注意事项</strong>： 1、注意划分外部状态和内部状态，否则可能会引起线程安全问题。 2、这些类必须有一个工厂对象加以控制。</li></ul><hr><h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1><hr><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。<br>在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p><hr><ul><li>详解<br><strong>意图</strong>：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。<br><strong>主要解决</strong>：在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。<br><strong>何时使用</strong>：一个系统有许多许多类，而区分它们的只是他们直接的行为。<br><strong>如何解决</strong>：将这些算法封装成一个一个的类，任意地替换。<br><strong>关键代码</strong>：实现同一个接口。<br><strong>应用实例</strong>： 1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。 2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。 3、JAVA AWT 中的 LayoutManager。<br><strong>优点</strong>： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。<br><strong>缺点</strong>： 1、策略类会增多。 2、所有策略类都需要对外暴露。<br><strong>使用场景</strong>： 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 2、一个系统需要动态地在几种算法中选择一种。 3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。<br><strong>注意事项</strong>：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</li></ul><hr><h2 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h2><p>在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式&#x2F;模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。</p><ul><li>详解<br><strong>意图</strong>：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。<br><strong>主要解决</strong>：一些方法通用，却在每一个子类都重新写了这一方法。<br><strong>何时使用</strong>：有一些通用的方法。<br><strong>如何解决</strong>：将这些通用算法抽象出来。<br><strong>关键代码</strong>：在抽象类实现，其他步骤在子类实现。<br><strong>应用实例</strong>： 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。 3、spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。<br><strong>优点</strong>： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。<br><strong>缺点</strong>：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。<br><strong>使用场景</strong>： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。<br><strong>注意事项</strong>：为防止恶意操作，一般模板方法都加上 final 关键词。</li></ul><hr><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。</p><ul><li>详解<br><strong>意图</strong>：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。<br><strong>主要解决</strong>：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。<br><strong>何时使用</strong>：一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。<br><strong>如何解决</strong>：使用面向对象技术，可以将这种依赖关系弱化。<br><strong>关键代码</strong>：在抽象类里有一个 ArrayList 存放观察者们。<br><strong>应用实例</strong>： 1、拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。 2、西游记里面悟空请求菩萨降服红孩儿，菩萨洒了一地水招来一个老乌龟，这个乌龟就是观察者，他观察菩萨洒水这个动作。<br><strong>优点</strong>： 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。<br><strong>缺点</strong>： 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。<br><strong>使用场景</strong>：<br>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。<br>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。<br>一个对象必须通知其他对象，而并不知道这些对象是谁。<br>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。<br><strong>注意事项</strong>： 1、JAVA 中已经有了对观察者模式的支持类。 2、避免循环引用。 3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</li></ul><hr><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><p>迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。<br>迭代器模式属于行为型模式。</p><ul><li>详解<br><strong>意图</strong>：提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。<br><strong>主要解决</strong>：不同的方式来遍历整个整合对象。<br><strong>何时使用</strong>：遍历一个聚合对象。<br><strong>如何解决</strong>：把在元素之间游走的责任交给迭代器，而不是聚合对象。<br><strong>关键代码</strong>：定义接口：hasNext, next。<br><strong>应用实例</strong>：JAVA 中的 iterator。<br><strong>优点</strong>： 1、它支持以不同的方式遍历一个聚合对象。 2、迭代器简化了聚合类。 3、在同一个聚合上可以有多个遍历。 4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。<br><strong>缺点</strong>：由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。<br><strong>使用场景</strong>： 1、访问一个聚合对象的内容而无须暴露它的内部表示。 2、需要为聚合对象提供多种遍历方式。 3、为遍历不同的聚合结构提供一个统一的接口。<br><strong>注意事项</strong>：迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据。</li></ul><hr><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p>顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。<br>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p><ul><li>详解<br><strong>意图</strong>：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。<br><strong>主要解决</strong>：职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。<br><strong>何时使用</strong>：在处理消息的时候以过滤很多道。<br><strong>如何解决</strong>：拦截的类都实现统一接口。<br><strong>关键代码</strong>：Handler 里面聚合它自己，在 HanleRequest 里判断是否合适，如果没达到条件则向下传递，向谁传递之前 set 进去。<br><strong>应用实例</strong>： 1、红楼梦中的”击鼓传花”。 2、JS 中的事件冒泡。 3、JAVA WEB 中 Apache Tomcat 对 Encoding 的处理，Struts2 的拦截器，jsp servlet 的 Filter。<br><strong>优点</strong>： 1、降低耦合度。它将请求的发送者和接收者解耦。 2、简化了对象。使得对象不需要知道链的结构。 3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 4、增加新的请求处理类很方便。<br><strong>缺点</strong>： 1、不能保证请求一定被接收。 2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 3、可能不容易观察运行时的特征，有碍于除错。<br><strong>使用场景</strong>： 1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。 2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。 3、可动态指定一组对象处理请求。<br><strong>注意事项</strong>：在 JAVA WEB 中遇到很多应用。</li></ul><hr><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p><ul><li>详解<br><strong>意图</strong>：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。<br><strong>主要解决</strong>：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。<br><strong>何时使用</strong>：在某些场合，比如要对行为进行”记录、撤销&#x2F;重做、事务”等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将”行为请求者”与”行为实现者”解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。<br><strong>如何解决</strong>：通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。<br><strong>关键代码</strong>：定义三个角色：1、received 真正的命令执行对象 2、Command 3、invoker 使用命令对象的入口<br><strong>应用实例</strong>：struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于 Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。<br><strong>优点</strong>： 1、降低了系统耦合度。 2、新的命令可以很容易添加到系统中去。<br><strong>缺点</strong>：使用命令模式可能会导致某些系统有过多的具体命令类。<br><strong>使用场景</strong>：认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。<br><strong>注意事项</strong>：系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作，也可以考虑使用命令模式，见命令模式的扩展。</li></ul><hr><h2 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h2><p>备忘录模式（Memento Pattern）保存一个对象的某个状态，以便在适当的时候恢复对象。备忘录模式属于行为型模式。</p><ul><li>详解<br><strong>意图</strong>：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。<br><strong>主要解决</strong>：所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。<br><strong>何时使用</strong>：很多时候我们总是需要记录一个对象的内部状态，这样做的目的就是为了允许用户取消不确定或者错误的操作，能够恢复到他原先的状态，使得他有”后悔药”可吃。<br><strong>如何解决</strong>：通过一个备忘录类专门存储对象状态。<br><strong>关键代码</strong>：客户不与备忘录类耦合，与备忘录管理类耦合。<br><strong>应用实例</strong>： 1、后悔药。 2、打游戏时的存档。 3、Windows 里的 ctri + z。 4、IE 中的后退。 4、数据库的事务管理。<br><strong>优点</strong>： 1、给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 2、实现了信息的封装，使得用户不需要关心状态的保存细节。<br><strong>缺点</strong>：消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。<br><strong>使用场景</strong>： 1、需要保存&#x2F;恢复数据的相关状态场景。 2、提供一个可回滚的操作。<br><strong>注意事项</strong>： 1、为了符合迪米特原则，还要增加一个管理备忘录的类。 2、为了节约内存，可使用原型模式+备忘录模式。</li></ul><hr><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><p>在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。<br>在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象。</p><ul><li>详解<br><strong>意图</strong>：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。<br><strong>主要解决</strong>：对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。<br><strong>何时使用</strong>：代码中包含大量与对象状态有关的条件语句。<br><strong>如何解决</strong>：将各种具体的状态类抽象出来。<br><strong>关键代码</strong>：通常命令模式的接口中只有一个方法。而状态模式的接口中有一个或者多个方法。而且，状态模式的实现类的方法，一般返回值，或者是改变实例变量的值。也就是说，状态模式一般和对象的状态有关。实现类的方法有不同的功能，覆盖接口中的方法。状态模式和命令模式一样，也可以用于消除 if…else 等条件选择语句。<br><strong>应用实例</strong>： 1、打篮球的时候运动员可以有正常状态、不正常状态和超常状态。 2、曾侯乙编钟中，’钟是抽象接口’,’钟A’等是具体状态，’曾侯乙编钟’是具体环境（Context）。<br><strong>优点</strong>： 1、封装了转换规则。 2、枚举可能的状态，在枚举状态之前需要确定状态种类。 3、将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 4、允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 5、可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。<br><strong>缺点</strong>： 1、状态模式的使用必然会增加系统类和对象的个数。 2、状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 3、状态模式对”开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。<br><strong>使用场景</strong>： 1、行为随状态改变而改变的场景。 2、条件、分支语句的代替者。<br><strong>注意事项</strong>：在行为受状态约束的时候使用状态模式，而且状态不超过 5 个。</li></ul><hr><h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><p>在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。这种类型的设计模式属于行为型模式。根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。</p><ul><li>详解<br><strong>意图</strong>：主要将数据结构与数据操作分离。<br><strong>主要解决</strong>：稳定的数据结构和易变的操作耦合问题。<br><strong>何时使用</strong>：需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，使用访问者模式将这些封装到类中。<br><strong>如何解决</strong>：在被访问的类里面加一个对外提供接待访问者的接口。<br><strong>关键代码</strong>：在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。<br><strong>应用实例</strong>：您在朋友家做客，您是访问者，朋友接受您的访问，您通过朋友的描述，然后对朋友的描述做出一个判断，这就是访问者模式。<br><strong>优点</strong>： 1、符合单一职责原则。 2、优秀的扩展性。 3、灵活性。<br><strong>缺点</strong>： 1、具体元素对访问者公布细节，违反了迪米特原则。 2、具体元素变更比较困难。 3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。<br><strong>使用场景</strong>： 1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，也不希望在增加新操作时修改这些类。<br><strong>注意事项</strong>：访问者可以对功能进行统一，可以做报表、UI、拦截器与过滤器。</li></ul><hr><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><p>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。</p><ul><li>详解<br><strong>意图</strong>：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。<br><strong>主要解决</strong>：对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。<br><strong>何时使用</strong>：多个类相互耦合，形成了网状结构。<br><strong>如何解决</strong>：将上述网状结构分离为星型结构。<br><strong>关键代码</strong>：对象 Colleague 之间的通信封装到一个类中单独处理。<br><strong>应用实例</strong>： 1、中国加入 WTO 之前是各个国家相互贸易，结构复杂，现在是各个国家通过 WTO 来互相贸易。 2、机场调度系统。 3、MVC 框架，其中C（控制器）就是 M（模型）和 V（视图）的中介者。<br><strong>优点</strong>： 1、降低了类的复杂度，将一对多转化成了一对一。 2、各个类之间的解耦。 3、符合迪米特原则。<br><strong>缺点</strong>：中介者会庞大，变得复杂难以维护。<br><strong>使用场景</strong>： 1、系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。 2、想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。<br><strong>注意事项</strong>：不应当在职责混乱的时候使用。</li></ul><hr><h2 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h2><p>解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p><ul><li>详解<br><strong>意图</strong>：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。<br><strong>主要解决</strong>：对于一些固定文法构建一个解释句子的解释器。<br><strong>何时使用</strong>：如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。<br><strong>如何解决</strong>：构件语法树，定义终结符与非终结符。<br><strong>关键代码</strong>：构件环境类，包含解释器之外的一些全局信息，一般是 HashMap。<br><strong>应用实例</strong>：编译器、运算表达式计算。<br><strong>优点</strong>： 1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。<br><strong>缺点</strong>： 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。<br><strong>使用场景</strong>： 1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。 2、一些重复出现的问题可以用一种简单的语言来进行表达。 3、一个简单语法需要解释的场景。<br><strong>注意事项</strong>：可利用场景比较少，JAVA 中如果碰到可以用 expression4J 代替。</li></ul><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzNzIwODY2OQ==&mid=2649822732&idx=1&sn=07c98615639b9fa40930875ee38749ec&chksm=f0c9a33ec7be2a2891ef8cdb5e9adc4e802ba37aa065478b23fc1531564207cb77f5ba1bd04b&mpshare=1&scene=1&srcid=0221qlTWYitiyupQgfgnMZ7l#rd">原文链接</a></p>]]></content>
    
    
    <categories>
      
      <category>DesignPattern</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DesignPattern</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第8周</title>
    <link href="/2019/02/20/2019Week08/"/>
    <url>/2019/02/20/2019Week08/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第8周（2019-02-18-2019-02-24）"><a href="#2019年第8周（2019-02-18-2019-02-24）" class="headerlink" title="2019年第8周（2019&#x2F;02&#x2F;18~2019&#x2F;02&#x2F;24）"></a>2019年第8周（2019&#x2F;02&#x2F;18~2019&#x2F;02&#x2F;24）</h2><ol><li><a href="https://blog.csdn.net/billy_chen_2013/article/details/71172598">SQL Server 查询时显示行号</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ETL最佳实践之生成产品维度</title>
    <link href="/2019/02/20/ETL_ProductDim/"/>
    <url>/2019/02/20/ETL_ProductDim/</url>
    
    <content type="html"><![CDATA[<ul><li>生成产品维度数据</li><li>刷新 Project_Detail 表的上一个版本的项目ID<br><escape><span id="more"></span></escape></li></ul><p>&nbsp;</p><h1 id="查找项目列表（在101上）"><a href="#查找项目列表（在101上）" class="headerlink" title="查找项目列表（在101上）"></a>查找项目列表（在101上）</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br><span class="hljs-operator">*</span> <br><span class="hljs-keyword">FROM</span><br>ISBG_Project <br><span class="hljs-keyword">WHERE</span><br>( OBDORPPC <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;PPC&#x27;</span> <span class="hljs-keyword">AND</span> CustomerNo <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;00106%&#x27;</span> <span class="hljs-keyword">AND</span> ProjectStartDateTime <span class="hljs-operator">&gt;=</span> <span class="hljs-string">&#x27;2018-1-1&#x27;</span> ) <br><span class="hljs-keyword">OR</span> ( ProjectNewNo <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IDLE20180308127&#x27;</span> ) <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>CreateDate <span class="hljs-keyword">DESC</span><br></code></pre></td></tr></table></figure><h1 id="生成产品维度数据"><a href="#生成产品维度数据" class="headerlink" title="生成产品维度数据"></a>生成产品维度数据</h1><h2 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h2><ol><li>数据库：业务库、BI库  </li><li>涉及的表：业务库（ISBG_Project）、BI库（PRODUCT_AEGIS  、Project_Detail）</li><li>将 <strong>ISBG_Project表</strong> 中的 <strong>BeProduct</strong>、<strong>BeProductName</strong>  两个字段查询出来得到结果集，然后刷新维度表的数据，有就略过，没有就新增  </li><li>刷新 <strong>Project_Detail</strong> 的 产品信息</li></ol><ul><li>查询脚本<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>a.BeProduct,<br>a.BeProductName<br><span class="hljs-keyword">FROM</span><br>ISBG_Project a<br><span class="hljs-keyword">WHERE</span><br>a.BeProduct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">AND</span> a.BeProductName <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">AND</span> a.BeProduct <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">AND</span> a.BeProductName <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>a.BeProduct,<br>a.BeProductName<br></code></pre></td></tr></table></figure></li><li>查询结果<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">BeProduct</span><span class="hljs-keyword">BeProductName</span><br><span class="hljs-keyword"></span> IPDHisales<br>...<br>中间件云-开发中间件云<br>终端设计&amp;验证&amp;软件开发过程管理CMC<br></code></pre></td></tr></table></figure></li></ul><h1 id="刷新-Project-Detail-表的上一个版本的项目ID"><a href="#刷新-Project-Detail-表的上一个版本的项目ID" class="headerlink" title="刷新 Project_Detail 表的上一个版本的项目ID"></a>刷新 Project_Detail 表的上一个版本的项目ID</h1><h2 id="1-思路-1"><a href="#1-思路-1" class="headerlink" title="1. 思路"></a>1. 思路</h2><ol><li>数据库：业务库、BI库  </li><li>涉及的表：业务库（ISBG_Project）、BI库（Project_Detail）</li><li>通过脚本查询得到所有版本信息，按项目开始时间排序并增加行号，当前项目的行号减一即为前一个项目，  </li><li>将得到的 <strong>ProjectID</strong> 刷新到 <strong>Project_Detail表</strong> 的 <strong>PreviousVersionProjectID</strong></li></ol><ul><li><p>查询脚本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br><span class="hljs-built_in">ROW_NUMBER</span> () <span class="hljs-keyword">OVER</span> (<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>a.ProjectStartDateTime<br>) <span class="hljs-keyword">AS</span> row_number,<br>a.id,<br>a.ProjectStartDateTime,<br>a.BeProduct,<br>a.BeProductName<br><span class="hljs-keyword">FROM</span><br>ISBG_Project a<br><span class="hljs-keyword">JOIN</span> (<br><span class="hljs-keyword">SELECT</span><br>ip.BeProduct,<br>ip.BeProductName<br><span class="hljs-keyword">FROM</span><br>ISBG_Project ip<br><span class="hljs-keyword">WHERE</span><br>id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;3a88df6c-83be-4903-a923-f2c80abcf3be&#x27;</span><br>) b <span class="hljs-keyword">ON</span> a.BeProduct <span class="hljs-operator">=</span> b.BeProduct<br><span class="hljs-keyword">AND</span> a.BeProductName <span class="hljs-operator">=</span> b.BeProductName<br></code></pre></td></tr></table></figure></li><li><p>查询结果</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">RowNumber</span>idProjectStartDateTimeBeProductBeProductName<br><span class="hljs-attribute">1</span><span class="hljs-number">290</span>a08b8-<span class="hljs-number">241</span>a-<span class="hljs-number">486</span>b-<span class="hljs-number">90</span>a0-<span class="hljs-number">7</span>d57e9ce32ab<span class="hljs-number">2018</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span>InnovationPQM<br><span class="hljs-attribute">2</span><span class="hljs-number">3</span>a88df6c-<span class="hljs-number">83</span>be-<span class="hljs-number">4903</span>-a923-f2c80abcf3be<span class="hljs-number">2018</span>-<span class="hljs-number">11</span>-<span class="hljs-number">19</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span>innovationPQM<br><span class="hljs-attribute">3</span>d375e63a-a952-<span class="hljs-number">48</span>c0-<span class="hljs-number">84</span>a6-<span class="hljs-number">3666</span>ef9630fc<span class="hljs-number">2018</span>-<span class="hljs-number">12</span>-<span class="hljs-number">17</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span>innovationPQM<br></code></pre></td></tr></table></figure></li><li><p>整体步骤：<br><img src="/ETL_ProductDim%5C0200.png">  </p></li><li><p>第1步：<br><img src="/ETL_ProductDim%5C0201.png">  </p></li><li><p>第2步：过滤已经处理过的数据<br><img src="/ETL_ProductDim%5C0202.png"> </p></li><li><p>第3步：获取版本编号<br><img src="/ETL_ProductDim%5C0203.png">   </p></li><li><p>查询脚本（通过产品信息获得版本编号）  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>a.a_number,<br><span class="hljs-built_in">ROW_NUMBER</span> () <span class="hljs-keyword">OVER</span> (<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>a.BeProduct,a.BeProductName,b.ProjectStartDateTime<br>) <span class="hljs-keyword">AS</span> row_number,<br>b.ID,b.ProjectStartDateTime,a.BeProduct,a.BeProductName <span class="hljs-keyword">from</span><br>(<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">ROW_NUMBER</span> () <span class="hljs-keyword">OVER</span> (<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>BeProduct,BeProductName<br>) <span class="hljs-keyword">AS</span> a_number,<br>BeProduct,BeProductName <span class="hljs-keyword">from</span> ISBG_Project <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> BeProduct,BeProductName<br>) a<br><span class="hljs-keyword">join</span> ISBG_Project b <span class="hljs-keyword">on</span> b.BeProduct<span class="hljs-operator">=</span>a.BeProduct <span class="hljs-keyword">and</span> b.BeProductName<span class="hljs-operator">=</span>a.BeProductName<br></code></pre></td></tr></table></figure></li><li><p>第4步：按项目ID排序左侧数据<br><img src="/ETL_ProductDim%5C0204.png">  </p></li><li><p>第5步：按项目ID排序右侧收据<br><img src="/ETL_ProductDim%5C0205.png">  </p></li><li><p>第6步：多播右侧版本编号数据，以便二次使用<br><img src="/ETL_ProductDim%5C0206.png">  </p></li><li><p>第7步：合并连接数据获取当前版本编号<br><img src="/ETL_ProductDim%5C0207.png">  </p></li><li><p>第8步：计算上一版本编号<br><img src="/ETL_ProductDim%5C0208.png">  </p></li><li><p>第9步：按序号排序左侧数据<br><img src="/ETL_ProductDim%5C0209.png">  </p></li><li><p>第10步：按序号排序右侧侧数据<br><img src="/ETL_ProductDim%5C0210.png">  </p></li><li><p>第11步：合并连接数据获取上一版本编号<br><img src="/ETL_ProductDim%5C0211.png">  </p></li><li><p>第12步：更新记录<br><img src="/ETL_ProductDim%5C0212.png"><br><img src="/ETL_ProductDim%5C0213.png"></p></li></ul><h1 id="准备新需求的测试数据"><a href="#准备新需求的测试数据" class="headerlink" title="准备新需求的测试数据"></a>准备新需求的测试数据</h1><h2 id="写入三张表"><a href="#写入三张表" class="headerlink" title="写入三张表"></a>写入三张表</h2><ol><li>HR_IMPORT_Member(读写，员工基本数据，BSM和技术方向)，</li><li>HR_IMPORT_WorkStatus(读写,考勤、请假、调休数据表)；</li><li>HR_IMPORT_LOG(读写，操作日志)</li></ol><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><ol><li>交付人员基础数据表：人资程序将BSM数据同步到这个表，如果工号以存在就覆盖数据，否则新增数据。<br> <img src="/ETL_ProductDim%5C0301.png"> </li><li>交付人员在岗、请假、调休数据表：每月考勤、请假、调休数据锁定后，凌晨5点，人资程序将数据新增到这个表。所有字段都不允许为空，且是0~255之间（byte类型）。产能系统每月自动清空5个月前的数据。<br> <img src="/ETL_ProductDim%5C0302.png"> </li><li>处理日志表：每次从人资系统导入数据到产能数据库后都需要在此表中插入日志。<br>如果导入的是基本数据，ImportType写入1，DataStartDate和DataEndDate填写导入数据当日的日期，日期不要带有时间信息。<br>如果导入的是在岗状态数据，ImportType写入2，DataStartDate写入本批次数据最早的日期，DataEndDate写入本批次数据最后的日期。<br><img src="/ETL_ProductDim%5C0303.png"></li></ol><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>先从项目表中取4个未结项和4个已结项的项目，其中两个项目属于同一个产品的不同版本；</li><li>通过项目ID查找人力地图表，得到交付人员的员工号；</li><li>根据员工号，生成BSM和技术方向的模拟数据，写入<strong>交付人员基础数据表</strong>，同时写入<strong>处理日志表</strong></li><li>通过BI库的日期维度表得到工作日记录（暂时模拟某段时间的数据，如2019年1月~2月）</li><li>模拟考勤数据，工作日合计8小时，</li><li>将模拟数据写入<strong>考勤、请假、调休数据表</strong>，同时写入<strong>处理日志表</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ID <span class="hljs-keyword">from</span> (<br><span class="hljs-comment">-- 两个未结项的 ISBG 项目</span><br><span class="hljs-keyword">select</span> TOP <span class="hljs-number">2</span>  ID,ProjectName,ProjectMgr_Name,ProjectStartDateTime,DepartmentName, BeProduct,BeProductName,CooperationType,IsFinish<br>  <span class="hljs-keyword">from</span> ISBG_Project <br>  <span class="hljs-keyword">where</span> <br>  OBDORPPC<span class="hljs-operator">=</span><span class="hljs-string">&#x27;PPC&#x27;</span> <span class="hljs-keyword">AND</span> OBDORPPC<span class="hljs-operator">!=</span><span class="hljs-string">&#x27;IDLE&#x27;</span> <span class="hljs-keyword">and</span> CustomerNo <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;00106%&#x27;</span> <br><span class="hljs-keyword">and</span> ProjectStartDateTime<span class="hljs-operator">&gt;=</span><span class="hljs-string">&#x27;2019-3-1&#x27;</span><br><span class="hljs-keyword">AND</span> BeProduct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">AND</span> BeProductName <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">AND</span> BeProduct <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">AND</span> BeProductName <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">and</span> CooperationType <span class="hljs-operator">=</span><span class="hljs-string">&#x27;FP&#x27;</span><br><span class="hljs-comment">-- 两个已结项的 ISBG 项目</span><br><span class="hljs-keyword">union</span><br>  <span class="hljs-keyword">select</span> TOP <span class="hljs-number">2</span>  a.ID,a.ProjectName,a.ProjectMgr_Name,a.ProjectStartDateTime,a.BeProduct,a.DepartmentName,a.BeProductName,a.CooperationType,a.IsFinish<br>  <span class="hljs-keyword">from</span> ISBG_Project a<br>  <span class="hljs-keyword">join</span> <br>  ISBG_Project_Finish b<br>  <span class="hljs-keyword">on</span> a.ID <span class="hljs-operator">=</span> b.ProjectId<br>  <span class="hljs-keyword">where</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br>  <span class="hljs-keyword">AND</span> OBDORPPC<span class="hljs-operator">=</span><span class="hljs-string">&#x27;PPC&#x27;</span> <br> <span class="hljs-comment">-- AND OBDORPPC!=&#x27;IDLE&#x27; </span><br>  <span class="hljs-comment">--AND OBDORPPC!=&#x27;New&#x27; </span><br>  <span class="hljs-comment">-- AND OBDORPPC!=&#x27;OPD&#x27; </span><br>  <span class="hljs-comment">-- and CustomerNo not like &#x27;00106%&#x27; </span><br>  <span class="hljs-comment">-- and ProjectStartDateTime&gt;=&#x27;2018-12-1&#x27;</span><br>  <span class="hljs-keyword">and</span> ProjectNewNo<span class="hljs-operator">!=</span><span class="hljs-string">&#x27;IDLE20180308127&#x27;</span> <br><span class="hljs-keyword">AND</span> BeProduct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">AND</span> BeProductName <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">AND</span> BeProduct <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">AND</span> BeProductName <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">and</span> CooperationType <span class="hljs-operator">=</span><span class="hljs-string">&#x27;FP&#x27;</span><br><span class="hljs-keyword">union</span><br><span class="hljs-comment">-- 相同的两个项目，一个已结项，一个未结项</span><br><span class="hljs-keyword">select</span> TOP <span class="hljs-number">2</span>  ID,ProjectName,ProjectMgr_Name,ProjectStartDateTime,DepartmentName,BeProduct,BeProductName,CooperationType,IsFinish<br>  <span class="hljs-keyword">from</span> ISBG_Project <br>  <span class="hljs-keyword">where</span><br>  <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>  <br>  <span class="hljs-comment">-- AND ProjectStartDateTime&gt;=&#x27;2018-8-1&#x27;  </span><br>  <span class="hljs-comment">--order by CreateDate desc</span><br>  <span class="hljs-keyword">AND</span> BeProduct<span class="hljs-operator">=</span><span class="hljs-string">&#x27;HIC云&#x27;</span><br>  <span class="hljs-keyword">AND</span> BeProductName<span class="hljs-operator">=</span><span class="hljs-string">&#x27;eSee&#x27;</span><br><span class="hljs-keyword">and</span> CooperationType <span class="hljs-operator">=</span><span class="hljs-string">&#x27;FP&#x27;</span><br><span class="hljs-keyword">union</span><br><span class="hljs-comment">-- IDLE 项目</span><br><span class="hljs-keyword">select</span> TOP <span class="hljs-number">1</span> ID,ProjectName,ProjectMgr_Name,ProjectStartDateTime,DepartmentName,BeProduct,BeProductName,CooperationType,IsFinish<br><span class="hljs-keyword">from</span> ISBG_Project <br><span class="hljs-keyword">where</span> ProjectNewNo<span class="hljs-operator">=</span><span class="hljs-string">&#x27;IDLE20180308127&#x27;</span><br><span class="hljs-keyword">union</span><br><span class="hljs-comment">-- SSBG 项目</span><br><span class="hljs-keyword">select</span> TOP <span class="hljs-number">1</span> ID,ProjectName,ProjectMgr_Name,ProjectStartDateTime,DepartmentName,BeProduct,BeProductName,CooperationType,IsFinish<br><span class="hljs-keyword">from</span> ISBG_Project <br><span class="hljs-keyword">where</span> DepartmentName <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;SSBG-BU17%&#x27;</span> <br><span class="hljs-keyword">and</span> ProjectStartDateTime<span class="hljs-operator">&gt;=</span><span class="hljs-string">&#x27;2018-12-1&#x27;</span> <br><span class="hljs-comment">--AND BeProduct IS NOT NULL</span><br><span class="hljs-comment">--AND BeProductName IS NOT NULL</span><br><span class="hljs-comment">--AND BeProduct != &#x27;&#x27;</span><br><span class="hljs-comment">--AND BeProductName != &#x27;&#x27;</span><br>) a <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> a.ProjectStartDateTime <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">SELECT</span> COUNT<span class="hljs-comment">(*) FROM HR_IMPORT_WorkStatus a WHERE a.WorkingHours &lt;&gt; 8;</span><br><span class="hljs-comment">SELECT COUNT(*)</span> <span class="hljs-keyword">FROM</span> HR_IMPORT_WorkStatus a <span class="hljs-keyword">WHERE</span> a.CompassionateLeaveHours &gt; <span class="hljs-number">0</span><span class="hljs-punctuation">;</span><br><span class="hljs-keyword">SELECT</span> COUNT<span class="hljs-comment">(*) FROM HR_IMPORT_WorkStatus a WHERE a.SickLeaveHours &gt; 0;</span><br><span class="hljs-comment">SELECT COUNT(*)</span> <span class="hljs-keyword">FROM</span> HR_IMPORT_WorkStatus a <span class="hljs-keyword">WHERE</span> a.OtherPayLeavelHours &gt; <span class="hljs-number">0</span><span class="hljs-punctuation">;</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span>(a.WorkingHours), COUNT<span class="hljs-comment">(*) FROM HR_IMPORT_WorkStatus a WHERE a.WorkingHours &lt;&gt; 8 GROUP BY a.WorkingHours ORDER BY a.WorkingHours;</span><br><span class="hljs-comment">SELECT DISTINCT(a.CompassionateLeaveHours), COUNT(*)</span> <span class="hljs-keyword">FROM</span> HR_IMPORT_WorkStatus a <span class="hljs-keyword">WHERE</span> a.CompassionateLeaveHours &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> a.CompassionateLeaveHours<span class="hljs-punctuation">;</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span>(a.SickLeaveHours), COUNT<span class="hljs-comment">(*) FROM HR_IMPORT_WorkStatus a WHERE a.SickLeaveHours &gt; 0 GROUP BY a.SickLeaveHours;</span><br><span class="hljs-comment">SELECT DISTINCT(a.OtherPayLeavelHours), COUNT(*)</span> <span class="hljs-keyword">FROM</span> HR_IMPORT_WorkStatus a <span class="hljs-keyword">WHERE</span> a.OtherPayLeavelHours &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> a.OtherPayLeavelHours<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><h1 id="产能偏差"><a href="#产能偏差" class="headerlink" title="产能偏差"></a>产能偏差</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><h3 id="处理考勤数据"><a href="#处理考勤数据" class="headerlink" title="处理考勤数据"></a>处理考勤数据</h3><ul><li>以 Project_AEGIS 为项目源头，过滤 Project_Detail 中已处理（Processed&gt;0）的数据</li><li>右联查询考勤数据（TODO）</li><li></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>a.ProjectID,<br>a.WorkID,<br>c.BSM,<br>c.RecordDate,<br>c.BSD,<br>c.RealCapacity,<br>c.CapacityDeviation <br><span class="hljs-keyword">FROM</span><br>HumanMap a<br><span class="hljs-keyword">JOIN</span> DEV_BSD_IDLE c <span class="hljs-keyword">ON</span> c.WorkID<span class="hljs-operator">=</span> a.WorkID <br><span class="hljs-keyword">AND</span> (( c.RecordDate <span class="hljs-operator">&gt;=</span> a.InPro_Date <span class="hljs-keyword">AND</span> c.RecordDate <span class="hljs-operator">&lt;</span> a.OutPro_Date ) <br><span class="hljs-keyword">OR</span> ( c.RecordDate <span class="hljs-operator">=</span> a.InPro_Date <span class="hljs-keyword">AND</span> a.InPro_Date <span class="hljs-operator">=</span> a.OutPro_Date )) <br><span class="hljs-comment">-- AND c.RealCapacity IS NOT NULL AND c.CapacityDeviation IS NOT NULL</span><br><span class="hljs-keyword">WHERE</span><br>a.ProjectID <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span><br>ProjectID <br><span class="hljs-keyword">FROM</span><br>Project_AEGIS <br><span class="hljs-keyword">WHERE</span><br>ProjectID <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> ( <span class="hljs-keyword">SELECT</span> ProjectID <span class="hljs-keyword">FROM</span> Project_Detail <span class="hljs-keyword">WHERE</span> Processed <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-number">0</span> ))<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> DEV_BSD_IDLE a <span class="hljs-keyword">where</span> a.CapacityDeviation <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">and</span> a.CapacityDeviation &lt;&gt; <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span><br>ProjectID <br><span class="hljs-keyword">FROM</span><br>Project_AEGIS <br><span class="hljs-keyword">WHERE</span><br>ProjectID <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> ( <span class="hljs-keyword">SELECT</span> ProjectID <span class="hljs-keyword">FROM</span> Project_Detail <span class="hljs-keyword">WHERE</span> Processed &lt;&gt; <span class="hljs-number">0</span> )<br></code></pre></td></tr></table></figure><p>- </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs stylus">SELECT<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.ProjectID</span>,<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.WorkID</span>,<br><span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.BSM</span> AS BSMIncome,<br><span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.Quality</span>,<br><span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.OffsetCapacity</span>,<br>c<span class="hljs-selector-class">.BSM</span> AS BSMBase,<br>c<span class="hljs-selector-class">.RecordDate</span>,<br>c<span class="hljs-selector-class">.BSD</span> <br>FROM<br>HumanMapBak <span class="hljs-selector-tag">a</span><br>LEFT OUTER JOIN PDRC_BSM_Dispatch <span class="hljs-selector-tag">b</span> ON <span class="hljs-selector-tag">b</span>.ProjectID= <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.ProjectID</span> <br>AND <span class="hljs-selector-tag">b</span>.WorkID= <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.WorkID</span><br>JOIN DEV_BSD_IDLE c ON c.WorkID= <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.WorkID</span> <br>AND ((<br>c.RecordDate&gt;= <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.InPro_Date</span> <br>AND c.RecordDate&lt; <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.OutPro_Date</span> <br>) <br>OR ( c.RecordDate= <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.InPro_Date</span> AND <span class="hljs-selector-tag">a</span>.InPro_Date= <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.OutPro_Date</span> )) <br>-- LEFT JOIN <br>WHERE<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.ProjectID</span> <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;2e8c8397-4be8-4f34-9527-ce239d4f2068&#x27;</span>,<br><span class="hljs-string">&#x27;3a88df6c-83be-4903-a923-f2c80abcf3be&#x27;</span>,<br><span class="hljs-string">&#x27;a6318b58-8b07-455a-81ac-6f0adec657bf&#x27;</span>,<br><span class="hljs-string">&#x27;a989e256-971a-49e1-a5e0-620d488f5c3a&#x27;</span>)<br></code></pre></td></tr></table></figure><p>- </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">UPDATE [BJC_PDRCBI].[dbo].[DEV_BSD_IDLE]<br>   <span class="hljs-built_in">SET</span> [RealCapacity] = <span class="hljs-literal">NULL</span><br>      ,[CapacityDeviation] = <span class="hljs-literal">NULL</span><br> WHERE <span class="hljs-attribute">1</span>=1<br>GO<br></code></pre></td></tr></table></figure><ul><li>查询 IDLE 表<figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> DEV_BSD_IDLE a <span class="hljs-keyword">where</span> a.WorkID=<span class="hljs-string">&#x27;B-41018&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="日期与弹窗-MessageBox"><a href="#日期与弹窗-MessageBox" class="headerlink" title="日期与弹窗 MessageBox"></a>日期与弹窗 MessageBox</h2><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">DateTime</span> <span class="hljs-variable">dt</span> <span class="hljs-operator">=</span> <span class="hljs-variable">DateTime</span><span class="hljs-operator">.</span><span class="hljs-built_in">Now</span><span class="hljs-operator">;</span><br><span class="hljs-operator">//</span><span class="hljs-variable">DateTime</span> <span class="hljs-variable">dt</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-variable">DateTime</span><span class="hljs-punctuation">(</span><span class="hljs-number">2019</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">15</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">string</span> <span class="hljs-variable">dtString</span> <span class="hljs-operator">=</span> <span class="hljs-variable">dt</span><span class="hljs-operator">.</span><span class="hljs-built_in">ToString</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-operator">//</span><span class="hljs-variable">MessageBox</span><span class="hljs-operator">.</span><span class="hljs-built_in">Show</span><span class="hljs-punctuation">(</span><span class="hljs-variable">dtString</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">DateTime</span> <span class="hljs-variable">lastFinancialDate</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-variable">DateTime</span><span class="hljs-punctuation">(</span><span class="hljs-variable">dt</span><span class="hljs-operator">.</span><span class="hljs-variable">Year</span><span class="hljs-operator">,</span> <span class="hljs-variable">dt</span><span class="hljs-operator">.</span><span class="hljs-variable">Month</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">lastFinancialDate</span> <span class="hljs-operator">=</span> <span class="hljs-variable">lastFinancialDate</span><span class="hljs-operator">.</span><span class="hljs-variable">AddMonths</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">MessageBox</span><span class="hljs-operator">.</span><span class="hljs-built_in">Show</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;FinancialDay: &quot;</span> <span class="hljs-operator">+</span> <span class="hljs-variable">Dts</span><span class="hljs-operator">.</span><span class="hljs-built_in">Variables</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;FinancialDay&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-operator">.</span><span class="hljs-variable">Value</span><span class="hljs-operator">.</span><span class="hljs-built_in">ToString</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">Dts</span><span class="hljs-operator">.</span><span class="hljs-built_in">Variables</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;LastFinancialDate&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-operator">.</span><span class="hljs-variable">Value</span> <span class="hljs-operator">=</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">dt</span><span class="hljs-operator">.</span><span class="hljs-variable">Day</span> <span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">int</span><span class="hljs-punctuation">)</span><span class="hljs-variable">Dts</span><span class="hljs-operator">.</span><span class="hljs-built_in">Variables</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;FinancialDay&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-operator">.</span><span class="hljs-variable">Value</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">?</span> <span class="hljs-variable">lastFinancialDate</span> <span class="hljs-operator">:</span> <span class="hljs-variable">lastFinancialDate</span><span class="hljs-operator">.</span><span class="hljs-variable">AddMonths</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">string</span> <span class="hljs-variable">lastFinancialDateString</span> <span class="hljs-operator">=</span> <span class="hljs-variable">Dts</span><span class="hljs-operator">.</span><span class="hljs-built_in">Variables</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;LastFinancialDate&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-operator">.</span><span class="hljs-variable">Value</span><span class="hljs-operator">.</span><span class="hljs-built_in">ToString</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-operator">//</span><span class="hljs-variable">MessageBox</span><span class="hljs-operator">.</span><span class="hljs-built_in">Show</span><span class="hljs-punctuation">(</span><span class="hljs-variable">lastFinancialDateString</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure><h2 id="奖金计算"><a href="#奖金计算" class="headerlink" title="奖金计算"></a>奖金计算</h2><ol><li><p>查询结果得到结果集：</p></li><li><p>通过派生列整理数据，得到实际的产能（BSM*质量）<br><img src="/ETL_ProductDim%5C0401.png">  </p></li><li></li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://www.cnblogs.com/ljhdo/p/5174681.html">SSIS 数据类型和类型转换</a></li></ol><p>SSIS 数据类型和类型转换<br>在进行ETL开发时，数据类型（Data Type）是最基础的，但也容易被忽略，楼主使用的SQL Server 版本是2012，用此博文记录，常用的SSIS数据类型和TSQL数据类型的映射。SSIS的数据类型，是指数据流组件使用的数据类型和变量的数据类型（Data Flow 和 Variable）。</p><p>当数据进入Package的data flow task中时，SSIS 通过数据源组件从数据源抽取（extract）数据，获取元数据类型，并转换成SSIS支持的数据类型，SSIS的数据类型主要分为三类：字符（string），数值（numeric）和日期&#x2F;时间（date&#x2F;time），如果源数据类似不能转换成相应的SSIS 数据类型，SSIS Engine就会报错。SSIS的数据类型，以“DT_”开头，是Data Type的简写。</p><p>一，SSIS 数据流的数据类型和TSQL数据类型的映射</p><ol><li>字符类型</li></ol><p>字符类型用于存储字符串，在SQL Server中，使用单引号表示一个字符，但是在SSIS中，使用双引号表示一个字符串。</p><p>SSIS的字符类型和TSQL的数据类型的对应关系：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">DT_STR：对应TSQL的 <span class="hljs-type">varchar</span>, <span class="hljs-type">char</span>  <br>DT_WSTR：对应TSQL的 <span class="hljs-type">nchar</span>, nvarchar, <span class="hljs-type">xml</span><br></code></pre></td></tr></table></figure><ol start="2"><li>数值类型</li></ol><p>数值类型分为整数和小数，SSIS的整数类型和TSQL数据类型的对应关系：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">DT_BOOL</span>：bit  <br><span class="hljs-attribute">DT_UI1</span>：tinyint，占用一个字节，非负整数，数值范围是：<span class="hljs-number">0</span>-<span class="hljs-number">255</span>  <br><span class="hljs-attribute">DT_I2</span>：smallint，占用<span class="hljs-number">2</span>个字节，有符号整数  <br><span class="hljs-attribute">DT_I4</span>：int，占用<span class="hljs-number">4</span>个字节，有符号整数  <br><span class="hljs-attribute">DT_I8</span>：bigint，占用<span class="hljs-number">8</span>个字节，有符号整数  <br><span class="hljs-attribute">DT_BYTES</span>：binary, varbinary, RowVersion<br></code></pre></td></tr></table></figure><p>TSQL的小数数值类型分为两类：精确小数（decimal）和近似小数（float），小数也叫实数（real），SSIS的小数类型和TSQL数据类型的对应关系：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">DT_NUMERIC：精确小数，decimal  <br>DT_R4：近似小数，<span class="hljs-attribute">float</span>(<span class="hljs-number">24</span>)  <br>DT_R8：近似小数，<span class="hljs-attribute">float</span>(<span class="hljs-number">53</span>)  <br></code></pre></td></tr></table></figure><p>3，日期时间类型</p><p>SSIS的日期时间类型和TSQL数据类型的对应关系：</p><p>DT_DBDATE：date<br>DT_DBTIME2：time(p)<br>DT_DBTIMESTAMP：datetime<br>DT_DBTIMESTAMP2：datetime2<br>SSIS 内置函数：GETDATE() 和 GETUTCDATE() 返回值的数据类型是DT_DBTIMESTAMP，对应TSQL的DateTime，因此，只保留3位毫秒。在Expression Builder中，将时间类型转换成字符串类型，显示的毫秒数有效数值只有3位，末尾补6个0，共9位：</p><p>(DT_WSTR,30) GETDATE()，Evaluated Value是：2016-10-13 17:04:01.765000000<br>(DT_DBTIMESTAMP2,7) GETDATE()，Evaluated Value是：10&#x2F;13&#x2F;2016 5:01:54 PM<br>二，SSIS 变量(Variable)的数据类型和TSQL数据类型的映射</p><p>SSIS 变量的数据类型，不同于SSIS的数据类型，但都和SSIS的数据类型相兼容，在进行表达式求值时，SSIS自动将变量的数据类型隐式转换成SSIS的数据类型，然后进行求值。</p><p>Variables have a Variant data type and the expression evaluator converts the data type of a variable from a Variant subtype to an Integration Services data type before it evaluates the expression. </p><p>1，字符数据类型</p><p>字符变量和TSQL数据类型的映射关系：</p><p>String：char,nchar,varchar(n),nvarchar(n)<br>object：varchar(max),nvarchar(max)<br>2，数值类型</p><p>数值类型的变量和TSQL数据类型的映射关系：</p><p>Boolean：bit<br>Int64：bigint<br>Int32：int<br>Int16：smallint<br>Byte：tinyint<br>object：binary, varbinary(n), varbinary(max)<br>精确小数：Decimal 在SQL Server 2012以后，对应TSQL的decimal<br>近似小数：Single 对应TSQL的float(24),  Double 对应TSQL的float(53)<br>3，日期&#x2F;时间类型</p><p>日期&#x2F;时间类型的变量和TSQL数据类型的映射关系：</p><p>DateTime：对应TSQL的datetime<br>Object：对应TSQL的time，date，datetime2<br>三，强制类型转换</p><p>SSIS在进行表达式求值时，自动将一个数据类型隐式转换成相兼容的另外一个数据类型，如果类型不兼容，必须强制类型转换，否则，SSIS报错。对数据进行强制类型转换的格式是：(type) expression，在进行显式类型转换时，尽量使用窄的数据类型，这样能够提高数据传输的速度；但是，数据转换需要付出一定的代价，因此，必须权衡类型转换和数据传输对性能的影响。</p><p>An implicit conversion of a data type occurs when the expression evaluator automatically converts the data from one data type to another. If the data in a column does not require the full width allocated by the source data type, you might want to change the data type of the column. Making each data row as narrow as possible helps optimize performance when transferring data because the narrower each row is, the faster the data is moved from source to destination.</p><p>1，将字符串转换成TSQL的日期&#x2F;时间类型</p><p>在SSIS中，字符串常量使用双引号“”，[] 表示可选：</p><p>转换成date：(DT_DBDATE)”yyyy-mm-dd”<br>转换成time(n)：(DT_DBTIME2,n)”hh:mm:ss[.fffffff]”<br>转换成datetime：(DT_DBTIMESTAMP)”yyyy-mm-dd hh:mm:ss[.fff]”<br>转换成datetime2(n)：(DT_DBTIMESTAMP2,n)”yyyy-mm-dd hh:mm:ss[.fffffff]”<br>2，转换成字符串</p><p>字符串分为双字节字符和单字节字符，对于单字节字符，SSIS使用 DT_STR 表示，在强制类型转换时，必须制定code page和字符长度：</p><p>将整数5转换为单字节字符：(DT_STR,30,1252)5<br>将整数5转换为双字节字符：(DT_WSTR,30)5<br>将 DT_DBTIMESTAMP 类型转换成字符串：(DT_WSTR,30)GETDATE()，返回的数据格式是: 2016-10-13 14:55:31.248000000,GETDATE()返回的数据类型是DT_DBTIMESTAMP；<br>3，数值类型转换</p><p>将字符串转换成bit：(DT_BOOL)”True”<br>将小数转换成int：(DT_I4) 3.57<br>将整数转化成精确小数：(DT_NUMERIC,7,3)4000<br>四，数据类型转换的性能</p><p>将数据从一个SQL Server 加载到另一个SQL Server之前，如果需要转换数据类型，建议使用TSQL Conversion，这样，能简化Package的设计，提高转换速度。</p><p>五，参数的数据类型</p><p>在Execute SQL Task引用变量时，必须在Parameter Mapping Tab中设置参数的Data Type，请参考《Execute SQL Task 参数和变量的映射》</p><p>参考文档：</p><p>Integration Services (SSIS) Expressions</p><p>Cast (SSIS Expression)</p><p>Integration Services Data Types</p><p>SQL Server Integration Services, Data Type Mapping</p><p>Performance Comparison between Data Type Conversion Techniques in SSIS 2008</p>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ETL</tag>
      
      <tag>MessageBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第7周</title>
    <link href="/2019/02/15/2019Week07/"/>
    <url>/2019/02/15/2019Week07/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第7周（2019-02-11-2019-02-17）"><a href="#2019年第7周（2019-02-11-2019-02-17）" class="headerlink" title="2019年第7周（2019&#x2F;02&#x2F;11~2019&#x2F;02&#x2F;17）"></a>2019年第7周（2019&#x2F;02&#x2F;11~2019&#x2F;02&#x2F;17）</h2><ol><li><a href="https://blog.csdn.net/zard_0_/article/details/77571536">让Mac文本编辑器成为HTML编辑器</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Selenium 自动化测试</title>
    <link href="/2019/01/29/Selenium/"/>
    <url>/2019/01/29/Selenium/</url>
    
    <content type="html"><![CDATA[<h3 id="知识点滴"><a href="#知识点滴" class="headerlink" title="知识点滴"></a>知识点滴</h3><ol><li><a href="https://blog.csdn.net/amoscn/article/details/79605742">Java selenium - 父子、兄弟、相邻节点定位方式详解</a>  </li><li><a href="https://blog.csdn.net/cyjs1988/article/details/75006167">Selenium在定位的class含有空格的复合类的解决办法</a>  </li><li><a href="https://www.cnblogs.com/yyym/p/8406513.html">Java + Selenium + WebDriver八大元素定位方式</a></li><li><a href="https://blog.csdn.net/u011541946/article/details/73695239">Java+Selenium3方法篇23-iframe切换的问题</a>  </li><li><a href="https://www.cnblogs.com/andrew209/p/9017087.html">Java+selenium之WebDriver常见特殊情况如iframe&#x2F;弹窗处理(四)</a></li></ol><h3 id="Java-Selenium3POM自动化测试框架设计系列"><a href="#Java-Selenium3POM自动化测试框架设计系列" class="headerlink" title="Java+Selenium3POM自动化测试框架设计系列"></a>Java+Selenium3POM自动化测试框架设计系列</h3><ol><li><a href="https://blog.csdn.net/u011541946/article/category/6958269/4">Java+Selenium3POM自动化测试框架设计系列</a>  </li><li><a href="https://blog.csdn.net/u011541946/article/category/6854930">Java+Selenium3.0关键字驱动框架设计教程</a></li><li><a href="https://www.cnblogs.com/andrew209/tag/selenium/">捏不死的小蚂蚁的Selenium文章</a></li></ol><h3 id="Selenium-教程"><a href="#Selenium-教程" class="headerlink" title="Selenium 教程"></a>Selenium 教程</h3><ol><li><a href="http://www.cnblogs.com/TankXiao/p/5252754.html">(一) 介绍</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/4110494.html">(二)环境搭建方法一</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/4142070.html">(三)环境搭建 基于Maven</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5211759.html">(四)使用浏览器调试工具</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5222238.html">(五)元素定位大全</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5253072.html">(六)xpath 定位</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5260683.html">(七)CSS 定位</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/4140543.html">(八) IDE 用法</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5258104.html">(九)常见web UI 元素操作 及API使用</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5260557.html">(十)操作浏览器</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5260445.html">(十一)操作弹出对话框</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5260707.html">(十二)操作弹出窗口</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5246557.html">(十三)智能等待页面加载完成</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5237189.html">(十四)处理Iframe 中的元素</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Selenium</tag>
      
      <tag>自动化测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第5周</title>
    <link href="/2019/01/28/2019Week05/"/>
    <url>/2019/01/28/2019Week05/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第5周（2019-01-28-2019-02-03）"><a href="#2019年第5周（2019-01-28-2019-02-03）" class="headerlink" title="2019年第5周（2019&#x2F;01&#x2F;28~2019&#x2F;02&#x2F;03）"></a>2019年第5周（2019&#x2F;01&#x2F;28~2019&#x2F;02&#x2F;03）</h2><ol><li><a href="http://www.runoob.com/w3cnote/git-guide.html">Github 简明教程</a></li><li><a href="https://jingyan.baidu.com/article/c85b7a6403d7d1003bac95f8.html">如何快速辨别Excel中两列数据是否相同{&#x3D;IF(C2&#x3D;B2,”相同”,”不同”)}</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>Excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信公众号与小程序</title>
    <link href="/2019/01/28/WeChat/"/>
    <url>/2019/01/28/WeChat/</url>
    
    <content type="html"><![CDATA[<h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><ol><li><a href="http://www.shenli.cc/625.html">微擎小程序模块安装教程</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>微信</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微擎</tag>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开放心态，做钱塘弄潮儿，杀出一条血路——任正非在杭州研究所业务汇报会上的讲话</title>
    <link href="/2019/01/22/HW_20190118/"/>
    <url>/2019/01/22/HW_20190118/</url>
    
    <content type="html"><![CDATA[<p>开放心态，做钱塘弄潮儿，杀出一条血路——任正非在杭州研究所业务汇报会上的讲话</p><ul><li>一、软件上我们最缺乏的是对宏观架构有清醒认识的人才，要站到战略的高度去看未来的软件人才。</li><li>二、谁也没有限制我们的科研，要开放心态，连接世界上一切优秀的资源。</li><li>三、向谷歌军团学习，扑上去，杀出一条血路。<br>&nbsp;<br><escape><span id="more"></span></escape></li></ul><h1 id="开放心态，做钱塘弄潮儿，杀出一条血路——任正非在杭州研究所业务汇报会上的讲话"><a href="#开放心态，做钱塘弄潮儿，杀出一条血路——任正非在杭州研究所业务汇报会上的讲话" class="headerlink" title="开放心态，做钱塘弄潮儿，杀出一条血路——任正非在杭州研究所业务汇报会上的讲话"></a>开放心态，做钱塘弄潮儿，杀出一条血路——任正非在杭州研究所业务汇报会上的讲话</h1><p>2019年1月9日</p><p><img src="/HW_20190118%5C01_Title.png"></p><h2 id="一、软件上我们最缺乏的是对宏观架构有清醒认识的人才，要站到战略的高度去看未来的软件人才。"><a href="#一、软件上我们最缺乏的是对宏观架构有清醒认识的人才，要站到战略的高度去看未来的软件人才。" class="headerlink" title="一、软件上我们最缺乏的是对宏观架构有清醒认识的人才，要站到战略的高度去看未来的软件人才。"></a>一、软件上我们最缺乏的是对宏观架构有清醒认识的人才，要站到战略的高度去看未来的软件人才。</h2><p>在基础软件这个问题上，我们要下定决心去突破。我们做黑土地的能力是小公司做不到的，只要有了土地就能长庄稼，庄稼长多了就是我们的云。找到战略高手是我们干部部门、业务部门的重要任务。</p><p>在软件工程能力提升上，我们最缺乏的是对宏观架构有清醒认识的人才。建立公司是一个架构；建立公司的利益体系也是一个架构；任何产品都是架构第一；软件重构一定要从宏观架构入手。公司未来关于软件的管理，请国际上在这方面有深厚积累的顾问公司来规范我们五万多软件专业人员编制软件的行为，通过以考促训，选拔人才。要站到战略的高度去看未来的软件人才选拔、培养和造就。今天我们在硬件中的嵌入式软件是很成功的，在此基础重构云、“黑土地”的架构，一定会争取到更大的成功。对于全世界高效的竞赛能手，例如这些年世界竞赛都在俄罗斯、东欧，我们用起薪是同级的五倍以上的年薪，把他们招来。让这些“沙丁鱼”，激活我们的组织与平台。</p><p>构筑软件安全能力，红蓝军要同时组建，蓝军不一定是有学历的。我们帮助他们在工作中完成学历教育。</p><h2 id="二、谁也没有限制我们的科研，要开放心态，连接世界上一切优秀的资源。"><a href="#二、谁也没有限制我们的科研，要开放心态，连接世界上一切优秀的资源。" class="headerlink" title="二、谁也没有限制我们的科研，要开放心态，连接世界上一切优秀的资源。"></a>二、谁也没有限制我们的科研，要开放心态，连接世界上一切优秀的资源。</h2><p>没有谁在限制我们的科研，我们也不要自己约束了自己，要敢于到贴近人才资源的地方进行研究活动，在每个研究所形成自己的技术要素，对行业发展形成牵引。</p><p>俄罗斯的数学、物理、软件都很厉害，我们也要加大对俄罗斯人才的获取，要大规模利用俄罗斯的博士来弥补我们理论上的不足；在俄罗斯的布局未来会迅速扩大，分阶段，先有一个点，就有了一个碉堡，有了碉堡，就建碉堡群，有了碉堡群，就建基地。</p><p>你们要尊重教授，尊重知识，尊重文化,请老师来讲课，老师来讲一堂课就给我们开了天光，我们给老师咨询费，就和我们建立了感情，大家就拧成了一个团队。讲课的费用从徐文伟战略研究院出，一千美金一小时，包括座谈，喝咖啡聊天都算教时。讲完了以后大家在一起沟通，一杯咖啡吸收宇宙能量。希望你们在座记住，就是要广交朋友，不能闭门造车。</p><p>要多和终端、外研所交流。日本研究所在终端技术研究上是非常厉害的，用好那就是天翻地覆的变化。在四月樱花开放的时候，欧洲研究院和日本研究所会在樱花树下开一个科学研讨会，你们也要参加，通过借鉴你们就能一下飞跃。希望你们能和日研所成为好朋友，桂花开放的时候再把他们请回来。</p><h2 id="三、向谷歌军团学习，扑上去，杀出一条血路。"><a href="#三、向谷歌军团学习，扑上去，杀出一条血路。" class="headerlink" title="三、向谷歌军团学习，扑上去，杀出一条血路。"></a>三、向谷歌军团学习，扑上去，杀出一条血路。</h2><p>谷歌军团的编制不大，战斗力极强，要好好向谷歌军团学习。</p><p>终端发展迅速就是采用了正确的方法，他们搞四组一队，实行三三制，实际上和谷歌军团是一致的。你们应该看阿根廷改革的全套文件，要一字一字读。</p><p>算法团队直接杀入到项目中去，一线既有算法又有数据，就容易突破。你们组织优秀的博士形成一个谷歌军团，扑上去，就可能把口子撕开。抽象的平台一定要有实践东西检验，多几个具体化的平台，综合起来才会有抽象平台。白博士率你的“军团”杀入反诈骗软件的研究。</p><p>智能计算业务未来可通过自研的芯片产品赚钱，从算、管、AI、存、传的芯片布局竞争力构建思路。边缘计算是公司的大战略，OS的研发中要考虑边缘计算，从用户场景分析边缘的热点问题，热点问题要在边缘侧闭环掉，减轻中央计算的压力。摄像机也要坚定不移的做边缘计算，做智能摄像机，聚焦在智能AI，聚焦在超高清，坚定不移的和终端做技术合作，勇猛冲锋，杀出一条血路来。</p><p>别关在深宫大院里面，到战场上去，立功去，说不定你就从少尉升少将了。希望你们的“谷歌军团”能率先杀出一条血路来，成功了我会来看你们。</p><p>报送：董事会成员、监事会成员</p><p>主送：全体员工，全公开</p><p>二〇一九年一月十八日</p>]]></content>
    
    
    <categories>
      
      <category>管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>华为</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第4周</title>
    <link href="/2019/01/21/2019Week04/"/>
    <url>/2019/01/21/2019Week04/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第4周（2019-01-21-2019-01-27）"><a href="#2019年第4周（2019-01-21-2019-01-27）" class="headerlink" title="2019年第4周（2019&#x2F;01&#x2F;21~2019&#x2F;01&#x2F;27）"></a>2019年第4周（2019&#x2F;01&#x2F;21~2019&#x2F;01&#x2F;27）</h2><ol><li><a href="https://blog.csdn.net/liubo2012/article/details/46337063">Slf4j MDC 使用和 基于 Logback 的实现分析</a></li><li><a href="https://jingyan.baidu.com/article/a17d52851127fc8098c8f2e0.html">Notepad++ 删除空行的技巧</a></li><li><a href="https://www.cnbeta.com/articles/soft/811595.htm">Wine 4.0 正式版发布 游戏玩家来试试怎么样？</a></li><li><a href="https://blog.csdn.net/weixin_43760287/article/details/84325809">ios个人小游戏开发者如何做到年收益过百万？</a></li><li><a href="https://sspai.com/post/52125">2018 年少数派读者最喜欢的 15 款应用 &amp; 游戏</a></li><li><a href="https://github.com/1c7/chinese-independent-developer">中国独立开发者项目列表</a></li><li><a href="https://blog.csdn.net/iOSzhuoyuan/article/details/80720991">7年开发笔记（总结）：iOS个人开发者的困境与突破</a></li><li><a href="https://www.qimai.cn/">七麦数据-各种APP 排行榜</a></li><li><a href="https://sspai.com/post/52270">2018我的人生游戏指南-欲望与「成救」模式</a></li><li><a href="https://sspai.com/post/47694">用玩游戏的方式学习 Git</a></li><li><a href="https://sspai.com/post/37613">这是你们想要的编程入门与学习方法</a></li><li><a href="https://sspai.com/post/45679">三天时间，我写出了自己的 Todo 应用</a></li><li><a href="https://sspai.com/post/45871">我把一款时间管理软件，升级了60次</a></li><li><a href="https://sspai.com/post/37201">天气应用 Flat Weather 的设计历程 | Matrix 精选</a></li><li><a href="https://sspai.com/post/37402">2016, 一个独立开发者的心路历程 | 2016 与我的数字生活</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>slf4j</tag>
      
      <tag>logBack</tag>
      
      <tag>MDC</tag>
      
      <tag>Notepad++</tag>
      
      <tag>Wine</tag>
      
      <tag>独立开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装PE到多分区U盘图文教程</title>
    <link href="/2019/01/21/WinPE/"/>
    <url>/2019/01/21/WinPE/</url>
    
    <content type="html"><![CDATA[<h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><ul><li><a href="https://coderdream.github.io/2019/01/21/WinPE/#%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF%E4%B8%8E%E7%9B%AE%E6%A0%87">基本思路与目标</a></li><li><a href="https://coderdream.github.io/2019/01/21/WinPE/#%E6%89%80%E9%9C%80%E8%BD%AF%E7%A1%AC%E4%BB%B6">所需软硬件</a></li><li><a href="https://coderdream.github.io/2019/01/21/WinPE/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">准备工作</a></li><li><a href="https://coderdream.github.io/2019/01/21/WinPE/#%E5%AE%9E%E8%B7%B5%E6%93%8D%E4%BD%9C">实践操作</a><ul><li><a href="https://coderdream.github.io/2019/01/21/WinPE/#%E6%93%8D%E4%BD%9C%E5%89%8D%E5%BF%85%E8%AF%BB">操作前必读</a></li><li><a href="https://coderdream.github.io/2019/01/21/WinPE/#%E4%B8%8B%E8%BE%B9%E4%BB%A58GU%E7%9B%98%E5%88%86%E4%B8%BA%E4%B8%A4%E4%B8%AA%E5%88%86%E5%8C%BA%E4%B8%BA%E4%BE%8B">下边以8GU盘分为两个分区为例</a></li></ul></li><li><a href="https://coderdream.github.io/2019/01/21/WinPE/#%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E">补充说明</a></li><li><a href="https://coderdream.github.io/2019/01/21/WinPE/#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">参考文档</a><br><escape><span id="more"></span></escape></li></ul><p>&nbsp;</p><h2 id="基本思路与目标"><a href="#基本思路与目标" class="headerlink" title="基本思路与目标"></a>基本思路与目标</h2><ol><li>实际上这是网上已有的内容，这里做个知识普及，不是新东西。也有很多U盘PE制作工具，请绕过，条条大路通罗马，这里只说这一条道。</li><li>U盘做成两个或更多的分区（建议分两个分区），其中一个分区专门用来放启动PE所需的文件，其他分区可以格成NTFS格式或exFAT格式（建议后者），方便存放大容量（超个4G）的单个文件，如，目前WIN10官方的ISO文件有5G之多。</li></ol><p>&nbsp;</p><h2 id="所需软硬件"><a href="#所需软硬件" class="headerlink" title="所需软硬件"></a>所需软硬件</h2><ol><li>软件工具：UltraISO、DiskGenius</li><li>PE的ISO文件：WinPE_X64_2in1_20170812. ISO，以及相应的PMF文件，PMF文件你也可以自己制作，教程中有说到。</li><li>U盘：8G或更大，小U盘分区意义不大。呵呵，实际上8G都偏小，我是用来演示的，将就说一下8G可以。<br>上述软件工具与PEISO文件下载地址：<a href="http://pan/">http://pan</a>. baidu. com&#x2F;s&#x2F;1i4BH4Cd密码：9t0z</li></ol><p>&nbsp;</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>切记，备份你的U盘数据到电脑硬盘上，因为制作过程中将格式化U盘。<br>&nbsp;</p><h2 id="实践操作"><a href="#实践操作" class="headerlink" title="实践操作"></a>实践操作</h2><h3 id="操作前必读"><a href="#操作前必读" class="headerlink" title="操作前必读"></a>操作前必读</h3><ul><li>A. 如果你的U盘已经有多个分区（事先要下载相应的PMF文件），请确认最后一个分区的容量是否合适，要大于PMF文件容量，然后从第14个步骤开始。</li><li>B. 如果你事先已有了PMF文件，但U盘没有多分区，从第9个步骤开始操作。</li><li>C. 其他情况从第1个步骤开始。</li></ul><h3 id="下边以8GU盘分为两个分区为例"><a href="#下边以8GU盘分为两个分区为例" class="headerlink" title="下边以8GU盘分为两个分区为例"></a>下边以8GU盘分为两个分区为例</h3><ol><li><p>写入硬盘映像。重复强调一下，要事先备份U盘数据。<br>  安装UltraISO，也可以是免安装的单文件版本。U盘接入电脑。使用UltraISO打开WinPE_X64_2in1_20170812. ISO，如下图（图1）操作。</p>  <img src="/2019/01/21/WinPE/image001.png" class=""></li><li><p>选择写入方式（图2）。有些老式机子不支持HDD+V2模式，所以一般HDD+模式即可。选择好之后，点“写入”。</p>  <img src="/2019/01/21/WinPE/image002.png" class=""></li><li><p>以下是正式写入U盘的进程图（图3）：</p>  <img src="/2019/01/21/WinPE/image003.png" class=""></li><li><p>刻录成功，返回（图4），关闭UltraISO。此时U盘是可启动的PE盘，但是还是单一分区。</p>  <img src="/2019/01/21/WinPE/image004.png" class=""></li><li><p>运行DiskGenius。右键点击DiskGenius界面中的U盘（图5），将U盘分区备份成镜像文件（pmf为后缀名的文件）。</p>  <img src="/2019/01/21/WinPE/image005.png" class=""></li><li><p>选择备份到什么路径（图6），并指定备份的文件名，如：WinPE_X64_2in1_20170812. pmf</p>  <img src="/2019/01/21/WinPE/image006.png" class=""></li><li><p>下图（图7）为备份过程。</p>  <img src="/2019/01/21/WinPE/image007.png" class=""></li><li><p>成功备份的结果（图8）  </p>  <img src="/2019/01/21/WinPE/image008.png" class=""></li><li><p>删除U盘分区（图9）。这个U盘还是一个分区，不是初衷。</p>  <img src="/2019/01/21/WinPE/image009.png" class=""><p>  U盘PE数据的已经备份了，就是WinPE_X64_2in1_20170812. pmf，不怕删除U盘分区。这为下面U盘分成两个分区做好准备工作。</p></li><li><p>U盘分区（图10）。用来做PE启动的分区要放在最后一个分区，这里以两个分区为例，第二分区是最后一个分区，是用来PE启动的。第一分区是普通分区，可以大一些，比如，8G的U盘，第一个分区给出6G容量（图10），余下的1. 2G作为PE启动的分区。如果你有32G的U盘，你可以将PE启动的分区做成4G也可以，主要还是看你的需要。<br>第一个分区用来存放各类文件的，NTFS格式或exFAT格式较好（建议后者），看示意图。</p><img src="/2019/01/21/WinPE/image010.png" class=""></li><li><p>确定PE启动分区（图11）。作为PE启动分区（以1. 2G为例），必须是主磁盘分区，FAT32格式。</p><img src="/2019/01/21/WinPE/image011.png" class=""></li><li><p>激活PE启动分区（图12）。</p><img src="/2019/01/21/WinPE/image012.png" class=""></li><li><p>保存分区表与格式化分区（图13）。点击“保存更改”即可。</p><img src="/2019/01/21/WinPE/image013.png" class=""></li><li><p>将镜像文件还原到PE启动分区（图14）。右键点1. 2G的那个分区，点菜单“从镜像文件还原分区”。</p><img src="/2019/01/21/WinPE/image014.png" class=""></li><li><p>进行分区还原。选择事先备份的pmf文件，点“开始”进行还原。此时只是还原1. 2G的那个分区，6G的分区不去动它。</p><img src="/2019/01/21/WinPE/image015.png" class=""></li><li><p>还原成功的示意图（图16）。图中G分区是U盘的第一个分区，NTFS格式，H分区是PE启动分区，FAT32格式。</p><img src="/2019/01/21/WinPE/image016.png" class=""></li><li><p>在Windows的文件资源管理器中看到的U盘分区的示意图（图17）。</p>  <img src="/2019/01/21/WinPE/image017.png" class=""></li></ol><p>&nbsp;</p><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><ol><li>启动分区PE如何更新？在<strong>版本号15063的WIN10</strong>或PE中是可以看到U盘的多个分区，包括启动分区FAT32。一般来说，就是同名替换WIM文件，外置程序按同样路径替换。结构复杂的PE，制作者有提供PMF文件（单一分区方式）最方便，如果没有，自己找个旧U盘制作个PMF文件（单一分区方式），将这个PMF文件恢复到大U盘的FAT32分区。</li><li>启动分区专门用来置放系统安装源文件也是同样的道理。这种系统安装方式类似以前的光盘启动安装。</li></ol><p>&nbsp;</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li>[制作自己的PMF文件](<a href="http://bbs/">http://bbs</a>. pcbeta. com&#x2F;viewthread-1753994-1-1. html)</li><li>[原文](<a href="http://bbs/">http://bbs</a>. pcbeta. com&#x2F;viewthread-1753915-1-1. html)</li></ol>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WinPE</tag>
      
      <tag>UltraISO</tag>
      
      <tag>DiskGenius</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NodeJS 相关</title>
    <link href="/2019/01/19/NodeJS/"/>
    <url>/2019/01/19/NodeJS/</url>
    
    <content type="html"><![CDATA[<h1 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h1><ol><li><a href="https://www.cnblogs.com/sghy/p/6840925.html">设置npm的registry</a></li><li><a href="http://www.runoob.com/w3cnote/git-guide.html">Github 简明教程</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html">测试框架 Mocha 实例教程-阮一峰</a></li><li>[前端单元测试 实现教程 mocha + mochawesome + istanbul + sinon + chai](前端单元测试 实现教程 mocha + mochawesome + istanbul + sinon + chai)</li><li><a href="https://blog.csdn.net/prufeng/article/details/83043246">使用Mocha和Istanbul实现Node.js单元测试和覆盖率</a></li><li><a href="https://istanbul.js.org/docs/tutorials/mocha/">Using Istanbul With Mocha</a></li><li><a href="https://www.npmjs.com/package/mkdirp">mkdirp - Create a new directory and any necessary subdirectories</a></li><li><a href="https://www.jianshu.com/p/ad59cfd158d4">chai学习笔记</a></li><li><a href="https://www.cnblogs.com/itadong/p/7151308.html">nodejs取得当前执行路径</a></li><li><a href="http://www.voidcn.com/article/p-vcxnomvv-bth.html">将require(‘chromedriver).path直接传递给selenium-webdriver</a></li><li><a href="https://www.cnblogs.com/yxi-liu/p/node-selenium-driver.html">Selenium-webdriver基本使用</a></li><li><a href="https://blog.csdn.net/weixin_34234823/article/details/86400982">Node + Selenium使用小结(sleep使用)</a></li><li><a href="https://www.jianshu.com/p/f4a85c683750">Node.js结合selenium做web自动化测试第七课</a></li></ol><h1 id="USING-ASYNC-AWAIT"><a href="#USING-ASYNC-AWAIT" class="headerlink" title="USING ASYNC &#x2F; AWAIT"></a><a href="https://mochajs.org/#interfaces">USING ASYNC &#x2F; AWAIT</a></h1><p>If your JS environment supports async &#x2F; await, you can also write asynchronous tests like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">beforeEach</span>(<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">await</span> db.<span class="hljs-title function_">clear</span>();<br>  <span class="hljs-keyword">await</span> db.<span class="hljs-title function_">save</span>([tobi, loki, jane]);<br>&#125;);<br><br><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;#find()&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;responds with matching records&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> users = <span class="hljs-keyword">await</span> db.<span class="hljs-title function_">find</span>(&#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;User&#x27;</span>&#125;);<br>    users.<span class="hljs-property">should</span>.<span class="hljs-property">have</span>.<span class="hljs-title function_">length</span>(<span class="hljs-number">3</span>);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><p>package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mocha&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;test:mocha&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nyc -a --reporter=html mocha --recursive test/performanceresultservice.test.js&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure></li><li><p>d</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-comment">//********************************************//</span><br><span class="hljs-comment">// Create By       :XuLin</span><br><span class="hljs-comment">// Create Date     :2019/8/19</span><br><span class="hljs-comment">// Update Date     :2019/8/19</span><br><span class="hljs-comment">// File Description:PerformanceResultService Unit Test</span><br><span class="hljs-comment">//********************************************//</span><br><span class="hljs-keyword">var</span> expect = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;chai&#x27;</span>).<span class="hljs-property">expect</span>;<br><span class="hljs-keyword">const</span> config = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../dbconfig.json&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">PerformanceResultService</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../src/performanceresultservice&#x27;</span>);<br><br><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;findPgWorkIds&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;findPgWorkIds_01_find&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> body = &#123;<br>            <span class="hljs-string">&#x27;contextId&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-string">&#x27;data&#x27;</span>: &#123;<br>                <span class="hljs-string">&#x27;departmentLeaderWorkId&#x27;</span>: <span class="hljs-string">&#x27;B-00010&#x27;</span><br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">let</span> ctx = &#123;<br>            <span class="hljs-attr">session</span>: &#123;<br>                <span class="hljs-attr">userInfo</span>: &#123;<br>                    <span class="hljs-title class_">GlobalID</span>: <span class="hljs-string">&#x27;B-30669&#x27;</span>,<br>                    <span class="hljs-attr">role</span>: <span class="hljs-string">&#x27;TL&#x27;</span><br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">let</span> performanceResultService = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PerformanceResultService</span>(&#123;<br>            <span class="hljs-attr">dbConfig</span>: config,<br>            <span class="hljs-attr">serviceConfig</span>: &#123;<br>                <span class="hljs-attr">HR_getUserInfo</span>: <span class="hljs-string">&quot;http://kaoqin.bill-jc.com/wechatOA/api/salaryRate/getUserInfo&quot;</span><br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">await</span> performanceResultService.<span class="hljs-title function_">init</span>();<br>        <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> performanceResultService.<span class="hljs-title function_">findPgWorkIds</span>(body, ctx);<br>            <span class="hljs-keyword">debugger</span>;<br>            <span class="hljs-comment">//console.log(result);</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;###########&#x27;</span>);<br>            <span class="hljs-title function_">expect</span>(result.<span class="hljs-property">length</span>).<span class="hljs-property">to</span>.<span class="hljs-property">be</span>.<span class="hljs-title function_">equal</span>(<span class="hljs-number">168</span>);<br>    &#125;);<br>&#125;);<br><br></code></pre></td></tr></table></figure></li><li><p>console</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs clean">D:\svn_mobile3\PDRC_Mobile\Application_Development_v20190716\<span class="hljs-number">10</span>_System\bjc_logic\service_performance&gt;npm run test:mocha<br><br>&gt; @bjc/service_performance@<span class="hljs-number">1.0</span><span class="hljs-number">.0</span> test:mocha D:\svn_mobile3\PDRC_Mobile\Application_Development_v20190716\<span class="hljs-number">10</span>_System\bjc_logic\service_performance<br>&gt; nyc -a --reporter=html mocha --recursive test/performanceresultservice.test.js<br><br><br><br>  findPgWorkIds<br>departmentLeaderWorkId: B<span class="hljs-number">-30669</span><br>Executing (default): SELECT t2.WorkId,t2.UserName<br>                    FROM COM_Organization t1<br>                    JOIN COM_Employee t2<br>                    ON t2.DepartmentID=t1.DepartmentID<br>                    AND t2.WorkId!=t1.DepartmentLeaderWorkID<br>                    AND t2.EmployeeType=<span class="hljs-number">3</span><br>                    AND t1.DepartmentLeaderWorkID=<span class="hljs-string">&#x27;B-30669&#x27;</span><br>###########<br>    √ findPgWorkIds_01_find (<span class="hljs-number">1035</span>ms)<br><br><br>  <span class="hljs-number">1</span> passing (<span class="hljs-number">1</span>s)<br></code></pre></td></tr></table></figure></li></ul><p>同时在 coverage 生成报告。</p><ol><li>修改 nrm 源:<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">nrm</span> <span class="hljs-keyword">add</span> taobao https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure></li><li>增加 GitHub 变量<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;your name&quot;</span><br>$ git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;your_email@youremail.com&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="CentOS-安装-NodeJS"><a href="#CentOS-安装-NodeJS" class="headerlink" title="CentOS 安装 NodeJS"></a>CentOS 安装 NodeJS</h1><ul><li><p>安装wget</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y wget<br></code></pre></td></tr></table></figure></li><li><p>下载</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://nodejs.org/dist/v10.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>/node-v10.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>-linux-x64.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>所有版本地址</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">https:</span>//nodejs<span class="hljs-meta">.org</span>/dist/<br></code></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">tar -zxvf <span class="hljs-keyword">node</span><span class="hljs-title">-v10</span>.<span class="hljs-number">5.0</span>-linux-x64.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>建立软连接</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">ln -s /root/soft/<span class="hljs-keyword">node</span><span class="hljs-title">-v10</span>.<span class="hljs-number">5.0</span>-linux-x64/bin/<span class="hljs-keyword">node</span> <span class="hljs-title">/usr</span>/bin/<span class="hljs-keyword">node</span><br><span class="hljs-title">ln</span> -s /root/soft/<span class="hljs-keyword">node</span><span class="hljs-title">-v10</span>.<span class="hljs-number">5.0</span>-linux-x64/bin/npm /usr/bin/npm<br>ln -s /root/soft/<span class="hljs-keyword">node</span><span class="hljs-title">-v10</span>.<span class="hljs-number">5.0</span>-linux-x64/bin/nrm /usr/bin/nrm<br>ln -s /root/soft/<span class="hljs-keyword">node</span><span class="hljs-title">-v10</span>.<span class="hljs-number">5.0</span>-linux-x64/bin/pm2 /usr/bin/pm2<br></code></pre></td></tr></table></figure></li><li><p>检查版本</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> bin]<span class="hljs-meta"># node -v</span><br>v10<span class="hljs-number">.5</span><span class="hljs-number">.0</span><br>[root<span class="hljs-symbol">@localhost</span> bin]<span class="hljs-meta"># npm -v</span><br><span class="hljs-number">6.1</span><span class="hljs-number">.0</span><br>[root<span class="hljs-symbol">@localhost</span> bin]<span class="hljs-meta"># nrm -V</span><br><span class="hljs-number">1.2</span><span class="hljs-number">.1</span><br>[root<span class="hljs-symbol">@localhost</span> bin]<span class="hljs-meta"># pm2 -v</span><br><span class="hljs-number">3.5</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure></li><li><p>安装nrm</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g nrm<br></code></pre></td></tr></table></figure></li></ul><h1 id="nrm-操作"><a href="#nrm-操作" class="headerlink" title="nrm 操作"></a>nrm 操作</h1><ul><li><p>增加內源</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">nrm</span> <span class="hljs-keyword">add</span> S163 http:<span class="hljs-comment">//10.100.254.163:4873/</span><br></code></pre></td></tr></table></figure></li><li><p>查看所有源</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">[root@localhost bin]<span class="hljs-comment"># nrm ls</span><br><br>* npm <span class="hljs-params">--------</span> https:<span class="hljs-string">//registry.npmjs.org/</span><br>  yarn <span class="hljs-params">-------</span> https:<span class="hljs-string">//registry.yarnpkg.com/</span><br>  cnpm <span class="hljs-params">-------</span> http:<span class="hljs-string">//r.cnpmjs.org/</span><br>  taobao <span class="hljs-params">-----</span> https:<span class="hljs-string">//registry.npm.taobao.org/</span><br>  nj <span class="hljs-params">---------</span> https:<span class="hljs-string">//registry.nodejitsu.com/</span><br>  npmMirror -- https:<span class="hljs-string">//skimdb.npmjs.com/registry/</span><br>  edunpm <span class="hljs-params">-----</span> http:<span class="hljs-string">//registry.enpmjs.org/</span><br>  S163 <span class="hljs-params">-------</span> http:<span class="hljs-string">//10.100.254.163</span><span class="hljs-function">:4873</span>/<br></code></pre></td></tr></table></figure></li><li><p>使用內源</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">[root@localhost website]<span class="hljs-comment"># nrm use S163</span><br>                        <br><br>   Registry has been <span class="hljs-keyword">set</span> to: http:<span class="hljs-string">//10.100.254.163</span><span class="hljs-function">:4873</span>/<br><br>[root@localhost website]<span class="hljs-comment"># nrm ls</span><br><br>  npm <span class="hljs-params">--------</span> https:<span class="hljs-string">//registry.npmjs.org/</span><br>  yarn <span class="hljs-params">-------</span> https:<span class="hljs-string">//registry.yarnpkg.com/</span><br>  cnpm <span class="hljs-params">-------</span> http:<span class="hljs-string">//r.cnpmjs.org/</span><br>  taobao <span class="hljs-params">-----</span> https:<span class="hljs-string">//registry.npm.taobao.org/</span><br>  nj <span class="hljs-params">---------</span> https:<span class="hljs-string">//registry.nodejitsu.com/</span><br>  npmMirror -- https:<span class="hljs-string">//skimdb.npmjs.com/registry/</span><br>  edunpm <span class="hljs-params">-----</span> http:<span class="hljs-string">//registry.enpmjs.org/</span><br>* S163 <span class="hljs-params">-------</span> http:<span class="hljs-string">//10.100.254.163</span><span class="hljs-function">:4873</span>/<br></code></pre></td></tr></table></figure></li></ul><h1 id="打开防火墙9901端口"><a href="#打开防火墙9901端口" class="headerlink" title="打开防火墙9901端口"></a>打开防火墙9901端口</h1><ul><li>打开端口并检查<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">添加指定需要开放的端口：<br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --add-port=9901/tcp --permanent</span><br>重载入添加的端口：<br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --reload</span><br>查询指定端口是否开启成功：<br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --query-port=9901/tcp</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="svn下载"><a href="#svn下载" class="headerlink" title="svn下载"></a>svn下载</h1><ul><li><p>svn下载源代码</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">svn checkout https://<span class="hljs-number">10.100</span>.<span class="hljs-number">254.108</span>/svn/ITsvn/<span class="hljs-variable">%E4</span><span class="hljs-variable">%BA</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%93</span><span class="hljs-variable">%81</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%BA</span><span class="hljs-variable">%93</span>/<span class="hljs-variable">%E6</span><span class="hljs-variable">%96</span><span class="hljs-variable">%B0</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%B9</span><span class="hljs-variable">%B3</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%B0</span>/<span class="hljs-variable">%E5</span><span class="hljs-variable">%88</span><span class="hljs-variable">%86</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%94</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%89</span><span class="hljs-variable">%88</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%9</span>C<span class="hljs-variable">%AC</span>/PDRC_Mobile/Application_Development_v<span class="hljs-number">20190716</span>/<span class="hljs-number">10</span>_System<br></code></pre></td></tr></table></figure></li><li><p>svn更新源代码</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">svn update</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="安装与发布"><a href="#安装与发布" class="headerlink" title="安装与发布"></a>安装与发布</h1><p>进入&#x2F;pdrc&#x2F;10_System&#x2F;bjc_common&#x2F;website，使用 vim package.json 打开文件，使用[dd]行删除命令，删除下面的代码，然后按【Esc】，输入【:wq】命令，保存退出：  </p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-string">&quot;@bjc/service_dynamictemplate&quot;</span>: <span class="hljs-string">&quot;^1.0.0&quot;</span>,<br><span class="hljs-string">&quot;@bjc/service_performance&quot;</span>: <span class="hljs-string">&quot;^1.0.0&quot;</span>,<br><span class="hljs-string">&quot;@bjc/middleware_sso&quot;</span>: <span class="hljs-string">&quot;^1.0.0&quot;</span>,<br><span class="hljs-string">&quot;@bjc/middleware_role&quot;</span>: <span class="hljs-string">&quot;^1.0.0&quot;</span>,<br><span class="hljs-string">&quot;@bjc/log&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br></code></pre></td></tr></table></figure><ul><li><p>在外源下安装：  </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure></li><li><p>还原package.json内容，然后用nrm切换到內源安装：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> website]<span class="hljs-meta"># nrm use S163</span><br>[root<span class="hljs-symbol">@localhost</span> website]<span class="hljs-meta"># npm install</span><br></code></pre></td></tr></table></figure></li><li><p>修改config.default.js文件中hostname值为机器的实际IP地址：  </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle">vim <span class="hljs-regexp">/pdrc/</span><span class="hljs-number">10</span>_System<span class="hljs-regexp">/bjc_common/</span>website<span class="hljs-regexp">/config/</span>config.<span class="hljs-keyword">default</span>.js<br><br>exports.cluster = &#123;<br>listen: &#123;<br>  port: <span class="hljs-number">9901</span>,<br>  hostname: <span class="hljs-string">&#x27;10.100.254.229&#x27;</span>,<br>&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>打包前端代码：  </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@localhost pc]# npm run-script build<br>&gt; bjc_performance_pc@<span class="hljs-number">1.0</span>.<span class="hljs-number">0</span> build <span class="hljs-regexp">/pdrc/</span><span class="hljs-number">10</span>_System<span class="hljs-regexp">/bjc_ui/</span>pc<br>&gt; node build/build.js<br><br>Hash: <span class="hljs-number">7</span>aab3cb3fd1cacc57ed4<br>Version: webpack <span class="hljs-number">3.12</span>.<span class="hljs-number">0</span><br>Time: <span class="hljs-number">62971</span>ms<br>                                                  Asset       <span class="hljs-keyword">Size</span>  Chunks                    Chunk Names<br>    <span class="hljs-keyword">static</span><span class="hljs-regexp">/css/</span>app.d9fbadc6069a89e4176552e220b44f10.css     <span class="hljs-number">267</span> kB       <span class="hljs-number">1</span>  [emitted]  [big]  app<br>                    <span class="hljs-keyword">static</span><span class="hljs-regexp">/fonts/i</span>onicons.<span class="hljs-number">143146</span>f.woff2    <span class="hljs-number">82.2</span> kB          [emitted]         <br>                      <span class="hljs-keyword">static</span><span class="hljs-regexp">/fonts/i</span>onicons.d535a25.ttf     <span class="hljs-number">198</span> kB          [emitted]         <br>                     <span class="hljs-keyword">static</span><span class="hljs-regexp">/fonts/i</span>onicons.<span class="hljs-number">99</span>ac330.woff     <span class="hljs-number">198</span> kB          [emitted]         <br>               <span class="hljs-keyword">static</span><span class="hljs-regexp">/js/</span>vendor.d5102c7a2c959385c6e2.js     <span class="hljs-number">751</span> kB       <span class="hljs-number">0</span>  [emitted]  [big]  vendor<br>                  <span class="hljs-keyword">static</span><span class="hljs-regexp">/js/</span>app.<span class="hljs-number">2603</span>d4d72d1c5a87cf7f.js    <span class="hljs-number">15.6</span> kB       <span class="hljs-number">1</span>  [emitted]         app<br>             <span class="hljs-keyword">static</span><span class="hljs-regexp">/js/m</span>anifest.<span class="hljs-number">2</span>ae2e69a05c33dfc65f8.js  <span class="hljs-number">857</span> bytes       <span class="hljs-number">2</span>  [emitted]         manifest<br>                        <span class="hljs-keyword">static</span><span class="hljs-regexp">/img/i</span>onicons.a2c4a26.svg     <span class="hljs-number">555</span> kB          [emitted]  [big]  <br><span class="hljs-keyword">static</span><span class="hljs-regexp">/css/</span>app.d9fbadc6069a89e4176552e220b44f10.css.map     <span class="hljs-number">380</span> kB          [emitted]         <br>           <span class="hljs-keyword">static</span><span class="hljs-regexp">/js/</span>vendor.d5102c7a2c959385c6e2.js.map    <span class="hljs-number">3.25</span> MB       <span class="hljs-number">0</span>  [emitted]         vendor<br>              <span class="hljs-keyword">static</span><span class="hljs-regexp">/js/</span>app.<span class="hljs-number">2603</span>d4d72d1c5a87cf7f.js.map      <span class="hljs-number">63</span> kB       <span class="hljs-number">1</span>  [emitted]         app<br>         <span class="hljs-keyword">static</span><span class="hljs-regexp">/js/m</span>anifest.<span class="hljs-number">2</span>ae2e69a05c33dfc65f8.js.map    <span class="hljs-number">4.97</span> kB       <span class="hljs-number">2</span>  [emitted]         manifest<br>                                             index.html  <span class="hljs-number">583</span> bytes          [emitted]         <br>                                    <span class="hljs-keyword">static</span><span class="hljs-regexp">/js/</span>server.js   <span class="hljs-number">79</span> bytes          [emitted]         <br><br>  Build complete.<br><br>  Tip: built files are meant to be served over an HTTP server.<br>  Opening index.html over <span class="hljs-keyword">file</span>:<span class="hljs-comment">// won&#x27;t work.</span><br><br></code></pre></td></tr></table></figure></li><li><p>删除website的app文件夹下的历史版本前端代码：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">rm -rf <span class="hljs-regexp">/pdrc/</span><span class="hljs-number">10</span>_System<span class="hljs-regexp">/bjc_common/</span>website<span class="hljs-regexp">/app/i</span>ndex.html<br>rm -rf <span class="hljs-regexp">/pdrc/</span><span class="hljs-number">10</span>_System<span class="hljs-regexp">/bjc_common/</span>website<span class="hljs-regexp">/app/</span><span class="hljs-keyword">static</span><br></code></pre></td></tr></table></figure></li><li><p>复制最新前端代码到website的app文件夹下：  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp -r <span class="hljs-regexp">/pdrc/</span><span class="hljs-number">10</span>_System<span class="hljs-regexp">/bjc_ui/</span>pc<span class="hljs-regexp">/dist/</span>. <span class="hljs-regexp">/pdrc/</span><span class="hljs-number">10</span>_System<span class="hljs-regexp">/bjc_common/</span>website<span class="hljs-regexp">/app/</span><br></code></pre></td></tr></table></figure></li><li><p>修改前端配置文件的服务器地址为机器的实际IP地址：  </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@localhost</span> js]# vim <span class="hljs-regexp">/pdrc/</span>10_System<span class="hljs-regexp">/bjc_common/</span>website<span class="hljs-regexp">/app/</span><span class="hljs-keyword">static</span><span class="hljs-regexp">/js/</span>server.js <br><br>(function()&#123;<br>  window.servers <span class="hljs-operator">=</span> &#123;<br>    local: &#x27;http:<span class="hljs-comment">//10.100.254.229:9901&#x27;</span><br>  &#125;<br>&#125;)();<br></code></pre></td></tr></table></figure></li></ul><h1 id="启动web服务"><a href="#启动web服务" class="headerlink" title="启动web服务"></a>启动web服务</h1><ul><li>在website的根目录下执行命令：  <figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs prolog">npm start<br><br>[root@localhost website]# npm start<br><br>&gt; bjc_quality_sys@<span class="hljs-number">1.0</span><span class="hljs-number">.0</span> start /root/<span class="hljs-symbol">Dev</span>/website<br>&gt; egg-scripts start --daemon --title=egg-server-<span class="hljs-symbol">BJCQualitySYS</span><br><br>[egg-scripts] <span class="hljs-symbol">Starting</span> egg application at /root/<span class="hljs-symbol">Dev</span>/website<br>[egg-scripts] <span class="hljs-symbol">Run</span> node /root/<span class="hljs-symbol">Dev</span>/website/node_modules/egg-scripts/lib/start-cluster <br>&#123;<span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;egg-server-BJCQualitySYS&quot;</span>,<span class="hljs-string">&quot;baseDir&quot;</span>:<span class="hljs-string">&quot;/root/Dev/website&quot;</span>,<br><span class="hljs-string">&quot;framework&quot;</span>:<span class="hljs-string">&quot;/root/Dev/website/node_modules/egg&quot;</span>&#125; --title=egg-server-<span class="hljs-symbol">BJCQualitySYS</span><br>[egg-scripts] <span class="hljs-symbol">Save</span> log file to /root/logs<br>[egg-scripts] <span class="hljs-symbol">Wait</span> <span class="hljs-symbol">Start</span>: <span class="hljs-number">1.</span>..<br>[egg-scripts] <span class="hljs-symbol">Wait</span> <span class="hljs-symbol">Start</span>: <span class="hljs-number">2.</span>..<br>[egg-scripts] <span class="hljs-symbol">Wait</span> <span class="hljs-symbol">Start</span>: <span class="hljs-number">3.</span>..<br>[egg-scripts] <span class="hljs-symbol">Wait</span> <span class="hljs-symbol">Start</span>: <span class="hljs-number">4.</span>..<br>[egg-scripts] <span class="hljs-symbol">Wait</span> <span class="hljs-symbol">Start</span>: <span class="hljs-number">5.</span>..<br>[egg-scripts] <span class="hljs-symbol">Wait</span> <span class="hljs-symbol">Start</span>: <span class="hljs-number">6.</span>..<br>[egg-scripts] egg started on http://<span class="hljs-number">10.100</span><span class="hljs-number">.254</span><span class="hljs-number">.229</span>:<span class="hljs-number">9901</span><br></code></pre></td></tr></table></figure></li></ul><p>服务成功启动后，可在浏览器中访问！</p><h1 id="停止web服务"><a href="#停止web服务" class="headerlink" title="停止web服务"></a>停止web服务</h1><ul><li><p>在website的根目录下执行命令：      </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@localhost website]<span class="hljs-comment"># npm stop</span><br><br>&gt; bjc_quality_sys@<span class="hljs-number">1.0</span>.<span class="hljs-number">0</span> <span class="hljs-literal">stop</span> /root/Dev/website<br>&gt; egg-scripts <span class="hljs-literal">stop</span> --<span class="hljs-attr">title=</span>egg-server-BJCQualitySYS<br><br>[egg-scripts] stopping egg application with --<span class="hljs-attr">title=</span>egg-server-BJCQualitySYS<br>[egg-scripts] got <span class="hljs-keyword">master</span> <span class="hljs-title">pid</span> [<span class="hljs-string">&quot;14821&quot;</span>]<br>[egg-scripts] <span class="hljs-literal">stopped</span><br></code></pre></td></tr></table></figure></li><li><p>把任何文件放在这个目录下，可以直接用浏览器下载：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">\<span class="hljs-number">10</span>_System\bjc_common\website\app\download<br><br><span class="hljs-regexp">//</span> 放置 website.zip 文件，下载地址为：<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">10.50</span>.<span class="hljs-number">20.123</span>:<span class="hljs-number">9901</span><span class="hljs-regexp">/static/</span>download/website.zip<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>NodeJS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>NodeJS</tag>
      
      <tag>PDRC</tag>
      
      <tag>selenium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hackintosh 黑苹果乐园</title>
    <link href="/2019/01/17/Hackintosh/"/>
    <url>/2019/01/17/Hackintosh/</url>
    
    <content type="html"><![CDATA[<p>文章目录</p><ul><li><a href="#%E9%A9%B1%E5%8A%A8">驱动</a><ul><li><a href="#%E7%BD%91%E5%8D%A1">网卡</a></li></ul></li></ul><p><escape><span id="more"></span></escape>  </p><h2 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h2><h3 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h3><ol><li><p><a href="http://bbs.pcbeta.com/forum.php?mod=viewthread&tid=1799109&extra=page=1&filter=typeid&typeid=1329&page=4">AR9565无线网卡驱动（10.14和10.12系统下亲测完美）</a></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">发表于 2018<span class="hljs-string">-12</span><span class="hljs-string">-30</span> 17:17:28 |只看该作者<br>直接把这个放进资源库 ▸ Extensions里 （或者系统 ▸ 资源库 ▸ Extensions里），什么都不用删！<br></code></pre></td></tr></table></figure></li><li><p><a href="http://bbs.pcbeta.com/forum.php?mod=viewthread&tid=1794771&extra=page=2&filter=typeid&typeid=1329&typeid=1329">AR9285 Mojava无法驱动</a></p></li><li><p><a href="http://bbs.pcbeta.com/forum.php?mod=viewthread&tid=1790406&highlight=9485">Mojave驱动ar956x 9485 946x的解决方案</a></p><img src="/2019/01/17/Hackintosh/AirPortAtheros40.png" class=""></li><li><p><a href="http://bbs.pcbeta.com/forum.php?mod=viewthread&tid=1790406&extra=&highlight=9485&page=3">etnperlong</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown">好的，经过半个上午的折腾，我的AR9565终于在10.14上驱动起来了，感谢楼主提供的驱动，我后来还补上了ATH9KInjector.kext（来自国际友人修改的1.2.6版本ATH9KFixUp）<br><br>以下是我的修复方案：<br><span class="hljs-bullet">1.</span> 将楼主提供的附件里AtherosAirport40.kext，安装到/S/L/E/IO80211Family.kext/Contents/Plugins/里<br><span class="hljs-bullet">2.</span> 下载最新LiLu 1.2.7，Clover注入（一般黑果都会有的吧，更新下版本号就好）<br><span class="hljs-bullet">3.</span> 将楼主提供的附件里ATH9KFixup.kext用Clover注入<br><span class="hljs-bullet">4.</span> 修改config，按楼主的说明加上-lilubetaall 和 -ath9565<br><span class="hljs-bullet">5.</span> 下载我这里的附件并解压得到ATH9KInjector.kext，安装到/S/L/E/<br><span class="hljs-bullet">6.</span> 重建缓存，重启<br><br>参考国际友人做法，用10.13.4的IO80211Family替换，然后用全套国际友人修改的1.2.6版本ATH9KFixUp，会导致只能打开WiFi不能搜索，用楼主的附件糅合在一起之后，成功驱动！<br><br>PS：用老版本的BTFirmwareUpload貌似还可以驱动蓝牙，手机可以搜索到黑果的蓝牙信号，但是并没有<br>进一步测试<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Hackintosh</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AR9485</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS</title>
    <link href="/2019/01/14/macOS/"/>
    <url>/2019/01/14/macOS/</url>
    
    <content type="html"><![CDATA[<h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><ol><li><a href="https://blog.csdn.net/lovechris00/article/details/79935134">macOS 设置文件默认打开方式</a></li><li><a href="https://jingyan.baidu.com/article/f3ad7d0f55154309c3345bdd.html">Mac系统如何编辑hosts文件</a></li><li><a href="https://blog.csdn.net/u013062316/article/details/44309489">关于在Mac下用Unix命令操作移动硬盘的步骤</a></li><li><a href="https://jingyan.baidu.com/article/6b1823098c4f98ba58e159ec.html">Mac 如何查找出大文件？</a></li><li><a href="https://blog.csdn.net/fungleo/article/details/78489552">linux\mac 日常入门命令行使用——搜索文件\文件夹</a></li><li><a href="https://zhidao.baidu.com/question/1737939526908183027.html">苹果Mac操作系统下怎么显示隐藏文件</a></li></ol><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><ol><li><a href="https://www.iplaysoft.com/iina.html">IINA - 以成为苹果 Mac 平台上最强的好用万能视频播放器而生！</a></li><li><a href="https://www.cockos.com/licecap/">LICEcap</a><br>LICEcap 是一个神奇的免费的Gif 屏幕录像软件，它可将屏幕录像的内容直接保存为高质量(每帧颜色数量可超过256)GIF动态图片格式。并且支持特别标记鼠标操作动态效果，支持 elapsed time 和 title frame 及自定义热键功能，并自由调整录制窗口大小，你完全可以使用LICEcap录制出GIF图片格式的视频教程，看起来显得很专业!</li></ol><h2 id="应用开发"><a href="#应用开发" class="headerlink" title="应用开发"></a>应用开发</h2><ol><li><a href="https://blog.csdn.net/zixiao217/article/details/78006599">Mac安装、配置Maven</a></li><li><a href="http://www.kejunfeng.com/2018/07/12/webstorm.html">WebStorm2018.3 中文汉化最新破解激活版 Mac&#x2F;Win</a></li><li><a href="https://blog.csdn.net/wang19891106/article/details/51127133">NodeJS入门–环境搭建 IntelliJ IDEA</a></li><li><a href="https://www.cnblogs.com/hafiz/p/5515388.html">手写Maven的archetype项目脚手架</a></li><li><a href="https://my.oschina.net/u/261246/blog/817125">删除IntelliJ Idea中Maven Archetype</a></li><li><a href="https://www.cnblogs.com/mafeng/p/5985142.html">如何删除GIT中的.DS_Store</a></li></ol><h2 id="VMWare"><a href="#VMWare" class="headerlink" title="VMWare"></a>VMWare</h2><ol><li><a href="https://drive.google.com/drive/folders/1Odu1gu4cdMU0HNw8QztrR_fvYlmcNSLt?usp=sharing">macOS Catalina Final Version by Geekrar (One Full – Google Drive)</a></li><li><a href="https://www.geekrar.com/download-macos-catalina-vmware-virtualbox-image-latest-version/">Download macOS Catalina VMware &amp; VirtualBox Image – Latest Version</a></li><li><a href="https://blog.sxbai.com/174.html">如何在Windows上VMware上安装macOS Catalina 10.15</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
      <tag>IDEA</tag>
      
      <tag>WebStorm</tag>
      
      <tag>NodeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第3周</title>
    <link href="/2019/01/14/2019Week03/"/>
    <url>/2019/01/14/2019Week03/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第3周（2019-01-14-2019-01-20）"><a href="#2019年第3周（2019-01-14-2019-01-20）" class="headerlink" title="2019年第3周（2019&#x2F;01&#x2F;14~2019&#x2F;01&#x2F;20）"></a>2019年第3周（2019&#x2F;01&#x2F;14~2019&#x2F;01&#x2F;20）</h2><ol><li><a href="https://blog.csdn.net/qq_36754544/article/details/79556339">IntelliJ IDEA 如何删除自定义的 Maven 骨架(Archetype)</a></li><li><a href="https://blog.csdn.net/asdfsadfasdfsa/article/details/79988360">修改Idea默认的全局设置</a></li><li>IdeaUI 2018 链接：<a href="http://pan.baidu.com/s/1bpnlLAR">http://pan.baidu.com/s/1bpnlLAR</a> 密码：rl9v</li><li><a href="https://www.jianshu.com/p/e4a544741fe0">可能是目前最全面的Markdown写作解决方案</a></li><li><a href="https://juejin.im/entry/5c412f82e51d4552701565f3">为什么程序员们愿意在GitHub上开源自己的成果?</a></li><li><a href="https://www.expreview.com/38666.html">Adblock Plus广告过滤白名单公开：谷歌、微软、亚马逊在列(属性-&gt;可允许广告，关掉Taboola广告)</a></li></ol><p><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
      <tag>IDEA</tag>
      
      <tag>Markdown</tag>
      
      <tag>AdBlock</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第4章 Activiti6.0引擎配置</title>
    <link href="/2019/01/14/Activiti6InAction_Chapter04/"/>
    <url>/2019/01/14/Activiti6InAction_Chapter04/</url>
    
    <content type="html"><![CDATA[<h2 id="第4章-Activiti6-0引擎配置"><a href="#第4章-Activiti6-0引擎配置" class="headerlink" title="第4章 Activiti6.0引擎配置"></a>第4章 Activiti6.0引擎配置</h2><p>本章为大家介绍Activiti6.0配置，所有的配置都是通过ProcessEngineConfiguration类来设置的，其中主要的配置包括数据源，数据类型，创建数据库表的策略，作业执行器的配置，流程历史数据记录的详细级别，Activiti对日志的配置支持，以及在流程执行过程中定义方便定位信息的mdc变量，Activiti提供的事件处理程序ActivitiEven…</p><h3 id="4-1-本章概述"><a href="#4-1-本章概述" class="headerlink" title="4-1 本章概述"></a>4-1 本章概述</h3><h3 id="4-2-创建流程引擎配置-config-samples"><a href="#4-2-创建流程引擎配置-config-samples" class="headerlink" title="4-2 创建流程引擎配置-config_samples"></a>4-2 创建流程引擎配置-config_samples</h3><h3 id="4-3-创建流程引擎配置-archetype"><a href="#4-3-创建流程引擎配置-archetype" class="headerlink" title="4-3 创建流程引擎配置-archetype"></a>4-3 创建流程引擎配置-archetype</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Admin</span><span class="hljs-meta">@Admin</span><span class="hljs-operator">-</span><span class="hljs-type">PC</span> <span class="hljs-type">MINGW64</span> <span class="hljs-regexp">/d/</span><span class="hljs-type">Java</span><span class="hljs-regexp">/GitHub/</span><span class="hljs-type">Activiti6</span><span class="hljs-regexp">/tooling/</span>archetypes<span class="hljs-operator">/</span>activiti<span class="hljs-operator">-</span>archetype<span class="hljs-operator">-</span>unittest (study6)<br>$ mvn clean install<br><br></code></pre></td></tr></table></figure><p>执行完上面的命令，就可以在新建工程的时候使用这个脚手架了：<br><img src="/Activiti6InAction_Chapter04%5C01_New_Archetype.png"></p><h3 id="4-4-数据库配置-dbconfig"><a href="#4-4-数据库配置-dbconfig" class="headerlink" title="4-4 数据库配置-dbconfig"></a>4-4 数据库配置-dbconfig</h3><h3 id="4-5-数据库配置-dbconfig-code"><a href="#4-5-数据库配置-dbconfig-code" class="headerlink" title="4-5 数据库配置-dbconfig_code"></a>4-5 数据库配置-dbconfig_code</h3><h3 id="4-6-日志记录配置-logging"><a href="#4-6-日志记录配置-logging" class="headerlink" title="4-6 日志记录配置-logging"></a>4-6 日志记录配置-logging</h3><h3 id="4-7-日志记录配置-logging-mdc"><a href="#4-7-日志记录配置-logging-mdc" class="headerlink" title="4-7 日志记录配置-logging_mdc"></a>4-7 日志记录配置-logging_mdc</h3><h3 id="4-8-历史记录配置-history-1"><a href="#4-8-历史记录配置-history-1" class="headerlink" title="4-8 历史记录配置-history-1"></a>4-8 历史记录配置-history-1</h3><h3 id="4-9-历史记录配置-history-2"><a href="#4-9-历史记录配置-history-2" class="headerlink" title="4-9 历史记录配置-history-2"></a>4-9 历史记录配置-history-2</h3><h3 id="4-10-事件处理及监听器配置-eventlog"><a href="#4-10-事件处理及监听器配置-eventlog" class="headerlink" title="4-10 事件处理及监听器配置-eventlog"></a>4-10 事件处理及监听器配置-eventlog</h3><h3 id="4-11-事件处理及监听器配置-eventLinstener-1"><a href="#4-11-事件处理及监听器配置-eventLinstener-1" class="headerlink" title="4-11 事件处理及监听器配置-eventLinstener-1"></a>4-11 事件处理及监听器配置-eventLinstener-1</h3><h3 id="4-12-事件处理及监听器配置-eventLinstener-2"><a href="#4-12-事件处理及监听器配置-eventLinstener-2" class="headerlink" title="4-12 事件处理及监听器配置-eventLinstener-2"></a>4-12 事件处理及监听器配置-eventLinstener-2</h3><h3 id="4-13-命令拦截器配置-command-1"><a href="#4-13-命令拦截器配置-command-1" class="headerlink" title="4-13 命令拦截器配置-command-1"></a>4-13 命令拦截器配置-command-1</h3><h3 id="4-14-命令拦截器配置-command-2"><a href="#4-14-命令拦截器配置-command-2" class="headerlink" title="4-14 命令拦截器配置-command-2"></a>4-14 命令拦截器配置-command-2</h3><h3 id="4-15-作业执行器配置-job-1"><a href="#4-15-作业执行器配置-job-1" class="headerlink" title="4-15 作业执行器配置-job-1"></a>4-15 作业执行器配置-job-1</h3><h3 id="4-16-作业执行器配置-job-2"><a href="#4-16-作业执行器配置-job-2" class="headerlink" title="4-16 作业执行器配置-job-2"></a>4-16 作业执行器配置-job-2</h3><h3 id="4-17-Activiti与spring集成-1"><a href="#4-17-Activiti与spring集成-1" class="headerlink" title="4-17 Activiti与spring集成-1"></a>4-17 Activiti与spring集成-1</h3><h3 id="4-18-Activiti与spring集成-2"><a href="#4-18-Activiti与spring集成-2" class="headerlink" title="4-18 Activiti与spring集成-2"></a>4-18 Activiti与spring集成-2</h3><h3 id="4-19-Activiti与spring集成-3"><a href="#4-19-Activiti与spring集成-3" class="headerlink" title="4-19 Activiti与spring集成-3"></a>4-19 Activiti与spring集成-3</h3><p><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Activiti6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Activiti6.0工作流引擎深度解析与实战视频教程目录</title>
    <link href="/2019/01/14/Activiti6InAction_Contents/"/>
    <url>/2019/01/14/Activiti6InAction_Contents/</url>
    
    <content type="html"><![CDATA[<h1 id="Java视频教程详情描述："><a href="#Java视频教程详情描述：" class="headerlink" title="Java视频教程详情描述："></a>Java视频教程详情描述：</h1><p>本课程将系统且深入源码讲解Activiti6.0工作流引擎的使用、配置、核心api以及BPMN2.0规范、数据库设计及模型映射，Spring Boot2.0集成，工作流平台搭建、部署与运维等，通过本课程的学习，你将切实学会Activiti6.0工作流引擎开发，大大提升自己的业务建模能力，技术架构能力，开源库研究能力，流程梳理能力，从而进阶为Java中高级工程师。</p><h2 id="第1章-课程介绍"><a href="#第1章-课程介绍" class="headerlink" title="第1章 课程介绍"></a>第1章 课程介绍</h2><p>本课程将系统且深入源码讲解Activiti6.0工作流引擎的使用、配置、核心api以及BPMN2.0规范、数据库设计及模型映射，Spring Boot2.0集成，工作流平台搭建、部署与运维等，通过本课程的学习，你将切实学会Activiti6.0工作流引擎开发，大大提升自己的业务建模能力，技术架构能力，开源库研究能力，流程梳理能力，从而进阶为Jav…</p><h3 id="1-1-课程导学"><a href="#1-1-课程导学" class="headerlink" title="1-1 课程导学"></a>1-1 课程导学</h3><h2 id="第2章-工作流入门"><a href="#第2章-工作流入门" class="headerlink" title="第2章 工作流入门"></a>第2章 工作流入门</h2><p>本章首先介绍了工作流是什么，工作流技术选型，然后带大家快速体验activiti6.0，让大家在最短的时间内体验工作流系统的操作过程，对activiti工作流有个感性的认识。</p><h3 id="2-1-本章概述"><a href="#2-1-本章概述" class="headerlink" title="2-1 本章概述"></a>2-1 本章概述</h3><h3 id="2-2-工作流介绍"><a href="#2-2-工作流介绍" class="headerlink" title="2-2 工作流介绍"></a>2-2 工作流介绍</h3><h3 id="2-3-工作流引擎技术选型"><a href="#2-3-工作流引擎技术选型" class="headerlink" title="2-3 工作流引擎技术选型"></a>2-3 工作流引擎技术选型</h3><h3 id="2-4-Activiti6-0快速体验-部署环境介绍"><a href="#2-4-Activiti6-0快速体验-部署环境介绍" class="headerlink" title="2-4 Activiti6.0快速体验-部署环境介绍"></a>2-4 Activiti6.0快速体验-部署环境介绍</h3><h3 id="2-5-Activiti6-0快速体验-部署环境实操"><a href="#2-5-Activiti6-0快速体验-部署环境实操" class="headerlink" title="2-5 Activiti6.0快速体验-部署环境实操"></a>2-5 Activiti6.0快速体验-部署环境实操</h3><h3 id="2-6-Activiti6-0快速体验-流程体验"><a href="#2-6-Activiti6-0快速体验-流程体验" class="headerlink" title="2-6 Activiti6.0快速体验-流程体验"></a>2-6 Activiti6.0快速体验-流程体验</h3><h2 id="第3章-Activiti6-0源码初探"><a href="#第3章-Activiti6-0源码初探" class="headerlink" title="第3章 Activiti6.0源码初探"></a>第3章 Activiti6.0源码初探</h2><p>本章带大家对Activiti6.0源码进行初探,首先我会介绍如何基于源代码方式学习开源软件的方法，然后在官方源码的基础上运行activiti-app，并详细介绍activiti-app的工程结构，演示demo，学习官方demo构建的优点，对源码有一个初步认识后，我们开始activiti的hello world之旅，通过编程方式体验工作流的运行过程，绘制流程图，…</p><h3 id="3-1-本章概述"><a href="#3-1-本章概述" class="headerlink" title="3-1 本章概述"></a>3-1 本章概述</h3><h3 id="3-2-Activiti6-0源码初探-概览与获取"><a href="#3-2-Activiti6-0源码初探-概览与获取" class="headerlink" title="3-2 Activiti6.0源码初探-概览与获取"></a>3-2 Activiti6.0源码初探-概览与获取</h3><h3 id="3-3-Activiti6-0源码初探-engine"><a href="#3-3-Activiti6-0源码初探-engine" class="headerlink" title="3-3 Activiti6.0源码初探-engine"></a>3-3 Activiti6.0源码初探-engine</h3><h3 id="3-4-Activiti6-0源码初探-模块介绍"><a href="#3-4-Activiti6-0源码初探-模块介绍" class="headerlink" title="3-4 Activiti6.0源码初探-模块介绍"></a>3-4 Activiti6.0源码初探-模块介绍</h3><h3 id="3-5-Activiti6-0源码初探-activiti-app运行"><a href="#3-5-Activiti6-0源码初探-activiti-app运行" class="headerlink" title="3-5 Activiti6.0源码初探-activiti-app运行"></a>3-5 Activiti6.0源码初探-activiti-app运行</h3><h3 id="3-6-Activiti6-0源码初探-WebConfigurer"><a href="#3-6-Activiti6-0源码初探-WebConfigurer" class="headerlink" title="3-6 Activiti6.0源码初探-WebConfigurer"></a>3-6 Activiti6.0源码初探-WebConfigurer</h3><h3 id="3-7-Activiti6-0源码初探-helloword-1"><a href="#3-7-Activiti6-0源码初探-helloword-1" class="headerlink" title="3-7 Activiti6.0源码初探-helloword-1"></a>3-7 Activiti6.0源码初探-helloword-1</h3><h3 id="3-8-Activiti6-0源码初探-helloword-2"><a href="#3-8-Activiti6-0源码初探-helloword-2" class="headerlink" title="3-8 Activiti6.0源码初探-helloword-2"></a>3-8 Activiti6.0源码初探-helloword-2</h3><h3 id="3-9-Activiti6-0源码初探-helloword-idea-1"><a href="#3-9-Activiti6-0源码初探-helloword-idea-1" class="headerlink" title="3-9 Activiti6.0源码初探-helloword_idea-1"></a>3-9 Activiti6.0源码初探-helloword_idea-1</h3><h3 id="3-10-Activiti6-0源码初探-helloword-idea-2"><a href="#3-10-Activiti6-0源码初探-helloword-idea-2" class="headerlink" title="3-10 Activiti6.0源码初探-helloword_idea-2"></a>3-10 Activiti6.0源码初探-helloword_idea-2</h3><h3 id="3-11-Activiti6-0源码初探-helloword-idea-3"><a href="#3-11-Activiti6-0源码初探-helloword-idea-3" class="headerlink" title="3-11 Activiti6.0源码初探-helloword_idea-3"></a>3-11 Activiti6.0源码初探-helloword_idea-3</h3><h2 id="第4章-Activiti6-0引擎配置"><a href="#第4章-Activiti6-0引擎配置" class="headerlink" title="第4章 Activiti6.0引擎配置"></a>第4章 Activiti6.0引擎配置</h2><p>本章为大家介绍Activiti6.0配置，所有的配置都是通过ProcessEngineConfiguration类来设置的，其中主要的配置包括数据源，数据类型，创建数据库表的策略，作业执行器的配置，流程历史数据记录的详细级别，Activiti对日志的配置支持，以及在流程执行过程中定义方便定位信息的mdc变量，Activiti提供的事件处理程序ActivitiEven…</p><h3 id="4-1-本章概述"><a href="#4-1-本章概述" class="headerlink" title="4-1 本章概述"></a>4-1 本章概述</h3><h3 id="4-2-创建流程引擎配置-config-samples"><a href="#4-2-创建流程引擎配置-config-samples" class="headerlink" title="4-2 创建流程引擎配置-config_samples"></a>4-2 创建流程引擎配置-config_samples</h3><h3 id="4-3-创建流程引擎配置-archetype"><a href="#4-3-创建流程引擎配置-archetype" class="headerlink" title="4-3 创建流程引擎配置-archetype"></a>4-3 创建流程引擎配置-archetype</h3><h3 id="4-4-数据库配置-dbconfig"><a href="#4-4-数据库配置-dbconfig" class="headerlink" title="4-4 数据库配置-dbconfig"></a>4-4 数据库配置-dbconfig</h3><h3 id="4-5-数据库配置-dbconfig-code"><a href="#4-5-数据库配置-dbconfig-code" class="headerlink" title="4-5 数据库配置-dbconfig_code"></a>4-5 数据库配置-dbconfig_code</h3><h3 id="4-6-日志记录配置-logging"><a href="#4-6-日志记录配置-logging" class="headerlink" title="4-6 日志记录配置-logging"></a>4-6 日志记录配置-logging</h3><h3 id="4-7-日志记录配置-logging-mdc"><a href="#4-7-日志记录配置-logging-mdc" class="headerlink" title="4-7 日志记录配置-logging_mdc"></a>4-7 日志记录配置-logging_mdc</h3><h3 id="4-8-历史记录配置-history-1"><a href="#4-8-历史记录配置-history-1" class="headerlink" title="4-8 历史记录配置-history-1"></a>4-8 历史记录配置-history-1</h3><h3 id="4-9-历史记录配置-history-2"><a href="#4-9-历史记录配置-history-2" class="headerlink" title="4-9 历史记录配置-history-2"></a>4-9 历史记录配置-history-2</h3><h3 id="4-10-事件处理及监听器配置-eventlog"><a href="#4-10-事件处理及监听器配置-eventlog" class="headerlink" title="4-10 事件处理及监听器配置-eventlog"></a>4-10 事件处理及监听器配置-eventlog</h3><h3 id="4-11-事件处理及监听器配置-eventLinstener-1"><a href="#4-11-事件处理及监听器配置-eventLinstener-1" class="headerlink" title="4-11 事件处理及监听器配置-eventLinstener-1"></a>4-11 事件处理及监听器配置-eventLinstener-1</h3><h3 id="4-12-事件处理及监听器配置-eventLinstener-2"><a href="#4-12-事件处理及监听器配置-eventLinstener-2" class="headerlink" title="4-12 事件处理及监听器配置-eventLinstener-2"></a>4-12 事件处理及监听器配置-eventLinstener-2</h3><h3 id="4-13-命令拦截器配置-command-1"><a href="#4-13-命令拦截器配置-command-1" class="headerlink" title="4-13 命令拦截器配置-command-1"></a>4-13 命令拦截器配置-command-1</h3><h3 id="4-14-命令拦截器配置-command-2"><a href="#4-14-命令拦截器配置-command-2" class="headerlink" title="4-14 命令拦截器配置-command-2"></a>4-14 命令拦截器配置-command-2</h3><h3 id="4-15-作业执行器配置-job-1"><a href="#4-15-作业执行器配置-job-1" class="headerlink" title="4-15 作业执行器配置-job-1"></a>4-15 作业执行器配置-job-1</h3><h3 id="4-16-作业执行器配置-job-2"><a href="#4-16-作业执行器配置-job-2" class="headerlink" title="4-16 作业执行器配置-job-2"></a>4-16 作业执行器配置-job-2</h3><h3 id="4-17-Activiti与spring集成-1"><a href="#4-17-Activiti与spring集成-1" class="headerlink" title="4-17 Activiti与spring集成-1"></a>4-17 Activiti与spring集成-1</h3><h3 id="4-18-Activiti与spring集成-2"><a href="#4-18-Activiti与spring集成-2" class="headerlink" title="4-18 Activiti与spring集成-2"></a>4-18 Activiti与spring集成-2</h3><h3 id="4-19-Activiti与spring集成-3"><a href="#4-19-Activiti与spring集成-3" class="headerlink" title="4-19 Activiti与spring集成-3"></a>4-19 Activiti与spring集成-3</h3><h2 id="第5章-Activiti核心API"><a href="#第5章-Activiti核心API" class="headerlink" title="第5章 Activiti核心API"></a>第5章 Activiti核心API</h2><p>本章主要讲解Activiti核心API，包括ProcessEngine以及服务、流程存储服务、流程运行控制服务、任务管理服务、用户和用户组管理服务、表单服务管理、历史数据管理服务、其它管理服务、异常策略。在学习了这些常用api的基础上我们通过APi控制一个流程实例的状态进化，体验流程的部署过程，启动流程实例，驱动流程到下一个节点…</p><h3 id="5-1-本章概述"><a href="#5-1-本章概述" class="headerlink" title="5-1 本章概述"></a>5-1 本章概述</h3><h3 id="5-2-流程存储服务-RepositoryService-1"><a href="#5-2-流程存储服务-RepositoryService-1" class="headerlink" title="5-2 流程存储服务-RepositoryService-1"></a>5-2 流程存储服务-RepositoryService-1</h3><h3 id="5-3-流程存储服务-RepositoryService-2"><a href="#5-3-流程存储服务-RepositoryService-2" class="headerlink" title="5-3 流程存储服务-RepositoryService-2"></a>5-3 流程存储服务-RepositoryService-2</h3><h3 id="5-4-流程运行-控制服务-RuntimeService-1"><a href="#5-4-流程运行-控制服务-RuntimeService-1" class="headerlink" title="5-4 流程运行 控制服务-RuntimeService-1"></a>5-4 流程运行 控制服务-RuntimeService-1</h3><h3 id="5-5-流程运行-控制服务-RuntimeService-2"><a href="#5-5-流程运行-控制服务-RuntimeService-2" class="headerlink" title="5-5 流程运行 控制服务-RuntimeService-2"></a>5-5 流程运行 控制服务-RuntimeService-2</h3><h3 id="5-6-流程运行-控制服务-RuntimeService-3"><a href="#5-6-流程运行-控制服务-RuntimeService-3" class="headerlink" title="5-6 流程运行 控制服务-RuntimeService-3"></a>5-6 流程运行 控制服务-RuntimeService-3</h3><h3 id="5-7-任务管理服务-TaskService-1"><a href="#5-7-任务管理服务-TaskService-1" class="headerlink" title="5-7 任务管理服务-TaskService-1"></a>5-7 任务管理服务-TaskService-1</h3><h3 id="5-8-任务管理服务-TaskService-2"><a href="#5-8-任务管理服务-TaskService-2" class="headerlink" title="5-8 任务管理服务-TaskService-2"></a>5-8 任务管理服务-TaskService-2</h3><h3 id="5-9-任务管理服务-TaskService-3"><a href="#5-9-任务管理服务-TaskService-3" class="headerlink" title="5-9 任务管理服务-TaskService-3"></a>5-9 任务管理服务-TaskService-3</h3><h3 id="5-10-用户和用户组管理服务-IdentityService"><a href="#5-10-用户和用户组管理服务-IdentityService" class="headerlink" title="5-10 用户和用户组管理服务-IdentityService"></a>5-10 用户和用户组管理服务-IdentityService</h3><h3 id="5-11-表单管理服务-formeService"><a href="#5-11-表单管理服务-formeService" class="headerlink" title="5-11 表单管理服务- formeService"></a>5-11 表单管理服务- formeService</h3><h3 id="5-12-历史数据管理服务-HistoryService-1"><a href="#5-12-历史数据管理服务-HistoryService-1" class="headerlink" title="5-12 历史数据管理服务-HistoryService-1"></a>5-12 历史数据管理服务-HistoryService-1</h3><h3 id="5-13-历史数据管理服务-HistoryService-2"><a href="#5-13-历史数据管理服务-HistoryService-2" class="headerlink" title="5-13 历史数据管理服务-HistoryService-2"></a>5-13 历史数据管理服务-HistoryService-2</h3><h3 id="5-14-其它管理服务-OtherService"><a href="#5-14-其它管理服务-OtherService" class="headerlink" title="5-14 其它管理服务-OtherService"></a>5-14 其它管理服务-OtherService</h3><h3 id="5-15-异常策略"><a href="#5-15-异常策略" class="headerlink" title="5-15 异常策略"></a>5-15 异常策略</h3><h2 id="第6章-数据库设计与模型映射"><a href="#第6章-数据库设计与模型映射" class="headerlink" title="第6章 数据库设计与模型映射"></a>第6章 数据库设计与模型映射</h2><p>本章主要讲解数据库设计与模型映射，包括通用数据表、流程存储表、身份数据表、运行时流程数据表、历史流程表。我们通过流程执行观察数据库内容的变化体会流程引擎表结构之间的关系。</p><h3 id="6-1-通用数据表设计"><a href="#6-1-通用数据表设计" class="headerlink" title="6-1 通用数据表设计"></a>6-1 通用数据表设计</h3><h3 id="6-2-流程定义存储表设计"><a href="#6-2-流程定义存储表设计" class="headerlink" title="6-2 流程定义存储表设计"></a>6-2 流程定义存储表设计</h3><h3 id="6-3-身份数据表设计"><a href="#6-3-身份数据表设计" class="headerlink" title="6-3 身份数据表设计"></a>6-3 身份数据表设计</h3><h3 id="6-4-运行时流程数据表设计-1"><a href="#6-4-运行时流程数据表设计-1" class="headerlink" title="6-4 运行时流程数据表设计-1"></a>6-4 运行时流程数据表设计-1</h3><h3 id="6-5-运行时流程数据表设计-2"><a href="#6-5-运行时流程数据表设计-2" class="headerlink" title="6-5 运行时流程数据表设计-2"></a>6-5 运行时流程数据表设计-2</h3><h3 id="6-6-历史流程数据表设计-1"><a href="#6-6-历史流程数据表设计-1" class="headerlink" title="6-6 历史流程数据表设计-1"></a>6-6 历史流程数据表设计-1</h3><h3 id="6-7-历史流程数据表设计-2"><a href="#6-7-历史流程数据表设计-2" class="headerlink" title="6-7 历史流程数据表设计-2"></a>6-7 历史流程数据表设计-2</h3><h2 id="第7章-BPMN2-0规范"><a href="#第7章-BPMN2-0规范" class="headerlink" title="第7章 BPMN2.0规范"></a>第7章 BPMN2.0规范</h2><p>本章主要讲解BPMN2.0规范，这里主要介绍BPMN中规范的基本元素Activities(活动)、Gateways（网关）、Events（事件），事件一般按照位置分类为开始事、结束事件、中间事件、边界事件。活动包括原子任务和子流程,常用原子任务涉及到UserTask（用户任务）、ScriptTask(脚本任务)、ServiceTask（JavaDelegate定义实现），网关包…</p><h3 id="7-1-本章概述"><a href="#7-1-本章概述" class="headerlink" title="7-1 本章概述"></a>7-1 本章概述</h3><h3 id="7-2-BPMN2-0流程事件-事件分类"><a href="#7-2-BPMN2-0流程事件-事件分类" class="headerlink" title="7-2 BPMN2.0流程事件-事件分类"></a>7-2 BPMN2.0流程事件-事件分类</h3><h3 id="7-3-BPMN2-0流程事件-错误事件"><a href="#7-3-BPMN2-0流程事件-错误事件" class="headerlink" title="7-3 BPMN2.0流程事件-错误事件"></a>7-3 BPMN2.0流程事件-错误事件</h3><h3 id="7-4-BPMN2-0流程事件-信号消息事件"><a href="#7-4-BPMN2-0流程事件-信号消息事件" class="headerlink" title="7-4 BPMN2.0流程事件-信号消息事件"></a>7-4 BPMN2.0流程事件-信号消息事件</h3><h3 id="7-5-BPMN2-0流程任务-用户任务-1"><a href="#7-5-BPMN2-0流程任务-用户任务-1" class="headerlink" title="7-5 BPMN2.0流程任务-用户任务-1"></a>7-5 BPMN2.0流程任务-用户任务-1</h3><h3 id="7-6-BPMN2-0流程任务-用户任务-2"><a href="#7-6-BPMN2-0流程任务-用户任务-2" class="headerlink" title="7-6 BPMN2.0流程任务-用户任务-2"></a>7-6 BPMN2.0流程任务-用户任务-2</h3><h3 id="7-7-BPMN2-0脚本任务"><a href="#7-7-BPMN2-0脚本任务" class="headerlink" title="7-7 BPMN2.0脚本任务"></a>7-7 BPMN2.0脚本任务</h3><h3 id="7-8-BPMN2-0服务任务-1"><a href="#7-8-BPMN2-0服务任务-1" class="headerlink" title="7-8 BPMN2.0服务任务-1"></a>7-8 BPMN2.0服务任务-1</h3><h3 id="7-9-BPMN2-0服务任务-2"><a href="#7-9-BPMN2-0服务任务-2" class="headerlink" title="7-9 BPMN2.0服务任务-2"></a>7-9 BPMN2.0服务任务-2</h3><h3 id="7-10-BPMN2-0顺序流和网关-1"><a href="#7-10-BPMN2-0顺序流和网关-1" class="headerlink" title="7-10 BPMN2.0顺序流和网关-1"></a>7-10 BPMN2.0顺序流和网关-1</h3><h3 id="7-11-BPMN2-0顺序流和网关-2"><a href="#7-11-BPMN2-0顺序流和网关-2" class="headerlink" title="7-11 BPMN2.0顺序流和网关-2"></a>7-11 BPMN2.0顺序流和网关-2</h3><h3 id="7-12-BPMN2-0顺序流和网关-3"><a href="#7-12-BPMN2-0顺序流和网关-3" class="headerlink" title="7-12 BPMN2.0顺序流和网关-3"></a>7-12 BPMN2.0顺序流和网关-3</h3><h3 id="7-13-BPMN2-0子流程-1"><a href="#7-13-BPMN2-0子流程-1" class="headerlink" title="7-13 BPMN2.0子流程-1"></a>7-13 BPMN2.0子流程-1</h3><h3 id="7-14-BPMN2-0子流程-2"><a href="#7-14-BPMN2-0子流程-2" class="headerlink" title="7-14 BPMN2.0子流程-2"></a>7-14 BPMN2.0子流程-2</h3><h3 id="7-15-BPMN2-0子流程-3"><a href="#7-15-BPMN2-0子流程-3" class="headerlink" title="7-15 BPMN2.0子流程-3"></a>7-15 BPMN2.0子流程-3</h3><h3 id="7-16-BPMN2-0子流程-4"><a href="#7-16-BPMN2-0子流程-4" class="headerlink" title="7-16 BPMN2.0子流程-4"></a>7-16 BPMN2.0子流程-4</h3><h2 id="第8章-Activiti6-0集成Spring-Boot2-0"><a href="#第8章-Activiti6-0集成Spring-Boot2-0" class="headerlink" title="第8章 Activiti6.0集成Spring Boot2.0"></a>第8章 Activiti6.0集成Spring Boot2.0</h2><p>本章讲解集成Spring Boot2.0，主要包括Spring Boot2.0特性、启动依赖starter、 自动装配AutoConfigure、运维监控Acutator、微服务Stand-alone、 启动入口SpringBootApplication、外部化配置yaml、Profiles、日志logging、 web mvc、SQL数据库集成、单元测试。 …</p><h3 id="8-1-本章概述"><a href="#8-1-本章概述" class="headerlink" title="8-1 本章概述"></a>8-1 本章概述</h3><h3 id="8-2-Spring-Boot2-0入门实例-1"><a href="#8-2-Spring-Boot2-0入门实例-1" class="headerlink" title="8-2 Spring Boot2.0入门实例-1"></a>8-2 Spring Boot2.0入门实例-1</h3><h3 id="8-3-Spring-Boot2-0入门实例-2"><a href="#8-3-Spring-Boot2-0入门实例-2" class="headerlink" title="8-3 Spring Boot2.0入门实例-2"></a>8-3 Spring Boot2.0入门实例-2</h3><h3 id="8-4-Spring-Boot2-0启动依赖和自动装配-1"><a href="#8-4-Spring-Boot2-0启动依赖和自动装配-1" class="headerlink" title="8-4 Spring Boot2.0启动依赖和自动装配-1"></a>8-4 Spring Boot2.0启动依赖和自动装配-1</h3><h3 id="8-5-Spring-Boot2-0启动依赖和自动装配-2"><a href="#8-5-Spring-Boot2-0启动依赖和自动装配-2" class="headerlink" title="8-5 Spring Boot2.0启动依赖和自动装配-2"></a>8-5 Spring Boot2.0启动依赖和自动装配-2</h3><h3 id="8-6-Activiti6-0与Spring-Boot2-0集成-1"><a href="#8-6-Activiti6-0与Spring-Boot2-0集成-1" class="headerlink" title="8-6 Activiti6.0与Spring Boot2.0集成-1"></a>8-6 Activiti6.0与Spring Boot2.0集成-1</h3><h3 id="8-7-Activiti6-0与Spring-Boot2-0集成-2"><a href="#8-7-Activiti6-0与Spring-Boot2-0集成-2" class="headerlink" title="8-7 Activiti6.0与Spring Boot2.0集成-2"></a>8-7 Activiti6.0与Spring Boot2.0集成-2</h3><h2 id="第9章-工作流平台搭建"><a href="#第9章-工作流平台搭建" class="headerlink" title="第9章 工作流平台搭建"></a>第9章 工作流平台搭建</h2><p>本章主要讲解工作流平台搭建，包括需求分析、集成activiti-app、 集成activiti-admin、开发自定义动态表单、电商的业务流程分析建模、 流程文件部署及系统测试验证。</p><h3 id="9-1-工作流平台搭建-需求分析"><a href="#9-1-工作流平台搭建-需求分析" class="headerlink" title="9-1 工作流平台搭建-需求分析"></a>9-1 工作流平台搭建-需求分析</h3><h3 id="9-2-工作流平台搭建集成spring-boot1-1"><a href="#9-2-工作流平台搭建集成spring-boot1-1" class="headerlink" title="9-2 工作流平台搭建集成spring boot1-1"></a>9-2 工作流平台搭建集成spring boot1-1</h3><h3 id="9-3-工作流平台搭建集成spring-boot1-2"><a href="#9-3-工作流平台搭建集成spring-boot1-2" class="headerlink" title="9-3 工作流平台搭建集成spring boot1-2"></a>9-3 工作流平台搭建集成spring boot1-2</h3><h3 id="9-4-工作流平台搭建集成spring-boot1-3"><a href="#9-4-工作流平台搭建集成spring-boot1-3" class="headerlink" title="9-4 工作流平台搭建集成spring boot1-3"></a>9-4 工作流平台搭建集成spring boot1-3</h3><h3 id="9-5-工作流平台搭建集成spring-boot1-4"><a href="#9-5-工作流平台搭建集成spring-boot1-4" class="headerlink" title="9-5 工作流平台搭建集成spring boot1-4"></a>9-5 工作流平台搭建集成spring boot1-4</h3><h3 id="9-6-工作流平台升级spring-boot2-1"><a href="#9-6-工作流平台升级spring-boot2-1" class="headerlink" title="9-6 工作流平台升级spring boot2-1"></a>9-6 工作流平台升级spring boot2-1</h3><h3 id="9-7-工作流平台升级spring-boot2-2"><a href="#9-7-工作流平台升级spring-boot2-2" class="headerlink" title="9-7 工作流平台升级spring boot2-2"></a>9-7 工作流平台升级spring boot2-2</h3><h3 id="9-8-工作流平台升级spring-boot2-3"><a href="#9-8-工作流平台升级spring-boot2-3" class="headerlink" title="9-8 工作流平台升级spring boot2-3"></a>9-8 工作流平台升级spring boot2-3</h3><h3 id="9-9-工作流平台升级spring-boot2-4"><a href="#9-9-工作流平台升级spring-boot2-4" class="headerlink" title="9-9 工作流平台升级spring boot2-4"></a>9-9 工作流平台升级spring boot2-4</h3><h3 id="9-10-工作流平台搭建-workflow-1"><a href="#9-10-工作流平台搭建-workflow-1" class="headerlink" title="9-10 工作流平台搭建-workflow-1"></a>9-10 工作流平台搭建-workflow-1</h3><h3 id="9-11-工作流平台搭建-workflow-2"><a href="#9-11-工作流平台搭建-workflow-2" class="headerlink" title="9-11 工作流平台搭建-workflow-2"></a>9-11 工作流平台搭建-workflow-2</h3><h3 id="9-12-工作流平台搭建-购物流程-1"><a href="#9-12-工作流平台搭建-购物流程-1" class="headerlink" title="9-12 工作流平台搭建-购物流程-1"></a>9-12 工作流平台搭建-购物流程-1</h3><h3 id="9-13-工作流平台搭建-购物流程-2"><a href="#9-13-工作流平台搭建-购物流程-2" class="headerlink" title="9-13 工作流平台搭建-购物流程-2"></a>9-13 工作流平台搭建-购物流程-2</h3><h3 id="9-14-工作流平台搭建-购物流程-3"><a href="#9-14-工作流平台搭建-购物流程-3" class="headerlink" title="9-14 工作流平台搭建-购物流程-3"></a>9-14 工作流平台搭建-购物流程-3</h3><h2 id="第10章-工作流平台部署和运维"><a href="#第10章-工作流平台部署和运维" class="headerlink" title="第10章 工作流平台部署和运维"></a>第10章 工作流平台部署和运维</h2><p>本章主要讲解工作流平台部署和运维，包括云上部署系统、工作流平台运维、 系统横向扩容、那些踩过的坑。</p><h3 id="10-1-工作流平台部署-1"><a href="#10-1-工作流平台部署-1" class="headerlink" title="10-1 工作流平台部署-1"></a>10-1 工作流平台部署-1</h3><h3 id="10-2-工作流平台部署-2"><a href="#10-2-工作流平台部署-2" class="headerlink" title="10-2 工作流平台部署-2"></a>10-2 工作流平台部署-2</h3><h2 id="第11章-课程总结"><a href="#第11章-课程总结" class="headerlink" title="第11章 课程总结"></a>第11章 课程总结</h2><p>本章和大家一起总结回顾课程重难点，帮助大家更好的加强与巩固本课程所学知识。</p><h3 id="11-1-课程总结"><a href="#11-1-课程总结" class="headerlink" title="11-1 课程总结"></a>11-1 课程总结</h3><p><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Activiti6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 系统 BlueLake 主题安装与设置</title>
    <link href="/2019/01/09/Hexo/"/>
    <url>/2019/01/09/Hexo/</url>
    
    <content type="html"><![CDATA[<p>文章目录</p><ul><li><a href="#%E5%AE%89%E8%A3%85%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96">安装与初始化</a></li><li><a href="#%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%8A%A0%E4%B8%8A%E5%9B%BE%E7%89%87">给自己的Hexo博客加上图片</a></li><li><a href="#Hexo%E4%B8%AD%E6%8F%90%E4%BE%9B%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%8A%9F%E8%83%BD">Hexo中提供文件下载功能</a></li><li><a href="#%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2">添加本地搜索</a></li><li><a href="#%E8%AE%BE%E7%BD%AE%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87">设置阅读全文</a></li><li><a href="#%E8%A7%A3%E5%86%B3busuanzi%E6%97%A0%E6%95%88%E7%9A%84%E6%96%B9%E6%B3%95">解决busuanzi无效的方法</a></li></ul><p><escape><span id="more"></span></escape></p><p>&nbsp;</p><h3 id="安装与初始化"><a href="#安装与初始化" class="headerlink" title="安装与初始化"></a>安装与初始化</h3><ul><li><p>安装hexo：<br>Windows</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install hexo-cli -g</span> <br></code></pre></td></tr></table></figure><p>macOS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo npm install hexo-cli -g</span> <br></code></pre></td></tr></table></figure></li><li><p>创建网站目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> blog</span><br></code></pre></td></tr></table></figure></li><li><p>通过blog目录创建站点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo init blog</span> <br></code></pre></td></tr></table></figure></li><li><p>安装过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">admindeMacBook<span class="hljs-operator">-</span>Pro:<span class="hljs-operator">~</span> admin hexo init blog<br>INFO  Cloning hexo<span class="hljs-operator">-</span>starter <span class="hljs-keyword">to</span> <span class="hljs-operator">~</span><span class="hljs-operator">/</span>blog<br>hexo<span class="hljs-operator">-</span>site<span class="hljs-variable">@0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> <span class="hljs-operator">/</span>Users<span class="hljs-operator">/</span>admin<span class="hljs-operator">/</span>blog<br>... 部分省略<br>      ├── <span class="hljs-keyword">range</span><span class="hljs-operator">-</span>parser<span class="hljs-variable">@1</span><span class="hljs-number">.2</span><span class="hljs-number">.0</span> <br>      └── statuses<span class="hljs-variable">@1</span><span class="hljs-number">.3</span><span class="hljs-number">.0</span> <br><br>INFO  <span class="hljs-keyword">Start</span> blogging <span class="hljs-keyword">with</span> Hexo<span class="hljs-operator">!</span><br></code></pre></td></tr></table></figure></li><li><p>安装完成后,进入blog站点目录,安装一下npm插件支持(<em>如果是其他电脑克隆了这个项目，需要执行下面的安装命令</em>)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> blog</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install</span><br></code></pre></td></tr></table></figure></li><li><p>启动站点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo server</span><br>INFO  Start processing<br>INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.<br></code></pre></td></tr></table></figure></li><li><p>查看站点：<br>在浏览器中查看<a href="http://localhost:4000/">http://localhost:4000/</a></p></li><li><p>配置GitHub<br>在blog目录,打开_config.yml</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>vim _config.yml<br></code></pre></td></tr></table></figure></li><li><p>修改配置文件_config.yml中deploy下的内容</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-variable">&amp;nbsp</span><span class="hljs-punctuation">;</span><br><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//github.com/CoderDream/coderdream.github.io.git</span><br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure></li><li><p>Github部署配置参数详解</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">deploy:</span>  表示部署设置<br><span class="hljs-symbol">type:</span>    部署类型,支持git,heroku<br><span class="hljs-symbol">repo:</span>    部署位置 git仓库项目的位置<br><span class="hljs-symbol">branch:</span>  部署到Github的分支名称<br><span class="hljs-symbol">message:</span> 自定义提交信息<br></code></pre></td></tr></table></figure></li><li><p>设置语言</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN<br></code></pre></td></tr></table></figure></li><li><p>安装部署插件<br>配置修改完成后,需要安装部署插件:<br>安装 hexo-deployer-git 插件: 在blog目录执行以下命令即可</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></li><li><p>插件安装完成后,执行项目清理和静态网页生成</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo clean<br><span class="hljs-variable">$ </span>hexo genarate<br></code></pre></td></tr></table></figure></li><li><p>安装完成后进行部署</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo deploy<br></code></pre></td></tr></table></figure></li><li><p>一键发布</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean; hexo <span class="hljs-keyword">generate</span>; hexo deploy<br></code></pre></td></tr></table></figure></li><li><p>查看结果<br>然后到你的Github上项目的主页,看看master分支上的代码更新时间</p></li></ul><h3 id="给自己的Hexo博客加上图片"><a href="#给自己的Hexo博客加上图片" class="headerlink" title="给自己的Hexo博客加上图片"></a>给自己的Hexo博客加上图片</h3><ul><li>首先把blog（hexo）目录下的_config.yml里的psot_asset_folder:设置为true</li><li>在blog（hexo）目录下执行:<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">npm install hexo-asset-<span class="hljs-built_in">image</span> --<span class="hljs-built_in">save</span><br></code></pre></td></tr></table></figure></li><li>在blog（hexo）目录下Git Bash Here，运行hexo n “博客名”来生成md博客时，会在_post目录下看到一个与博客同名的文件夹。</li><li>将想要上传的图片先扔到文件夹下，然后在博客中使用markdown的格式引入图片：<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[你想要输入的替代文字]</span>(xxxx/图片名.jpg)<br></code></pre></td></tr></table></figure></li></ul><h3 id="Hexo中提供文件下载功能"><a href="#Hexo中提供文件下载功能" class="headerlink" title="Hexo中提供文件下载功能"></a>Hexo中提供文件下载功能</h3><ul><li>在source目录下新建dounload文件夹，将需要上传的文件xx.xls复制到该目录。</li><li>在_posts博文中，插入：<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[点击下载]</span>(/download/xx.xls&quot;)<br></code></pre></td></tr></table></figure></li></ul><h3 id="添加本地搜索"><a href="#添加本地搜索" class="headerlink" title="添加本地搜索"></a>添加本地搜索</h3><p>默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件hexo-generator-json-content来创建JSON数据文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bath">$ npm install hexo-generator-json-content@2.2.0 --save<br></code></pre></td></tr></table></figure><ul><li><p>然后在根_config.yml添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jsonContent:</span><br>  <span class="hljs-attr">meta:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">pages:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">posts:</span><br>    <span class="hljs-attr">title:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">date:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">raw:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">content:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">slug:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">updated:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">comments:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">link:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">permalink:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">excerpt:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">categories:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">tags:</span> <span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure></li><li><p>最后在主题_config.yml添加配置(themes&#x2F;BlueLake&#x2F;_config.yml)：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">local_search:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="设置阅读全文"><a href="#设置阅读全文" class="headerlink" title="设置阅读全文"></a>设置阅读全文</h3><ul><li>您可以在文章的 front-matter 中添加 description，并提供文章摘录，或在文章中使用下面的代码手动进行截断（Hexo推荐的方式）。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">escape</span>&gt;</span><span class="hljs-comment">&lt;!-- more --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">escape</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="解决busuanzi无效的方法"><a href="#解决busuanzi无效的方法" class="headerlink" title="解决busuanzi无效的方法"></a>解决busuanzi无效的方法</h3><ul><li>使用nodepad++的【搜索】-&gt;【查找】-&gt;【文件查找】的【在文件中替换】：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dn-lbstatics<span class="hljs-selector-class">.qbox</span><span class="hljs-selector-class">.me</span> 替换为 busuanzi<span class="hljs-selector-class">.ibruce</span>.info<br></code></pre></td></tr></table></figure></li><li>如图所示<br><img src="/Hexo%5C01_js_location.png"></li></ul><p>&nbsp;<br>&nbsp;<br>参考文档：</p><ol><li><a href="https://blog.csdn.net/dingding_12345/article/details/61414438">Hexo 创建“关于我”界面</a></li><li><a href="https://blog.csdn.net/qq_40265501/article/details/80019774">给自己的Hexo博客加上图片</a></li><li><a href="https://jingyan.baidu.com/article/fec4bce296d834f2608d8b5b.html">Hexo中提供文件下载功能</a></li><li><a href="https://github.com/chaooo/hexo-theme-BlueLake">BlueLake官网</a></li><li><a href="https://pagespeed.v2ex.com/t/495380">解决 busuanzi 无效的方法（hexo-theme-next）</a></li><li><a href="https://blog.csdn.net/qq_26718271/article/details/81512216">bash devtty No such device or address</a></li></ol><p><escape><!-- more --></escape></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>BlueLake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第2周</title>
    <link href="/2019/01/09/2019Week02/"/>
    <url>/2019/01/09/2019Week02/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第2周（2019-01-07-2019-01-13）"><a href="#2019年第2周（2019-01-07-2019-01-13）" class="headerlink" title="2019年第2周（2019&#x2F;01&#x2F;07~2019&#x2F;01&#x2F;13）"></a>2019年第2周（2019&#x2F;01&#x2F;07~2019&#x2F;01&#x2F;13）</h2><ol><li><a href="https://www.cnblogs.com/jpfss/p/8037838.html">eclipse的.properties文件中文显示问题</a></li><li><a href="https://www.cnblogs.com/goldenVip/p/6278377.html">关于项目报错Dynamic Web Module 3.0 requires Java 1.6 or newer 的解决方法</a></li><li><a href="http://www.cnblogs.com/xxoome/p/10030724.html">Windows下IDEA的terminal配置bash命令</a></li><li><a href="https://www.cnblogs.com/hdwang/p/6875416.html">eclipse&#x2F;intellij idea 查看java源码和注释</a></li><li><a href="https://blog.csdn.net/u013823429/article/details/66982245">Eclipse查看Servlet源码</a></li><li><a href="https://blog.csdn.net/chwshuang/article/details/52350377">Hexo在Github中搭建博客系统(1)Hexo安装</a></li><li><a href="https://blog.csdn.net/chwshuang/article/details/52350387">Hexo在Github中搭建博客系统(2)Hexo一键发布文章到Github</a></li><li><a href="https://blog.csdn.net/chwshuang/article/details/52350463">Hexo在Github中搭建博客系统(3)Hexo安装主题</a></li><li><a href="https://blog.csdn.net/chwshuang/article/details/52350518">Hexo在Github中搭建博客系统(4)建菜单写文章</a></li><li><a href="https://blog.csdn.net/chwshuang/article/details/52350551">Hexo在Github中搭建博客系统(5)Markdown语法</a></li><li><a href="https://blog.csdn.net/chwshuang/article/details/52350559">Hexo在Github中搭建博客系统(6)异常处理</a></li><li><a href="https://blog.csdn.net/chwshuang/article/details/52350589">Hexo在Github中搭建博客系统(7)万网域名解析到Github Pages</a></li><li><a href="https://blog.csdn.net/qq_38663729/article/details/80430325">IDEA Cannot find declaration to go to问题的解决方法</a></li><li><a href="http://doc.okbase.net/fengshizty/archive/126397.html">Maven搭建SpringMVC+Mybatis项目详解</a></li><li><a href="https://blog.csdn.net/qq_40265501/article/details/80019774">给自己的Hexo博客加上图片</a></li><li><a href="https://jingyan.baidu.com/article/fec4bce296d834f2608d8b5b.html">Hexo中提供文件下载功能</a></li><li><a href="https://www.jianshu.com/p/e17711e44e00">Hexo使用攻略-添加分类及标签</a></li><li><a href="https://chaoo.oschina.io/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE.html">BlueLake博客主题的详细配置</a></li><li><a href="/2019/01/09/Hexo/">Hexo 系统 BlueLake 主题安装与设置</a></li><li><a href="https://www.cnblogs.com/lighten/tag/activiti%E7%9B%B8%E5%85%B3/">Activiti系列 - 5.21</a></li><li><a href="https://www.cnbeta.com/articles/tech/806785.htm">还指望通过锻炼减肥？研究告诉你这种想法多不现实</a></li><li><a href="https://blog.csdn.net/gang544043963/article/details/83934015">程序员如何精确评估开发时间？</a></li><li><a href="https://blog.csdn.net/wei83523408/article/details/56036332">Windows下git中sh.exe中文显示乱码问题解决</a></li><li><a href="https://www.cnblogs.com/kevingrace/p/5690241.html">Git忽略提交规则 - .gitignore配置运维总结</a></li></ol><p><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
      <tag>Maven</tag>
      
      <tag>GitHub</tag>
      
      <tag>Hexo</tag>
      
      <tag>IDEA</tag>
      
      <tag>Mybatis</tag>
      
      <tag>WinPE</tag>
      
      <tag>gitignore</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS</title>
    <link href="/2019/01/09/iOS/"/>
    <url>/2019/01/09/iOS/</url>
    
    <content type="html"><![CDATA[<p>&nbsp;</p><h1 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h1><h2 id="SwiftUI"><a href="#SwiftUI" class="headerlink" title="SwiftUI"></a>SwiftUI</h2><ol><li><a href="https://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&mid=2650402703&idx=1&sn=0942415a7c92ab2465a9acb58b15b808&chksm=83952797b4e2ae812bd6159b49c069104e8db54db40435cb3343e06ff96f043390d8057cd8d6&scene=21#wechat_redirect">新晋网红SwiftUI——淘宝带你初体验</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&mid=2650402891&idx=1&sn=804f271d6794a0ec7b5eeaea585f5e8e&chksm=83953853b4e2b14563dd6cefb1362a457b96fb591c64bd6c94cb38d0595d2233daa96ba1b876&scene=21#wechat_redirect">系列文章深度解读|SwiftUI 背后那些事儿</a></li><li><a href="https://mp.weixin.qq.com/s/QgDSuTFjwFlXzhksfgmkIQ">历时五天用 SwiftUI 做了一款 APP，阿里工程师如何做的？</a></li></ol><h2 id="Swift-1"><a href="#Swift-1" class="headerlink" title="Swift"></a>Swift</h2><ol><li><a href="https://www.jianshu.com/p/3a88ab9ed7d6">Swift编程思想（一） —— 函数式编程简介（一）</a></li><li><a href="https://www.jianshu.com/p/140de3e73ad8">iOS-卡顿监测-FPS监测(附详细代码及原理讲解)</a></li><li><a href="http://www.cocoachina.com/swift/20161121/18144.html">从 Swift 的面向协议编程说开去</a></li><li><a href="https://blog.csdn.net/felicity294250051/article/details/79026969">Swift 【基于 Swift 面向协议编程】</a></li><li><a href="https://blog.csdn.net/itchosen/article/details/77483601">深入理解Swift 面向协议编程</a></li><li><a href="https://juejin.im/post/5ddb580451882573520fb182">Swift 5.1 极简参考手册</a></li></ol><h2 id="iOS-开发"><a href="#iOS-开发" class="headerlink" title="iOS 开发"></a>iOS 开发</h2><ol><li><a href="https://www.cnblogs.com/wangkejia/p/7891374.html">iOS-OC、Swift 混编之桥接文件</a></li><li><a href="https://www.jianshu.com/p/29257388b8cb">iOS 发送HTTP请求报错</a></li><li><a href="https://forums.developer.apple.com/thread/111334">Updated to iOS 12.1&#x2F;Xcode 10.1 and getting a flood of “Signal strength query returned error</a></li><li><a href="https://stackoverflow.com/questions/37800790/hide-strange-unwanted-xcode-logs">Hide strange unwanted Xcode logs</a></li><li><a href="https://www.jianshu.com/p/4f025476701a">Swift 3 杂谈</a></li><li><a href="https://juejin.im/post/5c0f95f4e51d4570f90cde85">iOS操作系统– App启动流程分析与优化</a></li><li><a href="https://www.jianshu.com/p/db504d233176">使用Xcode10 Instruments检测内存泄露</a></li><li><a href="https://www.jianshu.com/p/27db762409ca">iOS面试进阶篇(五)</a></li><li><a href="https://www.jianshu.com/p/55b9612080d5">iOS面试进阶篇(八)-高级面试题</a></li><li><a href="https://www.jianshu.com/p/de6ebffdef86">移动iOS架构起航</a></li><li><a href="https://www.cnblogs.com/lulushen/p/9640037.html">真机调试包,解决xcode跑不了高版本iOS系统问题，及Deployment Target不显示高版本系统的问题</a></li></ol><h2 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h2><ol><li><a href="https://www.jianshu.com/p/10f32174fb2d">Swift —UIImageView的使用(使用app内置图片和网络图片)</a></li></ol><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><ol><li><a href="https://www.2cto.com/kf/201604/501527.html">iOS笔记UI–使用storyboard添加约束</a></li><li><a href="https://blog.csdn.net/pucker/article/details/49925335">iOS 9 Auto Layout界面自动布局系列6-自适应布局</a></li></ol><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ol><li><a href="https://www.cnblogs.com/HQBBOX/p/6587058.html">Swift FMDB的使用</a></li><li><a href="https://blog.csdn.net/loveiosolovehua/article/details/78680256">FMDB 在Swift4.0中使用</a></li><li><a href="https://blog.csdn.net/lidongxuedecsdn/article/details/79617845">FMDB的使用（Swift）</a></li><li><a href="https://www.jianshu.com/p/0bfa64b2ecc1">Swift(FMDB的简单使用)</a></li><li><a href="https://cocoapods.org/pods/FMDB">官方文档</a></li><li><a href="https://www.cnblogs.com/kklldog/p/swift-fmdb.html">Swift使用FMDB操作SQLite</a></li></ol><h2 id="UITableView"><a href="#UITableView" class="headerlink" title="UITableView"></a>UITableView</h2><ol><li><a href="https://www.jianshu.com/p/bb65e97a2e8e">Swift（二十一）UITableView</a></li><li><a href="https://www.cnblogs.com/Xebdison/p/5500008.html">新手教程之使用Xib自定义UITableViewCell</a></li><li><a href="https://www.jianshu.com/p/4c39be207923">iOS AutoLayout进阶(五)UITableViewCell自动高度</a></li><li><a href="https://www.jmwebseo.cn/220.html">UITableViewController 的 numberOfSections 不显示数据</a></li></ol><h2 id="UserNotifications"><a href="#UserNotifications" class="headerlink" title="UserNotifications"></a>UserNotifications</h2><ol><li><a href="http://www.hangge.com/blog/cache/detail_1845.html">Swift - UserNotifications框架使用详解1（基本介绍，权限的申请与判断）</a></li><li><a href="http://www.hangge.com/blog/cache/detail_1851.html">Swift - UserNotifications框架使用详解2（发送本地通知）</a></li><li><a href="http://www.hangge.com/blog/cache/detail_1850.html">Swift - UserNotifications框架使用详解3（推送远程通知）</a></li><li><a href="https://github.com/CoderDream/iOS_Best_Practice/tree/7d2f554eedc54b6cdec6b927cabdf57addbc5156/Notification/UserNotificationsDemo01">UserNotificationsDemo - GitHub</a></li><li><a href="http://www.hangge.com/blog/cache/detail_2033.html">Swift - 第三方透明指示器SwiftNotice使用详解</a></li></ol><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><ol><li><a href="https://www.cnblogs.com/LL--Blog/p/5701457.html">Swift 异常捕获try catch的使用</a></li><li><a href="https://www.cnblogs.com/QianChia/p/6379191.html">iOS - UnitTests 单元测试</a>  </li><li><a href="https://github.com/mflint/SwiftMock">SwiftMock</a>  </li><li><a href="https://github.com/leancloud/LeanStorageDemo-iOS">LeanStorageDemo-iOS</a>  </li><li><a href="https://blog.csdn.net/wds1181977/article/details/52056307">LeanCloud从入门到放弃</a>  </li><li><a href="https://blog.csdn.net/weixin_41735943/article/details/81270100">Swift4–解析json文件</a>  </li><li><a href="https://blog.csdn.net/weixin_41735943/article/details/82622468">Swift4–使用URLSession进行网络请求</a>    </li><li><a href="https://www.jianshu.com/p/f13fc6aed467">使用swift给objc项目做单元测试</a>   </li><li><a href="https://www.jianshu.com/p/c54f0cc08c20">iOS单元测试和UI测试</a></li></ol><h2 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h2><ol><li><a href="http://www.cocoachina.com/bbs/read.php?tid=233859">Xcode6上控件的约束关系怎么删除?</a></li><li><a href="https://juejin.im/post/5ccea148f265da038e54bbf2">Swift 代码格式化</a></li></ol><h1 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h1><h2 id="今日头条"><a href="#今日头条" class="headerlink" title="今日头条"></a>今日头条</h2><ol><li><a href="https://github.com/hrscy/TodayNews">Swift 4 - 模仿今日头条</a></li><li><a href="https://github.com/hutmobile/iOS_YangMeng_TodayNews">iOS_YangMeng_TodayNews(Swift4.2)</a></li><li><a href="https://www.jianshu.com/p/c263abb005d6">高仿漫画类项目-Swift5版本</a></li></ol><p>&nbsp;</p><h1 id="游戏相关"><a href="#游戏相关" class="headerlink" title="游戏相关"></a>游戏相关</h1><h2 id="SpriteKit"><a href="#SpriteKit" class="headerlink" title="SpriteKit"></a>SpriteKit</h2><ol><li><a href="https://juejin.im/entry/585b7cc18d6d810065d2905e">如何在 Swift 3 中用 SpriteKit 框架编写游戏 (Part 1)</a></li><li><a href="https://juejin.im/entry/5860d2e4128fe1006dfbb962">如何在 Swift 3 中用 SpriteKit 框架编写游戏 (Part 2)</a></li><li><a href="https://juejin.im/entry/586d359a128fe1006661e361">如何在 Swift 3 中用 SpriteKit 框架编写游戏 (Part 3)</a></li><li><a href="https://juejin.im/post/5bddcbd151882516e46b0025">暑假花了十九天做的 PFollow</a></li><li><a href="https://juejin.im/entry/59d37a645188257a8908abbf">SpriteKit（概述）</a></li><li><a href="https://www.jianshu.com/p/370ab95c0815">SpriteKit框架详细解析（一） —— 基本概览（一）</a></li><li><a href="https://www.jianshu.com/p/c91a426d4441">SpriteKit框架详细解析（二） —— 一个简单的动画实例（一）</a></li><li><a href="https://www.jianshu.com/p/20dd929453ec">SpriteKit框架详细解析（三） —— 创建一个简单的2D游戏（一）</a></li><li><a href="https://www.jianshu.com/p/33f28911db17">SpriteKit框架详细解析（四） —— 创建一个简单的2D游戏（二）</a></li><li><a href="https://www.jianshu.com/p/b77a9d2071f5">SpriteKit框架详细解析（五） —— 基于SpriteKit的游戏编程的三角函数（一）</a></li><li><a href="https://www.jianshu.com/p/663107955f39">SpriteKit框架详细解析（六） —— 基于SpriteKit的游戏编程的三角函数（二）</a></li><li><a href="https://www.jianshu.com/p/2686a0df4c2e">教你用 SpriteKit 做一个自己的”割绳子“游戏（Swift 3）</a></li><li><a href="https://www.jianshu.com/p/2efc153200c9">SpriteKit框架之最全动作介绍 没有之一</a></li><li><a href="https://www.jianshu.com/p/ea5af90ebd32">SpriteKit实现经典英雄打怪小游戏</a></li><li><a href="https://www.jianshu.com/p/e9de9f428c39">Spritekit 小游戏- 熊猫快跑之运气与实力并存</a></li><li><a href="https://www.jianshu.com/p/2f01c48902d1">SpriteKit学习笔记(子节点随父节点移动)</a></li><li><a href="https://www.jianshu.com/p/d18930488df2">SpriteKit框架之鸿蒙初辟</a></li><li><a href="https://juejin.im/post/5ae2bb99f265da0b9d77f0e5">(iOS)SpriteKit 制作简易手游虚拟摇杆(UIKit通用) Double零组件系列</a></li><li><a href="https://www.raywenderlich.com/71-spritekit-tutorial-for-beginners">SpriteKit Tutorial for Beginners</a></li><li><a href="https://juejin.im/entry/578ef0bb8ac2470060b3da76">(翻译)用 Swift 创建有 AI(人工智能) 的 Tic Tac Toe 游戏</a></li><li><a href="https://juejin.im/entry/578486dd7db2a20063f8284b">(原文)用 Swift 以及 AI 创建你自己的 iOS 游戏</a></li><li><a href="https://juejin.im/post/599aaf746fb9a02477072380">巧用 ARKit 和 SpriteKit 从零开始做 AR 游戏</a></li><li><a href="https://blog.pusher.com/building-ar-game-arkit-spritekit">Building an AR game with ARKit and SpriteKit</a></li><li><a href="https://juejin.im/entry/573e6894f38c8400676f9765">通过 SpriteKit 内置工具粒子发射器实现酷炫的可定制装载动画</a></li><li><a href="https://www.jianshu.com/p/a38dd2057860">SpriteKit学习笔记（一）</a></li><li><a href="https://www.jianshu.com/p/f71cdebfc4af">SpriteKit学习笔记（二）</a></li><li><a href="https://www.jianshu.com/p/5a2274fe46b4">SpriteKit 苹果官方文档翻译（Swift）：1</a></li><li><a href="https://www.jianshu.com/p/304e84a12b91">iOS SpriteKit 小游戏开发实例 - Flappy Bird</a></li><li><a href="https://blog.csdn.net/qq_30932479/article/details/88527720">Swift SpriteKit写一个简单的打飞碟小游戏（一）</a></li><li><a href="https://blog.csdn.net/qq_30932479/article/details/88535779">Swift SpriteKit写一个简单的打飞碟小游戏（二）</a></li><li><a href="https://blog.csdn.net/qq_30932479/article/details/88542409">Swift SpriteKit写一个简单的打飞碟小游戏（三）</a></li></ol><h2 id="SceneKit"><a href="#SceneKit" class="headerlink" title="SceneKit"></a>SceneKit</h2><ul><li><a href="https://www.jianshu.com/p/44a4f842cf87">1. SceneKit框架详细解析（一） —— 基本概览（一）</a></li><li><a href="https://www.jianshu.com/p/840f30b64146">2. SceneKit框架详细解析（二） —— 基于SceneKit的简单游戏示例的实现（一）</a></li><li><a href="https://www.jianshu.com/p/f79bc36a6809">3. SceneKit框架详细解析（三） —— 基于SceneKit的简单游戏示例的实现（二）</a></li><li><a href="https://www.jianshu.com/p/88e1b173c1ba">4. SceneKit框架详细解析（四） —— 基于SceneKit的简单游戏示例的实现（三）</a></li><li><a href="https://www.jianshu.com/p/5dc9953c5f22">5. SceneKit框架详细解析（五） —— 基于SceneKit的简单游戏示例的实现（四）</a></li><li><a href="https://www.jianshu.com/p/b14a78ebd6ad">6. SceneKit框架详细解析（六） —— 基于SceneKit的简单游戏示例的实现（五）</a></li><li><a href="https://www.jianshu.com/p/79bb282a9b3a">7. SceneKit框架详细解析（七） —— 基于SceneKit的简单游戏示例的实现（六）</a></li></ul><h2 id="LeanCloud"><a href="#LeanCloud" class="headerlink" title="LeanCloud"></a>LeanCloud</h2><ol><li><a href="https://leancloud.cn/docs/leanstorage_guide-swift.html">数据存储开发指南 · Swift</a></li></ol><h2 id="Alamofire"><a href="#Alamofire" class="headerlink" title="Alamofire"></a>Alamofire</h2><ul><li><a href="https://www.raywenderlich.com/35-alamofire-tutorial-getting-started">Alamofire Tutorial: Getting Started</a></li><li><a href="https://www.jianshu.com/p/63359d481d70">Alamofire 教程：入门指南</a></li><li><a href="https://blog.csdn.net/SunFlowerInRain/article/details/76207022">Alamofire的使用教程</a></li><li><a href="https://github.com/LINDreaming/DailyTools">Alamofire的使用教程-项目地址</a></li><li><a href="https://www.jianshu.com/p/42aa9b5b70a3">超简单 Alamofire4.1 的详细使用步骤</a></li><li><a href="https://www.cnblogs.com/xiguapijiamuguanaicha/p/5672543.html">Alamofire 的使用</a></li><li><a href="http://www.cocoachina.com/ios/20141202/10390.html">Alamofire网络库基础教程：使用 Alamofire 轻松实现 Swift 网络请求</a>  </li><li><a href="http://www.cocoachina.com/ios/20141203/10514.html">Alamofire网络库进阶教程</a></li><li><a href="https://blog.csdn.net/hbblzjy/article/details/53392135">Swift基础之使用Alamofire库进行网络请求和断点下载</a></li></ul><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><ol><li><a href="https://www.jianshu.com/p/83b99f34d67c">对于 iOS 开发，人工智能意味着什么？</a></li><li><a href="https://zhuanlan.zhihu.com/machine-learning-book">写给大家看的机器学习书</a></li><li><a href="https://www.jianshu.com/p/7de4af5ba4c7">iOS机器学习初探</a></li><li><a href="https://www.jianshu.com/p/0cbf4d17ac88">iOS-调戏CoreML-这是花瓶？</a></li><li><a href="https://www.jianshu.com/p/f7e19bff84a6">iOS中的人工智能（Core ML）</a></li><li><a href="http://www.cocoachina.com/ios/20170621/19592.html">iOS中的机器学习</a></li><li><a href="http://www.cocoachina.com/programmer/20170105/18510.html">普通程序员如何转向AI方向</a></li><li><a href="http://www.sohu.com/a/164569342_505915">我花了四个晚上，拿到了吴恩达Deeplearning.ai深度学习课程证书</a></li></ol><p>&nbsp;</p><h1 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h1><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><ol><li><a href="https://blog.csdn.net/lovechris00/article/details/79935134">macOS 设置文件默认打开方式</a></li><li><a href="https://jingyan.baidu.com/article/f3ad7d0f55154309c3345bdd.html">Mac系统如何编辑hosts文件</a></li><li><a href="http://www.kejunfeng.com/2018/07/12/webstorm.html">WebStorm2018.3 中文汉化最新破解激活版 Mac&#x2F;Win</a></li><li><a href="https://blog.csdn.net/wang19891106/article/details/51127133">NodeJS入门–环境搭建 IntelliJ IDEA</a></li><li><a href="https://www.jianshu.com/p/d7d16c42aed1">解决最新版 Cocoapods repo安装慢更新慢的问题</a></li><li><a href="https://www.jianshu.com/p/8f812d71e659">iPhone has denied the launch request</a></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li><a href="https://www.cnblogs.com/provedl/p/9830061.html">使用Hbuilder将自己app发布到App Store（一）</a></li><li><a href="https://www.cnblogs.com/jukaiit/p/9755857.html">libstdc++适配Xcode10与iOS12</a></li><li><a href="https://www.cnblogs.com/jingxin1992/p/9805822.html">iOS根据图片url获取尺寸</a></li><li><a href="https://www.cnblogs.com/KiVen2015/p/9721887.html">《看书总结》</a></li><li><a href="https://www.cnblogs.com/zhanggui/p/9686155.html">关于Xcode10的那些事</a></li><li><a href="https://www.cnblogs.com/alan12138/p/9619336.html">iOS 类似微博或朋友圈的信息流</a></li><li><a href="https://www.cnblogs.com/jordanYang/archive/2016/04.html">Swift基础语法</a></li><li><a href="https://blog.csdn.net/kmyhy/article/details/68488986">用 SpriteKit 和 Swift3 创建交互式儿童读物</a></li><li><a href="https://store.raywenderlich.com/products/2d-apple-games-by-tutorials-source-code">2D Apple Games by Tutorials Source Code-Swift4</a></li><li><a href="https://blog.csdn.net/kmyhy/column/info/14060">iOS开发问与答系列</a></li><li><a href="https://blog.csdn.net/kmyhy/column/info/13913">iOS动画专栏</a></li><li><a href="https://www.raywenderlich.com/library?domain_ids%5B%5D=1&category_ids%5B%5D=161">raywenderlich Game专栏</a></li><li><a href="https://juejin.im/post/5ca170ee6fb9a05e505c4940">CocoaPods使用小结</a></li><li><a href="https://mp.weixin.qq.com/s/eXzojM0lCaaCW4JxBaU6BQ">敏捷开发与动态更新在支付宝 App 内的实践</a></li><li><a href="https://juejin.im/post/5c8ca84ce51d456f43189dbd">LLDB 知多少</a></li><li><a href="https://github.com/insidegui/WWDC">WWDC: 非官方的WWDC macOS客户端</a></li></ol><p>&nbsp;</p><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><ol><li><a href="http://www.cocoachina.com/ios/20190109/26077.html">iOS使用fastlane自动化打包</a></li><li><a href="https://juejin.im/post/5c4141a2e51d455210541b01">如何阅读苹果开发文档</a></li><li><a href="https://www.jianshu.com/p/8a13cb1dc07f">iOS 客户端微信扫码登录</a></li><li><a href="https://juejin.im/post/5c0a17d6e51d4570cf60d102">iOS App冷启动治理：来自美团外卖的实践</a></li><li><a href="https://juejin.im/post/595f1f2c5188250d8a605d69">开发者眼中 iOS 11 都更新了什么？</a></li><li><a href="https://onevcat.com/#blog">王巍博客，值得研读</a></li><li><a href="https://blog.csdn.net/mo_xiao_mo/article/details/52612443">Swift - 获取当前时间的时间戳（时间戳与时间互相转换）</a></li><li><a href="https://blog.csdn.net/shenjie_xsj/article/details/79033861">Swift4中对于日期时间的处理（Date、DateComponents、Calendar、DateFormatter、Locale）(超详细)</a></li><li><a href="https://www.jianshu.com/p/e3de4fbd105f">开源和开放设计 - Make Icons Witch Sketch</a></li><li><a href="https://juejin.im/post/5c94b03d6fb9a070d20f2041">最近被苹果拒绝的条款和解决方法</a></li><li><a href="https://juejin.im/post/5c972b165188252d6458309a">我的 WWDC 2019 Scholarship &amp; 来一次完整的使用 Playground（二）</a></li><li><a href="https://juejin.im/post/5c97a5e3f265da60cb377a6d">一个优质的项目应该具有什么特点</a></li></ol><h2 id="Sketch"><a href="#Sketch" class="headerlink" title="Sketch"></a>Sketch</h2><ol><li><a href="https://www.jianshu.com/p/eb6bd68954c7">Sketch APP UI 10天特训 - 1</a></li><li><a href="https://www.jianshu.com/p/2eca64aca16e">Sketch APP UI 10天特训 - 2</a></li><li><a href="https://www.jianshu.com/p/99be9893b3b8">Sketch APP UI 10天特训 - 3</a></li><li><a href="https://www.jianshu.com/p/e55fe4ee2515">Sketch APP UI 10天特训 - 4</a></li><li><a href="https://www.jianshu.com/p/6e2dfcb83336">Sketch APP UI 10天特训 - 5</a></li><li><a href="https://www.jianshu.com/p/d249e29650e2">Sketch Tutorial - 从零开始学Sketch 第一课</a></li><li><a href="https://www.jianshu.com/p/3bb00814f488">Sketch Tutorial - 从零开始学Sketch 第二课</a></li><li><a href="https://www.jianshu.com/p/f183f572dd9b">Sketch Tutorial - 从零开始学Sketch 第三课</a></li><li><a href="https://www.jianshu.com/p/5a28da384cbb">Sketch Tutorial - 从零开始学Sketch 第四课</a></li><li><a href="https://www.jianshu.com/p/98a28943af6f">Sketch Tutorial - 从零开始学Sketch 第五课</a></li><li><a href="https://www.jianshu.com/p/d12566fad35c">Sketch Tutorial - 从零开始学Sketch 第六课</a></li><li><a href="https://www.jianshu.com/p/020ee943ea13">Sketch入门（一）安装及了解基本功能</a></li><li><a href="https://www.jianshu.com/p/02262677f437">Sketch入门（二）练习APP登录界面设计</a></li><li><a href="https://www.jianshu.com/p/0d2430e4c9f8">Sketch入门（三）如何切图</a></li><li><a href="https://www.jianshu.com/p/bac4ef58c3a6">Sketch技巧（一）常用快捷键</a></li><li><a href="https://www.jianshu.com/p/51a43397c763">Sketch技巧（二）自定义快捷键</a></li><li><a href="https://www.jianshu.com/p/20c511c11a51">Sketch技巧（三）八个高效的快捷方式</a></li><li><a href="https://www.jianshu.com/p/ea7deafcbbe1">Sketch技巧（四）Sketch高效实用的插件</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpriteKit</tag>
      
      <tag>Swift4</tag>
      
      <tag>Sketch</tag>
      
      <tag>Cocoapods</tag>
      
      <tag>Alamofire</tag>
      
      <tag>UserNotifications</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IntelliJ IDEA</title>
    <link href="/2019/01/09/idea/"/>
    <url>/2019/01/09/idea/</url>
    
    <content type="html"><![CDATA[<p>文章目录</p><ul><li>[IntelliJ IDEA](#IntelliJ IDEA)</li><li>[IntelliJ IDEA 鼠标移动到类上显示文档document（JavaDoc）内容](#IntelliJ IDEA 鼠标移动到类上显示文档document（JavaDoc）内容)</li><li>[为jdk下载或指定 JavaDoc](#为jdk下载或指定 JavaDoc)</li></ul><p><escape><span id="more"></span></escape></p><p>&nbsp;</p><h2 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h2><ul><li><p>Maven的仓库路径：D:\Java\repo</p></li><li><p>下载jar，在项目的pom.xml文件增加如下依赖，然后选中项目，点击右键【Run As】-&gt;【Maven Install】：                                                       </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>将<a href="/download/javax.servlet-api-3.0.1-sources.jar">源码</a>放到jar包下载的位置，如：D:\Java\repo\javax\servlet\javax.servlet-api\3.0.1<br>  源代码的名称为：javax.servlet-api-3.0.1-sources.jar</p></li><li><p>关联源代码</p><ol><li>选中项目，使用组合键【Ctrl+Alt+Shift+S】打开【Project Structure】面板</li><li>【Platform Settings】-&gt;【Globals Libraries】-&gt;【】，然后点击中间【+】图标来增加源代码包，如：D:\Java\jdk1.8.0_191\src.zip或<a href="http://docs.oracle.com/javase/8/docs/api/">http://docs.oracle.com/javase/8/docs/api/</a></li></ol></li><li><p>最终效果：                                                                                                                                                                                                   </p><img src="/2019/01/09/idea/01_Project_Structure_Libs.png" class=""></li></ul><p>&nbsp;</p><h3 id="IntelliJ-IDEA-鼠标移动到类上显示文档document（JavaDoc）内容"><a href="#IntelliJ-IDEA-鼠标移动到类上显示文档document（JavaDoc）内容" class="headerlink" title="IntelliJ IDEA 鼠标移动到类上显示文档document（JavaDoc）内容"></a>IntelliJ IDEA 鼠标移动到类上显示文档document（JavaDoc）内容</h3><ul><li>【File】-&gt;【Settings】-&gt;【Editor】-&gt;【General】-&gt;【Show quick documentation on mouse move】</li></ul><p>&nbsp;</p><h3 id="为jdk下载或指定-JavaDoc"><a href="#为jdk下载或指定-JavaDoc" class="headerlink" title="为jdk下载或指定 JavaDoc"></a>为jdk下载或指定 JavaDoc</h3><ol><li>选中项目，使用组合键【Ctrl+Alt+Shift+S】打开【Project Structure】面板</li><li>【Platform Settings】-&gt;【SDKs】-&gt;【XX（1.8）】-&gt;【Documentation Paths】，然后点击【+】图标来增加源代码包，如：D:\Java\jdk1.8.0_191\src.zip或<a href="http://docs.oracle.com/javase/8/docs/api/">http://docs.oracle.com/javase/8/docs/api/</a></li></ol><ul><li>参考文档：</li></ul><ol><li><a href="https://blog.csdn.net/u013905744/article/details/73162294">IntelliJ idea鼠标移动到类上显示文档document（javadoc）内容</a></li><li><a href="https://www.cnblogs.com/printN/p/6574232.html">代码生成利器：IDEA 强大的 Live Templates</a></li><li><a href="https://blog.csdn.net/kiwi_coder/article/details/17575629">IntelliJ Live Template进阶使用</a></li><li><a href="https://www.jianshu.com/p/ee023c7f6241">IDEA快捷键拆解系列（十八）：Live Templates篇</a></li></ol><p>&nbsp;</p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ol><li>Ctrl+B，快速打开光标处的类或方法</li><li>CTRL+ALT+B， 找所有的子类  </li><li>Ctrl+H，显示类结构图（类的继承层次）</li><li>Ctrl+N，可以快速打开类</li><li>Ctrl+Shift+N，可以快速打开文件</li><li>Ctrl+F12，可以显示当前文件的结构</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA</tag>
      
      <tag>IDE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java</title>
    <link href="/2019/01/09/Java/"/>
    <url>/2019/01/09/Java/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://www.cnblogs.com/iamAnonymous/p/6051769.html">JAVA学习笔记-数组的三种初始化方式</a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//静态初始化</span><br><span class="hljs-type">int</span> c[] = &#123;<span class="hljs-number">23</span>,<span class="hljs-number">43</span>,<span class="hljs-number">56</span>,<span class="hljs-number">78</span>&#125;;<span class="hljs-comment">//长度：4，索引范围：[0,3]</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Activiti 相关文档</title>
    <link href="/2019/01/06/Activiti/"/>
    <url>/2019/01/06/Activiti/</url>
    
    <content type="html"><![CDATA[<h2 id="Activiti-相关文档"><a href="#Activiti-相关文档" class="headerlink" title="Activiti 相关文档"></a>Activiti 相关文档</h2><ul><li><a href="https://github.com/CoderDream/workflow">springboot2 + acticiti6 + 流程设计器 + thymeleaf3 + mysql5.7 + jdk1.8-x64 + druid</a></li><li><a href="https://github.com/one-byte-jiang/activiti6Note">Activiti6学习笔记</a></li></ul><p><escape><span id="more"></span></escape></p>]]></content>
    
    
    
    <tags>
      
      <tag>Activiti6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第1周</title>
    <link href="/2019/01/03/2019Week01/"/>
    <url>/2019/01/03/2019Week01/</url>
    
    <content type="html"><![CDATA[<h2 id="2019年第1周（2018-12-31-2019-01-06）"><a href="#2019年第1周（2018-12-31-2019-01-06）" class="headerlink" title="2019年第1周（2018&#x2F;12&#x2F;31~2019&#x2F;01&#x2F;06）"></a>2019年第1周（2018&#x2F;12&#x2F;31~2019&#x2F;01&#x2F;06）</h2><ol><li><a href="https://www.cnbeta.com/articles/tech/804437.htm">用Windows 10太卡？教你快速干掉Windows Defender</a></li><li><a href="https://www.cnblogs.com/javaleon/p/4220027.html">BPMN2.0中文版</a></li><li><a href="https://blog.csdn.net/qq_33458228/article/details/80810280">JUnit单元测试使用log4j输出日志</a></li></ol><p><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BPMN</tag>
      
      <tag>JUnit</tag>
      
      <tag>log4j</tag>
      
      <tag>Windows10</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018年第52周</title>
    <link href="/2018/12/24/2018Week52/"/>
    <url>/2018/12/24/2018Week52/</url>
    
    <content type="html"><![CDATA[<h2 id="2018年第52周（2018-12-24-2018-12-30）"><a href="#2018年第52周（2018-12-24-2018-12-30）" class="headerlink" title="2018年第52周（2018&#x2F;12&#x2F;24~2018&#x2F;12&#x2F;30）"></a>2018年第52周（2018&#x2F;12&#x2F;24~2018&#x2F;12&#x2F;30）</h2><ol><li><a href="https://www.cr173.com/soft/856150.html">TeamViewer无限自动改ID版 V14.0.13488.0绿色版</a></li><li><a href="https://blog.csdn.net/qq_27937043/article/details/74025150">Failed to load the JNI shared library 解决方法</a></li><li><a href="https://www.v2ex.com/t/348114">一个简单 Web App 用于查看你的 GitHub star 总数以及项目排行版</a></li><li><a href="https://blog.csdn.net/qqxx6661/article/details/71106434">查看自己的项目fork和star</a></li><li><a href="https://www.cnblogs.com/skyshalo/p/7251378.html">关于mysql-connector-java（JDBC驱动）的一些坑</a></li><li><a href="https://www.cnblogs.com/gyfluck/p/9881762.html">查看mysql库中所有表的大小和记录数</a></li><li><a href="https://hot.cnbeta.com/articles/game/802833">中国游戏市场增长放缓 但已爆发的小游戏2019年更值得期待</a></li><li><a href="https://blog.csdn.net/qq_19734597/article/details/84440287">Activiti6.0踩坑记录（一）-用admin登录后台配置终端提示“Endpoint configuration for ‘Activiti app’ is invalid</a></li><li><a href="https://www.jianshu.com/nb/31974153">简书Activiti文章</a></li><li><a href="https://github.com/Yiyuery/capsule-web">Spring-Boot + Mybatis 综合模块化开发,合并打包</a></li><li><a href="https://www.activiti.org/userguide/">activiti user guide</a></li><li><a href="https://www.activiti.org/quick-start">activiti quick start</a></li><li><a href="http://www.kafeitu.me/activiti.html">Activiti相关博文</a></li><li><a href="https://blog.csdn.net/acmman/article/category/6732665">Activiti工作流 - 11篇</a></li><li><a href="https://blog.csdn.net/acmman/article/details/55662160">1.工作流概念</a></li><li><a href="https://blog.csdn.net/gaojingyuan/article/details/78979716">1.Activiti6-快速开始</a></li></ol><p><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TeamViewer</tag>
      
      <tag>GitHub</tag>
      
      <tag>Activiti6</tag>
      
      <tag>Spring-Boot</tag>
      
      <tag>小游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018年第51周</title>
    <link href="/2018/12/17/2018Week51/"/>
    <url>/2018/12/17/2018Week51/</url>
    
    <content type="html"><![CDATA[<h2 id="2018年第51周（2018-12-17-2018-12-23）"><a href="#2018年第51周（2018-12-17-2018-12-23）" class="headerlink" title="2018年第51周（2018&#x2F;12&#x2F;17~2018&#x2F;12&#x2F;23）"></a>2018年第51周（2018&#x2F;12&#x2F;17~2018&#x2F;12&#x2F;23）</h2><ol><li>[dyld&#96;__abort_with_payload: With no error message](<a href="https://stackoverflow.com/questions/42027601/dyld-abort-with-payload-with-no-error-message">https://stackoverflow.com/questions/42027601/dyld-abort-with-payload-with-no-error-message</a>)</li><li><a href="https://github.com/xitu/gold-miner/blob/master/ios.md">所有 iOS 译文</a></li><li><a href="https://coderdream.github.io/DNS_NGINX#20185101">CentOS7下安装 DNS</a></li><li><a href="https://www.cnblogs.com/moxiaoan/p/5683743.html">CentOS7使用firewalld打开关闭防火墙与端口</a></li><li><a href="http://www.cnblogs.com/starksoft/p/9292794.html">CentOS 7 安装Nginx 并配置自动启动</a></li><li><a href="https://www.cnblogs.com/jimisun/p/8057156.html">Linux安装nginx</a></li><li><a href="https://blog.csdn.net/wangfei0904306/article/details/70561971">CentOS自动安装nginx(shell脚本方式)</a></li><li><a href="https://github.com/chenqingwh/node-micirservice-platform/blob/master/docs/dns_setupandconfig.md">CentOS7 DNS服务器安装与配置</a></li><li><a href="https://github.com/chenqingwh/node-micirservice-platform/blob/master/docs/nginx_setupandconfig.md">CentOS7 Nginx安装与配置</a></li></ol><h2 id="2018年第50周（2018-12-10-2018-12-16）"><a href="#2018年第50周（2018-12-10-2018-12-16）" class="headerlink" title="2018年第50周（2018&#x2F;12&#x2F;10~2018&#x2F;12&#x2F;16）"></a>2018年第50周（2018&#x2F;12&#x2F;10~2018&#x2F;12&#x2F;16）</h2><ol><li><a href="https://httpbin.org/">免费网络请求测试</a></li><li><a href="https://coderdream.github.io/201850">RC交付人员导入笔记</a></li><li><a href="https://coderdream.github.io/iOS">iOS相关文档</a></li></ol><h2 id="2018年第47周（2018-11-19-2018-11-25）"><a href="#2018年第47周（2018-11-19-2018-11-25）" class="headerlink" title="2018年第47周（2018&#x2F;11&#x2F;19~2018&#x2F;11&#x2F;25）"></a>2018年第47周（2018&#x2F;11&#x2F;19~2018&#x2F;11&#x2F;25）</h2><ol><li><a href="https://blog.csdn.net/oriency755/article/details/8255733">BI SSIS应用系列之发送邮件</a></li><li><a href="https://www.cnblogs.com/ljhdo/p/4844119.html">SSIS 发送邮件(HTML格式)</a></li><li><a href="https://www.cnblogs.com/izhaofu/p/4730263.html">C#使用 System.Net.Mail发送邮件功能</a></li><li><a href="https://coderdream.github.io/tools/MicroKMS_v18.10.06.rar">KMS在线激活Windows和Office之MicroKMS 神龙版</a></li></ol><h2 id="2018年第46周（2018-11-12-2018-11-18）"><a href="#2018年第46周（2018-11-12-2018-11-18）" class="headerlink" title="2018年第46周（2018&#x2F;11&#x2F;12~2018&#x2F;11&#x2F;18）"></a>2018年第46周（2018&#x2F;11&#x2F;12~2018&#x2F;11&#x2F;18）</h2><ol><li><a href="https://www.jb51.net/article/100382.htm">Swift中 ！和 ？的区别及使用</a></li><li><a href="http://blog.sina.com.cn/s/blog_4ddc30040102wdjz.html">全网首发联想小新V3000装黑苹果UEFI+GPT+ CLOVER引导+双系统+双硬盘</a></li><li><a href="https://www.netsarang.com/download/down_form.html?code=622">Xshell 6 Download</a></li><li><a href="https://www.netsarang.com/download/down_form.html?code=623">Xftp 6 Download</a></li><li><a href="http://www.cnblogs.com/zhouyalei/p/6390979.html">CentOS7系统下 docker 环境搭建</a></li><li><a href="https://www.cnblogs.com/zhouyalei/p/6400951.html">制作docker-jdk7-zookeeper镜像(非集群版)</a></li><li><a href="https://www.cnblogs.com/zhouyalei/p/6411614.html">CentOS7系统下搭建docker本地镜像仓库</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1613797-1-1.html">免AHCI补丁</a></li><li><a href="http://bbs.pcbeta.com/forum.php?mod=viewthread&tid=1753051&highlight=ACHI">老古董电脑P35主板+ICH9, 没有ACHI选项怎么破?</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1499277-1-1.html">主板BIOS下无AHCI设置，装OS X 10.9.2成功，分享有效补丁</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1788946-1-1.html">几乎完美8700k&#x2F;8600k + z370 HD3 + 英伟达显卡+10.13.5的EFI分享</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1773155-1-1.html">黑苹果工具箱，福音来了，随便挑随便选！！！</a></li><li><a href="https://jingyan.baidu.com/article/a378c960ee45e2b3282830b0.html">Windows 7下硬盘安装黑苹果Mac OS X图文教程</a></li><li><a href="https://www.cnblogs.com/Mr-Owl/p/5580479.html">Windows环境下使用Clover四叶草引导双硬盘安装OSX 10.11.5原版镜像</a></li><li><a href="">黑苹果安装从0开始—-clover优盘引导改硬盘引导篇</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1169005-1-1.html">在 win7 &#x2F; win8 下安装苹果系统 (懒人版)</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1740837-1-1.html">重大更新Clover_v2.4k_r4757安装界面改版 支持10.14 Mojave</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1762375-1-1.html">配置是I5-7600K+技嘉Z270X-UD3+GTX 1050+简单利用Clover四叶草安装U盘安装黑苹果</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1665056-1-1.html">Dell optiplex 390 安装 El Capitan</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1420871-1-1.html">关于dell optiplex 390安装黑苹果的解决方案</a></li><li><a href="https://coderdream.github.io/Hackintosh">Hackintosh</a></li></ol><h2 id="2018年第45周（2018-11-05-2018-11-11）"><a href="#2018年第45周（2018-11-05-2018-11-11）" class="headerlink" title="2018年第45周（2018&#x2F;11&#x2F;05~2018&#x2F;11&#x2F;11）"></a>2018年第45周（2018&#x2F;11&#x2F;05~2018&#x2F;11&#x2F;11）</h2><ol><li><a href="https://www.jianshu.com/p/b4389e7346d2">iOS9 不能正常使用 Http 的解决方法</a></li><li><a href="http://www.cnblogs.com/yzwdli/p/5337881.html">计算数据库中各个表的数据量和每行记录所占用空间</a></li><li><a href="http://blog.sina.com.cn/s/articlelist_1436983063_12_1.html"></a></li></ol><h2 id="2018年第44周（2018-10-29-2018-11-04）"><a href="#2018年第44周（2018-10-29-2018-11-04）" class="headerlink" title="2018年第44周（2018&#x2F;10&#x2F;29~2018&#x2F;11&#x2F;04）"></a>2018年第44周（2018&#x2F;10&#x2F;29~2018&#x2F;11&#x2F;04）</h2><ol><li><a href="https://jingyan.baidu.com/article/fb48e8bee0f8446e622e1416.html">2018最新谷歌账号注册方法，注册Gmail有效方法</a></li><li><a href="https://blog.csdn.net/andyxia/article/details/50684133">为VMWare中的Mac OS X 10.11硬盘扩容</a></li><li><a href="https://github.com/Microsoft/sql-server-samples/releases/tag/adventureworks2008r2">AdventureWorks2008R2数据库</a></li><li><a href="https://www.cnblogs.com/blogernice/articles/9857154.html">Swift 编程入门</a></li><li><a href="https://docs.microsoft.com/zh-cn/previous-versions/sql/sql-server-2008-r2/ms169917(v%3dsql.105">SSIS 教程：创建简单的 ETL 包 https://docs.microsoft.com/zh-cn/previous-versions/sql/sql-server-2008-r2/ms169917(v%3dsql.105)  </a> </li><li><a href="https://www.zhihu.com/question/21230857">PDF文档时如何实现全屏模式下的双页观看</a></li></ol><h2 id="2018年第43周（2018-10-22-2018-10-28）"><a href="#2018年第43周（2018-10-22-2018-10-28）" class="headerlink" title="2018年第43周（2018&#x2F;10&#x2F;22~2018&#x2F;10&#x2F;28）"></a>2018年第43周（2018&#x2F;10&#x2F;22~2018&#x2F;10&#x2F;28）</h2><ol><li><a href="https://blog.csdn.net/u014351782/article/details/49794491">XCode常用快捷键的使用</a></li><li><a href="https://yantuz.cn/373.html">Chrome同步助手 借助插件实现国内环境同步浏览器数据</a></li><li><a href="http://www.cnblogs.com/guoxiangyue/p/9598961.html">解决新版chrome无法手动拖动安装插件 提示“无法从该网站添加应用，扩展程序和用户脚本”</a></li><li><a href="https://www.cnblogs.com/supermarx/p/7762828.html">关于Google下插件SwitchyOmega用法</a></li><li><a href="https://stackoverflow.com/questions/24099364/no-such-module-cocoa-in-swift-playground">No such module ‘Cocoa’ in Swift Playground</a></li><li><a href="https://blog.csdn.net/uxyheaven/article/details/50818107">用OCLint给iOS代码做静态分析 - TODO</a></li><li><a href="https://coderdream.github.io/201843#20184301">SQLServer 数据库查看各表的记录数</a></li><li><a href="https://coderdream.github.io/201843#20184302">SQLServer 查询所有表名和表结构</a></li><li><a href="https://coderdream.github.io/201843#20184303">SQLServer 数据库拷贝</a></li><li><a href="https://coderdream.github.io/201843#20184304">Notepad++及实用插件安装</a></li></ol><h2 id="2018年第42周（2018-10-15-2018-10-21）"><a href="#2018年第42周（2018-10-15-2018-10-21）" class="headerlink" title="2018年第42周（2018&#x2F;10&#x2F;15~2018&#x2F;10&#x2F;21）"></a>2018年第42周（2018&#x2F;10&#x2F;15~2018&#x2F;10&#x2F;21）</h2><ol><li><a href="https://www.cnblogs.com/cui-cui/p/8507435.html">WebStorm mac下如何安装WebStorm + 破解</a></li><li><a href="https://segmentfault.com/a/1190000007735211">Nodejs进阶：如何玩转子进程（child_process）（TODO）</a></li><li><a href="http://nodejs.cn/api/child_process.html#child_process_spawning_bat_and_cmd_files_on_windows">child_process - 子进程 - 官方教程</a></li><li><a href="https://blog.csdn.net/jiuluguoshidai/article/details/51583684">解决虚拟机中安装的mac os系统无法识别ios设备的问题</a></li><li><a href="https://blog.csdn.net/sodino/article/details/51275638">【Node.js】’readline’ 逐行读取、写入文件内容</a></li><li><a href="https://www.cnblogs.com/yipu/archive/2013/03/14/2958977.html">Xcode：Home键光标移动到行首和End键光标移动到行尾</a></li></ol><h2 id="2018年第41周（2018-10-08-2018-10-14）"><a href="#2018年第41周（2018-10-08-2018-10-14）" class="headerlink" title="2018年第41周（2018&#x2F;10&#x2F;08~2018&#x2F;10&#x2F;14）"></a>2018年第41周（2018&#x2F;10&#x2F;08~2018&#x2F;10&#x2F;14）</h2><ol><li><a href="https://blog.csdn.net/dongmelon/article/details/78686344">nodejs – 执行bat脚本</a></li><li><a href="https://www.jianshu.com/p/8ef89220545f">第一次编写bat脚本</a></li><li><a href="https://blog.csdn.net/chenyufeng1991/article/details/60474644">nodejs读取文件时相对路径的正确写法(使用fs模块)</a></li><li><a href="https://blog.csdn.net/zsensei/article/details/79094714">Node.js 中 __dirname 和 .&#x2F; 的区别</a></li><li><a href="https://blog.csdn.net/liuyaqi1993/article/details/78723797">Node.js调用cmd输出中文乱码</a></li><li><a href="https://www.cnblogs.com/JessicaIsEvolving/p/9471188.html">NodeJs测试框架Mocha的安装与使用</a></li><li><a href="https://www.cnblogs.com/whybxy/p/7645578.html">ES6 Promise 用法讲解</a></li><li><a href="https://www.cnblogs.com/hustskyking/p/promise.html">细嗅Promise</a></li><li><a href="https://blog.csdn.net/weixin_43299649/article/details/82881567">VMware15安装MAC（MAC OS 10.13）(OS X 10.14)原版可升级最新可解锁macOS Unlocker3.0（OS X 10.13）</a></li><li><a href="https://blog.csdn.net/galaxy_yyg/article/details/82891044">VMWare15 安装 Mac OS 系统</a></li></ol><h2 id="2018年第39周（2018-09-24-2018-09-30）"><a href="#2018年第39周（2018-09-24-2018-09-30）" class="headerlink" title="2018年第39周（2018&#x2F;09&#x2F;24~2018&#x2F;09&#x2F;30）"></a>2018年第39周（2018&#x2F;09&#x2F;24~2018&#x2F;09&#x2F;30）</h2><ol><li><a href="https://www.cnblogs.com/gudujianxiao/category/350476.html">SSIS学习系列文章</a></li><li><a href="https://www.cnblogs.com/wljqds/p/cookie_session_node.html">Cookie和Session在Node.JS中的实践（一）</a></li><li><a href="https://www.cnblogs.com/wljqds/p/session.html">Cookie和Session在Node.JS中的实践（二）</a></li><li><a href="https://www.cnblogs.com/jianxuanbing/p/9158830.html">npm install “Unexpected end of JSON input while parsing near”问题</a></li><li><a href="https://www.jianshu.com/p/4721ddd27027">如何为 Markdown 文件自动生成目录</a></li></ol><h2 id="2018年第38周（2018-09-17-2018-09-23）"><a href="#2018年第38周（2018-09-17-2018-09-23）" class="headerlink" title="2018年第38周（2018&#x2F;09&#x2F;17~2018&#x2F;09&#x2F;23）"></a>2018年第38周（2018&#x2F;09&#x2F;17~2018&#x2F;09&#x2F;23）</h2><ol><li><a href="https://blog.jetbrains.com/webstorm/2016/05/getting-started-with-electron-in-webstorm/">Getting started with Electron in WebStorm</a> </li><li><a href="http://npm.taobao.org/mirrors/electron/2.0.9/">taobao electron mirrors</a></li><li><a href="https://blog.csdn.net/changhuzhao/article/details/78684967?tdsourcetag=s_pctim_aiomsg">electron 完整项目构建过程</a></li><li><a href="https://www.npmjs.com/package/date-format-lite">NodeJS日期格式化</a></li><li><a href="https://blog.csdn.net/u011127019/article/details/52134699">NodeJs forEach循环</a></li><li><a href="https://cnodejs.org/topic/52e8e78a953654bb712654cb">《nodejs开发指南》for与forEach之间的差别</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set">JavaScript 标准库 Set</a></li><li><a href="https://www.npmjs.com/package/random-int">NodeJS 随机数</a></li><li><a href="https://www.npmjs.com/package/compare-dates">日期比较</a></li><li><a href="https://blog.csdn.net/q3585914/article/details/78470649">node.js-ORM数据库框架sequelize使用总结 超时查询、缓存查询、多表关联查询(TODO)</a></li><li><a href="https://www.cnblogs.com/zhangpengnike/p/6122588.html">SQLServer 日期函数大全</a></li></ol><h2 id="2018年第37周（2018-09-10-2018-09-16）"><a href="#2018年第37周（2018-09-10-2018-09-16）" class="headerlink" title="2018年第37周（2018&#x2F;09&#x2F;10~2018&#x2F;09&#x2F;16）"></a>2018年第37周（2018&#x2F;09&#x2F;10~2018&#x2F;09&#x2F;16）</h2><ol><li><a href="https://segmentfault.com/a/1190000008501410">Seneca ：NodeJS 微服务框架入门指南</a> </li><li><a href="https://www.imooc.com/article/19162">mongoDB 学习笔记纯干货</a></li><li><a href="https://www.jianshu.com/p/2f54b90efe15">Mongoose增查改删学习笔记</a></li><li><a href="https://www.jianshu.com/p/594a1b73e54a">Mongoose教程翻译</a></li><li><a href="https://blog.csdn.net/hustzw07/article/details/73468970">测试框架Mocha</a></li><li><a href="https://www.cnblogs.com/tugenhua0707/p/8419534.html">学习测试框架Mocha</a></li></ol><h2 id="2018年第36周（2018-09-03-2018-09-09）"><a href="#2018年第36周（2018-09-03-2018-09-09）" class="headerlink" title="2018年第36周（2018&#x2F;09&#x2F;03~2018&#x2F;09&#x2F;09）"></a>2018年第36周（2018&#x2F;09&#x2F;03~2018&#x2F;09&#x2F;09）</h2><ol><li><a href="http://blog.fens.me/series-nodejs/">从零开始nodejs系列文章</a> </li><li><a href="https://blog.csdn.net/zhangyuan19880606/article/category/6246826">深入浅出Node.js系列</a></li><li><a href="https://github.com/chyingp/nodejs-learning-guide/blob/master/index.md">Nodejs学习笔记</a></li><li><a href="https://www.cnblogs.com/chris-oil/p/5625437.html">Nodejs基础中间件Connect</a></li><li><a href="https://www.cnblogs.com/yjfengwen/p/3827217.html">nodejs之日志管理</a></li><li><a href="http://blog.fens.me/nodejs-oauth-passport/">Passport现实社交网络OAuth登陆</a></li><li><a href="https://www.cnblogs.com/lenmom/p/9193183.html">CentOS 7 创建桌面快捷方式</a></li><li><a href="https://blog.csdn.net/Leeniux/article/details/80828074">CentOS7(GNOME)设置桌面图标大小缩放</a></li><li><a href="https://blog.csdn.net/Run_the_youth/article/details/51587077">CentOS7将应用快捷方式加到桌面</a></li><li><a href="https://www.liaoxuefeng.com/article/0014631488240837e3633d3d180476cb684ba7c10fda6f6000">使用Travis进行持续集成(Java)</a></li><li><a href="https://segmentfault.com/a/1190000011218410">Travis CI 系列：自动化部署博客(php)</a></li><li><a href="https://cnodejs.org/topic/558df089ebf9c92d17e73358">Nodejs开源项目里怎么样写测试、CI和代码测试覆盖率</a> </li><li><a href="https://www.zybuluo.com/XiangZhou/note/208532">Express 4.x API</a></li><li><a href="https://github.com/cramonDE/gulp-book">Gulp 入门指南</a></li><li><a href="https://blog.csdn.net/debimeng/article/details/74296152?utm_source=itdadao&utm_medium=referral">CentOS 7.2重启网络报错 Failed to start LSB: Bring up&#x2F;down—liux报错</a></li><li><a href="https://blog.csdn.net/lingbo229/article/details/79019658">Centos7 安装PhantomJS</a></li></ol><h2 id="2018年第35周（2018-08-27-2018-09-02）"><a href="#2018年第35周（2018-08-27-2018-09-02）" class="headerlink" title="2018年第35周（2018&#x2F;08&#x2F;27~2018&#x2F;09&#x2F;02）"></a>2018年第35周（2018&#x2F;08&#x2F;27~2018&#x2F;09&#x2F;02）</h2><ol><li><a href="https://blog.csdn.net/wangzuokun/article/details/70799976">CentOS7 安装 mongodb</a> </li><li><a href="http://www.mamicode.com/info-detail-2371195.html">CentOS 7上安装 MongoDB数据库 4.0.0最新版</a></li><li><a href="https://docs.mongodb.com/manual/reference/configuration-options/">mongoDB Configuration File Options</a></li><li><a href="https://blog.csdn.net/zhouzhiwengang/article/details/51446582">centos Mongodb 基础使用</a></li><li><a href="https://www.jb51.net/article/48217.htm">MongoDB常用操作命令大全</a></li><li><a href="https://coderdream.github.io/201835#20183501">CentOS 7上安装 MongoDB数据库 4.1.1最新版</a> </li><li><a href="https://coderdream.github.io/201835#20183502">CentOS查看和修改PATH环境变量的方法</a> </li><li><a href="https://coderdream.github.io/201835#20183503">CentOS下手动安装gcc最佳实践</a> </li><li><a href="https://coderdream.github.io/201835#20183504">CentOS下手动安装nodejs最佳实践</a> </li><li><a href="https://www.cnblogs.com/hongdada/p/6671065.html">CentOS7.2 安装Chrome</a> </li><li><a href="https://www.cnblogs.com/ywlaker/p/6113927.html">单点登录原理与简单实现</a> </li><li><a href="https://cnodejs.org/topic/55f6e69904556da7553d20dd">单点登录的三种实现方式</a></li><li><a href="https://blog.csdn.net/qq_24708791/article/details/78535565">单点登录之CAS原理和实现</a></li><li><a href="https://www.cnblogs.com/wxj-106/p/8097880.html">SSO单点登录三种情况的实现方式详解</a></li><li><a href="https://www.cnblogs.com/yexiaochai/p/4422460.html">认识单点登录(nodejs)</a></li><li><a href="https://www.cnblogs.com/lucio110/p/8192792.html">Sourcetree跳过注册的方法</a></li><li><a href="https://github.com/CoderDream/struts-examples/tree/master/crud">Struts2最佳实践之crud（Maven版）</a></li><li><a href="http://struts.apache.org/getting-started/how-to-create-a-struts2-web-application.html">How To Create A Struts 2 Web Application(官网)</a></li></ol><h2 id="2018年第34周（2018-08-20-2018-08-26）"><a href="#2018年第34周（2018-08-20-2018-08-26）" class="headerlink" title="2018年第34周（2018&#x2F;08&#x2F;20~2018&#x2F;08&#x2F;26）"></a>2018年第34周（2018&#x2F;08&#x2F;20~2018&#x2F;08&#x2F;26）</h2><ol><li><a href="https://coderdream.github.io/201834#20183401">nrm – NPM registry 管理工具</a> </li><li><a href="https://coderdream.github.io/201834#20183402">怎么样给linux文件添加可执行权限</a></li><li><a href="https://coderdream.github.io/201834#20183403">CentOS7下安装google chrome浏览器</a></li><li><a href="https://www.linuxidc.com/Linux/2017-04/142897.htm">vmware linux虚拟机与本地物理机共享文件夹</a></li></ol><h2 id="2018年第33周（2018-08-13-2018-08-19）"><a href="#2018年第33周（2018-08-13-2018-08-19）" class="headerlink" title="2018年第33周（2018&#x2F;08&#x2F;13~2018&#x2F;08&#x2F;19）"></a>2018年第33周（2018&#x2F;08&#x2F;13~2018&#x2F;08&#x2F;19）</h2><ol><li><a href="https://blog.csdn.net/mate_ge/article/details/78841351">centos6.5+postgresql10环境搭建</a> </li><li><a href="https://www.cnblogs.com/think8848/p/5877076.html">CentOS7下安装并简单设置PostgreSQL笔记</a></li><li><a href="https://www.cnblogs.com/renzhicai/p/7773080.html">CentOS下Redis的安装</a></li><li><a href="https://www.cnblogs.com/aimu/p/7047671.html">Redis可视化工具Redis Desktop Manager使用</a></li><li><a href="http://www.runoob.com/redis/redis-tutorial.html">Redis 教程</a></li><li><a href="https://cnodejs.org/topic/4fb1c1fd1975fe1e1310490b">在Node.js中使用TCP套接字编程</a></li><li><a href="https://blog.csdn.net/zhangxin09/article/details/12844975">学习 NodeJS 第八天：Socket 通讯</a></li><li><a href="https://github.com/xyfcode/zspeed">Node游戏服务器源代码（TCP通讯，mongodb，文件读写，数据加密，子父进程通讯）开心连三国</a></li><li><a href="https://blog.csdn.net/lupengfei1009/article/details/50832996">MongoDB+MongoVUE安装及入门</a></li></ol><h2 id="2018年第32周（2018-08-06-2018-08-12）"><a href="#2018年第32周（2018-08-06-2018-08-12）" class="headerlink" title="2018年第32周（2018&#x2F;08&#x2F;06~2018&#x2F;08&#x2F;12）"></a>2018年第32周（2018&#x2F;08&#x2F;06~2018&#x2F;08&#x2F;12）</h2><ol><li><a href="https://blog.csdn.net/dkbnull/article/details/61414350">使用WebStorm&#x2F;IDEA上传本地项目到GitHub</a></li><li><a href="http://www.cnblogs.com/limark/p/5200239.html">代码审查工具 StyleCop 的探索</a></li><li><a href="https://www.cnblogs.com/mxh1099/p/5332133.html">js之规范代码写法</a><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">for</span>(var key in obj)&#123;<br><span class="hljs-built_in">if</span>(!obj.hasOwnProperty(key)) continue;<br></code></pre></td></tr></table></figure></li><li><a href="https://blog.csdn.net/cc_fys/article/details/78281085">WebStorm 打开Node.js的代码提示功能</a></li><li><a href="https://www.oschina.net/question/2855414_2189024">用webstorm写jQuery代码提示有警告怎么处理？警告代码如下。麻烦大神指教</a></li><li><a href="https://blog.csdn.net/baidu_30809315/article/details/78548152">JQuery警告：Duplicated jQuery selector【divs &#x3D; $( “div” );】</a></li><li><a href="https://www.cnblogs.com/shuaijie/articles/5033309.html">代码审查工具StyleCop之一：介绍和使用</a></li><li><a href="https://blog.csdn.net/gwblue/article/details/25003031">StyleCop学习笔记——自定义规则</a></li><li><a href="https://www.cnblogs.com/chen110xi/p/5534994.html">StyleCop学习笔记——默认的规则</a></li><li><a href="https://coderdream.github.io/201831#20183102">VMWare怎样隐藏到托盘</a></li><li><a href="https://blog.csdn.net/u012102104/article/details/78950290">MarkDown支持高亮的语言</a></li><li><a href="http://www.bootcss.com/p/layoutit/">自定义表单–样例</a></li><li><a href="https://blog.csdn.net/wlmnzf/article/details/50678115">自定义表单（完）–（html5版本）</a></li><li><a href="https://blog.csdn.net/vkqiang/article/details/69371764">开源 java CMS - FreeCMS2.6 自定义表单</a></li><li><a href="http://www.cnblogs.com/webreport/archive/2009/09/02/1558731.html">web工作流管理系统开发之一 工作流概念</a></li><li><a href="https://coderdream.github.io/command-ls">ls命令</a></li><li><a href="https://coderdream.github.io/command-find">find命令</a></li></ol><h2 id="2018年第31周（2018-07-30-2018-08-05）"><a href="#2018年第31周（2018-07-30-2018-08-05）" class="headerlink" title="2018年第31周（2018&#x2F;07&#x2F;30~2018&#x2F;08&#x2F;05）"></a>2018年第31周（2018&#x2F;07&#x2F;30~2018&#x2F;08&#x2F;05）</h2><ol><li><a href="https://www.howtoing.com/how-to-install-vagrant-on-centos-7">如何在CentOS 7上安装Vagrant</a></li><li><a href="https://www.cnblogs.com/davenkin/p/vagrant-virtualbox.html">Vagrant入门</a></li><li><a href="https://c4ys.com/archives/1230">Vagrant box国内镜像及本地安装教程</a></li><li><a href="https://blog.csdn.net/xiaofeiaiai/article/details/55048812">CentOS7.2部署FTP</a></li><li><a href="https://blog.csdn.net/pmlpml/article/details/53925542">用 vagrant 快速部署 docker 虚拟机集群</a></li><li><a href="https://www.cnblogs.com/I-will-be-different/p/4353597.html">Docker个人学习总结</a></li><li><a href="https://www.cnblogs.com/52fhy/p/5638571.html">Docker学习笔记</a></li><li><a href="https://www.cnblogs.com/davenkin/p/vagrant-virtualbox.html">Vagrant入门</a></li><li><a href="https://blog.csdn.net/u011415782/article/details/78501799">CentOS7 ab压力测试安装与解释</a></li><li><a href="https://segmentfault.com/markdown">Markdown 编辑器语法指南</a></li><li><a href="https://blog.csdn.net/u012187452/article/details/73478028">Node.js学习之网络爬虫（使用cheerio抓取网页数据）</a></li><li><a href="https://cnodejs.org/topic/5203a71844e76d216a727d2e">通读cheerio API</a></li><li><a href="http://www.cnblogs.com/mingjiatang/archive/2017/12/13/8034953.html">NodeJS爬虫入门</a></li></ol><h2 id="2018年第30周（2018-07-23-2018-07-29）"><a href="#2018年第30周（2018-07-23-2018-07-29）" class="headerlink" title="2018年第30周（2018&#x2F;07&#x2F;23~2018&#x2F;07&#x2F;29）"></a>2018年第30周（2018&#x2F;07&#x2F;23~2018&#x2F;07&#x2F;29）</h2><ol><li><a href="https://coderdream.github.io/docker-cookbook#20180727">Docker 经典实例</a></li><li><a href="https://coderdream.github.io/centos-sinopia#20180727">CentOS 7 安装Sinopia</a></li></ol><h2 id="2018年第28周（2018-07-09-2018-07-15）"><a href="#2018年第28周（2018-07-09-2018-07-15）" class="headerlink" title="2018年第28周（2018&#x2F;07&#x2F;09~2018&#x2F;07&#x2F;15）"></a>2018年第28周（2018&#x2F;07&#x2F;09~2018&#x2F;07&#x2F;15）</h2><ol><li><a href="https://www.cnblogs.com/youyoui/p/8337147.html">Git 忽略提交 .gitignore</a></li><li><a href="http://www.mamicode.com/info-detail-1833843.html">selenium 3.0 键盘事件 +强制结束chromedriver进程代码</a></li></ol><h2 id="2018年第23周（2018-06-04-2018-06-10）"><a href="#2018年第23周（2018-06-04-2018-06-10）" class="headerlink" title="2018年第23周（2018&#x2F;06&#x2F;04~2018&#x2F;06&#x2F;10）"></a>2018年第23周（2018&#x2F;06&#x2F;04~2018&#x2F;06&#x2F;10）</h2><ol><li><a href="https://coderdream.github.io/201823#20182301">SQL Server查询数据的所有表名和行数</a></li><li><a href="https://coderdream.github.io/201823#20182302">SQL Server新增和删除约束</a></li><li><a href="https://blog.csdn.net/whhgarsky/article/details/70164180">用Enterprise Architect从源码自动生成类图（附图+工具）</a></li><li><a href="https://blog.csdn.net/u010156063/article/details/76199459">Enterprise Architect 数据库逆向工程（导入已经存在的数据表结构）</a></li><li><a href="https://www.cnblogs.com/blfshiye/p/4747252.html">UML造型——使用EA时序图工具的开发实践和经验</a></li></ol><h2 id="2017年第47周（2017-11-13-2017-11-19）"><a href="#2017年第47周（2017-11-13-2017-11-19）" class="headerlink" title="2017年第47周（2017&#x2F;11&#x2F;13~2017&#x2F;11&#x2F;19）"></a>2017年第47周（2017&#x2F;11&#x2F;13~2017&#x2F;11&#x2F;19）</h2><ol><li><a href="https://coderdream.github.io/201747#20174701">人力看板（高级查询）</a></li><li><a href="https://coderdream.github.io/201747#20174702">任务看板（高级查询）</a></li><li><a href="https://coderdream.github.io/201747#20174703">JavaScript获取当前根目录</a></li><li><a href="https://www.cnblogs.com/fish-li/archive/2011/06/06/2073626.html">看懂SqlServer查询计划</a></li><li><a href="http://files.cnblogs.com/files/fish-li/MyNorthwind.7z">看懂SqlServer查询计划-数据库文件</a></li></ol><h2 id="2017年第46周（2017-11-13-2017-11-19）"><a href="#2017年第46周（2017-11-13-2017-11-19）" class="headerlink" title="2017年第46周（2017&#x2F;11&#x2F;13~2017&#x2F;11&#x2F;19）"></a>2017年第46周（2017&#x2F;11&#x2F;13~2017&#x2F;11&#x2F;19）</h2><ol><li><a href="https://www.cnblogs.com/landeanfen/p/5035608.html">JS组件系列——Form表单验证神器： BootstrapValidator</a></li><li><a href="https://www.cnblogs.com/v-weiwang/p/4834672.html">基于jquery，bootstrap数据验证插件bootstrapValidator 教程</a></li><li><a href="https://www.cnblogs.com/nele/p/5493414.html">bootstrapValidator.js 做表单验证</a></li><li><a href="https://coderdream.github.io/201746#20174601">SpringMVC访问不到默认页的问题</a></li><li><a href="https://coderdream.github.io/201746#20174602">将外部jar打入本地maven仓库</a></li><li><a href="https://coderdream.github.io/201746#20174603">maven项目使用mybatis-generator自动生成代码</a></li><li><a href="https://www.cnblogs.com/gjkbendan/p/6497040.html">spring aop 实现用户操作日志记录功能(转）【本地实现为SystemLogAspect】</a></li></ol><h2 id="2017年第45周（2017-11-06-2017-11-12）"><a href="#2017年第45周（2017-11-06-2017-11-12）" class="headerlink" title="2017年第45周（2017&#x2F;11&#x2F;06~2017&#x2F;11&#x2F;12）"></a>2017年第45周（2017&#x2F;11&#x2F;06~2017&#x2F;11&#x2F;12）</h2><ol><li><a href="https://coderdream.github.io/weui/01_button">weui实例-button</a></li><li><a href="https://coderdream.github.io/weui/02_form">weui实例-form</a></li><li><a href="https://coderdream.github.io/jquery_weui/index">jquery-weui实例</a></li></ol><h2 id="2017年第44周（2017-10-30-2017-11-05）"><a href="#2017年第44周（2017-10-30-2017-11-05）" class="headerlink" title="2017年第44周（2017&#x2F;10&#x2F;30~2017&#x2F;11&#x2F;05）"></a>2017年第44周（2017&#x2F;10&#x2F;30~2017&#x2F;11&#x2F;05）</h2><ol><li><a href="https://coderdream.github.io/weui/index">weui实例</a></li></ol><h2 id="2017年第43周（2017-10-23-2017-10-29）"><a href="#2017年第43周（2017-10-23-2017-10-29）" class="headerlink" title="2017年第43周（2017&#x2F;10&#x2F;23~2017&#x2F;10&#x2F;29）"></a>2017年第43周（2017&#x2F;10&#x2F;23~2017&#x2F;10&#x2F;29）</h2><ol><li><a href="https://github.com/Yam-cn/pyalgotrade-cn">Pyalgotrade-cn</a></li><li><a href="https://zhuanlan.zhihu.com/p/21624000?refer=crossin">用 Python 实现你的量化交易策略</a></li><li><a href="http://blog.csdn.net/junbujianwpl/article/details/52038688">用 Python 写了个简单的股票量化交易框架</a></li><li><a href="http://www.cnblogs.com/dhcn/p/7121435.html">python做量化交易干货分享</a></li><li><a href="http://blog.csdn.net/jike080401/article/details/50510609">Python编程的例子—-股票数据接口</a></li><li><a href="http://www.cnblogs.com/chaosimple/p/4153083.html">【原】十分钟搞定pandas</a></li><li><a href="http://30daydo.com/article/11">30天学会量化交易模型 Day01</a></li><li><a href="http://blog.csdn.net/yagamil/article/details/51440285">发现使用python＋tushare做量化交易 其实不是很难</a></li><li><a href="https://www.zhihu.com/question/40210709">编程小白如何结合量化实例学习python量化建模？</a></li><li><a href="http://python.jobbole.com/87733/">用Python浅析股票数据</a></li><li><a href="http://blog.csdn.net/pangjiuzala/article/details/50410728"> 一个用Python编写的股票数据（沪深）爬虫和选股策略测试框架</a></li><li><a href="http://blog.csdn.net/djun100/article/details/25748419">Sina股票实时数据接口</a></li><li><a href="http://blog.csdn.net/ustbhacker/article/details/8365756">腾迅股票数据接口 http&#x2F;javascript</a></li><li><a href="https://github.com/Emptyset110/dHydra">dHydra 主要针对多数据源多策略实时计算的量化分析开发框架。提供新浪Level2等数据获取</a></li><li><a href="http://www.cnblogs.com/luluping/archive/2010/11/15/1877817.html">实时股票数据接口</a></li><li><a href="http://www.cnblogs.com/wyfighting/p/7497985.html">自学python之爬虫3股票数据爬虫</a></li><li><a href="http://www.cnblogs.com/CongZhang/p/5274486.html">Python3.5 queue模块详解</a></li><li><a href="https://github.com/felixglow/Stock">终端实时获取股票价格(GitHub)</a></li><li><a href="https://github.com/garydai/stock">雪球股票讨论度与价格走势的关系</a></li><li><a href="https://www.zhihu.com/question/22145919">如何下载股票历史数据？</a></li></ol><h2 id="2017年第42周（2017-10-16-2017-10-22）"><a href="#2017年第42周（2017-10-16-2017-10-22）" class="headerlink" title="2017年第42周（2017&#x2F;10&#x2F;16~2017&#x2F;10&#x2F;22）"></a>2017年第42周（2017&#x2F;10&#x2F;16~2017&#x2F;10&#x2F;22）</h2><ol><li><a href="https://coderdream.github.io/201742#20174201">JavaScript判断是否为整数类型方式</a></li><li><a href="http://www.cnblogs.com/Bonker/p/3584707.html">python+Eclipse+pydev环境搭建</a></li><li><a href="http://tushare.org/">现成的股票数据抓取工具啦，而且是免费、开源， ：TuShare</a></li></ol><h2 id="2017年第41周（2017-10-09-2017-10-15）"><a href="#2017年第41周（2017-10-09-2017-10-15）" class="headerlink" title="2017年第41周（2017&#x2F;10&#x2F;09~2017&#x2F;10&#x2F;15）"></a>2017年第41周（2017&#x2F;10&#x2F;09~2017&#x2F;10&#x2F;15）</h2><ol><li><a href="https://github.com/kripken/sql.js">sql.js-SQLite compiled to javascript</a></li><li><a href="https://coderdream.github.io/201741#20174101">JS操作SQLite</a></li></ol><h2 id="2017年第40周（2017-10-02-2017-10-08）"><a href="#2017年第40周（2017-10-02-2017-10-08）" class="headerlink" title="2017年第40周（2017&#x2F;10&#x2F;02~2017&#x2F;10&#x2F;08）"></a>2017年第40周（2017&#x2F;10&#x2F;02~2017&#x2F;10&#x2F;08）</h2><ol><li><a href="https://coderdream.github.io/art/basic">artTemplate-basic</a></li><li><a href="https://coderdream.github.io/art/include">artTemplate-include</a></li><li><a href="https://coderdream.github.io/art/compile">artTemplate-compile</a></li><li><a href="https://coderdream.github.io/art/compile-error">artTemplate-compile-error</a></li><li><a href="https://coderdream.github.io/art/filter">artTemplate-filter</a></li><li><a href="https://coderdream.github.io/art/no-escape">artTemplate-no-escape</a></li><li><a href="https://coderdream.github.io/art/print">artTemplate-print</a></li><li><a href="https://coderdream.github.io/art/runtime-error">artTemplate-runtime-error</a></li><li><a href="https://coderdream.github.io/chart/excavator">挖掘机运营状况</a></li></ol><h2 id="2017年第39周（2017-9-25-2017-10-1）"><a href="#2017年第39周（2017-9-25-2017-10-1）" class="headerlink" title="2017年第39周（2017&#x2F;9&#x2F;25~2017&#x2F;10&#x2F;1）"></a>2017年第39周（2017&#x2F;9&#x2F;25~2017&#x2F;10&#x2F;1）</h2><ol><li><a href="https://coderdream.github.io/201739#20173901">Tomcat管理页面403 Access Denied的解决方法</a></li><li><a href="https://coderdream.github.io/201739#20173902">MyBatis通过@调用Java类的静态代码和常量</a></li><li><a href="https://coderdream.github.io/201739#20173903">Tomcat 配置shared目录</a></li><li><a href="https://coderdream.github.io/201739#20173904">Maven打war包不包含jar</a></li><li><a href="https://coderdream.github.io/autotest/Chapter05">第五章 测试用例规划及TestNG的使用</a></li><li><a href="https://coderdream.github.io/201739#20173905">查看sqlserver被锁的表以及如何解锁</a></li></ol><h2 id="2017年第38周（2017-9-18-2017-9-24）"><a href="#2017年第38周（2017-9-18-2017-9-24）" class="headerlink" title="2017年第38周（2017&#x2F;9&#x2F;18~2017&#x2F;9&#x2F;24）"></a>2017年第38周（2017&#x2F;9&#x2F;18~2017&#x2F;9&#x2F;24）</h2><ol><li><a href="http://www.cnblogs.com/Ming8006/p/5811425.html">测试覆盖率工具：EclEmma</a></li><li><a href="http://www.cnblogs.com/choosewang/articles/3079983.html">TestNG.XML初级指南</a></li><li><a href="http://www.cnblogs.com/tobecrazy/p/4579414.html">testng 教程</a></li><li><a href="http://www.cnblogs.com/tobecrazy/p/4582173.html">testng教程之testng.xml的配置和使用，以及参数传递</a></li><li><a href="http://blog.csdn.net/lykangjia/article/details/56485295">TestNG详解-深度好文</a></li><li><a href="https://coderdream.github.io/201738#20173801">TextNG.xml配置实例</a></li><li><a href="https://coderdream.github.io/201738#20173802">Java获取本机MAC地址、IP地址</a></li><li><a href="http://blog.csdn.net/tanzhangwen/article/details/18733557">WebDriver中页面滚动(scrolling)</a></li><li><a href="https://coderdream.github.io/chart/sample_0101">Chart Samples – Bar Chart</a></li><li><a href="https://coderdream.github.io/chart/sample_0102">Chart Samples – Bar Chart 2</a></li><li><a href="http://blog.csdn.net/chenxiaodan_danny/article/details/53509393">JQuery $.each与$().each区别， for in 与 for of 区别</a></li></ol><h2 id="2017年第37周（2017-9-11-2017-9-17）"><a href="#2017年第37周（2017-9-11-2017-9-17）" class="headerlink" title="2017年第37周（2017&#x2F;9&#x2F;11~2017&#x2F;9&#x2F;17）"></a>2017年第37周（2017&#x2F;9&#x2F;11~2017&#x2F;9&#x2F;17）</h2><ol><li><a href="https://coderdream.github.io/201737#20173701">jQuery中radio Button根据值选中</a></li><li><a href="https://coderdream.github.io/201737#20173702">jQuery 下拉选单默认选中与单击事件</a></li><li><a href="http://www.cnblogs.com/Ming8006/p/5811425.html">测试覆盖率工具：EclEmma</a></li></ol><h2 id="2017年第36周（2017-9-4-2017-9-10）"><a href="#2017年第36周（2017-9-4-2017-9-10）" class="headerlink" title="2017年第36周（2017&#x2F;9&#x2F;4~2017&#x2F;9&#x2F;10）"></a>2017年第36周（2017&#x2F;9&#x2F;4~2017&#x2F;9&#x2F;10）</h2><ol><li><a href="https://coderdream.github.io/201736#20173601">getJSON获取数据</a></li><li><a href="https://coderdream.github.io/201736#20173602">jQuery ajax读取本地json文件</a></li></ol><h2 id="2017年第34周（2017-8-21-2017-8-27）"><a href="#2017年第34周（2017-8-21-2017-8-27）" class="headerlink" title="2017年第34周（2017&#x2F;8&#x2F;21~2017&#x2F;8&#x2F;27）"></a>2017年第34周（2017&#x2F;8&#x2F;21~2017&#x2F;8&#x2F;27）</h2><ol><li><a href="http://blog.csdn.net/dadiyang/article/details/52352632">Java发送包含网络和本地图片的HTML邮件</a></li><li><a href="https://coderdream.github.io/201734#20173401">查找项目经理超过x人的员工</a></li><li><a href="https://coderdream.github.io/201734#20173402">统计项目经理的项目个数</a></li><li><a href="https://coderdream.github.io/201734#20173403">项目经理手下存在项目经理超过X人的员工且该项目经理归属项目超过Y个</a></li><li><a href="https://coderdream.github.io/201734#20173404">遍历Map</a></li><li><a href="https://coderdream.github.io/201734#20173405">永久修改Jenkins启动端口的一种解决方法</a></li></ol><h2 id="2017年第33周（2017-8-14-2017-8-20）"><a href="#2017年第33周（2017-8-14-2017-8-20）" class="headerlink" title="2017年第33周（2017&#x2F;8&#x2F;14~2017&#x2F;8&#x2F;20）"></a>2017年第33周（2017&#x2F;8&#x2F;14~2017&#x2F;8&#x2F;20）</h2><ol><li><a href="https://coderdream.github.io/201733#20173301">sql server 2008 分页，ROW_NUMBER( )函数</a></li><li><a href="http://blog.csdn.net/thither_shore/article/details/52206016">CSDN-markdown 页间跳转（锚点链接）的实现</a></li></ol><h2 id="2017年第32周（2017-8-07-2017-8-13）"><a href="#2017年第32周（2017-8-07-2017-8-13）" class="headerlink" title="2017年第32周（2017&#x2F;8&#x2F;07~2017&#x2F;8&#x2F;13）"></a>2017年第32周（2017&#x2F;8&#x2F;07~2017&#x2F;8&#x2F;13）</h2><ol><li><a href="https://coderdream.github.io/201732#20173201">好文章序列</a></li></ol><p><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TeamViewer</tag>
      
      <tag>GitHub</tag>
      
      <tag>Activiti6</tag>
      
      <tag>Spring-Boot</tag>
      
      <tag>小游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018年第50周</title>
    <link href="/2018/12/10/2018Week23/"/>
    <url>/2018/12/10/2018Week23/</url>
    
    <content type="html"><![CDATA[<h2 id="2018年第50周（2018-12-10-2018-12-16）"><a href="#2018年第50周（2018-12-10-2018-12-16）" class="headerlink" title="2018年第50周（2018&#x2F;12&#x2F;10~2018&#x2F;12&#x2F;16）"></a>2018年第50周（2018&#x2F;12&#x2F;10~2018&#x2F;12&#x2F;16）</h2><h2 id="SQL-Server查询数据的所有表名和行数"><a href="#SQL-Server查询数据的所有表名和行数" class="headerlink" title="SQL Server查询数据的所有表名和行数"></a><span id= "20182301">SQL Server查询数据的所有表名和行数</span></h2><p>查询查询所有表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name <span class="hljs-keyword">FROM</span> sysobjects <span class="hljs-keyword">WHERE</span> xtype <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;u&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.tables;<br></code></pre></td></tr></table></figure><p>查询数据库中所有的表名及行数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>a.name,<br>b. <span class="hljs-keyword">ROWS</span><br><span class="hljs-keyword">FROM</span><br>sysobjects <span class="hljs-keyword">AS</span> a<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> sysindexes <span class="hljs-keyword">AS</span> b <span class="hljs-keyword">ON</span> a.id <span class="hljs-operator">=</span> b.id<br><span class="hljs-keyword">WHERE</span><br>(a.type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;u&#x27;</span>)<br><span class="hljs-keyword">AND</span> (b.indid <span class="hljs-keyword">IN</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>a.name,<br>b. <span class="hljs-keyword">ROWS</span> <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p>查询所有的标明及空间占用量\行数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>object_name(id) tablename,<br><span class="hljs-number">8</span> <span class="hljs-operator">*</span> reserved <span class="hljs-operator">/</span> <span class="hljs-number">1024</span> reserved,<br>rtrim(<span class="hljs-number">8</span> <span class="hljs-operator">*</span> dpages) <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;kb&#x27;</span> used,<br><span class="hljs-number">8</span> <span class="hljs-operator">*</span> (reserved <span class="hljs-operator">-</span> dpages) <span class="hljs-operator">/</span> <span class="hljs-number">1024</span> unused,<br><span class="hljs-number">8</span> <span class="hljs-operator">*</span> dpages <span class="hljs-operator">/</span> <span class="hljs-number">1024</span> <span class="hljs-operator">-</span> <span class="hljs-keyword">ROWS</span> <span class="hljs-operator">/</span> <span class="hljs-number">1024</span> <span class="hljs-operator">*</span> minlen <span class="hljs-operator">/</span> <span class="hljs-number">1024</span> <span class="hljs-keyword">free</span>,<br><span class="hljs-keyword">ROWS</span> <span class="hljs-comment">--,*</span><br><span class="hljs-keyword">FROM</span><br>sysindexes<br><span class="hljs-keyword">WHERE</span><br>indid <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>tablename,<br>reserved <span class="hljs-keyword">DESC</span><br></code></pre></td></tr></table></figure><p><span id= "20182302">SQL Server新增和删除约束</span></p><p>删除约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">IF  <span class="hljs-keyword">EXISTS</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.foreign_keys <span class="hljs-keyword">WHERE</span> object_id <span class="hljs-operator">=</span> OBJECT_ID(N<span class="hljs-string">&#x27;[dbo].[FK_PDRC_Organization_PDRC_Organization]&#x27;</span>) <span class="hljs-keyword">AND</span> parent_object_id <span class="hljs-operator">=</span> OBJECT_ID(N<span class="hljs-string">&#x27;[dbo].[PDRC_Organization]&#x27;</span>))<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> [dbo].[PDRC_Organization] <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> [FK_PDRC_Organization_PDRC_Organization]<br>GO<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> [dbo].[PDRC_Organization]  <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">CHECK</span> <span class="hljs-keyword">ADD</span>  <span class="hljs-keyword">CONSTRAINT</span> [FK_PDRC_Organization_PDRC_Organization] <span class="hljs-keyword">FOREIGN</span> KEY([LeadeID])<br><span class="hljs-keyword">REFERENCES</span> [dbo].[PDRC_Organization] ([ID])<br>GO<br></code></pre></td></tr></table></figure><p>新增约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> [dbo].[PDRC_Organization] <span class="hljs-keyword">CHECK</span> <span class="hljs-keyword">CONSTRAINT</span> [FK_PDRC_Organization_PDRC_Organization]<br>GO<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018年第50周</title>
    <link href="/2018/12/10/2018Week50/"/>
    <url>/2018/12/10/2018Week50/</url>
    
    <content type="html"><![CDATA[<h2 id="2018年第50周（2018-12-10-2018-12-16）"><a href="#2018年第50周（2018-12-10-2018-12-16）" class="headerlink" title="2018年第50周（2018&#x2F;12&#x2F;10~2018&#x2F;12&#x2F;16）"></a>2018年第50周（2018&#x2F;12&#x2F;10~2018&#x2F;12&#x2F;16）</h2><ul><li><p>直接将Excel或CSV文件导入新数据库中作为表</p><ol><li>打开“SQL Server Management Studio”</li><li>新建数据库</li><li>选择数据库，点击右键，依次选择【任务】-》【导入数据】</li><li>在“选择数据源“面板的数据源选项选择【平面文件源】</li><li>点击【浏览】按钮，选择需要导入的Excel或CSV文件</li><li>在【常规】面板勾选【在第一个数据行中显示列名称】，这样第一行数据会作为表的列名</li><li>在【高级】面板中设置正确的数据类型【DataType】，如带2位小数的数值要选择【数值[DT_NUMERIC]】,同时将DataScale（精度）设置为2</li><li>【下一步】选择目标数据库，直至完成后，点击【关闭】按钮</li></ol></li><li><p>CASE WHEN 用法</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a.TM工号,<br>       a.交付人员,<br>       a.[标准产能(BSM)],<br>       a.生效日期,<br>       a.技术平台,<br>       <span class="hljs-keyword">CASE</span><br>           <span class="hljs-keyword">WHEN</span> b.[交付人员] <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br>           <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span><br>           <span class="hljs-keyword">ELSE</span> <span class="hljs-number">1</span><br>       <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> bwid,<br>       <span class="hljs-keyword">CASE</span><br>           <span class="hljs-keyword">WHEN</span> c.交付人员 <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br>           <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span><br>           <span class="hljs-keyword">ELSE</span> <span class="hljs-number">1</span><br>       <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> cwid<br><span class="hljs-keyword">FROM</span> dbo.Staff01 <span class="hljs-keyword">AS</span> a<br>     <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> dbo.Staff02 <span class="hljs-keyword">AS</span> b <span class="hljs-keyword">ON</span> b.交付人员 <span class="hljs-operator">=</span> a.交付人员<br>     <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> dbo.Staff03 <span class="hljs-keyword">AS</span> c <span class="hljs-keyword">ON</span> c.交付人员 <span class="hljs-operator">=</span> a.交付人员;<br></code></pre></td></tr></table></figure><ul><li>运行结果如下</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">TM</span>工号交付人员BSM技术平台bwidcwid<br><span class="hljs-attribute">B</span>-<span class="hljs-number">27154</span>B-<span class="hljs-number">14853</span><span class="hljs-number">0</span>.<span class="hljs-number">80</span>测试<span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-attribute">B</span>-<span class="hljs-number">27154</span>B-<span class="hljs-number">15985</span><span class="hljs-number">1</span>.<span class="hljs-number">68</span>Java<span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-attribute">B</span>-<span class="hljs-number">27154</span>B-<span class="hljs-number">16514</span><span class="hljs-number">1</span>.<span class="hljs-number">08</span>Java<span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-attribute">B</span>-<span class="hljs-number">27154</span>B-<span class="hljs-number">20897</span><span class="hljs-number">1</span>.<span class="hljs-number">12</span>Java<span class="hljs-number">0</span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>将上面的查询语句作为一个视图selall（Select All）</p><p>下面的脚本分别得到Staff02和Staff03的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)  <span class="hljs-keyword">from</span> selall <span class="hljs-keyword">where</span> bwid <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)  <span class="hljs-keyword">from</span> selall <span class="hljs-keyword">where</span> cwid <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><ul><li>获取3张表的记录行数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/****** Script for SelectTopNRows command from SSMS  ******/</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> [BJC_PDRC].[dbo].[PDRC_StaffManage1];<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> [BJC_PDRC].[dbo].[PDRC_StaffManage2];<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> [BJC_PDRC].[dbo].[PDRC_StaffManage3];<br></code></pre></td></tr></table></figure><ul><li>查看tm的情况</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> d.workid,<br>       c.tm,<br>       d.tm<br><span class="hljs-keyword">FROM</span> PDRC_StaffManage1 d<br>     <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span><br>(<br>    <span class="hljs-keyword">SELECT</span> a.workid <span class="hljs-keyword">AS</span> workid,<br>           b.tm<br>    <span class="hljs-keyword">FROM</span> PDRC_StaffManage1 a<br>         <span class="hljs-keyword">JOIN</span> PDRC_StaffManage2 b <span class="hljs-keyword">ON</span> a.workid <span class="hljs-operator">=</span> b.workid<br>) <span class="hljs-keyword">AS</span> c <span class="hljs-keyword">ON</span> d.workid <span class="hljs-operator">=</span> c.workid;<br></code></pre></td></tr></table></figure><ul><li>结果：tm1为空则去tm2、tm1和tm2不相等则取tm2</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">workidtm1 tm2<br>B<span class="hljs-number">-21276</span>B<span class="hljs-number">-28309</span>B<span class="hljs-number">-28309</span><br>B<span class="hljs-number">-43229</span><span class="hljs-keyword">NULL</span>B<span class="hljs-number">-24644</span><br>B<span class="hljs-number">-34169</span>B<span class="hljs-number">-30987</span>B<span class="hljs-number">-28023</span><br>B<span class="hljs-number">-49033</span><span class="hljs-keyword">NULL</span>B<span class="hljs-number">-40354</span><br>B<span class="hljs-number">-26561</span><span class="hljs-keyword">NULL</span>B<span class="hljs-number">-35656</span><br>B<span class="hljs-number">-43037</span>B<span class="hljs-number">-22935</span>B<span class="hljs-number">-16981</span><br>B<span class="hljs-number">-14297</span>B<span class="hljs-number">-27189</span>B<span class="hljs-number">-28023</span><br>B<span class="hljs-number">-48901</span>B<span class="hljs-number">-22940</span>B<span class="hljs-number">-28023</span><br></code></pre></td></tr></table></figure><ul><li>正确结果：1461条数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> [TM工号],<br>       [交付人员],<br>       [标准产能(BSM)],<br>       [生效日期],<br>       [技术平台]<br><span class="hljs-keyword">FROM</span> selall<br><span class="hljs-keyword">WHERE</span> cwid <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>      <span class="hljs-keyword">AND</span> bwid <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> Staff02;<br><br></code></pre></td></tr></table></figure><ul><li>检查Staff02和Staff03是否存在相同交付人员的数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> dbo.Staff02 a <span class="hljs-keyword">join</span> Staff03 b <span class="hljs-keyword">on</span> b.交付人员 <span class="hljs-operator">=</span>a.交付人员 <br></code></pre></td></tr></table></figure><ul><li>现在数据库中TM不存在的交付人员列表（17）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span><br>(<br>    <span class="hljs-keyword">SELECT</span> [TM工号],<br>           [交付人员],<br>           [标准产能(BSM)],<br>           [生效日期],<br>           [技术平台]<br>    <span class="hljs-keyword">FROM</span> selall<br>    <span class="hljs-keyword">WHERE</span> cwid <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>          <span class="hljs-keyword">AND</span> bwid <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">UNION</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br>    <span class="hljs-keyword">FROM</span> Staff02<br>) i<br><span class="hljs-keyword">WHERE</span> i.[交付人员] <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span><br>(<br>    <span class="hljs-keyword">SELECT</span> f.[交付人员]<br>    <span class="hljs-keyword">FROM</span><br>    (<br>        <span class="hljs-keyword">SELECT</span> [TM工号],<br>               [交付人员],<br>               [标准产能(BSM)],<br>               [生效日期],<br>               [技术平台]<br>        <span class="hljs-keyword">FROM</span> selall<br>        <span class="hljs-keyword">WHERE</span> cwid <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>              <span class="hljs-keyword">AND</span> bwid <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">UNION</span><br>        <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br>        <span class="hljs-keyword">FROM</span> Staff02<br>    ) f<br>    <span class="hljs-keyword">JOIN</span> dbo.RC g <span class="hljs-keyword">ON</span> g.TM工号 <span class="hljs-operator">=</span> f.TM工号<br>);<br></code></pre></td></tr></table></figure><ul><li>Staff01中所有不存在TM的交付人员列表（414）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> Staff01 a<br><span class="hljs-keyword">WHERE</span> a.TM工号 <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span><br>(<br>    <span class="hljs-keyword">SELECT</span> b.TM工号<br>    <span class="hljs-keyword">FROM</span> RC b<br>);<br></code></pre></td></tr></table></figure><ul><li>Staff01中所有不存在TM列表（7）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span>(a.TM工号)  <span class="hljs-keyword">from</span> Staff01 a <span class="hljs-keyword">where</span> a.TM工号 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> b.TM工号 <span class="hljs-keyword">from</span> RC b);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018年第47周</title>
    <link href="/2018/11/19/2018Week47/"/>
    <url>/2018/11/19/2018Week47/</url>
    
    <content type="html"><![CDATA[<h2 id="2018年第47周（2018-11-19-2019-12-25）"><a href="#2018年第47周（2018-11-19-2019-12-25）" class="headerlink" title="2018年第47周（2018&#x2F;11&#x2F;19~2019&#x2F;12&#x2F;25）"></a>2018年第47周（2018&#x2F;11&#x2F;19~2019&#x2F;12&#x2F;25）</h2><h2 id="SQLServer-数据数据行转列"><a href="#SQLServer-数据数据行转列" class="headerlink" title="SQLServer 数据数据行转列"></a><span id= "20184701">SQLServer 数据数据行转列</span></h2><ul><li><p>都是数字时聚集  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span><br>       FilterProjectType,<br>       IdleProjectNo,<br>       IdleManagerWorkID<br><span class="hljs-keyword">FROM</span><br>(<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CASE</span><br>               <span class="hljs-keyword">WHEN</span> ConfigKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;FilterProjectType&#x27;</span><br>               <span class="hljs-keyword">THEN</span> ConfigValue<br>               <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span><br>           <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> FilterProjectType,<br>           <span class="hljs-keyword">CASE</span><br>               <span class="hljs-keyword">WHEN</span> ConfigKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IdleProjectNo&#x27;</span><br>               <span class="hljs-keyword">THEN</span> ConfigKeyName<br>               <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;&#x27;</span><br>           <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> IdleProjectNo,<br>           <span class="hljs-keyword">CASE</span><br>               <span class="hljs-keyword">WHEN</span> ConfigKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IdleManagerWorkID&#x27;</span><br>               <span class="hljs-keyword">THEN</span> ConfigKeyName<br>               <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;&#x27;</span><br>           <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> IdleManagerWorkID<br>    <span class="hljs-keyword">FROM</span> dbo.BIConfig a<br>    <span class="hljs-keyword">WHERE</span> a.ConfigKey <span class="hljs-keyword">IN</span>(<span class="hljs-string">&#x27;FilterProjectType&#x27;</span>, <span class="hljs-string">&#x27;IdleProjectNo&#x27;</span>, <span class="hljs-string">&#x27;IdleManagerWorkID&#x27;</span>)<br>) aaa;<br></code></pre></td></tr></table></figure></li><li><p>一般方式  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a.ConfigValue <span class="hljs-keyword">AS</span> FilterProjectType,<br>       b.ConfigKeyName <span class="hljs-keyword">AS</span> IdleProjectNo,<br>       c.ConfigKeyName <span class="hljs-keyword">AS</span> IdleManagerWorkID<br><span class="hljs-keyword">FROM</span> BIConfig a<br>     <span class="hljs-keyword">JOIN</span> BIConfig b <span class="hljs-keyword">ON</span> b.ConfigKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IdleProjectNo&#x27;</span><br>     <span class="hljs-keyword">JOIN</span> BIConfig c <span class="hljs-keyword">ON</span> c.ConfigKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IdleManagerWorkID&#x27;</span><br><span class="hljs-keyword">WHERE</span> a.ConfigKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;FilterProjectType&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>输出结果  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">FilterProjectTypeIdleProjectNoIdleManagerWorkID<br>1.00IDLE20180308127B-19385<br></code></pre></td></tr></table></figure></li><li><p>ETL取值和弹窗  </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"> <span class="hljs-built_in">int</span> FilterProjectType = (<span class="hljs-built_in">int</span>) <span class="hljs-keyword">this</span>.Dts.Variables[<span class="hljs-string">&quot;User::FilterProjectType&quot;</span>].Value;<br>String IdleManagerWorkID = (String)<span class="hljs-keyword">this</span>.Dts.Variables[<span class="hljs-string">&quot;User::IdleManagerWorkID&quot;</span>].Value;<br>String IdleProjectNo = (String)<span class="hljs-keyword">this</span>.Dts.Variables[<span class="hljs-string">&quot;User::IdleProjectNo&quot;</span>].Value;<br>System.Windows.Forms.MessageBox.Show(FilterProjectType.ToString() + <span class="hljs-string">&quot; - &quot;</span> + IdleManagerWorkID + <span class="hljs-string">&quot; - &quot;</span> + IdleProjectNo);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018年第43周</title>
    <link href="/2018/10/22/2018Week43/"/>
    <url>/2018/10/22/2018Week43/</url>
    
    <content type="html"><![CDATA[<h2 id="2018年第43周（2018-11-22-2018-11-28）"><a href="#2018年第43周（2018-11-22-2018-11-28）" class="headerlink" title="2018年第43周（2018&#x2F;11&#x2F;22~2018&#x2F;11&#x2F;28）"></a>2018年第43周（2018&#x2F;11&#x2F;22~2018&#x2F;11&#x2F;28）</h2><h2 id="SQLServer-数据库查看各表的记录数"><a href="#SQLServer-数据库查看各表的记录数" class="headerlink" title="SQLServer 数据库查看各表的记录数"></a><span id= "20184301">SQLServer 数据库查看各表的记录数</span></h2><ul><li>各表记录条数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a.name <span class="hljs-keyword">AS</span> 表名,<br>       <span class="hljs-built_in">MAX</span>(b.rows) <span class="hljs-keyword">AS</span> 记录条数<br><span class="hljs-keyword">FROM</span> sysobjects <span class="hljs-keyword">AS</span> a,<br>     sysindexes <span class="hljs-keyword">AS</span> b<br><span class="hljs-keyword">WHERE</span> a.id <span class="hljs-operator">=</span> b.id<br>      <span class="hljs-keyword">AND</span> a.xtype <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;u&#x27;</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> a.name<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">MAX</span>(b.rows) <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><ul><li>总记录条数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(记录条数) <span class="hljs-keyword">AS</span> 总记录数<br><span class="hljs-keyword">FROM</span><br>(<br>    <span class="hljs-keyword">SELECT</span> TOP <span class="hljs-number">10000</span> a.name <span class="hljs-keyword">AS</span> 表名,<br>                     <span class="hljs-built_in">MAX</span>(b.rows) <span class="hljs-keyword">AS</span> 记录条数<br>    <span class="hljs-keyword">FROM</span> sysobjects a,<br>         sysindexes b<br>    <span class="hljs-keyword">WHERE</span> a.id <span class="hljs-operator">=</span> b.id<br>          <span class="hljs-keyword">AND</span> a.xtype <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;u&#x27;</span><br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> a.name<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">MAX</span>(b.rows) <span class="hljs-keyword">DESC</span><br>) t1;<br></code></pre></td></tr></table></figure><h2 id="SQLServer-查询所有表名和表结构"><a href="#SQLServer-查询所有表名和表结构" class="headerlink" title="SQLServer 查询所有表名和表结构"></a><span id= "20184302">SQLServer 查询所有表名和表结构</span></h2><ul><li>表名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name <span class="hljs-keyword">FROM</span> sysobjects <span class="hljs-keyword">WHERE</span> xtype <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;U&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>SQLServer查询某表的表结构</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>syscolumns.name,<br>systypes.name,<br>syscolumns.isnullable,<br>syscolumns.length<br><span class="hljs-keyword">FROM</span><br>syscolumns,<br>systypes<br><span class="hljs-keyword">WHERE</span><br>syscolumns.xusertype <span class="hljs-operator">=</span> systypes.xusertype<br><span class="hljs-keyword">AND</span> syscolumns.id <span class="hljs-operator">=</span> object_id(<span class="hljs-string">&#x27;ISBG_HumanMap&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="SQLServer-数据库拷贝"><a href="#SQLServer-数据库拷贝" class="headerlink" title="SQLServer 数据库拷贝"></a><span id= "20184303">SQLServer 数据库拷贝</span></h2><ul><li>需求：将BJC_PDRC_UAT库直接备份生成生产库BJC_PDRC</li><li>步骤：</li></ul><ol><li>分离数据库</li><li>拷贝数据库文件（BJC_PDRC_UAT.mdf和BJC_PDRC.ldf），然后重命名（BJC_PDRC.mdf和BJC_PDRC.ldf）</li><li>附加数据库为生产库</li></ol><ul><li>分离数据库</li></ul><p><img src="https://coderdream.github.io/snapshot/sqlserverbackup/sqlserverbackup_0001.png"></p><ul><li>分离提示</li></ul><p><img src="https://coderdream.github.io/snapshot/sqlserverbackup/sqlserverbackup_0002.png"></p><ul><li>分离前点击【脚本】按钮</li></ul><p><img src="https://coderdream.github.io/snapshot/sqlserverbackup/sqlserverbackup_0003.png"></p><ul><li>复制并重命名数据库文件</li></ul><p><img src="https://coderdream.github.io/snapshot/sqlserverbackup/sqlserverbackup_0008.png"></p><ul><li>准备附加数据库</li></ul><p><img src="https://coderdream.github.io/snapshot/sqlserverbackup/sqlserverbackup_0004.png"></p><ul><li>选择准备好的数据库文件</li></ul><p><img src="https://coderdream.github.io/snapshot/sqlserverbackup/sqlserverbackup_0005.png"></p><ul><li>设置正确的数据库库名称</li></ul><p><img src="https://coderdream.github.io/snapshot/sqlserverbackup/sqlserverbackup_0006.png"></p><ul><li>刷新就可以看到新的数据库了</li></ul><p><img src="https://coderdream.github.io/snapshot/sqlserverbackup/sqlserverbackup_0007.png"></p><h2 id="Notepad-及实用插件安装"><a href="#Notepad-及实用插件安装" class="headerlink" title="Notepad++及实用插件安装"></a><span id= "20184304">Notepad++及实用插件安装</span></h2><p>参考文章：<a href="https://blog.csdn.net/z45689/article/details/57493338">Notepad++及实用插件安装</a></p><p>插件管理器下载：<a href="https://github.com/bruderstein/nppPluginManager/releases">nppPluginManager</a></p><p>解压后放入安装目录中。</p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018年第35周</title>
    <link href="/2018/08/27/2018Week35/"/>
    <url>/2018/08/27/2018Week35/</url>
    
    <content type="html"><![CDATA[<h2 id="2018年第35周（2018-08-27-2018-09-02）"><a href="#2018年第35周（2018-08-27-2018-09-02）" class="headerlink" title="2018年第35周（2018&#x2F;08&#x2F;27~2018&#x2F;09&#x2F;02）"></a>2018年第35周（2018&#x2F;08&#x2F;27~2018&#x2F;09&#x2F;02）</h2><h2 id="CentOS-7上安装-MongoDB数据库-4-1-1最新版"><a href="#CentOS-7上安装-MongoDB数据库-4-1-1最新版" class="headerlink" title="CentOS 7上安装 MongoDB数据库 4.1.1最新版"></a><span id= "20183501">CentOS 7上安装 MongoDB数据库 4.1.1最新版</span></h2><p>下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget http://downloads.mongodb.org/linux/mongodb-linux-x86_64-4.1.1.tgz</span><br></code></pre></td></tr></table></figure><p>查进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ps aux | grep mongod</span><br></code></pre></td></tr></table></figure><p>杀进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">kill</span> -9 XXXX</span><br></code></pre></td></tr></table></figure><h2 id="CentOS查看和修改PATH环境变量的方法"><a href="#CentOS查看和修改PATH环境变量的方法" class="headerlink" title="CentOS查看和修改PATH环境变量的方法"></a><span id= "20183502">CentOS查看和修改PATH环境变量的方法</span></h2><p>查看PATH：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span></span><br></code></pre></td></tr></table></figure><p>以添加mongodb server为列</p><h3 id="修改方法一："><a href="#修改方法一：" class="headerlink" title="修改方法一："></a>修改方法一：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">export</span> PATH=/usr/local/mongodb/bin:<span class="hljs-variable">$PATH</span></span><br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;配置完后可以通过echo $PATH查看配置结果。<br>生效方法：立即生效<br>有效期限：临时改变，只能在当前的终端窗口中有效，当前窗口关闭后就会恢复原有的path配置<br>用户局限：仅对当前用户</p><h3 id="修改方法二："><a href="#修改方法二：" class="headerlink" title="修改方法二："></a>修改方法二：</h3><p>通过修改.bashrc文件:<br>vim ~&#x2F;.bashrc<br>&#x2F;&#x2F;在最后一行添上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">export</span> PATH=/usr/local/mongodb/bin:<span class="hljs-variable">$PATH</span></span><br></code></pre></td></tr></table></figure><p>生效方法：（有以下两种）<br>1、关闭当前终端窗口，重新打开一个新终端窗口就能生效<br>2、输入“source ~&#x2F;.bashrc”命令，立即生效<br>有效期限：永久有效<br>用户局限：仅对当前用户</p><h3 id="修改方法三"><a href="#修改方法三" class="headerlink" title="修改方法三:"></a>修改方法三:</h3><p>通过修改profile文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim /etc/profile</span><br></code></pre></td></tr></table></figure><p>&#x2F;export PATH &#x2F;&#x2F;找到设置PATH的行，添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">export</span> PATH=/usr/local/mongodb/bin:<span class="hljs-variable">$PATH</span></span><br></code></pre></td></tr></table></figure><p>生效方法：系统重启<br>有效期限：永久有效<br>用户局限：对所有用户</p><h3 id="修改方法四"><a href="#修改方法四" class="headerlink" title="修改方法四:"></a>修改方法四:</h3><p>通过修改environment文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim /etc/environment</span><br></code></pre></td></tr></table></figure><p>在PATH&#x3D;”&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;local&#x2F;games”中加入“:&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">PATH=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/mongodb/bin<br></code></pre></td></tr></table></figure><p>生效方法：系统重启<br>有效期限：永久有效<br>用户局限：对所有用户</p><h2 id="CentOS下手动安装gcc最佳实践"><a href="#CentOS下手动安装gcc最佳实践" class="headerlink" title="CentOS下手动安装gcc最佳实践"></a><span id= "20183503">CentOS下手动安装gcc最佳实践</span></h2><h3 id="1-获取安装包并解压"><a href="#1-获取安装包并解压" class="headerlink" title="1 获取安装包并解压"></a>1 获取安装包并解压</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://ftp.gnu.org/gnu/gcc/gcc-8.2.0/gcc-8.2.0.tar.gz<br>tar -jxvf gcc-8.2.0.tar.gz<br></code></pre></td></tr></table></figure><h3 id="2-下载供编译需求的依赖项"><a href="#2-下载供编译需求的依赖项" class="headerlink" title="2 下载供编译需求的依赖项"></a>2 下载供编译需求的依赖项</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd gcc-8.2.0<br>./contrib/download_prerequisites<br></code></pre></td></tr></table></figure><h3 id="3-建立一个目录供编译出的文件存放"><a href="#3-建立一个目录供编译出的文件存放" class="headerlink" title="3 建立一个目录供编译出的文件存放"></a>3 建立一个目录供编译出的文件存放</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir gcc-build-8.2.0<br>cd gcc-build-8.2.0<br></code></pre></td></tr></table></figure><h3 id="4-生成Makefile文件"><a href="#4-生成Makefile文件" class="headerlink" title="4 生成Makefile文件"></a>4 生成Makefile文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">../configure -enable-checking=release -enable-languages=c,c++ -disable-multilib<br></code></pre></td></tr></table></figure><h3 id="5-编译（注意：此步骤非常耗时）"><a href="#5-编译（注意：此步骤非常耗时）" class="headerlink" title="5 编译（注意：此步骤非常耗时）"></a>5 编译（注意：此步骤非常耗时）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make -j4<br></code></pre></td></tr></table></figure><p>-j4选项是make对多核处理器的优化，如果不成功请使用 make</p><h3 id="6-安装"><a href="#6-安装" class="headerlink" title="6 安装"></a>6 安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo make install<br></code></pre></td></tr></table></figure><h3 id="7-验证安装"><a href="#7-验证安装" class="headerlink" title="7 验证安装"></a>7 验证安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc -v<br></code></pre></td></tr></table></figure><h2 id="CentOS下手动安装nodejs最佳实践"><a href="#CentOS下手动安装nodejs最佳实践" class="headerlink" title="CentOS下手动安装nodejs最佳实践"></a><span id= "20183504">CentOS下手动安装nodejs最佳实践</span></h2><p>On RHEL, CentOS or Fedora, for Node.js v8 LTS:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -<br></code></pre></td></tr></table></figure><p>Alternatively for Node.js 10:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -<br></code></pre></td></tr></table></figure><p>Then install:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum -y install nodejs<br></code></pre></td></tr></table></figure><p>Optional: install build tools</p><p>To compile and install native addons from npm you may also need to install build tools:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install gcc-c++ make<br><span class="hljs-meta prompt_"># </span><span class="language-bash">or: sudo yum groupinstall <span class="hljs-string">&#x27;Development Tools&#x27;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018年第34周</title>
    <link href="/2018/08/20/2018Week34/"/>
    <url>/2018/08/20/2018Week34/</url>
    
    <content type="html"><![CDATA[<h2 id="2018年第34周（2018-08-20-2018-08-26）"><a href="#2018年第34周（2018-08-20-2018-08-26）" class="headerlink" title="2018年第34周（2018&#x2F;08&#x2F;20~2018&#x2F;08&#x2F;26）"></a>2018年第34周（2018&#x2F;08&#x2F;20~2018&#x2F;08&#x2F;26）</h2><h2 id="nrm-–-NPM-registry-管理工具"><a href="#nrm-–-NPM-registry-管理工具" class="headerlink" title="nrm – NPM registry 管理工具"></a><span id= "20183401">nrm – NPM registry 管理工具</span></h2><p>开发的npm registry 管理工具 nrm,  能够查看和切换当前使用的registry, 最近NPM经常 down 掉, 这个还是很有用的哈哈</p><p>Install</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install -g nrm</span><br></code></pre></td></tr></table></figure><p>Example</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nrm <span class="hljs-built_in">ls</span></span><br><br>* npm ---- https://registry.npmjs.org/<br>  cnpm --- http://r.cnpmjs.org/<br>  eu ----- http://registry.npmjs.eu/<br>  au ----- http://registry.npmjs.org.au/<br>  sl ----- http://npm.strongloop.com/<br>  nj ----- https://registry.nodejitsu.com/<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nrm use cnpm //switch registry to cnpm</span><br>    Registry has been set to: http://r.cnpmjs.org/<br></code></pre></td></tr></table></figure><p>cmd</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">nrm help // show help<br>nrm list // show all registries<br>nrm use cnpm // switch to cnpm<br>nrm home // go to a registry home page<br></code></pre></td></tr></table></figure><p>Registries</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm<br>cnpm<br>strongloop<br>european<br>australia<br>nodejitsu<br></code></pre></td></tr></table></figure><h2 id="怎么样给-Linux-文件添加可执行权限"><a href="#怎么样给-Linux-文件添加可执行权限" class="headerlink" title="怎么样给 Linux 文件添加可执行权限"></a><span id= "20183402">怎么样给 Linux 文件添加可执行权限</span></h2><p>接着我们添加可执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod 777 test.sh<br></code></pre></td></tr></table></figure><p>设置完成之后在来看看文件属性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ll<br></code></pre></td></tr></table></figure><h2 id="CentOS7下安装Google-Chrome浏览器（最后更新：20181218）"><a href="#CentOS7下安装Google-Chrome浏览器（最后更新：20181218）" class="headerlink" title="CentOS7下安装Google Chrome浏览器（最后更新：20181218）"></a><span id= "20183403">CentOS7下安装Google Chrome浏览器（最后更新：20181218）</span></h2><ol><li><p>从google官方网站下载google chrome安装包</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm<br></code></pre></td></tr></table></figure></li><li><p>安装依赖包：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install pax*<br>yum install redhat-lsb*<br>yum -y install libXss*<br>yum install libXScrnSaver*<br>yum install epel-release<br>yum install libappindicator-gtk3<br>yum install -y liberation-fonts<br></code></pre></td></tr></table></figure></li><li><p>使用root权限进行安装</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -ivh google-chrome-stable_current_x86_64.rpm<br>warning: google-chrome-stable_current_x86_64.rpm: Header V4 DSA/SHA1 Signature, key ID 7fac5991: NOKEY<br>Preparing...                          ################################# [100%]<br>Updating / installing...<br>   1:google-chrome-stable-68.0.3440.10################################# [100%]<br>Redirecting to /bin/systemctl start atd.service<br></code></pre></td></tr></table></figure></li></ol><p>至此，Google Chrome安装成功，此时应用程序(Application-&gt;Internet)中已经有Google Chrome快捷方式了！</p><h3 id="如果上面的快捷方式失败，通过下面的方式解决："><a href="#如果上面的快捷方式失败，通过下面的方式解决：" class="headerlink" title="如果上面的快捷方式失败，通过下面的方式解决："></a>如果上面的快捷方式失败，通过下面的方式解决：</h3><ul><li><p>通过桌面顶部菜单依次选择【Places】-》【Computer】，然后依次进入&#x2F;usr&#x2F;share&#x2F;applications&#x2F;文件夹，找到Chrome图标，右键，属性，启动方式后面加上–no-sandbox，双击此图标即可启动Chrome。</p></li><li><p>如果需要创建Chrome桌面快捷方式，则把这个快捷方式复制到桌面即可。</p></li></ul><p>参考文档：<a href="https://blog.csdn.net/tiandaochouqin99/article/details/79643248">解决centos 7系统root用户下Chrome无法启动问题</a></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NPM</tag>
      
      <tag>Linux</tag>
      
      <tag>Chrome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018年第31周</title>
    <link href="/2018/07/30/2018Week31/"/>
    <url>/2018/07/30/2018Week31/</url>
    
    <content type="html"><![CDATA[<h2 id="2018年第31周（2018-07-30-2018-08-05）"><a href="#2018年第31周（2018-07-30-2018-08-05）" class="headerlink" title="2018年第31周（2018&#x2F;07&#x2F;30~2018&#x2F;08&#x2F;05）"></a>2018年第31周（2018&#x2F;07&#x2F;30~2018&#x2F;08&#x2F;05）</h2><h2 id="CentOS7下npm的安装路径"><a href="#CentOS7下npm的安装路径" class="headerlink" title="CentOS7下npm的安装路径"></a><span id= "20183101">CentOS7下npm的安装路径</span></h2><p>CentOS7下npm的安装路径，在该路径下安装cheerio不会报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost node_modules]<span class="hljs-comment"># npm install cheerio</span><br>npm notice created a lockfile as package-lock.json. You should commit this file.<br>+ cheerio@1.0.0-rc.2<br>added 15 packages from 32 contributors <span class="hljs-keyword">in</span> 4.476s<br>[root@localhost node_modules]<span class="hljs-comment"># pwd</span><br>/usr/local/lib/node_modules/npm/node_modules<br><br></code></pre></td></tr></table></figure><p><span id= "20183102">vmware怎样隐藏到托盘</span></p><p>看到这个答案也是找了好久，也呵呵了，不知道是回答者不认字呢还是点赞者是水军。首先，VMware Authorization Service服务是默认开启的，没有这个服务，虚拟机是会崩溃的。其次，Vmwear玩了这么久，还没见过那个版本“编辑”下面有参数选项的，都是“首选项”，更不知道“在关闭后在后台运行电源已打开的虚拟机”这句话哪里来的，我只见过“Workstation关闭后保持虚拟机运行“</p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第47周</title>
    <link href="/2017/11/20/2017Week47/"/>
    <url>/2017/11/20/2017Week47/</url>
    
    <content type="html"><![CDATA[<h2 id="2017年第47周（2017-11-20-2017-11-26）"><a href="#2017年第47周（2017-11-20-2017-11-26）" class="headerlink" title="2017年第47周（2017&#x2F;11&#x2F;20~2017&#x2F;11&#x2F;26）"></a>2017年第47周（2017&#x2F;11&#x2F;20~2017&#x2F;11&#x2F;26）</h2><h2 id="人力看板（高级查询）"><a href="#人力看板（高级查询）" class="headerlink" title="人力看板（高级查询）"></a><span id= "20174701">人力看板（高级查询）</span></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br><span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span><br>PDRC_V_Profile<br><span class="hljs-keyword">WHERE</span><br>ProfileId <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span><br>ProfileId<br><span class="hljs-keyword">FROM</span><br>PDRC_V_Profile<br><span class="hljs-keyword">WHERE</span><br>DomainKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DM01&#x27;</span><br><span class="hljs-keyword">AND</span> SkillKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SK01&#x27;</span><br><span class="hljs-keyword">AND</span> WorkPlaceKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CC02&#x27;</span><br><span class="hljs-keyword">AND</span> stateKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;E3566&#x27;</span><br>);<br></code></pre></td></tr></table></figure><p>ProfileMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ProfileViewResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.billjc.model.ProfileViewModel&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;WorkPlaceName&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;workPlaceName&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;IsCurrentWorkPlace&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isCurrentWorkPlace&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;SkillName&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skillName&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;DomainName&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;domainName&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ServiceYear&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;serviceYear&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ProfileId&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;profileId&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;WorkId&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;workId&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;UserName&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getProfileViewListByPramas&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ProfileViewResultMap&quot;</span>&gt;</span><br>SELECT<br>WorkPlaceName,<br>IsCurrentWorkPlace,<br>StateName,<br>SkillName,<br>DomainName,<br>ServiceYear,<br>ProfileId,<br>WorkID,<br>UserName<br>FROM<br>PDRC_V_Profile<br>WHERE<br>ProfileId IN (<br>SELECT DISTINCT<br>ProfileId<br>FROM<br>PDRC_V_Profile<br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;workPlaceKey != null and workPlaceKey != &#x27;&#x27;&quot;</span>&gt;</span><br>and workPlaceKey = &#x27;$&#123;workPlaceKey&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;skillKey != null and skillKey != &#x27;&#x27;&quot;</span>&gt;</span><br>and skillKey = &#x27;$&#123;skillKey&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;domainKey != null and domainKey != &#x27;&#x27;&quot;</span>&gt;</span><br>and domainKey = &#x27;$&#123;domainKey&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;serviceYear != null and serviceYear != &#x27;&#x27;&quot;</span>&gt;</span><br>and serviceYear &gt;= $&#123;serviceYear&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;stateKey != null and stateKey != &#x27;&#x27;&quot;</span>&gt;</span><br>and stateKey = &#x27;$&#123;stateKey&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>);<br><span class="hljs-comment">&lt;!-- &lt;if test=&quot;sortField != null&quot;&gt; ORDER by $&#123;sortField&#125; $&#123;sortOrder&#125; &lt;/if&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>视图：PDRC_V_Profile</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>pwp.WorkPlaceKey,<br>d1.[<span class="hljs-keyword">value</span>] <span class="hljs-keyword">AS</span> WorkPlaceName,<br>pwp.IsCurrentWorkPlace,<br>p.StateKey,<br>d2.[<span class="hljs-keyword">value</span>] <span class="hljs-keyword">AS</span> StateName,<br>ps.SkillKey SkillKey,<br>d3.[<span class="hljs-keyword">value</span>] <span class="hljs-keyword">AS</span> SkillName,<br>pd.DomainKey DomainKey,<br>d4.[<span class="hljs-keyword">value</span>] <span class="hljs-keyword">AS</span> DomainName,<br>pb.ServiceYear,<br>p.ID ProfileId,<br>p.WorkID WorkID,<br>u.username UserName<br><span class="hljs-keyword">FROM</span><br>PDRC_Profile p<br><span class="hljs-keyword">JOIN</span> PDRC_ProfileBaseInfo pb <span class="hljs-keyword">ON</span> p.WorkID <span class="hljs-operator">=</span> pb.WorkID<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_ProfileSkill ps <span class="hljs-keyword">ON</span> p.ID <span class="hljs-operator">=</span> ps.ProfileId<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_ProfileDomain pd <span class="hljs-keyword">ON</span> p.id <span class="hljs-operator">=</span> pd.ProfileId<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_ProfileWorkPlace pwp <span class="hljs-keyword">ON</span> p.id <span class="hljs-operator">=</span> pwp.ProfileId<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_User u <span class="hljs-keyword">ON</span> u.WorkId <span class="hljs-operator">=</span> p.WorkID<br><span class="hljs-keyword">JOIN</span> PDRC_Dictionary d2 <span class="hljs-keyword">ON</span> d2.KeyName <span class="hljs-operator">=</span> p.StateKey<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_Dictionary d1 <span class="hljs-keyword">ON</span> d1.KeyName <span class="hljs-operator">=</span> pwp.WorkPlaceKey<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_Dictionary d3 <span class="hljs-keyword">ON</span> d3.KeyName <span class="hljs-operator">=</span> SkillKey<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_Dictionary d4 <span class="hljs-keyword">ON</span> d4.KeyName <span class="hljs-operator">=</span> DomainKey<br></code></pre></td></tr></table></figure><h2 id="任务看板（高级查询）"><a href="#任务看板（高级查询）" class="headerlink" title="任务看板（高级查询）"></a><span id= "20174702">任务看板（高级查询）</span></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>TaskItemId,<br>TaskItemDescription,<br>SkillName,<br>DomainName,<br>ServiceYear,<br>BSM,<br>WorkPlaceName,<br>PlanStartDate,<br>PlanEndDate<br><span class="hljs-keyword">FROM</span><br>PDRC_V_TaskItem<br><span class="hljs-keyword">WHERE</span><br>TaskItemId <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span><br>TaskItemId<br><span class="hljs-keyword">FROM</span><br>PDRC_V_TaskItem<br><span class="hljs-keyword">WHERE</span><br>SkillKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SK01&#x27;</span><br><span class="hljs-keyword">AND</span> DomainKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DM01&#x27;</span><br><span class="hljs-keyword">AND</span> WorkPlace <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CC02&#x27;</span><br>);<br><br></code></pre></td></tr></table></figure><p>TaskItemMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TaskItemViewModelResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.billjc.model.TaskItemViewModel&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;TaskItemId&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;taskItemId&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;TaskItemDescription&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;taskItemDescription&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;SkillName&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skillName&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;DomainName&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;domainName&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ServiceYear&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;serviceYear&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;WorkPlaceName&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;workPlaceName&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;PlanStartDate&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;planStartDate&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;PlanEndDate&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;planEndDate&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTaskItemViewModelListByPramas&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TaskItemViewModelResultMap&quot;</span>&gt;</span><br>SELECT<br>TaskItemId,<br>TaskItemDescription,<br>SkillName,<br>DomainName,<br>ServiceYear,<br>BSM,<br>WorkPlaceName,<br>PlanStartDate,<br>PlanEndDate<br>FROM<br>PDRC_V_TaskItem<br>WHERE<br>TaskItemId IN (<br>SELECT DISTINCT<br>TaskItemId<br>FROM<br>PDRC_V_TaskItem<br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;workPlace != null and workPlace != &#x27;&#x27;&quot;</span>&gt;</span><br>and workPlace = &#x27;$&#123;workPlace&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;skillKey != null and skillKey != &#x27;&#x27;&quot;</span>&gt;</span><br>and skillKey = &#x27;$&#123;skillKey&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;domainKey != null and domainKey != &#x27;&#x27;&quot;</span>&gt;</span><br>and domainKey = &#x27;$&#123;domainKey&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;serviceYear != null and serviceYear != &#x27;&#x27;&quot;</span>&gt;</span><br>and serviceYear &gt;= $&#123;serviceYear&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;bsm != null and bsm != &#x27;&#x27;&quot;</span>&gt;</span><br>and bsm &gt;= $&#123;bsm&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;planStartDate != null and planStartDate != &#x27;&#x27;&quot;</span>&gt;</span><br>and planStartDate <span class="hljs-symbol">&amp;gt;</span>= &#x27;$&#123;planStartDate&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;planEndDate != null and planEndDate != &#x27;&#x27;&quot;</span>&gt;</span><br>and planEndDate <span class="hljs-symbol">&amp;lt;</span>= &#x27;$&#123;planEndDate&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>and TaskState=&#x27;$&#123;@com.billjc.util.Constants@TASK_STATE_OPEN&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>)<br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sortField != null&quot;</span>&gt;</span><br>ORDER by $&#123;sortField&#125; $&#123;sortOrder&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>视图：PDRC_V_TaskItem</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">DISTINCT</span> ti.Id <span class="hljs-keyword">as</span> TaskItemId,<br>ti.TaskItemDescription,<br>tis.SkillKey,<br>d1.[<span class="hljs-keyword">value</span>] <span class="hljs-keyword">as</span> SkillName,<br>tid.DomainKey,<br>d2.[<span class="hljs-keyword">value</span>] <span class="hljs-keyword">as</span> DomainName,<br>ti.ServiceYear,<br>ti.BSM,<br>ti.WorkPlace,<br>d3.[<span class="hljs-keyword">value</span>] <span class="hljs-keyword">as</span> WorkPlaceName,<br>ti.PlanStartDate,<br>ti.PlanEndDate,<br>t.TaskState<br><span class="hljs-keyword">FROM</span><br>PDRC_Task t<br><span class="hljs-keyword">JOIN</span> PDRC_TaskItem ti <span class="hljs-keyword">ON</span> t.ID <span class="hljs-operator">=</span> ti.TaskId<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_TaskItemSkill tis <span class="hljs-keyword">ON</span> ti.id <span class="hljs-operator">=</span> tis.TaskItemId<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_TaskItemDomain tid <span class="hljs-keyword">ON</span> ti.id <span class="hljs-operator">=</span> tid.TaskItemId<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_Dictionary d1 <span class="hljs-keyword">ON</span> d1.KeyName <span class="hljs-operator">=</span> SkillKey<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_Dictionary d2 <span class="hljs-keyword">ON</span> d2.KeyName <span class="hljs-operator">=</span> DomainKey<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_Dictionary d3 <span class="hljs-keyword">ON</span> d3.KeyName <span class="hljs-operator">=</span> ti.WorkPlace<br></code></pre></td></tr></table></figure><h2 id="JavaScript获取当前根目录"><a href="#JavaScript获取当前根目录" class="headerlink" title="JavaScript获取当前根目录"></a><span id= "20174703">JavaScript获取当前根目录</span></h2><p>主要用到Location 对象，包含有关当前 URL 的信息,是 Window 对象的一个部分，可通过 window.location 属性来访问。</p><p>方法一 (window.document.location.href&#x2F;window.document.location.pathname) ————转自网络</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getRootPath_web</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-comment">//获取当前网址，如： http://localhost:8083/uimcardprj/share/meun.jsp</span><br>            <span class="hljs-keyword">var</span> curWwwPath = window.document.location.href;<br>            <span class="hljs-comment">//获取主机地址之后的目录，如： uimcardprj/share/meun.jsp</span><br>            <span class="hljs-keyword">var</span> pathName = window.document.location.pathname;<br>            <span class="hljs-keyword">var</span> pos = curWwwPath.<span class="hljs-built_in">indexOf</span>(pathName);<br>            <span class="hljs-comment">//获取主机地址，如： http://localhost:8083</span><br>            <span class="hljs-keyword">var</span> localhostPaht = curWwwPath.substring(<span class="hljs-number">0</span>, pos);<br>            <span class="hljs-comment">//获取带&quot;/&quot;的项目名，如：/uimcardprj</span><br>            <span class="hljs-keyword">var</span> projectName = pathName.substring(<span class="hljs-number">0</span>, pathName.substr(<span class="hljs-number">1</span>).<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> (localhostPaht + projectName);<br>        &#125;<br></code></pre></td></tr></table></figure><p>方法二(window.location.pathname&#x2F;window.location.protocol&#x2F;window.location.host)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> getRootPath_dc() &#123;<br>            var pathName = <span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.pathname.substring(<span class="hljs-number">1</span>);<br>            var webName = pathName == <span class="hljs-string">&#x27;&#x27;</span> ? <span class="hljs-string">&#x27;&#x27;</span> : pathName.substring(<span class="hljs-number">0</span>, pathName.indexOf(<span class="hljs-string">&#x27;/&#x27;</span>));<br>            <span class="hljs-keyword">if</span> (webName == &quot;&quot;) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.protocol + <span class="hljs-string">&#x27;//&#x27;</span> + <span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.host;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.protocol + <span class="hljs-string">&#x27;//&#x27;</span> + <span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.host + <span class="hljs-string">&#x27;/&#x27;</span> + webName;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>注：</p><p> 1、document默示的是一个文档对象，window默示的是一个窗口对象，一个窗口下可以有多个文档对象。<br>　　所以一个窗口下只有一个window.location.href，然则可能有多个document.URL、document.location.href————转自网络</p><p> 2、window.location.href和document.location.href可以被赋值，然后跳转到其它页面，document.URL只能读不克不及写————转自网络</p><p> 3、Location 对象详细信息参考w3school <a href="http://www.w3school.com.cn/jsref/dom_obj_location.asp">http://www.w3school.com.cn/jsref/dom_obj_location.asp</a></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第46周</title>
    <link href="/2017/11/13/2017Week46/"/>
    <url>/2017/11/13/2017Week46/</url>
    
    <content type="html"><![CDATA[<h2 id="2017年第46周（2017-11-13-2017-11-19）"><a href="#2017年第46周（2017-11-13-2017-11-19）" class="headerlink" title="2017年第46周（2017&#x2F;11&#x2F;13~2017&#x2F;11&#x2F;19）"></a>2017年第46周（2017&#x2F;11&#x2F;13~2017&#x2F;11&#x2F;19）</h2><h2 id="SpringMVC访问不到默认页的问题"><a href="#SpringMVC访问不到默认页的问题" class="headerlink" title="SpringMVC访问不到默认页的问题"></a><span id= "20174601">SpringMVC访问不到默认页的问题</span></h2><p>在web.xml中配置了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.html<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也访问不到静态资源。</p><p>原来是spirngmvc框架原因。</p><p>在springmvc.xml配置文件中加上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>就能访问到默认页了。</p><ul><li>参考：<br><a href="https://www.cnblogs.com/valarchie/p/5525895.html">https://www.cnblogs.com/valarchie/p/5525895.html</a></li></ul><h2 id="将外部jar打入本地maven仓库"><a href="#将外部jar打入本地maven仓库" class="headerlink" title="将外部jar打入本地maven仓库"></a><span id= "20174602">将外部jar打入本地maven仓库</span></h2><p>cmd 进入jar包所在路径，执行以下命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mvn install:install-file <span class="hljs-attribute">-Dfile</span>=wx-tools-1.0.1.jar <span class="hljs-attribute">-DgroupId</span>=com.github <span class="hljs-attribute">-DartifactId</span>=wx-tools <span class="hljs-attribute">-Dversion</span>=1.0.1 <span class="hljs-attribute">-Dpackaging</span>=jar<br></code></pre></td></tr></table></figure><ul><li>参考：<br><a href="http://blog.csdn.net/pltuyuhong/article/details/50954017">http://blog.csdn.net/pltuyuhong/article/details/50954017</a></li></ul><h2 id="maven项目使用mybatis-generator自动生成代码"><a href="#maven项目使用mybatis-generator自动生成代码" class="headerlink" title="maven项目使用mybatis-generator自动生成代码"></a><span id= "20174603">maven项目使用mybatis-generator自动生成代码</span></h2><p><img src="http://images2015.cnblogs.com/blog/118133/201605/118133-20160523091847741-366651867.jpg"></p><ul><li><p>输入命令：  </p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">mybatis-generator:<span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure></li><li><p>参考：<br><a href="https://www.cnblogs.com/gosky/p/5518748.html">https://www.cnblogs.com/gosky/p/5518748.html</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
      <tag>Maven</tag>
      
      <tag>mybatis-generator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第43周</title>
    <link href="/2017/10/23/2017Week43/"/>
    <url>/2017/10/23/2017Week43/</url>
    
    <content type="html"><![CDATA[<h2 id="2017年第43周（2017-10-23-2017-10-29）"><a href="#2017年第43周（2017-10-23-2017-10-29）" class="headerlink" title="2017年第43周（2017&#x2F;10&#x2F;23~2017&#x2F;10&#x2F;29）"></a>2017年第43周（2017&#x2F;10&#x2F;23~2017&#x2F;10&#x2F;29）</h2><h2 id="Python3没有queue模块"><a href="#Python3没有queue模块" class="headerlink" title="Python3没有queue模块"></a><span id= "20174301">Python3没有queue模块</span></h2><p>python3没有queue模块吗</p><p>有的 直接使用就可以了</p><pre><code class="hljs">import queuelr = queue.Queue()</code></pre><h2 id="学习内置filter函数"><a href="#学习内置filter函数" class="headerlink" title="学习内置filter函数"></a><span id= "20174302">学习内置filter函数</span></h2><p>学习内置filter函数：</p><pre><code class="hljs">a=[1,2,3,4,5,6,7]b=filter(lambda x:x&gt;5, a)print(b)</code></pre><p>为什么输出不是6,7？？<br>输出结果为&lt;filter object at 0x02CCCC10&gt;<br>为了实现预想的结果，我该怎么编写程序呢？<br>感谢~</p><p>用list转成列表即可。</p><pre><code class="hljs">filter(func,data) #python 2.x</code></pre><p>is equivalent to:</p><pre><code class="hljs">list(filter(func,data)) #python 3.x</code></pre><p>Python filter() 函数</p><pre><code class="hljs"># http://www.runoob.com/python/python-func-filter.html# Python filter() 函数# Python 内置函数 Python 内置函数# 描述# filter() 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。# 该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。# 语法# 以下是 filter() 方法的语法:# filter(function, iterable)# 参数# function -- 判断函数。# iterable -- 可迭代对象。# 返回值# 返回列表。# 实例# 以下展示了使用 filter 函数的实例：</code></pre><p>源代码：</p><pre><code class="hljs">#!/usr/bin/python# -*- coding: UTF-8 -*- # 过滤出列表中的所有奇数：def is_odd(n):    return n % 2 == 1# 过滤出1~100中平方根是整数的数：import math    def is_sqr(x):    return math.sqrt(x) % 1 == 0def filter_func():    newlist = list(filter(is_odd, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))    print(newlist)    # 输出结果 ：    # [1, 3, 5, 7, 9]    newlist = list(filter(is_sqr, range(1, 101)))    print(newlist)    # 输出结果 ：    # [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]    if __name__ == &#39;__main__&#39;:    filter_func()</code></pre><h2 id="Python3-4中filter函数，map函数和reduce函数"><a href="#Python3-4中filter函数，map函数和reduce函数" class="headerlink" title="Python3.4中filter函数，map函数和reduce函数"></a><span id= "20174303">Python3.4中filter函数，map函数和reduce函数</span></h2><p>2015-03-08 22:28 29357人阅读 评论(0) 收藏 举报<br><a href="http://blog.csdn.net/damotiansheng/article/details/44139111">http://blog.csdn.net/damotiansheng/article/details/44139111</a></p><h3 id="filter函数："><a href="#filter函数：" class="headerlink" title="filter函数：###"></a>filter函数：###</h3><p>filter()为已知的序列的每个元素调用给定的布尔函数，调用中，返回值为非零的元素将被添加至一个列表中</p><pre><code class="hljs">&gt;&gt;&gt; def f1(x):  if x &gt; 20:  return True  else:  return False  &gt;&gt;&gt; l1 = [ 1, 2, 3, 42, 67, 16 ]  &gt;&gt;&gt; filter( f1, l1)  &lt;filter object at 0x01F594F0&gt;  &gt;&gt;&gt; l2 = filter( f1, l1 )  &gt;&gt;&gt; print(l2)  &lt;filter object at 0x01FA30D0&gt;  &gt;&gt;&gt; l2.__next__  &lt;method-wrapper &#39;__next__&#39; of filter object at 0x01FA30D0&gt;  &gt;&gt;&gt; l2.__next__()  42  &gt;&gt;&gt; l2.__next__()  67  &gt;&gt;&gt; l2.__next__()  Traceback (most recent call last):    File &quot;&lt;pyshell#14&gt;&quot;, line 1, in &lt;module&gt;      l2.__next__()  StopIteration  </code></pre><h3 id="map函数："><a href="#map函数：" class="headerlink" title="map函数："></a>map函数：</h3><p>map()将函数调用映射到每个序列的对应元素上并返回一个含有所有返回值的列表</p><pre><code class="hljs">&gt;&gt;&gt; def f1( x, y ):  return (x,y)    &gt;&gt;&gt; l1 = [ 0, 1, 2, 3, 4, 5, 6 ]  &gt;&gt;&gt; l2 = [ &#39;Sun&#39;, &#39;M&#39;, &#39;T&#39;, &#39;W&#39;, &#39;T&#39;, &#39;F&#39;, &#39;S&#39; ]   &gt;&gt;&gt; l3 = map( f1, l1, l2 )  &gt;&gt;&gt; print(list(l3))  [(0, &#39;Sun&#39;), (1, &#39;M&#39;), (2, &#39;T&#39;), (3, &#39;W&#39;), (4, &#39;T&#39;), (5, &#39;F&#39;), (6, &#39;S&#39;)]    &gt;&gt;&gt; print( list(map(f2, l1) ))  [0, 2, 4, 6, 8, 10, 12]    &gt;&gt;&gt; print( list(map(f2, l2) ) )  [&#39;SunSun&#39;, &#39;MM&#39;, &#39;TT&#39;, &#39;WW&#39;, &#39;TT&#39;, &#39;FF&#39;, &#39;SS&#39;]    &gt;&gt;&gt; def f3( x, y ):  return x*2, y*2    &gt;&gt;&gt; print( list(map(f3, l1, l2) ))  [(0, &#39;SunSun&#39;), (2, &#39;MM&#39;), (4, &#39;TT&#39;), (6, &#39;WW&#39;), (8, &#39;TT&#39;), (10, &#39;FF&#39;), (12, &#39;SS&#39;)]  </code></pre><h3 id="reduce函数："><a href="#reduce函数：" class="headerlink" title="reduce函数：###"></a>reduce函数：###</h3><p>在Python 3里,reduce()函数已经被从全局名字空间里移除了,它现在被放置在fucntools模块里 用的话要 先引<br>入：</p><pre><code class="hljs">&gt;&gt;&gt; from functools import reduce &gt;&gt;&gt; print(l1)[0, 1, 2, 3, 4, 5, 6]&gt;&gt;&gt; reduce( f4, l1 )21</code></pre><p>三个函数比较类似，都是应用于序列的内置函数。常见的序列包括list、tuple、str。</p><p>1.map函数</p><p>map函数会根据提供的函数对指定序列做映射。</p><p>map函数的定义：</p><pre><code class="hljs">map(function, sequence[, sequence, ...]) -&gt; list</code></pre><p>通过定义可以看到，这个函数的第一个参数是一个函数，剩下的参数是一个或多个序列，返回值是一个集合。<br>function可以理解为是一个一对一或多对一函数，map的作用是以参数序列中的每一个元素调用function函数，返回包含每次function函数返回值的list。</p><p>比如要对一个序列中的每个元素进行平方运算：</p><pre><code class="hljs">map(lambda x: x ** 2, [1, 2, 3, 4, 5])</code></pre><p>返回结果为：</p><pre><code class="hljs">[1, 4, 9, 16, 25]</code></pre><p>在参数存在多个序列时，会依次以每个序列中相同位置的元素做参数调用function函数。</p><p>比如要对两个序列中的元素依次求和。</p><pre><code class="hljs">map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10])</code></pre><p>map返回的list中第一个元素为，参数序列1的第一个元素加参数序列2中的第一个元素(1 + 2)，<br>list中的第二个元素为，参数序列1中的第二个元素加参数序列2中的第二个元素(3 + 4)，<br>依次类推，最后的返回结果为：</p><pre><code class="hljs">[3, 7, 11, 15, 19]</code></pre><p>要注意function函数的参数数量，要和map中提供的集合数量相匹配。<br>如果集合长度不相等，会以最小长度对所有集合进行截取。<br>当函数为None时，操作和zip相似：</p><pre><code class="hljs">map(None, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10])</code></pre><p>返回结果为：</p><pre><code class="hljs">[(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]</code></pre><p>2.filter函数</p><p>filter函数会对指定序列执行过滤操作。</p><p>filter函数的定义：</p><pre><code class="hljs">filter(function or None, sequence) -&gt; list, tuple, or string</code></pre><p>function是一个谓词函数，接受一个参数，返回布尔值True或False。<br>filter函数会对序列参数sequence中的每个元素调用function函数，最后返回的结果包含调用结果为True的元素。<br>返回值的类型和参数sequence的类型相同</p><p>比如返回序列中的所有偶数：</p><pre><code class="hljs">def is_even(x):    return x &amp; 1 != 0filter(is_even, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])</code></pre><p>返回结果为：</p><pre><code class="hljs">[1, 3, 5, 7, 9]</code></pre><p>如果function参数为None，返回结果和sequence参数相同。</p><p>3.reduce函数</p><p>reduce函数，reduce函数会对参数序列中元素进行累积。</p><p>reduce函数的定义：</p><pre><code class="hljs">reduce(function, sequence[, initial]) -&gt; value</code></pre><p>function参数是一个有两个参数的函数，reduce依次从sequence中取一个元素，和上一次调用function的结果做参数再次调用function。</p><p>第一次调用function时，如果提供initial参数，会以sequence中的第一个元素和initial作为参数调用function，否则会以序列sequence中的前两个元素做参数调用function。</p><pre><code class="hljs">reduce(lambda x, y: x + y, [2, 3, 4, 5, 6], 1)</code></pre><p>结果为21(  (((((1+2)+3)+4)+5)+6)  )</p><pre><code class="hljs">reduce(lambda x, y: x + y, [2, 3, 4, 5, 6])</code></pre><p>结果为20</p><p>注意function函数不能为None。</p><p>转载来源：<a href="http://blog.sina.com.cn/s/blog_45ac0d0a010191rb.html">http://blog.sina.com.cn/s/blog_45ac0d0a010191rb.html</a></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第42周</title>
    <link href="/2017/10/16/2017Week42/"/>
    <url>/2017/10/16/2017Week42/</url>
    
    <content type="html"><![CDATA[<h2 id="2017年第42周（2017-10-16-2017-10-22）"><a href="#2017年第42周（2017-10-16-2017-10-22）" class="headerlink" title="2017年第42周（2017&#x2F;10&#x2F;16~2017&#x2F;10&#x2F;22）"></a>2017年第42周（2017&#x2F;10&#x2F;16~2017&#x2F;10&#x2F;22）</h2><h2 id="JavaScript判断是否为整数类型方式"><a href="#JavaScript判断是否为整数类型方式" class="headerlink" title="JavaScript判断是否为整数类型方式"></a><span id= "20174201">JavaScript判断是否为整数类型方式</span></h2><p>ES6提供了Number.isInteger</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(<span class="hljs-number">3</span>) <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(<span class="hljs-number">3.1</span>) <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(<span class="hljs-string">&#x27;3&#x27;</span>) <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>([]) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>目前，最新的Firefox和Chrome已经支持。</p><h2 id="MyBatis-where配置"><a href="#MyBatis-where配置" class="headerlink" title="MyBatis where配置"></a><span id= "20174202">MyBatis where配置</span></h2><p>EmpMapper.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByWhere&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>select * from emp<br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;job != null and job != &#x27;&#x27;&quot;</span>&gt;</span><br>and job = #&#123;job&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;deptno != null&quot;</span>&gt;</span><br>and deptno = #&#123;deptno&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第41周</title>
    <link href="/2017/10/09/2017Week41/"/>
    <url>/2017/10/09/2017Week41/</url>
    
    <content type="html"><![CDATA[<h2 id="2017年第41周（2017-10-09-2017-10-15）"><a href="#2017年第41周（2017-10-09-2017-10-15）" class="headerlink" title="2017年第41周（2017&#x2F;10&#x2F;09~2017&#x2F;10&#x2F;15）"></a>2017年第41周（2017&#x2F;10&#x2F;09~2017&#x2F;10&#x2F;15）</h2><h2 id="JS操作SQLite"><a href="#JS操作SQLite" class="headerlink" title="JS操作SQLite"></a><span id= "20174101">JS操作SQLite</span></h2><p>在github找到</p><p><a href="https://github.com/kripken/sql.js">https://github.com/kripken/sql.js </a></p><p>下载sql.js 引入网页。</p><ul><li>本地  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sql.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery-1.12.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tableName&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dbFileEle&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">     </span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> tableName = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;tableName&#x27;</span>).<span class="hljs-property">val</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span>== tableName || <span class="hljs-string">&#x27;&#x27;</span> == tableName) &#123;</span><br><span class="language-javascript">tableName = <span class="hljs-string">&#x27;COMPANY&#x27;</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> dbFileElm = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;dbFileEle&#x27;</span>);</span><br><span class="language-javascript">        dbFileElm.<span class="hljs-property">onchange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> f = dbFileElm.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> r = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>();</span><br><span class="language-javascript">            r.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> <span class="hljs-title class_">Uints</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(r.<span class="hljs-property">result</span>);</span><br><span class="language-javascript">                db = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">SQL</span>.<span class="hljs-title class_">Database</span>(<span class="hljs-title class_">Uints</span>);</span><br><span class="language-javascript">                <span class="hljs-comment">//console.log(db)</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> c = db.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&quot;SELECT * FROM &quot;</span> + tableName);</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> result = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> columns = c[<span class="hljs-number">0</span>].<span class="hljs-property">columns</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> values = c[<span class="hljs-number">0</span>].<span class="hljs-property">values</span></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;columns: &quot;</span> + columns);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;values: &quot;</span> + values);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;columns length: &quot;</span> + columns.<span class="hljs-property">length</span>);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;values length: &quot;</span> + values.<span class="hljs-property">length</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> columns_length = columns.<span class="hljs-property">length</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> values_length = values.<span class="hljs-property">length</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; values_length; i++ )&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; columns_length; j++ ) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(columns[j] + <span class="hljs-string">&#x27;:&#x27;</span> + values[i][j]);</span><br><span class="language-javascript">result += columns[j] + <span class="hljs-string">&#x27;:&#x27;</span> + values[i][j] + <span class="hljs-string">&#x27;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#x27;</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">result += <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">$.<span class="hljs-title function_">each</span>(c, <span class="hljs-keyword">function</span>(<span class="hljs-params">key, value</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key + <span class="hljs-string">&quot;:&quot;</span> + value);</span><br><span class="language-javascript"><span class="hljs-comment">//alert(key + &quot;:&quot; + value);</span></span><br><span class="language-javascript"><span class="hljs-comment">//alert(value.columns);</span></span><br><span class="language-javascript"><span class="hljs-comment">//alert(value.values);</span></span><br><span class="language-javascript">$.<span class="hljs-title function_">each</span>(value.<span class="hljs-property">values</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">key2, value2</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">//alert(key2 + &quot;:&quot; + value2);</span></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(key2 + <span class="hljs-string">&quot;:&quot;</span> + value2);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"><span class="hljs-comment">//var amounts = value;</span></span><br><span class="language-javascript"><span class="hljs-comment">//workday_amounts.push(amounts);</span></span><br><span class="language-javascript"><span class="hljs-comment">//str += &#x27;&lt;div&gt;日期:&#x27; + key + &#x27;, 数量：&#x27; + value + &#x27;&lt;/div&gt;&#x27;;</span></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//alert(c);</span></span><br><span class="language-javascript"><span class="hljs-comment">//alert(c.type);</span></span><br><span class="language-javascript"><span class="hljs-comment">//var PowerData = JSON.parse(c);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//alert(PowerData.columns);</span></span><br><span class="language-javascript"><span class="hljs-comment">//alert(PowerData.values);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(result)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            r.<span class="hljs-title function_">readAsArrayBuffer</span>(f);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p><a href="https://coderdream.github.io/sqlite/read">https://coderdream.github.io/sqlite/read</a></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>TextNG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第38周</title>
    <link href="/2017/09/18/2017Week38/"/>
    <url>/2017/09/18/2017Week38/</url>
    
    <content type="html"><![CDATA[<h2 id="2017年第38周（2017-09-18-2017-09-24）"><a href="#2017年第38周（2017-09-18-2017-09-24）" class="headerlink" title="2017年第38周（2017&#x2F;09&#x2F;18~2017&#x2F;09&#x2F;24）"></a>2017年第38周（2017&#x2F;09&#x2F;18~2017&#x2F;09&#x2F;24）</h2><h2 id="TextNG-xml配置实例"><a href="#TextNG-xml配置实例" class="headerlink" title="TextNG.xml配置实例"></a><span id= "20173801">TextNG.xml配置实例</span></h2><ul><li><p>demo1  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">suite</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://testng.org/testng-1.0.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">suite</span> <span class="hljs-attr">thread-count</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Suite&quot;</span> <span class="hljs-attr">parallel</span>=<span class="hljs-string">&quot;tests&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Regression 1&quot;</span> <span class="hljs-attr">preserve-order</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;suite name=&quot;Suite1&quot; verbose=&quot;1&quot; &gt; &lt;test name=&quot;Regression1&quot; &gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packages</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.billjc.controller&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">packages</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>&lt;/<br></code></pre></td></tr></table></figure></li><li><p>demo2  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">suite</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://testng.org/testng-1.0.dtd&quot;</span> &gt;</span><br><span class="hljs-comment">&lt;!-- &lt;suite name=&quot;Preserve order test runs&quot;&gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">suite</span> <span class="hljs-attr">thread-count</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Suite&quot;</span> <span class="hljs-attr">parallel</span>=<span class="hljs-string">&quot;tests&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Regression 1&quot;</span> <span class="hljs-attr">preserve-order</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">classes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">class</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.billjc.controller.ProfileControllerTest&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">methods</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testMyProfile&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testProfileUpdate&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testProfileSave&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testPmEvaluateUpdate&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testPmEvaluateSave&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTmEvaluateUpdate&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTmEvaluateSave&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testSkillUpdate&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testSkillSave&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testSkillDelete&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testDomainUpdate&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testDomainSave&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testDomainDelete&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testMyProjectList&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testProfileQuery&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testQueryProfileListBySkill&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testQueryProfileListByDomain&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testQueryProfileListByWorkPlace&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">methods</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">class</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.billjc.controller.TaskControllerTest&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">methods</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTaskCreate&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTaskSave&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTaskUpdate&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTaskItemCreateAndSave&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTaskItemSkillCreateAndSave&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTaskItemDomainCreateAndSave&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTaskItemDomainCreateAndSaveAndDelete&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testMyTask&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTask&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTaskItem&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTaskQuery&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testQueryTaskListBySkill&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testQueryTaskListByDomain&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testQueryTaskListByWorkPlace&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">methods</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">classes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">suite</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="Java获取本机MAC地址、IP地址"><a href="#Java获取本机MAC地址、IP地址" class="headerlink" title="Java获取本机MAC地址、IP地址"></a><span id= "20173802">Java获取本机MAC地址、IP地址</span></h2><p>源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.coderdream.util;<br><br><span class="hljs-keyword">import</span> java.net.Inet4Address;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.NetworkInterface;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span>: SystemTool</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 与系统相关的一些常用工具方法. 目前实现的有：获取MAC地址、IP地址、主机名</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SystemTool</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(SystemTool.class);<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>logger.debug(<span class="hljs-string">&quot;\tMacAddress:\t&quot;</span> + getMacAddress());<br>logger.debug(<span class="hljs-string">&quot;IpAddress:\t&quot;</span> + getIpAddress());<br>&#125;<br><br><span class="hljs-comment">// 获取mac地址</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getMacAddress</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>Enumeration&lt;NetworkInterface&gt; allNetInterfaces = NetworkInterface<br>.getNetworkInterfaces();<br><span class="hljs-type">byte</span>[] mac = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">while</span> (allNetInterfaces.hasMoreElements()) &#123;<br><span class="hljs-type">NetworkInterface</span> <span class="hljs-variable">netInterface</span> <span class="hljs-operator">=</span> (NetworkInterface) allNetInterfaces<br>.nextElement();<br><span class="hljs-keyword">if</span> (netInterface.isLoopback() || netInterface.isVirtual()<br>|| !netInterface.isUp()) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>mac = netInterface.getHardwareAddress();<br><span class="hljs-keyword">if</span> (mac != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mac.length; i++) &#123;<br>sb.append(String.format(<span class="hljs-string">&quot;%02X%s&quot;</span>, mac[i],<br>(i &lt; mac.length - <span class="hljs-number">1</span>) ? <span class="hljs-string">&quot;-&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>&#125;<br><span class="hljs-keyword">if</span> (sb.length() &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>logger.error(<span class="hljs-string">&quot;MAC地址获取失败&quot;</span>, e);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取ip地址</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getIpAddress</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>Enumeration&lt;NetworkInterface&gt; allNetInterfaces = NetworkInterface<br>.getNetworkInterfaces();<br><span class="hljs-type">InetAddress</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">while</span> (allNetInterfaces.hasMoreElements()) &#123;<br><span class="hljs-type">NetworkInterface</span> <span class="hljs-variable">netInterface</span> <span class="hljs-operator">=</span> (NetworkInterface) allNetInterfaces<br>.nextElement();<br><span class="hljs-keyword">if</span> (netInterface.isLoopback() || netInterface.isVirtual()<br>|| !netInterface.isUp()) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>Enumeration&lt;InetAddress&gt; addresses = netInterface<br>.getInetAddresses();<br><span class="hljs-keyword">while</span> (addresses.hasMoreElements()) &#123;<br>ip = addresses.nextElement();<br><span class="hljs-keyword">if</span> (ip != <span class="hljs-literal">null</span> &amp;&amp; ip <span class="hljs-keyword">instanceof</span> Inet4Address) &#123;<br><span class="hljs-keyword">return</span> ip.getHostAddress();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>logger.error(<span class="hljs-string">&quot;IP地址获取失败&quot;</span>, e);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">MacAddress</span>:<span class="hljs-number">78</span>-<span class="hljs-number">45</span>-C4-<span class="hljs-number">15</span>-<span class="hljs-number">6</span>B-<span class="hljs-number">5</span>A<br><span class="hljs-attribute">IpAddress</span>:<span class="hljs-number">10.50.20.123</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>TextNG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第39周</title>
    <link href="/2017/09/18/2017Week39/"/>
    <url>/2017/09/18/2017Week39/</url>
    
    <content type="html"><![CDATA[<h2 id="2017年第39周（2017-09-25-2017-09-24）"><a href="#2017年第39周（2017-09-25-2017-09-24）" class="headerlink" title="2017年第39周（2017&#x2F;09&#x2F;25~2017&#x2F;09&#x2F;24）"></a>2017年第39周（2017&#x2F;09&#x2F;25~2017&#x2F;09&#x2F;24）</h2><h2 id="Tomcat管理页面403-Access-Denied的解决方法"><a href="#Tomcat管理页面403-Access-Denied的解决方法" class="headerlink" title="Tomcat管理页面403 Access Denied的解决方法"></a><span id= "20173901">Tomcat管理页面403 Access Denied的解决方法</span></h2><p>安装tomcat，配置好tomcat环境变量以后，访问manager app页面，出现403 Access Denied错误，解决的方法如下：<br>首先在conf&#x2F;tomcat-users.xml文件里面，在</tomcat-users>前面添加如下代码：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;role <span class="hljs-attribute">rolename</span>=<span class="hljs-string">&quot;manager-gui&quot;</span>/&gt;  <br>&lt;user <span class="hljs-attribute">password</span>=<span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-attribute">roles</span>=<span class="hljs-string">&quot;manager-gui&quot;</span> <span class="hljs-attribute">username</span>=<span class="hljs-string">&quot;tomcat&quot;</span>/&gt;  <br></code></pre></td></tr></table></figure><p>然后重启tomcat，重新访问manager app页面，如果此时仍然出现403 Access Denied错误，那么就是访问的ip地受到了限制，<br>我们打开**&#x2F;webapps&#x2F;manager&#x2F;META-INF&#x2F;目录下context.xml文件，不是conf&#x2F;目录下的context.xml文件**，一定不要搞错了</p><p>我们将里面的内容注释掉或者修改为</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;Valve className<span class="hljs-operator">=</span><span class="hljs-string">&quot;org.apache.catalina.valves.RemoteAddrValve&quot;</span>  <br><span class="hljs-attribute">allow</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1|\d+\.\d+\.\d+\.\d+&quot;</span> /&gt;  <br></code></pre></td></tr></table></figure><p>保存，然后重启tomcat，重新访问manager app页面，OK，问题得到解决。 如果没有生效，浏览器清空缓存。</p><h2 id="MyBatis通过-调用Java类的静态代码和常量"><a href="#MyBatis通过-调用Java类的静态代码和常量" class="headerlink" title="MyBatis通过@调用Java类的静态代码和常量"></a><span id= "20173902">MyBatis通过@调用Java类的静态代码和常量</span></h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&lt;<span class="hljs-keyword">select</span> id=<span class="hljs-string">&quot;getByParaCode&quot;</span> resultType=<span class="hljs-string">&quot;Sysconfig&quot;</span>&gt;  <br>    <span class="hljs-keyword">SELECT</span>   <br>        &lt;<span class="hljs-keyword">include</span> refid=<span class="hljs-string">&quot;columnList&quot;</span>/&gt;  <br>    <span class="hljs-keyword">FROM</span> C_SYS_PARA a  <br>    <span class="hljs-keyword">WHERE</span> a.PARA_CODE = #&#123;paraCode&#125; <span class="hljs-keyword">and</span> a.APPLICATION_CODE = <span class="hljs-string">&#x27;$&#123;@common.config.Global@getSysCode()&#125;&#x27;</span>  <br>&lt;/<span class="hljs-keyword">select</span>&gt;  <br>&lt;<span class="hljs-keyword">select</span> id=<span class="hljs-string">&quot;getByParaName&quot;</span> resultType=<span class="hljs-string">&quot;Sysconfig&quot;</span>&gt;  <br>    <span class="hljs-keyword">SELECT</span>   <br>        &lt;<span class="hljs-keyword">include</span> refid=<span class="hljs-string">&quot;columnList&quot;</span>/&gt;  <br>    <span class="hljs-keyword">FROM</span> C_SYS_PARA a  <br>    <span class="hljs-keyword">WHERE</span> a.PARA_NAME = #&#123;paraName&#125; <span class="hljs-keyword">and</span> a.APPLICATION_CODE = <span class="hljs-string">&#x27;$&#123;@ommon.config.Global@getSysCode()&#125;&#x27;</span>  <br>&lt;/<span class="hljs-keyword">select</span>&gt;<br></code></pre></td></tr></table></figure><p>通过@来调用常量和静态方法</p><h2 id="Tomcat-配置shared目录"><a href="#Tomcat-配置shared目录" class="headerlink" title="Tomcat 配置shared目录"></a><span id= "20173903">Tomcat 配置shared目录</span></h2><p>${catalina.home}&#x2F;conf&#x2F;catalina.properties文件使用来配置tomcat内置classloadder的load范围，通过修改此文件设置参数来实现shared文件夹中的jar加载。</p><p>tomcat中lib目录下新建share文件夹，放入所需要的jar包；修改配置文件catalina.properties中的“shared.loader&#x3D;”属性，参数为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$&#123;catalina.base&#125;</span>/lib/share,<span class="hljs-variable">$&#123;catalina.base&#125;</span>/lib/share/*.jar,<span class="hljs-variable">$&#123;catalina.home&#125;</span>/lib/share,<span class="hljs-variable">$&#123;catalina.home&#125;</span>/lib/share/*.jar<br></code></pre></td></tr></table></figure><h2 id="Maven打war包不包含jar"><a href="#Maven打war包不包含jar" class="headerlink" title="Maven打war包不包含jar"></a><span id= "20173904">Maven打war包不包含jar</span></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packagingExcludes</span>&gt;</span>WEB-INF/lib/*.jar<span class="hljs-tag">&lt;/<span class="hljs-name">packagingExcludes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="查看sqlserver被锁的表以及如何解锁"><a href="#查看sqlserver被锁的表以及如何解锁" class="headerlink" title="查看sqlserver被锁的表以及如何解锁"></a><span id= "20173905">查看sqlserver被锁的表以及如何解锁</span></h2><p>查看被锁表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> request_session_id spid,<br>       OBJECT_NAME(resource_associated_entity_id) tableName<br><span class="hljs-keyword">FROM</span> sys.dm_tran_locks<br><span class="hljs-keyword">WHERE</span> resource_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;OBJECT&#x27;</span>;<br></code></pre></td></tr></table></figure><p>spid   锁表进程 </p><p>tableName   被锁表名</p><p>解锁：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@spid</span> <span class="hljs-type">INT</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@spid</span> <span class="hljs-operator">=</span> <span class="hljs-number">236</span>; <span class="hljs-comment">--锁表进程</span><br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@sql</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">1000</span>);<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;kill &#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">CAST</span>(<span class="hljs-variable">@spid</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">VARCHAR</span>);<br><span class="hljs-keyword">EXEC</span> (<span class="hljs-variable">@sql</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>TextNG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第37周</title>
    <link href="/2017/09/11/2017Week37/"/>
    <url>/2017/09/11/2017Week37/</url>
    
    <content type="html"><![CDATA[<h2 id="2017年第37周（2017-09-11-2017-09-17）"><a href="#2017年第37周（2017-09-11-2017-09-17）" class="headerlink" title="2017年第37周（2017&#x2F;09&#x2F;11~2017&#x2F;09&#x2F;17）"></a>2017年第37周（2017&#x2F;09&#x2F;11~2017&#x2F;09&#x2F;17）</h2><h2 id="jQuery中radio-Button根据值选中"><a href="#jQuery中radio-Button根据值选中" class="headerlink" title="jQuery中radio Button根据值选中"></a><span id= "20173701">jQuery中radio Button根据值选中</span></h2><p>jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;fieldset data-role=<span class="hljs-string">&quot;controlgroup&quot;</span> data-type=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;<br>&lt;legend&gt;性别：&lt;/legend&gt;<br>&lt;input type=<span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;genderValue&quot;</span> id=<span class="hljs-string">&quot;radio-choice-h-2a&quot;</span> value=<span class="hljs-string">&quot;1&quot;</span>&gt;<br>&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;radio-choice-h-2a&quot;</span>&gt;男性&lt;/label&gt;<br>&lt;input type=<span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;genderValue&quot;</span> id=<span class="hljs-string">&quot;radio-choice-h-2b&quot;</span> value=<span class="hljs-string">&quot;0&quot;</span>&gt;<br>&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;radio-choice-h-2b&quot;</span>&gt;女性&lt;/label&gt;<br>&lt;/fieldset&gt;<br></code></pre></td></tr></table></figure><p>js （默认选中与单击事件）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;:radio[name=&#x27;genderValue&#x27;][value=&#x27;&quot;</span> + sex + <span class="hljs-string">&quot;&#x27;]&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>, <span class="hljs-string">&quot;checked&quot;</span>).<span class="hljs-title function_">checkboxradio</span>(<span class="hljs-string">&quot;refresh&quot;</span>);<br><br>$(<span class="hljs-string">&quot;input[name=&#x27;genderValue&#x27;]&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>$(<span class="hljs-string">&quot;#gender&quot;</span>).<span class="hljs-title function_">val</span>($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">val</span>());<br><span class="hljs-comment">//alert(&quot;您是...&quot; + $(this).val());</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="jQuery-下拉选单默认选中与单击事件"><a href="#jQuery-下拉选单默认选中与单击事件" class="headerlink" title=" jQuery 下拉选单默认选中与单击事件"></a><span id= "20173702"> jQuery 下拉选单默认选中与单击事件</span></h2><p>jsp:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;educationItem&quot;</span>&gt;学历：&lt;/label&gt; &lt;select id=<span class="hljs-string">&#x27;educationItem&#x27;</span>&gt;<br>&lt;option value=<span class="hljs-string">&#x27;&#x27;</span>&gt;--请选择学历--&lt;/option&gt;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><p>js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> educationItem = $(<span class="hljs-string">&quot;#educationItem&quot;</span>);<br><span class="hljs-keyword">var</span> url = <span class="hljs-string">&quot;/pdrc/dictionary/education&quot;</span>;<br>$.<span class="hljs-title function_">ajax</span>(&#123;<br>url : url,<br>dataType : <span class="hljs-string">&quot;json&quot;</span>,<br>crossDomain : <span class="hljs-literal">false</span>,<br>data : <span class="hljs-string">&quot;&quot;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br><span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> html = educationItem.<span class="hljs-title function_">html</span>();<br><span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> response) &#123;<br>html += <span class="hljs-string">&#x27;&lt;option value=&quot;&#x27;</span> + key + <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span> + response[key]<br>+ <span class="hljs-string">&#x27;&lt;/option&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> education = $(<span class="hljs-string">&quot;#education&quot;</span>).<span class="hljs-title function_">val</span>();<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;&#x27;</span> == education) &#123;<br>educationItem.<span class="hljs-title function_">html</span>(html);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>educationItem.<span class="hljs-title function_">html</span>(html).<span class="hljs-title function_">val</span>(education).<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&quot;change&quot;</span>);<br>&#125;<br>&#125;);<br><br>$(<span class="hljs-string">&quot;#educationItem&quot;</span>).<span class="hljs-title function_">change</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">//var checkText = $(&quot;#educationItem&quot;).find(&quot;option:selected&quot;).text(); // 获取Select选择的Text</span><br><span class="hljs-keyword">var</span> checkValue = $(<span class="hljs-string">&quot;#educationItem&quot;</span>).<span class="hljs-title function_">val</span>(); <span class="hljs-comment">// 获取Select选择的Value</span><br><span class="hljs-comment">//var educationItem = $(&quot;#educationItem&quot;);</span><br><br>$(<span class="hljs-string">&quot;#education&quot;</span>).<span class="hljs-title function_">val</span>(checkValue);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery</tag>
      
      <tag>JSON</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第36周</title>
    <link href="/2017/09/04/2017Week36/"/>
    <url>/2017/09/04/2017Week36/</url>
    
    <content type="html"><![CDATA[<h2 id="2017年第36周（2017-09-04-2017-09-10）"><a href="#2017年第36周（2017-09-04-2017-09-10）" class="headerlink" title="2017年第36周（2017&#x2F;09&#x2F;04~2017&#x2F;09&#x2F;10）"></a>2017年第36周（2017&#x2F;09&#x2F;04~2017&#x2F;09&#x2F;10）</h2><h2 id="getJSON获取数据"><a href="#getJSON获取数据" class="headerlink" title="getJSON获取数据"></a><span id= "20173601">getJSON获取数据</span></h2><p><a href="https://coderdream.github.io/readjson.html">https://coderdream.github.io/readjson.html</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>$(<span class="hljs-string">&quot;#btn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>$.<span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&quot;js/userinfo.json&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123; <br><span class="hljs-keyword">var</span> $jsontip = $(<span class="hljs-string">&quot;#jsonTip&quot;</span>); <br><span class="hljs-keyword">var</span> strHtml = <span class="hljs-string">&quot;123&quot;</span>;<span class="hljs-comment">//存储数据的变量 </span><br>$jsontip.<span class="hljs-title function_">empty</span>();<span class="hljs-comment">//清空内容 </span><br>$.<span class="hljs-title function_">each</span>(data,<span class="hljs-keyword">function</span>(<span class="hljs-params">infoIndex,info</span>)&#123; <br>strHtml += <span class="hljs-string">&quot;姓名：&quot;</span>+info[<span class="hljs-string">&quot;name&quot;</span>]+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>; <br>strHtml += <span class="hljs-string">&quot;性别：&quot;</span>+info[<span class="hljs-string">&quot;sex&quot;</span>]+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>; <br>strHtml += <span class="hljs-string">&quot;邮箱：&quot;</span>+info[<span class="hljs-string">&quot;email&quot;</span>]+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>; <br>strHtml += <span class="hljs-string">&quot;&lt;hr&gt;&quot;</span> <br>&#125;) <br>$jsontip.<span class="hljs-title function_">html</span>(strHtml);<span class="hljs-comment">//显示处理后的数据 </span><br>&#125;) <br>&#125;) <br></code></pre></td></tr></table></figure><h2 id="jQuery-ajax读取本地json文件"><a href="#jQuery-ajax读取本地json文件" class="headerlink" title=" jQuery ajax读取本地json文件"></a><span id= "20173602"> jQuery ajax读取本地json文件</span></h2><p><a href="https://coderdream.github.io/readjson2.html">https://coderdream.github.io/readjson2.html</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>$.<span class="hljs-title function_">ajax</span>(&#123;<br>   <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;js/test.json&quot;</span>,<span class="hljs-comment">//json文件位置</span><br>   <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-comment">//请求方式为get</span><br>   <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>, <span class="hljs-comment">//返回数据格式为json</span><br>   <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<span class="hljs-comment">//请求成功完成后要执行的方法 </span><br>   <span class="hljs-comment">//each循环 使用$.each方法遍历返回的数据date</span><br>   <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span>;<br>   $.<span class="hljs-title function_">each</span>(data.<span class="hljs-property">first</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">i, item</span>) &#123;<br>str += <span class="hljs-string">&#x27;&lt;div&gt;姓名:&#x27;</span> + item.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;性别：&#x27;</span> + item.<span class="hljs-property">sex</span> + <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>;<br><span class="hljs-comment">//document.write(str);</span><br>   &#125;)<br>   <span class="hljs-keyword">var</span> jsonTip2 = $(<span class="hljs-string">&quot;#jsonTip2&quot;</span>);<br>   jsonTip2.<span class="hljs-title function_">html</span>(str);<br>   &#125;<br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery</tag>
      
      <tag>JSON</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第34周</title>
    <link href="/2017/08/21/2017Week34/"/>
    <url>/2017/08/21/2017Week34/</url>
    
    <content type="html"><![CDATA[<h2 id="2017年第34周（2017-08-21-2017-08-27）"><a href="#2017年第34周（2017-08-21-2017-08-27）" class="headerlink" title="2017年第34周（2017&#x2F;08&#x2F;21~2017&#x2F;08&#x2F;27）"></a>2017年第34周（2017&#x2F;08&#x2F;21~2017&#x2F;08&#x2F;27）</h2><h2 id="查找项目经理超过x人的员工"><a href="#查找项目经理超过x人的员工" class="headerlink" title="查找项目经理超过x人的员工"></a><span id= "20173401">查找项目经理超过x人的员工</span></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>cnt,<br>Staff_Work_Id<br><span class="hljs-keyword">FROM</span><br>(<br><span class="hljs-keyword">SELECT</span><br><span class="hljs-built_in">COUNT</span> (pmID) <span class="hljs-keyword">AS</span> cnt,<br>Staff_Work_Id<br><span class="hljs-keyword">FROM</span><br>(<br><span class="hljs-keyword">SELECT</span><br><span class="hljs-built_in">COUNT</span> (p.Project_Mgr_Work_Id) <span class="hljs-keyword">AS</span> pmID,<br>h.Staff_Work_Id<br><span class="hljs-keyword">FROM</span><br>PDRC_HumanMap h,<br>PDRC_Project p<br><span class="hljs-keyword">WHERE</span><br>h.Project_Id <span class="hljs-operator">=</span> p.id <span class="hljs-comment">--AND h.Staff_Work_Id = &#x27;B-29803&#x27;</span><br><span class="hljs-keyword">AND</span> p.Project_Start_Date <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;2016-7-1&#x27;</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>h.Staff_Work_Id,<br>p.Project_Mgr_Work_Id<br>) a<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>a.Staff_Work_Id<br>) b<br><span class="hljs-keyword">WHERE</span><br>b.cnt <span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><h2 id="统计项目经理的项目个数"><a href="#统计项目经理的项目个数" class="headerlink" title=" 统计项目经理的项目个数"></a><span id= "20173402"> 统计项目经理的项目个数</span></h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> cnt,<br>       Project_Mgr_Work_Id,<br>       Project_Mgr_Name<br><span class="hljs-keyword">FROM</span><br>(<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(p.Project_Mgr_Work_Id) <span class="hljs-keyword">AS</span> cnt,<br>           p.Project_Mgr_Work_Id,<br>           p.Project_Mgr_Name<br>    <span class="hljs-keyword">FROM</span> PDRC_Project p<br>    <span class="hljs-keyword">WHERE</span> p.Project_Start_Date &gt; <span class="hljs-string">&#x27;2017-1-1&#x27;</span><br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> p.Project_Mgr_Work_Id,<br>             p.Project_Mgr_Name<br>) <span class="hljs-keyword">AS</span> a<br><span class="hljs-keyword">WHERE</span> cnt &gt; <span class="hljs-number">5</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> cnt <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><h2 id="项目经理手下存在项目经理超过X人的员工且该项目经理归属项目超过Y个"><a href="#项目经理手下存在项目经理超过X人的员工且该项目经理归属项目超过Y个" class="headerlink" title="项目经理手下存在项目经理超过X人的员工且该项目经理归属项目超过Y个"></a><span id= "20173403">项目经理手下存在项目经理超过X人的员工且该项目经理归属项目超过Y个</span></h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span><br>       (p.Project_Mgr_Work_Id),<br>       p.Project_Mgr_Name<br><span class="hljs-keyword">FROM</span> PDRC_HumanMap h,<br>     PDRC_Project p,<br>(<br>    <span class="hljs-keyword">SELECT</span> Staff_Work_Id<br>    <span class="hljs-keyword">FROM</span><br>    (<br>        <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(pmID) <span class="hljs-keyword">AS</span> cnt,<br>               Staff_Work_Id<br>        <span class="hljs-keyword">FROM</span><br>        (<br>            <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(p.Project_Mgr_Work_Id) <span class="hljs-keyword">AS</span> pmID,<br>                   h.Staff_Work_Id<br>            <span class="hljs-keyword">FROM</span> PDRC_HumanMap h,<br>                 PDRC_Project p<br>            <span class="hljs-keyword">WHERE</span> h.Project_Id = p.id --<span class="hljs-keyword">AND</span> h.Staff_Work_Id = <span class="hljs-string">&#x27;B-29803&#x27;</span><br>                  <span class="hljs-keyword">AND</span> p.Project_Start_Date &gt; <span class="hljs-string">&#x27;2016-9-1&#x27;</span><br>            <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> h.Staff_Work_Id,<br>                     p.Project_Mgr_Work_Id<br>        ) a<br>        <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> a.Staff_Work_Id<br>    ) b<br>    <span class="hljs-keyword">WHERE</span> b.cnt &gt; <span class="hljs-number">5</span><br>) c<br><span class="hljs-keyword">WHERE</span> h.Project_Id = p.Id<br>      <span class="hljs-keyword">AND</span> h.Staff_Work_Id = c.Staff_Work_Id;<br></code></pre></td></tr></table></figure><h2 id="遍历Map"><a href="#遍历Map" class="headerlink" title="遍历Map"></a><span id= "20173404">遍历Map</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;<br>System.out.println(<span class="hljs-string">&quot;Key = &quot;</span> + entry.getKey() + <span class="hljs-string">&quot;, Value = &quot;</span><br>+ entry.getValue());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="永久修改Jenkins启动端口的一种解决方法"><a href="#永久修改Jenkins启动端口的一种解决方法" class="headerlink" title="永久修改Jenkins启动端口的一种解决方法"></a><span id= "20173405">永久修改Jenkins启动端口的一种解决方法</span></h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span><span class="hljs-keyword">jenkins.war </span>--httpPort=<span class="hljs-number">8099</span><br></code></pre></td></tr></table></figure><p><a href="http://blog.csdn.net/csdnhundan/article/details/44829643">http://blog.csdn.net/csdnhundan/article/details/44829643</a></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第33周</title>
    <link href="/2017/08/14/2017Week33/"/>
    <url>/2017/08/14/2017Week33/</url>
    
    <content type="html"><![CDATA[<h2 id="2017年第33周（2017-08-14-2017-08-20）"><a href="#2017年第33周（2017-08-14-2017-08-20）" class="headerlink" title="2017年第33周（2017&#x2F;08&#x2F;14~2017&#x2F;08&#x2F;20）"></a>2017年第33周（2017&#x2F;08&#x2F;14~2017&#x2F;08&#x2F;20）</h2><h2 id="sql-server-2008-分页，ROW-NUMBER-函数"><a href="#sql-server-2008-分页，ROW-NUMBER-函数" class="headerlink" title="sql server 2008 分页，ROW_NUMBER( )函数"></a><span id= "20173301">sql server 2008 分页，ROW_NUMBER( )函数</span></h2><p>语法：</p><pre><code class="hljs">SELECT t.字段名 FROM (SELECT 字段（可以是多表关联的字段） ,row_number() over(order by 某个排序字段 desc) r FROM 表名 where 过滤条件 ) t where t.r &lt;= (每页显示条数*要查询的页) and t.r &gt; (每页显示条数*(要查询的页-1))</code></pre><p>实例一：</p><pre><code class="hljs">SELECT *FROM(  SELECT ROW_NUMBER( ) OVER( ORDER BY id ASC )  AS rowNumber,         *  FROM  (    SELECT *    FROM OPENQUERY( [10.100.254.101], &#39;select * from BJC_Finance.dbo.ISBG_Project&#39; )  )  AS A)AS BWHERE rowNumber BETWEEN 1 AND 5;</code></pre><p>实例二：</p><pre><code class="hljs">select * from (select row_number() over (order by id) as row_num,* from table)t where row_num between 1 and 30</code></pre><hr>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第32周</title>
    <link href="/2017/08/07/2017Week32/"/>
    <url>/2017/08/07/2017Week32/</url>
    
    <content type="html"><![CDATA[<h2 id="2017年第32周（2017-08-07-2017-08-13）"><a href="#2017年第32周（2017-08-07-2017-08-13）" class="headerlink" title="2017年第32周（2017&#x2F;08&#x2F;07~2017&#x2F;08&#x2F;13）"></a>2017年第32周（2017&#x2F;08&#x2F;07~2017&#x2F;08&#x2F;13）</h2><h3 id="Question1"><a href="#Question1" class="headerlink" title="Question1:"></a>Question1:</h3><hr><p>Jsp file can not find the tag library descriptor for “<a href="http://java.sun.com/jsp/jstl/core">http://java.sun.com/jsp/jstl/core</a>“</p><p>add code to pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Question2"><a href="#Question2" class="headerlink" title="Question2:"></a>Question2:</h3><hr><p>eclipse导入新工程报错：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Referenced <span class="hljs-built_in">file</span> <span class="hljs-keyword">contains</span> errors (<span class="hljs-keyword">http</span>://www.springframework.org/schema/beans/spring-beans<span class="hljs-number">-3.1</span>.xsd). <br>For more information, <span class="hljs-literal">right</span> click <span class="hljs-keyword">on</span> <span class="hljs-title">the</span> <span class="hljs-title">message</span> <span class="hljs-title">in</span> <span class="hljs-title">the</span> <span class="hljs-title">Problems</span> <span class="hljs-title">View</span> <span class="hljs-title">and</span> <br>select <span class="hljs-string">&quot;Show Details...&quot;</span><br></code></pre></td></tr></table></figure><p>解决方案：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">把<span class="hljs-keyword">project</span>菜单里的clean点击一下就OK了<br></code></pre></td></tr></table></figure><h2 id="好文章序列"><a href="#好文章序列" class="headerlink" title="好文章序列"></a><span id= "20173201">好文章序列</span></h2><h4 id="1、Eclipse中执行maven命令"><a href="#1、Eclipse中执行maven命令" class="headerlink" title="1、Eclipse中执行maven命令"></a>1、Eclipse中执行maven命令</h4><p><a href="http://blog.csdn.net/u011939453/article/details/43017865">http://blog.csdn.net/u011939453/article/details/43017865</a></p><h4 id="2、pom文件常用配置"><a href="#2、pom文件常用配置" class="headerlink" title="2、pom文件常用配置"></a>2、pom文件常用配置</h4><ul><li>解决控制台乱码</li><li>编译时不运行单元测试</li></ul><p>pom.xml</p><pre><code class="hljs">&lt;properties&gt;    &lt;argLine&gt;-Dfile.encoding=UTF-8&lt;/argLine&gt;&lt;/properties&gt;&lt;build&gt;    &lt;finalName&gt;pdrc&lt;/finalName&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;            &lt;version&gt;2.3.2&lt;/version&gt;            &lt;configuration&gt;                &lt;source&gt;1.8&lt;/source&gt;                &lt;target&gt;1.8&lt;/target&gt;                &lt;encoding&gt;UTF-8&lt;/encoding&gt;            &lt;/configuration&gt;        &lt;/plugin&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;            &lt;configuration&gt;                &lt;skip&gt;true&lt;/skip&gt;            &lt;/configuration&gt;        &lt;/plugin&gt;        &lt;plugin&gt;            &lt;!-- https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-maven-plugin --&gt;            &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;            &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;            &lt;version&gt;9.4.6.v20170531&lt;/version&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;</code></pre><h3 id="jQuery-获取当前页面的URL信息"><a href="#jQuery-获取当前页面的URL信息" class="headerlink" title="jQuery 获取当前页面的URL信息"></a>jQuery 获取当前页面的URL信息</h3><ul><li><p>(一)设置或获取对象指定的文件名或路径  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.pathname<br></code></pre></td></tr></table></figure><p>例：<a href="http://localhost:8086/topic/index?topicId=361">http://localhost:8086/topic/index?topicId=361</a><br>alert(window.location.pathname); 则输出：&#x2F;topic&#x2F;index</p></li><li><p>(二)设置或获取整个 URL 为字符串  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.href<br></code></pre></td></tr></table></figure><p>例：<a href="http://localhost:8086/topic/index?topicId=361">http://localhost:8086/topic/index?topicId=361</a><br>alert(window.location.href); 则输出：<a href="http://localhost:8086/topic/index?topicId=361">http://localhost:8086/topic/index?topicId=361</a></p></li><li><p>(三)设置或获取与 URL 关联的端口号码  </p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">window</span>.location.<span class="hljs-keyword">port</span><br></code></pre></td></tr></table></figure><p>例：<a href="http://localhost:8086/topic/index?topicId=361">http://localhost:8086/topic/index?topicId=361</a><br>alert(window.location.port); 则输出：8086</p></li><li><p>(四)设置或获取 URL 的协议部分  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.protocol<br></code></pre></td></tr></table></figure><p>例：<a href="http://localhost:8086/topic/index?topicId=361">http://localhost:8086/topic/index?topicId=361</a><br>alert(window.location.protocol); 则输出：http:</p></li><li><p>(五)设置或获取 href 属性中在井号“#”后面的分段  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.hash<br></code></pre></td></tr></table></figure></li><li><p>(六)设置或获取 location 或 URL 的 hostname 和 port  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.host<br></code></pre></td></tr></table></figure><p>例：<a href="http://localhost:8086/topic/index?topicId=361">http://localhost:8086/topic/index?topicId=361</a><br>alert(window.location.host); 则输出：http:localhost:8086</p></li><li><p>(七)设置或获取 href 属性中跟在问号后面的部分  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.<span class="hljs-keyword">search</span><br></code></pre></td></tr></table></figure><p>例：<a href="http://localhost:8086/topic/index?topicId=361">http://localhost:8086/topic/index?topicId=361</a><br>alert(window.location.search); 则输出：?topicId&#x3D;361</p></li></ul><p>(八)window.location</p><table><thead><tr><th align="center">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">hash</td><td align="left">设置或获取 href属性中在井号“#”后面的分段。</td></tr><tr><td align="center">host</td><td align="left">设置或获取 location 或 URL 的hostname 和 port 号码。</td></tr><tr><td align="center">hostname</td><td align="left">设置或获取 location 或 URL 的主机名称部分。</td></tr><tr><td align="center">href</td><td align="left">设置或获取整个 URL为字符串。</td></tr><tr><td align="center">pathname</td><td align="left">设置或获取对象指定的文件名或路径。</td></tr><tr><td align="center">port</td><td align="left">设置或获取与 URL关联的端口号码。</td></tr><tr><td align="center">protocol</td><td align="left">设置或获取 URL 的协议部分。</td></tr><tr><td align="center">search</td><td align="left">设置或获取 href属性中跟在问号后面的部分。</td></tr></tbody></table><pre><code class="hljs">                                                                        |</code></pre><h3 id="c-if标签用法"><a href="#c-if标签用法" class="headerlink" title="c:if标签用法"></a>c:if标签用法</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;c<span class="hljs-keyword">:if</span> <span class="hljs-attribute">test</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;profileView.gender==1&#125;</span>&quot;</span>&gt;checked&lt;/c:if&gt;<br></code></pre></td></tr></table></figure><h3 id="TestNg"><a href="#TestNg" class="headerlink" title="TestNg"></a>TestNg</h3><ul><li>eclipse插件地址</li></ul><p><a href="http://dl.bintray.com/testng-team/testng-eclipse-release/zipped/6.11.0.201703011520/">http://dl.bintray.com/testng-team/testng-eclipse-release/zipped/6.11.0.201703011520/</a></p><h3 id="sqlserver中如何修改字段类型？"><a href="#sqlserver中如何修改字段类型？" class="headerlink" title="sqlserver中如何修改字段类型？"></a>sqlserver中如何修改字段类型？</h3><p>我有一张表，字段类型是varchar,我现在要把这个字段变成text类型，sql如何写？？？？？</p><p>alter table 表名 alter column 字段名  text</p><h3 id="【Maven】maven工程-调试出现-Source-not-found-，开启jetty调试"><a href="#【Maven】maven工程-调试出现-Source-not-found-，开启jetty调试" class="headerlink" title="【Maven】maven工程 调试出现 Source not found ，开启jetty调试"></a>【Maven】maven工程 调试出现 Source not found ，开启jetty调试</h3><p>问题：maven工程使用jetty 调试出现 Source not found，解决如下：</p><p><a href="http://blog.csdn.net/dracotianlong/article/details/47975969">http://blog.csdn.net/dracotianlong/article/details/47975969</a></p><p>1、开启MAVEN_OPTS的调试参数<br>配置如下：  </p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm">-<span class="hljs-type">Xdebug</span> -<span class="hljs-type">Xrunjdwp</span>:trans<span class="hljs-keyword">port</span>=dt_socket,server=y,suspend=n,address=1066<br></code></pre></td></tr></table></figure><p>配置的地方如下：</p><p><img src="http://img.blog.csdn.net/20150825135525560?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>2、参数含义如下：<br>-Xdebug :通知JVM工作DEBUG模式下<br>-Xrunjdwp:通知JVM使用Java Debug wire protocol来运行环境<br>transport ：调试数据的传送方式，dt_socket使用socket方式<br>server ：是否支持server模式的vm中<br>suspend：是否在调试客户端建立起来后，再执行JVM<br>address：是和调试器通信的端口，不是服务的端口号<br>-Xnoagent: 禁用默认sun.tools.debug调试器<br>-Djava.compiler&#x3D;NONE: 禁止JIT编译器的加载<br>dt_shmem: 共享内存传输，仅限于Windows </p><h3 id="Map-遍历"><a href="#Map-遍历" class="headerlink" title="Map 遍历"></a>Map 遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Integer&gt;();  <br><span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123;    <br>    System.out.println(<span class="hljs-string">&quot;Key = &quot;</span> + entry.getKey() + <span class="hljs-string">&quot;, Value = &quot;</span> + entry.getValue());  <br>&#125; <br></code></pre></td></tr></table></figure><h3 id="eclipse-jetty-debug-source-not-found"><a href="#eclipse-jetty-debug-source-not-found" class="headerlink" title="eclipse jetty debug source not found"></a>eclipse jetty debug source not found</h3><p>eclipse</p><p> 在eclipse中用jetty maven插件debug 时，会找不到源代码， 可以用以下办法解决：<br>安装 Dynamic Source Lookup plugin 插件，<br>插件主页如下，<br> <a href="https://github.com/ifedorenko/com.ifedorenko.m2e.sourcelookup">https://github.com/ifedorenko/com.ifedorenko.m2e.sourcelookup</a></p><pre><code class="hljs">com.ifedorenko.m2e m2e extensions - http://ifedorenko.github.io/m2e-extras/</code></pre><p><img src="http://dl2.iteye.com/upload/attachment/0110/2472/a62befbb-620f-3c96-9740-f0e828a645d2.bmp"></p><p>然后点击【Add】按钮，等待几秒钟，Name就会刷出【m2e extentensions】出来！</p><h3 id="MyBatise-多个参数"><a href="#MyBatise-多个参数" class="headerlink" title="MyBatise 多个参数"></a>MyBatise 多个参数</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">where</span> profileid = #&#123;param1&#125; and projectid = #&#123;param2&#125;;<br></code></pre></td></tr></table></figure><h3 id="解决Dynamic-Web-Module-3-1-requires-Java-1-7-or-newer"><a href="#解决Dynamic-Web-Module-3-1-requires-Java-1-7-or-newer" class="headerlink" title="解决Dynamic Web Module 3.1 requires Java 1.7 or newer"></a>解决Dynamic Web Module 3.1 requires Java 1.7 or newer</h3><p><a href="http://blog.csdn.net/qq_31614947/article/details/70231289">http://blog.csdn.net/qq_31614947/article/details/70231289</a></p><p>概述：使用maven构建web项目时，经常会遇见这个问题，问题原因报错讲述的很清晰明了，就是web模块需要使用java1.7及以后的版本，目前的版本不符合。因而只需要修改java版本到1.7及以上即可。</p><p>解决方法：</p><ol><li><p>在eclipse 构建 web中关于java版本有三处需要修改统一。</p><p> （1）在 Java Build Path的libraries中修改</p><p> （2）在Java Compiler 中修改</p><p> （3）在Project Facet中修改</p></li><li><p>大部分按上上述修改就应该可以了，但总是有意外，还是报错。因为使用了 maven构建项目，因而最好在pom.xml文件中的build标签中加入以下代码：</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span>     //如果是1.8，修改为1.8<br>                 <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span>      //如果是1.8，修改为1.8<br>             <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.最后再右键使用maven的Update Project 即可。 </p><h3 id="Maven项目配置jetty9插件"><a href="#Maven项目配置jetty9插件" class="headerlink" title="Maven项目配置jetty9插件"></a>Maven项目配置jetty9插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.eclipse.jetty<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.4.6.v20170531<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scanIntervalSeconds</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">scanIntervalSeconds</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">httpConnector</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>9080<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">idleTimeout</span>&gt;</span>60000<span class="hljs-tag">&lt;/<span class="hljs-name">idleTimeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">httpConnector</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">webApp</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">contextPath</span>&gt;</span>/$&#123;project.build.finalName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">contextPath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">webApp</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Nginx启动报错：10013-An-attempt-was-made-to-access-a-socket-in-a-way-forbidden"><a href="#Nginx启动报错：10013-An-attempt-was-made-to-access-a-socket-in-a-way-forbidden" class="headerlink" title="Nginx启动报错：10013: An attempt was made to access a socket in a way forbidden"></a>Nginx启动报错：10013: An attempt was made to access a socket in a way forbidden</h3><p>Nginx在win7，win2008下启动报错：bind() to 0.0.0.0:80 failed (10013: An attempt was made to access a socket in a way forbidden by its access permissions) 。</p><p>原因是Win7下nginx默认80端口被System占用，造成nginx启动报错的解决方案。</p><p>在cmd窗口运行如下命令：</p><pre><code class="hljs">C:\Users\Administrator&gt;netstat -aon | findstr :80  </code></pre><p>看到80端口果真被占用。发现占用的pid是4，名字是System。怎么禁用呢？</p><p>1、打开注册表：regedit</p><p>2、找到：HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\HTTP</p><p>3、找到一个REG_DWORD类型的项Start，将其改为0</p><p>4、重启系统，System进程不会占用80端口</p><p>重启之后，start nginx.exe 。在浏览器中，输入127.0.01，即可看到亲爱的“Welcome to nginx!” 了。</p><p><a href="http://www.360sdn.com/Nginx/2014/0807/4044.html">http://www.360sdn.com/Nginx/2014/0807/4044.html</a></p><h3 id="如何查看某个端口被谁占用"><a href="#如何查看某个端口被谁占用" class="headerlink" title="如何查看某个端口被谁占用"></a>如何查看某个端口被谁占用</h3><p><a href="http://jingyan.baidu.com/article/3c48dd34491d47e10be358b8.html">http://jingyan.baidu.com/article/3c48dd34491d47e10be358b8.html</a></p><p>查看被占用端口对应的PID，输入命令：netstat -aon|findstr “49157”，回车，记下最后一位数字，即PID,这里是2720</p><h3 id="Welcome-to-the-PMD-for-Eclipse-Update-Site"><a href="#Welcome-to-the-PMD-for-Eclipse-Update-Site" class="headerlink" title="Welcome to the PMD for Eclipse Update Site"></a>Welcome to the PMD for Eclipse Update Site</h3><p>Please use from now on directly the following URL as the eclipse update site URL: </p><p><a href="https://dl.bintray.com/pmd/pmd-eclipse-plugin/updates/">https://dl.bintray.com/pmd/pmd-eclipse-plugin/updates/</a></p><p>This website provides updates for the Eclipse plugin for PMD.<br>More Information</p><pre><code class="hljs">Release NotesPMD HomepageBug ReportsPlugin installation</code></pre><p>If you have previously installed a version of the PMD Eclipse plugin prior to November 2012, then you should remove&#x2F;uninstall it first. To install the PMD for Eclipse plugin:</p><ol><li>In Eclipse, click on Help -&gt; Install New Software…</li><li>Click on Add..</li><li>Enter the following: <ul><li>Name: PMD for Eclipse Update Site</li><li>URL: <a href="https://dl.bintray.com/pmd/pmd-eclipse-plugin/updates/">https://dl.bintray.com/pmd/pmd-eclipse-plugin/updates/</a></li></ul></li><li>and click OK.</li><li>You should see PMD for Eclipse 4. Select the checkbox next to it and click Next &gt;.</li><li>You’ll need to accept the license and confirm you want to install a plugin that is not digitally signed. Go ahead and install it anyway.</li><li>Restart eclipse.</li></ol><h3 id="Maven-jetty指定端口启动"><a href="#Maven-jetty指定端口启动" class="headerlink" title="Maven jetty指定端口启动"></a>Maven jetty指定端口启动</h3><p>eclipse里修改 Goals值</p><ul><li>Tomcat:   <figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm">-<span class="hljs-type">Dmaven</span>.tomcat.<span class="hljs-keyword">port</span>=8080 tomcat:run<br></code></pre></td></tr></table></figure></li><li>Jetty:  <figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm">-<span class="hljs-type">Djetty</span>.<span class="hljs-keyword">port</span>=8081 jetty:run<br></code></pre></td></tr></table></figure></li></ul><h3 id="Java-保证顺序的-Map"><a href="#Java-保证顺序的-Map" class="headerlink" title="Java 保证顺序的 Map"></a>Java 保证顺序的 Map</h3><p>LinkedHashMap 才能保证迭代的时候取出的顺序和存入的顺序相同</p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>eclipse</tag>
      
      <tag>jQuery</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
