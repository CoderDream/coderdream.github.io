<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【A2-Listening】 A morning briefing晨间简报</title>
    <link href="/2024/03/26/a2-listening-01-morning-briefing/"/>
    <url>/2024/03/26/a2-listening-01-morning-briefing/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="A-morning-briefing晨间简报"><a href="#A-morning-briefing晨间简报" class="headerlink" title="A morning briefing晨间简报"></a>A morning briefing晨间简报</h3><img src="/2024/03/26/a2-listening-01-morning-briefing/RS6164_153626054-hig.jpg" class="" title="img"><p>Listen to a morning briefing to practise and improve your listening skills.<br>听早上的简报来练习和提高您的听力技巧。</p><p>Do the preparation task first. Then listen to the audio and do the exercises.<br>先做好准备工作。然后听音频并做练习。</p><h4 id="Preparation准备"><a href="#Preparation准备" class="headerlink" title="Preparation准备"></a>Preparation准备</h4><h4 id="A-morning-briefing-–-preparation"><a href="#A-morning-briefing-–-preparation" class="headerlink" title="A morning briefing – preparation"></a>A morning briefing – preparation</h4><p>Match the words with the definitions.</p><ul><li>Question</li></ul><img src="/2024/03/26/a2-listening-01-morning-briefing/image-20240326175941375.png" class="" title="image-20240326175941375"><ul><li>Answer</li></ul><img src="/2024/03/26/a2-listening-01-morning-briefing/image-20240326180217982.png" class="" title="image-20240326180217982">        <div id="aplayer-UKWDNzuU" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-UKWDNzuU"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "A_morning_briefing",              author: "A2_Listening",              url: "A2_Listening_01_Morning_briefing.mp3",              pic: "https://img4.kuwo.cn/star/albumcover/300/50/69/4184500136.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h4 id="Transcript-En"><a href="#Transcript-En" class="headerlink" title="Transcript-En"></a>Transcript-En</h4><blockquote><p>Hi, everyone. I know you’re all busy so I’ll keep this briefing quick. I have some important information about a change in the management team. As you already know, our head of department, James Watson, is leaving his position at the end of this week. His replacement is starting at the end of the next month. In the meantime, we’ll continue with our projects as usual.</p><p>I have two more quick points. Firstly, there will be some improvements made to the staff car park next month for a few weeks. It will be closed during that time.</p><p>Don’t worry, we’ve found a solution. We can use the local church car park until our own one is ready. If you arrive before 8.30 a.m., please use our small car park on Brown Street, and if you arrive after that, you should go directly to the church car park. It’s only a five-minute walk away. But they need it in the evenings, so you have to leave before 6 p.m. Sorry about that – I know how much you all love working late!</p><p>The other thing I wanted to tell you about is that the canteen has now introduced a cashless payment system. So, you can’t use cash for payments any more. You can pay directly with your smartphone or you can pay using your company ID card. The total amount put on your company ID card comes off your salary at the end of each month.</p><p>OK. That’s it? Are there any questions?</p></blockquote><h4 id="Transcript-EnCn"><a href="#Transcript-EnCn" class="headerlink" title="Transcript-EnCn"></a>Transcript-EnCn</h4><blockquote><p>Hi, everyone. I know you’re all busy so I’ll keep this briefing quick. I have some important information about a change in the management team. As you already know, our head of department, James Watson, is leaving his position at the end of this week. His replacement is starting at the end of the next month. In the meantime, we’ll continue with our projects as usual.<br>大家好。我知道你们都很忙，所以我会尽快做这个简报。我有一些关于管理团队变动的重要信息。如您所知，我们的部门主管詹姆斯·沃森将于本周末离职。他的继任者将从下个月底开始。与此同时，我们将像往常一样继续我们的项目。</p><p>I have two more quick points. Firstly, there will be some improvements made to the staff car park next month for a few weeks. It will be closed during that time.<br>我还有两点要点。首先，下个月将在几周内对员工停车场进行一些改进。在此期间它将关闭。</p><p>Don’t worry, we’ve found a solution. We can use the local church car park until our own one is ready. If you arrive before 8.30 a.m., please use our small car park on Brown Street, and if you arrive after that, you should go directly to the church car park. It’s only a five-minute walk away. But they need it in the evenings, so you have to leave before 6 p.m. Sorry about that – I know how much you all love working late!<br>别担心，我们已经找到解决方案了。我们可以使用当地教堂的停车场，直到我们自己的停车场准备好为止。如果您在上午 8.30 点之前抵达，请使用我们位于布朗街的小型停车场，如果您在此之后抵达，请直接前往教堂停车场。步行只需五分钟。但他们晚上需要，所以你必须在下午 6 点之前离开。抱歉——我知道你们有多喜欢工作到很晚！</p><p>The other thing I wanted to tell you about is that the canteen has now introduced a cashless payment system. So, you can’t use cash for payments any more. You can pay directly with your smartphone or you can pay using your company ID card. The total amount put on your company ID card comes off your salary at the end of each month.<br>我想告诉大家的另一件事是，食堂现在已经引入了无现金支付系统。因此，您不能再使用现金付款。您可以直接使用智能手机付款，也可以使用公司 ID 卡付款。您公司 ID 卡上的总金额会在每个月底从您的工资中扣除。</p><p>OK. That’s it? Are there any questions?<br>好的。就是这样？有没有问题？</p></blockquote><h4 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h4><p>Listening B1: A phone call from a customer – 1</p><ul><li>Question</li></ul><img src="/2024/03/26/a2-listening-01-morning-briefing/image-20240326182002446.png" class="" title="image-20240326182002446"><blockquote><ol><li><p>The briefing will be short this morning.</p></li><li><p>The new head of department is starting this week.</p></li><li><p>The car park will be closed for improvements.</p></li><li><p>If you arrive first thing in the morning, you should park on Brown Street.</p></li><li><p>There will be no parking in the church car park after 6 p.m.</p></li><li><p>You can only pay with credit and debit cards in the canteen.</p></li><li><p>今天上午的通报会很简短。</p></li><li><p>新的部门主管本周上任。</p></li><li><p>停车场将关闭以进行改善。</p></li><li><p>如果你早上第一件事就是到达，你应该把车停在布朗街。</p></li><li><p>下午6点后教堂停车场将不再停车。</p></li><li><p>食堂内只能使用信用卡和借记卡付款。</p></li></ol></blockquote><ul><li>Answer</li></ul><img src="/2024/03/26/a2-listening-01-morning-briefing/image-20240326182108580.png" class="" title="image-20240326182108580"><h4 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h4><ul><li><p>Question</p><img src="/2024/03/26/a2-listening-01-morning-briefing/image-20240326182324067.png" class="" title="image-20240326182324067"></li><li><p>Answer</p><img src="/2024/03/26/a2-listening-01-morning-briefing/image-20240326182256058.png" class="" title="image-20240326182256058"></li></ul><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><h4 id="canteen"><a href="#canteen" class="headerlink" title="canteen"></a>canteen</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;kænˈtiːn&#x2F;美&#x2F;kænˈtiːn&#x2F;</p><p>n.食堂，餐厅；水壶；餐具盒</p><p>高中 | CET4 | CET6 | 考研 | IELTS | 商务英语<br>复数canteens</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>canteen&#x2F;kænˈtiːn&#x2F;|CET4 TEM4<br>1.N-COUNT A canteen is a place in a factory or military base where meals or snacks are served to the people who work there. 食堂</p><p>•  Rennie had eaten his supper in the canteen.<br> 伦尼已在食堂吃过晚饭。</p><p>2.N-COUNT A canteen is a small metal or plastic bottle for carrying water and other drinks. Canteens are used by soldiers. (军用) 水壶</p><p>•  …a full canteen of water.<br> …一整壶的水。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>listening - A2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a2-reading</title>
    <link href="/2024/03/25/a2-reading-01-message-new-friend/"/>
    <url>/2024/03/25/a2-reading-01-message-new-friend/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/a1-a2-vocabulary-01-accessories/RS5963_459338427-low.jpg" alt="img"></p><h1 id="A-message-to-a-new-friend给新朋友的一封信"><a href="#A-message-to-a-new-friend给新朋友的一封信" class="headerlink" title="A message to a new friend给新朋友的一封信"></a>A message to a new friend给新朋友的一封信</h1><img src="/2024/03/25/a2-reading-01-message-new-friend/RS7845_ThinkstockPhotos-920597582-hig.jpg" class="" title="A message to a new friend"><p>Read a direct message on social media to practise and improve your reading skills. 在社交媒体上阅读直接消息，以练习和提高您的阅读技巧。</p><p>Do the preparation task first. Then read the text and do the exercises.先做好准备工作。然后阅读课文并做练习。</p><h3 id="Preparation准备"><a href="#Preparation准备" class="headerlink" title="Preparation准备"></a>Preparation准备</h3><ul><li><p>Question</p><blockquote><p>Choose the sentence (a or b) that is correct.<br>1.<br>    a. It was so nice to know you last week.<br>    b. It was so nice to meet you last week.<br>2.<br>    a. I hope you got home OK.<br>    b. I wait you got home OK.<br>3.<br>    a. Here’s a photo of me.<br>    b. Here a photo of me.<br>4.<br>    a. Good memories.<br>    b. Good remembers.<br>5.<br>    a. Please send me your email address.<br>    b. Please send your email address me.<br>6.<br>    a. Bye until soon.<br>    b. Bye for now.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>b</li><li>a</li><li>a</li><li>a</li><li>a</li><li>b</li></ol></blockquote></li></ul><h3 id="Reading-text阅读文字"><a href="#Reading-text阅读文字" class="headerlink" title="Reading text阅读文字"></a>Reading text阅读文字</h3><h4 id="English"><a href="#English" class="headerlink" title="English"></a>English</h4><blockquote><p>Hi Lucia</p><p>How are you? It was so nice to meet you last week in Sydney at the sales meeting. How was the rest of your trip? Did you see any kangaroos? I hope you got home to Mexico City OK.</p><p>Anyway, I have the documents about the new Berlin offices. We’re going to be open in three months. I moved here from London just last week. They are very nice offices, and the location is perfect. There are lots of restaurants, cafés and banks in the area. There’s also public transport; we are next to an U-Bahn (that is the name for the metro here). Maybe you can come and see them one day? I would love to show you Berlin, especially in the winter. You said you have never seen snow – you will see lots here!</p><p>Here’s a photo of you and me at the restaurant in Sydney. That was a very fun night! Remember the singing Englishman? Crazy! Please send me any other photos you have of that night. Good memories.</p><p>Please give me your email address and I will send you the documents.</p><p>Bye for now</p><p>Mikel</p></blockquote><h4 id="English-Chinese"><a href="#English-Chinese" class="headerlink" title="English-Chinese"></a>English-Chinese</h4><blockquote><p>Hi Lucia嗨露西娅</p><p>How are you? It was so nice to meet you last week in Sydney at the sales meeting. How was the rest of your trip? Did you see any kangaroos? I hope you got home to Mexico City OK.你好吗？很高兴上周在悉尼的销售会议上见到您。剩下的旅程怎么样？你看到袋鼠了吗？我希望你能顺利回到墨西哥城的家。</p><p>Anyway, I have the documents about the new Berlin offices. We’re going to be open in three months. I moved here from London just last week. They are very nice offices, and the location is perfect. There are lots of restaurants, cafés and banks in the area. There’s also public transport; we are next to an U-Bahn (that is the name for the metro here). Maybe you can come and see them one day? I would love to show you Berlin, especially in the winter. You said you have never seen snow – you will see lots here!不管怎样，我有关于新柏林办事处的文件。我们将在三个月后开业。我上周刚从伦敦搬到这里。他们是非常好的办公室，而且位置非常完美。该地区拥有许多餐馆、咖啡馆和银行。还有公共交通；我们毗邻地铁（U-Bahn）（这是这里地铁的名称）。也许有一天你可以来看他们？我很想向您展示柏林，尤其是在冬天。你说你从未见过雪——你会在这里看到很多雪！</p><p>Here’s a photo of you and me at the restaurant in Sydney. That was a very fun night! Remember the singing Englishman? Crazy! Please send me any other photos you have of that night. Good memories.这是你和我在悉尼餐厅的照片。那是一个非常有趣的夜晚！还记得那个唱歌的英国人吗？疯狂的！请把那天晚上的其他照片发给我。好的记忆。</p><p>Please give me your email address and I will send you the documents.请给我您的电子邮件地址，我会将文件发送给您。</p><p>Bye for now暂时再见</p><p>Mikel米克尔</p></blockquote><h3 id="Task-1任务1"><a href="#Task-1任务1" class="headerlink" title="Task 1任务1"></a>Task 1任务1</h3><ul><li><p>Question</p><blockquote><p>Match the sentences (a–d) with the places (1–4).<br>Places<br>1.Berlin<br>2.London<br>3.Mexico City<br>4.Sydney</p><p>Sentences<br>a.  Mikel and Lucia met here.<br>b.  Mikel’s new offices are here.<br>c.  Mikel used to live here.<br>d.  Lucia lives here.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>b</li><li>c</li><li>d</li><li>a</li></ol></blockquote></li></ul><h3 id="Task-2任务2"><a href="#Task-2任务2" class="headerlink" title="Task 2任务2"></a>Task 2任务2</h3><ul><li><p>Question</p><p>Are the sentences true or false?</p><table><thead><tr><th>1</th><th>Mikel and Lucia were friends from school.</th><th>TRUE</th><th>FALSE</th></tr></thead><tbody><tr><td>2</td><td>They work for a company that sells things.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>3</td><td>The new offices are in a very good location.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>4</td><td>There is a metro next to the offices.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>5</td><td>Mikel has never seen snow before.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>6</td><td>Mikel and Lucia had dinner together.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>7</td><td>Mikel doesn’t have Lucia’s email address.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>8</td><td>Lucia wants to send Mikel some documents.</td><td>TRUE</td><td>FALSE</td></tr></tbody></table></li><li><p>Answer</p><img src="/2024/03/25/a2-reading-01-message-new-friend/image-20240325121743302.png" class="" title="image-20240325121743302"></li></ul><h3 id="Discussion讨论"><a href="#Discussion讨论" class="headerlink" title="Discussion讨论"></a>Discussion讨论</h3><p>How do you make plans with friends? Email, messenger, phone calls or another way?你如何与朋友一起制定计划？电子邮件、即时通讯工具、电话还是其他方式？</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a2-reading - reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a2-reading</title>
    <link href="/2024/03/25/a2-reading-01-template/"/>
    <url>/2024/03/25/a2-reading-01-template/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/a1-a2-vocabulary-01-accessories/RS5963_459338427-low.jpg" alt="img"></p><h1 id="Accessories"><a href="#Accessories" class="headerlink" title="Accessories"></a>Accessories</h1><p>Do the exercises to learn the words for some accessories.</p><ul><li><p>Question</p><blockquote><p>beltrucksackhatglovesearringsnecklacepocketbraceletscarfbagglassescap</p></blockquote><p><img src="/a1-a2-vocabulary-01-accessories/image-20240324214035010.png" alt="image-20240324214035010"></p></li><li><p>Answer</p><p><img src="/a1-a2-vocabulary-01-accessories/image-20240324214250610.png" alt="image-20240324214250610"></p></li></ul><ul><li><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 1</a></li><li><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 2</a></li></ul><blockquote><p>This holds your trousers up. It goes around your waist.</p><p>belt</p><p>cap</p><p>necklace</p><p>You wear this on your head. It protects your head and eyes from the sun.</p><p>bag</p><p>cap</p><p>earrings</p><p>You wear these to see better.</p><p>glasses</p><p>pocket</p><p>scarf</p><p>You wear this on your back.</p><p>gloves</p><p>necklace</p><p>rucksack</p><p>You wear this to keep warm. It goes around your neck.</p><p>bracelet</p><p>hat</p><p>scarf</p><p>This is a place in your trousers or shirt. You can put things like your phone and money here.</p><p>cap</p><p>hat</p><p>pocket</p><p>You wear these on your hands when it’s cold.</p><p>earrings</p><p>gloves</p><p>hat</p><p>You wear these on your ears.</p><p>bag</p><p>earrings</p><p>necklace</p></blockquote><ul><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 3</a></p><blockquote><h2 id="Vocabulary-A1-A2-Accessories-Odd-one-out"><a href="#Vocabulary-A1-A2-Accessories-Odd-one-out" class="headerlink" title="Vocabulary A1-A2: Accessories - Odd one out"></a>Vocabulary A1-A2: Accessories - Odd one out</h2><p>Choose the things that DO NOT belong.</p><p>Things we wear on our head or neck</p><p>cap</p><p>earrings</p><p>glasses</p><p>pocket</p><p>scarf</p><p>Things for carrying other things</p><p>bag</p><p>cap</p><p>pocket</p><p>rucksack</p><p>We usually wear only one of these</p><p>belt</p><p>cap</p><p>earring</p><p>rucksack</p><p>scarf</p></blockquote></li><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 4</a></p></li><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 5</a></p></li></ul><h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><p>Do you have an accessory that is special in some way? Tell us about it.</p><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><h4 id="belt"><a href="#belt" class="headerlink" title="belt"></a>belt</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;belt&#x2F;美&#x2F;belt&#x2F;n.腰带，皮带；传送带；地带；v.用腰带系紧；狠打，猛击；（尤指出于惩罚用皮带）抽打，打击（某人）；&lt;非正式&gt;飞驰【名】 （Belt）（英、法、德、西）贝尔特（人名）</p><p>初中 | 高中 | CET4 | CET6 | 考研 | IELTS | TOEFL | 商务英语<br>复数belts第三人称单数belts现在分词belting过去式belted</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>belt&#x2F;bɛlt&#x2F;|CET4 TEM4<br>beltingbeltedbelts<br>1.N-COUNT A belt is a strip of leather or cloth that you fasten around your waist. 腰带; 皮带</p><p>•  He wore a belt with a large brass buckle.<br> 他系着一条缀有一颗大铜扣的皮带。</p><p>2.→see also safety belt→see also seat belt</p><p>safety belt<br>N-COUNT A safety belt is a strap attached to a seat in a car or aeroplane. You fasten it around your body and it stops you from being thrown forward if there is an accident. 安全带</p><p>•  Please return to your seats and fasten your safety belts.<br> 请回到你们的座位上并系好安全带。</p><p>seat belt<br>N-COUNT A seat belt is a strap attached to a seat in a car or an aircraft. You fasten it across your body in order to prevent yourself being thrown out of the seat if there is a sudden movement or stop. (汽车、飞机座椅上的) 安全带</p><p>•  The fact I was wearing a seat belt saved my life.<br> 我系着安全带，幸免于难。</p><p>3.N-COUNT A belt in a machine is a circular strip of rubber that is used to drive moving parts or to move objects along. 输送带</p><p>•  The turning disc is connected by a drive belt to an electric motor.<br> 转盘与电动马达之间由一条输送带连接。</p><p>4.→see also conveyor belt</p><p>conveyor belt&#x2F;kənˈveɪə bɛlt&#x2F;<br>N-COUNT A conveyor belt or a conveyor is a continuously moving strip of rubber or metal which is used in factories for moving objects along so that they can be dealt with as quickly as possible. 传送带</p><p>•  The damp bricks went along a conveyor belt into another shed to dry.<br> 潮湿的砖块沿着传送带进入另一个棚子进行干燥。</p><p>5.N-COUNT A belt of land or sea is a long, narrow area of it that has some special feature. 狭长地带</p><p>•  Miners in Zambia’s northern copper belt have gone on strike.<br> 赞比亚北部铜矿区的矿工们举行了罢工。</p><p>6.→see also commuter belt→see also green belt</p><p>commuter belt<br>N-COUNT A commuter belt is the area surrounding a large city, where many people who work in the city live. (大城市周边的) 通勤者居住带</p><p>•  …people who live in the commuter belt around the capital.<br> …居住在首都周边通勤者居住带的人们。</p><p>7.V-T If someone belts you, they hit you very hard. If someone belts something, they hit it very hard. 狠揍; 猛打</p><p>•  “Is it right she belted old George in the gut?” she asked.<br> “她狠揍老乔治的肚子对吗？”她质问道。</p><p>•  Torrealba belted the ball into the left-field bleachers.<br> 托雷尔巴把球猛打到左边的看台上。</p><p>8.N-COUNT Belt is also a noun. 狠揍; 猛打</p><p>•  Father would give you a belt over the head with the scrubbing brush.<br> 父亲会拿板刷狠狠地敲你的头。</p><p>9.V-I If you belt somewhere, you move or travel there very fast. 飞奔</p><p>•  Darren and I belted down the stairs and ran out of the house.<br> 达伦和我飞奔下楼，跑出了屋子。</p><p>10.PHRASE Something that is below the belt is cruel and unfair. 不公正的</p><p>•  Do you think it’s a bit below the belt what they’re doing?<br> 你认为他们的所作所为有点不太公正吗？</p><p>11.PHRASE If you have to tighten your belt, you have to spend less money and manage without things because you have less money than you used to have. 省吃俭用</p><p>•  Clearly, if you are spending more than your income, you’ll need to tighten your belt.<br> 很显然，如果你现在花钱就入不敷出，以后就不得不勒紧腰带了。</p><p>12.PHRASE If you have something under your belt, you have already achieved it or done it. 已成囊中之物</p><p>•  Clare is now a full-time author with six books, including four novels, under her belt.<br> 克莱尔现在是个名下有6本书的专职作家，其中包括4本小说。</p></blockquote><h4 id="rucksack"><a href="#rucksack" class="headerlink" title="rucksack"></a>rucksack</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈrʌksæk&#x2F;美&#x2F;ˈrʌksæk&#x2F;n.帆布背包</p><p>复数rucksacks</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>rucksack&#x2F;ˈrʌkˌsæk&#x2F;|TEM8<br>N-COUNT A rucksack is a bag with straps that go over your shoulders, so that you can carry things on your back, for example when you are walking or climbing. 双肩背</p><p>In his rucksack he carried, besides pencils and notebooks, poetry.在他的帆布背包里，除了铅笔、笔记本外，他还带了诗集。</p><p>My rucksack seems to have gone walkabout.我的旅行包好像是丢了。</p></blockquote><h4 id="strap"><a href="#strap" class="headerlink" title="strap"></a>strap</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;stræp&#x2F;美&#x2F;stræp&#x2F;n.带子，皮带；铁皮条，金属带，铰链片；鞭打（the strap）；拉手吊带，拉手吊环；v.（用带子）束住，捆绑；用绷带包扎（伤口）；用皮鞭抽打，鞭打</p><p>CET4 | CET6 | 考研 | IELTS | TOEFL<br>复数straps第三人称单数straps现在分词strapping过去式strapped过去分词strapped</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>strap&#x2F;stræp&#x2F;|CET4 TEM4<br>strappingstrappedstraps<br>1.N-COUNT A strap is a narrow piece of leather, cloth, or other material. Straps are used to carry things, fasten things together, or to hold a piece of clothing in place. 带子</p><p>•  Nancy gripped the strap of her beach bag.<br> 南希抓住自己海滩休闲包的带子。</p><p>•  She pulled the strap of her nightgown onto her shoulder.<br> 她把睡衣的带子拉到她的肩上。</p><p>2.V-T If you strap something somewhere, you fasten it there with a strap. 用带子绑</p><p>•  She strapped the baby seat into the car.<br> 她把婴儿座椅用带子绑在那辆汽车上。</p></blockquote><h4 id="bracelet"><a href="#bracelet" class="headerlink" title="bracelet"></a>bracelet</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈbreɪslət&#x2F;美&#x2F;ˈbreɪslət&#x2F;n.手镯，臂镯</p><p>GRE<br>复数bracelets</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>bracelet&#x2F;ˈbreɪslɪt&#x2F;|CET6+ TEM4<br>N-COUNT A bracelet is a chain or band, usually made of metal, that you wear around your wrist as jewellery. 手镯</p><p>Hanging from his right wrist is a heavy gold bracelet.<br>从他的右腕上垂下的是一只沉甸甸的金手镯。<br>Inside was a gold charm bracelet, with one charm on it - a star.<br>里面是个金制挂坠手链，上面有一个挂坠——一颗星星。</p></blockquote><h4 id="scarf"><a href="#scarf" class="headerlink" title="scarf"></a>scarf</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;skɑːf&#x2F;美&#x2F;skɑːrf&#x2F;n.围巾，披巾，头巾；（嵌接的）斜面，斜嵌槽；鲸脂的切口；v.&lt;美，非正式&gt;狼吞虎咽地吃；嵌接，斜接（木材，金属）；切割（鲸）脂；【名】 （Scarf）（英）斯卡夫（人名）</p><p>初中 | 高中 | 考研 | TOEFL<br>复数scarves或scarfs第三人称单数scarfs现在分词scarfing过去式scarfed过去分词scarfed</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>scarf&#x2F;skɑːf&#x2F;|CET6+ TEM4<br>N-COUNT A scarf is a piece of cloth that you wear around your neck or head, usually to keep yourself warm. 围巾</p><p>•  He reached up to loosen the scarf around his neck.<br> 他伸出手松开围在脖子上的围巾。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a2-reading - reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>An airport notice机场通知</title>
    <link href="/2024/03/25/a2-reading-02-airport-notice/"/>
    <url>/2024/03/25/a2-reading-02-airport-notice/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="An-airport-notice机场通知"><a href="#An-airport-notice机场通知" class="headerlink" title="An airport notice机场通知"></a>An airport notice机场通知</h1><img src="/2024/03/25/a2-reading-02-airport-notice/RS6097_ThinkstockPhotos-495122492-17113411183292.jpg" class="" title="img"><p>Read a notice at the airport and answer the questions to practise reading important information.阅读机场通知并回答问题以练习阅读重要信息。</p><p>Do the preparation task first. Then read the text and do the exercises.先做好准备工作。然后阅读课文并做练习。</p><h3 id="Preparation准备"><a href="#Preparation准备" class="headerlink" title="Preparation准备"></a>Preparation准备</h3><ul><li><p>Question</p><blockquote><p>Choose the sentence (a or b) that is correct.<br>1.<br>    a. It was so nice to know you last week.<br>    b. It was so nice to meet you last week.<br>2.<br>    a. I hope you got home OK.<br>    b. I wait you got home OK.<br>3.<br>    a. Here’s a photo of me.<br>    b. Here a photo of me.<br>4.<br>    a. Good memories.<br>    b. Good remembers.<br>5.<br>    a. Please send me your email address.<br>    b. Please send your email address me.<br>6.<br>    a. Bye until soon.<br>    b. Bye for now.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>b</li><li>a</li><li>a</li><li>a</li><li>a</li><li>b</li></ol></blockquote></li></ul><h3 id="Reading-text阅读文字"><a href="#Reading-text阅读文字" class="headerlink" title="Reading text阅读文字"></a>Reading text阅读文字</h3><h4 id="English"><a href="#English" class="headerlink" title="English"></a>English</h4><blockquote><h3 id="What-can-I-take-on-the-plane-as-hand-luggage"><a href="#What-can-I-take-on-the-plane-as-hand-luggage" class="headerlink" title="What can I take on the plane as hand luggage?"></a>What can I take on the plane as hand luggage?</h3><p>Please note that passengers can only take ONE suitcase onto the plane. It must be no bigger than 55cm x 22cm x 35cm and weigh no more than 10kg.</p><p>You can also take one small laptop bag or handbag that can fit under the seat in front of you. If you have two bags, their total weight cannot be more than 10kg. If your bag is too big or too heavy, you will not be allowed to take it onto the plane. Staff will put it in the hold for you and you will have to pay extra.</p><p>Please make sure mobile phones and other devices are fully-charged so security staff can check them.</p><p>Liquids in bottles bigger than 100ml are allowed on board if you buy them in the airport shops after you’ve passed security. </p><p>We hope you enjoy your flight!</p></blockquote><h4 id="English-Chinese"><a href="#English-Chinese" class="headerlink" title="English-Chinese"></a>English-Chinese</h4><blockquote><h3 id="What-can-I-take-on-the-plane-as-hand-luggage-我可以携带什么作为手提行李登机？"><a href="#What-can-I-take-on-the-plane-as-hand-luggage-我可以携带什么作为手提行李登机？" class="headerlink" title="What can I take on the plane as hand luggage?我可以携带什么作为手提行李登机？"></a>What can I take on the plane as hand luggage?我可以携带什么作为手提行李登机？</h3><p>Please note that passengers can only take ONE suitcase onto the plane. It must be no bigger than 55cm x 22cm x 35cm and weigh no more than 10kg.请注意，乘客只能携带一件行李箱登机。尺寸不得超过 55 厘米 x 22 厘米 x 35 厘米，重量不得超过 10 公斤。</p><p>You can also take one small laptop bag or handbag that can fit under the seat in front of you. If you have two bags, their total weight cannot be more than 10kg. If your bag is too big or too heavy, you will not be allowed to take it onto the plane. Staff will put it in the hold for you and you will have to pay extra.您还可以带一个小笔记本电脑包或手提包，放在您前面的座位下面。如果您有两件行李，总重量不能超过 10 公斤。如果您的行李太大或太重，您将不被允许携带上飞机。工作人员会帮您寄存，您需要支付额外费用。</p><p>Please make sure mobile phones and other devices are fully-charged so security staff can check them.请确保手机和其他设备电量充足，以便安检人员检查。</p><p>Liquids in bottles bigger than 100ml are allowed on board if you buy them in the airport shops after you’ve passed security. 如果您通过安检后在机场商店购买，则可以携带大于 100 毫升的瓶装液体登机。</p><p>We hope you enjoy your flight!我们希望您飞行愉快！</p></blockquote><h3 id="Task-1任务1"><a href="#Task-1任务1" class="headerlink" title="Task 1任务1"></a>Task 1任务1</h3><ul><li><p>Question</p><p>Choose the correct answer.</p><blockquote><p>How many bags can you take as hand luggage?</p><p>1</p><p>2</p><p>10</p></blockquote><blockquote><p>Which of these can NOT go as hand luggage?</p><p>A suitcase and handbag that weigh 10kg in total.</p><p>A suitcase, a laptop and a handbag that weigh 10kg in total.</p><p>A suitcase and a laptop that weigh 5kg each.</p></blockquote><blockquote><p>Which thing can you NOT take in your hand luggage?</p><p>A mobile phone that doesn’t work.</p><p>A 500ml bottle of water from a shop after airport security.</p><p>A 100ml liquid soap from home.</p></blockquote><blockquote><p>What will happen to hand luggage that weighs 11kg?</p><p>You can keep it with you on the plane if you pay extra.</p><p>It can’t go on the plane.</p><p>It has to go under the plane.</p></blockquote></li><li><p>Answer</p><img src="/2024/03/25/a2-reading-02-airport-notice/image-20240325130919274.png" class="" title="image-20240325130919274"><img src="/2024/03/25/a2-reading-02-airport-notice/image-20240325130853383.png" class="" title="image-20240325130853383"><img src="/2024/03/25/a2-reading-02-airport-notice/image-20240325130827458.png" class="" title="image-20240325130827458"><img src="/2024/03/25/a2-reading-02-airport-notice/image-20240325130755368.png" class="" title="image-20240325130755368"></li></ul><h3 id="Task-2任务2"><a href="#Task-2任务2" class="headerlink" title="Task 2任务2"></a>Task 2任务2</h3><ul><li><p>Question</p><img src="/2024/03/25/a2-reading-02-airport-notice/image-20240325130958870.png" class="" title="image-20240325130958870"></li><li><p>Answer</p><img src="/2024/03/25/a2-reading-02-airport-notice/image-20240325131122215.png" class="" title="image-20240325131122215"></li></ul><h3 id="Discussion讨论"><a href="#Discussion讨论" class="headerlink" title="Discussion讨论"></a>Discussion讨论</h3><p>Do you like to fly with only hand luggage?您喜欢只携带手提行李飞行吗？</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a2-reading - reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a2-reading</title>
    <link href="/2024/03/25/a2-reading-03-email-friend/"/>
    <url>/2024/03/25/a2-reading-03-email-friend/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/a1-a2-vocabulary-01-accessories/RS5963_459338427-low.jpg" alt="img"></p><h1 id="A-message-to-a-new-friend给新朋友的一封信"><a href="#A-message-to-a-new-friend给新朋友的一封信" class="headerlink" title="A message to a new friend给新朋友的一封信"></a>A message to a new friend给新朋友的一封信</h1><p><img src="/a2-reading-01-message-new-friend/RS7845_ThinkstockPhotos-920597582-hig.jpg" alt="A message to a new friend"></p><p>Read a direct message on social media to practise and improve your reading skills. 在社交媒体上阅读直接消息，以练习和提高您的阅读技巧。</p><p>Do the preparation task first. Then read the text and do the exercises.先做好准备工作。然后阅读课文并做练习。</p><h3 id="Preparation准备"><a href="#Preparation准备" class="headerlink" title="Preparation准备"></a>Preparation准备</h3><ul><li><p>Question</p><blockquote><p>Choose the sentence (a or b) that is correct.<br>1.<br>    a. It was so nice to know you last week.<br>    b. It was so nice to meet you last week.<br>2.<br>    a. I hope you got home OK.<br>    b. I wait you got home OK.<br>3.<br>    a. Here’s a photo of me.<br>    b. Here a photo of me.<br>4.<br>    a. Good memories.<br>    b. Good remembers.<br>5.<br>    a. Please send me your email address.<br>    b. Please send your email address me.<br>6.<br>    a. Bye until soon.<br>    b. Bye for now.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>b</li><li>a</li><li>a</li><li>a</li><li>a</li><li>b</li></ol></blockquote></li></ul><h3 id="Reading-text阅读文字"><a href="#Reading-text阅读文字" class="headerlink" title="Reading text阅读文字"></a>Reading text阅读文字</h3><h4 id="English"><a href="#English" class="headerlink" title="English"></a>English</h4><blockquote><p>Hi Lucia</p><p>How are you? It was so nice to meet you last week in Sydney at the sales meeting. How was the rest of your trip? Did you see any kangaroos? I hope you got home to Mexico City OK.</p><p>Anyway, I have the documents about the new Berlin offices. We’re going to be open in three months. I moved here from London just last week. They are very nice offices, and the location is perfect. There are lots of restaurants, cafés and banks in the area. There’s also public transport; we are next to an U-Bahn (that is the name for the metro here). Maybe you can come and see them one day? I would love to show you Berlin, especially in the winter. You said you have never seen snow – you will see lots here!</p><p>Here’s a photo of you and me at the restaurant in Sydney. That was a very fun night! Remember the singing Englishman? Crazy! Please send me any other photos you have of that night. Good memories.</p><p>Please give me your email address and I will send you the documents.</p><p>Bye for now</p><p>Mikel</p></blockquote><h4 id="English-Chinese"><a href="#English-Chinese" class="headerlink" title="English-Chinese"></a>English-Chinese</h4><blockquote><p>Hi Lucia嗨露西娅</p><p>How are you? It was so nice to meet you last week in Sydney at the sales meeting. How was the rest of your trip? Did you see any kangaroos? I hope you got home to Mexico City OK.你好吗？很高兴上周在悉尼的销售会议上见到您。剩下的旅程怎么样？你看到袋鼠了吗？我希望你能顺利回到墨西哥城的家。</p><p>Anyway, I have the documents about the new Berlin offices. We’re going to be open in three months. I moved here from London just last week. They are very nice offices, and the location is perfect. There are lots of restaurants, cafés and banks in the area. There’s also public transport; we are next to an U-Bahn (that is the name for the metro here). Maybe you can come and see them one day? I would love to show you Berlin, especially in the winter. You said you have never seen snow – you will see lots here!不管怎样，我有关于新柏林办事处的文件。我们将在三个月后开业。我上周刚从伦敦搬到这里。他们是非常好的办公室，而且位置非常完美。该地区拥有许多餐馆、咖啡馆和银行。还有公共交通；我们毗邻地铁（U-Bahn）（这是这里地铁的名称）。也许有一天你可以来看他们？我很想向您展示柏林，尤其是在冬天。你说你从未见过雪——你会在这里看到很多雪！</p><p>Here’s a photo of you and me at the restaurant in Sydney. That was a very fun night! Remember the singing Englishman? Crazy! Please send me any other photos you have of that night. Good memories.这是你和我在悉尼餐厅的照片。那是一个非常有趣的夜晚！还记得那个唱歌的英国人吗？疯狂的！请把那天晚上的其他照片发给我。好的记忆。</p><p>Please give me your email address and I will send you the documents.请给我您的电子邮件地址，我会将文件发送给您。</p><p>Bye for now暂时再见</p><p>Mikel米克尔</p></blockquote><h3 id="Task-1任务1"><a href="#Task-1任务1" class="headerlink" title="Task 1任务1"></a>Task 1任务1</h3><ul><li><p>Question</p><blockquote><p>Match the sentences (a–d) with the places (1–4).<br>Places<br>1.Berlin<br>2.London<br>3.Mexico City<br>4.Sydney</p><p>Sentences<br>a.  Mikel and Lucia met here.<br>b.  Mikel’s new offices are here.<br>c.  Mikel used to live here.<br>d.  Lucia lives here.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>b</li><li>c</li><li>d</li><li>a</li></ol></blockquote></li></ul><h3 id="Task-2任务2"><a href="#Task-2任务2" class="headerlink" title="Task 2任务2"></a>Task 2任务2</h3><ul><li><p>Question</p><p>Are the sentences true or false?</p><table><thead><tr><th>1</th><th>Mikel and Lucia were friends from school.</th><th>TRUE</th><th>FALSE</th></tr></thead><tbody><tr><td>2</td><td>They work for a company that sells things.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>3</td><td>The new offices are in a very good location.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>4</td><td>There is a metro next to the offices.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>5</td><td>Mikel has never seen snow before.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>6</td><td>Mikel and Lucia had dinner together.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>7</td><td>Mikel doesn’t have Lucia’s email address.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>8</td><td>Lucia wants to send Mikel some documents.</td><td>TRUE</td><td>FALSE</td></tr></tbody></table></li><li><p>Answer</p><p><img src="/a2-reading-01-message-new-friend/image-20240325121743302.png" alt="image-20240325121743302"></p></li></ul><h3 id="Discussion讨论"><a href="#Discussion讨论" class="headerlink" title="Discussion讨论"></a>Discussion讨论</h3><p>How do you make plans with friends? Email, messenger, phone calls or another way?你如何与朋友一起制定计划？电子邮件、即时通讯工具、电话还是其他方式？</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a2-reading - reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a2-reading</title>
    <link href="/2024/03/25/a2-reading-04-end-term-report/"/>
    <url>/2024/03/25/a2-reading-04-end-term-report/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/a1-a2-vocabulary-01-accessories/RS5963_459338427-low.jpg" alt="img"></p><h1 id="A-message-to-a-new-friend给新朋友的一封信"><a href="#A-message-to-a-new-friend给新朋友的一封信" class="headerlink" title="A message to a new friend给新朋友的一封信"></a>A message to a new friend给新朋友的一封信</h1><p><img src="/a2-reading-01-message-new-friend/RS7845_ThinkstockPhotos-920597582-hig.jpg" alt="A message to a new friend"></p><p>Read a direct message on social media to practise and improve your reading skills. 在社交媒体上阅读直接消息，以练习和提高您的阅读技巧。</p><p>Do the preparation task first. Then read the text and do the exercises.先做好准备工作。然后阅读课文并做练习。</p><h3 id="Preparation准备"><a href="#Preparation准备" class="headerlink" title="Preparation准备"></a>Preparation准备</h3><ul><li><p>Question</p><blockquote><p>Choose the sentence (a or b) that is correct.<br>1.<br>    a. It was so nice to know you last week.<br>    b. It was so nice to meet you last week.<br>2.<br>    a. I hope you got home OK.<br>    b. I wait you got home OK.<br>3.<br>    a. Here’s a photo of me.<br>    b. Here a photo of me.<br>4.<br>    a. Good memories.<br>    b. Good remembers.<br>5.<br>    a. Please send me your email address.<br>    b. Please send your email address me.<br>6.<br>    a. Bye until soon.<br>    b. Bye for now.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>b</li><li>a</li><li>a</li><li>a</li><li>a</li><li>b</li></ol></blockquote></li></ul><h3 id="Reading-text阅读文字"><a href="#Reading-text阅读文字" class="headerlink" title="Reading text阅读文字"></a>Reading text阅读文字</h3><h4 id="English"><a href="#English" class="headerlink" title="English"></a>English</h4><blockquote><p>Hi Lucia</p><p>How are you? It was so nice to meet you last week in Sydney at the sales meeting. How was the rest of your trip? Did you see any kangaroos? I hope you got home to Mexico City OK.</p><p>Anyway, I have the documents about the new Berlin offices. We’re going to be open in three months. I moved here from London just last week. They are very nice offices, and the location is perfect. There are lots of restaurants, cafés and banks in the area. There’s also public transport; we are next to an U-Bahn (that is the name for the metro here). Maybe you can come and see them one day? I would love to show you Berlin, especially in the winter. You said you have never seen snow – you will see lots here!</p><p>Here’s a photo of you and me at the restaurant in Sydney. That was a very fun night! Remember the singing Englishman? Crazy! Please send me any other photos you have of that night. Good memories.</p><p>Please give me your email address and I will send you the documents.</p><p>Bye for now</p><p>Mikel</p></blockquote><h4 id="English-Chinese"><a href="#English-Chinese" class="headerlink" title="English-Chinese"></a>English-Chinese</h4><blockquote><p>Hi Lucia嗨露西娅</p><p>How are you? It was so nice to meet you last week in Sydney at the sales meeting. How was the rest of your trip? Did you see any kangaroos? I hope you got home to Mexico City OK.你好吗？很高兴上周在悉尼的销售会议上见到您。剩下的旅程怎么样？你看到袋鼠了吗？我希望你能顺利回到墨西哥城的家。</p><p>Anyway, I have the documents about the new Berlin offices. We’re going to be open in three months. I moved here from London just last week. They are very nice offices, and the location is perfect. There are lots of restaurants, cafés and banks in the area. There’s also public transport; we are next to an U-Bahn (that is the name for the metro here). Maybe you can come and see them one day? I would love to show you Berlin, especially in the winter. You said you have never seen snow – you will see lots here!不管怎样，我有关于新柏林办事处的文件。我们将在三个月后开业。我上周刚从伦敦搬到这里。他们是非常好的办公室，而且位置非常完美。该地区拥有许多餐馆、咖啡馆和银行。还有公共交通；我们毗邻地铁（U-Bahn）（这是这里地铁的名称）。也许有一天你可以来看他们？我很想向您展示柏林，尤其是在冬天。你说你从未见过雪——你会在这里看到很多雪！</p><p>Here’s a photo of you and me at the restaurant in Sydney. That was a very fun night! Remember the singing Englishman? Crazy! Please send me any other photos you have of that night. Good memories.这是你和我在悉尼餐厅的照片。那是一个非常有趣的夜晚！还记得那个唱歌的英国人吗？疯狂的！请把那天晚上的其他照片发给我。好的记忆。</p><p>Please give me your email address and I will send you the documents.请给我您的电子邮件地址，我会将文件发送给您。</p><p>Bye for now暂时再见</p><p>Mikel米克尔</p></blockquote><h3 id="Task-1任务1"><a href="#Task-1任务1" class="headerlink" title="Task 1任务1"></a>Task 1任务1</h3><ul><li><p>Question</p><blockquote><p>Match the sentences (a–d) with the places (1–4).<br>Places<br>1.Berlin<br>2.London<br>3.Mexico City<br>4.Sydney</p><p>Sentences<br>a.  Mikel and Lucia met here.<br>b.  Mikel’s new offices are here.<br>c.  Mikel used to live here.<br>d.  Lucia lives here.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>b</li><li>c</li><li>d</li><li>a</li></ol></blockquote></li></ul><h3 id="Task-2任务2"><a href="#Task-2任务2" class="headerlink" title="Task 2任务2"></a>Task 2任务2</h3><ul><li><p>Question</p><p>Are the sentences true or false?</p><table><thead><tr><th>1</th><th>Mikel and Lucia were friends from school.</th><th>TRUE</th><th>FALSE</th></tr></thead><tbody><tr><td>2</td><td>They work for a company that sells things.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>3</td><td>The new offices are in a very good location.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>4</td><td>There is a metro next to the offices.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>5</td><td>Mikel has never seen snow before.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>6</td><td>Mikel and Lucia had dinner together.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>7</td><td>Mikel doesn’t have Lucia’s email address.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>8</td><td>Lucia wants to send Mikel some documents.</td><td>TRUE</td><td>FALSE</td></tr></tbody></table></li><li><p>Answer</p><p><img src="/a2-reading-01-message-new-friend/image-20240325121743302.png" alt="image-20240325121743302"></p></li></ul><h3 id="Discussion讨论"><a href="#Discussion讨论" class="headerlink" title="Discussion讨论"></a>Discussion讨论</h3><p>How do you make plans with friends? Email, messenger, phone calls or another way?你如何与朋友一起制定计划？电子邮件、即时通讯工具、电话还是其他方式？</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a2-reading - reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a2-reading</title>
    <link href="/2024/03/25/a2-reading-05-infographic-forgetting-curve/"/>
    <url>/2024/03/25/a2-reading-05-infographic-forgetting-curve/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/a1-a2-vocabulary-01-accessories/RS5963_459338427-low.jpg" alt="img"></p><h1 id="A-message-to-a-new-friend给新朋友的一封信"><a href="#A-message-to-a-new-friend给新朋友的一封信" class="headerlink" title="A message to a new friend给新朋友的一封信"></a>A message to a new friend给新朋友的一封信</h1><p><img src="/a2-reading-01-message-new-friend/RS7845_ThinkstockPhotos-920597582-hig.jpg" alt="A message to a new friend"></p><p>Read a direct message on social media to practise and improve your reading skills. 在社交媒体上阅读直接消息，以练习和提高您的阅读技巧。</p><p>Do the preparation task first. Then read the text and do the exercises.先做好准备工作。然后阅读课文并做练习。</p><h3 id="Preparation准备"><a href="#Preparation准备" class="headerlink" title="Preparation准备"></a>Preparation准备</h3><ul><li><p>Question</p><blockquote><p>Choose the sentence (a or b) that is correct.<br>1.<br>    a. It was so nice to know you last week.<br>    b. It was so nice to meet you last week.<br>2.<br>    a. I hope you got home OK.<br>    b. I wait you got home OK.<br>3.<br>    a. Here’s a photo of me.<br>    b. Here a photo of me.<br>4.<br>    a. Good memories.<br>    b. Good remembers.<br>5.<br>    a. Please send me your email address.<br>    b. Please send your email address me.<br>6.<br>    a. Bye until soon.<br>    b. Bye for now.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>b</li><li>a</li><li>a</li><li>a</li><li>a</li><li>b</li></ol></blockquote></li></ul><h3 id="Reading-text阅读文字"><a href="#Reading-text阅读文字" class="headerlink" title="Reading text阅读文字"></a>Reading text阅读文字</h3><h4 id="English"><a href="#English" class="headerlink" title="English"></a>English</h4><blockquote><p>Hi Lucia</p><p>How are you? It was so nice to meet you last week in Sydney at the sales meeting. How was the rest of your trip? Did you see any kangaroos? I hope you got home to Mexico City OK.</p><p>Anyway, I have the documents about the new Berlin offices. We’re going to be open in three months. I moved here from London just last week. They are very nice offices, and the location is perfect. There are lots of restaurants, cafés and banks in the area. There’s also public transport; we are next to an U-Bahn (that is the name for the metro here). Maybe you can come and see them one day? I would love to show you Berlin, especially in the winter. You said you have never seen snow – you will see lots here!</p><p>Here’s a photo of you and me at the restaurant in Sydney. That was a very fun night! Remember the singing Englishman? Crazy! Please send me any other photos you have of that night. Good memories.</p><p>Please give me your email address and I will send you the documents.</p><p>Bye for now</p><p>Mikel</p></blockquote><h4 id="English-Chinese"><a href="#English-Chinese" class="headerlink" title="English-Chinese"></a>English-Chinese</h4><blockquote><p>Hi Lucia嗨露西娅</p><p>How are you? It was so nice to meet you last week in Sydney at the sales meeting. How was the rest of your trip? Did you see any kangaroos? I hope you got home to Mexico City OK.你好吗？很高兴上周在悉尼的销售会议上见到您。剩下的旅程怎么样？你看到袋鼠了吗？我希望你能顺利回到墨西哥城的家。</p><p>Anyway, I have the documents about the new Berlin offices. We’re going to be open in three months. I moved here from London just last week. They are very nice offices, and the location is perfect. There are lots of restaurants, cafés and banks in the area. There’s also public transport; we are next to an U-Bahn (that is the name for the metro here). Maybe you can come and see them one day? I would love to show you Berlin, especially in the winter. You said you have never seen snow – you will see lots here!不管怎样，我有关于新柏林办事处的文件。我们将在三个月后开业。我上周刚从伦敦搬到这里。他们是非常好的办公室，而且位置非常完美。该地区拥有许多餐馆、咖啡馆和银行。还有公共交通；我们毗邻地铁（U-Bahn）（这是这里地铁的名称）。也许有一天你可以来看他们？我很想向您展示柏林，尤其是在冬天。你说你从未见过雪——你会在这里看到很多雪！</p><p>Here’s a photo of you and me at the restaurant in Sydney. That was a very fun night! Remember the singing Englishman? Crazy! Please send me any other photos you have of that night. Good memories.这是你和我在悉尼餐厅的照片。那是一个非常有趣的夜晚！还记得那个唱歌的英国人吗？疯狂的！请把那天晚上的其他照片发给我。好的记忆。</p><p>Please give me your email address and I will send you the documents.请给我您的电子邮件地址，我会将文件发送给您。</p><p>Bye for now暂时再见</p><p>Mikel米克尔</p></blockquote><h3 id="Task-1任务1"><a href="#Task-1任务1" class="headerlink" title="Task 1任务1"></a>Task 1任务1</h3><ul><li><p>Question</p><blockquote><p>Match the sentences (a–d) with the places (1–4).<br>Places<br>1.Berlin<br>2.London<br>3.Mexico City<br>4.Sydney</p><p>Sentences<br>a.  Mikel and Lucia met here.<br>b.  Mikel’s new offices are here.<br>c.  Mikel used to live here.<br>d.  Lucia lives here.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>b</li><li>c</li><li>d</li><li>a</li></ol></blockquote></li></ul><h3 id="Task-2任务2"><a href="#Task-2任务2" class="headerlink" title="Task 2任务2"></a>Task 2任务2</h3><ul><li><p>Question</p><p>Are the sentences true or false?</p><table><thead><tr><th>1</th><th>Mikel and Lucia were friends from school.</th><th>TRUE</th><th>FALSE</th></tr></thead><tbody><tr><td>2</td><td>They work for a company that sells things.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>3</td><td>The new offices are in a very good location.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>4</td><td>There is a metro next to the offices.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>5</td><td>Mikel has never seen snow before.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>6</td><td>Mikel and Lucia had dinner together.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>7</td><td>Mikel doesn’t have Lucia’s email address.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>8</td><td>Lucia wants to send Mikel some documents.</td><td>TRUE</td><td>FALSE</td></tr></tbody></table></li><li><p>Answer</p><p><img src="/a2-reading-01-message-new-friend/image-20240325121743302.png" alt="image-20240325121743302"></p></li></ul><h3 id="Discussion讨论"><a href="#Discussion讨论" class="headerlink" title="Discussion讨论"></a>Discussion讨论</h3><p>How do you make plans with friends? Email, messenger, phone calls or another way?你如何与朋友一起制定计划？电子邮件、即时通讯工具、电话还是其他方式？</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a2-reading - reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a2-reading</title>
    <link href="/2024/03/25/a2-reading-06-invitation-job-interview/"/>
    <url>/2024/03/25/a2-reading-06-invitation-job-interview/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/a1-a2-vocabulary-01-accessories/RS5963_459338427-low.jpg" alt="img"></p><h1 id="A-message-to-a-new-friend给新朋友的一封信"><a href="#A-message-to-a-new-friend给新朋友的一封信" class="headerlink" title="A message to a new friend给新朋友的一封信"></a>A message to a new friend给新朋友的一封信</h1><p><img src="/a2-reading-01-message-new-friend/RS7845_ThinkstockPhotos-920597582-hig.jpg" alt="A message to a new friend"></p><p>Read a direct message on social media to practise and improve your reading skills. 在社交媒体上阅读直接消息，以练习和提高您的阅读技巧。</p><p>Do the preparation task first. Then read the text and do the exercises.先做好准备工作。然后阅读课文并做练习。</p><h3 id="Preparation准备"><a href="#Preparation准备" class="headerlink" title="Preparation准备"></a>Preparation准备</h3><ul><li><p>Question</p><blockquote><p>Choose the sentence (a or b) that is correct.<br>1.<br>    a. It was so nice to know you last week.<br>    b. It was so nice to meet you last week.<br>2.<br>    a. I hope you got home OK.<br>    b. I wait you got home OK.<br>3.<br>    a. Here’s a photo of me.<br>    b. Here a photo of me.<br>4.<br>    a. Good memories.<br>    b. Good remembers.<br>5.<br>    a. Please send me your email address.<br>    b. Please send your email address me.<br>6.<br>    a. Bye until soon.<br>    b. Bye for now.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>b</li><li>a</li><li>a</li><li>a</li><li>a</li><li>b</li></ol></blockquote></li></ul><h3 id="Reading-text阅读文字"><a href="#Reading-text阅读文字" class="headerlink" title="Reading text阅读文字"></a>Reading text阅读文字</h3><h4 id="English"><a href="#English" class="headerlink" title="English"></a>English</h4><blockquote><p>Hi Lucia</p><p>How are you? It was so nice to meet you last week in Sydney at the sales meeting. How was the rest of your trip? Did you see any kangaroos? I hope you got home to Mexico City OK.</p><p>Anyway, I have the documents about the new Berlin offices. We’re going to be open in three months. I moved here from London just last week. They are very nice offices, and the location is perfect. There are lots of restaurants, cafés and banks in the area. There’s also public transport; we are next to an U-Bahn (that is the name for the metro here). Maybe you can come and see them one day? I would love to show you Berlin, especially in the winter. You said you have never seen snow – you will see lots here!</p><p>Here’s a photo of you and me at the restaurant in Sydney. That was a very fun night! Remember the singing Englishman? Crazy! Please send me any other photos you have of that night. Good memories.</p><p>Please give me your email address and I will send you the documents.</p><p>Bye for now</p><p>Mikel</p></blockquote><h4 id="English-Chinese"><a href="#English-Chinese" class="headerlink" title="English-Chinese"></a>English-Chinese</h4><blockquote><p>Hi Lucia嗨露西娅</p><p>How are you? It was so nice to meet you last week in Sydney at the sales meeting. How was the rest of your trip? Did you see any kangaroos? I hope you got home to Mexico City OK.你好吗？很高兴上周在悉尼的销售会议上见到您。剩下的旅程怎么样？你看到袋鼠了吗？我希望你能顺利回到墨西哥城的家。</p><p>Anyway, I have the documents about the new Berlin offices. We’re going to be open in three months. I moved here from London just last week. They are very nice offices, and the location is perfect. There are lots of restaurants, cafés and banks in the area. There’s also public transport; we are next to an U-Bahn (that is the name for the metro here). Maybe you can come and see them one day? I would love to show you Berlin, especially in the winter. You said you have never seen snow – you will see lots here!不管怎样，我有关于新柏林办事处的文件。我们将在三个月后开业。我上周刚从伦敦搬到这里。他们是非常好的办公室，而且位置非常完美。该地区拥有许多餐馆、咖啡馆和银行。还有公共交通；我们毗邻地铁（U-Bahn）（这是这里地铁的名称）。也许有一天你可以来看他们？我很想向您展示柏林，尤其是在冬天。你说你从未见过雪——你会在这里看到很多雪！</p><p>Here’s a photo of you and me at the restaurant in Sydney. That was a very fun night! Remember the singing Englishman? Crazy! Please send me any other photos you have of that night. Good memories.这是你和我在悉尼餐厅的照片。那是一个非常有趣的夜晚！还记得那个唱歌的英国人吗？疯狂的！请把那天晚上的其他照片发给我。好的记忆。</p><p>Please give me your email address and I will send you the documents.请给我您的电子邮件地址，我会将文件发送给您。</p><p>Bye for now暂时再见</p><p>Mikel米克尔</p></blockquote><h3 id="Task-1任务1"><a href="#Task-1任务1" class="headerlink" title="Task 1任务1"></a>Task 1任务1</h3><ul><li><p>Question</p><blockquote><p>Match the sentences (a–d) with the places (1–4).<br>Places<br>1.Berlin<br>2.London<br>3.Mexico City<br>4.Sydney</p><p>Sentences<br>a.  Mikel and Lucia met here.<br>b.  Mikel’s new offices are here.<br>c.  Mikel used to live here.<br>d.  Lucia lives here.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>b</li><li>c</li><li>d</li><li>a</li></ol></blockquote></li></ul><h3 id="Task-2任务2"><a href="#Task-2任务2" class="headerlink" title="Task 2任务2"></a>Task 2任务2</h3><ul><li><p>Question</p><p>Are the sentences true or false?</p><table><thead><tr><th>1</th><th>Mikel and Lucia were friends from school.</th><th>TRUE</th><th>FALSE</th></tr></thead><tbody><tr><td>2</td><td>They work for a company that sells things.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>3</td><td>The new offices are in a very good location.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>4</td><td>There is a metro next to the offices.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>5</td><td>Mikel has never seen snow before.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>6</td><td>Mikel and Lucia had dinner together.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>7</td><td>Mikel doesn’t have Lucia’s email address.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>8</td><td>Lucia wants to send Mikel some documents.</td><td>TRUE</td><td>FALSE</td></tr></tbody></table></li><li><p>Answer</p><p><img src="/a2-reading-01-message-new-friend/image-20240325121743302.png" alt="image-20240325121743302"></p></li></ul><h3 id="Discussion讨论"><a href="#Discussion讨论" class="headerlink" title="Discussion讨论"></a>Discussion讨论</h3><p>How do you make plans with friends? Email, messenger, phone calls or another way?你如何与朋友一起制定计划？电子邮件、即时通讯工具、电话还是其他方式？</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a2-reading - reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a2-reading</title>
    <link href="/2024/03/25/a2-reading-07-choosing-conference-venue/"/>
    <url>/2024/03/25/a2-reading-07-choosing-conference-venue/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/a1-a2-vocabulary-01-accessories/RS5963_459338427-low.jpg" alt="img"></p><h1 id="A-message-to-a-new-friend给新朋友的一封信"><a href="#A-message-to-a-new-friend给新朋友的一封信" class="headerlink" title="A message to a new friend给新朋友的一封信"></a>A message to a new friend给新朋友的一封信</h1><p><img src="/a2-reading-01-message-new-friend/RS7845_ThinkstockPhotos-920597582-hig.jpg" alt="A message to a new friend"></p><p>Read a direct message on social media to practise and improve your reading skills. 在社交媒体上阅读直接消息，以练习和提高您的阅读技巧。</p><p>Do the preparation task first. Then read the text and do the exercises.先做好准备工作。然后阅读课文并做练习。</p><h3 id="Preparation准备"><a href="#Preparation准备" class="headerlink" title="Preparation准备"></a>Preparation准备</h3><ul><li><p>Question</p><blockquote><p>Choose the sentence (a or b) that is correct.<br>1.<br>    a. It was so nice to know you last week.<br>    b. It was so nice to meet you last week.<br>2.<br>    a. I hope you got home OK.<br>    b. I wait you got home OK.<br>3.<br>    a. Here’s a photo of me.<br>    b. Here a photo of me.<br>4.<br>    a. Good memories.<br>    b. Good remembers.<br>5.<br>    a. Please send me your email address.<br>    b. Please send your email address me.<br>6.<br>    a. Bye until soon.<br>    b. Bye for now.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>b</li><li>a</li><li>a</li><li>a</li><li>a</li><li>b</li></ol></blockquote></li></ul><h3 id="Reading-text阅读文字"><a href="#Reading-text阅读文字" class="headerlink" title="Reading text阅读文字"></a>Reading text阅读文字</h3><h4 id="English"><a href="#English" class="headerlink" title="English"></a>English</h4><blockquote><p>Hi Lucia</p><p>How are you? It was so nice to meet you last week in Sydney at the sales meeting. How was the rest of your trip? Did you see any kangaroos? I hope you got home to Mexico City OK.</p><p>Anyway, I have the documents about the new Berlin offices. We’re going to be open in three months. I moved here from London just last week. They are very nice offices, and the location is perfect. There are lots of restaurants, cafés and banks in the area. There’s also public transport; we are next to an U-Bahn (that is the name for the metro here). Maybe you can come and see them one day? I would love to show you Berlin, especially in the winter. You said you have never seen snow – you will see lots here!</p><p>Here’s a photo of you and me at the restaurant in Sydney. That was a very fun night! Remember the singing Englishman? Crazy! Please send me any other photos you have of that night. Good memories.</p><p>Please give me your email address and I will send you the documents.</p><p>Bye for now</p><p>Mikel</p></blockquote><h4 id="English-Chinese"><a href="#English-Chinese" class="headerlink" title="English-Chinese"></a>English-Chinese</h4><blockquote><p>Hi Lucia嗨露西娅</p><p>How are you? It was so nice to meet you last week in Sydney at the sales meeting. How was the rest of your trip? Did you see any kangaroos? I hope you got home to Mexico City OK.你好吗？很高兴上周在悉尼的销售会议上见到您。剩下的旅程怎么样？你看到袋鼠了吗？我希望你能顺利回到墨西哥城的家。</p><p>Anyway, I have the documents about the new Berlin offices. We’re going to be open in three months. I moved here from London just last week. They are very nice offices, and the location is perfect. There are lots of restaurants, cafés and banks in the area. There’s also public transport; we are next to an U-Bahn (that is the name for the metro here). Maybe you can come and see them one day? I would love to show you Berlin, especially in the winter. You said you have never seen snow – you will see lots here!不管怎样，我有关于新柏林办事处的文件。我们将在三个月后开业。我上周刚从伦敦搬到这里。他们是非常好的办公室，而且位置非常完美。该地区拥有许多餐馆、咖啡馆和银行。还有公共交通；我们毗邻地铁（U-Bahn）（这是这里地铁的名称）。也许有一天你可以来看他们？我很想向您展示柏林，尤其是在冬天。你说你从未见过雪——你会在这里看到很多雪！</p><p>Here’s a photo of you and me at the restaurant in Sydney. That was a very fun night! Remember the singing Englishman? Crazy! Please send me any other photos you have of that night. Good memories.这是你和我在悉尼餐厅的照片。那是一个非常有趣的夜晚！还记得那个唱歌的英国人吗？疯狂的！请把那天晚上的其他照片发给我。好的记忆。</p><p>Please give me your email address and I will send you the documents.请给我您的电子邮件地址，我会将文件发送给您。</p><p>Bye for now暂时再见</p><p>Mikel米克尔</p></blockquote><h3 id="Task-1任务1"><a href="#Task-1任务1" class="headerlink" title="Task 1任务1"></a>Task 1任务1</h3><ul><li><p>Question</p><blockquote><p>Match the sentences (a–d) with the places (1–4).<br>Places<br>1.Berlin<br>2.London<br>3.Mexico City<br>4.Sydney</p><p>Sentences<br>a.  Mikel and Lucia met here.<br>b.  Mikel’s new offices are here.<br>c.  Mikel used to live here.<br>d.  Lucia lives here.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>b</li><li>c</li><li>d</li><li>a</li></ol></blockquote></li></ul><h3 id="Task-2任务2"><a href="#Task-2任务2" class="headerlink" title="Task 2任务2"></a>Task 2任务2</h3><ul><li><p>Question</p><p>Are the sentences true or false?</p><table><thead><tr><th>1</th><th>Mikel and Lucia were friends from school.</th><th>TRUE</th><th>FALSE</th></tr></thead><tbody><tr><td>2</td><td>They work for a company that sells things.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>3</td><td>The new offices are in a very good location.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>4</td><td>There is a metro next to the offices.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>5</td><td>Mikel has never seen snow before.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>6</td><td>Mikel and Lucia had dinner together.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>7</td><td>Mikel doesn’t have Lucia’s email address.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>8</td><td>Lucia wants to send Mikel some documents.</td><td>TRUE</td><td>FALSE</td></tr></tbody></table></li><li><p>Answer</p><p><img src="/a2-reading-01-message-new-friend/image-20240325121743302.png" alt="image-20240325121743302"></p></li></ul><h3 id="Discussion讨论"><a href="#Discussion讨论" class="headerlink" title="Discussion讨论"></a>Discussion讨论</h3><p>How do you make plans with friends? Email, messenger, phone calls or another way?你如何与朋友一起制定计划？电子邮件、即时通讯工具、电话还是其他方式？</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a2-reading - reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a2-reading</title>
    <link href="/2024/03/25/a2-reading-09-professional-profile-summaries/"/>
    <url>/2024/03/25/a2-reading-09-professional-profile-summaries/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/a1-a2-vocabulary-01-accessories/RS5963_459338427-low.jpg" alt="img"></p><h1 id="A-message-to-a-new-friend给新朋友的一封信"><a href="#A-message-to-a-new-friend给新朋友的一封信" class="headerlink" title="A message to a new friend给新朋友的一封信"></a>A message to a new friend给新朋友的一封信</h1><p><img src="/a2-reading-01-message-new-friend/RS7845_ThinkstockPhotos-920597582-hig.jpg" alt="A message to a new friend"></p><p>Read a direct message on social media to practise and improve your reading skills. 在社交媒体上阅读直接消息，以练习和提高您的阅读技巧。</p><p>Do the preparation task first. Then read the text and do the exercises.先做好准备工作。然后阅读课文并做练习。</p><h3 id="Preparation准备"><a href="#Preparation准备" class="headerlink" title="Preparation准备"></a>Preparation准备</h3><ul><li><p>Question</p><blockquote><p>Choose the sentence (a or b) that is correct.<br>1.<br>    a. It was so nice to know you last week.<br>    b. It was so nice to meet you last week.<br>2.<br>    a. I hope you got home OK.<br>    b. I wait you got home OK.<br>3.<br>    a. Here’s a photo of me.<br>    b. Here a photo of me.<br>4.<br>    a. Good memories.<br>    b. Good remembers.<br>5.<br>    a. Please send me your email address.<br>    b. Please send your email address me.<br>6.<br>    a. Bye until soon.<br>    b. Bye for now.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>b</li><li>a</li><li>a</li><li>a</li><li>a</li><li>b</li></ol></blockquote></li></ul><h3 id="Reading-text阅读文字"><a href="#Reading-text阅读文字" class="headerlink" title="Reading text阅读文字"></a>Reading text阅读文字</h3><h4 id="English"><a href="#English" class="headerlink" title="English"></a>English</h4><blockquote><p>Hi Lucia</p><p>How are you? It was so nice to meet you last week in Sydney at the sales meeting. How was the rest of your trip? Did you see any kangaroos? I hope you got home to Mexico City OK.</p><p>Anyway, I have the documents about the new Berlin offices. We’re going to be open in three months. I moved here from London just last week. They are very nice offices, and the location is perfect. There are lots of restaurants, cafés and banks in the area. There’s also public transport; we are next to an U-Bahn (that is the name for the metro here). Maybe you can come and see them one day? I would love to show you Berlin, especially in the winter. You said you have never seen snow – you will see lots here!</p><p>Here’s a photo of you and me at the restaurant in Sydney. That was a very fun night! Remember the singing Englishman? Crazy! Please send me any other photos you have of that night. Good memories.</p><p>Please give me your email address and I will send you the documents.</p><p>Bye for now</p><p>Mikel</p></blockquote><h4 id="English-Chinese"><a href="#English-Chinese" class="headerlink" title="English-Chinese"></a>English-Chinese</h4><blockquote><p>Hi Lucia嗨露西娅</p><p>How are you? It was so nice to meet you last week in Sydney at the sales meeting. How was the rest of your trip? Did you see any kangaroos? I hope you got home to Mexico City OK.你好吗？很高兴上周在悉尼的销售会议上见到您。剩下的旅程怎么样？你看到袋鼠了吗？我希望你能顺利回到墨西哥城的家。</p><p>Anyway, I have the documents about the new Berlin offices. We’re going to be open in three months. I moved here from London just last week. They are very nice offices, and the location is perfect. There are lots of restaurants, cafés and banks in the area. There’s also public transport; we are next to an U-Bahn (that is the name for the metro here). Maybe you can come and see them one day? I would love to show you Berlin, especially in the winter. You said you have never seen snow – you will see lots here!不管怎样，我有关于新柏林办事处的文件。我们将在三个月后开业。我上周刚从伦敦搬到这里。他们是非常好的办公室，而且位置非常完美。该地区拥有许多餐馆、咖啡馆和银行。还有公共交通；我们毗邻地铁（U-Bahn）（这是这里地铁的名称）。也许有一天你可以来看他们？我很想向您展示柏林，尤其是在冬天。你说你从未见过雪——你会在这里看到很多雪！</p><p>Here’s a photo of you and me at the restaurant in Sydney. That was a very fun night! Remember the singing Englishman? Crazy! Please send me any other photos you have of that night. Good memories.这是你和我在悉尼餐厅的照片。那是一个非常有趣的夜晚！还记得那个唱歌的英国人吗？疯狂的！请把那天晚上的其他照片发给我。好的记忆。</p><p>Please give me your email address and I will send you the documents.请给我您的电子邮件地址，我会将文件发送给您。</p><p>Bye for now暂时再见</p><p>Mikel米克尔</p></blockquote><h3 id="Task-1任务1"><a href="#Task-1任务1" class="headerlink" title="Task 1任务1"></a>Task 1任务1</h3><ul><li><p>Question</p><blockquote><p>Match the sentences (a–d) with the places (1–4).<br>Places<br>1.Berlin<br>2.London<br>3.Mexico City<br>4.Sydney</p><p>Sentences<br>a.  Mikel and Lucia met here.<br>b.  Mikel’s new offices are here.<br>c.  Mikel used to live here.<br>d.  Lucia lives here.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>b</li><li>c</li><li>d</li><li>a</li></ol></blockquote></li></ul><h3 id="Task-2任务2"><a href="#Task-2任务2" class="headerlink" title="Task 2任务2"></a>Task 2任务2</h3><ul><li><p>Question</p><p>Are the sentences true or false?</p><table><thead><tr><th>1</th><th>Mikel and Lucia were friends from school.</th><th>TRUE</th><th>FALSE</th></tr></thead><tbody><tr><td>2</td><td>They work for a company that sells things.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>3</td><td>The new offices are in a very good location.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>4</td><td>There is a metro next to the offices.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>5</td><td>Mikel has never seen snow before.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>6</td><td>Mikel and Lucia had dinner together.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>7</td><td>Mikel doesn’t have Lucia’s email address.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>8</td><td>Lucia wants to send Mikel some documents.</td><td>TRUE</td><td>FALSE</td></tr></tbody></table></li><li><p>Answer</p><p><img src="/a2-reading-01-message-new-friend/image-20240325121743302.png" alt="image-20240325121743302"></p></li></ul><h3 id="Discussion讨论"><a href="#Discussion讨论" class="headerlink" title="Discussion讨论"></a>Discussion讨论</h3><p>How do you make plans with friends? Email, messenger, phone calls or another way?你如何与朋友一起制定计划？电子邮件、即时通讯工具、电话还是其他方式？</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a2-reading - reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a2-reading</title>
    <link href="/2024/03/25/a2-reading-08-english-course-prospectus/"/>
    <url>/2024/03/25/a2-reading-08-english-course-prospectus/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/a1-a2-vocabulary-01-accessories/RS5963_459338427-low.jpg" alt="img"></p><h1 id="A-message-to-a-new-friend给新朋友的一封信"><a href="#A-message-to-a-new-friend给新朋友的一封信" class="headerlink" title="A message to a new friend给新朋友的一封信"></a>A message to a new friend给新朋友的一封信</h1><p><img src="/a2-reading-01-message-new-friend/RS7845_ThinkstockPhotos-920597582-hig.jpg" alt="A message to a new friend"></p><p>Read a direct message on social media to practise and improve your reading skills. 在社交媒体上阅读直接消息，以练习和提高您的阅读技巧。</p><p>Do the preparation task first. Then read the text and do the exercises.先做好准备工作。然后阅读课文并做练习。</p><h3 id="Preparation准备"><a href="#Preparation准备" class="headerlink" title="Preparation准备"></a>Preparation准备</h3><ul><li><p>Question</p><blockquote><p>Choose the sentence (a or b) that is correct.<br>1.<br>    a. It was so nice to know you last week.<br>    b. It was so nice to meet you last week.<br>2.<br>    a. I hope you got home OK.<br>    b. I wait you got home OK.<br>3.<br>    a. Here’s a photo of me.<br>    b. Here a photo of me.<br>4.<br>    a. Good memories.<br>    b. Good remembers.<br>5.<br>    a. Please send me your email address.<br>    b. Please send your email address me.<br>6.<br>    a. Bye until soon.<br>    b. Bye for now.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>b</li><li>a</li><li>a</li><li>a</li><li>a</li><li>b</li></ol></blockquote></li></ul><h3 id="Reading-text阅读文字"><a href="#Reading-text阅读文字" class="headerlink" title="Reading text阅读文字"></a>Reading text阅读文字</h3><h4 id="English"><a href="#English" class="headerlink" title="English"></a>English</h4><blockquote><p>Hi Lucia</p><p>How are you? It was so nice to meet you last week in Sydney at the sales meeting. How was the rest of your trip? Did you see any kangaroos? I hope you got home to Mexico City OK.</p><p>Anyway, I have the documents about the new Berlin offices. We’re going to be open in three months. I moved here from London just last week. They are very nice offices, and the location is perfect. There are lots of restaurants, cafés and banks in the area. There’s also public transport; we are next to an U-Bahn (that is the name for the metro here). Maybe you can come and see them one day? I would love to show you Berlin, especially in the winter. You said you have never seen snow – you will see lots here!</p><p>Here’s a photo of you and me at the restaurant in Sydney. That was a very fun night! Remember the singing Englishman? Crazy! Please send me any other photos you have of that night. Good memories.</p><p>Please give me your email address and I will send you the documents.</p><p>Bye for now</p><p>Mikel</p></blockquote><h4 id="English-Chinese"><a href="#English-Chinese" class="headerlink" title="English-Chinese"></a>English-Chinese</h4><blockquote><p>Hi Lucia嗨露西娅</p><p>How are you? It was so nice to meet you last week in Sydney at the sales meeting. How was the rest of your trip? Did you see any kangaroos? I hope you got home to Mexico City OK.你好吗？很高兴上周在悉尼的销售会议上见到您。剩下的旅程怎么样？你看到袋鼠了吗？我希望你能顺利回到墨西哥城的家。</p><p>Anyway, I have the documents about the new Berlin offices. We’re going to be open in three months. I moved here from London just last week. They are very nice offices, and the location is perfect. There are lots of restaurants, cafés and banks in the area. There’s also public transport; we are next to an U-Bahn (that is the name for the metro here). Maybe you can come and see them one day? I would love to show you Berlin, especially in the winter. You said you have never seen snow – you will see lots here!不管怎样，我有关于新柏林办事处的文件。我们将在三个月后开业。我上周刚从伦敦搬到这里。他们是非常好的办公室，而且位置非常完美。该地区拥有许多餐馆、咖啡馆和银行。还有公共交通；我们毗邻地铁（U-Bahn）（这是这里地铁的名称）。也许有一天你可以来看他们？我很想向您展示柏林，尤其是在冬天。你说你从未见过雪——你会在这里看到很多雪！</p><p>Here’s a photo of you and me at the restaurant in Sydney. That was a very fun night! Remember the singing Englishman? Crazy! Please send me any other photos you have of that night. Good memories.这是你和我在悉尼餐厅的照片。那是一个非常有趣的夜晚！还记得那个唱歌的英国人吗？疯狂的！请把那天晚上的其他照片发给我。好的记忆。</p><p>Please give me your email address and I will send you the documents.请给我您的电子邮件地址，我会将文件发送给您。</p><p>Bye for now暂时再见</p><p>Mikel米克尔</p></blockquote><h3 id="Task-1任务1"><a href="#Task-1任务1" class="headerlink" title="Task 1任务1"></a>Task 1任务1</h3><ul><li><p>Question</p><blockquote><p>Match the sentences (a–d) with the places (1–4).<br>Places<br>1.Berlin<br>2.London<br>3.Mexico City<br>4.Sydney</p><p>Sentences<br>a.  Mikel and Lucia met here.<br>b.  Mikel’s new offices are here.<br>c.  Mikel used to live here.<br>d.  Lucia lives here.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>b</li><li>c</li><li>d</li><li>a</li></ol></blockquote></li></ul><h3 id="Task-2任务2"><a href="#Task-2任务2" class="headerlink" title="Task 2任务2"></a>Task 2任务2</h3><ul><li><p>Question</p><p>Are the sentences true or false?</p><table><thead><tr><th>1</th><th>Mikel and Lucia were friends from school.</th><th>TRUE</th><th>FALSE</th></tr></thead><tbody><tr><td>2</td><td>They work for a company that sells things.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>3</td><td>The new offices are in a very good location.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>4</td><td>There is a metro next to the offices.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>5</td><td>Mikel has never seen snow before.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>6</td><td>Mikel and Lucia had dinner together.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>7</td><td>Mikel doesn’t have Lucia’s email address.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>8</td><td>Lucia wants to send Mikel some documents.</td><td>TRUE</td><td>FALSE</td></tr></tbody></table></li><li><p>Answer</p><p><img src="/a2-reading-01-message-new-friend/image-20240325121743302.png" alt="image-20240325121743302"></p></li></ul><h3 id="Discussion讨论"><a href="#Discussion讨论" class="headerlink" title="Discussion讨论"></a>Discussion讨论</h3><p>How do you make plans with friends? Email, messenger, phone calls or another way?你如何与朋友一起制定计划？电子邮件、即时通讯工具、电话还是其他方式？</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a2-reading - reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a2-reading</title>
    <link href="/2024/03/25/a2-reading-10-study-skills-tips/"/>
    <url>/2024/03/25/a2-reading-10-study-skills-tips/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/a1-a2-vocabulary-01-accessories/RS5963_459338427-low.jpg" alt="img"></p><h1 id="A-message-to-a-new-friend给新朋友的一封信"><a href="#A-message-to-a-new-friend给新朋友的一封信" class="headerlink" title="A message to a new friend给新朋友的一封信"></a>A message to a new friend给新朋友的一封信</h1><p><img src="/a2-reading-01-message-new-friend/RS7845_ThinkstockPhotos-920597582-hig.jpg" alt="A message to a new friend"></p><p>Read a direct message on social media to practise and improve your reading skills. 在社交媒体上阅读直接消息，以练习和提高您的阅读技巧。</p><p>Do the preparation task first. Then read the text and do the exercises.先做好准备工作。然后阅读课文并做练习。</p><h3 id="Preparation准备"><a href="#Preparation准备" class="headerlink" title="Preparation准备"></a>Preparation准备</h3><ul><li><p>Question</p><blockquote><p>Choose the sentence (a or b) that is correct.<br>1.<br>    a. It was so nice to know you last week.<br>    b. It was so nice to meet you last week.<br>2.<br>    a. I hope you got home OK.<br>    b. I wait you got home OK.<br>3.<br>    a. Here’s a photo of me.<br>    b. Here a photo of me.<br>4.<br>    a. Good memories.<br>    b. Good remembers.<br>5.<br>    a. Please send me your email address.<br>    b. Please send your email address me.<br>6.<br>    a. Bye until soon.<br>    b. Bye for now.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>b</li><li>a</li><li>a</li><li>a</li><li>a</li><li>b</li></ol></blockquote></li></ul><h3 id="Reading-text阅读文字"><a href="#Reading-text阅读文字" class="headerlink" title="Reading text阅读文字"></a>Reading text阅读文字</h3><h4 id="English"><a href="#English" class="headerlink" title="English"></a>English</h4><blockquote><p>Hi Lucia</p><p>How are you? It was so nice to meet you last week in Sydney at the sales meeting. How was the rest of your trip? Did you see any kangaroos? I hope you got home to Mexico City OK.</p><p>Anyway, I have the documents about the new Berlin offices. We’re going to be open in three months. I moved here from London just last week. They are very nice offices, and the location is perfect. There are lots of restaurants, cafés and banks in the area. There’s also public transport; we are next to an U-Bahn (that is the name for the metro here). Maybe you can come and see them one day? I would love to show you Berlin, especially in the winter. You said you have never seen snow – you will see lots here!</p><p>Here’s a photo of you and me at the restaurant in Sydney. That was a very fun night! Remember the singing Englishman? Crazy! Please send me any other photos you have of that night. Good memories.</p><p>Please give me your email address and I will send you the documents.</p><p>Bye for now</p><p>Mikel</p></blockquote><h4 id="English-Chinese"><a href="#English-Chinese" class="headerlink" title="English-Chinese"></a>English-Chinese</h4><blockquote><p>Hi Lucia嗨露西娅</p><p>How are you? It was so nice to meet you last week in Sydney at the sales meeting. How was the rest of your trip? Did you see any kangaroos? I hope you got home to Mexico City OK.你好吗？很高兴上周在悉尼的销售会议上见到您。剩下的旅程怎么样？你看到袋鼠了吗？我希望你能顺利回到墨西哥城的家。</p><p>Anyway, I have the documents about the new Berlin offices. We’re going to be open in three months. I moved here from London just last week. They are very nice offices, and the location is perfect. There are lots of restaurants, cafés and banks in the area. There’s also public transport; we are next to an U-Bahn (that is the name for the metro here). Maybe you can come and see them one day? I would love to show you Berlin, especially in the winter. You said you have never seen snow – you will see lots here!不管怎样，我有关于新柏林办事处的文件。我们将在三个月后开业。我上周刚从伦敦搬到这里。他们是非常好的办公室，而且位置非常完美。该地区拥有许多餐馆、咖啡馆和银行。还有公共交通；我们毗邻地铁（U-Bahn）（这是这里地铁的名称）。也许有一天你可以来看他们？我很想向您展示柏林，尤其是在冬天。你说你从未见过雪——你会在这里看到很多雪！</p><p>Here’s a photo of you and me at the restaurant in Sydney. That was a very fun night! Remember the singing Englishman? Crazy! Please send me any other photos you have of that night. Good memories.这是你和我在悉尼餐厅的照片。那是一个非常有趣的夜晚！还记得那个唱歌的英国人吗？疯狂的！请把那天晚上的其他照片发给我。好的记忆。</p><p>Please give me your email address and I will send you the documents.请给我您的电子邮件地址，我会将文件发送给您。</p><p>Bye for now暂时再见</p><p>Mikel米克尔</p></blockquote><h3 id="Task-1任务1"><a href="#Task-1任务1" class="headerlink" title="Task 1任务1"></a>Task 1任务1</h3><ul><li><p>Question</p><blockquote><p>Match the sentences (a–d) with the places (1–4).<br>Places<br>1.Berlin<br>2.London<br>3.Mexico City<br>4.Sydney</p><p>Sentences<br>a.  Mikel and Lucia met here.<br>b.  Mikel’s new offices are here.<br>c.  Mikel used to live here.<br>d.  Lucia lives here.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>b</li><li>c</li><li>d</li><li>a</li></ol></blockquote></li></ul><h3 id="Task-2任务2"><a href="#Task-2任务2" class="headerlink" title="Task 2任务2"></a>Task 2任务2</h3><ul><li><p>Question</p><p>Are the sentences true or false?</p><table><thead><tr><th>1</th><th>Mikel and Lucia were friends from school.</th><th>TRUE</th><th>FALSE</th></tr></thead><tbody><tr><td>2</td><td>They work for a company that sells things.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>3</td><td>The new offices are in a very good location.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>4</td><td>There is a metro next to the offices.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>5</td><td>Mikel has never seen snow before.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>6</td><td>Mikel and Lucia had dinner together.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>7</td><td>Mikel doesn’t have Lucia’s email address.</td><td>TRUE</td><td>FALSE</td></tr><tr><td>8</td><td>Lucia wants to send Mikel some documents.</td><td>TRUE</td><td>FALSE</td></tr></tbody></table></li><li><p>Answer</p><p><img src="/a2-reading-01-message-new-friend/image-20240325121743302.png" alt="image-20240325121743302"></p></li></ul><h3 id="Discussion讨论"><a href="#Discussion讨论" class="headerlink" title="Discussion讨论"></a>Discussion讨论</h3><p>How do you make plans with friends? Email, messenger, phone calls or another way?你如何与朋友一起制定计划？电子邮件、即时通讯工具、电话还是其他方式？</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a2-reading - reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A2 Speaking 02 Giving instructions 给予指导</title>
    <link href="/2024/03/25/a2-speaking-02-giving-instructions/"/>
    <url>/2024/03/25/a2-speaking-02-giving-instructions/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/2024/03/25/a2-speaking-02-giving-instructions/What-to-Say-A2-Giving-instructions1200.png" class="" title="img"><h1 id="Giving-instructions-给予指导"><a href="#Giving-instructions-给予指导" class="headerlink" title="Giving instructions 给予指导"></a>Giving instructions 给予指导</h1><p>In this video, Vanya helps Emir learn how to use a new coffee machine. Listen to the language Vanya uses to give instructions and practise saying the useful phrases.在这段视频中，Vanya 帮助 Emir 学习如何使用新咖啡机。聆听 Vanya 用于发出指示的语言并练习说出有用的短语。</p><p>Do the preparation exercise first. Then watch the video and do the exercises to check your understanding and practise the language.先做准备练习。然后观看视频并做练习来检查您的理解和练习语言。</p><h3 id="Preparation准备"><a href="#Preparation准备" class="headerlink" title="Preparation准备"></a>Preparation准备</h3><ul><li><p>Question</p><blockquote><p>Write a number (1–6) to put the instructions for replying to an email in the correct order.<br>( )Correct any mistakes you see and read it again to have a last check.<br>( )Then think carefully about what you need to say.<br>( )Next, write the email.<br>( )First, choose ‘reply’ on the email you need to respond to.<br>( )Finally, choose ‘send’.<br>( )After that, check the email by reading it carefully.</p></blockquote></li><li><p>Answer</p><blockquote><p>(5)Correct any mistakes you see and read it again to have a last check.<br>(2)Then think carefully about what you need to say.<br>(3)Next, write the email.<br>(1)First, choose ‘reply’ on the email you need to respond to.<br>(6)Finally, choose ‘send’.<br>(4)After that, check the email by reading it carefully.</p></blockquote><img src="/2024/03/25/a2-speaking-02-giving-instructions/image-20240325092207095.png" class="" title="image-20240325092207095"></li></ul><img src="/2024/03/25/a2-speaking-02-giving-instructions/thumbnail_2_419a2f8d_v4.jpg" class="" title="The poster image"><p><video id="jp_video_8e7be26b-485c-4c91-a171-4d2afdc88254" preload="none" src="https://bclearnenglish-vfs.cdn-ec.viddler.com/BCLearnenglish_1weruejrjxj9k81bly5p_1500.mp4?fd9f2a1c14aadf1069f046ce65f41e2be6a8a954d660046f2dd4fc5f15d319becaea7705bb9ce7887ff23c56b1c51dfd30b821aadb8e3461444bc259db3457160b019443cff88620b2833808312a69496471f47acc21&amp;ec_rate=1500&amp;ec_prebuf=60" class="mtz-vlc-jnmod" style="box-sizing: content-box; display: inline; vertical-align: baseline; font-family: inherit; background-attachment: scroll; background-color: transparent; background-image: none; background-position: 0px 0px; background-repeat: repeat; border-color: currentcolor; border-style: none; border-width: medium; inset: auto; clear: none; clip: auto; color: inherit; counter-increment: none; counter-reset: none; cursor: auto; direction: inherit; float: none; font-size: inherit; font-style: inherit; font-variant: normal; font-weight: inherit; height: 0px; letter-spacing: normal; line-height: inherit; list-style-type: inherit; list-style-position: outside; list-style-image: none; margin: 0px; max-height: none; max-width: none; min-height: auto !important; min-width: 0px; opacity: 1; overflow: visible; padding: 0px; position: static; quotes: &quot;&quot; &quot;&quot;; table-layout: auto; text-align: inherit; text-decoration: inherit; text-indent: 0px; text-transform: none; unicode-bidi: normal; visibility: inherit; white-space: normal; width: 0px; word-spacing: normal; word-break: normal; z-index: auto; border-radius: 0px; text-shadow: none;"></video></p><p>0:00 &#x2F; 4:46</p><p>720p720p</p><h3 id="Transcript对话脚本"><a href="#Transcript对话脚本" class="headerlink" title="Transcript对话脚本"></a>Transcript对话脚本</h3><h4 id="English"><a href="#English" class="headerlink" title="English"></a>English</h4><blockquote><p><strong>Ana</strong>: Hi! I’m Ana. Welcome to <em>What to Say</em>! </p><p>Do you know what to say when you give instructions? Listen out for useful language for giving instructions. Then, we’ll practise saying the new phrases – after this.</p><p><strong>Emir</strong>: Argh! It’s not working. </p><p><strong>Vanya</strong>: Are you OK?</p><p><strong>Emir</strong>: Do you know how to use this machine?</p><p><strong>Vanya</strong>: Yeah, I’ll show you.</p><p><strong>Emir</strong>: Ah, thanks.</p><p><strong>Vanya</strong>: OK. First, you have to put the correct amount of coffee in here.</p><p><strong>Emir</strong>: Aha.</p><p><strong>Vanya</strong>: Then you press it down with this.</p><p><strong>Emir</strong>: I see.</p><p><strong>Vanya</strong>: Right, OK. Next, you put this here and turn it until it’s quite tight.</p><p><strong>Emir</strong>: Right.</p><p><strong>Vanya</strong>: After that, you just press this button.</p><p><strong>Emir</strong>: OK, that seems clear.</p><p><strong>Vanya</strong>: Great! Now it’s your turn. </p><p><strong>Emir</strong>: Is this OK?</p><p><strong>Vanya</strong>: Yes, that’s right. Now press it down.</p><p><strong>Emir</strong>: Like this? </p><p><strong>Vanya</strong>: Yeah, you’re doing well.</p><p><strong>Emir</strong>: Thanks! What do I do next?</p><p><strong>Vanya</strong>: Connect it to the machine.</p><p><strong>Emir</strong>: Is there anything else?</p><p><strong>Vanya</strong>: That’s it. Just press the button.</p><p><strong>Vanya</strong>: Well?</p><p><strong>Emir</strong>: Delicious! Thank you.</p><p><strong>Vanya</strong>: You’re welcome. </p><p><strong>Ana</strong>: Hello again! Oh, I love a good coffee! So, did you notice the useful phrases used for giving instructions? Listen to me and then repeat. </p><p><strong>First, you have to put the coffee here.</strong> </p><p><strong>Then you press it down with this.</strong></p><p><strong>I see.</strong></p><p><strong>Right, OK. Next, you put this here.</strong></p><p><strong>After that, you just press this button.</strong></p><p><strong>OK, that seems clear.</strong></p><p><strong>Is this OK?</strong></p><p><strong>Yes, that’s right.</strong></p><p><strong>Like this?</strong></p><p><strong>You’re doing well.</strong></p><p><strong>What do I do next?</strong></p><p><strong>Is there anything else?</strong></p><p><strong>Ana</strong>: Try and use some of these phrases the next time you give instructions in English. Bye for now!</p></blockquote><h4 id="English-Chinese"><a href="#English-Chinese" class="headerlink" title="English-Chinese"></a>English-Chinese</h4><blockquote><p><strong>Ana</strong>: Hi! I’m Ana. Welcome to <em>What to Say</em>! 安娜：嗨！我是安娜。欢迎来到说什么！</p><p>Do you know what to say when you give instructions? Listen out for useful language for giving instructions. Then, we’ll practise saying the new phrases – after this.当你发出指示时你知道该说什么吗？倾听用于发出指示的有用语言。然后，我们将练习说新短语——在此之后。</p><p><strong>Emir</strong>: Argh! It’s not working. 埃米尔：啊啊！它不起作用。</p><p><strong>Vanya</strong>: Are you OK?万尼亚：你还好吗？</p><p><strong>Emir</strong>: Do you know how to use this machine?埃米尔：你知道如何使用这台机器吗？</p><p><strong>Vanya</strong>: Yeah, I’ll show you.万尼亚：是的，我会告诉你。</p><p><strong>Emir</strong>: Ah, thanks.埃米尔：啊，谢谢。</p><p><strong>Vanya</strong>: OK. First, you have to put the correct amount of coffee in here.万尼亚：好的。首先，您必须在此处放入适量的咖啡。</p><p><strong>Emir</strong>: Aha.埃米尔：啊哈。</p><p><strong>Vanya</strong>: Then you press it down with this.Vanya：然后你用这个把它压下去。</p><p><strong>Emir</strong>: I see.埃米尔：我明白了。</p><p><strong>Vanya</strong>: Right, OK. Next, you put this here and turn it until it’s quite tight.万尼亚：好的，好的。接下来，你把它放在这里并转动它直到它非常紧。</p><p><strong>Emir</strong>: Right.埃米尔：对。</p><p><strong>Vanya</strong>: After that, you just press this button.Vanya：之后，你只需按这个按钮即可。</p><p><strong>Emir</strong>: OK, that seems clear.埃米尔：好的，这看起来很清楚。</p><p><strong>Vanya</strong>: Great! Now it’s your turn. 万尼亚：太好了！现在轮到你了。</p><p><strong>Emir</strong>: Is this OK?埃米尔：这样可以吗？</p><p><strong>Vanya</strong>: Yes, that’s right. Now press it down.万尼亚：是的，没错。现在按下它。</p><p><strong>Emir</strong>: Like this? 埃米尔：像这样？</p><p><strong>Vanya</strong>: Yeah, you’re doing well.万尼亚：是的，你做得很好。</p><p><strong>Emir</strong>: Thanks! What do I do next?埃米尔：谢谢！接下来我该怎么办？</p><p><strong>Vanya</strong>: Connect it to the machine.Vanya：将其连接到机器上。</p><p><strong>Emir</strong>: Is there anything else?埃米尔：还有其他事吗？</p><p><strong>Vanya</strong>: That’s it. Just press the button.万尼亚：就是这样。只需按下按钮即可。</p><p><strong>Vanya</strong>: Well?万尼亚：嗯？</p><p><strong>Emir</strong>: Delicious! Thank you.埃米尔：好吃！谢谢。</p><p><strong>Vanya</strong>: You’re welcome. 万尼亚：不客气。</p><p><strong>Ana</strong>: Hello again! Oh, I love a good coffee! So, did you notice the useful phrases used for giving instructions? Listen to me and then repeat. 安娜：你好！哦，我喜欢一杯好咖啡！那么，您注意到用于发出指示的有用短语了吗？听我说，然后重复。</p><p><strong>First, you have to put the coffee here. 首先，你必须把咖啡放在这里。</strong></p><p><strong>Then you press it down with this.然后你用这个按下它。</strong></p><p><strong>I see.我懂了。</strong></p><p><strong>Right, OK. Next, you put this here.对，好的。接下来，你把这个放在这里。</strong></p><p><strong>After that, you just press this button.之后，您只需按此按钮即可。</strong></p><p><strong>OK, that seems clear.好吧，这似乎很清楚。</strong></p><p><strong>Is this OK?这个可以吗？</strong></p><p><strong>Yes, that’s right.恩，那就对了。</strong></p><p><strong>Like this?像这样？</strong></p><p><strong>You’re doing well.你做得很好。</strong></p><p><strong>What do I do next?接下来我该怎么办？</strong></p><p><strong>Is there anything else?还有别的事吗？</strong></p><p><strong>Ana</strong>: Try and use some of these phrases the next time you give instructions in English. Bye for now!安娜：下次用英语给出指示时，尝试使用其中一些短语。暂时再见！</p></blockquote><h3 id="Task-1任务1"><a href="#Task-1任务1" class="headerlink" title="Task 1任务1"></a>Task 1任务1</h3><ul><li><p>Question</p><img src="/2024/03/25/a2-speaking-02-giving-instructions/image-20240325093136889.png" class="" title="image-20240325093136889"></li><li><p>Answer</p><img src="/2024/03/25/a2-speaking-02-giving-instructions/image-20240325093050129.png" class="" title="image-20240325093050129"></li></ul><h3 id="Task-2任务2"><a href="#Task-2任务2" class="headerlink" title="Task 2任务2"></a>Task 2任务2</h3><ul><li><p>Question</p><p>b</p></li><li><p>Answer</p><p>s</p></li></ul><h3 id="Task-3任务3"><a href="#Task-3任务3" class="headerlink" title="Task 3任务3"></a>Task 3任务3</h3><ul><li><p>Question</p><img src="/2024/03/25/a2-speaking-02-giving-instructions/image-20240325093356807.png" class="" title="image-20240325093356807"></li><li><p>Answer</p><img src="/2024/03/25/a2-speaking-02-giving-instructions/image-20240325093554300.png" class="" title="image-20240325093554300"><img src="/2024/03/25/a2-speaking-02-giving-instructions/image-20240325093521108.png" class="" title="image-20240325093521108"></li></ul><h3 id="Discussion讨论"><a href="#Discussion讨论" class="headerlink" title="Discussion讨论"></a>Discussion讨论</h3><p>When was the last time you gave instructions in English?您最后一次用英语发出指示是什么时候？</p><p>Download</p><h1 id="Apologising道歉"><a href="#Apologising道歉" class="headerlink" title="Apologising道歉"></a>Apologising道歉</h1><p>In this video, Paul says sorry for making Noelia fall over. Listen to the language they use for apologising and practise saying the useful phrases.在这段视频中，保罗对让诺莉亚摔倒表示抱歉。聆听他们道歉时使用的语言，并练习说出有用的短语。</p><p>Do the preparation exercise first. Then watch the video and do the exercises to check your understanding and practise the language.先做准备练习。然后观看视频并做练习来检查您的理解和练习语言。</p><h3 id="Preparation准备-1"><a href="#Preparation准备-1" class="headerlink" title="Preparation准备"></a>Preparation准备</h3><ul><li><p>Question</p><p><img src="/a2-speaking-01-apologising/image-20240325081930631.png" alt="image-20240325081930631"></p></li><li><p>Answer</p><p><img src="/a2-speaking-01-apologising/image-20240325082103182.png" alt="image-20240325082103182"></p></li></ul><h3 id="Transcript对话脚本-1"><a href="#Transcript对话脚本-1" class="headerlink" title="Transcript对话脚本"></a>Transcript对话脚本</h3><ul><li><p>English</p><blockquote><p><strong>Ana</strong>: Hi! I’m Ana. Welcome to <em>What to Say</em>!</p><p>Do you know what to say when you want to apologise? Listen out for useful language for apologising. Then, we’ll practise saying the new phrases – after this.</p><p><strong>Paul</strong>: Noelia! I am so sorry! Are you OK?</p><p><strong>Noelia</strong>: I think so. That was lucky.</p><p><strong>Paul</strong>: I’m really sorry! I didn’t see you!</p><p><strong>Noelia</strong>: That’s all right. I shouldn’t have been running.</p><p><strong>Paul</strong>: No, no, I should have been paying attention. </p><p><strong>Noelia</strong>: And they teach you not to run inside at school!</p><p><strong>Paul</strong>: Still, it was my fault and I’m sorry.</p><p><strong>Noelia</strong>: I’m sorry too. It was both of us. Honestly, it’s fine. I’m fine. Don’t worry about it. Hey, I saved the laptop though!</p><p><strong>Bob</strong>: Yeah, I’ll be there in …</p><p><strong>Noelia</strong>: Oh no!</p><p><strong>Bob</strong>: Uh oh!</p><p><strong>Paul</strong>: Ahhhh … </p><p><strong>Ana</strong>: Hello again! Ooh, I hope Noelia’s OK. So, did you notice the useful phrases used for apologising? Listen to me and then repeat. </p><p><strong>I’m so sorry!</strong></p><p><strong>I’m really sorry!</strong></p><p><strong>That’s all right.</strong></p><p><strong>It was my fault.</strong></p><p><strong>I’m sorry too.</strong></p><p><strong>Honestly, it’s fine.</strong></p><p><strong>Don’t worry about it.</strong></p><p><strong>Ana</strong>: Try and use some of these phrases the next time you want to apologise in English. Bye for now!</p></blockquote></li><li><p>English-Chinese</p><blockquote><p><strong>Ana</strong>: Hi! I’m Ana. Welcome to <em>What to Say</em>!安娜：嗨！我是安娜。欢迎来到说什么！</p><p>Do you know what to say when you want to apologise? Listen out for useful language for apologising. Then, we’ll practise saying the new phrases – after this.当你想道歉时你知道该说什么吗？留意有用的道歉语言。然后，我们将练习说新短语——在此之后。</p><p><strong>Paul</strong>: Noelia! I am so sorry! Are you OK?保罗：诺埃莉亚！我很抱歉！你还好吗？</p><p><strong>Noelia</strong>: I think so. That was lucky.诺埃利亚：我想是的。那是幸运的。</p><p><strong>Paul</strong>: I’m really sorry! I didn’t see you!保罗：我真的很抱歉！我没有看到你！</p><p><strong>Noelia</strong>: That’s all right. I shouldn’t have been running.诺莉亚：没关系。我不应该跑步。</p><p><strong>Paul</strong>: No, no, I should have been paying attention. 保罗：不，不，我应该注意的。</p><p><strong>Noelia</strong>: And they teach you not to run inside at school!诺莉亚：他们教你不要在学校里跑！</p><p><strong>Paul</strong>: Still, it was my fault and I’m sorry.保罗：不过，这是我的错，我很抱歉。</p><p><strong>Noelia</strong>: I’m sorry too. It was both of us. Honestly, it’s fine. I’m fine. Don’t worry about it. Hey, I saved the laptop though!诺莉亚：我也很抱歉。是我们两个人。老实说，还好。我很好。别担心。嘿，我保存了笔记本电脑！</p><p><strong>Bob</strong>: Yeah, I’ll be there in …鲍勃：是的，我会在…</p><p><strong>Noelia</strong>: Oh no!诺埃利亚：哦不！</p><p><strong>Bob</strong>: Uh oh!鲍勃：呃哦！</p><p><strong>Paul</strong>: Ahhhh … 保罗：啊啊……</p><p><strong>Ana</strong>: Hello again! Ooh, I hope Noelia’s OK. So, did you notice the useful phrases used for apologising? Listen to me and then repeat. 安娜：你好！哦，我希望诺莉亚没事。那么，您注意到用于道歉的有用短语了吗？听我说，然后重复。</p><p><strong>I’m so sorry!我很抱歉！</strong></p><p><strong>I’m really sorry!我真的很抱歉！</strong></p><p><strong>That’s all right.没关系。</strong></p><p><strong>It was my fault.是我的错。</strong></p><p><strong>I’m sorry too.我也很抱歉。</strong></p><p><strong>Honestly, it’s fine.老实说，还好。</strong></p><p><strong>Don’t worry about it.别担心。</strong></p><p><strong>Ana</strong>: Try and use some of these phrases the next time you want to apologise in English. Bye for now!安娜：下次你想用英语道歉时，尝试使用其中一些短语。暂时再见！</p></blockquote></li></ul><h3 id="Task-1任务1-1"><a href="#Task-1任务1-1" class="headerlink" title="Task 1任务1"></a>Task 1任务1</h3><ul><li><p>Question</p><blockquote><h2 id="Speaking-A2-Apologising-–-1"><a href="#Speaking-A2-Apologising-–-1" class="headerlink" title="Speaking A2: Apologising – 1"></a>Speaking A2: Apologising – 1</h2><p>Are the sentences true or false?</p><ol><li><p>Noelia is trying to go quickly.TrueFalse</p></li><li><p>Paul thinks it’s funny that Noelia falls over.TrueFalse</p></li><li><p>They both apologise.TrueFalse</p></li><li><p>Noelia is hurt.TrueFalse</p></li><li><p>The laptop breaks when Noelia falls over.TrueFalse</p></li><li><p>Bob walks on the laptop by accident.TrueFalse</p></li></ol></blockquote></li><li><p>Answer</p><p><img src="/a2-speaking-01-apologising/image-20240325082720995.png" alt="image-20240325082720995"></p></li></ul><h3 id="Task-2任务2-1"><a href="#Task-2任务2-1" class="headerlink" title="Task 2任务2"></a>Task 2任务2</h3><ul><li><p>Question</p><p>Complete the dialogue.</p><blockquote><p>OKreallyso sorryrightaboutfinefaulttoo</p></blockquote><blockquote><p>Paul: Noelia! I am (1)……………………………… ! Are you (2)……………………………… ?<br>Noelia: I think so. That was lucky.<br>Paul: I’m (3)……………………………… sorry! I didn’t see you!<br>Noelia: That’s all (4)……………………………… . I shouldn’t have been running.<br>Paul: Still, it was my (5)……………………………… and I’m sorry.<br>Noelia: I’m sorry (6)……………………………… . It was both of us. Honestly, it’s (7)……………………………… .<br>Don’t worry (8)……………………………… it.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>so sorry</li><li>OK</li><li>really</li><li>right</li><li>fault</li><li>too</li><li>fine</li><li>about</li></ol></blockquote></li><li><p>Question</p><p><img src="/a2-speaking-01-apologising/image-20240325082935438.png" alt="image-20240325082935438"></p></li><li><p>Answer</p><p><img src="/a2-speaking-01-apologising/image-20240325083049008.png" alt="image-20240325083049008"></p></li></ul><h3 id="Task-3任务3-1"><a href="#Task-3任务3-1" class="headerlink" title="Task 3任务3"></a>Task 3任务3</h3><ul><li><p>Question</p><blockquote><p>Put the words and phrases in order to make sentences.</p><ol><li>so I am sorry !</li><li>all . right That’s</li><li>my I’m sorry was It . fault and</li><li>I’m . too sorry</li><li>about . worry Don’t it</li><li>fine it’s . Honestly,</li></ol></blockquote></li><li><p>Answer</p><blockquote><ol><li>I am so sorry!</li><li>That’s all right.</li><li>It was my fault and I’m sorry.</li><li>I’m sorry too.</li><li>Don’t worry about it.</li><li>Honestly, it’s fine.</li></ol></blockquote></li></ul><h3 id="Discussion讨论-1"><a href="#Discussion讨论-1" class="headerlink" title="Discussion讨论"></a>Discussion讨论</h3><blockquote><p>When was the last time you said sorry for doing something?你最后一次为某事说对不起是什么时候？</p></blockquote><ul><li><p>Question</p><p>a</p></li><li><p>Answer</p><p>b</p></li><li><p>Question</p><p>a</p></li><li><p>Answer</p><p>b</p></li></ul><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><h4 id="belt"><a href="#belt" class="headerlink" title="belt"></a>belt</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;belt&#x2F;美&#x2F;belt&#x2F;n.腰带，皮带；传送带；地带；v.用腰带系紧；狠打，猛击；（尤指出于惩罚用皮带）抽打，打击（某人）；&lt;非正式&gt;飞驰【名】 （Belt）（英、法、德、西）贝尔特（人名）</p><p>初中 | 高中 | CET4 | CET6 | 考研 | IELTS | TOEFL | 商务英语<br>复数belts第三人称单数belts现在分词belting过去式belted</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>belt&#x2F;bɛlt&#x2F;|CET4 TEM4<br>beltingbeltedbelts<br>1.N-COUNT A belt is a strip of leather or cloth that you fasten around your waist. 腰带; 皮带</p><p>•  He wore a belt with a large brass buckle.<br> 他系着一条缀有一颗大铜扣的皮带。</p><p>2.→see also safety belt→see also seat belt</p><p>safety belt<br>N-COUNT A safety belt is a strap attached to a seat in a car or aeroplane. You fasten it around your body and it stops you from being thrown forward if there is an accident. 安全带</p><p>•  Please return to your seats and fasten your safety belts.<br> 请回到你们的座位上并系好安全带。</p><p>seat belt<br>N-COUNT A seat belt is a strap attached to a seat in a car or an aircraft. You fasten it across your body in order to prevent yourself being thrown out of the seat if there is a sudden movement or stop. (汽车、飞机座椅上的) 安全带</p><p>•  The fact I was wearing a seat belt saved my life.<br> 我系着安全带，幸免于难。</p><p>3.N-COUNT A belt in a machine is a circular strip of rubber that is used to drive moving parts or to move objects along. 输送带</p><p>•  The turning disc is connected by a drive belt to an electric motor.<br> 转盘与电动马达之间由一条输送带连接。</p><p>4.→see also conveyor belt</p><p>conveyor belt&#x2F;kənˈveɪə bɛlt&#x2F;<br>N-COUNT A conveyor belt or a conveyor is a continuously moving strip of rubber or metal which is used in factories for moving objects along so that they can be dealt with as quickly as possible. 传送带</p><p>•  The damp bricks went along a conveyor belt into another shed to dry.<br> 潮湿的砖块沿着传送带进入另一个棚子进行干燥。</p><p>5.N-COUNT A belt of land or sea is a long, narrow area of it that has some special feature. 狭长地带</p><p>•  Miners in Zambia’s northern copper belt have gone on strike.<br> 赞比亚北部铜矿区的矿工们举行了罢工。</p><p>6.→see also commuter belt→see also green belt</p><p>commuter belt<br>N-COUNT A commuter belt is the area surrounding a large city, where many people who work in the city live. (大城市周边的) 通勤者居住带</p><p>•  …people who live in the commuter belt around the capital.<br> …居住在首都周边通勤者居住带的人们。</p><p>7.V-T If someone belts you, they hit you very hard. If someone belts something, they hit it very hard. 狠揍; 猛打</p><p>•  “Is it right she belted old George in the gut?” she asked.<br> “她狠揍老乔治的肚子对吗？”她质问道。</p><p>•  Torrealba belted the ball into the left-field bleachers.<br> 托雷尔巴把球猛打到左边的看台上。</p><p>8.N-COUNT Belt is also a noun. 狠揍; 猛打</p><p>•  Father would give you a belt over the head with the scrubbing brush.<br> 父亲会拿板刷狠狠地敲你的头。</p><p>9.V-I If you belt somewhere, you move or travel there very fast. 飞奔</p><p>•  Darren and I belted down the stairs and ran out of the house.<br> 达伦和我飞奔下楼，跑出了屋子。</p><p>10.PHRASE Something that is below the belt is cruel and unfair. 不公正的</p><p>•  Do you think it’s a bit below the belt what they’re doing?<br> 你认为他们的所作所为有点不太公正吗？</p><p>11.PHRASE If you have to tighten your belt, you have to spend less money and manage without things because you have less money than you used to have. 省吃俭用</p><p>•  Clearly, if you are spending more than your income, you’ll need to tighten your belt.<br> 很显然，如果你现在花钱就入不敷出，以后就不得不勒紧腰带了。</p><p>12.PHRASE If you have something under your belt, you have already achieved it or done it. 已成囊中之物</p><p>•  Clare is now a full-time author with six books, including four novels, under her belt.<br> 克莱尔现在是个名下有6本书的专职作家，其中包括4本小说。</p></blockquote><h4 id="rucksack"><a href="#rucksack" class="headerlink" title="rucksack"></a>rucksack</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈrʌksæk&#x2F;美&#x2F;ˈrʌksæk&#x2F;n.帆布背包</p><p>复数rucksacks</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>rucksack&#x2F;ˈrʌkˌsæk&#x2F;|TEM8<br>N-COUNT A rucksack is a bag with straps that go over your shoulders, so that you can carry things on your back, for example when you are walking or climbing. 双肩背</p><p>In his rucksack he carried, besides pencils and notebooks, poetry.在他的帆布背包里，除了铅笔、笔记本外，他还带了诗集。</p><p>My rucksack seems to have gone walkabout.我的旅行包好像是丢了。</p></blockquote><h4 id="strap"><a href="#strap" class="headerlink" title="strap"></a>strap</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;stræp&#x2F;美&#x2F;stræp&#x2F;n.带子，皮带；铁皮条，金属带，铰链片；鞭打（the strap）；拉手吊带，拉手吊环；v.（用带子）束住，捆绑；用绷带包扎（伤口）；用皮鞭抽打，鞭打</p><p>CET4 | CET6 | 考研 | IELTS | TOEFL<br>复数straps第三人称单数straps现在分词strapping过去式strapped过去分词strapped</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>strap&#x2F;stræp&#x2F;|CET4 TEM4<br>strappingstrappedstraps<br>1.N-COUNT A strap is a narrow piece of leather, cloth, or other material. Straps are used to carry things, fasten things together, or to hold a piece of clothing in place. 带子</p><p>•  Nancy gripped the strap of her beach bag.<br> 南希抓住自己海滩休闲包的带子。</p><p>•  She pulled the strap of her nightgown onto her shoulder.<br> 她把睡衣的带子拉到她的肩上。</p><p>2.V-T If you strap something somewhere, you fasten it there with a strap. 用带子绑</p><p>•  She strapped the baby seat into the car.<br> 她把婴儿座椅用带子绑在那辆汽车上。</p></blockquote><h4 id="bracelet"><a href="#bracelet" class="headerlink" title="bracelet"></a>bracelet</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈbreɪslət&#x2F;美&#x2F;ˈbreɪslət&#x2F;n.手镯，臂镯</p><p>GRE<br>复数bracelets</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>bracelet&#x2F;ˈbreɪslɪt&#x2F;|CET6+ TEM4<br>N-COUNT A bracelet is a chain or band, usually made of metal, that you wear around your wrist as jewellery. 手镯</p><p>Hanging from his right wrist is a heavy gold bracelet.<br>从他的右腕上垂下的是一只沉甸甸的金手镯。<br>Inside was a gold charm bracelet, with one charm on it - a star.<br>里面是个金制挂坠手链，上面有一个挂坠——一颗星星。</p></blockquote><h4 id="scarf"><a href="#scarf" class="headerlink" title="scarf"></a>scarf</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;skɑːf&#x2F;美&#x2F;skɑːrf&#x2F;n.围巾，披巾，头巾；（嵌接的）斜面，斜嵌槽；鲸脂的切口；v.&lt;美，非正式&gt;狼吞虎咽地吃；嵌接，斜接（木材，金属）；切割（鲸）脂；【名】 （Scarf）（英）斯卡夫（人名）</p><p>初中 | 高中 | 考研 | TOEFL<br>复数scarves或scarfs第三人称单数scarfs现在分词scarfing过去式scarfed过去分词scarfed</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>scarf&#x2F;skɑːf&#x2F;|CET6+ TEM4<br>N-COUNT A scarf is a piece of cloth that you wear around your neck or head, usually to keep yourself warm. 围巾</p><p>•  He reached up to loosen the scarf around his neck.<br> 他伸出手松开围在脖子上的围巾。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a2-speaking - speaking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a2-speaking</title>
    <link href="/2024/03/25/a2-speaking-01-apologising/"/>
    <url>/2024/03/25/a2-speaking-01-apologising/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/2024/03/25/a2-speaking-01-apologising/thumbnail_2_16eceefe_v4.jpg" class="" title="The poster image"><h1 id="Apologising道歉"><a href="#Apologising道歉" class="headerlink" title="Apologising道歉"></a>Apologising道歉</h1><p>In this video, Paul says sorry for making Noelia fall over. Listen to the language they use for apologising and practise saying the useful phrases.在这段视频中，保罗对让诺莉亚摔倒表示抱歉。聆听他们道歉时使用的语言，并练习说出有用的短语。</p><p>Do the preparation exercise first. Then watch the video and do the exercises to check your understanding and practise the language.先做准备练习。然后观看视频并做练习来检查您的理解和练习语言。</p><h3 id="Preparation准备"><a href="#Preparation准备" class="headerlink" title="Preparation准备"></a>Preparation准备</h3><ul><li><p>Question</p><img src="/2024/03/25/a2-speaking-01-apologising/image-20240325081930631.png" class="" title="image-20240325081930631"></li><li><p>Answer</p><img src="/2024/03/25/a2-speaking-01-apologising/image-20240325082103182.png" class="" title="image-20240325082103182"></li></ul><h3 id="Transcript对话脚本"><a href="#Transcript对话脚本" class="headerlink" title="Transcript对话脚本"></a>Transcript对话脚本</h3><ul><li><p>English</p><blockquote><p><strong>Ana</strong>: Hi! I’m Ana. Welcome to <em>What to Say</em>!</p><p>Do you know what to say when you want to apologise? Listen out for useful language for apologising. Then, we’ll practise saying the new phrases – after this.</p><p><strong>Paul</strong>: Noelia! I am so sorry! Are you OK?</p><p><strong>Noelia</strong>: I think so. That was lucky.</p><p><strong>Paul</strong>: I’m really sorry! I didn’t see you!</p><p><strong>Noelia</strong>: That’s all right. I shouldn’t have been running.</p><p><strong>Paul</strong>: No, no, I should have been paying attention. </p><p><strong>Noelia</strong>: And they teach you not to run inside at school!</p><p><strong>Paul</strong>: Still, it was my fault and I’m sorry.</p><p><strong>Noelia</strong>: I’m sorry too. It was both of us. Honestly, it’s fine. I’m fine. Don’t worry about it. Hey, I saved the laptop though!</p><p><strong>Bob</strong>: Yeah, I’ll be there in …</p><p><strong>Noelia</strong>: Oh no!</p><p><strong>Bob</strong>: Uh oh!</p><p><strong>Paul</strong>: Ahhhh … </p><p><strong>Ana</strong>: Hello again! Ooh, I hope Noelia’s OK. So, did you notice the useful phrases used for apologising? Listen to me and then repeat. </p><p><strong>I’m so sorry!</strong></p><p><strong>I’m really sorry!</strong></p><p><strong>That’s all right.</strong></p><p><strong>It was my fault.</strong></p><p><strong>I’m sorry too.</strong></p><p><strong>Honestly, it’s fine.</strong></p><p><strong>Don’t worry about it.</strong></p><p><strong>Ana</strong>: Try and use some of these phrases the next time you want to apologise in English. Bye for now!</p></blockquote></li><li><p>English-Chinese</p><blockquote><p><strong>Ana</strong>: Hi! I’m Ana. Welcome to <em>What to Say</em>!安娜：嗨！我是安娜。欢迎来到说什么！</p><p>Do you know what to say when you want to apologise? Listen out for useful language for apologising. Then, we’ll practise saying the new phrases – after this.当你想道歉时你知道该说什么吗？留意有用的道歉语言。然后，我们将练习说新短语——在此之后。</p><p><strong>Paul</strong>: Noelia! I am so sorry! Are you OK?保罗：诺埃莉亚！我很抱歉！你还好吗？</p><p><strong>Noelia</strong>: I think so. That was lucky.诺埃利亚：我想是的。那是幸运的。</p><p><strong>Paul</strong>: I’m really sorry! I didn’t see you!保罗：我真的很抱歉！我没有看到你！</p><p><strong>Noelia</strong>: That’s all right. I shouldn’t have been running.诺莉亚：没关系。我不应该跑步。</p><p><strong>Paul</strong>: No, no, I should have been paying attention. 保罗：不，不，我应该注意的。</p><p><strong>Noelia</strong>: And they teach you not to run inside at school!诺莉亚：他们教你不要在学校里跑！</p><p><strong>Paul</strong>: Still, it was my fault and I’m sorry.保罗：不过，这是我的错，我很抱歉。</p><p><strong>Noelia</strong>: I’m sorry too. It was both of us. Honestly, it’s fine. I’m fine. Don’t worry about it. Hey, I saved the laptop though!诺莉亚：我也很抱歉。是我们两个人。老实说，还好。我很好。别担心。嘿，我保存了笔记本电脑！</p><p><strong>Bob</strong>: Yeah, I’ll be there in …鲍勃：是的，我会在…</p><p><strong>Noelia</strong>: Oh no!诺埃利亚：哦不！</p><p><strong>Bob</strong>: Uh oh!鲍勃：呃哦！</p><p><strong>Paul</strong>: Ahhhh … 保罗：啊啊……</p><p><strong>Ana</strong>: Hello again! Ooh, I hope Noelia’s OK. So, did you notice the useful phrases used for apologising? Listen to me and then repeat. 安娜：你好！哦，我希望诺莉亚没事。那么，您注意到用于道歉的有用短语了吗？听我说，然后重复。</p><p><strong>I’m so sorry!我很抱歉！</strong></p><p><strong>I’m really sorry!我真的很抱歉！</strong></p><p><strong>That’s all right.没关系。</strong></p><p><strong>It was my fault.是我的错。</strong></p><p><strong>I’m sorry too.我也很抱歉。</strong></p><p><strong>Honestly, it’s fine.老实说，还好。</strong></p><p><strong>Don’t worry about it.别担心。</strong></p><p><strong>Ana</strong>: Try and use some of these phrases the next time you want to apologise in English. Bye for now!安娜：下次你想用英语道歉时，尝试使用其中一些短语。暂时再见！</p></blockquote></li></ul><h3 id="Task-1任务1"><a href="#Task-1任务1" class="headerlink" title="Task 1任务1"></a>Task 1任务1</h3><ul><li><p>Question</p><blockquote><h2 id="Speaking-A2-Apologising-–-1"><a href="#Speaking-A2-Apologising-–-1" class="headerlink" title="Speaking A2: Apologising – 1"></a>Speaking A2: Apologising – 1</h2><p>Are the sentences true or false?</p><ol><li><p>Noelia is trying to go quickly.TrueFalse</p></li><li><p>Paul thinks it’s funny that Noelia falls over.TrueFalse</p></li><li><p>They both apologise.TrueFalse</p></li><li><p>Noelia is hurt.TrueFalse</p></li><li><p>The laptop breaks when Noelia falls over.TrueFalse</p></li><li><p>Bob walks on the laptop by accident.TrueFalse</p></li></ol></blockquote></li><li><p>Answer</p><img src="/2024/03/25/a2-speaking-01-apologising/image-20240325082720995.png" class="" title="image-20240325082720995"></li></ul><h3 id="Task-2任务2"><a href="#Task-2任务2" class="headerlink" title="Task 2任务2"></a>Task 2任务2</h3><ul><li><p>Question</p><p>Complete the dialogue.</p><blockquote><p>OKreallyso sorryrightaboutfinefaulttoo</p></blockquote><blockquote><p>Paul: Noelia! I am (1)……………………………… ! Are you (2)……………………………… ?<br>Noelia: I think so. That was lucky.<br>Paul: I’m (3)……………………………… sorry! I didn’t see you!<br>Noelia: That’s all (4)……………………………… . I shouldn’t have been running.<br>Paul: Still, it was my (5)……………………………… and I’m sorry.<br>Noelia: I’m sorry (6)……………………………… . It was both of us. Honestly, it’s (7)……………………………… .<br>Don’t worry (8)……………………………… it.</p></blockquote></li><li><p>Answer</p><blockquote><ol><li>so sorry</li><li>OK</li><li>really</li><li>right</li><li>fault</li><li>too</li><li>fine</li><li>about</li></ol></blockquote></li><li><p>Question</p><img src="/2024/03/25/a2-speaking-01-apologising/image-20240325082935438.png" class="" title="image-20240325082935438"></li><li><p>Answer</p><img src="/2024/03/25/a2-speaking-01-apologising/image-20240325083049008.png" class="" title="image-20240325083049008"></li></ul><h3 id="Task-3任务3"><a href="#Task-3任务3" class="headerlink" title="Task 3任务3"></a>Task 3任务3</h3><ul><li><p>Question</p><blockquote><p>Put the words and phrases in order to make sentences.</p><ol><li>so I am sorry !</li><li>all . right That’s</li><li>my I’m sorry was It . fault and</li><li>I’m . too sorry</li><li>about . worry Don’t it</li><li>fine it’s . Honestly,</li></ol></blockquote></li><li><p>Answer</p><blockquote><ol><li>I am so sorry!</li><li>That’s all right.</li><li>It was my fault and I’m sorry.</li><li>I’m sorry too.</li><li>Don’t worry about it.</li><li>Honestly, it’s fine.</li></ol></blockquote></li></ul><h3 id="Discussion讨论"><a href="#Discussion讨论" class="headerlink" title="Discussion讨论"></a>Discussion讨论</h3><blockquote><p>When was the last time you said sorry for doing something?你最后一次为某事说对不起是什么时候？</p></blockquote><ul><li><p>Question</p><p>a</p></li><li><p>Answer</p><p>b</p></li><li><p>Question</p><p>a</p></li><li><p>Answer</p><p>b</p></li></ul><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><h4 id="belt"><a href="#belt" class="headerlink" title="belt"></a>belt</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;belt&#x2F;美&#x2F;belt&#x2F;n.腰带，皮带；传送带；地带；v.用腰带系紧；狠打，猛击；（尤指出于惩罚用皮带）抽打，打击（某人）；&lt;非正式&gt;飞驰【名】 （Belt）（英、法、德、西）贝尔特（人名）</p><p>初中 | 高中 | CET4 | CET6 | 考研 | IELTS | TOEFL | 商务英语<br>复数belts第三人称单数belts现在分词belting过去式belted</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>belt&#x2F;bɛlt&#x2F;|CET4 TEM4<br>beltingbeltedbelts<br>1.N-COUNT A belt is a strip of leather or cloth that you fasten around your waist. 腰带; 皮带</p><p>•  He wore a belt with a large brass buckle.<br> 他系着一条缀有一颗大铜扣的皮带。</p><p>2.→see also safety belt→see also seat belt</p><p>safety belt<br>N-COUNT A safety belt is a strap attached to a seat in a car or aeroplane. You fasten it around your body and it stops you from being thrown forward if there is an accident. 安全带</p><p>•  Please return to your seats and fasten your safety belts.<br> 请回到你们的座位上并系好安全带。</p><p>seat belt<br>N-COUNT A seat belt is a strap attached to a seat in a car or an aircraft. You fasten it across your body in order to prevent yourself being thrown out of the seat if there is a sudden movement or stop. (汽车、飞机座椅上的) 安全带</p><p>•  The fact I was wearing a seat belt saved my life.<br> 我系着安全带，幸免于难。</p><p>3.N-COUNT A belt in a machine is a circular strip of rubber that is used to drive moving parts or to move objects along. 输送带</p><p>•  The turning disc is connected by a drive belt to an electric motor.<br> 转盘与电动马达之间由一条输送带连接。</p><p>4.→see also conveyor belt</p><p>conveyor belt&#x2F;kənˈveɪə bɛlt&#x2F;<br>N-COUNT A conveyor belt or a conveyor is a continuously moving strip of rubber or metal which is used in factories for moving objects along so that they can be dealt with as quickly as possible. 传送带</p><p>•  The damp bricks went along a conveyor belt into another shed to dry.<br> 潮湿的砖块沿着传送带进入另一个棚子进行干燥。</p><p>5.N-COUNT A belt of land or sea is a long, narrow area of it that has some special feature. 狭长地带</p><p>•  Miners in Zambia’s northern copper belt have gone on strike.<br> 赞比亚北部铜矿区的矿工们举行了罢工。</p><p>6.→see also commuter belt→see also green belt</p><p>commuter belt<br>N-COUNT A commuter belt is the area surrounding a large city, where many people who work in the city live. (大城市周边的) 通勤者居住带</p><p>•  …people who live in the commuter belt around the capital.<br> …居住在首都周边通勤者居住带的人们。</p><p>7.V-T If someone belts you, they hit you very hard. If someone belts something, they hit it very hard. 狠揍; 猛打</p><p>•  “Is it right she belted old George in the gut?” she asked.<br> “她狠揍老乔治的肚子对吗？”她质问道。</p><p>•  Torrealba belted the ball into the left-field bleachers.<br> 托雷尔巴把球猛打到左边的看台上。</p><p>8.N-COUNT Belt is also a noun. 狠揍; 猛打</p><p>•  Father would give you a belt over the head with the scrubbing brush.<br> 父亲会拿板刷狠狠地敲你的头。</p><p>9.V-I If you belt somewhere, you move or travel there very fast. 飞奔</p><p>•  Darren and I belted down the stairs and ran out of the house.<br> 达伦和我飞奔下楼，跑出了屋子。</p><p>10.PHRASE Something that is below the belt is cruel and unfair. 不公正的</p><p>•  Do you think it’s a bit below the belt what they’re doing?<br> 你认为他们的所作所为有点不太公正吗？</p><p>11.PHRASE If you have to tighten your belt, you have to spend less money and manage without things because you have less money than you used to have. 省吃俭用</p><p>•  Clearly, if you are spending more than your income, you’ll need to tighten your belt.<br> 很显然，如果你现在花钱就入不敷出，以后就不得不勒紧腰带了。</p><p>12.PHRASE If you have something under your belt, you have already achieved it or done it. 已成囊中之物</p><p>•  Clare is now a full-time author with six books, including four novels, under her belt.<br> 克莱尔现在是个名下有6本书的专职作家，其中包括4本小说。</p></blockquote><h4 id="rucksack"><a href="#rucksack" class="headerlink" title="rucksack"></a>rucksack</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈrʌksæk&#x2F;美&#x2F;ˈrʌksæk&#x2F;n.帆布背包</p><p>复数rucksacks</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>rucksack&#x2F;ˈrʌkˌsæk&#x2F;|TEM8<br>N-COUNT A rucksack is a bag with straps that go over your shoulders, so that you can carry things on your back, for example when you are walking or climbing. 双肩背</p><p>In his rucksack he carried, besides pencils and notebooks, poetry.在他的帆布背包里，除了铅笔、笔记本外，他还带了诗集。</p><p>My rucksack seems to have gone walkabout.我的旅行包好像是丢了。</p></blockquote><h4 id="strap"><a href="#strap" class="headerlink" title="strap"></a>strap</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;stræp&#x2F;美&#x2F;stræp&#x2F;n.带子，皮带；铁皮条，金属带，铰链片；鞭打（the strap）；拉手吊带，拉手吊环；v.（用带子）束住，捆绑；用绷带包扎（伤口）；用皮鞭抽打，鞭打</p><p>CET4 | CET6 | 考研 | IELTS | TOEFL<br>复数straps第三人称单数straps现在分词strapping过去式strapped过去分词strapped</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>strap&#x2F;stræp&#x2F;|CET4 TEM4<br>strappingstrappedstraps<br>1.N-COUNT A strap is a narrow piece of leather, cloth, or other material. Straps are used to carry things, fasten things together, or to hold a piece of clothing in place. 带子</p><p>•  Nancy gripped the strap of her beach bag.<br> 南希抓住自己海滩休闲包的带子。</p><p>•  She pulled the strap of her nightgown onto her shoulder.<br> 她把睡衣的带子拉到她的肩上。</p><p>2.V-T If you strap something somewhere, you fasten it there with a strap. 用带子绑</p><p>•  She strapped the baby seat into the car.<br> 她把婴儿座椅用带子绑在那辆汽车上。</p></blockquote><h4 id="bracelet"><a href="#bracelet" class="headerlink" title="bracelet"></a>bracelet</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈbreɪslət&#x2F;美&#x2F;ˈbreɪslət&#x2F;n.手镯，臂镯</p><p>GRE<br>复数bracelets</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>bracelet&#x2F;ˈbreɪslɪt&#x2F;|CET6+ TEM4<br>N-COUNT A bracelet is a chain or band, usually made of metal, that you wear around your wrist as jewellery. 手镯</p><p>Hanging from his right wrist is a heavy gold bracelet.<br>从他的右腕上垂下的是一只沉甸甸的金手镯。<br>Inside was a gold charm bracelet, with one charm on it - a star.<br>里面是个金制挂坠手链，上面有一个挂坠——一颗星星。</p></blockquote><h4 id="scarf"><a href="#scarf" class="headerlink" title="scarf"></a>scarf</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;skɑːf&#x2F;美&#x2F;skɑːrf&#x2F;n.围巾，披巾，头巾；（嵌接的）斜面，斜嵌槽；鲸脂的切口；v.&lt;美，非正式&gt;狼吞虎咽地吃；嵌接，斜接（木材，金属）；切割（鲸）脂；【名】 （Scarf）（英）斯卡夫（人名）</p><p>初中 | 高中 | 考研 | TOEFL<br>复数scarves或scarfs第三人称单数scarfs现在分词scarfing过去式scarfed过去分词scarfed</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>scarf&#x2F;skɑːf&#x2F;|CET6+ TEM4<br>N-COUNT A scarf is a piece of cloth that you wear around your neck or head, usually to keep yourself warm. 围巾</p><p>•  He reached up to loosen the scarf around his neck.<br> 他伸出手松开围在脖子上的围巾。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a2-speaking - speaking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a2-speaking</title>
    <link href="/2024/03/25/a2-speaking-01-template/"/>
    <url>/2024/03/25/a2-speaking-01-template/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/a1-a2-vocabulary-01-accessories/RS5963_459338427-low.jpg" alt="img"></p><h1 id="Accessories"><a href="#Accessories" class="headerlink" title="Accessories"></a>Accessories</h1><p>Do the exercises to learn the words for some accessories.</p><ul><li><p>Question</p><blockquote><p>beltrucksackhatglovesearringsnecklacepocketbraceletscarfbagglassescap</p></blockquote><p><img src="/a1-a2-vocabulary-01-accessories/image-20240324214035010.png" alt="image-20240324214035010"></p></li><li><p>Answer</p><p><img src="/a1-a2-vocabulary-01-accessories/image-20240324214250610.png" alt="image-20240324214250610"></p></li></ul><ul><li><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 1</a></li><li><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 2</a></li></ul><blockquote><p>This holds your trousers up. It goes around your waist.</p><p>belt</p><p>cap</p><p>necklace</p><p>You wear this on your head. It protects your head and eyes from the sun.</p><p>bag</p><p>cap</p><p>earrings</p><p>You wear these to see better.</p><p>glasses</p><p>pocket</p><p>scarf</p><p>You wear this on your back.</p><p>gloves</p><p>necklace</p><p>rucksack</p><p>You wear this to keep warm. It goes around your neck.</p><p>bracelet</p><p>hat</p><p>scarf</p><p>This is a place in your trousers or shirt. You can put things like your phone and money here.</p><p>cap</p><p>hat</p><p>pocket</p><p>You wear these on your hands when it’s cold.</p><p>earrings</p><p>gloves</p><p>hat</p><p>You wear these on your ears.</p><p>bag</p><p>earrings</p><p>necklace</p></blockquote><ul><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 3</a></p><blockquote><h2 id="Vocabulary-A1-A2-Accessories-Odd-one-out"><a href="#Vocabulary-A1-A2-Accessories-Odd-one-out" class="headerlink" title="Vocabulary A1-A2: Accessories - Odd one out"></a>Vocabulary A1-A2: Accessories - Odd one out</h2><p>Choose the things that DO NOT belong.</p><p>Things we wear on our head or neck</p><p>cap</p><p>earrings</p><p>glasses</p><p>pocket</p><p>scarf</p><p>Things for carrying other things</p><p>bag</p><p>cap</p><p>pocket</p><p>rucksack</p><p>We usually wear only one of these</p><p>belt</p><p>cap</p><p>earring</p><p>rucksack</p><p>scarf</p></blockquote></li><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 4</a></p></li><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 5</a></p></li></ul><h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><p>Do you have an accessory that is special in some way? Tell us about it.</p><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><h4 id="belt"><a href="#belt" class="headerlink" title="belt"></a>belt</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;belt&#x2F;美&#x2F;belt&#x2F;n.腰带，皮带；传送带；地带；v.用腰带系紧；狠打，猛击；（尤指出于惩罚用皮带）抽打，打击（某人）；&lt;非正式&gt;飞驰【名】 （Belt）（英、法、德、西）贝尔特（人名）</p><p>初中 | 高中 | CET4 | CET6 | 考研 | IELTS | TOEFL | 商务英语<br>复数belts第三人称单数belts现在分词belting过去式belted</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>belt&#x2F;bɛlt&#x2F;|CET4 TEM4<br>beltingbeltedbelts<br>1.N-COUNT A belt is a strip of leather or cloth that you fasten around your waist. 腰带; 皮带</p><p>•  He wore a belt with a large brass buckle.<br> 他系着一条缀有一颗大铜扣的皮带。</p><p>2.→see also safety belt→see also seat belt</p><p>safety belt<br>N-COUNT A safety belt is a strap attached to a seat in a car or aeroplane. You fasten it around your body and it stops you from being thrown forward if there is an accident. 安全带</p><p>•  Please return to your seats and fasten your safety belts.<br> 请回到你们的座位上并系好安全带。</p><p>seat belt<br>N-COUNT A seat belt is a strap attached to a seat in a car or an aircraft. You fasten it across your body in order to prevent yourself being thrown out of the seat if there is a sudden movement or stop. (汽车、飞机座椅上的) 安全带</p><p>•  The fact I was wearing a seat belt saved my life.<br> 我系着安全带，幸免于难。</p><p>3.N-COUNT A belt in a machine is a circular strip of rubber that is used to drive moving parts or to move objects along. 输送带</p><p>•  The turning disc is connected by a drive belt to an electric motor.<br> 转盘与电动马达之间由一条输送带连接。</p><p>4.→see also conveyor belt</p><p>conveyor belt&#x2F;kənˈveɪə bɛlt&#x2F;<br>N-COUNT A conveyor belt or a conveyor is a continuously moving strip of rubber or metal which is used in factories for moving objects along so that they can be dealt with as quickly as possible. 传送带</p><p>•  The damp bricks went along a conveyor belt into another shed to dry.<br> 潮湿的砖块沿着传送带进入另一个棚子进行干燥。</p><p>5.N-COUNT A belt of land or sea is a long, narrow area of it that has some special feature. 狭长地带</p><p>•  Miners in Zambia’s northern copper belt have gone on strike.<br> 赞比亚北部铜矿区的矿工们举行了罢工。</p><p>6.→see also commuter belt→see also green belt</p><p>commuter belt<br>N-COUNT A commuter belt is the area surrounding a large city, where many people who work in the city live. (大城市周边的) 通勤者居住带</p><p>•  …people who live in the commuter belt around the capital.<br> …居住在首都周边通勤者居住带的人们。</p><p>7.V-T If someone belts you, they hit you very hard. If someone belts something, they hit it very hard. 狠揍; 猛打</p><p>•  “Is it right she belted old George in the gut?” she asked.<br> “她狠揍老乔治的肚子对吗？”她质问道。</p><p>•  Torrealba belted the ball into the left-field bleachers.<br> 托雷尔巴把球猛打到左边的看台上。</p><p>8.N-COUNT Belt is also a noun. 狠揍; 猛打</p><p>•  Father would give you a belt over the head with the scrubbing brush.<br> 父亲会拿板刷狠狠地敲你的头。</p><p>9.V-I If you belt somewhere, you move or travel there very fast. 飞奔</p><p>•  Darren and I belted down the stairs and ran out of the house.<br> 达伦和我飞奔下楼，跑出了屋子。</p><p>10.PHRASE Something that is below the belt is cruel and unfair. 不公正的</p><p>•  Do you think it’s a bit below the belt what they’re doing?<br> 你认为他们的所作所为有点不太公正吗？</p><p>11.PHRASE If you have to tighten your belt, you have to spend less money and manage without things because you have less money than you used to have. 省吃俭用</p><p>•  Clearly, if you are spending more than your income, you’ll need to tighten your belt.<br> 很显然，如果你现在花钱就入不敷出，以后就不得不勒紧腰带了。</p><p>12.PHRASE If you have something under your belt, you have already achieved it or done it. 已成囊中之物</p><p>•  Clare is now a full-time author with six books, including four novels, under her belt.<br> 克莱尔现在是个名下有6本书的专职作家，其中包括4本小说。</p></blockquote><h4 id="rucksack"><a href="#rucksack" class="headerlink" title="rucksack"></a>rucksack</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈrʌksæk&#x2F;美&#x2F;ˈrʌksæk&#x2F;n.帆布背包</p><p>复数rucksacks</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>rucksack&#x2F;ˈrʌkˌsæk&#x2F;|TEM8<br>N-COUNT A rucksack is a bag with straps that go over your shoulders, so that you can carry things on your back, for example when you are walking or climbing. 双肩背</p><p>In his rucksack he carried, besides pencils and notebooks, poetry.在他的帆布背包里，除了铅笔、笔记本外，他还带了诗集。</p><p>My rucksack seems to have gone walkabout.我的旅行包好像是丢了。</p></blockquote><h4 id="strap"><a href="#strap" class="headerlink" title="strap"></a>strap</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;stræp&#x2F;美&#x2F;stræp&#x2F;n.带子，皮带；铁皮条，金属带，铰链片；鞭打（the strap）；拉手吊带，拉手吊环；v.（用带子）束住，捆绑；用绷带包扎（伤口）；用皮鞭抽打，鞭打</p><p>CET4 | CET6 | 考研 | IELTS | TOEFL<br>复数straps第三人称单数straps现在分词strapping过去式strapped过去分词strapped</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>strap&#x2F;stræp&#x2F;|CET4 TEM4<br>strappingstrappedstraps<br>1.N-COUNT A strap is a narrow piece of leather, cloth, or other material. Straps are used to carry things, fasten things together, or to hold a piece of clothing in place. 带子</p><p>•  Nancy gripped the strap of her beach bag.<br> 南希抓住自己海滩休闲包的带子。</p><p>•  She pulled the strap of her nightgown onto her shoulder.<br> 她把睡衣的带子拉到她的肩上。</p><p>2.V-T If you strap something somewhere, you fasten it there with a strap. 用带子绑</p><p>•  She strapped the baby seat into the car.<br> 她把婴儿座椅用带子绑在那辆汽车上。</p></blockquote><h4 id="bracelet"><a href="#bracelet" class="headerlink" title="bracelet"></a>bracelet</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈbreɪslət&#x2F;美&#x2F;ˈbreɪslət&#x2F;n.手镯，臂镯</p><p>GRE<br>复数bracelets</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>bracelet&#x2F;ˈbreɪslɪt&#x2F;|CET6+ TEM4<br>N-COUNT A bracelet is a chain or band, usually made of metal, that you wear around your wrist as jewellery. 手镯</p><p>Hanging from his right wrist is a heavy gold bracelet.<br>从他的右腕上垂下的是一只沉甸甸的金手镯。<br>Inside was a gold charm bracelet, with one charm on it - a star.<br>里面是个金制挂坠手链，上面有一个挂坠——一颗星星。</p></blockquote><h4 id="scarf"><a href="#scarf" class="headerlink" title="scarf"></a>scarf</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;skɑːf&#x2F;美&#x2F;skɑːrf&#x2F;n.围巾，披巾，头巾；（嵌接的）斜面，斜嵌槽；鲸脂的切口；v.&lt;美，非正式&gt;狼吞虎咽地吃；嵌接，斜接（木材，金属）；切割（鲸）脂；【名】 （Scarf）（英）斯卡夫（人名）</p><p>初中 | 高中 | 考研 | TOEFL<br>复数scarves或scarfs第三人称单数scarfs现在分词scarfing过去式scarfed过去分词scarfed</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>scarf&#x2F;skɑːf&#x2F;|CET6+ TEM4<br>N-COUNT A scarf is a piece of cloth that you wear around your neck or head, usually to keep yourself warm. 围巾</p><p>•  He reached up to loosen the scarf around his neck.<br> 他伸出手松开围在脖子上的围巾。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a2-speaking - speaking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【A1-A2-Vocabulary】04 Bedrooms-卧室</title>
    <link href="/2024/03/24/a1-a2-vocabulary-04-bedrooms/"/>
    <url>/2024/03/24/a1-a2-vocabulary-04-bedrooms/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Bedrooms"><a href="#Bedrooms" class="headerlink" title="Bedrooms"></a>Bedrooms</h1><p>Do these exercises to learn words to talk about your bedroom.</p><h3 id="Match-the-words-and-pictures"><a href="#Match-the-words-and-pictures" class="headerlink" title="Match the words and pictures."></a>Match the words and pictures.</h3><ul><li><p>Question</p><img src="/2024/03/24/a1-a2-vocabulary-04-bedrooms/image-20240326095518215.png" class="" title="image-20240326095518215"></li><li><p>Answer</p><img src="/2024/03/24/a1-a2-vocabulary-04-bedrooms/image-20240326095809681.png" class="" title="image-20240326095809681"></li></ul><h3 id="Task-1"><a href="#Task-1" class="headerlink" title="Task 1"></a>Task 1</h3><h4 id="Bedrooms-Alphabetical-order"><a href="#Bedrooms-Alphabetical-order" class="headerlink" title="Bedrooms - Alphabetical order"></a>Bedrooms - Alphabetical order</h4><p>Put the words in alphabetical order.</p><ul><li><p>Question</p><p>Skip</p></li><li><p>Answer</p><img src="/2024/03/24/a1-a2-vocabulary-04-bedrooms/image-20240326100111578.png" class="" title="image-20240326100111578"><img src="/2024/03/24/a1-a2-vocabulary-04-bedrooms/image-20240326100135217.png" class="" title="image-20240326100135217"></li></ul><h3 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h3><h4 id="Bedrooms-Spelling"><a href="#Bedrooms-Spelling" class="headerlink" title="Bedrooms - Spelling"></a>Bedrooms - Spelling</h4><p>Listen and write the words.</p><p>Skip</p><h3 id="Task-3"><a href="#Task-3" class="headerlink" title="Task 3"></a>Task 3</h3><h4 id="Bedrooms-Definitions"><a href="#Bedrooms-Definitions" class="headerlink" title="Bedrooms - Definitions"></a>Bedrooms - Definitions</h4><ul><li><p>Question</p><p>Choose the best answer.</p><blockquote><p>1.One person sleeps in this.<br>[]alarm clock<br>[]double bed<br>[]single bed</p><p>2.Two people can sleep in this.<br>[]lamp<br>[]double bed<br>[]single bed</p><p>3.This thin cloth covers a bed.<br>[]carpet<br>[]duvet<br>[]sheet</p><p>4.This is on the floor. It is soft.<br>[]blanket<br>[]carpet<br>[]sheet</p><p>5.This is a soft bed cover. It has feathers inside.<br>[]blanket<br>[]double bed<br>[]duvet</p><p>6.This is a warm cloth. We use it when it is cold, especially for the bed.<br>[]blanket<br>[]carpet<br>[]duvet</p><p>7.This is a big cupboard for your clothes.<br>[]lamp<br>[]single bed<br>[]wardrobe</p><p>8.People put their head on this in bed.<br>[]duvet<br>[]pillow<br>[]wardrobe</p><p>9.You turn this on to see at night.<br>[]carpet<br>[]lamp<br>[]sheet</p><p>10.This makes a noise to wake you up.<br>[]alarm clock<br>[]blanket<br>[]pillow</p></blockquote></li><li><p>Answer</p><blockquote><p>1.One person sleeps in this.<br>[]alarm clock<br>[]double bed<br>[*]single bed</p><p>2.Two people can sleep in this.<br>[]lamp<br>[*]double bed<br>[]single bed</p><p>3.This thin cloth covers a bed.<br>[]carpet<br>[]duvet<br>[*]sheet</p><p>4.This is on the floor. It is soft.<br>[]blanket<br>[*]carpet<br>[]sheet</p><p>5.This is a soft bed cover. It has feathers inside.<br>[]blanket<br>[]double bed<br>[*]duvet</p><p>6.This is a warm cloth. We use it when it is cold, especially for the bed.<br>[*]blanket<br>[]carpet<br>[]duvet</p><p>7.This is a big cupboard for your clothes.<br>[]lamp<br>[]single bed<br>[*]wardrobe</p><p>8.People put their head on this in bed.<br>[]duvet<br>[*]pillow<br>[]wardrobe</p><p>9.You turn this on to see at night.<br>[]carpet<br>[*]lamp<br>[]sheet</p><p>10.This makes a noise to wake you up.<br>[*]alarm clock<br>[]blanket<br>[]pillow</p></blockquote></li></ul><h3 id="Task-4"><a href="#Task-4" class="headerlink" title="Task 4"></a>Task 4</h3><h4 id="Bedrooms-True-or-false"><a href="#Bedrooms-True-or-false" class="headerlink" title="Bedrooms - True or false"></a>Bedrooms - True or false</h4><ul><li><p>Question</p><p>Choose the best answer.</p><blockquote><p>1.A pillow is usually soft.TrueFalse<br>2.We often use a blanket in hot weather.TrueFalse<br>3.We normally eat breakfast and lunch at a bedside table.TrueFalse<br>4.You hang your shirts in the chest of drawers.TrueFalse<br>5.We use a duvet in cold weather.TrueFalse<br>6.A single bed is big enough for two people.TrueFalse<br>7.You usually hang your socks and underwear in the wardrobe.TrueFalse<br>8.You take the sheet off the bed when you sleep.TrueFalse<br>9.The alarm clock tells the time and wakes you up.TrueFalse<br>10.You usually turn on your lamp in the middle of the day.TrueFalse</p></blockquote></li><li><p>Answer</p><blockquote><p>1.A pillow is usually soft.[True]False<br>2.We often use a blanket in hot weather.True[False]<br>3.We normally eat breakfast and lunch at a bedside table.True[False]<br>4.You hang your shirts in the chest of drawers.True[False]<br>5.We use a duvet in cold weather.[True]False<br>6.A single bed is big enough for two people.True[False]<br>7.You usually hang your socks and underwear in the wardrobe.True[False]<br>8.You take the sheet off the bed when you sleep.True[False]<br>9.The alarm clock tells the time and wakes you up.[True]False<br>10.You usually turn on your lamp in the middle of the day.True[False]</p></blockquote></li></ul><h3 id="Task-5"><a href="#Task-5" class="headerlink" title="Task 5"></a>Task 5</h3><h4 id="Bedrooms-Grouping"><a href="#Bedrooms-Grouping" class="headerlink" title="Bedrooms - Grouping"></a>Bedrooms - Grouping</h4><ul><li><p>Question</p><p>Put the words in the groups.</p><img src="/2024/03/24/a1-a2-vocabulary-04-bedrooms/image-20240326105536422.png" class="" title="image-20240326105536422"></li><li><p>Answer</p><img src="/2024/03/24/a1-a2-vocabulary-04-bedrooms/image-20240326105632846.png" class="" title="image-20240326105632846"></li></ul><h3 id="Task-6"><a href="#Task-6" class="headerlink" title="Task 6"></a>Task 6</h3><h4 id="Bedrooms-Plural-forms"><a href="#Bedrooms-Plural-forms" class="headerlink" title="Bedrooms - Plural forms"></a>Bedrooms - Plural forms</h4><ul><li><p>Question</p><p>Choose the correct plural form.选择正确的复数形式</p><blockquote><p>1.alarm clock<br>alarms clock<br>alarm clocks<br>alarms clocks</p><p>2.bedside table<br>bedsides table<br>bedside tables<br>bedsides tables</p><p>3.chest of drawers<br>chests of drawers<br>chests of drawer</p><p>4.single bed<br>singles bed<br>single beds<br>singles beds</p></blockquote></li><li><p>Answer</p><blockquote><p>1.alarm clock<br>alarms clock<br>[*] alarm clocks<br>alarms clocks</p><p>2.bedside table<br>bedsides table<br>[*] bedside tables<br>bedsides tables</p><p>3.chest of drawers<br>[*] chests of drawers<br>chests of drawer</p><p>4.single bed<br>singles bed<br>[*] single beds<br>singles beds</p></blockquote></li></ul><h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><p>What do you have in your bedroom?</p><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><h4 id="duvet"><a href="#duvet" class="headerlink" title="duvet"></a>duvet</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈduːveɪ&#x2F;美&#x2F;ˈduːveɪ&#x2F;n.羽绒被（等于 continental quilt）；羽绒衫（等于 duvet jacket）；绒毛状生长物；n.（Duvet）人名；（法）迪韦</p><p>复数duvets</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>duvet&#x2F;ˈduːveɪ&#x2F;<br>N-COUNT A duvet is a large cover filled with feathers or similar material that you use like a blanket. (羽绒或其他类似材料填充的) 夹被。</p><p>1.There’s an extra duvet in the bottom drawer of the cupboard.在柜子最下层的抽屉里还有一床羽绒被。</p><p> 2.He fell asleep in the front room so I covered him up with a duvet.他在前屋睡着了，所以我给他盖上了一床羽绒被。</p></blockquote><h4 id="chest-of-drawers"><a href="#chest-of-drawers" class="headerlink" title="chest of drawers"></a>chest of drawers</h4><ul><li>简易</li></ul><blockquote><p>抽屉柜：一种家具，内部有抽屉，用于存放衣物等物品。</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>chest of drawers<br>N-COUNT A chest of drawers is a low, flat piece of furniture with drawers in which you keep clothes and other things. 五屉柜。</p><p>The door swung inwards to crash against a chest of drawers behind it.门摆向里面，砰的一声猛力撞上了门后的五斗橱。</p></blockquote><h4 id="carpet"><a href="#carpet" class="headerlink" title="carpet"></a>carpet</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈkɑːpɪt&#x2F;美&#x2F;ˈkɑːrpɪt&#x2F;n.地毯；覆盖地面的一层厚东西；&lt;美，非正式&gt;人工球场；地毯衣蛾；v.给……铺地毯；厚厚地铺上；&lt;英，非正式&gt;训斥，斥责；【名】 （Carpet）（美、巴、印、法、比）卡尔佩特（人名）</p><p>高中 | CET4 | CET6 | 考研 | GMAT | 商务英语<br>复数carpets第三人称单数carpets现在分词carpeting过去式carpeted过去分词carpeted</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>carpet&#x2F;ˈkɑːpɪt&#x2F;|CET4 TEM4<br>carpetingcarpetedcarpets<br>1.N-VAR A carpet is a thick covering of soft material which is laid over a floor or a staircase. 地毯</p><p>•  They put down wooden boards, and laid new carpets on top.<br> 他们安装了木地板，还在上面铺了新地毯。</p><p>2.V-T If a floor or a room is carpeted, a carpet is laid on the floor. 铺地毯</p><p>•  The room had been carpeted and the windows glazed with coloured glass. 房间里铺上了地毯，彩色的玻璃令窗户闪闪发亮。</p><p>My bare feet were soundless over the carpet.我光脚踩在地毯上没有声音。<br>The carpet of pine needles was soft underfoot.松针铺成的地毯在脚下软软的。</p></blockquote><h4 id="sheet"><a href="#sheet" class="headerlink" title="sheet"></a>sheet</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ʃiːt&#x2F;美&#x2F;ʃiːt&#x2F;n.床单，被单；布罩，盖布；纸片，纸张；（Excel 中的）工作表；简要记录，纪要；一整版邮票；（尤指大地区系列地图的一部分的）一张地图；薄板，薄片；（冰或水的）一大片；（雨或火）一大片；拉帆绳，帆脚索；敞舱船的首尾区域；v.（用布）盖上，裹上；把（帆）扣紧（或放松）；（雨）倾盆（或瓢泼）而下；【名】 （Sheet）（英）希特（人名）</p><p>高中 | CET4 | CET6 | 考研 | IELTS<br>复数sheets第三人称单数sheets现在分词sheeting过去式sheeted过去分词sheeted</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>sheet&#x2F;ʃiːt&#x2F;|CET4 TEM4<br>1.N-COUNT A sheet is a large rectangular piece of cotton or other cloth that you sleep on or cover yourself with in a bed. 床单; 被单</p><p>•  Once a week, a maid changes the sheets.<br> 女仆每个星期换一次床单。</p><p>2.N-COUNT A sheet of paper is a rectangular piece of paper. (一) 张 (纸)</p><p>•  …a sheet of newspaper.<br> …一张报纸。</p><p>3.N-COUNT You can use sheet to refer to a piece of paper which gives information about something. (一份) 资料</p><p>•  …information sheets on each country in the world.<br> …有关世界各国的情报资料。</p><p>4.N-COUNT A sheet of glass, metal, or wood is a large, flat, thin piece of it. (一) 块 (玻璃、金属或木头等)</p><p>•  …a cracked sheet of glass.<br> …一块裂开的玻璃。</p><p>•  Overhead cranes were lifting giant sheets of steel.<br> 高架起重机正吊起一块块巨大的钢材。</p><p>5.N-COUNT A sheet of something is a thin wide layer of it over the surface of something else. (一) 大层 (覆盖物)</p><p>•  …a sheet of ice.<br> …一大层冰。</p><p>6.V to provide with, cover, or wrap in a sheet 包裹</p><p>7.V (of rain, snow, etc) to fall heavily (雨，雪等)下得很大</p><p>8.→see also balance sheet→see also broadsheet→see also fact sheet→see also spreadsheet→see also worksheet</p><p>His head was swathed in bandages made from a torn sheet.他的头上缠满了许多用床单撕成的绷带。</p><p>I placed a sheet of plastic over the top of the container.我在容器的上面盖了一层塑料纸。</p><p>Once the decision is reached, he can date and sign the sheet.一旦做出决定，他就可以在那张表上签上日期和名字。</p><p>This sheet contained a list of problems a patient might like to raise with the doctor.这张纸写有一个病人可能想向医生提出的问题清单。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a1-a2-vocabulary - vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a1-a2 词汇-配件</title>
    <link href="/2024/03/24/a1-a2-vocabulary-05-body-parts-1/"/>
    <url>/2024/03/24/a1-a2-vocabulary-05-body-parts-1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/a1-a2-vocabulary-01-accessories/RS5963_459338427-low.jpg" alt="img"></p><h1 id="Accessories"><a href="#Accessories" class="headerlink" title="Accessories"></a>Accessories</h1><p>Do the exercises to learn the words for some accessories.</p><ul><li><p>Question</p><blockquote><p>beltrucksackhatglovesearringsnecklacepocketbraceletscarfbagglassescap</p></blockquote><p><img src="/a1-a2-vocabulary-01-accessories/image-20240324214035010.png" alt="image-20240324214035010"></p></li><li><p>Answer</p><p><img src="/a1-a2-vocabulary-01-accessories/image-20240324214250610.png" alt="image-20240324214250610"></p></li></ul><ul><li><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 1</a></li><li><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 2</a></li></ul><blockquote><p>This holds your trousers up. It goes around your waist.</p><p>belt</p><p>cap</p><p>necklace</p><p>You wear this on your head. It protects your head and eyes from the sun.</p><p>bag</p><p>cap</p><p>earrings</p><p>You wear these to see better.</p><p>glasses</p><p>pocket</p><p>scarf</p><p>You wear this on your back.</p><p>gloves</p><p>necklace</p><p>rucksack</p><p>You wear this to keep warm. It goes around your neck.</p><p>bracelet</p><p>hat</p><p>scarf</p><p>This is a place in your trousers or shirt. You can put things like your phone and money here.</p><p>cap</p><p>hat</p><p>pocket</p><p>You wear these on your hands when it’s cold.</p><p>earrings</p><p>gloves</p><p>hat</p><p>You wear these on your ears.</p><p>bag</p><p>earrings</p><p>necklace</p></blockquote><ul><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 3</a></p><blockquote><h2 id="Vocabulary-A1-A2-Accessories-Odd-one-out"><a href="#Vocabulary-A1-A2-Accessories-Odd-one-out" class="headerlink" title="Vocabulary A1-A2: Accessories - Odd one out"></a>Vocabulary A1-A2: Accessories - Odd one out</h2><p>Choose the things that DO NOT belong.</p><p>Things we wear on our head or neck</p><p>cap</p><p>earrings</p><p>glasses</p><p>pocket</p><p>scarf</p><p>Things for carrying other things</p><p>bag</p><p>cap</p><p>pocket</p><p>rucksack</p><p>We usually wear only one of these</p><p>belt</p><p>cap</p><p>earring</p><p>rucksack</p><p>scarf</p></blockquote></li><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 4</a></p></li><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 5</a></p></li></ul><h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><p>Do you have an accessory that is special in some way? Tell us about it.</p><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><h4 id="belt"><a href="#belt" class="headerlink" title="belt"></a>belt</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;belt&#x2F;美&#x2F;belt&#x2F;n.腰带，皮带；传送带；地带；v.用腰带系紧；狠打，猛击；（尤指出于惩罚用皮带）抽打，打击（某人）；&lt;非正式&gt;飞驰【名】 （Belt）（英、法、德、西）贝尔特（人名）</p><p>初中 | 高中 | CET4 | CET6 | 考研 | IELTS | TOEFL | 商务英语<br>复数belts第三人称单数belts现在分词belting过去式belted</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>belt&#x2F;bɛlt&#x2F;|CET4 TEM4<br>beltingbeltedbelts<br>1.N-COUNT A belt is a strip of leather or cloth that you fasten around your waist. 腰带; 皮带</p><p>•  He wore a belt with a large brass buckle.<br> 他系着一条缀有一颗大铜扣的皮带。</p><p>2.→see also safety belt→see also seat belt</p><p>safety belt<br>N-COUNT A safety belt is a strap attached to a seat in a car or aeroplane. You fasten it around your body and it stops you from being thrown forward if there is an accident. 安全带</p><p>•  Please return to your seats and fasten your safety belts.<br> 请回到你们的座位上并系好安全带。</p><p>seat belt<br>N-COUNT A seat belt is a strap attached to a seat in a car or an aircraft. You fasten it across your body in order to prevent yourself being thrown out of the seat if there is a sudden movement or stop. (汽车、飞机座椅上的) 安全带</p><p>•  The fact I was wearing a seat belt saved my life.<br> 我系着安全带，幸免于难。</p><p>3.N-COUNT A belt in a machine is a circular strip of rubber that is used to drive moving parts or to move objects along. 输送带</p><p>•  The turning disc is connected by a drive belt to an electric motor.<br> 转盘与电动马达之间由一条输送带连接。</p><p>4.→see also conveyor belt</p><p>conveyor belt&#x2F;kənˈveɪə bɛlt&#x2F;<br>N-COUNT A conveyor belt or a conveyor is a continuously moving strip of rubber or metal which is used in factories for moving objects along so that they can be dealt with as quickly as possible. 传送带</p><p>•  The damp bricks went along a conveyor belt into another shed to dry.<br> 潮湿的砖块沿着传送带进入另一个棚子进行干燥。</p><p>5.N-COUNT A belt of land or sea is a long, narrow area of it that has some special feature. 狭长地带</p><p>•  Miners in Zambia’s northern copper belt have gone on strike.<br> 赞比亚北部铜矿区的矿工们举行了罢工。</p><p>6.→see also commuter belt→see also green belt</p><p>commuter belt<br>N-COUNT A commuter belt is the area surrounding a large city, where many people who work in the city live. (大城市周边的) 通勤者居住带</p><p>•  …people who live in the commuter belt around the capital.<br> …居住在首都周边通勤者居住带的人们。</p><p>7.V-T If someone belts you, they hit you very hard. If someone belts something, they hit it very hard. 狠揍; 猛打</p><p>•  “Is it right she belted old George in the gut?” she asked.<br> “她狠揍老乔治的肚子对吗？”她质问道。</p><p>•  Torrealba belted the ball into the left-field bleachers.<br> 托雷尔巴把球猛打到左边的看台上。</p><p>8.N-COUNT Belt is also a noun. 狠揍; 猛打</p><p>•  Father would give you a belt over the head with the scrubbing brush.<br> 父亲会拿板刷狠狠地敲你的头。</p><p>9.V-I If you belt somewhere, you move or travel there very fast. 飞奔</p><p>•  Darren and I belted down the stairs and ran out of the house.<br> 达伦和我飞奔下楼，跑出了屋子。</p><p>10.PHRASE Something that is below the belt is cruel and unfair. 不公正的</p><p>•  Do you think it’s a bit below the belt what they’re doing?<br> 你认为他们的所作所为有点不太公正吗？</p><p>11.PHRASE If you have to tighten your belt, you have to spend less money and manage without things because you have less money than you used to have. 省吃俭用</p><p>•  Clearly, if you are spending more than your income, you’ll need to tighten your belt.<br> 很显然，如果你现在花钱就入不敷出，以后就不得不勒紧腰带了。</p><p>12.PHRASE If you have something under your belt, you have already achieved it or done it. 已成囊中之物</p><p>•  Clare is now a full-time author with six books, including four novels, under her belt.<br> 克莱尔现在是个名下有6本书的专职作家，其中包括4本小说。</p></blockquote><h4 id="rucksack"><a href="#rucksack" class="headerlink" title="rucksack"></a>rucksack</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈrʌksæk&#x2F;美&#x2F;ˈrʌksæk&#x2F;n.帆布背包</p><p>复数rucksacks</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>rucksack&#x2F;ˈrʌkˌsæk&#x2F;|TEM8<br>N-COUNT A rucksack is a bag with straps that go over your shoulders, so that you can carry things on your back, for example when you are walking or climbing. 双肩背</p><p>In his rucksack he carried, besides pencils and notebooks, poetry.在他的帆布背包里，除了铅笔、笔记本外，他还带了诗集。</p><p>My rucksack seems to have gone walkabout.我的旅行包好像是丢了。</p></blockquote><h4 id="strap"><a href="#strap" class="headerlink" title="strap"></a>strap</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;stræp&#x2F;美&#x2F;stræp&#x2F;n.带子，皮带；铁皮条，金属带，铰链片；鞭打（the strap）；拉手吊带，拉手吊环；v.（用带子）束住，捆绑；用绷带包扎（伤口）；用皮鞭抽打，鞭打</p><p>CET4 | CET6 | 考研 | IELTS | TOEFL<br>复数straps第三人称单数straps现在分词strapping过去式strapped过去分词strapped</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>strap&#x2F;stræp&#x2F;|CET4 TEM4<br>strappingstrappedstraps<br>1.N-COUNT A strap is a narrow piece of leather, cloth, or other material. Straps are used to carry things, fasten things together, or to hold a piece of clothing in place. 带子</p><p>•  Nancy gripped the strap of her beach bag.<br> 南希抓住自己海滩休闲包的带子。</p><p>•  She pulled the strap of her nightgown onto her shoulder.<br> 她把睡衣的带子拉到她的肩上。</p><p>2.V-T If you strap something somewhere, you fasten it there with a strap. 用带子绑</p><p>•  She strapped the baby seat into the car.<br> 她把婴儿座椅用带子绑在那辆汽车上。</p></blockquote><h4 id="bracelet"><a href="#bracelet" class="headerlink" title="bracelet"></a>bracelet</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈbreɪslət&#x2F;美&#x2F;ˈbreɪslət&#x2F;n.手镯，臂镯</p><p>GRE<br>复数bracelets</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>bracelet&#x2F;ˈbreɪslɪt&#x2F;|CET6+ TEM4<br>N-COUNT A bracelet is a chain or band, usually made of metal, that you wear around your wrist as jewellery. 手镯</p><p>Hanging from his right wrist is a heavy gold bracelet.<br>从他的右腕上垂下的是一只沉甸甸的金手镯。<br>Inside was a gold charm bracelet, with one charm on it - a star.<br>里面是个金制挂坠手链，上面有一个挂坠——一颗星星。</p></blockquote><h4 id="scarf"><a href="#scarf" class="headerlink" title="scarf"></a>scarf</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;skɑːf&#x2F;美&#x2F;skɑːrf&#x2F;n.围巾，披巾，头巾；（嵌接的）斜面，斜嵌槽；鲸脂的切口；v.&lt;美，非正式&gt;狼吞虎咽地吃；嵌接，斜接（木材，金属）；切割（鲸）脂；【名】 （Scarf）（英）斯卡夫（人名）</p><p>初中 | 高中 | 考研 | TOEFL<br>复数scarves或scarfs第三人称单数scarfs现在分词scarfing过去式scarfed过去分词scarfed</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>scarf&#x2F;skɑːf&#x2F;|CET6+ TEM4<br>N-COUNT A scarf is a piece of cloth that you wear around your neck or head, usually to keep yourself warm. 围巾</p><p>•  He reached up to loosen the scarf around his neck.<br> 他伸出手松开围在脖子上的围巾。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a1-a2-vocabulary - vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A student discussion 学生讨论</title>
    <link href="/2024/03/24/b1-listening-02-student-discussion/"/>
    <url>/2024/03/24/b1-listening-02-student-discussion/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="A-student-discussion-学生讨论"><a href="#A-student-discussion-学生讨论" class="headerlink" title="A student discussion 学生讨论"></a>A student discussion 学生讨论</h3><img src="/2024/03/24/b1-listening-02-student-discussion/RS8117_GettyImages-525409731-hig-17111574346932.jpg" class="" title="img"><p>Listen to two students comparing Mars and Earth to practise and improve your listening skills.听两位学生比较火星和地球，以练习和提高您的听力技巧。</p><p>Do the preparation task first. Then listen to the audio and do the exercises.先做好准备工作。然后听音频并做练习。</p><h4 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h4><ul><li><p>Question</p><img src="/2024/03/24/b1-listening-02-student-discussion/image-20240324170439910.png" class="" title="image-20240324170439910"></li><li><p>Answer</p><img src="/2024/03/24/b1-listening-02-student-discussion/image-20240323092958923.png" class="" title="image-20240323092958923"></li></ul>        <div id="aplayer-bgZmZkMY" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-bgZmZkMY"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Student_discussion",              author: "B1_Listening",              url: "listening_B1_Student_discussion.mp3",              pic: "https://img4.kuwo.cn/star/albumcover/300/50/69/4184500136.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h4 id="Transcript-EN"><a href="#Transcript-EN" class="headerlink" title="Transcript-EN"></a>Transcript-EN</h4><blockquote><p><strong>Teacher</strong>: So you’ve got a few minutes to discuss with your partner.</p><p><strong>Student 1</strong>: So, as far as I know, the main similarity between Mars and Earth is that they can both support human life.</p><p><strong>Student 2</strong>: Yeah, but do we know that’s actually true? I mean, Mars is much colder than Earth, isn’t it? It says here it’s about minus 55 degrees most of the time, whereas on Earth only places like Antarctica get that cold.</p><p><strong>Student 1</strong>: True. Well then, I suppose you could say both planets are a similar distance from the Sun?</p><p><strong>Student 2</strong>: No way! Mars is much further away! It says here it’s about 228 million kilometres, while Earth is about 150 million.</p><p><strong>Student 1</strong>: Yes, but in space that’s not that far. Jupiter is, like, almost 780 million kilometres. That’s why we use astronomical units when we talk about distances in space. Earth is 1 astronomical unit from the Sun and Mars is 1.3. The difference doesn’t sound so big when you look at it that way.</p><p><strong>Student 2</strong>: I see what you mean. Jupiter is 5.2 astronomical units so I guess you’re right. What other similarities are there between the two planets?</p><p><strong>Student 1</strong>: Let’s see … not the colour, obviously!</p><p><strong>Student 2</strong>: Yeah! Earth is called the blue planet and Mars is called the red planet for pretty obvious reasons!</p><p><strong>Student 1</strong>: Their sizes are pretty different. Mars is about half the size of Earth.</p><p><strong>Student 2</strong>: What about this? It looks like the days on both planets are almost the same length. Earth’s day is 24 hours but Mars’s is about half an hour longer.</p><p><strong>Student 1</strong>: You’re right. OK, any other things they both share?</p><p><strong>Student 2</strong>: I suppose you could say they have water in common.</p><p><strong>Student 1</strong>: Could you? How?</p><p><strong>Student 2</strong>: Well, Earth is 70 per cent water and Mars probably had huge oceans in the past. It’s just that most of the water there now is probably frozen.</p><p><strong>Student 1</strong>: Ah, I see. I don’t think we can say the air is the same, though. Most of Earth’s air is nitrogen and oxygen, but Mars …?</p><p><strong>Student 2</strong>: Mars doesn’t really have air, not compared with Earth. It’s got about one per cent as much air as Earth.</p><p><strong>Student 1</strong>: Right, and it’s mostly carbon dioxide.</p><p><strong>Student 2</strong>: Gravity is another difference. I didn’t know this, but Mars has higher gravity than the Moon. But it’s much less than on Earth, of course.</p><p><strong>Student 1</strong>: Oh, yes. It says Mars has about 38 per cent of Earth’s gravity.</p><p><strong>Teacher</strong>: OK, let’s see what you’ve found …</p></blockquote><h4 id="Transcript-En-Cn"><a href="#Transcript-En-Cn" class="headerlink" title="Transcript-En-Cn"></a>Transcript-En-Cn</h4><blockquote><p><strong>Teacher</strong>: So you’ve got a few minutes to discuss with your partner.老师：那么你有几分钟时间与你的搭档讨论。</p><p><strong>Student 1</strong>: So, as far as I know, the main similarity between Mars and Earth is that they can both support human life.学生 1：据我所知，火星和地球的主要相似之处在于它们都可以支持人类生命。</p><p><strong>Student 2</strong>: Yeah, but do we know that’s actually true? I mean, Mars is much colder than Earth, isn’t it? It says here it’s about minus 55 degrees most of the time, whereas on Earth only places like Antarctica get that cold.学生 2：是的，但我们知道这是真的吗？我的意思是，火星比地球冷得多，不是吗？据说这里大部分时间的气温约为负55度，而在地球上只有像南极洲这样的地方才会这么冷。</p><p><strong>Student 1</strong>: True. Well then, I suppose you could say both planets are a similar distance from the Sun?学生 1：是的。那么，我想你可以说两颗行星到太阳的距离相似？</p><p><strong>Student 2</strong>: No way! Mars is much further away! It says here it’s about 228 million kilometres, while Earth is about 150 million.学生 2：不可能！火星还远着呢！它说这里大约有2.28亿公里，而地球大约有1.5亿公里。</p><p><strong>Student 1</strong>: Yes, but in space that’s not that far. Jupiter is, like, almost 780 million kilometres. That’s why we use astronomical units when we talk about distances in space. Earth is 1 astronomical unit from the Sun and Mars is 1.3. The difference doesn’t sound so big when you look at it that way.学生 1：是的，但在太空中并没有那么远。木星大约有 7.8 亿公里。这就是为什么我们在谈论太空距离时使用天文单位。地球距太阳 1 个天文单位，火星距太阳 1.3 个天文单位。当你这样看时，差异听起来并没有那么大。</p><p><strong>Student 2</strong>: I see what you mean. Jupiter is 5.2 astronomical units so I guess you’re right. What other similarities are there between the two planets?学生 2：我明白你的意思。木星是 5.2 个天文单位，所以我想你是对的。这两颗行星之间还有哪些相似之处？</p><p><strong>Student 1</strong>: Let’s see … not the colour, obviously!学生 1：让我们看看……显然不是颜色！</p><p><strong>Student 2</strong>: Yeah! Earth is called the blue planet and Mars is called the red planet for pretty obvious reasons!学生 2：是啊！地球被称为蓝色星球，火星被称为红色星球，原因非常明显！</p><p><strong>Student 1</strong>: Their sizes are pretty different. Mars is about half the size of Earth.学生 1：它们的尺寸差别很大。火星的大小约为地球的一半。</p><p><strong>Student 2</strong>: What about this? It looks like the days on both planets are almost the same length. Earth’s day is 24 hours but Mars’s is about half an hour longer.学生 2：这个怎么样？看起来两个行星上的白天几乎一样长。地球的一天是24小时，但火星的一天大约长半小时。</p><p><strong>Student 1</strong>: You’re right. OK, any other things they both share?学生 1：你说得对。好吧，他们还有其他共同点吗？</p><p><strong>Student 2</strong>: I suppose you could say they have water in common.学生 2：我想你可以说它们有水的共同点。</p><p><strong>Student 1</strong>: Could you? How?学生 1：你可以吗？如何？</p><p><strong>Student 2</strong>: Well, Earth is 70 per cent water and Mars probably had huge oceans in the past. It’s just that most of the water there now is probably frozen.学生 2：嗯，地球 70% 是水，火星过去可能有巨大的海洋。只是现在那里的水估计大部分都结冰了。</p><p><strong>Student 1</strong>: Ah, I see. I don’t think we can say the air is the same, though. Most of Earth’s air is nitrogen and oxygen, but Mars …?学生 1：啊，我明白了。但我认为我们不能说空气是一样的。地球上的空气大部分是氮气和氧气，但火星……？</p><p><strong>Student 2</strong>: Mars doesn’t really have air, not compared with Earth. It’s got about one per cent as much air as Earth.学生 2：与地球相比，火星实际上并没有空气。它的空气含量大约是地球的百分之一。</p><p><strong>Student 1</strong>: Right, and it’s mostly carbon dioxide.学生 1：是的，主要是二氧化碳。</p><p><strong>Student 2</strong>: Gravity is another difference. I didn’t know this, but Mars has higher gravity than the Moon. But it’s much less than on Earth, of course.学生 2：重力是另一个区别。我不知道，但火星的引力比月球大。但当然，它比地球上要少得多。</p><p><strong>Student 1</strong>: Oh, yes. It says Mars has about 38 per cent of Earth’s gravity.学生 1：哦，是的。据称，火星的重力约为地球的 38%。</p><p><strong>Teacher</strong>: OK, let’s see what you’ve found …老师：好吧，让我们看看你发现了什么……</p></blockquote><h4 id="Task-1"><a href="#Task-1" class="headerlink" title="Task 1"></a>Task 1</h4><ul><li><p>Question</p><img src="/2024/03/24/b1-listening-02-student-discussion/image-20240324170535096.png" class="" title="image-20240324170535096"></li><li><p>Answer</p><img src="/2024/03/24/b1-listening-02-student-discussion/image-20240323095306552.png" class="" title="image-20240323095306552"></li></ul><h4 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h4><ul><li><p>Question</p><blockquote><p>frozensameGravitynitrogensupportastronomical</p><ol><li>Most people think Mars can [] human life.</li><li>We measure distances in space using [] units.</li><li>The two planets aren’t the [] color.</li><li>Most of the water on Mars is probably [].</li><li>The air on Earth is mostly made up of [].</li><li>[] on Mars is just over one third as strong as on Earth.</li></ol></blockquote></li><li><p>Answer</p><img src="/2024/03/24/b1-listening-02-student-discussion/image-20240323095931262.png" class="" title="image-20240323095931262"></li></ul><h4 id="Discussion-讨论"><a href="#Discussion-讨论" class="headerlink" title="Discussion 讨论"></a>Discussion 讨论</h4><blockquote><p>Do you think people will live on Mars one day?你认为有一天人们会在火星上生活吗？</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>listening - B1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A team meeting about diversity关于多样性的团队会议</title>
    <link href="/2024/03/24/b1-listening-03-team-meeting-about-diversity/"/>
    <url>/2024/03/24/b1-listening-03-team-meeting-about-diversity/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="A-team-meeting-about-diversity关于多样性的团队会议"><a href="#A-team-meeting-about-diversity关于多样性的团队会议" class="headerlink" title="A team meeting about diversity关于多样性的团队会议"></a>A team meeting about diversity关于多样性的团队会议</h3><img src="/2024/03/24/b1-listening-03-team-meeting-about-diversity/RS7990_GettyImages-875599880-hig_0.jpg" class="" title="img"><p>Listen to a team meeting about diversity to practise and improve your listening skills.聆听有关多元化的团队会议，以练习和提高您的倾听技巧。</p><p>Do the preparation task first. Then listen to the audio and do the exercises.先做好准备工作。然后听音频并做练习。</p><h4 id="Preparation准备"><a href="#Preparation准备" class="headerlink" title="Preparation准备"></a>Preparation准备</h4><ul><li><p>Question</p><img src="/2024/03/24/b1-listening-03-team-meeting-about-diversity/image-20240324091950204.png" class="" title="image-20240324091950204"></li><li><p>Answer</p><img src="/2024/03/24/b1-listening-03-team-meeting-about-diversity/image-20240324092453706.png" class="" title="image-20240324092453706"></li></ul>        <div id="aplayer-GtYtUCLP" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-GtYtUCLP"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "B1_Team_meeting_about_diversity",              author: "B1_Listening",              url: "B1_Team_meeting_about_diversity.mp3",              pic: "https://img4.kuwo.cn/star/albumcover/300/50/69/4184500136.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h4 id="Transcript-EN"><a href="#Transcript-EN" class="headerlink" title="Transcript-EN"></a>Transcript-EN</h4><blockquote><p><strong>Nina</strong>: As you know, our team has grown a lot in the past year and we feel we need to address the diversity in the team.</p><p><strong>Brenda</strong>: How do you mean, ‘address the diversity’?</p><p><strong>Nina</strong>: Well, we all know that diversity in teams is a good thing, but it can also be a challenge for some people to respect and value people’s differences. We’ve got a really diverse team here – people of different nationalities, backgrounds, religions, ages … and sometimes I don’t feel we make the most of this.</p><p><strong>Stefano</strong>: Yes, and even if it isn’t specifically challenging, many people are simply unaware of the isolation that some team members may feel because they are different.</p><p><strong>Brenda</strong>: So, what does this mean? What are we going to do?</p><p><strong>Nina</strong>: Well, we need to create a workplace charter. You know, one that promotes equality, diversity and inclusion.</p><p><strong>Brenda</strong>: That sounds like a good idea. But w ill people just see it as something the management team has created? Maybe they won’t even pay attention to it.</p><p><strong>Nina</strong>: I know. That’s why we’re going to involve everyone in creating it.</p><p><strong>Stefano</strong>: That’s a good idea. We could run some workshops and get ideas from the employees about how we can create a more inclusive workplace.</p><p><strong>Nina</strong>: Exactly. I was thinking that before that we could run some team-building sessions so they can experience the value of diversity for themselves.</p><p><strong>Brenda</strong>: Yes, I like that. Many people see diversity as something negative, often because there are different opinions or ways of doing things.</p><p><strong>Nina</strong>: Yes, I know, but if there’s no diversity, then the risk is that we all work in the same way, think the same and see the world the same. This makes it hard to be creative and to innovate.</p><p><strong>Stefano</strong>: I completely agree, Nina. OK. So, what do you want us to do?</p><p><strong>Nina</strong>: Stefano, can you look for a successful trainer who specialises in running workshops and team-building sessions on diversity and inclusion?</p><p><strong>Stefano</strong>: Sure. I’ll be happy to.</p><p><strong>Nina</strong>: And Brenda, can you find a fun venue? Somewhere that is quite diverse itself. Something that’s not the usual seminar-style environment?</p><p><strong>Brenda</strong>: Sure. That’ll be fun.</p><p><strong>Nina</strong>: And I’m going to do some further research into how other organisations are benefiting from their diversity. I can share this with the whole team.</p></blockquote><h4 id="Transcript-En-Cn"><a href="#Transcript-En-Cn" class="headerlink" title="Transcript-En-Cn"></a>Transcript-En-Cn</h4><blockquote><p><strong>Nina</strong>: As you know, our team has grown a lot in the past year and we feel we need to address the diversity in the team.Nina：如您所知，我们的团队在过去的一年里成长了很多，我们觉得我们需要解决团队的多样性问题。</p><p><strong>Brenda</strong>: How do you mean, ‘address the diversity’?布伦达：“解决多样性”是什么意思？</p><p><strong>Nina</strong>: Well, we all know that diversity in teams is a good thing, but it can also be a challenge for some people to respect and value people’s differences. We’ve got a really diverse team here – people of different nationalities, backgrounds, religions, ages … and sometimes I don’t feel we make the most of this.尼娜：嗯，我们都知道团队的多样性是一件好事，但对于某些人来说，尊重和重视人们的差异也可能是一个挑战。我们这里有一支非常多元化的团队——来自不同国籍、背景、宗教、年龄的人……有时我觉得我们没有充分利用这一点。</p><p><strong>Stefano</strong>: Yes, and even if it isn’t specifically challenging, many people are simply unaware of the isolation that some team members may feel because they are different. Stefano：是的，即使这不是特别具有挑战性，但许多人根本没有意识到某些团队成员可能会因为与众不同而感到孤立。</p><p><strong>Brenda</strong>: So, what does this mean? What are we going to do?布伦达：那么，这是什么意思？我们会做什么？</p><p><strong>Nina</strong>: Well, we need to create a workplace charter. You know, one that promotes equality, diversity and inclusion.尼娜：嗯，我们需要制定一份工作场所章程。你知道，这是一个促进平等、多样性和包容性的国家。</p><p><strong>Brenda</strong>: That sounds like a good idea. But will people just see it as something the management team has created? Maybe they won’t even pay attention to it.布伦达：这听起来是个好主意。但人们会仅仅将其视为管理团队创造的东西吗？或许他们根本不会去关注它。</p><p><strong>Nina</strong>: I know. That’s why we’re going to involve everyone in creating it.尼娜：我知道。这就是为什么我们要让每个人都参与创建它。</p><p><strong>Stefano</strong>: That’s a good idea. We could run some workshops and get ideas from the employees about how we can create a more inclusive workplace.斯特凡诺：这是个好主意。我们可以举办一些研讨会，并从员工那里获取有关如何创建更具包容性的工作场所的想法。</p><p><strong>Nina</strong>: Exactly. I was thinking that before that we could run some team-building sessions so they can experience the value of diversity for themselves.尼娜：没错。我想在此之前我们可以举办一些团队建设课程，以便他们能够亲身体验多元化的价值。</p><p><strong>Brenda</strong>: Yes, I like that. Many people see diversity as something negative, often because there are different opinions or ways of doing things.布伦达：是的，我喜欢这样。许多人将多样性视为负面事物，通常是因为存在不同的观点或做事方式。</p><p><strong>Nina</strong>: Yes, I know, but if there’s no diversity, then the risk is that we all work in the same way, think the same and see the world the same. This makes it hard to be creative and to innovate.尼娜：是的，我知道，但如果没有多样性，那么风险就是我们所有人都以同样的方式工作，思考同样的问题，看待世界也一样。这使得创造力和创新变得困难。</p><p><strong>Stefano</strong>: I completely agree, Nina. OK. So, what do you want us to do?斯特凡诺：我完全同意，尼娜。好的。那么，你想让我们做什么？</p><p><strong>Nina</strong>: Stefano, can you look for a successful trainer who specialises in running workshops and team-building sessions on diversity and inclusion?尼娜：斯特凡诺，您能否寻找一位成功的培训师，专门举办关于多样性和包容性的研讨会和团队建设课程？</p><p><strong>Stefano</strong>: Sure. I’ll be happy to.斯特凡诺：当然。我会很乐意的。</p><p><strong>Nina</strong>: And Brenda, can you find a fun venue? Somewhere that is quite diverse itself. Something that’s not the usual seminar-style environment?尼娜：布伦达，你能找到一个有趣的场所吗？某个地方本身就很多样化。这不是通常的研讨会式环境吗？</p><p><strong>Brenda</strong>: Sure. That’ll be fun.布伦达：当然。那会很有趣。</p><p><strong>Nina</strong>: And I’m going to do some further research into how other organisations are benefiting from their diversity. I can share this with the whole team.尼娜：我将进一步研究其他组织如何从其多样性中受益。我可以与整个团队分享这一点。</p></blockquote><h4 id="Task-1"><a href="#Task-1" class="headerlink" title="Task 1"></a>Task 1</h4><ul><li><p>Question</p><blockquote><ol><li>The team has grown and become more diverse in the past year.TrueFalse</li><li>Everyone in the team respects and values everyone else.TrueFalse</li><li>They’re going to create a workplace charter to encourage diversity, equality and inclusion. TrueFalse</li><li>They’re going to involve the whole team when creating the charter.TrueFalse</li><li>They have already run some successful workshops this year.TrueFalse</li><li>Nina has already shared some positive research.TrueFalse</li></ol></blockquote></li><li><p>Answer</p><img src="/2024/03/24/b1-listening-03-team-meeting-about-diversity/image-20240324094857661.png" class="" title="image-20240324094857661"></li></ul><h4 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h4><ul><li><p>Question</p><blockquote><ol><li><p>Stefano is going to …</p><p>[]talk to colleagues who feel isolated.</p><p>[]look for a trainer who specialises in running diversity workshops.</p><p>[]look for an unusual venue for the workshop and team-building event.</p></li><li><p>Brenda is going to …</p><p>[]talk to people about their different opinions.</p><p>[]look for a trainer who specialises in running diversity workshops.</p><p>[]look for an unusual venue to run the workshop and team-building event.</p></li><li><p>Nina is going to …</p><p>[]write the workplace charter before the workshop.</p><p>[]also look for an unusual venue for the event.</p><p>[]research other organisations and their diversity.</p></li></ol></blockquote></li><li><p>Answer</p><blockquote><ol><li><p>Stefano is going to …</p><p>[]talk to colleagues who feel isolated.</p><p>[*]look for a trainer who specialises in running diversity workshops.</p><p>[]look for an unusual venue for the workshop and team-building event.</p></li><li><p>Brenda is going to …</p><p>[]talk to people about their different opinions.</p><p>[]look for a trainer who specialises in running diversity workshops.</p><p>[*]look for an unusual venue to run the workshop and team-building event.</p></li><li><p>Nina is going to …</p><p>[]write the workplace charter before the workshop.</p><p>[]also look for an unusual venue for the event.</p><p>[*]research other organisations and their diversity.</p></li></ol></blockquote></li></ul><h4 id="Discussion-讨论"><a href="#Discussion-讨论" class="headerlink" title="Discussion 讨论"></a>Discussion 讨论</h4><blockquote><p>How diverse is your workplace? How can diversity benefit your team?您的工作场所有多多元化？多元化对您的团队有何好处？</p></blockquote><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><h4 id="diversity"><a href="#diversity" class="headerlink" title="diversity"></a>diversity</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;daɪˈvɜːsəti&#x2F;美&#x2F;daɪˈvɜːrsəti; dɪˈvɜːsɪti&#x2F;<br>n.多样性，多样化；不同，差异</p><p>高中 | CET4 | CET6 | IELTS | TOEFL | GRE | SAT | 商务英语<br>复数diversities</p><p>address the diversity解决多样性问题</p><p>Then address the issues of diversity from within the organisation.<br>然后处理组织内的多元化问题。</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>diversity&#x2F;daɪˈvɜːsɪtɪ&#x2F;|TEM4<br>1.N-VAR The diversity of something is the fact that it contains many very different elements. 多样性</p><p>•  …the cultural diversity of Latin America.<br> …拉丁美洲文化的多样性。</p><p>2.N-SING A diversity of things is a range of things which are very different from each other. 各种各样</p><p>•  Forslan’s object is to gather as great a diversity of genetic material as possible.<br> 福斯兰的目标是尽可能收集各种不同的基因物质。</p></blockquote><h4 id="inclusion"><a href="#inclusion" class="headerlink" title="inclusion"></a>inclusion</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ɪnˈkluːʒn&#x2F;美&#x2F;ɪnˈkluːʒ(ə)n&#x2F;全球发音<br>n.包含，包括；包含物，包括的人；认同感，归属感</p><p>CET4 | CET6 | GRE | GMAT<br>复数inclusions</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>inclusion&#x2F;ɪnˈkluːʒən&#x2F;|TEM4<br>N-VAR Inclusion is the act of making a person or thing part of a group or collection. 包括</p><p>•  …a confident performance that justified his inclusion in the team.<br> …证明他入选该队是明智之举的自信表现。</p></blockquote><h4 id="inclusive"><a href="#inclusive" class="headerlink" title="inclusive"></a>inclusive</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ɪnˈkluːsɪv&#x2F;美&#x2F;ɪnˈkluːsɪv&#x2F;<br>adj.包容广阔的；包括一切费用在内的；包括的，包含的；无性别歧视的；对外开放的</p><p>CET4 | CET6 | 考研 | IELTS | GRE | SAT | 商务英语</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>inclusive&#x2F;ɪnˈkluːsɪv&#x2F;|CET6 TEM4<br>1.ADJ If you describe a group or organization as inclusive, you mean that it allows all kinds of people to belong to it, rather than just one kind of person. 兼收并蓄的</p><p>•  The academy is far more inclusive now than it used to be.<br> 该学院如今比过去更为兼收并蓄。</p><p>2.ADJ After stating the first and last item in a set of things, you can add inclusive to make it clear that the items stated are included in the set. 首末项包括在内的</p><p>•  You are also invited to join us on our prayer days (this year, June 6 to June 14 inclusive).<br> 你也受邀加入我们的祷告日（今年从6月6日（含）至6月14日（含））。</p><p>3.ADJ If a price is inclusive, it includes all the charges connected with the goods or services offered. If a price is inclusive of shipping and handling, it includes the charge for this. 包括一切费用在内的</p><p>•  …all prices are inclusive of delivery.<br> …所有价格包括运费。</p><p>4.ADV Inclusive is also an adverb. 包括一切费用在内地</p><p>•  The outpatient programme costs $105 per day, all inclusive.<br> 门诊病人方案收费每人每天105美元，一切费用包括在内。</p></blockquote><h4 id="venue"><a href="#venue" class="headerlink" title="venue"></a>venue</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈvenjuː&#x2F;美&#x2F;ˈvenjuː&#x2F;<br>n.（事件的）发生地点，（活动的）场所；&lt;英，法律&gt;审判地（指郡或区）</p><p>高中 | CET6 | IELTS | 商务英语<br>复数venues</p><p>fun venue 有趣的地点</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>venue&#x2F;ˈvɛnjuː&#x2F;|CET6 TEM4<br>N-COUNT The venue for an event or activity is the place where it will happen. 举办场所</p><p>•  The International Convention Centre is the venue for a three-day arts festival.<br> 国际会议中心是为期3天的艺术节的举办场所。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>listening - B1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【A1-A2-Vocabulary】03 Appearance 1-外貌1</title>
    <link href="/2024/03/24/a1-a2-vocabulary-03-appearance-1/"/>
    <url>/2024/03/24/a1-a2-vocabulary-03-appearance-1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/2024/03/24/a1-a2-vocabulary-03-appearance-1/RS5746_80411405-low.jpg" class="" title="Vocabulary Games – Appearance 1"><h1 id="Appearance-1"><a href="#Appearance-1" class="headerlink" title="Appearance 1"></a>Appearance 1</h1><p>Do the exercises to learn words to describe people’s appearance.</p><ul><li><p>Question</p><p>Match the words and pictures.</p><img src="/2024/03/24/a1-a2-vocabulary-03-appearance-1/image-20240326085410222.png" class="" title="image-20240326085410222"></li><li><p>Answer</p><img src="/2024/03/24/a1-a2-vocabulary-03-appearance-1/image-20240326085926181.png" class="" title="image-20240326085926181"></li></ul><h3 id="Task-1"><a href="#Task-1" class="headerlink" title="Task 1"></a>Task 1</h3><h4 id="Vocabulary-A1–A2-Appearance-1-–-Alphabetical-order"><a href="#Vocabulary-A1–A2-Appearance-1-–-Alphabetical-order" class="headerlink" title="Vocabulary A1–A2: Appearance 1 – Alphabetical order"></a>Vocabulary A1–A2: Appearance 1 – Alphabetical order</h4><p>Put the words in alphabetical order.</p><ul><li><p>Question</p><blockquote><p>Skip</p></blockquote></li><li><p>Answer</p><img src="/2024/03/24/a1-a2-vocabulary-03-appearance-1/image-20240326090750284.png" class="" title="image-20240326090750284"><img src="/2024/03/24/a1-a2-vocabulary-03-appearance-1/image-20240326090817119.png" class="" title="image-20240326090817119"></li></ul><h3 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h3><h4 id="Vocabulary-A1–A2-Appearance-1-–-Spelling"><a href="#Vocabulary-A1–A2-Appearance-1-–-Spelling" class="headerlink" title="Vocabulary A1–A2: Appearance 1 – Spelling"></a>Vocabulary A1–A2: Appearance 1 – Spelling</h4><p>Listen and write the words.</p><ul><li><p>Question</p><blockquote><p>Skip</p></blockquote></li><li><p>Answer</p><img src="/2024/03/24/a1-a2-vocabulary-03-appearance-1/image-20240326092345867.png" class="" title="image-20240326092345867"></li></ul><h3 id="Task-3"><a href="#Task-3" class="headerlink" title="Task 3"></a>Task 3</h3><h4 id="Vocabulary-A1–A2-Appearance-1-–-Definitions"><a href="#Vocabulary-A1–A2-Appearance-1-–-Definitions" class="headerlink" title="Vocabulary A1–A2: Appearance 1 – Definitions"></a>Vocabulary A1–A2: Appearance 1 – Definitions</h4><p>Complete the sentences.</p><ul><li><p>Question</p><img src="/2024/03/24/a1-a2-vocabulary-03-appearance-1/image-20240326092622779.png" class="" title="image-20240326092622779"></li><li><p>Answer</p><img src="/2024/03/24/a1-a2-vocabulary-03-appearance-1/image-20240326092744488.png" class="" title="image-20240326092744488"><blockquote><ol><li><p>年轻的，与老相反。</p></li><li><p>黄头发的人，金头发。</p></li><li><p>红色或橙色头发的人，姜黄色头发。</p></li><li><p>棕色或黑色头发的人，黑发。</p></li><li><p>你是老的，当你65岁的时候。</p></li><li><p>190cm的女人十分 高。</p></li><li><p>150cm的男人相当 矮。</p></li></ol></blockquote></li></ul><h3 id="Task-4"><a href="#Task-4" class="headerlink" title="Task 4"></a>Task 4</h3><h4 id="Vocabulary-A1–A2-Appearance-1-–-Comparative-adjectives"><a href="#Vocabulary-A1–A2-Appearance-1-–-Comparative-adjectives" class="headerlink" title="Vocabulary A1–A2: Appearance 1 – Comparative adjectives"></a>Vocabulary A1–A2: Appearance 1 – Comparative adjectives</h4><p>Write the adjective that goes with the comparative form. For example, write ‘blonde’ if you see ‘blonder’.</p><ul><li><p>Question</p><img src="/2024/03/24/a1-a2-vocabulary-03-appearance-1/image-20240326093151498.png" class="" title="image-20240326093151498"></li><li><p>Answer</p><img src="/2024/03/24/a1-a2-vocabulary-03-appearance-1/image-20240326093132272.png" class="" title="image-20240326093132272"></li></ul><h3 id="Task-5"><a href="#Task-5" class="headerlink" title="Task 5"></a>Task 5</h3><h4 id="Vocabulary-A1–A2-Appearance-1-–-Sentences"><a href="#Vocabulary-A1–A2-Appearance-1-–-Sentences" class="headerlink" title="Vocabulary A1–A2: Appearance 1 – Sentences"></a>Vocabulary A1–A2: Appearance 1 – Sentences</h4><p>Complete the sentences.</p><ul><li><p>Question</p><img src="/2024/03/24/a1-a2-vocabulary-03-appearance-1/image-20240326093238626.png" class="" title="image-20240326093238626"></li><li><p>Answer</p><img src="/2024/03/24/a1-a2-vocabulary-03-appearance-1/image-20240326093405590.png" class="" title="image-20240326093405590"></li></ul><h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><p>What is your appearance like? Describe a friend or someone in your family.</p><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><h4 id="afro"><a href="#afro" class="headerlink" title="afro"></a>afro</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈæfrəʊ&#x2F;美&#x2F;ˈæfroʊ&#x2F;n.圆蓬式发型；非洲式发型；adj.（美国）黑人的；圆蓬式的</p><p>复数afros</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>Afro&#x2F;ˈæfrəʊ&#x2F;1.<br>ADJ Afro hair is very tightly curled and sticks out all around your head. 非洲式的</p><p>2.N-COUNT An Afro is an Afro hairstyle. 非洲式卷发</p><p>The Afro-Asian nations had approved the basic general principles of nonalignment.亚非国家已经同意了不结盟的基本原则。</p><p>Instead of an Afro, his hair was slicked and combed to one side, and he wore mirrored aviator sunglasses.他的头发不是爆炸头，而是光溜溜地梳向一边，他还戴了一副反光飞行员墨镜。</p></blockquote><h4 id="ginger"><a href="#ginger" class="headerlink" title="ginger"></a>ginger</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈdʒɪndʒə(r)&#x2F;美&#x2F;ˈdʒɪndʒər&#x2F;n.生姜；姜（产于东南亚，外表似竹）；姜黄色；长着姜黄色头发的人；姜味汽水（ginger ale 的简称）；精神，活力；v.用姜给……调味；激励，使有生气（ginger sb.&#x2F;sth. up）；adj.<br>（主要指毛发或动物毛皮）姜黄色的；姜味的；【名】 （Ginger）（法）然热，（英）金杰（人名）</p><p>复数gingers第三人称单数gingers现在分词gingering过去式gingered过去分词gingered</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>ginger&#x2F;ˈdʒɪndʒə&#x2F;|CET6+ TEM4<br>1.N-UNCOUNT Ginger is the root of a plant that is used to flavour food. It has a sweet, spicy flavour and is often sold in powdered form. 姜</p><p>2.COLOR Ginger is used to describe things that are orangey brown in colour. 姜黄色的</p><p>•  She was a mature lady with dyed ginger hair.<br> 她是个成年女子，头发染成了姜黄色。</p></blockquote><h4 id="blonde"><a href="#blonde" class="headerlink" title="blonde"></a>blonde</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;blɒnd&#x2F;美&#x2F;blɑːnd&#x2F;adj.金黄色的，浅棕色的；金发的；浅色的；n.长着金发的人</p><p>高中 | CET4 | CET6 | IELTS<br>复数blondes比较级blonder最高级blondest</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>blonde&#x2F;blɒnd&#x2F;|CET6+ TEM4<br>blonderblondestblondes<br>1.COLOR A woman who has blonde hair has pale-coloured hair. Blonde hair can be very light brown or light yellow. The form blond is used when describing men. 浅色的; (头发) 金黄色的</p><p>•  …a little girl with blonde hair.<br> …一头金发的小女孩。</p><p>2.ADJ Someone who is blonde has blonde hair. 金发的</p><p>•  He was blonder than his brother.<br> 他的头发比哥哥的还黄。</p><p>3.N-COUNT A blonde is a woman who has blonde hair. 金发女子</p><p>•  …a stunning blonde in her early thirties.<br> …一位美貌惊人的三十出头的金发女郎。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a1-a2-vocabulary - vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【A1-A2-Vocabulary】02 Actions-动作</title>
    <link href="/2024/03/24/a1-a2-vocabulary-02-actions/"/>
    <url>/2024/03/24/a1-a2-vocabulary-02-actions/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h1><p>Do the exercises and learn the words for some common actions.</p><p>Match the words and pictures.</p><ul><li>Question</li></ul><img src="/2024/03/24/a1-a2-vocabulary-02-actions/image-20240326074901864.png" class="" title="image-20240326074901864"><ul><li>Answer</li></ul><img src="/2024/03/24/a1-a2-vocabulary-02-actions/image-20240326075257095.png" class="" title="image-20240326075257095"><h3 id="Task-1"><a href="#Task-1" class="headerlink" title="Task 1"></a>Task 1</h3><h4 id="Vocabulary-A1-A2-Actions-Alphabetical-order"><a href="#Vocabulary-A1-A2-Actions-Alphabetical-order" class="headerlink" title="Vocabulary A1-A2: Actions - Alphabetical order"></a>Vocabulary A1-A2: Actions - Alphabetical order</h4><p>Put the words in alphabetical order.</p><ul><li>Question</li></ul><img src="/2024/03/24/a1-a2-vocabulary-02-actions/image-20240326075626430.png" class="" title="image-20240326075626430"><img src="/2024/03/24/a1-a2-vocabulary-02-actions/image-20240326075643245.png" class="" title="image-20240326075643245"><ul><li>Answer</li></ul><img src="/2024/03/24/a1-a2-vocabulary-02-actions/image-20240326075440065.png" class="" title="image-20240326075440065"><img src="/2024/03/24/a1-a2-vocabulary-02-actions/image-20240326075536907.png" class="" title="image-20240326075536907"><h3 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h3><p>Vocabulary A1-A2: Actions - Spelling</p><p>Listen and put the letters in order.</p><p>Skip</p><h3 id="Task-3"><a href="#Task-3" class="headerlink" title="Task 3"></a>Task 3</h3><p>Vocabulary A1-A2: Actions - Definitions</p><ul><li><p>Question</p><blockquote><p>Complete the sentences.</p><p>1.We [] when we want to hear something.<br>2.We [] when we use our mouth to talk.<br>3.When we [] something, we feel it with our hands.<br>4.We can use a pen to [] a letter on paper.<br>5.We [] a picture.<br>6.When we are tired, we should [].<br>7.We [] when we are happy.<br>8.We [] when we feel very sad.<br>9.We [] on a keyboard or touchscreen.<br>10.We [] when we are hungry.</p></blockquote></li><li><p>Answer</p><blockquote><p>1.We [listen] when we want to hear something.<br>2.We [speak] when we use our mouth to talk.<br>3.When we [touch] something, we feel it with our hands.<br>4.We can use a pen to [write] a letter on paper.<br>5.We [draw] a picture.<br>6.When we are tired, we should [sleep].<br>7.We [smile] when we are happy.<br>8.We [cry] when we feel very sad.<br>9.We [type] on a keyboard or touchscreen.<br>10.We [eat] when we are hungry.</p></blockquote></li></ul><h3 id="Task-4"><a href="#Task-4" class="headerlink" title="Task 4"></a>Task 4</h3><h4 id="Vocabulary-A1-A2-Actions-Groups"><a href="#Vocabulary-A1-A2-Actions-Groups" class="headerlink" title="Vocabulary A1-A2: Actions - Groups"></a>Vocabulary A1-A2: Actions - Groups</h4><p>Put the actions into the correct group.</p><ul><li>Question</li></ul><img src="/2024/03/24/a1-a2-vocabulary-02-actions/image-20240326080921733.png" class="" title="image-20240326080921733"><ul><li>Answer</li></ul><img src="/2024/03/24/a1-a2-vocabulary-02-actions/image-20240326081015664.png" class="" title="image-20240326081015664"><h3 id="Task-5"><a href="#Task-5" class="headerlink" title="Task 5"></a>Task 5</h3><h4 id="Vocabulary-A1-A2-Actions-Infinitives"><a href="#Vocabulary-A1-A2-Actions-Infinitives" class="headerlink" title="Vocabulary A1-A2: Actions - Infinitives"></a>Vocabulary A1-A2: Actions - Infinitives</h4><p>词汇 A1-A2：动作 - 不定式</p><p>Write the bare infinitives of the verbs. For example, if you see ‘past simple: typed’, write ‘type’.写出动词的不定式。例如，如果您看到“过去简单：键入”，请写“类型”。</p><ul><li>Question</li></ul><blockquote><ol><li>bare infinitive: [] past simple: listened</li><li>bare infinitive: [] past simple: touched</li><li>bare infinitive: [] past simple: smiled</li><li>bare infinitive: [] past simple: looked</li><li>bare infinitive: [] past simple: read</li><li>bare infinitive: [] past simple: cried</li><li>bare infinitive: [] past simple: drew</li><li>bare infinitive: [] past simple: wrote</li><li>bare infinitive: [] past simple: ate</li><li>bare infinitive: [] past simple: slept</li><li>bare infinitive: [] past simple: spoke</li></ol></blockquote><ul><li>Answer</li></ul><blockquote><ol><li>bare infinitive: [listen] past simple: listened</li><li>bare infinitive: [touch] past simple: touched</li><li>bare infinitive: [smile] past simple: smiled</li><li>bare infinitive: [look] past simple: looked</li><li>bare infinitive: [read] past simple: read</li><li>bare infinitive: [cry] past simple: cried</li><li>bare infinitive: [draw] past simple: drew</li><li>bare infinitive: [write] past simple: wrote</li><li>bare infinitive: [eat] past simple: ate</li><li>bare infinitive: [sleep] past simple: slept</li><li>bare infinitive: [speak] past simple: spoke</li></ol></blockquote><h3 id="Task-6"><a href="#Task-6" class="headerlink" title="Task 6"></a>Task 6</h3><h4 id="Vocabulary-A1-A2-Actions-Past-simple"><a href="#Vocabulary-A1-A2-Actions-Past-simple" class="headerlink" title="Vocabulary A1-A2: Actions - Past simple"></a>Vocabulary A1-A2: Actions - Past simple</h4><p>词汇 A1-A2：动作 - 一般过去时</p><p>Listen to the infinitive. Then put the letters in order to spell the PAST SIMPLE form of the verb.听不定式。然后输入字母以拼写动词的过去简单形式。</p><ul><li>Question</li></ul><blockquote><p>1.cry<br>2.draw<br>3.eat<br>4.listen<br>5.look<br>6.read<br>7.sleep<br>8.smile<br>9.speak<br>10.touch<br>11.write</p></blockquote><ul><li>Answer</li></ul><blockquote><p>1.cried<br>2.drew<br>3.ate<br>4.listened<br>5.looked<br>6.read<br>7.slept<br>8.smiled<br>9.spoke<br>10.touched<br>11.wrote</p></blockquote><h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><p>How many of these actions can you do at the same time? What other actions do you do most days?您可以同时执行多少个这些动作？您大部分时间还做哪些其他行为？</p><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><h4 id="belt"><a href="#belt" class="headerlink" title="belt"></a>belt</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;beə(r)&#x2F;美&#x2F;ber&#x2F;adj.赤裸的；光秃秃的；无遮盖的，无装饰的；仅最基本的；v.使暴露，使露出；adv.非常，许多；【名】 （Bare）（英）贝尔（人名）</p><p>高中 | CET4 | CET6 | 考研 | IELTS | TOEFL | GRE<br>第三人称单数bares现在分词baring过去式bared过去分词bared比较级barer最高级barest</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>bare&#x2F;bɛə&#x2F;|CET4 TEM4<br>baringbaredbarerbaresbarest<br>1.ADJ If a part of your body is bare, it is not covered by any clothing. 赤裸的</p><p>•  She was wearing only a thin robe over a flimsy nightgown, and her feet were bare.<br> 她只在薄薄的睡衣外面穿了件薄袍子，还光着双脚。</p><p>2.ADJ A bare surface is not covered or decorated with anything. 无遮盖的; 无装饰的</p><p>•  They would have liked bare wooden floors throughout the house.<br> 他们本想把整个房子都铺不加装饰的原木地板。</p><p>3.ADJ If a tree or a branch is bare, it has no leaves on it. (树或树枝) 没有树叶的</p><p>•  …an old, twisted tree, many of its limbs brittle and bare.<br> …一棵扭曲的老树，它的树枝很多是脆弱而光秃的。</p><p>4.ADJ If a room, cupboard, or shelf is bare, it is empty. 空的</p><p>•  His fridge was bare apart from three very withered tomatoes.<br> 他的冰箱里除了3个干瘪的番茄之外什么也没有。</p><p>5.ADJ An area of ground that is bare has no plants growing on it. (土地) 光秃的</p><p>•  That’s probably the most bare, bleak, barren and inhospitable island I’ve ever seen.<br> 那可能是我见过的最光秃、最荒凉、最贫瘠和最不适合居住的岛屿。</p><p>6.ADJ If someone gives you the bare facts or the barest details of something, they tell you only the most basic and important things. 最简要的</p><p>•  Newspaper reporters were given nothing but the bare facts by the superintendent in charge of the investigation.<br> 报社记者们只提供了负责该项调查的监管人所提供的一些简要事实。</p><p>7.ADJ If you talk about the bare minimum or the bare essentials, you mean the very least that is necessary. 基本的</p><p>•  The army would try to hold the western desert with a bare minimum of forces.<br> 军队将尽量用最少的兵力控制西部沙漠。</p><p>8.ADJ Bare is used in front of an amount to emphasize how small it is. 仅仅的</p><p>•  Sales are growing for premium wines, but at a bare 2 percent a year.<br> 优质葡萄酒的销量在上涨，但每年仅涨2%。</p><p>9.V-T If you bare something, you uncover it and show it. 使露出</p><p>•  Walsh bared his teeth in a grin.<br> 沃尔什一笑露出了牙齿。</p><p>10.PHRASE If someone does something with their bare hands, they do it without using any weapons or tools. 徒手</p><p>•  Police believe the killer punched her to death with his bare hands.<br> 警方认为凶手是徒手击她至死的。</p><p>11.bare bones 基本要素：指最基本的要素、事实或元素。</p><p>There are not even the bare bones of a garden here – I’ve got nothing.这儿连花园的最基本的东西都没有–我一无所获。</p></blockquote><h4 id="bone"><a href="#bone" class="headerlink" title="bone"></a>bone</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;bəʊn&#x2F;美&#x2F;boʊn&#x2F;n.骨，骨头；骨质；基本结构，基本（bones）；v.<br>挑刺，剔骨头；施骨肥于；（与某人）性交；（为应付考试）临时突击；adv.非常，完全地；【名】 （Bone）（英）博恩，（法、西、罗、塞）博内，（老）奔（人名）</p><p>高中 | CET4 | CET6 | 考研<br>复数bones第三人称单数bones现在分词boning过去式boned过去分词</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>bone&#x2F;bəʊn&#x2F;|CET4 TEM4<br>boningbonedbones<br>1.N-VAR Your bones are the hard parts inside your body that together form your skeleton. 骨头</p><p>•  Many passengers suffered broken bones.<br> 许多乘客骨折了。</p><p>•  The body is made up primarily of bone, muscle, and fat.<br> 人体主要由骨、肌肉和脂肪组成。</p><p>2.V-T If you bone a piece of meat or fish, you remove the bones from it before cooking it. 去 (肉、鱼) 骨或刺</p><p>•  Make sure that you do not pierce the skin when boning the chicken thighs.<br> 给鸡腿去骨时，确保不要刺破皮。</p><p>3.ADJ A bone tool or ornament is made of bone. 骨制的</p><p>•  …a small, expensive pocketknife with a bone handle.<br> …一把昂贵的、带骨制刀把的小刀。</p><p>4.PHRASE The bare bones of something are its most basic parts or details. 基本要素</p><p>•  There are not even the bare bones of a garden here – I’ve got nothing.<br> 这儿连花园的最基本的东西都没有–我一无所获。</p><p>5.→see also bare-bones<br>ADJ If you describe something as bare-bones, you mean that it is reduced to the smallest size, amount, or number that you need. 降到最低限度的</p><p>•  The mayor will have to slash the city’s already bare-bones budget.<br> 市长将不得不削减该市已经降到最低限度的预算。</p><p>6.PHRASE If something such as costs are cut to the bone, they are reduced to the minimum possible. 减到最低</p><p>•  It has survived by cutting its costs to the bone.<br> 把成本降到最低，它才撑了过来。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a1-a2-vocabulary - vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多邻国优美句子</title>
    <link href="/2024/03/24/duolingo-sentence/"/>
    <url>/2024/03/24/duolingo-sentence/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>duolingo</p><img src="/2024/03/24/duolingo-sentence/1617884593390287.png" class="" title="1617884593390287.png (3745×2101)"><h3 id="01"><a href="#01" class="headerlink" title="01"></a>01</h3><blockquote><p>我们不需要办又大又豪华的婚礼。</p><p>We don’t need to have a big and fancy wedding.</p></blockquote><h3 id="02"><a href="#02" class="headerlink" title="02"></a>02</h3><blockquote><p>没有人唱歌比你唱得更糟糕！</p><p>Nobody sings worse than you do!</p></blockquote><h3 id="03"><a href="#03" class="headerlink" title="03"></a>03</h3><blockquote><p>How strange were those animal costumes?</p><p>那些动物服装有多奇怪？</p></blockquote><h3 id="04"><a href="#04" class="headerlink" title="04"></a>04</h3><blockquote><p>那个音乐家去年在音乐节上。</p><p>That musician was at the music festival last year.</p></blockquote><h3 id="05"><a href="#05" class="headerlink" title="05"></a>05</h3><blockquote><p>Today’s performance was better than yesterday’s.</p><p>今天的表演比昨天的更好。</p></blockquote><h3 id="06"><a href="#06" class="headerlink" title="06"></a>06</h3><blockquote><p>How difficult was it to design that costume?</p><p>设计那套服装有多难？</p></blockquote><h3 id="07"><a href="#07" class="headerlink" title="07"></a>07</h3><blockquote><p>She took pictures with the cast backstage.</p><p>她在后台跟全体演员拍了照片。</p></blockquote><h3 id="08"><a href="#08" class="headerlink" title="08"></a>08</h3><blockquote><p>如果下雨，我们就不能烤这些蔬菜了！</p><p>If it rains, we won’t be able to grill these vegetables!</p></blockquote><h3 id="09"><a href="#09" class="headerlink" title="09"></a>09</h3><blockquote><p>Are we going to the neighbors’ housewarming party?</p><p>我们要去邻居的暖房聚会吗？</p></blockquote><h3 id="07-1"><a href="#07-1" class="headerlink" title="07"></a>07</h3><blockquote><p>The bank was robbed yesterday.</p><p>银行昨天被抢了。</p></blockquote><h3 id="08-1"><a href="#08-1" class="headerlink" title="08"></a>08</h3><blockquote><p>Our favorite restaurant didn’t close, did it?</p><p>我们最喜欢的餐厅没有关门，是吗？</p></blockquote><h3 id="07-2"><a href="#07-2" class="headerlink" title="07"></a>07</h3><blockquote><p>She took pictures with the cast backstage.</p><p>她在后台跟全体演员拍了照片。</p></blockquote><h3 id="07-3"><a href="#07-3" class="headerlink" title="07"></a>07</h3><blockquote><p>She took pictures with the cast backstage.</p><p>她在后台跟全体演员拍了照片。</p></blockquote><h3 id="07-4"><a href="#07-4" class="headerlink" title="07"></a>07</h3><blockquote><p>She took pictures with the cast backstage.</p><p>她在后台跟全体演员拍了照片。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ping</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【A1-A2-Vocabulary】01 Accessories-配件</title>
    <link href="/2024/03/24/a1-a2-vocabulary-01-accessories/"/>
    <url>/2024/03/24/a1-a2-vocabulary-01-accessories/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/2024/03/24/a1-a2-vocabulary-01-accessories/RS5963_459338427-low.jpg" class="" title="img"><h1 id="Accessories"><a href="#Accessories" class="headerlink" title="Accessories"></a>Accessories</h1><p>Do the exercises to learn the words for some accessories.</p><ul><li><p>Question</p><blockquote><p>beltrucksackhatglovesearringsnecklacepocketbraceletscarfbagglassescap</p></blockquote><img src="/2024/03/24/a1-a2-vocabulary-01-accessories/image-20240324214035010.png" class="" title="image-20240324214035010"></li><li><p>Answer</p><img src="/2024/03/24/a1-a2-vocabulary-01-accessories/image-20240324214250610.png" class="" title="image-20240324214250610"></li></ul><ul><li><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 1</a></li><li><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 2</a></li></ul><blockquote><p>This holds your trousers up. It goes around your waist.</p><p>belt</p><p>cap</p><p>necklace</p><p>You wear this on your head. It protects your head and eyes from the sun.</p><p>bag</p><p>cap</p><p>earrings</p><p>You wear these to see better.</p><p>glasses</p><p>pocket</p><p>scarf</p><p>You wear this on your back.</p><p>gloves</p><p>necklace</p><p>rucksack</p><p>You wear this to keep warm. It goes around your neck.</p><p>bracelet</p><p>hat</p><p>scarf</p><p>This is a place in your trousers or shirt. You can put things like your phone and money here.</p><p>cap</p><p>hat</p><p>pocket</p><p>You wear these on your hands when it’s cold.</p><p>earrings</p><p>gloves</p><p>hat</p><p>You wear these on your ears.</p><p>bag</p><p>earrings</p><p>necklace</p></blockquote><ul><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 3</a></p><blockquote><h2 id="Vocabulary-A1-A2-Accessories-Odd-one-out"><a href="#Vocabulary-A1-A2-Accessories-Odd-one-out" class="headerlink" title="Vocabulary A1-A2: Accessories - Odd one out"></a>Vocabulary A1-A2: Accessories - Odd one out</h2><p>Choose the things that DO NOT belong.</p><p>Things we wear on our head or neck</p><p>cap</p><p>earrings</p><p>glasses</p><p>pocket</p><p>scarf</p><p>Things for carrying other things</p><p>bag</p><p>cap</p><p>pocket</p><p>rucksack</p><p>We usually wear only one of these</p><p>belt</p><p>cap</p><p>earring</p><p>rucksack</p><p>scarf</p></blockquote></li><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 4</a></p></li><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 5</a></p></li></ul><h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><p>Do you have an accessory that is special in some way? Tell us about it.</p><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><h4 id="belt"><a href="#belt" class="headerlink" title="belt"></a>belt</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;belt&#x2F;美&#x2F;belt&#x2F;n.腰带，皮带；传送带；地带；v.用腰带系紧；狠打，猛击；（尤指出于惩罚用皮带）抽打，打击（某人）；&lt;非正式&gt;飞驰【名】 （Belt）（英、法、德、西）贝尔特（人名）</p><p>初中 | 高中 | CET4 | CET6 | 考研 | IELTS | TOEFL | 商务英语<br>复数belts第三人称单数belts现在分词belting过去式belted</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>belt&#x2F;bɛlt&#x2F;|CET4 TEM4<br>beltingbeltedbelts<br>1.N-COUNT A belt is a strip of leather or cloth that you fasten around your waist. 腰带; 皮带</p><p>•  He wore a belt with a large brass buckle.<br> 他系着一条缀有一颗大铜扣的皮带。</p><p>2.→see also safety belt→see also seat belt</p><p>safety belt<br>N-COUNT A safety belt is a strap attached to a seat in a car or aeroplane. You fasten it around your body and it stops you from being thrown forward if there is an accident. 安全带</p><p>•  Please return to your seats and fasten your safety belts.<br> 请回到你们的座位上并系好安全带。</p><p>seat belt<br>N-COUNT A seat belt is a strap attached to a seat in a car or an aircraft. You fasten it across your body in order to prevent yourself being thrown out of the seat if there is a sudden movement or stop. (汽车、飞机座椅上的) 安全带</p><p>•  The fact I was wearing a seat belt saved my life.<br> 我系着安全带，幸免于难。</p><p>3.N-COUNT A belt in a machine is a circular strip of rubber that is used to drive moving parts or to move objects along. 输送带</p><p>•  The turning disc is connected by a drive belt to an electric motor.<br> 转盘与电动马达之间由一条输送带连接。</p><p>4.→see also conveyor belt</p><p>conveyor belt&#x2F;kənˈveɪə bɛlt&#x2F;<br>N-COUNT A conveyor belt or a conveyor is a continuously moving strip of rubber or metal which is used in factories for moving objects along so that they can be dealt with as quickly as possible. 传送带</p><p>•  The damp bricks went along a conveyor belt into another shed to dry.<br> 潮湿的砖块沿着传送带进入另一个棚子进行干燥。</p><p>5.N-COUNT A belt of land or sea is a long, narrow area of it that has some special feature. 狭长地带</p><p>•  Miners in Zambia’s northern copper belt have gone on strike.<br> 赞比亚北部铜矿区的矿工们举行了罢工。</p><p>6.→see also commuter belt→see also green belt</p><p>commuter belt<br>N-COUNT A commuter belt is the area surrounding a large city, where many people who work in the city live. (大城市周边的) 通勤者居住带</p><p>•  …people who live in the commuter belt around the capital.<br> …居住在首都周边通勤者居住带的人们。</p><p>7.V-T If someone belts you, they hit you very hard. If someone belts something, they hit it very hard. 狠揍; 猛打</p><p>•  “Is it right she belted old George in the gut?” she asked.<br> “她狠揍老乔治的肚子对吗？”她质问道。</p><p>•  Torrealba belted the ball into the left-field bleachers.<br> 托雷尔巴把球猛打到左边的看台上。</p><p>8.N-COUNT Belt is also a noun. 狠揍; 猛打</p><p>•  Father would give you a belt over the head with the scrubbing brush.<br> 父亲会拿板刷狠狠地敲你的头。</p><p>9.V-I If you belt somewhere, you move or travel there very fast. 飞奔</p><p>•  Darren and I belted down the stairs and ran out of the house.<br> 达伦和我飞奔下楼，跑出了屋子。</p><p>10.PHRASE Something that is below the belt is cruel and unfair. 不公正的</p><p>•  Do you think it’s a bit below the belt what they’re doing?<br> 你认为他们的所作所为有点不太公正吗？</p><p>11.PHRASE If you have to tighten your belt, you have to spend less money and manage without things because you have less money than you used to have. 省吃俭用</p><p>•  Clearly, if you are spending more than your income, you’ll need to tighten your belt.<br> 很显然，如果你现在花钱就入不敷出，以后就不得不勒紧腰带了。</p><p>12.PHRASE If you have something under your belt, you have already achieved it or done it. 已成囊中之物</p><p>•  Clare is now a full-time author with six books, including four novels, under her belt.<br> 克莱尔现在是个名下有6本书的专职作家，其中包括4本小说。</p></blockquote><h4 id="rucksack"><a href="#rucksack" class="headerlink" title="rucksack"></a>rucksack</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈrʌksæk&#x2F;美&#x2F;ˈrʌksæk&#x2F;n.帆布背包</p><p>复数rucksacks</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>rucksack&#x2F;ˈrʌkˌsæk&#x2F;|TEM8<br>N-COUNT A rucksack is a bag with straps that go over your shoulders, so that you can carry things on your back, for example when you are walking or climbing. 双肩背</p><p>In his rucksack he carried, besides pencils and notebooks, poetry.在他的帆布背包里，除了铅笔、笔记本外，他还带了诗集。</p><p>My rucksack seems to have gone walkabout.我的旅行包好像是丢了。</p></blockquote><h4 id="strap"><a href="#strap" class="headerlink" title="strap"></a>strap</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;stræp&#x2F;美&#x2F;stræp&#x2F;n.带子，皮带；铁皮条，金属带，铰链片；鞭打（the strap）；拉手吊带，拉手吊环；v.（用带子）束住，捆绑；用绷带包扎（伤口）；用皮鞭抽打，鞭打</p><p>CET4 | CET6 | 考研 | IELTS | TOEFL<br>复数straps第三人称单数straps现在分词strapping过去式strapped过去分词strapped</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>strap&#x2F;stræp&#x2F;|CET4 TEM4<br>strappingstrappedstraps<br>1.N-COUNT A strap is a narrow piece of leather, cloth, or other material. Straps are used to carry things, fasten things together, or to hold a piece of clothing in place. 带子</p><p>•  Nancy gripped the strap of her beach bag.<br> 南希抓住自己海滩休闲包的带子。</p><p>•  She pulled the strap of her nightgown onto her shoulder.<br> 她把睡衣的带子拉到她的肩上。</p><p>2.V-T If you strap something somewhere, you fasten it there with a strap. 用带子绑</p><p>•  She strapped the baby seat into the car.<br> 她把婴儿座椅用带子绑在那辆汽车上。</p></blockquote><h4 id="bracelet"><a href="#bracelet" class="headerlink" title="bracelet"></a>bracelet</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈbreɪslət&#x2F;美&#x2F;ˈbreɪslət&#x2F;n.手镯，臂镯</p><p>GRE<br>复数bracelets</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>bracelet&#x2F;ˈbreɪslɪt&#x2F;|CET6+ TEM4<br>N-COUNT A bracelet is a chain or band, usually made of metal, that you wear around your wrist as jewellery. 手镯</p><p>Hanging from his right wrist is a heavy gold bracelet.<br>从他的右腕上垂下的是一只沉甸甸的金手镯。<br>Inside was a gold charm bracelet, with one charm on it - a star.<br>里面是个金制挂坠手链，上面有一个挂坠——一颗星星。</p></blockquote><h4 id="scarf"><a href="#scarf" class="headerlink" title="scarf"></a>scarf</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;skɑːf&#x2F;美&#x2F;skɑːrf&#x2F;n.围巾，披巾，头巾；（嵌接的）斜面，斜嵌槽；鲸脂的切口；v.&lt;美，非正式&gt;狼吞虎咽地吃；嵌接，斜接（木材，金属）；切割（鲸）脂；【名】 （Scarf）（英）斯卡夫（人名）</p><p>初中 | 高中 | 考研 | TOEFL<br>复数scarves或scarfs第三人称单数scarfs现在分词scarfing过去式scarfed过去分词scarfed</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>scarf&#x2F;skɑːf&#x2F;|CET6+ TEM4<br>N-COUNT A scarf is a piece of cloth that you wear around your neck or head, usually to keep yourself warm. 围巾</p><p>•  He reached up to loosen the scarf around his neck.<br> 他伸出手松开围在脖子上的围巾。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a1-a2-vocabulary - vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a1-a2 词汇-配件</title>
    <link href="/2024/03/24/a1-a2-vocabulary-06-clothes-1/"/>
    <url>/2024/03/24/a1-a2-vocabulary-06-clothes-1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/a1-a2-vocabulary-01-accessories/RS5963_459338427-low.jpg" alt="img"></p><h1 id="Accessories"><a href="#Accessories" class="headerlink" title="Accessories"></a>Accessories</h1><p>Do the exercises to learn the words for some accessories.</p><ul><li><p>Question</p><blockquote><p>beltrucksackhatglovesearringsnecklacepocketbraceletscarfbagglassescap</p></blockquote><p><img src="/a1-a2-vocabulary-01-accessories/image-20240324214035010.png" alt="image-20240324214035010"></p></li><li><p>Answer</p><p><img src="/a1-a2-vocabulary-01-accessories/image-20240324214250610.png" alt="image-20240324214250610"></p></li></ul><ul><li><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 1</a></li><li><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 2</a></li></ul><blockquote><p>This holds your trousers up. It goes around your waist.</p><p>belt</p><p>cap</p><p>necklace</p><p>You wear this on your head. It protects your head and eyes from the sun.</p><p>bag</p><p>cap</p><p>earrings</p><p>You wear these to see better.</p><p>glasses</p><p>pocket</p><p>scarf</p><p>You wear this on your back.</p><p>gloves</p><p>necklace</p><p>rucksack</p><p>You wear this to keep warm. It goes around your neck.</p><p>bracelet</p><p>hat</p><p>scarf</p><p>This is a place in your trousers or shirt. You can put things like your phone and money here.</p><p>cap</p><p>hat</p><p>pocket</p><p>You wear these on your hands when it’s cold.</p><p>earrings</p><p>gloves</p><p>hat</p><p>You wear these on your ears.</p><p>bag</p><p>earrings</p><p>necklace</p></blockquote><ul><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 3</a></p><blockquote><h2 id="Vocabulary-A1-A2-Accessories-Odd-one-out"><a href="#Vocabulary-A1-A2-Accessories-Odd-one-out" class="headerlink" title="Vocabulary A1-A2: Accessories - Odd one out"></a>Vocabulary A1-A2: Accessories - Odd one out</h2><p>Choose the things that DO NOT belong.</p><p>Things we wear on our head or neck</p><p>cap</p><p>earrings</p><p>glasses</p><p>pocket</p><p>scarf</p><p>Things for carrying other things</p><p>bag</p><p>cap</p><p>pocket</p><p>rucksack</p><p>We usually wear only one of these</p><p>belt</p><p>cap</p><p>earring</p><p>rucksack</p><p>scarf</p></blockquote></li><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 4</a></p></li><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 5</a></p></li></ul><h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><p>Do you have an accessory that is special in some way? Tell us about it.</p><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><h4 id="belt"><a href="#belt" class="headerlink" title="belt"></a>belt</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;belt&#x2F;美&#x2F;belt&#x2F;n.腰带，皮带；传送带；地带；v.用腰带系紧；狠打，猛击；（尤指出于惩罚用皮带）抽打，打击（某人）；&lt;非正式&gt;飞驰【名】 （Belt）（英、法、德、西）贝尔特（人名）</p><p>初中 | 高中 | CET4 | CET6 | 考研 | IELTS | TOEFL | 商务英语<br>复数belts第三人称单数belts现在分词belting过去式belted</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>belt&#x2F;bɛlt&#x2F;|CET4 TEM4<br>beltingbeltedbelts<br>1.N-COUNT A belt is a strip of leather or cloth that you fasten around your waist. 腰带; 皮带</p><p>•  He wore a belt with a large brass buckle.<br> 他系着一条缀有一颗大铜扣的皮带。</p><p>2.→see also safety belt→see also seat belt</p><p>safety belt<br>N-COUNT A safety belt is a strap attached to a seat in a car or aeroplane. You fasten it around your body and it stops you from being thrown forward if there is an accident. 安全带</p><p>•  Please return to your seats and fasten your safety belts.<br> 请回到你们的座位上并系好安全带。</p><p>seat belt<br>N-COUNT A seat belt is a strap attached to a seat in a car or an aircraft. You fasten it across your body in order to prevent yourself being thrown out of the seat if there is a sudden movement or stop. (汽车、飞机座椅上的) 安全带</p><p>•  The fact I was wearing a seat belt saved my life.<br> 我系着安全带，幸免于难。</p><p>3.N-COUNT A belt in a machine is a circular strip of rubber that is used to drive moving parts or to move objects along. 输送带</p><p>•  The turning disc is connected by a drive belt to an electric motor.<br> 转盘与电动马达之间由一条输送带连接。</p><p>4.→see also conveyor belt</p><p>conveyor belt&#x2F;kənˈveɪə bɛlt&#x2F;<br>N-COUNT A conveyor belt or a conveyor is a continuously moving strip of rubber or metal which is used in factories for moving objects along so that they can be dealt with as quickly as possible. 传送带</p><p>•  The damp bricks went along a conveyor belt into another shed to dry.<br> 潮湿的砖块沿着传送带进入另一个棚子进行干燥。</p><p>5.N-COUNT A belt of land or sea is a long, narrow area of it that has some special feature. 狭长地带</p><p>•  Miners in Zambia’s northern copper belt have gone on strike.<br> 赞比亚北部铜矿区的矿工们举行了罢工。</p><p>6.→see also commuter belt→see also green belt</p><p>commuter belt<br>N-COUNT A commuter belt is the area surrounding a large city, where many people who work in the city live. (大城市周边的) 通勤者居住带</p><p>•  …people who live in the commuter belt around the capital.<br> …居住在首都周边通勤者居住带的人们。</p><p>7.V-T If someone belts you, they hit you very hard. If someone belts something, they hit it very hard. 狠揍; 猛打</p><p>•  “Is it right she belted old George in the gut?” she asked.<br> “她狠揍老乔治的肚子对吗？”她质问道。</p><p>•  Torrealba belted the ball into the left-field bleachers.<br> 托雷尔巴把球猛打到左边的看台上。</p><p>8.N-COUNT Belt is also a noun. 狠揍; 猛打</p><p>•  Father would give you a belt over the head with the scrubbing brush.<br> 父亲会拿板刷狠狠地敲你的头。</p><p>9.V-I If you belt somewhere, you move or travel there very fast. 飞奔</p><p>•  Darren and I belted down the stairs and ran out of the house.<br> 达伦和我飞奔下楼，跑出了屋子。</p><p>10.PHRASE Something that is below the belt is cruel and unfair. 不公正的</p><p>•  Do you think it’s a bit below the belt what they’re doing?<br> 你认为他们的所作所为有点不太公正吗？</p><p>11.PHRASE If you have to tighten your belt, you have to spend less money and manage without things because you have less money than you used to have. 省吃俭用</p><p>•  Clearly, if you are spending more than your income, you’ll need to tighten your belt.<br> 很显然，如果你现在花钱就入不敷出，以后就不得不勒紧腰带了。</p><p>12.PHRASE If you have something under your belt, you have already achieved it or done it. 已成囊中之物</p><p>•  Clare is now a full-time author with six books, including four novels, under her belt.<br> 克莱尔现在是个名下有6本书的专职作家，其中包括4本小说。</p></blockquote><h4 id="rucksack"><a href="#rucksack" class="headerlink" title="rucksack"></a>rucksack</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈrʌksæk&#x2F;美&#x2F;ˈrʌksæk&#x2F;n.帆布背包</p><p>复数rucksacks</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>rucksack&#x2F;ˈrʌkˌsæk&#x2F;|TEM8<br>N-COUNT A rucksack is a bag with straps that go over your shoulders, so that you can carry things on your back, for example when you are walking or climbing. 双肩背</p><p>In his rucksack he carried, besides pencils and notebooks, poetry.在他的帆布背包里，除了铅笔、笔记本外，他还带了诗集。</p><p>My rucksack seems to have gone walkabout.我的旅行包好像是丢了。</p></blockquote><h4 id="strap"><a href="#strap" class="headerlink" title="strap"></a>strap</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;stræp&#x2F;美&#x2F;stræp&#x2F;n.带子，皮带；铁皮条，金属带，铰链片；鞭打（the strap）；拉手吊带，拉手吊环；v.（用带子）束住，捆绑；用绷带包扎（伤口）；用皮鞭抽打，鞭打</p><p>CET4 | CET6 | 考研 | IELTS | TOEFL<br>复数straps第三人称单数straps现在分词strapping过去式strapped过去分词strapped</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>strap&#x2F;stræp&#x2F;|CET4 TEM4<br>strappingstrappedstraps<br>1.N-COUNT A strap is a narrow piece of leather, cloth, or other material. Straps are used to carry things, fasten things together, or to hold a piece of clothing in place. 带子</p><p>•  Nancy gripped the strap of her beach bag.<br> 南希抓住自己海滩休闲包的带子。</p><p>•  She pulled the strap of her nightgown onto her shoulder.<br> 她把睡衣的带子拉到她的肩上。</p><p>2.V-T If you strap something somewhere, you fasten it there with a strap. 用带子绑</p><p>•  She strapped the baby seat into the car.<br> 她把婴儿座椅用带子绑在那辆汽车上。</p></blockquote><h4 id="bracelet"><a href="#bracelet" class="headerlink" title="bracelet"></a>bracelet</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈbreɪslət&#x2F;美&#x2F;ˈbreɪslət&#x2F;n.手镯，臂镯</p><p>GRE<br>复数bracelets</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>bracelet&#x2F;ˈbreɪslɪt&#x2F;|CET6+ TEM4<br>N-COUNT A bracelet is a chain or band, usually made of metal, that you wear around your wrist as jewellery. 手镯</p><p>Hanging from his right wrist is a heavy gold bracelet.<br>从他的右腕上垂下的是一只沉甸甸的金手镯。<br>Inside was a gold charm bracelet, with one charm on it - a star.<br>里面是个金制挂坠手链，上面有一个挂坠——一颗星星。</p></blockquote><h4 id="scarf"><a href="#scarf" class="headerlink" title="scarf"></a>scarf</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;skɑːf&#x2F;美&#x2F;skɑːrf&#x2F;n.围巾，披巾，头巾；（嵌接的）斜面，斜嵌槽；鲸脂的切口；v.&lt;美，非正式&gt;狼吞虎咽地吃；嵌接，斜接（木材，金属）；切割（鲸）脂；【名】 （Scarf）（英）斯卡夫（人名）</p><p>初中 | 高中 | 考研 | TOEFL<br>复数scarves或scarfs第三人称单数scarfs现在分词scarfing过去式scarfed过去分词scarfed</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>scarf&#x2F;skɑːf&#x2F;|CET6+ TEM4<br>N-COUNT A scarf is a piece of cloth that you wear around your neck or head, usually to keep yourself warm. 围巾</p><p>•  He reached up to loosen the scarf around his neck.<br> 他伸出手松开围在脖子上的围巾。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a1-a2-vocabulary - vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a1-a2 词汇-配件</title>
    <link href="/2024/03/24/a1-a2-vocabulary-07-clothes-2/"/>
    <url>/2024/03/24/a1-a2-vocabulary-07-clothes-2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/a1-a2-vocabulary-01-accessories/RS5963_459338427-low.jpg" alt="img"></p><h1 id="Accessories"><a href="#Accessories" class="headerlink" title="Accessories"></a>Accessories</h1><p>Do the exercises to learn the words for some accessories.</p><ul><li><p>Question</p><blockquote><p>beltrucksackhatglovesearringsnecklacepocketbraceletscarfbagglassescap</p></blockquote><p><img src="/a1-a2-vocabulary-01-accessories/image-20240324214035010.png" alt="image-20240324214035010"></p></li><li><p>Answer</p><p><img src="/a1-a2-vocabulary-01-accessories/image-20240324214250610.png" alt="image-20240324214250610"></p></li></ul><ul><li><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 1</a></li><li><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 2</a></li></ul><blockquote><p>This holds your trousers up. It goes around your waist.</p><p>belt</p><p>cap</p><p>necklace</p><p>You wear this on your head. It protects your head and eyes from the sun.</p><p>bag</p><p>cap</p><p>earrings</p><p>You wear these to see better.</p><p>glasses</p><p>pocket</p><p>scarf</p><p>You wear this on your back.</p><p>gloves</p><p>necklace</p><p>rucksack</p><p>You wear this to keep warm. It goes around your neck.</p><p>bracelet</p><p>hat</p><p>scarf</p><p>This is a place in your trousers or shirt. You can put things like your phone and money here.</p><p>cap</p><p>hat</p><p>pocket</p><p>You wear these on your hands when it’s cold.</p><p>earrings</p><p>gloves</p><p>hat</p><p>You wear these on your ears.</p><p>bag</p><p>earrings</p><p>necklace</p></blockquote><ul><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 3</a></p><blockquote><h2 id="Vocabulary-A1-A2-Accessories-Odd-one-out"><a href="#Vocabulary-A1-A2-Accessories-Odd-one-out" class="headerlink" title="Vocabulary A1-A2: Accessories - Odd one out"></a>Vocabulary A1-A2: Accessories - Odd one out</h2><p>Choose the things that DO NOT belong.</p><p>Things we wear on our head or neck</p><p>cap</p><p>earrings</p><p>glasses</p><p>pocket</p><p>scarf</p><p>Things for carrying other things</p><p>bag</p><p>cap</p><p>pocket</p><p>rucksack</p><p>We usually wear only one of these</p><p>belt</p><p>cap</p><p>earring</p><p>rucksack</p><p>scarf</p></blockquote></li><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 4</a></p></li><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 5</a></p></li></ul><h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><p>Do you have an accessory that is special in some way? Tell us about it.</p><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><h4 id="belt"><a href="#belt" class="headerlink" title="belt"></a>belt</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;belt&#x2F;美&#x2F;belt&#x2F;n.腰带，皮带；传送带；地带；v.用腰带系紧；狠打，猛击；（尤指出于惩罚用皮带）抽打，打击（某人）；&lt;非正式&gt;飞驰【名】 （Belt）（英、法、德、西）贝尔特（人名）</p><p>初中 | 高中 | CET4 | CET6 | 考研 | IELTS | TOEFL | 商务英语<br>复数belts第三人称单数belts现在分词belting过去式belted</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>belt&#x2F;bɛlt&#x2F;|CET4 TEM4<br>beltingbeltedbelts<br>1.N-COUNT A belt is a strip of leather or cloth that you fasten around your waist. 腰带; 皮带</p><p>•  He wore a belt with a large brass buckle.<br> 他系着一条缀有一颗大铜扣的皮带。</p><p>2.→see also safety belt→see also seat belt</p><p>safety belt<br>N-COUNT A safety belt is a strap attached to a seat in a car or aeroplane. You fasten it around your body and it stops you from being thrown forward if there is an accident. 安全带</p><p>•  Please return to your seats and fasten your safety belts.<br> 请回到你们的座位上并系好安全带。</p><p>seat belt<br>N-COUNT A seat belt is a strap attached to a seat in a car or an aircraft. You fasten it across your body in order to prevent yourself being thrown out of the seat if there is a sudden movement or stop. (汽车、飞机座椅上的) 安全带</p><p>•  The fact I was wearing a seat belt saved my life.<br> 我系着安全带，幸免于难。</p><p>3.N-COUNT A belt in a machine is a circular strip of rubber that is used to drive moving parts or to move objects along. 输送带</p><p>•  The turning disc is connected by a drive belt to an electric motor.<br> 转盘与电动马达之间由一条输送带连接。</p><p>4.→see also conveyor belt</p><p>conveyor belt&#x2F;kənˈveɪə bɛlt&#x2F;<br>N-COUNT A conveyor belt or a conveyor is a continuously moving strip of rubber or metal which is used in factories for moving objects along so that they can be dealt with as quickly as possible. 传送带</p><p>•  The damp bricks went along a conveyor belt into another shed to dry.<br> 潮湿的砖块沿着传送带进入另一个棚子进行干燥。</p><p>5.N-COUNT A belt of land or sea is a long, narrow area of it that has some special feature. 狭长地带</p><p>•  Miners in Zambia’s northern copper belt have gone on strike.<br> 赞比亚北部铜矿区的矿工们举行了罢工。</p><p>6.→see also commuter belt→see also green belt</p><p>commuter belt<br>N-COUNT A commuter belt is the area surrounding a large city, where many people who work in the city live. (大城市周边的) 通勤者居住带</p><p>•  …people who live in the commuter belt around the capital.<br> …居住在首都周边通勤者居住带的人们。</p><p>7.V-T If someone belts you, they hit you very hard. If someone belts something, they hit it very hard. 狠揍; 猛打</p><p>•  “Is it right she belted old George in the gut?” she asked.<br> “她狠揍老乔治的肚子对吗？”她质问道。</p><p>•  Torrealba belted the ball into the left-field bleachers.<br> 托雷尔巴把球猛打到左边的看台上。</p><p>8.N-COUNT Belt is also a noun. 狠揍; 猛打</p><p>•  Father would give you a belt over the head with the scrubbing brush.<br> 父亲会拿板刷狠狠地敲你的头。</p><p>9.V-I If you belt somewhere, you move or travel there very fast. 飞奔</p><p>•  Darren and I belted down the stairs and ran out of the house.<br> 达伦和我飞奔下楼，跑出了屋子。</p><p>10.PHRASE Something that is below the belt is cruel and unfair. 不公正的</p><p>•  Do you think it’s a bit below the belt what they’re doing?<br> 你认为他们的所作所为有点不太公正吗？</p><p>11.PHRASE If you have to tighten your belt, you have to spend less money and manage without things because you have less money than you used to have. 省吃俭用</p><p>•  Clearly, if you are spending more than your income, you’ll need to tighten your belt.<br> 很显然，如果你现在花钱就入不敷出，以后就不得不勒紧腰带了。</p><p>12.PHRASE If you have something under your belt, you have already achieved it or done it. 已成囊中之物</p><p>•  Clare is now a full-time author with six books, including four novels, under her belt.<br> 克莱尔现在是个名下有6本书的专职作家，其中包括4本小说。</p></blockquote><h4 id="rucksack"><a href="#rucksack" class="headerlink" title="rucksack"></a>rucksack</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈrʌksæk&#x2F;美&#x2F;ˈrʌksæk&#x2F;n.帆布背包</p><p>复数rucksacks</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>rucksack&#x2F;ˈrʌkˌsæk&#x2F;|TEM8<br>N-COUNT A rucksack is a bag with straps that go over your shoulders, so that you can carry things on your back, for example when you are walking or climbing. 双肩背</p><p>In his rucksack he carried, besides pencils and notebooks, poetry.在他的帆布背包里，除了铅笔、笔记本外，他还带了诗集。</p><p>My rucksack seems to have gone walkabout.我的旅行包好像是丢了。</p></blockquote><h4 id="strap"><a href="#strap" class="headerlink" title="strap"></a>strap</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;stræp&#x2F;美&#x2F;stræp&#x2F;n.带子，皮带；铁皮条，金属带，铰链片；鞭打（the strap）；拉手吊带，拉手吊环；v.（用带子）束住，捆绑；用绷带包扎（伤口）；用皮鞭抽打，鞭打</p><p>CET4 | CET6 | 考研 | IELTS | TOEFL<br>复数straps第三人称单数straps现在分词strapping过去式strapped过去分词strapped</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>strap&#x2F;stræp&#x2F;|CET4 TEM4<br>strappingstrappedstraps<br>1.N-COUNT A strap is a narrow piece of leather, cloth, or other material. Straps are used to carry things, fasten things together, or to hold a piece of clothing in place. 带子</p><p>•  Nancy gripped the strap of her beach bag.<br> 南希抓住自己海滩休闲包的带子。</p><p>•  She pulled the strap of her nightgown onto her shoulder.<br> 她把睡衣的带子拉到她的肩上。</p><p>2.V-T If you strap something somewhere, you fasten it there with a strap. 用带子绑</p><p>•  She strapped the baby seat into the car.<br> 她把婴儿座椅用带子绑在那辆汽车上。</p></blockquote><h4 id="bracelet"><a href="#bracelet" class="headerlink" title="bracelet"></a>bracelet</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈbreɪslət&#x2F;美&#x2F;ˈbreɪslət&#x2F;n.手镯，臂镯</p><p>GRE<br>复数bracelets</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>bracelet&#x2F;ˈbreɪslɪt&#x2F;|CET6+ TEM4<br>N-COUNT A bracelet is a chain or band, usually made of metal, that you wear around your wrist as jewellery. 手镯</p><p>Hanging from his right wrist is a heavy gold bracelet.<br>从他的右腕上垂下的是一只沉甸甸的金手镯。<br>Inside was a gold charm bracelet, with one charm on it - a star.<br>里面是个金制挂坠手链，上面有一个挂坠——一颗星星。</p></blockquote><h4 id="scarf"><a href="#scarf" class="headerlink" title="scarf"></a>scarf</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;skɑːf&#x2F;美&#x2F;skɑːrf&#x2F;n.围巾，披巾，头巾；（嵌接的）斜面，斜嵌槽；鲸脂的切口；v.&lt;美，非正式&gt;狼吞虎咽地吃；嵌接，斜接（木材，金属）；切割（鲸）脂；【名】 （Scarf）（英）斯卡夫（人名）</p><p>初中 | 高中 | 考研 | TOEFL<br>复数scarves或scarfs第三人称单数scarfs现在分词scarfing过去式scarfed过去分词scarfed</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>scarf&#x2F;skɑːf&#x2F;|CET6+ TEM4<br>N-COUNT A scarf is a piece of cloth that you wear around your neck or head, usually to keep yourself warm. 围巾</p><p>•  He reached up to loosen the scarf around his neck.<br> 他伸出手松开围在脖子上的围巾。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a1-a2-vocabulary - vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a1-a2 词汇-配件</title>
    <link href="/2024/03/24/a1-a2-vocabulary-09-daily-routine/"/>
    <url>/2024/03/24/a1-a2-vocabulary-09-daily-routine/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/a1-a2-vocabulary-01-accessories/RS5963_459338427-low.jpg" alt="img"></p><h1 id="Accessories"><a href="#Accessories" class="headerlink" title="Accessories"></a>Accessories</h1><p>Do the exercises to learn the words for some accessories.</p><ul><li><p>Question</p><blockquote><p>beltrucksackhatglovesearringsnecklacepocketbraceletscarfbagglassescap</p></blockquote><p><img src="/a1-a2-vocabulary-01-accessories/image-20240324214035010.png" alt="image-20240324214035010"></p></li><li><p>Answer</p><p><img src="/a1-a2-vocabulary-01-accessories/image-20240324214250610.png" alt="image-20240324214250610"></p></li></ul><ul><li><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 1</a></li><li><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 2</a></li></ul><blockquote><p>This holds your trousers up. It goes around your waist.</p><p>belt</p><p>cap</p><p>necklace</p><p>You wear this on your head. It protects your head and eyes from the sun.</p><p>bag</p><p>cap</p><p>earrings</p><p>You wear these to see better.</p><p>glasses</p><p>pocket</p><p>scarf</p><p>You wear this on your back.</p><p>gloves</p><p>necklace</p><p>rucksack</p><p>You wear this to keep warm. It goes around your neck.</p><p>bracelet</p><p>hat</p><p>scarf</p><p>This is a place in your trousers or shirt. You can put things like your phone and money here.</p><p>cap</p><p>hat</p><p>pocket</p><p>You wear these on your hands when it’s cold.</p><p>earrings</p><p>gloves</p><p>hat</p><p>You wear these on your ears.</p><p>bag</p><p>earrings</p><p>necklace</p></blockquote><ul><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 3</a></p><blockquote><h2 id="Vocabulary-A1-A2-Accessories-Odd-one-out"><a href="#Vocabulary-A1-A2-Accessories-Odd-one-out" class="headerlink" title="Vocabulary A1-A2: Accessories - Odd one out"></a>Vocabulary A1-A2: Accessories - Odd one out</h2><p>Choose the things that DO NOT belong.</p><p>Things we wear on our head or neck</p><p>cap</p><p>earrings</p><p>glasses</p><p>pocket</p><p>scarf</p><p>Things for carrying other things</p><p>bag</p><p>cap</p><p>pocket</p><p>rucksack</p><p>We usually wear only one of these</p><p>belt</p><p>cap</p><p>earring</p><p>rucksack</p><p>scarf</p></blockquote></li><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 4</a></p></li><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 5</a></p></li></ul><h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><p>Do you have an accessory that is special in some way? Tell us about it.</p><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><h4 id="belt"><a href="#belt" class="headerlink" title="belt"></a>belt</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;belt&#x2F;美&#x2F;belt&#x2F;n.腰带，皮带；传送带；地带；v.用腰带系紧；狠打，猛击；（尤指出于惩罚用皮带）抽打，打击（某人）；&lt;非正式&gt;飞驰【名】 （Belt）（英、法、德、西）贝尔特（人名）</p><p>初中 | 高中 | CET4 | CET6 | 考研 | IELTS | TOEFL | 商务英语<br>复数belts第三人称单数belts现在分词belting过去式belted</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>belt&#x2F;bɛlt&#x2F;|CET4 TEM4<br>beltingbeltedbelts<br>1.N-COUNT A belt is a strip of leather or cloth that you fasten around your waist. 腰带; 皮带</p><p>•  He wore a belt with a large brass buckle.<br> 他系着一条缀有一颗大铜扣的皮带。</p><p>2.→see also safety belt→see also seat belt</p><p>safety belt<br>N-COUNT A safety belt is a strap attached to a seat in a car or aeroplane. You fasten it around your body and it stops you from being thrown forward if there is an accident. 安全带</p><p>•  Please return to your seats and fasten your safety belts.<br> 请回到你们的座位上并系好安全带。</p><p>seat belt<br>N-COUNT A seat belt is a strap attached to a seat in a car or an aircraft. You fasten it across your body in order to prevent yourself being thrown out of the seat if there is a sudden movement or stop. (汽车、飞机座椅上的) 安全带</p><p>•  The fact I was wearing a seat belt saved my life.<br> 我系着安全带，幸免于难。</p><p>3.N-COUNT A belt in a machine is a circular strip of rubber that is used to drive moving parts or to move objects along. 输送带</p><p>•  The turning disc is connected by a drive belt to an electric motor.<br> 转盘与电动马达之间由一条输送带连接。</p><p>4.→see also conveyor belt</p><p>conveyor belt&#x2F;kənˈveɪə bɛlt&#x2F;<br>N-COUNT A conveyor belt or a conveyor is a continuously moving strip of rubber or metal which is used in factories for moving objects along so that they can be dealt with as quickly as possible. 传送带</p><p>•  The damp bricks went along a conveyor belt into another shed to dry.<br> 潮湿的砖块沿着传送带进入另一个棚子进行干燥。</p><p>5.N-COUNT A belt of land or sea is a long, narrow area of it that has some special feature. 狭长地带</p><p>•  Miners in Zambia’s northern copper belt have gone on strike.<br> 赞比亚北部铜矿区的矿工们举行了罢工。</p><p>6.→see also commuter belt→see also green belt</p><p>commuter belt<br>N-COUNT A commuter belt is the area surrounding a large city, where many people who work in the city live. (大城市周边的) 通勤者居住带</p><p>•  …people who live in the commuter belt around the capital.<br> …居住在首都周边通勤者居住带的人们。</p><p>7.V-T If someone belts you, they hit you very hard. If someone belts something, they hit it very hard. 狠揍; 猛打</p><p>•  “Is it right she belted old George in the gut?” she asked.<br> “她狠揍老乔治的肚子对吗？”她质问道。</p><p>•  Torrealba belted the ball into the left-field bleachers.<br> 托雷尔巴把球猛打到左边的看台上。</p><p>8.N-COUNT Belt is also a noun. 狠揍; 猛打</p><p>•  Father would give you a belt over the head with the scrubbing brush.<br> 父亲会拿板刷狠狠地敲你的头。</p><p>9.V-I If you belt somewhere, you move or travel there very fast. 飞奔</p><p>•  Darren and I belted down the stairs and ran out of the house.<br> 达伦和我飞奔下楼，跑出了屋子。</p><p>10.PHRASE Something that is below the belt is cruel and unfair. 不公正的</p><p>•  Do you think it’s a bit below the belt what they’re doing?<br> 你认为他们的所作所为有点不太公正吗？</p><p>11.PHRASE If you have to tighten your belt, you have to spend less money and manage without things because you have less money than you used to have. 省吃俭用</p><p>•  Clearly, if you are spending more than your income, you’ll need to tighten your belt.<br> 很显然，如果你现在花钱就入不敷出，以后就不得不勒紧腰带了。</p><p>12.PHRASE If you have something under your belt, you have already achieved it or done it. 已成囊中之物</p><p>•  Clare is now a full-time author with six books, including four novels, under her belt.<br> 克莱尔现在是个名下有6本书的专职作家，其中包括4本小说。</p></blockquote><h4 id="rucksack"><a href="#rucksack" class="headerlink" title="rucksack"></a>rucksack</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈrʌksæk&#x2F;美&#x2F;ˈrʌksæk&#x2F;n.帆布背包</p><p>复数rucksacks</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>rucksack&#x2F;ˈrʌkˌsæk&#x2F;|TEM8<br>N-COUNT A rucksack is a bag with straps that go over your shoulders, so that you can carry things on your back, for example when you are walking or climbing. 双肩背</p><p>In his rucksack he carried, besides pencils and notebooks, poetry.在他的帆布背包里，除了铅笔、笔记本外，他还带了诗集。</p><p>My rucksack seems to have gone walkabout.我的旅行包好像是丢了。</p></blockquote><h4 id="strap"><a href="#strap" class="headerlink" title="strap"></a>strap</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;stræp&#x2F;美&#x2F;stræp&#x2F;n.带子，皮带；铁皮条，金属带，铰链片；鞭打（the strap）；拉手吊带，拉手吊环；v.（用带子）束住，捆绑；用绷带包扎（伤口）；用皮鞭抽打，鞭打</p><p>CET4 | CET6 | 考研 | IELTS | TOEFL<br>复数straps第三人称单数straps现在分词strapping过去式strapped过去分词strapped</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>strap&#x2F;stræp&#x2F;|CET4 TEM4<br>strappingstrappedstraps<br>1.N-COUNT A strap is a narrow piece of leather, cloth, or other material. Straps are used to carry things, fasten things together, or to hold a piece of clothing in place. 带子</p><p>•  Nancy gripped the strap of her beach bag.<br> 南希抓住自己海滩休闲包的带子。</p><p>•  She pulled the strap of her nightgown onto her shoulder.<br> 她把睡衣的带子拉到她的肩上。</p><p>2.V-T If you strap something somewhere, you fasten it there with a strap. 用带子绑</p><p>•  She strapped the baby seat into the car.<br> 她把婴儿座椅用带子绑在那辆汽车上。</p></blockquote><h4 id="bracelet"><a href="#bracelet" class="headerlink" title="bracelet"></a>bracelet</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈbreɪslət&#x2F;美&#x2F;ˈbreɪslət&#x2F;n.手镯，臂镯</p><p>GRE<br>复数bracelets</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>bracelet&#x2F;ˈbreɪslɪt&#x2F;|CET6+ TEM4<br>N-COUNT A bracelet is a chain or band, usually made of metal, that you wear around your wrist as jewellery. 手镯</p><p>Hanging from his right wrist is a heavy gold bracelet.<br>从他的右腕上垂下的是一只沉甸甸的金手镯。<br>Inside was a gold charm bracelet, with one charm on it - a star.<br>里面是个金制挂坠手链，上面有一个挂坠——一颗星星。</p></blockquote><h4 id="scarf"><a href="#scarf" class="headerlink" title="scarf"></a>scarf</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;skɑːf&#x2F;美&#x2F;skɑːrf&#x2F;n.围巾，披巾，头巾；（嵌接的）斜面，斜嵌槽；鲸脂的切口；v.&lt;美，非正式&gt;狼吞虎咽地吃；嵌接，斜接（木材，金属）；切割（鲸）脂；【名】 （Scarf）（英）斯卡夫（人名）</p><p>初中 | 高中 | 考研 | TOEFL<br>复数scarves或scarfs第三人称单数scarfs现在分词scarfing过去式scarfed过去分词scarfed</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>scarf&#x2F;skɑːf&#x2F;|CET6+ TEM4<br>N-COUNT A scarf is a piece of cloth that you wear around your neck or head, usually to keep yourself warm. 围巾</p><p>•  He reached up to loosen the scarf around his neck.<br> 他伸出手松开围在脖子上的围巾。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a1-a2-vocabulary - vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a1-a2 词汇-配件</title>
    <link href="/2024/03/24/a1-a2-vocabulary-08-colours/"/>
    <url>/2024/03/24/a1-a2-vocabulary-08-colours/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/a1-a2-vocabulary-01-accessories/RS5963_459338427-low.jpg" alt="img"></p><h1 id="Accessories"><a href="#Accessories" class="headerlink" title="Accessories"></a>Accessories</h1><p>Do the exercises to learn the words for some accessories.</p><ul><li><p>Question</p><blockquote><p>beltrucksackhatglovesearringsnecklacepocketbraceletscarfbagglassescap</p></blockquote><p><img src="/a1-a2-vocabulary-01-accessories/image-20240324214035010.png" alt="image-20240324214035010"></p></li><li><p>Answer</p><p><img src="/a1-a2-vocabulary-01-accessories/image-20240324214250610.png" alt="image-20240324214250610"></p></li></ul><ul><li><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 1</a></li><li><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 2</a></li></ul><blockquote><p>This holds your trousers up. It goes around your waist.</p><p>belt</p><p>cap</p><p>necklace</p><p>You wear this on your head. It protects your head and eyes from the sun.</p><p>bag</p><p>cap</p><p>earrings</p><p>You wear these to see better.</p><p>glasses</p><p>pocket</p><p>scarf</p><p>You wear this on your back.</p><p>gloves</p><p>necklace</p><p>rucksack</p><p>You wear this to keep warm. It goes around your neck.</p><p>bracelet</p><p>hat</p><p>scarf</p><p>This is a place in your trousers or shirt. You can put things like your phone and money here.</p><p>cap</p><p>hat</p><p>pocket</p><p>You wear these on your hands when it’s cold.</p><p>earrings</p><p>gloves</p><p>hat</p><p>You wear these on your ears.</p><p>bag</p><p>earrings</p><p>necklace</p></blockquote><ul><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 3</a></p><blockquote><h2 id="Vocabulary-A1-A2-Accessories-Odd-one-out"><a href="#Vocabulary-A1-A2-Accessories-Odd-one-out" class="headerlink" title="Vocabulary A1-A2: Accessories - Odd one out"></a>Vocabulary A1-A2: Accessories - Odd one out</h2><p>Choose the things that DO NOT belong.</p><p>Things we wear on our head or neck</p><p>cap</p><p>earrings</p><p>glasses</p><p>pocket</p><p>scarf</p><p>Things for carrying other things</p><p>bag</p><p>cap</p><p>pocket</p><p>rucksack</p><p>We usually wear only one of these</p><p>belt</p><p>cap</p><p>earring</p><p>rucksack</p><p>scarf</p></blockquote></li><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 4</a></p></li><li><p><a href="https://learnenglish.britishcouncil.org/vocabulary/a1-a2-vocabulary/accessories#">Task 5</a></p></li></ul><h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><p>Do you have an accessory that is special in some way? Tell us about it.</p><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><h4 id="belt"><a href="#belt" class="headerlink" title="belt"></a>belt</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;belt&#x2F;美&#x2F;belt&#x2F;n.腰带，皮带；传送带；地带；v.用腰带系紧；狠打，猛击；（尤指出于惩罚用皮带）抽打，打击（某人）；&lt;非正式&gt;飞驰【名】 （Belt）（英、法、德、西）贝尔特（人名）</p><p>初中 | 高中 | CET4 | CET6 | 考研 | IELTS | TOEFL | 商务英语<br>复数belts第三人称单数belts现在分词belting过去式belted</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>belt&#x2F;bɛlt&#x2F;|CET4 TEM4<br>beltingbeltedbelts<br>1.N-COUNT A belt is a strip of leather or cloth that you fasten around your waist. 腰带; 皮带</p><p>•  He wore a belt with a large brass buckle.<br> 他系着一条缀有一颗大铜扣的皮带。</p><p>2.→see also safety belt→see also seat belt</p><p>safety belt<br>N-COUNT A safety belt is a strap attached to a seat in a car or aeroplane. You fasten it around your body and it stops you from being thrown forward if there is an accident. 安全带</p><p>•  Please return to your seats and fasten your safety belts.<br> 请回到你们的座位上并系好安全带。</p><p>seat belt<br>N-COUNT A seat belt is a strap attached to a seat in a car or an aircraft. You fasten it across your body in order to prevent yourself being thrown out of the seat if there is a sudden movement or stop. (汽车、飞机座椅上的) 安全带</p><p>•  The fact I was wearing a seat belt saved my life.<br> 我系着安全带，幸免于难。</p><p>3.N-COUNT A belt in a machine is a circular strip of rubber that is used to drive moving parts or to move objects along. 输送带</p><p>•  The turning disc is connected by a drive belt to an electric motor.<br> 转盘与电动马达之间由一条输送带连接。</p><p>4.→see also conveyor belt</p><p>conveyor belt&#x2F;kənˈveɪə bɛlt&#x2F;<br>N-COUNT A conveyor belt or a conveyor is a continuously moving strip of rubber or metal which is used in factories for moving objects along so that they can be dealt with as quickly as possible. 传送带</p><p>•  The damp bricks went along a conveyor belt into another shed to dry.<br> 潮湿的砖块沿着传送带进入另一个棚子进行干燥。</p><p>5.N-COUNT A belt of land or sea is a long, narrow area of it that has some special feature. 狭长地带</p><p>•  Miners in Zambia’s northern copper belt have gone on strike.<br> 赞比亚北部铜矿区的矿工们举行了罢工。</p><p>6.→see also commuter belt→see also green belt</p><p>commuter belt<br>N-COUNT A commuter belt is the area surrounding a large city, where many people who work in the city live. (大城市周边的) 通勤者居住带</p><p>•  …people who live in the commuter belt around the capital.<br> …居住在首都周边通勤者居住带的人们。</p><p>7.V-T If someone belts you, they hit you very hard. If someone belts something, they hit it very hard. 狠揍; 猛打</p><p>•  “Is it right she belted old George in the gut?” she asked.<br> “她狠揍老乔治的肚子对吗？”她质问道。</p><p>•  Torrealba belted the ball into the left-field bleachers.<br> 托雷尔巴把球猛打到左边的看台上。</p><p>8.N-COUNT Belt is also a noun. 狠揍; 猛打</p><p>•  Father would give you a belt over the head with the scrubbing brush.<br> 父亲会拿板刷狠狠地敲你的头。</p><p>9.V-I If you belt somewhere, you move or travel there very fast. 飞奔</p><p>•  Darren and I belted down the stairs and ran out of the house.<br> 达伦和我飞奔下楼，跑出了屋子。</p><p>10.PHRASE Something that is below the belt is cruel and unfair. 不公正的</p><p>•  Do you think it’s a bit below the belt what they’re doing?<br> 你认为他们的所作所为有点不太公正吗？</p><p>11.PHRASE If you have to tighten your belt, you have to spend less money and manage without things because you have less money than you used to have. 省吃俭用</p><p>•  Clearly, if you are spending more than your income, you’ll need to tighten your belt.<br> 很显然，如果你现在花钱就入不敷出，以后就不得不勒紧腰带了。</p><p>12.PHRASE If you have something under your belt, you have already achieved it or done it. 已成囊中之物</p><p>•  Clare is now a full-time author with six books, including four novels, under her belt.<br> 克莱尔现在是个名下有6本书的专职作家，其中包括4本小说。</p></blockquote><h4 id="rucksack"><a href="#rucksack" class="headerlink" title="rucksack"></a>rucksack</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈrʌksæk&#x2F;美&#x2F;ˈrʌksæk&#x2F;n.帆布背包</p><p>复数rucksacks</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>rucksack&#x2F;ˈrʌkˌsæk&#x2F;|TEM8<br>N-COUNT A rucksack is a bag with straps that go over your shoulders, so that you can carry things on your back, for example when you are walking or climbing. 双肩背</p><p>In his rucksack he carried, besides pencils and notebooks, poetry.在他的帆布背包里，除了铅笔、笔记本外，他还带了诗集。</p><p>My rucksack seems to have gone walkabout.我的旅行包好像是丢了。</p></blockquote><h4 id="strap"><a href="#strap" class="headerlink" title="strap"></a>strap</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;stræp&#x2F;美&#x2F;stræp&#x2F;n.带子，皮带；铁皮条，金属带，铰链片；鞭打（the strap）；拉手吊带，拉手吊环；v.（用带子）束住，捆绑；用绷带包扎（伤口）；用皮鞭抽打，鞭打</p><p>CET4 | CET6 | 考研 | IELTS | TOEFL<br>复数straps第三人称单数straps现在分词strapping过去式strapped过去分词strapped</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>strap&#x2F;stræp&#x2F;|CET4 TEM4<br>strappingstrappedstraps<br>1.N-COUNT A strap is a narrow piece of leather, cloth, or other material. Straps are used to carry things, fasten things together, or to hold a piece of clothing in place. 带子</p><p>•  Nancy gripped the strap of her beach bag.<br> 南希抓住自己海滩休闲包的带子。</p><p>•  She pulled the strap of her nightgown onto her shoulder.<br> 她把睡衣的带子拉到她的肩上。</p><p>2.V-T If you strap something somewhere, you fasten it there with a strap. 用带子绑</p><p>•  She strapped the baby seat into the car.<br> 她把婴儿座椅用带子绑在那辆汽车上。</p></blockquote><h4 id="bracelet"><a href="#bracelet" class="headerlink" title="bracelet"></a>bracelet</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;ˈbreɪslət&#x2F;美&#x2F;ˈbreɪslət&#x2F;n.手镯，臂镯</p><p>GRE<br>复数bracelets</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>bracelet&#x2F;ˈbreɪslɪt&#x2F;|CET6+ TEM4<br>N-COUNT A bracelet is a chain or band, usually made of metal, that you wear around your wrist as jewellery. 手镯</p><p>Hanging from his right wrist is a heavy gold bracelet.<br>从他的右腕上垂下的是一只沉甸甸的金手镯。<br>Inside was a gold charm bracelet, with one charm on it - a star.<br>里面是个金制挂坠手链，上面有一个挂坠——一颗星星。</p></blockquote><h4 id="scarf"><a href="#scarf" class="headerlink" title="scarf"></a>scarf</h4><ul><li>简易</li></ul><blockquote><p>英&#x2F;skɑːf&#x2F;美&#x2F;skɑːrf&#x2F;n.围巾，披巾，头巾；（嵌接的）斜面，斜嵌槽；鲸脂的切口；v.&lt;美，非正式&gt;狼吞虎咽地吃；嵌接，斜接（木材，金属）；切割（鲸）脂；【名】 （Scarf）（英）斯卡夫（人名）</p><p>初中 | 高中 | 考研 | TOEFL<br>复数scarves或scarfs第三人称单数scarfs现在分词scarfing过去式scarfed过去分词scarfed</p></blockquote><ul><li>《柯林斯英汉双解大词典》</li></ul><blockquote><p>scarf&#x2F;skɑːf&#x2F;|CET6+ TEM4<br>N-COUNT A scarf is a piece of cloth that you wear around your neck or head, usually to keep yourself warm. 围巾</p><p>•  He reached up to loosen the scarf around his neck.<br> 他伸出手松开围在脖子上的围巾。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>a1-a2-vocabulary - vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A phone call from a customer一个客户的电话</title>
    <link href="/2024/03/23/b1-listening-01-phone-call-customer/"/>
    <url>/2024/03/23/b1-listening-01-phone-call-customer/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="A-phone-call-from-a-customer一个客户的电话"><a href="#A-phone-call-from-a-customer一个客户的电话" class="headerlink" title="A phone call from a customer一个客户的电话"></a>A phone call from a customer一个客户的电话</h3><img src="/2024/03/23/b1-listening-01-phone-call-customer/RS8083_GettyImages-901595778-hig.jpg" class="" title="img"><p>A phone call from a customer<br>Listen to the phone call from a customer to practise and improve your listening skills.<br>Do the preparation task first. Then listen to the audio and do the exercises.</p><h4 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h4><blockquote><p>Match the words and the definitions.</p></blockquote>        <div id="aplayer-BgDQUorI" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-BgDQUorI"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "A_phone_call_from_a_customer",              author: "B1_Listening",              url: "LE_listening_B1_A_phone_call_from_a_customer-5.mp3",              pic: "https://img4.kuwo.cn/star/albumcover/300/50/69/4184500136.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><ul><li>Question</li></ul><img src="/2024/03/23/b1-listening-01-phone-call-customer/image-20240323101714208.png" class="" title="image-20240323101714208"><ul><li>Answer</li></ul><img src="/2024/03/23/b1-listening-01-phone-call-customer/image-20240323101548127.png" class="" title="image-20240323101548127"><h4 id="Transcript-En"><a href="#Transcript-En" class="headerlink" title="Transcript-En"></a>Transcript-En</h4><blockquote><p>Junko: Hello, Junko Mori speaking. How can I help you?</p><p>Andrea: Hi, Junko, it’s Andrea here from Red Band. I’m calling about our latest order.</p><p>Junko: Everything arrived OK, right? We got the delivery confirmation at our end.</p><p>Andrea: Yes, everything’s fine with the order. I’m calling about the invoice and the payment terms. I need a favour.</p><p>Junko: A favour? What do you need?</p><p>Andrea: This is a little, er … difficult, but I need an extension on the payment terms. I know they’re usually 30 days, but we’re having some cash flow problems. You’d really be helping us out if you could extend it to 60 days.</p><p>Junko: I’m not sure if I can do that, Andrea. We’ve got regulations at our end, and also have to manage our own cash flow.</p><p>Andrea: I promise this won’t become the norm, Junko. Actually, I also want to place another new order. The same size order as last time. It’s for an important customer and they pay on delivery.</p><p>Junko: I see. So your cash flow problem will be solved after this new order is delivered.</p><p>Andrea: Exactly.</p><p>Junko: That sounds good. Hold on, Andrea. Let me see what I can do. Yes, I think we can make an exception this time.</p><p>Andrea: That’s great, Junko. I appreciate your help.</p><p>Junko: And we appreciate your business, Andrea. It works both ways.</p><p>Andrea: Thanks again, Junko. Can you send me a quick email confirmation of the payment terms extension?</p><p>Junko: Sure, no problem. We’re happy to help you.</p><p>Andrea: Great. And I’ll email you the new order.</p><p>Junko: Thanks. I’ll keep an eye out for it. Talk to you soon.</p><p>Andrea: You too. Goodbye.</p></blockquote><h4 id="Transcript-EnCn"><a href="#Transcript-EnCn" class="headerlink" title="Transcript-EnCn"></a>Transcript-EnCn</h4><blockquote><p>Junko: Hello, Junko Mori speaking. How can I help you?<br>Junko：你好，我是森顺子。我怎么帮你？</p><p>Andrea: Hi, Junko, it’s Andrea here from Red Band. I’m calling about our latest order.<br>安德里亚：嗨，纯子，我是来自 Red Band 的安德里亚。我打电话询问我们最新的订单。</p><p>Junko: Everything arrived OK, right? We got the delivery confirmation at our end.<br>Junko：一切顺利，对吧？我们最后收到了交货确认。</p><p>Andrea: Yes, everything’s fine with the order. I’m calling about the invoice and the payment terms. I need a favour.<br>安德里亚：是的，订单一切顺利。我打电话询问发票和付款条件。我需要帮个忙。</p><p>Junko: A favour? What do you need?<br>Junko：帮个忙？你需要什么？</p><p>Andrea: This is a little, er … difficult, but I need an extension on the payment terms. I know they’re usually 30 days, but we’re having some cash flow problems. You’d really be helping us out if you could extend it to 60 days.<br>安德里亚：这有点，呃……困难，但我需要延长付款条件。我知道通常是 30 天，但我们遇到了一些现金流问题。如果您能将期限延长至 60 天，那您真是帮了我们大忙了。</p><p>Junko: I’m not sure if I can do that, Andrea. We’ve got regulations at our end, and also have to manage our own cash flow.<br>Junko：我不确定我是否能做到这一点，Andrea。我们有监管，也必须管理我们自己的现金流。</p><p>Andrea: I promise this won’t become the norm, Junko. Actually, I also want to place another new order. The same size order as last time. It’s for an important customer and they pay on delivery.<br>安德里亚：我保证这不会成为常态，纯子。事实上，我还想再下一个新订单。与上次订单尺寸相同。这是给重要客户的，他们货到付款。</p><p>Junko: I see. So your cash flow problem will be solved after this new order is delivered.<br>Junko：我明白了。所以这个新订单交付后，你的现金流问题就解决了。</p><p>Andrea: Exactly.<br>安德里亚：没错。</p><p>Junko: That sounds good. Hold on, Andrea. Let me see what I can do. Yes, I think we can make an exception this time.<br>Junko：听起来不错。坚持住，安德里亚。让我看看我能做什么。是的，我想这次我们可以破例。</p><p>Andrea: That’s great, Junko. I appreciate your help.<br>安德里亚：太好了，纯子。我感谢您的帮助。</p><p>Junko: And we appreciate your business, Andrea. It works both ways.<br>Junko：非常感谢您的惠顾，Andrea。它是双向的。</p><p>Andrea: Thanks again, Junko. Can you send me a quick email confirmation of the payment terms extension?<br>安德里亚：再次感谢，纯子。您能给我发送一封关于付款条件延期的快速电子邮件确认吗？</p><p>Junko: Sure, no problem. We’re happy to help you.<br>Junko：当然，没问题。我们很高兴为您提供帮助。</p><p>Andrea: Great. And I’ll email you the new order.<br>安德里亚：太好了。我会通过电子邮件将新订单发送给您。</p><p>Junko: Thanks. I’ll keep an eye out for it. Talk to you soon.<br>纯子：谢谢。我会留意的。以后再聊。</p><p>Andrea: You too. Goodbye.<br>安德里亚：你也是。再见。</p></blockquote><h4 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h4><p>Listening B1: A phone call from a customer – 1</p><ul><li>Question</li></ul><img src="/2024/03/23/b1-listening-01-phone-call-customer/image-20240323101845420.png" class="" title="image-20240323101845420"><ul><li>Answer</li></ul><img src="/2024/03/23/b1-listening-01-phone-call-customer/image-20240323102034334.png" class="" title="image-20240323102034334"><blockquote><p>Are the sentences true or false?</p><ol><li>The delivery hasn’t arrived yet.<br>  True[False]</li><li>Andrea is having cash flow issues and needs a payment extension.<br>  [True]False</li><li>Andrea usually asks for an extension of the payment terms.<br>  True[False]</li><li>Andrea has a new order to place, even bigger than the last one.<br>  True[False]</li><li>Junko can extend the payment terms on the last order to 60 days.<br>  [True]False</li><li>Junko will send Andrea an email confirmation.<br>  [True]False</li></ol></blockquote><blockquote><p>Are the sentences true or false?句子是对还错？</p><ol><li><p>The delivery hasn’t arrived yet.货还没到。<br>False错误</p></li><li><p>Andrea is having cash flow issues and needs a payment extension.</p><p>安德里亚 (Andrea) 遇到现金流问题，需要延期付款。<br>True正确</p></li><li><p>Andrea usually asks for an extension of the payment terms.</p><p>安德里亚通常会要求延长付款期限。<br>False错误</p></li><li><p>Andrea has a new order to place, even bigger than the last one.</p><p>安德里亚有一个新订单要下，甚至比上一个订单还要大。<br>False错误</p></li><li><p>Junko can extend the payment terms on the last order to 60 days.</p><p>Junko 可以将最后订单的付款期限延长至 60 天。<br>True正确</p></li><li><p>Junko will send Andrea an email confirmation.</p><p>Junko 将向 Andrea 发送一封确认电子邮件。<br>True正确</p></li></ol></blockquote><h4 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h4><img src="/2024/03/23/b1-listening-01-phone-call-customer/image-20240322095852737.png" class="" title="image-20240322095852737">]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>listening - B1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式面试题汇总</title>
    <link href="/2024/02/28/quiz-design-pattern/"/>
    <url>/2024/02/28/quiz-design-pattern/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式面试题汇总"><a href="#设计模式面试题汇总" class="headerlink" title="设计模式面试题汇总"></a>设计模式面试题汇总</h1><h2 id="软件设计原则有哪些？"><a href="#软件设计原则有哪些？" class="headerlink" title="软件设计原则有哪些？"></a>软件设计原则有哪些？</h2><p>常⽤的⾯向对象设计原则包括7个，这些原则并不是孤⽴存在的，它们相互依赖，相互补充。</p><ul><li>开闭原则（Open Closed Principle，OCP）</li><li>单⼀职责原则（Single Responsibility Principle, SRP)</li><li>⾥⽒替换原则（Liskov Substitution Principle，LSP） </li><li>依赖倒置原则（Dependency Inversion Principle，DIP）</li><li>接⼝隔离原则（Interface Segregation Principle，ISP）</li><li>合成&#x2F;聚合复⽤原则（Composite&#x2F;Aggregate Reuse Principle， C&#x2F;ARP）</li><li>最少知识原则（Least Knowledge Principle，LKP）或者迪⽶特法则（Law of Demeter，LOD）</li></ul><table><thead><tr><th>设计原则</th><th>名称简单定义</th></tr></thead><tbody><tr><td>开闭原则</td><td>对扩展开放，对修改关闭</td></tr><tr><td>单一职责原则</td><td>一个类只负责一个功能领域中的相应职责</td></tr><tr><td>里氏替换原则</td><td>所有引用基类的地方必须能透明地使用其子类的对象</td></tr><tr><td>依赖倒置原则</td><td>依赖于抽象，不能依赖于具体实现</td></tr><tr><td>接口隔离原则</td><td>类之间的依赖关系应该建立在最小的接口上</td></tr><tr><td>合成&#x2F;聚合复用原则</td><td>尽量使用合成&#x2F;聚合，而不是通过继承达到复用的目的</td></tr><tr><td>迪米特法则</td><td>一个软件实体应当尽可能少的与其他实体发生相互作用</td></tr></tbody></table><h2 id="什么是设计模式？"><a href="#什么是设计模式？" class="headerlink" title="什么是设计模式？"></a>什么是设计模式？</h2><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的⾯向对象的软件开发r人员所采用。设计模式是软件开发⼈员在软件开发过程中⾯临的⼀般问题的解决方案。这些解决方案是众多软件开发⼈员经过相当⻓的⼀段时间的试验和错误总结出来的。 </p><p>设计模式是⼀套被反复使⽤的、多数⼈知晓的、经过分类编⽬的、代码设计经验的总结。使⽤设计模式是为了重⽤代码、让代码更容易被他⼈理 解、保证代码可靠性。 毫⽆疑问，设计模式于⼰于他⼈于系统都是多赢的，设计模式使代码编制真正⼯程化，设计模式是软件⼯程的基⽯，如同⼤厦的⼀块块砖⽯⼀样。项⽬中合理地运⽤设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了</p><p>⼀个在我们周围不断重复发⽣的问题，以及该问题的核⼼解决方案，这也是设计模式能被⼴泛应⽤的原因。</p><h1 id="设计模式的分类了解吗"><a href="#设计模式的分类了解吗" class="headerlink" title="设计模式的分类了解吗?"></a>设计模式的分类了解吗?</h1><ul><li><strong>创建型：</strong> 在创建对象的同时隐藏创建逻辑，不使⽤ new 直接实例化对象，程序在判断需要创建哪些对象时更灵活。包括⼯⼚&#x2F;抽象⼯⼚&#x2F;单例&#x2F;建造者&#x2F;原型模式。</li><li><strong>结构型：</strong> 通过类和接⼝间的继承和引⽤实现创建复杂结构的对象。包括适配器&#x2F;桥接模式&#x2F;过滤器&#x2F;组合&#x2F;装饰器&#x2F;外观&#x2F;享元&#x2F;代理模式。</li><li><strong>⾏为型：</strong> 通过类之间不同通信方式实现不同⾏为。包括责任链&#x2F;命名&#x2F;解释器&#x2F;迭代器&#x2F;中介者&#x2F;备忘录&#x2F;观察者&#x2F;状态&#x2F;策略&#x2F;模板&#x2F;访问者模式。</li></ul><h2 id="你知道哪些设计模式？"><a href="#你知道哪些设计模式？" class="headerlink" title="你知道哪些设计模式？"></a>你知道哪些设计模式？</h2><img src="/2024/02/28/quiz-design-pattern/clip_image016.jpg" class="" title="img"><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="说一说简单工厂模式"><a href="#说一说简单工厂模式" class="headerlink" title="说一说简单工厂模式"></a>说一说简单工厂模式</h3><p>简单⼯⼚模式指由⼀个⼯⼚对象来创建实例，客户端不需要关注创建逻辑，只需提供传⼊⼯⼚的参数。</p><p> UML 类图如下：</p><img src="/2024/02/28/quiz-design-pattern/clip_image018.jpg" class="" title="img"><p>适⽤于⼯⼚类负责创建对象较少的情况，缺点是如果要增加新产品，就需要修改⼯⼚类的判断逻辑，违背开闭原则，且产品多的话会使⼯⼚类⽐较复杂。</p><p><code>Calendar</code>抽象类的<code>getInstance</code>⽅法，调⽤<code>createCalendar </code>⽅法根据不同的地区参数创建不同的⽇历对象。<br>Spring 中的<code>BeanFactory</code> 使⽤简单⼯⼚模式，根据传⼊⼀个唯⼀的标识来获得<code> Bean</code> 对象。</p><h3 id="⼯⼚方法模式了解吗？"><a href="#⼯⼚方法模式了解吗？" class="headerlink" title="⼯⼚方法模式了解吗？"></a>⼯⼚方法模式了解吗？</h3><p>和简单⼯⼚模式中⼯⼚负责⽣产所有产品相⽐，⼯⼚方法模式将⽣成具体产品的任务分发给具体的产品⼯⼚。</p><p> UML 类图如下：</p><img src="/2024/02/28/quiz-design-pattern/clip_image025.jpg" class="" title="img"> <p>也就是定义⼀个抽象⼯⼚，其定义了产品的⽣产接⼝，但不负责具体的产品，将⽣产任务交给不同的派⽣类⼯⼚。这样不⽤通过指定类型来创建对象了。</p><h3 id="抽象⼯⼚模式了解吗？"><a href="#抽象⼯⼚模式了解吗？" class="headerlink" title="抽象⼯⼚模式了解吗？"></a>抽象⼯⼚模式了解吗？</h3><p>简单⼯⼚模式和⼯⼚方法模式不管⼯⼚怎么拆分抽象，都只是针对⼀类产品，如果要⽣成另⼀种产品，就⽐较难办了！</p><p> 抽象⼯⼚模式通过在<code>AbstarctFactory</code>中增加创建产品的接⼝，并在具体⼦⼯⼚中实现新加产品的创建，当然前提是⼦⼯⼚⽀持⽣产该产品。否则继承的这个接⼝可以什么也不⼲。</p><p>UML 类图如下：</p><img src="/2024/02/28/quiz-design-pattern/clip_image028.jpg" class="" title="img"> <p>从上⾯类图结构中可以清楚的看到如何在⼯⼚方法模式中通过增加新产品接⼝来实现产品的增加的。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="什么是单例模式？单例模式的特点是什么？"><a href="#什么是单例模式？单例模式的特点是什么？" class="headerlink" title="什么是单例模式？单例模式的特点是什么？"></a>什么是单例模式？单例模式的特点是什么？</h3><p>单例模式属于创建型模式，⼀个单例类在任何情况下都只存在⼀个实例，构造方法必须是私有的、由⾃⼰创建⼀个静态变量存储实例，对外提供⼀个静态公有方法获取实例。</p><p>优点是内存中只有⼀个实例，减少了开销，尤其是频繁创建和销毁实例的情况下并且可以避免对资源的多重占⽤。缺点是没有抽象层，难以扩展，与单⼀职责原则冲突。</p><h3 id="单例模式的常⻅写法有哪些？"><a href="#单例模式的常⻅写法有哪些？" class="headerlink" title="单例模式的常⻅写法有哪些？"></a>单例模式的常⻅写法有哪些？</h3><h4 id="饿汉式，线程安全"><a href="#饿汉式，线程安全" class="headerlink" title="饿汉式，线程安全"></a>饿汉式，线程安全</h4><p>饿汉式单例模式，顾名思义，类⼀加载就创建对象，这种方式⽐较常⽤，但容易产⽣垃圾对象，浪费内存空间。</p><ul><li>优点：线程安全，没有加锁，执⾏效率较⾼</li><li>缺点：不是懒加载，类加载时就初始化，浪费内存空间</li></ul><blockquote><p>懒加载 （lazy loading）：使⽤的时候再创建对象</p></blockquote><p>饿汉式单例是如何保证线程安全的呢？它是基于类加载机制避免了多线程的同步问题，但是如果类被不同的类加载器加载就会创建不同的实例。</p><h4 id="代码实现，以及使用反射破坏单例："><a href="#代码实现，以及使用反射破坏单例：" class="headerlink" title="代码实现，以及使用反射破坏单例："></a>代码实现，以及使用反射破坏单例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 饿汉式单例测试</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@className</span>: Singleton</span><br><span class="hljs-comment">* <span class="hljs-doctag">@date</span>: 2021/6/7 14:32</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-comment">// 1、私有化构造⽅法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-comment">// 2、定义⼀个静态变量指向⾃⼰类型</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>    <span class="hljs-comment">// 3、对外提供⼀个公共的⽅法获取实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使⽤反射破坏单例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 使⽤反射破坏单例</span><br>        <span class="hljs-comment">// 获取空参构造⽅法</span><br>        Constructor&lt;Singleton&gt; declaredConstructor = Singleton.class.getDeclaredConstructor(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 设置强制访问</span><br>        declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 创建实例</span><br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">singleton</span> <span class="hljs-operator">=</span> declaredConstructor.newInstance();<br>        System.out.println(<span class="hljs-string">&quot;反射创建的实例&quot;</span> + singleton);<br>        System.out.println(<span class="hljs-string">&quot;正常创建的实例&quot;</span> + Singleton.getInstance());<br>        System.out.println(<span class="hljs-string">&quot;正常创建的实例&quot;</span> + Singleton.getInstance());<br>    &#125;<br>&#125;    <br></code></pre></td></tr></table></figure><p> 输出结果如下：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">反射创建的实例<br>com.example.spring.demo.single.Singleton@6267c3bb<br>正常创建的实例<br>com.example.spring.demo.single.Singleton@533ddba<br>正常创建的实例<br>com.example.spring.demo.single.Singleton@533ddba<br></code></pre></td></tr></table></figure><h4 id="懒汉式，线程不安全"><a href="#懒汉式，线程不安全" class="headerlink" title="懒汉式，线程不安全"></a>懒汉式，线程不安全</h4><p>这种方式在单线程下使⽤没有问题，对于多线程是⽆法保证单例的，这⾥列出来是为了和后⾯使⽤锁保证线程安全的单例做对⽐。</p><ul><li>优点：懒加载</li><li>缺点：线程不安全</li></ul><p>代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 懒汉式单例，线程不安全</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@className</span>: Singleton</span><br><span class="hljs-comment">* <span class="hljs-doctag">@date</span>: 2021/6/7 14:32</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-comment">// 1、私有化构造⽅法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123; &#125;<br>    <span class="hljs-comment">// 2、定义⼀个静态变量指向⾃⼰类型</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-comment">// 3、对外提供⼀个公共的⽅法获取实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 判断为 null 的时候再创建对象</span><br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>        instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使⽤多线程破坏单例，测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;多线程创建的单例：&quot;</span> + Singleton.getInstance());<br>            &#125;).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">多线程创建的单例：<br>com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.spring</span><span class="hljs-selector-class">.demo</span><span class="hljs-selector-class">.single</span>.Singleton@<span class="hljs-number">18396</span>bd5<br>多线程创建的单例：<br>com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.spring</span><span class="hljs-selector-class">.demo</span><span class="hljs-selector-class">.single</span>.Singleton@<span class="hljs-number">7</span>f23db98<br>多线程创建的单例：<br>com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.spring</span><span class="hljs-selector-class">.demo</span><span class="hljs-selector-class">.single</span>.Singleton@<span class="hljs-number">5000</span>d44<br></code></pre></td></tr></table></figure><h4 id="懒汉式，线程安全"><a href="#懒汉式，线程安全" class="headerlink" title="懒汉式，线程安全"></a>懒汉式，线程安全</h4><p>懒汉式单例如何保证线程安全呢？通过<code>synchronized</code>关键字加锁保证线程安全，<code>synchronized</code>可以添加在⽅法上⾯，也可以添加在代码块上⾯，这⾥演示添加在⽅法上⾯，存在的问题是每⼀次调⽤<code>getInstance</code>获取实例时都需要加锁和释放锁，这样是⾮常影响性能的。</p><ul><li>优点：懒加载，线程安全</li><li>缺点：效率较低</li></ul><p>代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 懒汉式单例，⽅法上⾯添加 synchronized 保证线程安全</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@className</span>: Singleton</span><br><span class="hljs-comment">* <span class="hljs-doctag">@date</span>: 2021/6/7 14:32</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-comment">// 1、私有化构造⽅法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123; &#125;<br>    <span class="hljs-comment">// 2、定义⼀个静态变量指向⾃⼰类型</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-comment">// 3、对外提供⼀个公共的⽅法获取实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>        instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="双重检查锁（DCL，-即-double-checked-locking）"><a href="#双重检查锁（DCL，-即-double-checked-locking）" class="headerlink" title="双重检查锁（DCL， 即 double-checked locking）"></a>双重检查锁（DCL， 即 double-checked locking）</h4><p>实现代码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 双重检查锁（DCL， 即 double-checked locking）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span>: Singleton</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/6/7 14:32</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br>    <span class="hljs-comment">// 1、私有化构造⽅法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">// 2、定义⼀个静态变量指向⾃⼰类型</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton instance;<br><br>    <span class="hljs-comment">// 3、对外提供⼀个公共的⽅法获取实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 第⼀重检查是否为 null</span><br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 使⽤ synchronized 加锁</span><br>            <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;<br>                <span class="hljs-comment">// 第⼆重检查是否为 null</span><br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// new 关键字创建对象不是原⼦操作</span><br>                    instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点：懒加载，线程安全，效率较⾼</li><li>缺点：实现较复杂</li></ul><p>这⾥的双重检查是指两次⾮空判断，锁指的是 synchronized 加锁，为什么要进⾏双重判断，其实很简单，第⼀重判断，如果实例已经存在，那么就不再需要进⾏同步操作，⽽是直接返回这个实例，如果没有创建，才会进⼊同步块，同步块的⽬的与之前相同，⽬的是为了防⽌有多个线程同时调⽤时，导致⽣成多个实例，有了同步块，每次只能有⼀个线程调⽤访问同步块内容，当第⼀个抢到锁的调⽤获取了实例之后，这个实例就会被创 建，之后的所有调⽤都不会进⼊同步块，直接在第⼀重判断就返回了单例。</p><p> 关于内部的第⼆重空判断的作⽤，当多个线程⼀起到达锁位置时，进⾏锁竞争，其中⼀个线程获取锁，如果是第⼀次进⼊则为 null，会进⾏单例对象的创建，完成后释放锁，其他线程获取锁后就会被空判断拦截，直接返回已创建的单例对象。</p><p>其中最关键的⼀个点就是<code>volatile</code>关键字的使⽤，关于<code>volatile</code>的详细介绍可以直接搜索 volatile 关键字即可，有很多写的⾮常好的⽂章，这⾥不做详细介绍，简单说明⼀下，双重检查锁中使⽤<code>volatile</code>的两个重要特性：<strong>可⻅性、禁⽌指令重排序</strong></p><p>这⾥为什么要使⽤<code>volatile</code>？</p><p>这是因为<code>new</code>关键字创建对象不是原⼦操作，创建⼀个对象会经历下⾯的步骤：</p><ol><li><p>在堆内存开辟内存空间</p></li><li><p>调⽤构造方法，初始化对象</p></li><li><p>引⽤变量指向堆内存空间</p></li></ol><p> 对应字节码指令如下：</p><img src="/2024/02/28/quiz-design-pattern/clip_image051.jpg" class="" title="img"><p>为了提⾼性能，编译器和处理器常常会对既定的代码执⾏顺序进⾏指令重排序，从源码到最终执⾏指令会经历如下流程： </p><p>源码编译器优化重排序指令级并⾏重排序内存系统重排序最终执⾏指令序列，所以经过指令重排序之后，创建对象的执⾏顺序可能为<code>1 2 3</code>或者<code>1 3 2</code> ，因此当某个线程在乱序运⾏<code>1 3 2</code>指令的时候，引⽤变量指向堆内存空间，这个对象不为 null，但是没有初始化，其他线程有可能这个时候进⼊了<code>getInstance</code>的第⼀个 <code>if(instance == null)</code> 判断不为 nulll ，导致错误使⽤了没有初始化的⾮ null 实例，这样的话就会出现异常，这个就是著名的DCL 失效问题。</p><p>当我们在引⽤变量上⾯添加<code>volatile</code>关键字以后，会通过在创建对象指令的前后添加内存屏障来禁⽌指令重排序，就可以避免这个问题，⽽且对<code>volatile</code>修饰的变量的修改对其他任何线程都是可⻅的。</p><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>代码实现如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 静态内部类实现单例</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span>: Singleton</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/6/7 14:32</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br>    <span class="hljs-comment">// 1、私有化构造⽅法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">// 2、对外提供获取实例的公共⽅法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> InnerClass.INSTANCE;<br>    &#125;<br><br>    <span class="hljs-comment">// 定义静态内部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClass</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点：懒加载，线程安全，效率较⾼，实现简单</li></ul><p>静态内部类单例是如何实现懒加载的呢？⾸先，我们先了解下类的加载时机。</p><p>虚拟机规范要求有且只有 5 种情况必须⽴即对类进⾏初始化（加载、验证、准备需要在此之前开始）：</p><ol><li>遇到<code>new</code>、<code>getstatic</code>、<code>putstatic</code>、<code>invokestatic</code>这 4 条字节码指令时。⽣成这 4 条指令最常⻅的 Java 代码场景是：使⽤<code>new</code>关键字实例化对象的时候、读取或设置⼀个类的静态字段（final 修饰除外，被final 修饰的静态字段是常量，已在编译期把结果放⼊常量池）的时候，以及调⽤⼀个类的静态⽅法的时候。</li><li>使⽤<code>java.lang.reflect</code>包⽅法对类进⾏反射调⽤的时候。</li><li>当初始化⼀个类的时候，如果发现其⽗类还没有进⾏过初始化，则需要先触发其⽗类的初始化。</li><li>当虚拟机启动时，⽤户需要指定⼀个要执⾏的主类（包含 main()的那个类），虚拟机会先初始化这个主类。</li><li>当使⽤ JDK 1.7 的动态语⾔⽀持时，如果⼀个<code>java.lang.invoke.MethodHandle</code>实例最后的解析结果是<br><code>REF_getStatic</code> 、<code>REF_putStatic</code>、<code>REF_invokeStatic</code>的⽅法句柄，则需要先触发这个⽅法句柄所对应的类的初始化。</li></ol><p> 这 5 种情况被称为是类的主动引⽤，注意，这⾥《虚拟机规范》中使⽤的限定词是 “<strong>有且仅有</strong>“，那么，除此之外的所有引⽤类都不会对类进⾏初始化，称为被动引⽤。静态内部类就属于被动引⽤的情况。</p><p>当 getInstance()⽅法被调⽤时，InnerClass 才在 Singleton 的运⾏时常量池⾥，把符号引⽤替换为直接引⽤，这时静态对象 INSTANCE 也真正被创建，然后再被 getInstance()⽅法返回出去，这点同饿汉模式。</p><p>那么 INSTANCE 在创建过程中⼜是如何保证线程安全的呢？在《深⼊理解 JAVA 虚拟机》中，有这么⼀句话：虚拟机会保证⼀个类的 <clinit>() ⽅法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化⼀个类，那么只会有⼀个线程去执⾏这个类的 <clinit>() ⽅法，其他线程都需要阻塞等待，直到活动线程执⾏<clinit>() ⽅法完毕。如果在⼀个类的 <clinit>() ⽅法中有耗时很⻓的操作，就可能造成多个进程阻塞(需要注意的是，其他线程虽然会被阻塞，但如果执⾏<clinit>() ⽅法后，其他线程唤醒之后不会再次进⼊<clinit>() ⽅法。同⼀个加载器下，⼀个类型只会初始化⼀次。)，在实际应⽤中，这种阻塞往往是很隐蔽的。</p><p>从上⾯的分析可以看出 INSTANCE 在创建过程中是线程安全的，所以说静态内部类形式的单例可保证线程安全，也能保证单例的唯⼀性，同时也延迟了单例的实例化。</p><h4 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h4><p>代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 枚举实现单例</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span>: Singleton</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/6/7 14:32</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    INSTANCE;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">(String str)</span> &#123;<br>        System.out.println(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：简单，⾼效，线程安全，可以避免通过反射破坏枚举单例</p><p>枚举在 Java 中与普通类⼀样，都能拥有字段与方法，⽽且枚举实例创建是线程安全的，在任何情况下，它都是⼀个单例，可以直接通过如下方式调</p><p>⽤获取实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Singleton</span> <span class="hljs-variable">singleton</span> <span class="hljs-operator">=</span> Singleton.INSTANCE;<br></code></pre></td></tr></table></figure><p>使⽤下⾯的命令反编译枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">javap Singleton.class<br></code></pre></td></tr></table></figure><p>得到如下内容</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Compiled from <span class="hljs-string">&quot;Singleton.java&quot;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.spring.demo.singleton.Singleton<br><span class="hljs-keyword">extends</span><br><span class="hljs-title class_">java</span>.lang.Enum&lt;com.spring.demo.singleton.Singleton&gt; &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span><br>com.spring.demo.singleton.Singleton INSTANCE;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> com.spring.demo.singleton.Singleton[]<br>values();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> com.spring.demo.singleton.Singleton<br><span class="hljs-title function_">valueOf</span><span class="hljs-params">(java.lang.String)</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">(java.lang.String)</span>;<br><span class="hljs-keyword">static</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>从枚举的反编译结果可以看到，INSTANCE 被<code>static final</code>修饰，所以可以通过类名直接调⽤，<strong>并且创建对象的实例是在静态代码块中创建的</strong>，因为 static 类型的属性会在类被加载之后被初始化，当⼀个 Java 类第⼀次被真正使⽤到的时候静态资源被初始化、Java 类的加载和初始化过程都是线程安全的，所以创建⼀个 enum 类型是线程安全的。 </p><p>通过反射破坏枚举，实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">singleton</span> <span class="hljs-operator">=</span> Singleton.INSTANCE;<br>        singleton.doSomething(<span class="hljs-string">&quot;hello enum&quot;</span>);<br>        <span class="hljs-comment">// 尝试使⽤反射破坏单例</span><br>        <span class="hljs-comment">// 枚举类没有空参构造⽅法，反编译后可以看到枚举有⼀个两个参数的构造⽅法</span><br>        Constructor&lt;Singleton&gt; declaredConstructor =<br>            Singleton.class.getDeclaredConstructor(String.class,<br>                <span class="hljs-type">int</span>.class);<br>        <span class="hljs-comment">// 设置强制访问</span><br>        declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 创建实例，这⾥会报错，因为⽆法通过反射创建枚举的实例</span><br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">enumSingleton</span> <span class="hljs-operator">=</span> declaredConstructor.newInstance();<br>        System.out.println(enumSingleton);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运⾏结果报如下错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span><br>java.lang.IllegalArgumentException: Cannot reflectively<br>create <span class="hljs-keyword">enum</span> <span class="hljs-title class_">objects</span><br>at<br>java.base/java.lang.reflect.Constructor.newInstanceWithC<br><span class="hljs-title function_">aller</span><span class="hljs-params">(Constructor.java:<span class="hljs-number">492</span>)</span><br>at<br>java.base/java.lang.reflect.Constructor.newInstance(Cons<br>tructor.java:<span class="hljs-number">480</span>)<br>at com.spring.demo.singleton.Test.main(Test.java:<span class="hljs-number">24</span>)<br></code></pre></td></tr></table></figure><p>看反射创建实例的<code>newInstance()</code>方法，有如下判断：</p> <img src="/2024/02/28/quiz-design-pattern/image-20240228111756191.png" class="" title="image-20240228111756191"><p>所以⽆法通过反射创建枚举的实例。</p><p> ⼤家可以在 <a href="https://javaguide.cn/">JavaGuide</a> 上找到对应双重校验锁实现对象单例的解答。</p><img src="/2024/02/28/quiz-design-pattern/image-20240228111826552.png" class="" title="image-20240228111826552"><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id="适配器模式了解吗？"><a href="#适配器模式了解吗？" class="headerlink" title="适配器模式了解吗？"></a>适配器模式了解吗？</h3><p>在我们的应⽤程序中我们可能需要将两个不同接⼝的类来进⾏通信，在不修改这两个的前提下我们可能会需要某个中间件来完成这个衔接的过程。这个中间件就是适配器。所谓适配器模式就是将⼀个类的接⼝，转换成客户期望的另⼀个接⼝。它可以让原本两个不兼容的接⼝能够⽆缝完成对 接。</p><p>作为中间件的适配器将⽬标类和适配者解耦，增加了类的透明性和可复⽤性。</p><h4 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h4><p><strong>原理：</strong>通过类继承实现适配，继承<code>Target</code>的接⼝，继承<code>Adaptee</code>的实现</p> <img src="/2024/02/28/quiz-design-pattern/image-20240228112407657.png" class="" title="image-20240228112407657"><h4 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h4><p><strong>原理：</strong>通过类对象组合实现适配</p> <img src="/2024/02/28/quiz-design-pattern/image-20240228112233636.png" class="" title="image-20240228112233636"><ul><li><p><strong>Target:</strong> 定义 Client 真正需要使⽤的接⼝。</p></li><li><p><strong>Adaptee:</strong> 其中定义了⼀个已经存在的接⼝，也是我们需要进⾏适配的接⼝。</p></li><li><p><strong>Adapter:</strong> 对 Adaptee 和 Target 的接⼝进⾏适配，保证对 target 中接⼝的调⽤可以间接转换为对 Adaptee 中接⼝进⾏调⽤。</p></li></ul><h4 id="适配器模式的优缺点"><a href="#适配器模式的优缺点" class="headerlink" title="适配器模式的优缺点"></a>适配器模式的优缺点</h4><ul><li><p>优点： </p><ol><li>提⾼了类的复⽤；</li><li>组合若⼲关联对象形成对外提供统⼀服务的接⼝；</li><li>扩展性、灵活性好。</li></ol></li><li><p>缺点： </p><ol><li>过多使⽤适配模式容易造成代码功能和逻辑意义的混淆。</li><li>部分语⾔对继承的限制，可能⾄多只能适配⼀个适配者类，⽽且⽬标类必须是抽象类。</li></ol></li></ul><h2 id="代理模式（proxy-pattern）"><a href="#代理模式（proxy-pattern）" class="headerlink" title="代理模式（proxy pattern）"></a>代理模式（proxy pattern）</h2><h3 id="什么是代理模式？"><a href="#什么是代理模式？" class="headerlink" title="什么是代理模式？"></a>什么是代理模式？</h3><p>代理模式的本质是⼀个中间件，主要⽬的是解耦合服务提供者和使⽤者。使⽤者通过代理间接的访问服务提供者，便于后者的封装和控制。是⼀种结构性模式。</p><p>下⾯是 GoF 介绍典型的代理模式 UML 类图</p> <img src="/2024/02/28/quiz-design-pattern/clip_image095.jpg" class="" title="img"><p><strong>Subject:</strong> 定义 RealSubject 对外的接⼝，且这些接⼝必须被 Proxy 实现，这样外部调⽤ proxy 的接⼝最终都被转化为对 realsubject 的调⽤。</p><p><strong>RealSubject:</strong> 真正的⽬标对象。</p><p><strong>Proxy:</strong> ⽬标对象的代理，负责控制和管理⽬标对象，并间接地传递外部对⽬标对象的访问。</p><ul><li>Remote Proxy: 对本地的请求以及参数进⾏序列化，向远程对象发送请求，并对响应结果进⾏反序列化，将最终结果反馈给调⽤者；</li><li>Virtual Proxy: 当⽬标对象的创建开销⽐较⼤的时候，可以使⽤延迟或者异步的方式创建⽬标对象；</li><li>Protection Proxy: 细化对⽬标对象访问权限的控制；</li></ul><h4 id="静态代理和动态代理的区别"><a href="#静态代理和动态代理的区别" class="headerlink" title="静态代理和动态代理的区别"></a>静态代理和动态代理的区别</h4><ol><li><p><strong>灵活性</strong> ：动态代理更加灵活，不需要必须实现接⼝，可以直接代理实现类，并且可以不需要针对每个⽬标类都创建⼀个代理类。另外，静态代理中，接⼝⼀旦新增加方法，⽬标对象和代理对象都要进⾏修改，这是⾮常麻烦的！</p></li><li><p><strong>JVM</strong> <strong>层⾯</strong> ：静态代理在编译时就将接⼝、实现类、代理类这些都变成了⼀个个实际的 class ⽂件。⽽动态代理是在运⾏时动态⽣成类字节码，并加载到 JVM 中的。</p></li></ol><p> ⼤家可以在 <a href="https://javaguide.cn/">JavaGuide</a> 上找到详细的解答。</p><img src="/2024/02/28/quiz-design-pattern/image-20240228112809320.png" class="" title="image-20240228112809320"><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="说⼀说观察者模式"><a href="#说⼀说观察者模式" class="headerlink" title="说⼀说观察者模式"></a>说⼀说观察者模式</h3><p>观察者模式主要⽤于处理对象间的⼀对多的关系，是⼀种对象⾏为模式。该模式的实际应⽤场景⽐较容易确认，当⼀个对象状态发⽣变化时，所有该对象的关注者均能收到状态变化通知，以进⾏相应的处理。</p><p>下⾯是 GoF 介绍的典型的类观察者模式的 UML 类图：</p> <img src="/2024/02/28/quiz-design-pattern/image-20240228112903140.png" class="" title="image-20240228112903140"><p> <strong>Subject:</strong> 抽象被观察者，仅提供注册和删除观察者对象的接⼝声明。</p><p> <strong>ConcreteSubject:</strong> 具体被观察者对象，该对象中收集了所有需要被通知的观察者，并可以动态的增删集合中的观察者。当其状态发⽣变化时会通知所有观察者对象。</p><p> <strong>Observer:</strong> 抽象观察者，为所有观察者定义获得通知的统⼀接⼝；</p><p> <strong>ConcreteObserver:</strong> 观察者对象，其关注对象为 Subject，能接受 Subject 变化时发出的通知并更新⾃身状态。</p><h3 id="观察者模式的优缺点"><a href="#观察者模式的优缺点" class="headerlink" title="观察者模式的优缺点"></a>观察者模式的优缺点</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ol><li><p>被观察者和观察者之间是抽象耦合的；</p></li><li><p>耦合度较低，两者之间的关联仅仅在于消息的通知；</p></li><li><p>被观察者⽆需关⼼他的观察者；</p></li><li><p>⽀持⼴播通信；</p></li></ol><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ol><li><p>观察者只知道被观察对象发⽣了变化，但不知变化的过程和缘由；</p></li><li><p>观察者同时也可能是被观察者，消息传递的链路可能会过⻓，完成所有通知花费时间较多；</p></li><li><p>如果观察者和被观察者之间产⽣循环依赖，或者消息传递链路形成闭环，会导致⽆限循环；</p></li></ol><h3 id="你的项⽬是怎么⽤的观察者模式？"><a href="#你的项⽬是怎么⽤的观察者模式？" class="headerlink" title="你的项⽬是怎么⽤的观察者模式？"></a>你的项⽬是怎么⽤的观察者模式？</h3><p>在⽀付场景下，⽤户购买⼀件商品，当⽀付成功之后三方会回调⾃身，在这个时候系统可能会有很多需要执⾏的逻辑（如：更新订单状态，发送邮件通知，赠送礼品…），这些逻辑之间并没有强耦合，因此天然适合使⽤观察者模式去实现这些功能，当有更多的操作时，只需要添加新的观察者就能实现，完美实现了对修改关闭，对扩展开放的开闭原则。</p><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><h3 id="什么是装饰器模式？"><a href="#什么是装饰器模式？" class="headerlink" title="什么是装饰器模式？"></a>什么是装饰器模式？</h3><p>装饰器模式主要对现有的类对象进⾏包裹和封装，以期望在不改变类对象及其类定义的情况下，为对象添加额外功能。是⼀种对象结构型模式。需要注意的是，该过程是通过调⽤被包裹之后的对象完成功能添加的，⽽不是直接修改现有对象的⾏为，相当于增加了中间层。</p><p>下⾯是 GoF 介绍的典型的装饰器模式的 UML 类图：</p> <img src="/2024/02/28/quiz-design-pattern/image-20240228113107067.png" class="" title="image-20240228113107067"><p> <strong>Component:</strong> 对象的接⼝类，定义装饰对象和被装饰对象的共同接⼝；</p><p> <strong>ConcreteComponent:</strong> 被装饰对象的类定义；</p><p> <strong>Decorator:</strong> 装饰对象的抽象类，持有⼀个具体的被修饰对象，并实现接⼝类继承的公共接⼝；</p><p><strong>ConcreteDecorator:</strong>   具体的装饰器，负责往被装饰对象添加额外的功能；</p><h3 id="讲讲装饰器模式的应⽤场景"><a href="#讲讲装饰器模式的应⽤场景" class="headerlink" title="讲讲装饰器模式的应⽤场景"></a>讲讲装饰器模式的应⽤场景</h3><p>如果你希望在⽆需修改代码的情况下即可使⽤对象， 且希望在运⾏时为对象新增额外的⾏为， 可以使⽤装饰模式。 </p><p>装饰能将业务逻辑组织为层次结构， 你可为各层创建⼀个装饰， 在运⾏时将各种不同逻辑组合成对象。 由于这些对象都遵循通⽤接⼝， 客户端代码能以相同的方式使⽤这些对象。</p><p> 如果⽤继承来扩展对象⾏为的方案难以实现或者根本不可⾏， 你可以使⽤该模式。</p><p>许多编程语⾔使⽤<code>final</code>最终关键字来限制对某个类的进⼀步扩展。 复⽤最终类已有⾏为的唯⼀方法是使⽤装饰模式： ⽤封装器对其进⾏封装。</p><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><h3 id="什么是责任链模式？"><a href="#什么是责任链模式？" class="headerlink" title="什么是责任链模式？"></a>什么是责任链模式？</h3><p>⼀个请求沿着⼀条“链”传递，直到该“链”上的某个处理者处理它为⽌。</p><p> ⼀个请求可以被多个处理者处理或处理者未明确指定时。</p><p>责任链模式⾮常简单异常好理解，相信我它⽐单例模式还简单易懂，其应⽤也⼏乎⽆所不在，甚⾄可以这么说,从你敲代码的第⼀天起你就不知不觉⽤过了它最原始的裸体结构：<code>switch-case</code>语句。</p><h3 id="讲讲责任链模式的应⽤场景"><a href="#讲讲责任链模式的应⽤场景" class="headerlink" title="讲讲责任链模式的应⽤场景"></a>讲讲责任链模式的应⽤场景</h3><ul><li>当程序需要使⽤不同方式处理不同种类请求， ⽽且请求类型和顺序预先未知时， 可以使⽤责任链模式。该模式能将多个处理者连接成⼀条链。接收到请求后，它会 “询问” 每个处理者是否能够对其进⾏处理。这样所有处理者都有机会来处理请求。</li><li>当必须按顺序执⾏多个处理者时，可以使⽤该模式。⽆论你以何种顺序将处理者连接成⼀条链， 所有请求都会严格按照顺序通过链上的处理者。</li></ul><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="什么是策略模式？"><a href="#什么是策略模式？" class="headerlink" title="什么是策略模式？"></a>什么是策略模式？</h3><p>策略模式（Strategy Pattern）属于对象的⾏为模式。其⽤意是针对⼀组算法，将每⼀个算法封装到具有共同接⼝的独⽴的类中，从⽽使得它们可以相互替换。策略模式使得算法可以在不影响到客户端的情况下发⽣变化。其主要⽬的是通过定义相似的算法，替换 if else 语句写法，并且可以随时相互替换。</p><h3 id="策略模式有什么好处？"><a href="#策略模式有什么好处？" class="headerlink" title="策略模式有什么好处？"></a>策略模式有什么好处？</h3><p>定义了⼀系列封装了算法、⾏为的对象，他们可以相互替换。</p><p>举例： <code>java.util.List</code> 就是定义了⼀个增（ add ）、删（ remove ）、改（ set ）、查（ indexOf ）策略，⾄于实现这个策略的<code>ArrayList</code> 、<code>LinkedList</code>等类，只是在具体实现时采⽤了不同的算法。但因为它们策略⼀样，不考虑速度的情况下，使⽤时完全可以互相替换使⽤。</p><h2 id="Spring-使⽤了哪些设计模式？"><a href="#Spring-使⽤了哪些设计模式？" class="headerlink" title="Spring 使⽤了哪些设计模式？"></a>Spring 使⽤了哪些设计模式？</h2><p>Spring 框架中⽤到了哪些设计模式？</p><p> <strong>⼯⼚设计模式</strong> : Spring 使⽤⼯⼚模式通过<code>BeanFactory</code>，<code>ApplicationContext</code>创建 bean 对象。</p><p><strong>代理设计模式</strong> : Spring AOP 功能的实现。</p><p><strong>单例设计模式</strong> : Spring 中的 Bean 默认都是单例的。</p><p><strong>模板方法模式</strong> : Spring 中<code>jdbcTemplate</code>、<code>hibernateTemplate</code>等以Template 结尾的对数据库操作的类，它们就使⽤到了模板模式。</p><p><strong>包装器设计模式</strong> : 我们的项⽬需要连接多个数据库，⽽且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。</p><p><strong>观察者模式</strong><strong>:</strong> Spring 事件驱动模型就是观察者模式很经典的⼀个应⽤。</p><p><strong>适配器模式</strong> :Spring AOP 的增强或通知(Advice)使⽤到了适配器模式、Spring MVC 中也是⽤到了适配器模式适配<code>Controller</code>。</p><p>…… </p><p>⼤家可以在 <a href="https://javaguide.cn/">JavaGuide</a> 上找到详细的解答。</p><img src="/2024/02/28/quiz-design-pattern/clip_image116.jpg" class="" title="img"><h2 id="JDK-使⽤了哪些设计模式？"><a href="#JDK-使⽤了哪些设计模式？" class="headerlink" title="JDK 使⽤了哪些设计模式？"></a>JDK 使⽤了哪些设计模式？</h2><p>在软件⼯程中，设计模式（design pattern）是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案。以下是整理的⼏个在 JDK 库中常⽤的⼏个设计模式。 </p><h4 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h4><p> 这个模式将抽象和抽象操作的实现进⾏了解耦，这样使得抽象和实现可以独⽴地变化。</p><p>GOF 在提出桥梁模式的时候指出，桥梁模式的⽤意是”将抽象化 (Abstraction)与实现化(Implementation)脱耦，使得⼆者可以独⽴地变化”。这句话有三个关键词，也就是抽象化、实现化和脱耦。</p><p> 在 Java 应⽤中，对于桥接模式有⼀个⾮常典型的例⼦，就是应⽤程序使⽤ JDBC 驱动程序进⾏开发的方式。所谓驱动程序，指的是按照预先约定好的接⼝来操作计算机系统或者是外围设备的程序。</p><h4 id="适配器模式-1"><a href="#适配器模式-1" class="headerlink" title="适配器模式"></a>适配器模式</h4><p>⽤来把⼀个接⼝转化成另⼀个接⼝。使得原本由于接⼝不兼容⽽不能⼀起⼯作的那些类可以在⼀起⼯作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Arrays#asList()<br>java.io.InputStreamReader(InputStream)<br>java.io.OutputStreamWriter(OutputStream)<br></code></pre></td></tr></table></figure><h4 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h4><p>⼜叫做部分-整体模式，使得客户端看来单个对象和对象的组合是同等的。换句话说，某个类型的方法同时也接受⾃身类型作为参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Map#putAll(Map)<br>java.util.List#addAll(Collection)<br>java.util.Set#addAll(Collection)<br></code></pre></td></tr></table></figure><h4 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h4><p>动态的给⼀个对象附加额外的功能，这也是⼦类的⼀种替代方式。可以看到，在创建⼀个类型的时候，同时也传⼊同⼀类型的对象。这在 JDK ⾥随处可⻅，你会发现它⽆处不在，所以下⾯这个列表只是⼀⼩部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">java.io.BufferedInputStream(InputStream)<br>java.io.DataInputStream(InputStream)<br>java.io.BufferedOutputStream(OutputStream)<br>java.util.zip.ZipOutputStream(OutputStream)<br>java.util.Collections#checkedList|Map|Set|SortedSet|Sort<br>edMap<br></code></pre></td></tr></table></figure><h4 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h4><p>使⽤缓存来加速⼤量⼩对象的访问时间。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Integer#valueOf(<span class="hljs-type">int</span>)<br>java.lang.Boolean#valueOf(<span class="hljs-type">boolean</span>)<br>java.lang.Byte#valueOf(<span class="hljs-type">byte</span>)<br>java.lang.Character#valueOf(<span class="hljs-type">char</span>) <br></code></pre></td></tr></table></figure><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p>代理模式是⽤⼀个简单的对象来代替⼀个复杂的或者创建耗时的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.reflect.Proxy<br>RMI <br></code></pre></td></tr></table></figure><h4 id="抽象⼯⼚模式"><a href="#抽象⼯⼚模式" class="headerlink" title="抽象⼯⼚模式"></a>抽象⼯⼚模式</h4><p>抽象⼯⼚模式提供了⼀个协议来⽣成⼀系列的相关或者独⽴的对象，⽽不⽤指定具体对象的类型。它使得应⽤程序能够和使⽤的框架的具体实现进⾏解耦。这在 JDK 或者许多框架⽐如 Spring 中都随处可⻅。它们也很容易识别，⼀个创建新对象的方法，返回的却是接⼝或者抽象类的，就是抽象⼯⼚模式了。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Calendar#getInstance()<br>java.util.Arrays#asList()<br>java.util.ResourceBundle#getBundle()<br>java.sql.DriverManager#getConnection()<br>java.sql.Connection#createStatement()<br>java.sql.Statement#executeQuery()<br>java.text.NumberFormat#getInstance()<br>javax.xml.transform.TransformerFactory#newInstance()<br></code></pre></td></tr></table></figure><h4 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h4><p>定义了⼀个新的类来构建另⼀个类的实例，以简化复杂对象的创建。建造模式通常也使⽤方法链接来实现。</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs leaf">java.lang.StringBuilder<span class="hljs-punctuation">#</span><span class="hljs-keyword">append</span><span class="hljs-params">()</span><br>java.lang.StringBuffer<span class="hljs-punctuation">#</span><span class="hljs-keyword">append</span><span class="hljs-params">()</span><br>java.sql.PreparedStatement<br>javax.swing.GroupLayout.Group<span class="hljs-punctuation">#</span><span class="hljs-keyword">addComponent</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><h4 id="⼯⼚方法"><a href="#⼯⼚方法" class="headerlink" title="⼯⼚方法"></a>⼯⼚方法</h4><p>就是⼀个返回具体对象的方法。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Proxy#newProxyInstance()<br>java.lang.Object#toString()<br>java.lang.Class#newInstance()<br>java.lang.reflect.Array#newInstance()<br>java.lang.reflect.Constructor#newInstance()<br>java.lang.Boolean#valueOf(String)<br>java.lang.Class#forName()<br></code></pre></td></tr></table></figure><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><p> 使得类的实例能够⽣成⾃身的拷⻉。如果创建⼀个对象的实例⾮常复杂且耗时时，就可以使⽤这种模式，⽽不重新创建⼀个新的实例，你可以拷⻉</p><p>⼀个对象并直接修改它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Object#clone()<br>java.lang.Cloneable<br></code></pre></td></tr></table></figure><h4 id="单例模式-1"><a href="#单例模式-1" class="headerlink" title="单例模式"></a>单例模式</h4><p>⽤来确保类只有⼀个实例。Joshua Bloch 在 Effetive Java 中建议到，还有⼀种方法就是使⽤枚举。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Runtime#getRuntime()<br>java.awt.Toolkit#getDefaultToolkit()<br>java.awt.GraphicsEnvironment#getLocalGraphicsEnvironment()<br>java.awt.Desktop#getDesktop()<br></code></pre></td></tr></table></figure><h4 id="责任链模式-1"><a href="#责任链模式-1" class="headerlink" title="责任链模式"></a>责任链模式</h4><p>通过把请求从⼀个对象传递到链条中下⼀个对象的方式，直到请求被处理完毕，以实现对象间的解耦。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.logging.Logger#log()<br>javax.servlet.Filter#doFilter()<br></code></pre></td></tr></table></figure><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><p>将操作封装到对象内，以便存储，传递和返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Runnable<br>javax.swing.Action<br></code></pre></td></tr></table></figure><h4 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h4><p>这个模式通常定义了⼀个语⾔的语法，然后解析相应语法的语句。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Pattern<br>java.text.Normalizer<br>java.text.Format<br></code></pre></td></tr></table></figure><h4 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h4><p>提供⼀个⼀致的方法来顺序访问集合中的对象，这个方法与底层的集合的具体实现⽆关。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Iterator<br>java.util.Enumeration<br></code></pre></td></tr></table></figure><h4 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h4><p>通过使⽤⼀个中间对象来进⾏消息分发以及减少类之间的直接依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Timer<br>java.util.concurrent.Executor#execute()<br>java.util.concurrent.ExecutorService#submit()<br>java.lang.reflect.Method#invoke()<br></code></pre></td></tr></table></figure><h4 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h4><p>⽣成对象状态的⼀个快照，以便对象可以恢复原始状态⽽不⽤暴露⾃身的内容。<code>Date</code>对象通过⾃身内部的⼀个 long 值来实现备忘录模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Date<br>java.io.Serializable<br></code></pre></td></tr></table></figure><h3 id="空对象模式"><a href="#空对象模式" class="headerlink" title="空对象模式"></a>空对象模式</h3><p>这个模式通过⼀个⽆意义的对象来代替没有对象这个状态。它使得你不⽤额外对空对象进⾏处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Collections#emptyList()<br>java.util.Collections#emptyMap()<br>java.util.Collections#emptySet()<br></code></pre></td></tr></table></figure><h4 id="观察者模式-1"><a href="#观察者模式-1" class="headerlink" title="观察者模式"></a>观察者模式</h4><p> 它使得⼀个对象可以灵活的将消息发送给感兴趣的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.EventListener<br>javax.servlet.http.HttpSessionBindingListener<br>javax.servlet.http.HttpSessionAttributeListener<br>javax.faces.event.PhaseListener<br></code></pre></td></tr></table></figure><h4 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h4><p>通过改变对象内部的状态，使得你可以在运⾏时动态改变⼀个对象的⾏为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Iterator<br>javax.faces.lifecycle.LifeCycle#execute()<br></code></pre></td></tr></table></figure><h4 id="策略模式-1"><a href="#策略模式-1" class="headerlink" title="策略模式"></a>策略模式</h4><p>使⽤这个模式来将⼀组算法封装成⼀系列对象。通过传递这些对象可以灵活的改变程序的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Comparator#compare()<br>javax.servlet.http.HttpServlet<br>javax.servlet.Filter#doFilter()<br></code></pre></td></tr></table></figure><h4 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h4><p>让⼦类可以重写方法的⼀部分，⽽不是整个重写，你可以控制⼦类需要重写那些操作。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Collections#sort()<br>java.io.InputStream#skip()<br>java.io.InputStream#read()<br>java.util.AbstractList#indexOf()<br></code></pre></td></tr></table></figure><h4 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h4><p>提供⼀个方便的可维护的方式来操作⼀组对象。它使得你在不改变操作的对象前提下，可以修改或者扩展对象的⾏为。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">javax.lang.model.element.Element and<br>javax.lang.model.element.ElementVisitor<br>javax.lang.model.type.TypeMirror and<br>javax.lang.model.type.TypeVisitor<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.cnblogs.com/yssjun/p/11102162.html">设计模式之⼯⼚模式（factory pattern）</a></li><li><a href="https://segmentfault.com/a/1190000040146574">深⼊理解单例设计模式</a></li><li><a href="https://www.cnblogs.com/chenssy/p/3357683.html">设计模式总结</a></li><li><a href="https://refactoringguru.cn/design-patterns/decorator">装饰模式</a></li><li><a href="https://refactoringguru.cn/design-patterns/chain-of-responsibility">责任链模式</a></li><li><a href="https://blog.winsky.wang/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/">设计模式常⻅⾯试题</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式 - Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>马士兵课程体系</title>
    <link href="/2024/02/28/ma-shi-bing/"/>
    <url>/2024/02/28/ma-shi-bing/</url>
    
    <content type="html"><![CDATA[<h1 id="马士兵课程体系"><a href="#马士兵课程体系" class="headerlink" title="马士兵课程体系"></a>马士兵课程体系</h1><h2 id="多线程高并发"><a href="#多线程高并发" class="headerlink" title="多线程高并发"></a>多线程高并发</h2><h2 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h2><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h2 id="Zooker"><a href="#Zooker" class="headerlink" title="Zooker"></a>Zooker</h2><h2 id="MySQL调优"><a href="#MySQL调优" class="headerlink" title="MySQL调优"></a>MySQL调优</h2><h2 id="网约车"><a href="#网约车" class="headerlink" title="网约车"></a>网约车</h2><h2 id="亿级流量"><a href="#亿级流量" class="headerlink" title="亿级流量"></a>亿级流量</h2>]]></content>
    
    
    <categories>
      
      <category>面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式 - Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式面试题汇总</title>
    <link href="/2024/02/28/quiz-design-pattern%20-%20%E5%89%AF%E6%9C%AC/"/>
    <url>/2024/02/28/quiz-design-pattern%20-%20%E5%89%AF%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式面试题汇总"><a href="#设计模式面试题汇总" class="headerlink" title="设计模式面试题汇总"></a>设计模式面试题汇总</h1><h2 id="软件设计原则有哪些？"><a href="#软件设计原则有哪些？" class="headerlink" title="软件设计原则有哪些？"></a>软件设计原则有哪些？</h2><p>常⽤的⾯向对象设计原则包括7个，这些原则并不是孤⽴存在的，它们相互依赖，相互补充。</p><ul><li>开闭原则（Open Closed Principle，OCP）</li><li>单⼀职责原则（Single Responsibility Principle, SRP)</li><li>⾥⽒替换原则（Liskov Substitution Principle，LSP） </li><li>依赖倒置原则（Dependency Inversion Principle，DIP）</li><li>接⼝隔离原则（Interface Segregation Principle，ISP）</li><li>合成&#x2F;聚合复⽤原则（Composite&#x2F;Aggregate Reuse Principle， C&#x2F;ARP）</li><li>最少知识原则（Least Knowledge Principle，LKP）或者迪⽶特法则（Law of Demeter，LOD）</li></ul><table><thead><tr><th>设计原则</th><th>名称简单定义</th></tr></thead><tbody><tr><td>开闭原则</td><td>对扩展开放，对修改关闭</td></tr><tr><td>单一职责原则</td><td>一个类只负责一个功能领域中的相应职责</td></tr><tr><td>里氏替换原则</td><td>所有引用基类的地方必须能透明地使用其子类的对象</td></tr><tr><td>依赖倒置原则</td><td>依赖于抽象，不能依赖于具体实现</td></tr><tr><td>接口隔离原则</td><td>类之间的依赖关系应该建立在最小的接口上</td></tr><tr><td>合成&#x2F;聚合复用原则</td><td>尽量使用合成&#x2F;聚合，而不是通过继承达到复用的目的</td></tr><tr><td>迪米特法则</td><td>一个软件实体应当尽可能少的与其他实体发生相互作用</td></tr></tbody></table><h2 id="什么是设计模式？"><a href="#什么是设计模式？" class="headerlink" title="什么是设计模式？"></a>什么是设计模式？</h2><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的⾯向对象的软件开发r人员所采用。设计模式是软件开发⼈员在软件开发过程中⾯临的⼀般问题的解决方案。这些解决方案是众多软件开发⼈员经过相当⻓的⼀段时间的试验和错误总结出来的。 </p><p>设计模式是⼀套被反复使⽤的、多数⼈知晓的、经过分类编⽬的、代码设计经验的总结。使⽤设计模式是为了重⽤代码、让代码更容易被他⼈理 解、保证代码可靠性。 毫⽆疑问，设计模式于⼰于他⼈于系统都是多赢的，设计模式使代码编制真正⼯程化，设计模式是软件⼯程的基⽯，如同⼤厦的⼀块块砖⽯⼀样。项⽬中合理地运⽤设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了</p><p>⼀个在我们周围不断重复发⽣的问题，以及该问题的核⼼解决方案，这也是设计模式能被⼴泛应⽤的原因。</p><h1 id="设计模式的分类了解吗"><a href="#设计模式的分类了解吗" class="headerlink" title="设计模式的分类了解吗?"></a>设计模式的分类了解吗?</h1><ul><li><strong>创建型：</strong> 在创建对象的同时隐藏创建逻辑，不使⽤ new 直接实例化对象，程序在判断需要创建哪些对象时更灵活。包括⼯⼚&#x2F;抽象⼯⼚&#x2F;单例&#x2F;建造者&#x2F;原型模式。</li><li><strong>结构型：</strong> 通过类和接⼝间的继承和引⽤实现创建复杂结构的对象。包括适配器&#x2F;桥接模式&#x2F;过滤器&#x2F;组合&#x2F;装饰器&#x2F;外观&#x2F;享元&#x2F;代理模式。</li><li><strong>⾏为型：</strong> 通过类之间不同通信方式实现不同⾏为。包括责任链&#x2F;命名&#x2F;解释器&#x2F;迭代器&#x2F;中介者&#x2F;备忘录&#x2F;观察者&#x2F;状态&#x2F;策略&#x2F;模板&#x2F;访问者模式。</li></ul><h2 id="你知道哪些设计模式？"><a href="#你知道哪些设计模式？" class="headerlink" title="你知道哪些设计模式？"></a>你知道哪些设计模式？</h2><p><img src="/quiz-design-pattern/clip_image016.jpg" alt="img"></p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="说一说简单工厂模式"><a href="#说一说简单工厂模式" class="headerlink" title="说一说简单工厂模式"></a>说一说简单工厂模式</h3><p>简单⼯⼚模式指由⼀个⼯⼚对象来创建实例，客户端不需要关注创建逻辑，只需提供传⼊⼯⼚的参数。</p><p> UML 类图如下：</p><p><img src="/quiz-design-pattern/clip_image018.jpg" alt="img"></p><p>适⽤于⼯⼚类负责创建对象较少的情况，缺点是如果要增加新产品，就需要修改⼯⼚类的判断逻辑，违背开闭原则，且产品多的话会使⼯⼚类⽐较复杂。</p><p><code>Calendar</code>抽象类的<code>getInstance</code>⽅法，调⽤<code>createCalendar </code>⽅法根据不同的地区参数创建不同的⽇历对象。<br>Spring 中的<code>BeanFactory</code> 使⽤简单⼯⼚模式，根据传⼊⼀个唯⼀的标识来获得<code> Bean</code> 对象。</p><h3 id="⼯⼚方法模式了解吗？"><a href="#⼯⼚方法模式了解吗？" class="headerlink" title="⼯⼚方法模式了解吗？"></a>⼯⼚方法模式了解吗？</h3><p>和简单⼯⼚模式中⼯⼚负责⽣产所有产品相⽐，⼯⼚方法模式将⽣成具体产品的任务分发给具体的产品⼯⼚。</p><p> UML 类图如下：</p><p><img src="/quiz-design-pattern/clip_image025.jpg" alt="img"> </p><p>也就是定义⼀个抽象⼯⼚，其定义了产品的⽣产接⼝，但不负责具体的产品，将⽣产任务交给不同的派⽣类⼯⼚。这样不⽤通过指定类型来创建对象了。</p><h3 id="抽象⼯⼚模式了解吗？"><a href="#抽象⼯⼚模式了解吗？" class="headerlink" title="抽象⼯⼚模式了解吗？"></a>抽象⼯⼚模式了解吗？</h3><p>简单⼯⼚模式和⼯⼚方法模式不管⼯⼚怎么拆分抽象，都只是针对⼀类产品，如果要⽣成另⼀种产品，就⽐较难办了！</p><p> 抽象⼯⼚模式通过在<code>AbstarctFactory</code>中增加创建产品的接⼝，并在具体⼦⼯⼚中实现新加产品的创建，当然前提是⼦⼯⼚⽀持⽣产该产品。否则继承的这个接⼝可以什么也不⼲。</p><p>UML 类图如下：<br><img src="/quiz-design-pattern/clip_image028.jpg" alt="img"> </p><p>从上⾯类图结构中可以清楚的看到如何在⼯⼚方法模式中通过增加新产品接⼝来实现产品的增加的。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="什么是单例模式？单例模式的特点是什么？"><a href="#什么是单例模式？单例模式的特点是什么？" class="headerlink" title="什么是单例模式？单例模式的特点是什么？"></a>什么是单例模式？单例模式的特点是什么？</h3><p>单例模式属于创建型模式，⼀个单例类在任何情况下都只存在⼀个实例，构造方法必须是私有的、由⾃⼰创建⼀个静态变量存储实例，对外提供⼀个静态公有方法获取实例。</p><p>优点是内存中只有⼀个实例，减少了开销，尤其是频繁创建和销毁实例的情况下并且可以避免对资源的多重占⽤。缺点是没有抽象层，难以扩展，与单⼀职责原则冲突。</p><h3 id="单例模式的常⻅写法有哪些？"><a href="#单例模式的常⻅写法有哪些？" class="headerlink" title="单例模式的常⻅写法有哪些？"></a>单例模式的常⻅写法有哪些？</h3><h4 id="饿汉式，线程安全"><a href="#饿汉式，线程安全" class="headerlink" title="饿汉式，线程安全"></a>饿汉式，线程安全</h4><p>饿汉式单例模式，顾名思义，类⼀加载就创建对象，这种方式⽐较常⽤，但容易产⽣垃圾对象，浪费内存空间。</p><ul><li>优点：线程安全，没有加锁，执⾏效率较⾼</li><li>缺点：不是懒加载，类加载时就初始化，浪费内存空间</li></ul><blockquote><p>懒加载 （lazy loading）：使⽤的时候再创建对象</p></blockquote><p>饿汉式单例是如何保证线程安全的呢？它是基于类加载机制避免了多线程的同步问题，但是如果类被不同的类加载器加载就会创建不同的实例。</p><h4 id="代码实现，以及使用反射破坏单例："><a href="#代码实现，以及使用反射破坏单例：" class="headerlink" title="代码实现，以及使用反射破坏单例："></a>代码实现，以及使用反射破坏单例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 饿汉式单例测试</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@className</span>: Singleton</span><br><span class="hljs-comment">* <span class="hljs-doctag">@date</span>: 2021/6/7 14:32</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-comment">// 1、私有化构造⽅法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-comment">// 2、定义⼀个静态变量指向⾃⼰类型</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>    <span class="hljs-comment">// 3、对外提供⼀个公共的⽅法获取实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使⽤反射破坏单例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 使⽤反射破坏单例</span><br>        <span class="hljs-comment">// 获取空参构造⽅法</span><br>        Constructor&lt;Singleton&gt; declaredConstructor = Singleton.class.getDeclaredConstructor(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 设置强制访问</span><br>        declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 创建实例</span><br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">singleton</span> <span class="hljs-operator">=</span> declaredConstructor.newInstance();<br>        System.out.println(<span class="hljs-string">&quot;反射创建的实例&quot;</span> + singleton);<br>        System.out.println(<span class="hljs-string">&quot;正常创建的实例&quot;</span> + Singleton.getInstance());<br>        System.out.println(<span class="hljs-string">&quot;正常创建的实例&quot;</span> + Singleton.getInstance());<br>    &#125;<br>&#125;    <br></code></pre></td></tr></table></figure><p> 输出结果如下：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">反射创建的实例<br>com.example.spring.demo.single.Singleton@6267c3bb<br>正常创建的实例<br>com.example.spring.demo.single.Singleton@533ddba<br>正常创建的实例<br>com.example.spring.demo.single.Singleton@533ddba<br></code></pre></td></tr></table></figure><h4 id="懒汉式，线程不安全"><a href="#懒汉式，线程不安全" class="headerlink" title="懒汉式，线程不安全"></a>懒汉式，线程不安全</h4><p>这种方式在单线程下使⽤没有问题，对于多线程是⽆法保证单例的，这⾥列出来是为了和后⾯使⽤锁保证线程安全的单例做对⽐。</p><ul><li>优点：懒加载</li><li>缺点：线程不安全</li></ul><p>代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 懒汉式单例，线程不安全</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@className</span>: Singleton</span><br><span class="hljs-comment">* <span class="hljs-doctag">@date</span>: 2021/6/7 14:32</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-comment">// 1、私有化构造⽅法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123; &#125;<br>    <span class="hljs-comment">// 2、定义⼀个静态变量指向⾃⼰类型</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-comment">// 3、对外提供⼀个公共的⽅法获取实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 判断为 null 的时候再创建对象</span><br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>        instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使⽤多线程破坏单例，测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;多线程创建的单例：&quot;</span> + Singleton.getInstance());<br>            &#125;).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">多线程创建的单例：<br>com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.spring</span><span class="hljs-selector-class">.demo</span><span class="hljs-selector-class">.single</span>.Singleton@<span class="hljs-number">18396</span>bd5<br>多线程创建的单例：<br>com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.spring</span><span class="hljs-selector-class">.demo</span><span class="hljs-selector-class">.single</span>.Singleton@<span class="hljs-number">7</span>f23db98<br>多线程创建的单例：<br>com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.spring</span><span class="hljs-selector-class">.demo</span><span class="hljs-selector-class">.single</span>.Singleton@<span class="hljs-number">5000</span>d44<br></code></pre></td></tr></table></figure><h4 id="懒汉式，线程安全"><a href="#懒汉式，线程安全" class="headerlink" title="懒汉式，线程安全"></a>懒汉式，线程安全</h4><p>懒汉式单例如何保证线程安全呢？通过<code>synchronized</code>关键字加锁保证线程安全，<code>synchronized</code>可以添加在⽅法上⾯，也可以添加在代码块上⾯，这⾥演示添加在⽅法上⾯，存在的问题是每⼀次调⽤<code>getInstance</code>获取实例时都需要加锁和释放锁，这样是⾮常影响性能的。</p><ul><li>优点：懒加载，线程安全</li><li>缺点：效率较低</li></ul><p>代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 懒汉式单例，⽅法上⾯添加 synchronized 保证线程安全</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@className</span>: Singleton</span><br><span class="hljs-comment">* <span class="hljs-doctag">@date</span>: 2021/6/7 14:32</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-comment">// 1、私有化构造⽅法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123; &#125;<br>    <span class="hljs-comment">// 2、定义⼀个静态变量指向⾃⼰类型</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-comment">// 3、对外提供⼀个公共的⽅法获取实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>        instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="双重检查锁（DCL，-即-double-checked-locking）"><a href="#双重检查锁（DCL，-即-double-checked-locking）" class="headerlink" title="双重检查锁（DCL， 即 double-checked locking）"></a>双重检查锁（DCL， 即 double-checked locking）</h4><p>实现代码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 双重检查锁（DCL， 即 double-checked locking）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span>: Singleton</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/6/7 14:32</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br>    <span class="hljs-comment">// 1、私有化构造⽅法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">// 2、定义⼀个静态变量指向⾃⼰类型</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton instance;<br><br>    <span class="hljs-comment">// 3、对外提供⼀个公共的⽅法获取实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 第⼀重检查是否为 null</span><br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 使⽤ synchronized 加锁</span><br>            <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;<br>                <span class="hljs-comment">// 第⼆重检查是否为 null</span><br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// new 关键字创建对象不是原⼦操作</span><br>                    instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点：懒加载，线程安全，效率较⾼</li><li>缺点：实现较复杂</li></ul><p>这⾥的双重检查是指两次⾮空判断，锁指的是 synchronized 加锁，为什么要进⾏双重判断，其实很简单，第⼀重判断，如果实例已经存在，那么就不再需要进⾏同步操作，⽽是直接返回这个实例，如果没有创建，才会进⼊同步块，同步块的⽬的与之前相同，⽬的是为了防⽌有多个线程同时调⽤时，导致⽣成多个实例，有了同步块，每次只能有⼀个线程调⽤访问同步块内容，当第⼀个抢到锁的调⽤获取了实例之后，这个实例就会被创 建，之后的所有调⽤都不会进⼊同步块，直接在第⼀重判断就返回了单例。</p><p> 关于内部的第⼆重空判断的作⽤，当多个线程⼀起到达锁位置时，进⾏锁竞争，其中⼀个线程获取锁，如果是第⼀次进⼊则为 null，会进⾏单例对象的创建，完成后释放锁，其他线程获取锁后就会被空判断拦截，直接返回已创建的单例对象。</p><p>其中最关键的⼀个点就是<code>volatile</code>关键字的使⽤，关于<code>volatile</code>的详细介绍可以直接搜索 volatile 关键字即可，有很多写的⾮常好的⽂章，这⾥不做详细介绍，简单说明⼀下，双重检查锁中使⽤<code>volatile</code>的两个重要特性：<strong>可⻅性、禁⽌指令重排序</strong></p><p>这⾥为什么要使⽤<code>volatile</code>？</p><p>这是因为<code>new</code>关键字创建对象不是原⼦操作，创建⼀个对象会经历下⾯的步骤：</p><ol><li><p>在堆内存开辟内存空间</p></li><li><p>调⽤构造方法，初始化对象</p></li><li><p>引⽤变量指向堆内存空间</p></li></ol><p> 对应字节码指令如下：</p><p><img src="/quiz-design-pattern/clip_image051.jpg" alt="img"></p><p>为了提⾼性能，编译器和处理器常常会对既定的代码执⾏顺序进⾏指令重排序，从源码到最终执⾏指令会经历如下流程： </p><p>源码编译器优化重排序指令级并⾏重排序内存系统重排序最终执⾏指令序列，所以经过指令重排序之后，创建对象的执⾏顺序可能为<code>1 2 3</code>或者<code>1 3 2</code> ，因此当某个线程在乱序运⾏<code>1 3 2</code>指令的时候，引⽤变量指向堆内存空间，这个对象不为 null，但是没有初始化，其他线程有可能这个时候进⼊了<code>getInstance</code>的第⼀个 <code>if(instance == null)</code> 判断不为 nulll ，导致错误使⽤了没有初始化的⾮ null 实例，这样的话就会出现异常，这个就是著名的DCL 失效问题。</p><p>当我们在引⽤变量上⾯添加<code>volatile</code>关键字以后，会通过在创建对象指令的前后添加内存屏障来禁⽌指令重排序，就可以避免这个问题，⽽且对<code>volatile</code>修饰的变量的修改对其他任何线程都是可⻅的。</p><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>代码实现如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 静态内部类实现单例</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span>: Singleton</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/6/7 14:32</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br>    <span class="hljs-comment">// 1、私有化构造⽅法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">// 2、对外提供获取实例的公共⽅法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> InnerClass.INSTANCE;<br>    &#125;<br><br>    <span class="hljs-comment">// 定义静态内部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClass</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点：懒加载，线程安全，效率较⾼，实现简单</li></ul><p>静态内部类单例是如何实现懒加载的呢？⾸先，我们先了解下类的加载时机。</p><p>虚拟机规范要求有且只有 5 种情况必须⽴即对类进⾏初始化（加载、验证、准备需要在此之前开始）：</p><ol><li>遇到<code>new</code>、<code>getstatic</code>、<code>putstatic</code>、<code>invokestatic</code>这 4 条字节码指令时。⽣成这 4 条指令最常⻅的 Java 代码场景是：使⽤<code>new</code>关键字实例化对象的时候、读取或设置⼀个类的静态字段（final 修饰除外，被final 修饰的静态字段是常量，已在编译期把结果放⼊常量池）的时候，以及调⽤⼀个类的静态⽅法的时候。</li><li>使⽤<code>java.lang.reflect</code>包⽅法对类进⾏反射调⽤的时候。</li><li>当初始化⼀个类的时候，如果发现其⽗类还没有进⾏过初始化，则需要先触发其⽗类的初始化。</li><li>当虚拟机启动时，⽤户需要指定⼀个要执⾏的主类（包含 main()的那个类），虚拟机会先初始化这个主类。</li><li>当使⽤ JDK 1.7 的动态语⾔⽀持时，如果⼀个<code>java.lang.invoke.MethodHandle</code>实例最后的解析结果是<br><code>REF_getStatic</code> 、<code>REF_putStatic</code>、<code>REF_invokeStatic</code>的⽅法句柄，则需要先触发这个⽅法句柄所对应的类的初始化。</li></ol><p> 这 5 种情况被称为是类的主动引⽤，注意，这⾥《虚拟机规范》中使⽤的限定词是 “<strong>有且仅有</strong>“，那么，除此之外的所有引⽤类都不会对类进⾏初始化，称为被动引⽤。静态内部类就属于被动引⽤的情况。</p><p>当 getInstance()⽅法被调⽤时，InnerClass 才在 Singleton 的运⾏时常量池⾥，把符号引⽤替换为直接引⽤，这时静态对象 INSTANCE 也真正被创建，然后再被 getInstance()⽅法返回出去，这点同饿汉模式。</p><p>那么 INSTANCE 在创建过程中⼜是如何保证线程安全的呢？在《深⼊理解 JAVA 虚拟机》中，有这么⼀句话：虚拟机会保证⼀个类的 <clinit>() ⽅法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化⼀个类，那么只会有⼀个线程去执⾏这个类的 <clinit>() ⽅法，其他线程都需要阻塞等待，直到活动线程执⾏<clinit>() ⽅法完毕。如果在⼀个类的 <clinit>() ⽅法中有耗时很⻓的操作，就可能造成多个进程阻塞(需要注意的是，其他线程虽然会被阻塞，但如果执⾏<clinit>() ⽅法后，其他线程唤醒之后不会再次进⼊<clinit>() ⽅法。同⼀个加载器下，⼀个类型只会初始化⼀次。)，在实际应⽤中，这种阻塞往往是很隐蔽的。</p><p>从上⾯的分析可以看出 INSTANCE 在创建过程中是线程安全的，所以说静态内部类形式的单例可保证线程安全，也能保证单例的唯⼀性，同时也延迟了单例的实例化。</p><h4 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h4><p>代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 枚举实现单例</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span>: Singleton</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/6/7 14:32</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    INSTANCE;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">(String str)</span> &#123;<br>        System.out.println(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：简单，⾼效，线程安全，可以避免通过反射破坏枚举单例</p><p>枚举在 Java 中与普通类⼀样，都能拥有字段与方法，⽽且枚举实例创建是线程安全的，在任何情况下，它都是⼀个单例，可以直接通过如下方式调</p><p>⽤获取实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Singleton</span> <span class="hljs-variable">singleton</span> <span class="hljs-operator">=</span> Singleton.INSTANCE;<br></code></pre></td></tr></table></figure><p>使⽤下⾯的命令反编译枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">javap Singleton.class<br></code></pre></td></tr></table></figure><p>得到如下内容</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Compiled from <span class="hljs-string">&quot;Singleton.java&quot;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.spring.demo.singleton.Singleton<br><span class="hljs-keyword">extends</span><br><span class="hljs-title class_">java</span>.lang.Enum&lt;com.spring.demo.singleton.Singleton&gt; &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span><br>com.spring.demo.singleton.Singleton INSTANCE;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> com.spring.demo.singleton.Singleton[]<br>values();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> com.spring.demo.singleton.Singleton<br><span class="hljs-title function_">valueOf</span><span class="hljs-params">(java.lang.String)</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">(java.lang.String)</span>;<br><span class="hljs-keyword">static</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>从枚举的反编译结果可以看到，INSTANCE 被<code>static final</code>修饰，所以可以通过类名直接调⽤，<strong>并且创建对象的实例是在静态代码块中创建的</strong>，因为 static 类型的属性会在类被加载之后被初始化，当⼀个 Java 类第⼀次被真正使⽤到的时候静态资源被初始化、Java 类的加载和初始化过程都是线程安全的，所以创建⼀个 enum 类型是线程安全的。 </p><p>通过反射破坏枚举，实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">singleton</span> <span class="hljs-operator">=</span> Singleton.INSTANCE;<br>        singleton.doSomething(<span class="hljs-string">&quot;hello enum&quot;</span>);<br>        <span class="hljs-comment">// 尝试使⽤反射破坏单例</span><br>        <span class="hljs-comment">// 枚举类没有空参构造⽅法，反编译后可以看到枚举有⼀个两个参数的构造⽅法</span><br>        Constructor&lt;Singleton&gt; declaredConstructor =<br>            Singleton.class.getDeclaredConstructor(String.class,<br>                <span class="hljs-type">int</span>.class);<br>        <span class="hljs-comment">// 设置强制访问</span><br>        declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 创建实例，这⾥会报错，因为⽆法通过反射创建枚举的实例</span><br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">enumSingleton</span> <span class="hljs-operator">=</span> declaredConstructor.newInstance();<br>        System.out.println(enumSingleton);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运⾏结果报如下错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span><br>java.lang.IllegalArgumentException: Cannot reflectively<br>create <span class="hljs-keyword">enum</span> <span class="hljs-title class_">objects</span><br>at<br>java.base/java.lang.reflect.Constructor.newInstanceWithC<br><span class="hljs-title function_">aller</span><span class="hljs-params">(Constructor.java:<span class="hljs-number">492</span>)</span><br>at<br>java.base/java.lang.reflect.Constructor.newInstance(Cons<br>tructor.java:<span class="hljs-number">480</span>)<br>at com.spring.demo.singleton.Test.main(Test.java:<span class="hljs-number">24</span>)<br></code></pre></td></tr></table></figure><p>看反射创建实例的<code>newInstance()</code>方法，有如下判断：</p><p> <img src="/quiz-design-pattern/image-20240228111756191.png" alt="image-20240228111756191"></p><p>所以⽆法通过反射创建枚举的实例。</p><p> ⼤家可以在 <a href="https://javaguide.cn/">JavaGuide</a> 上找到对应双重校验锁实现对象单例的解答。</p><p><img src="/quiz-design-pattern/image-20240228111826552.png" alt="image-20240228111826552"></p><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id="适配器模式了解吗？"><a href="#适配器模式了解吗？" class="headerlink" title="适配器模式了解吗？"></a>适配器模式了解吗？</h3><p>在我们的应⽤程序中我们可能需要将两个不同接⼝的类来进⾏通信，在不修改这两个的前提下我们可能会需要某个中间件来完成这个衔接的过程。这个中间件就是适配器。所谓适配器模式就是将⼀个类的接⼝，转换成客户期望的另⼀个接⼝。它可以让原本两个不兼容的接⼝能够⽆缝完成对 接。</p><p>作为中间件的适配器将⽬标类和适配者解耦，增加了类的透明性和可复⽤性。</p><h4 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h4><p><strong>原理：</strong>通过类继承实现适配，继承<code>Target</code>的接⼝，继承<code>Adaptee</code>的实现</p><p> <img src="/quiz-design-pattern/image-20240228112407657.png" alt="image-20240228112407657"></p><h4 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h4><p><strong>原理：</strong>通过类对象组合实现适配</p><p> <img src="/quiz-design-pattern/image-20240228112233636.png" alt="image-20240228112233636"></p><ul><li><p><strong>Target:</strong> 定义 Client 真正需要使⽤的接⼝。</p></li><li><p><strong>Adaptee:</strong> 其中定义了⼀个已经存在的接⼝，也是我们需要进⾏适配的接⼝。</p></li><li><p><strong>Adapter:</strong> 对 Adaptee 和 Target 的接⼝进⾏适配，保证对 target 中接⼝的调⽤可以间接转换为对 Adaptee 中接⼝进⾏调⽤。</p></li></ul><h4 id="适配器模式的优缺点"><a href="#适配器模式的优缺点" class="headerlink" title="适配器模式的优缺点"></a>适配器模式的优缺点</h4><ul><li><p>优点： </p><ol><li>提⾼了类的复⽤；</li><li>组合若⼲关联对象形成对外提供统⼀服务的接⼝；</li><li>扩展性、灵活性好。</li></ol></li><li><p>缺点： </p><ol><li>过多使⽤适配模式容易造成代码功能和逻辑意义的混淆。</li><li>部分语⾔对继承的限制，可能⾄多只能适配⼀个适配者类，⽽且⽬标类必须是抽象类。</li></ol></li></ul><h2 id="代理模式（proxy-pattern）"><a href="#代理模式（proxy-pattern）" class="headerlink" title="代理模式（proxy pattern）"></a>代理模式（proxy pattern）</h2><h3 id="什么是代理模式？"><a href="#什么是代理模式？" class="headerlink" title="什么是代理模式？"></a>什么是代理模式？</h3><p>代理模式的本质是⼀个中间件，主要⽬的是解耦合服务提供者和使⽤者。使⽤者通过代理间接的访问服务提供者，便于后者的封装和控制。是⼀种结构性模式。</p><p>下⾯是 GoF 介绍典型的代理模式 UML 类图</p><p> <img src="/quiz-design-pattern/clip_image095.jpg" alt="img"></p><p><strong>Subject:</strong> 定义 RealSubject 对外的接⼝，且这些接⼝必须被 Proxy 实现，这样外部调⽤ proxy 的接⼝最终都被转化为对 realsubject 的调⽤。</p><p><strong>RealSubject:</strong> 真正的⽬标对象。</p><p><strong>Proxy:</strong> ⽬标对象的代理，负责控制和管理⽬标对象，并间接地传递外部对⽬标对象的访问。</p><ul><li>Remote Proxy: 对本地的请求以及参数进⾏序列化，向远程对象发送请求，并对响应结果进⾏反序列化，将最终结果反馈给调⽤者；</li><li>Virtual Proxy: 当⽬标对象的创建开销⽐较⼤的时候，可以使⽤延迟或者异步的方式创建⽬标对象；</li><li>Protection Proxy: 细化对⽬标对象访问权限的控制；</li></ul><h4 id="静态代理和动态代理的区别"><a href="#静态代理和动态代理的区别" class="headerlink" title="静态代理和动态代理的区别"></a>静态代理和动态代理的区别</h4><ol><li><p><strong>灵活性</strong> ：动态代理更加灵活，不需要必须实现接⼝，可以直接代理实现类，并且可以不需要针对每个⽬标类都创建⼀个代理类。另外，静态代理中，接⼝⼀旦新增加方法，⽬标对象和代理对象都要进⾏修改，这是⾮常麻烦的！</p></li><li><p><strong>JVM</strong> <strong>层⾯</strong> ：静态代理在编译时就将接⼝、实现类、代理类这些都变成了⼀个个实际的 class ⽂件。⽽动态代理是在运⾏时动态⽣成类字节码，并加载到 JVM 中的。</p></li></ol><p> ⼤家可以在 <a href="https://javaguide.cn/">JavaGuide</a> 上找到详细的解答。</p><p><img src="/quiz-design-pattern/image-20240228112809320.png" alt="image-20240228112809320"></p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="说⼀说观察者模式"><a href="#说⼀说观察者模式" class="headerlink" title="说⼀说观察者模式"></a>说⼀说观察者模式</h3><p>观察者模式主要⽤于处理对象间的⼀对多的关系，是⼀种对象⾏为模式。该模式的实际应⽤场景⽐较容易确认，当⼀个对象状态发⽣变化时，所有该对象的关注者均能收到状态变化通知，以进⾏相应的处理。</p><p>下⾯是 GoF 介绍的典型的类观察者模式的 UML 类图：</p><p> <img src="/quiz-design-pattern/image-20240228112903140.png" alt="image-20240228112903140"></p><p> <strong>Subject:</strong> 抽象被观察者，仅提供注册和删除观察者对象的接⼝声明。</p><p> <strong>ConcreteSubject:</strong> 具体被观察者对象，该对象中收集了所有需要被通知的观察者，并可以动态的增删集合中的观察者。当其状态发⽣变化时会通知所有观察者对象。</p><p> <strong>Observer:</strong> 抽象观察者，为所有观察者定义获得通知的统⼀接⼝；</p><p> <strong>ConcreteObserver:</strong> 观察者对象，其关注对象为 Subject，能接受 Subject 变化时发出的通知并更新⾃身状态。</p><h3 id="观察者模式的优缺点"><a href="#观察者模式的优缺点" class="headerlink" title="观察者模式的优缺点"></a>观察者模式的优缺点</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ol><li><p>被观察者和观察者之间是抽象耦合的；</p></li><li><p>耦合度较低，两者之间的关联仅仅在于消息的通知；</p></li><li><p>被观察者⽆需关⼼他的观察者；</p></li><li><p>⽀持⼴播通信；</p></li></ol><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ol><li><p>观察者只知道被观察对象发⽣了变化，但不知变化的过程和缘由；</p></li><li><p>观察者同时也可能是被观察者，消息传递的链路可能会过⻓，完成所有通知花费时间较多；</p></li><li><p>如果观察者和被观察者之间产⽣循环依赖，或者消息传递链路形成闭环，会导致⽆限循环；</p></li></ol><h3 id="你的项⽬是怎么⽤的观察者模式？"><a href="#你的项⽬是怎么⽤的观察者模式？" class="headerlink" title="你的项⽬是怎么⽤的观察者模式？"></a>你的项⽬是怎么⽤的观察者模式？</h3><p>在⽀付场景下，⽤户购买⼀件商品，当⽀付成功之后三方会回调⾃身，在这个时候系统可能会有很多需要执⾏的逻辑（如：更新订单状态，发送邮件通知，赠送礼品…），这些逻辑之间并没有强耦合，因此天然适合使⽤观察者模式去实现这些功能，当有更多的操作时，只需要添加新的观察者就能实现，完美实现了对修改关闭，对扩展开放的开闭原则。</p><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><h3 id="什么是装饰器模式？"><a href="#什么是装饰器模式？" class="headerlink" title="什么是装饰器模式？"></a>什么是装饰器模式？</h3><p>装饰器模式主要对现有的类对象进⾏包裹和封装，以期望在不改变类对象及其类定义的情况下，为对象添加额外功能。是⼀种对象结构型模式。需要注意的是，该过程是通过调⽤被包裹之后的对象完成功能添加的，⽽不是直接修改现有对象的⾏为，相当于增加了中间层。</p><p>下⾯是 GoF 介绍的典型的装饰器模式的 UML 类图：</p><p> <img src="/quiz-design-pattern/image-20240228113107067.png" alt="image-20240228113107067"></p><p> <strong>Component:</strong> 对象的接⼝类，定义装饰对象和被装饰对象的共同接⼝；</p><p> <strong>ConcreteComponent:</strong> 被装饰对象的类定义；</p><p> <strong>Decorator:</strong> 装饰对象的抽象类，持有⼀个具体的被修饰对象，并实现接⼝类继承的公共接⼝；</p><p><strong>ConcreteDecorator:</strong>   具体的装饰器，负责往被装饰对象添加额外的功能；</p><h3 id="讲讲装饰器模式的应⽤场景"><a href="#讲讲装饰器模式的应⽤场景" class="headerlink" title="讲讲装饰器模式的应⽤场景"></a>讲讲装饰器模式的应⽤场景</h3><p>如果你希望在⽆需修改代码的情况下即可使⽤对象， 且希望在运⾏时为对象新增额外的⾏为， 可以使⽤装饰模式。 </p><p>装饰能将业务逻辑组织为层次结构， 你可为各层创建⼀个装饰， 在运⾏时将各种不同逻辑组合成对象。 由于这些对象都遵循通⽤接⼝， 客户端代码能以相同的方式使⽤这些对象。</p><p> 如果⽤继承来扩展对象⾏为的方案难以实现或者根本不可⾏， 你可以使⽤该模式。</p><p>许多编程语⾔使⽤<code>final</code>最终关键字来限制对某个类的进⼀步扩展。 复⽤最终类已有⾏为的唯⼀方法是使⽤装饰模式： ⽤封装器对其进⾏封装。</p><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><h3 id="什么是责任链模式？"><a href="#什么是责任链模式？" class="headerlink" title="什么是责任链模式？"></a>什么是责任链模式？</h3><p>⼀个请求沿着⼀条“链”传递，直到该“链”上的某个处理者处理它为⽌。</p><p> ⼀个请求可以被多个处理者处理或处理者未明确指定时。</p><p>责任链模式⾮常简单异常好理解，相信我它⽐单例模式还简单易懂，其应⽤也⼏乎⽆所不在，甚⾄可以这么说,从你敲代码的第⼀天起你就不知不觉⽤过了它最原始的裸体结构：<code>switch-case</code>语句。</p><h3 id="讲讲责任链模式的应⽤场景"><a href="#讲讲责任链模式的应⽤场景" class="headerlink" title="讲讲责任链模式的应⽤场景"></a>讲讲责任链模式的应⽤场景</h3><ul><li>当程序需要使⽤不同方式处理不同种类请求， ⽽且请求类型和顺序预先未知时， 可以使⽤责任链模式。该模式能将多个处理者连接成⼀条链。接收到请求后，它会 “询问” 每个处理者是否能够对其进⾏处理。这样所有处理者都有机会来处理请求。</li><li>当必须按顺序执⾏多个处理者时，可以使⽤该模式。⽆论你以何种顺序将处理者连接成⼀条链， 所有请求都会严格按照顺序通过链上的处理者。</li></ul><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="什么是策略模式？"><a href="#什么是策略模式？" class="headerlink" title="什么是策略模式？"></a>什么是策略模式？</h3><p>策略模式（Strategy Pattern）属于对象的⾏为模式。其⽤意是针对⼀组算法，将每⼀个算法封装到具有共同接⼝的独⽴的类中，从⽽使得它们可以相互替换。策略模式使得算法可以在不影响到客户端的情况下发⽣变化。其主要⽬的是通过定义相似的算法，替换 if else 语句写法，并且可以随时相互替换。</p><h3 id="策略模式有什么好处？"><a href="#策略模式有什么好处？" class="headerlink" title="策略模式有什么好处？"></a>策略模式有什么好处？</h3><p>定义了⼀系列封装了算法、⾏为的对象，他们可以相互替换。</p><p>举例： <code>java.util.List</code> 就是定义了⼀个增（ add ）、删（ remove ）、改（ set ）、查（ indexOf ）策略，⾄于实现这个策略的<code>ArrayList</code> 、<code>LinkedList</code>等类，只是在具体实现时采⽤了不同的算法。但因为它们策略⼀样，不考虑速度的情况下，使⽤时完全可以互相替换使⽤。</p><h2 id="Spring-使⽤了哪些设计模式？"><a href="#Spring-使⽤了哪些设计模式？" class="headerlink" title="Spring 使⽤了哪些设计模式？"></a>Spring 使⽤了哪些设计模式？</h2><p>Spring 框架中⽤到了哪些设计模式？</p><p> <strong>⼯⼚设计模式</strong> : Spring 使⽤⼯⼚模式通过<code>BeanFactory</code>，<code>ApplicationContext</code>创建 bean 对象。</p><p><strong>代理设计模式</strong> : Spring AOP 功能的实现。</p><p><strong>单例设计模式</strong> : Spring 中的 Bean 默认都是单例的。</p><p><strong>模板方法模式</strong> : Spring 中<code>jdbcTemplate</code>、<code>hibernateTemplate</code>等以Template 结尾的对数据库操作的类，它们就使⽤到了模板模式。</p><p><strong>包装器设计模式</strong> : 我们的项⽬需要连接多个数据库，⽽且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。</p><p><strong>观察者模式</strong><strong>:</strong> Spring 事件驱动模型就是观察者模式很经典的⼀个应⽤。</p><p><strong>适配器模式</strong> :Spring AOP 的增强或通知(Advice)使⽤到了适配器模式、Spring MVC 中也是⽤到了适配器模式适配<code>Controller</code>。</p><p>…… </p><p>⼤家可以在 <a href="https://javaguide.cn/">JavaGuide</a> 上找到详细的解答。</p><p><img src="/quiz-design-pattern/clip_image116.jpg" alt="img"></p><h2 id="JDK-使⽤了哪些设计模式？"><a href="#JDK-使⽤了哪些设计模式？" class="headerlink" title="JDK 使⽤了哪些设计模式？"></a>JDK 使⽤了哪些设计模式？</h2><p>在软件⼯程中，设计模式（design pattern）是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案。以下是整理的⼏个在 JDK 库中常⽤的⼏个设计模式。 </p><h4 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h4><p> 这个模式将抽象和抽象操作的实现进⾏了解耦，这样使得抽象和实现可以独⽴地变化。</p><p>GOF 在提出桥梁模式的时候指出，桥梁模式的⽤意是”将抽象化 (Abstraction)与实现化(Implementation)脱耦，使得⼆者可以独⽴地变化”。这句话有三个关键词，也就是抽象化、实现化和脱耦。</p><p> 在 Java 应⽤中，对于桥接模式有⼀个⾮常典型的例⼦，就是应⽤程序使⽤ JDBC 驱动程序进⾏开发的方式。所谓驱动程序，指的是按照预先约定好的接⼝来操作计算机系统或者是外围设备的程序。</p><h4 id="适配器模式-1"><a href="#适配器模式-1" class="headerlink" title="适配器模式"></a>适配器模式</h4><p>⽤来把⼀个接⼝转化成另⼀个接⼝。使得原本由于接⼝不兼容⽽不能⼀起⼯作的那些类可以在⼀起⼯作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Arrays#asList()<br>java.io.InputStreamReader(InputStream)<br>java.io.OutputStreamWriter(OutputStream)<br></code></pre></td></tr></table></figure><h4 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h4><p>⼜叫做部分-整体模式，使得客户端看来单个对象和对象的组合是同等的。换句话说，某个类型的方法同时也接受⾃身类型作为参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Map#putAll(Map)<br>java.util.List#addAll(Collection)<br>java.util.Set#addAll(Collection)<br></code></pre></td></tr></table></figure><h4 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h4><p>动态的给⼀个对象附加额外的功能，这也是⼦类的⼀种替代方式。可以看到，在创建⼀个类型的时候，同时也传⼊同⼀类型的对象。这在 JDK ⾥随处可⻅，你会发现它⽆处不在，所以下⾯这个列表只是⼀⼩部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">java.io.BufferedInputStream(InputStream)<br>java.io.DataInputStream(InputStream)<br>java.io.BufferedOutputStream(OutputStream)<br>java.util.zip.ZipOutputStream(OutputStream)<br>java.util.Collections#checkedList|Map|Set|SortedSet|Sort<br>edMap<br></code></pre></td></tr></table></figure><h4 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h4><p>使⽤缓存来加速⼤量⼩对象的访问时间。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Integer#valueOf(<span class="hljs-type">int</span>)<br>java.lang.Boolean#valueOf(<span class="hljs-type">boolean</span>)<br>java.lang.Byte#valueOf(<span class="hljs-type">byte</span>)<br>java.lang.Character#valueOf(<span class="hljs-type">char</span>) <br></code></pre></td></tr></table></figure><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p>代理模式是⽤⼀个简单的对象来代替⼀个复杂的或者创建耗时的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.reflect.Proxy<br>RMI <br></code></pre></td></tr></table></figure><h4 id="抽象⼯⼚模式"><a href="#抽象⼯⼚模式" class="headerlink" title="抽象⼯⼚模式"></a>抽象⼯⼚模式</h4><p>抽象⼯⼚模式提供了⼀个协议来⽣成⼀系列的相关或者独⽴的对象，⽽不⽤指定具体对象的类型。它使得应⽤程序能够和使⽤的框架的具体实现进⾏解耦。这在 JDK 或者许多框架⽐如 Spring 中都随处可⻅。它们也很容易识别，⼀个创建新对象的方法，返回的却是接⼝或者抽象类的，就是抽象⼯⼚模式了。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Calendar#getInstance()<br>java.util.Arrays#asList()<br>java.util.ResourceBundle#getBundle()<br>java.sql.DriverManager#getConnection()<br>java.sql.Connection#createStatement()<br>java.sql.Statement#executeQuery()<br>java.text.NumberFormat#getInstance()<br>javax.xml.transform.TransformerFactory#newInstance()<br></code></pre></td></tr></table></figure><h4 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h4><p>定义了⼀个新的类来构建另⼀个类的实例，以简化复杂对象的创建。建造模式通常也使⽤方法链接来实现。</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs leaf">java.lang.StringBuilder<span class="hljs-punctuation">#</span><span class="hljs-keyword">append</span><span class="hljs-params">()</span><br>java.lang.StringBuffer<span class="hljs-punctuation">#</span><span class="hljs-keyword">append</span><span class="hljs-params">()</span><br>java.sql.PreparedStatement<br>javax.swing.GroupLayout.Group<span class="hljs-punctuation">#</span><span class="hljs-keyword">addComponent</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><h4 id="⼯⼚方法"><a href="#⼯⼚方法" class="headerlink" title="⼯⼚方法"></a>⼯⼚方法</h4><p>就是⼀个返回具体对象的方法。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Proxy#newProxyInstance()<br>java.lang.Object#toString()<br>java.lang.Class#newInstance()<br>java.lang.reflect.Array#newInstance()<br>java.lang.reflect.Constructor#newInstance()<br>java.lang.Boolean#valueOf(String)<br>java.lang.Class#forName()<br></code></pre></td></tr></table></figure><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><p> 使得类的实例能够⽣成⾃身的拷⻉。如果创建⼀个对象的实例⾮常复杂且耗时时，就可以使⽤这种模式，⽽不重新创建⼀个新的实例，你可以拷⻉</p><p>⼀个对象并直接修改它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Object#clone()<br>java.lang.Cloneable<br></code></pre></td></tr></table></figure><h4 id="单例模式-1"><a href="#单例模式-1" class="headerlink" title="单例模式"></a>单例模式</h4><p>⽤来确保类只有⼀个实例。Joshua Bloch 在 Effetive Java 中建议到，还有⼀种方法就是使⽤枚举。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Runtime#getRuntime()<br>java.awt.Toolkit#getDefaultToolkit()<br>java.awt.GraphicsEnvironment#getLocalGraphicsEnvironment()<br>java.awt.Desktop#getDesktop()<br></code></pre></td></tr></table></figure><h4 id="责任链模式-1"><a href="#责任链模式-1" class="headerlink" title="责任链模式"></a>责任链模式</h4><p>通过把请求从⼀个对象传递到链条中下⼀个对象的方式，直到请求被处理完毕，以实现对象间的解耦。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.logging.Logger#log()<br>javax.servlet.Filter#doFilter()<br></code></pre></td></tr></table></figure><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><p>将操作封装到对象内，以便存储，传递和返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Runnable<br>javax.swing.Action<br></code></pre></td></tr></table></figure><h4 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h4><p>这个模式通常定义了⼀个语⾔的语法，然后解析相应语法的语句。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Pattern<br>java.text.Normalizer<br>java.text.Format<br></code></pre></td></tr></table></figure><h4 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h4><p>提供⼀个⼀致的方法来顺序访问集合中的对象，这个方法与底层的集合的具体实现⽆关。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Iterator<br>java.util.Enumeration<br></code></pre></td></tr></table></figure><h4 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h4><p>通过使⽤⼀个中间对象来进⾏消息分发以及减少类之间的直接依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Timer<br>java.util.concurrent.Executor#execute()<br>java.util.concurrent.ExecutorService#submit()<br>java.lang.reflect.Method#invoke()<br></code></pre></td></tr></table></figure><h4 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h4><p>⽣成对象状态的⼀个快照，以便对象可以恢复原始状态⽽不⽤暴露⾃身的内容。<code>Date</code>对象通过⾃身内部的⼀个 long 值来实现备忘录模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Date<br>java.io.Serializable<br></code></pre></td></tr></table></figure><h3 id="空对象模式"><a href="#空对象模式" class="headerlink" title="空对象模式"></a>空对象模式</h3><p>这个模式通过⼀个⽆意义的对象来代替没有对象这个状态。它使得你不⽤额外对空对象进⾏处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Collections#emptyList()<br>java.util.Collections#emptyMap()<br>java.util.Collections#emptySet()<br></code></pre></td></tr></table></figure><h4 id="观察者模式-1"><a href="#观察者模式-1" class="headerlink" title="观察者模式"></a>观察者模式</h4><p> 它使得⼀个对象可以灵活的将消息发送给感兴趣的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.EventListener<br>javax.servlet.http.HttpSessionBindingListener<br>javax.servlet.http.HttpSessionAttributeListener<br>javax.faces.event.PhaseListener<br></code></pre></td></tr></table></figure><h4 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h4><p>通过改变对象内部的状态，使得你可以在运⾏时动态改变⼀个对象的⾏为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Iterator<br>javax.faces.lifecycle.LifeCycle#execute()<br></code></pre></td></tr></table></figure><h4 id="策略模式-1"><a href="#策略模式-1" class="headerlink" title="策略模式"></a>策略模式</h4><p>使⽤这个模式来将⼀组算法封装成⼀系列对象。通过传递这些对象可以灵活的改变程序的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Comparator#compare()<br>javax.servlet.http.HttpServlet<br>javax.servlet.Filter#doFilter()<br></code></pre></td></tr></table></figure><h4 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h4><p>让⼦类可以重写方法的⼀部分，⽽不是整个重写，你可以控制⼦类需要重写那些操作。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Collections#sort()<br>java.io.InputStream#skip()<br>java.io.InputStream#read()<br>java.util.AbstractList#indexOf()<br></code></pre></td></tr></table></figure><h4 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h4><p>提供⼀个方便的可维护的方式来操作⼀组对象。它使得你在不改变操作的对象前提下，可以修改或者扩展对象的⾏为。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">javax.lang.model.element.Element and<br>javax.lang.model.element.ElementVisitor<br>javax.lang.model.type.TypeMirror and<br>javax.lang.model.type.TypeVisitor<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.cnblogs.com/yssjun/p/11102162.html">设计模式之⼯⼚模式（factory pattern）</a></li><li><a href="https://segmentfault.com/a/1190000040146574">深⼊理解单例设计模式</a></li><li><a href="https://www.cnblogs.com/chenssy/p/3357683.html">设计模式总结</a></li><li><a href="https://refactoringguru.cn/design-patterns/decorator">装饰模式</a></li><li><a href="https://refactoringguru.cn/design-patterns/chain-of-responsibility">责任链模式</a></li><li><a href="https://blog.winsky.wang/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/">设计模式常⻅⾯试题</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式 - Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式面试题汇总</title>
    <link href="/2024/02/28/quiz-spring-cloud/"/>
    <url>/2024/02/28/quiz-spring-cloud/</url>
    
    <content type="html"><![CDATA[<h1 id="2023年Spring全家桶面试题—图灵徐庶"><a href="#2023年Spring全家桶面试题—图灵徐庶" class="headerlink" title="2023年Spring全家桶面试题—图灵徐庶"></a>2023年Spring全家桶面试题—图灵徐庶</h1><h2 id="一、Spring-Framework"><a href="#一、Spring-Framework" class="headerlink" title="一、Spring Framework"></a>一、Spring Framework</h2><h3 id="1-谈谈你对Spring的理解"><a href="#1-谈谈你对Spring的理解" class="headerlink" title="1.谈谈你对Spring的理解"></a>1.谈谈你对Spring的理解</h3><h4 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h4><blockquote><p>Spring是一个生态，可以构建Java应用所需的一切基础设施。</p><p>通常Spring指的就是Spring Framework。</p></blockquote><h4 id="核心解释"><a href="#核心解释" class="headerlink" title="核心解释"></a>核心解释</h4><blockquote><p>Spring是一个轻量级的开源容器框架。</p><p>Spring是为了解决企业级应用开发的业务逻辑层和其他各层对象和对象直接的耦合问题</p><p>Spring是一个<strong>IoC</strong>和<strong>AOP</strong>的容器框架。</p><p>IoC：控制反转</p><p>AOP：面向切面编程</p><p>容器：包含并管理应用对象的生命周期</p></blockquote><h3 id="2-Spring的优缺点是什么？"><a href="#2-Spring的优缺点是什么？" class="headerlink" title="2.Spring的优缺点是什么？"></a>2.Spring的优缺点是什么？</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li><p>方便解耦，简化开发</p><p>通过Spring提供的IoC容器，我们可以将对象之间的依赖关系交由Spring进行控制，避免硬编码所造成的过度程序耦合。</p><p>有了Spring，用户不必再为单实例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</p><p>人话：集中管理对象，对象和对象之间的耦合度减低，方便维护对象。 </p></li><li><p>AOP编程的支持</p><p>通过Spring提供的AOP功能，方便进行面向切面的编程，许多不容易用传统OOP实现的功能可以通过AOP轻松应付。</p><p>Spring的AOP支持允许将一些通用任务如安全、事务、日志等进行集中式管理，从而提供了更好的复用.</p><p>人话： 在不修改代码的情况下可以对业务代码进行增强 减少重复代码 提高开发效率 维护方便 </p></li><li><p>声明事物的支持</p><p>在Spring中，我们可以从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活地进行事务的管理，提高开发效率和质量。</p><p>人话：提高开发效率，只需要一个简单注解@Transactional </p></li><li><p>方便程序的测试</p><p>可以用非容器依赖的编程方式进行几乎所有的测试工作，在Spring里，测试不再是昂贵的操作，而是随手可做的事情。例如：Spring对Junit4支持，可以通过注解方便的测试Spring程序。</p><p>人话： Spring实现测试 使我们 可以结合junit非常方便测试Spring Bean SpringMVC </p></li><li><p>方便集成各种优秀框架</p><p>Spring不排斥各种优秀的开源框架，相反，Spring可以降低各种框架的使用难度，Spring提供了对各种优秀框架。</p><p>（如Struts，Hibernate、Hessian、Quartz）等的直接支持。</p><p>人话： 拥有非常强大粘合度、集成能力非常，只需要简单配置就可以集成第三方框架</p></li><li><p>降低Java EE API的使用难度</p><p>Spring对很多难用的Java EE API（如JDBC，JavaMail，远程调用等）提供了一个薄薄的封装层，通过Spring的简易封装，这些Java EE API的使用难度大为降低。</p><p>人话：简化开发， 帮我封装很多功能性代码</p></li><li><p>Java 源码是经典学习范例</p><p>Spring的源码设计精妙、结构清晰、匠心独用，处处体现着大师对Java设计模式灵活运用以及对Java技术的高深造 诣。Spring框架源码无疑是Java技术的最佳实践范例。如果想在短时间内迅速提高自己的Java技术水平和应用开发水平，学习和研究Spring源码将会使你收到意想不到的效果。</p><p>人话：学习到了Spring底层的实现、反射..设计模式 都是我们值得学习， 提供非常多的扩展接口供外部进行扩展</p></li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>从应用层面来说是没有缺点的</li><li>简化开发， 如果想深入到底层去了解就非常困难（上层使用越简单、底层封装得就越复杂）</li><li>源码缺点：由于spring 大而全（要集成这么多框架、提供非常非常多的扩展点，经过十多年的代码迭代） 代码量非常庞大，一百多万 对于去深入学习源码带来了一定困难。</li></ol><h2 id="二、Spring-IoC"><a href="#二、Spring-IoC" class="headerlink" title="二、Spring IoC"></a>二、Spring IoC</h2><h3 id="3-什么是Spring-IoC-容器？有什么作用？"><a href="#3-什么是Spring-IoC-容器？有什么作用？" class="headerlink" title="3.什么是Spring IoC 容器？有什么作用？"></a>3.什么是Spring IoC 容器？有什么作用？</h3><blockquote><p>控制反转即IoC (Inversion of Control)，它把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的”控制反转”概念就是对组件对象控制权的转移，从程序代码本身转移到了外部容器。 Spring IoC 负责创建对象，管理对象。</p><p>通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。</p><p>对于 IoC 来说，最重要的就是容器。容器管理着 Bean 的生命周期，控制着 Bean 的依赖注入。</p></blockquote><p><strong>控制反转(IoC)有什么作用</strong></p><p>管理对象的创建和依赖关系的维护。对象的创建并不是一件简单的事，在对象关系比较复杂时，如果依赖关系需要程序猿来维护的话，那是相当头疼的</p><p>解耦，由容器去维护具体的对象</p><p>托管了类的产生过程，比如我们需要在类的产生过程中做一些处理，最直接的例子就是代理，如果有容器程序可以把这部分处理交给容器，应用程序则无需去关心类是如何完成代理的</p><p>人话：作用：</p><p>控制反转控制了什么？</p><p>UserService service&#x3D;new UserService(); &#x2F;&#x2F; 耦合度太高 、维护不方便</p><p>引入IoC 就将创建对象的控制权交给Spring的IoC。以前由程序员自己控制对象创建， 现在交给Spring的IoC去创建，如果要去使用对象需要通过DI（依赖注入）@Autowired 自动注入，就可以使用对象 ;</p><p>优点： 1.集中管理对象、方便维护 。2.降低耦合度</p><p> IoC的优点是什么？</p><ul><li>最小的代价和最小的侵入性使松散耦合得以实现。 </li><li>IoC容器支持加载服务时的饿汉式初始化和懒加载。</li></ul><h3 id="4-Spring-IoC-的实现机制是什么？"><a href="#4-Spring-IoC-的实现机制是什么？" class="headerlink" title="4.Spring IoC 的实现机制是什么？"></a>4.Spring IoC 的实现机制是什么？</h3><blockquote><p>Spring 中的 IoC 的实现原理就是工厂模式加反射机制。</p></blockquote><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Fruit</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Apple</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Fruit</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;Apple&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Orange</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Fruit</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;Orange&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Fruit <span class="hljs-title function_">getInstance</span><span class="hljs-params">(String ClassName)</span>&#123;<br>        Fruit f=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>        f = (Fruit)Class.forName(ClassName).newInstance();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> f;<br>        &#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] a)</span>&#123;<br>        <span class="hljs-type">Fruit</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> Factory.getInstance(<span class="hljs-string">&quot;Reflect.Apple&quot;</span>);<br>        <span class="hljs-keyword">if</span>(f!=<span class="hljs-literal">null</span>)&#123;<br>            f.eat();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-什么是Spring的依赖注入-DI-？IoC和DI的区别是什么"><a href="#5-什么是Spring的依赖注入-DI-？IoC和DI的区别是什么" class="headerlink" title="5.什么是Spring的依赖注入(DI)？IoC和DI的区别是什么"></a>5.什么是Spring的依赖注入(DI)？IoC和DI的区别是什么</h3><blockquote><p>很多人把IoC和DI说成一个东西，笼统来说的话是没有问题的，但是本质上还是有所区别的，希望大家能够严谨一点，IoC和DI是从不同的角度描述的同一件事，IoC是从容器的角度描述，而DI是从应用程序的角度来描述，也可以这样说，IoC是依赖倒置原则的设计思想，而 DI是具体的实现方式。</p><p>在面向对象设计的软件系统中，底层的实现都是由N个对象组成的，所有的对象通过彼此的合作，最终实现系统的业务逻辑。</p><img src="/2024/02/28/quiz-spring-cloud/image-20240229125907430.png" class="" title="image-20240229125907430"><p>有一个对象出了问题，就可能会影响到整个流程的正常运转。现在，伴随着工业级应用的规模越来越庞大，对象之间的依赖关系也越来越复杂，经常会出现对象之间的多重依赖性关系，因此，架构师和设计师对于系统的分析和设计，将面临更大的挑战。对象之间耦合度过高的系统，必然会出现牵一发而动全身的情形。</p><img src="/2024/02/28/quiz-spring-cloud/image-20240229125846005.png" class="" title="image-20240229125846005"><p>大家看到了吧，由于引进了中间位置的”第三方”，也就是IoC容器，对象和对象之间没有了耦合关系， 它起到了一种类似”粘合剂”的作用，把系统中的所有对象粘合在一起发挥作用，如果没有这个”粘合剂”，对象与对象之间会彼此失去联系，这就是有人把IoC容器比喻成”粘合剂”的由来。</p></blockquote><h3 id="6-紧耦合和松耦合有什么区别？"><a href="#6-紧耦合和松耦合有什么区别？" class="headerlink" title="6.紧耦合和松耦合有什么区别？"></a>6.紧耦合和松耦合有什么区别？</h3><blockquote><p>紧耦合：紧密耦合是指类之间高度依赖。</p><p>松耦合：松耦合是通过促进单一职责和关注点分离、依赖倒置的设计原则来实现的。</p></blockquote><h3 id="7-BeanFactory的作用"><a href="#7-BeanFactory的作用" class="headerlink" title="7.BeanFactory的作用"></a>7.BeanFactory的作用</h3><blockquote><ul><li>BeanFactory是Spring中<strong>非常核心的一个顶层接口</strong>；</li><li>它是Bean的”工厂”、它的<strong>主要职责就是生产Bean</strong>；</li><li>它实现了<strong>简单工厂的设计模式</strong>，通过调用getBean传入标识生产一个Bean；</li><li>它有非常多的实现类、每个工厂都有不同的职责（单一职责）功能，最强大的工厂是：DefaultListableBeanFactory Spring底层就是使用的该实现工厂进行生产Bean的</li><li>BeanFactory它也是容器 Spring容器（管理着Bean的生命周期）</li></ul><img src="/2024/02/28/quiz-spring-cloud/image-20240229130120100.png" class="" title="image-20240229130120100"></blockquote><h3 id="8-BeanDefinition的作用"><a href="#8-BeanDefinition的作用" class="headerlink" title="8. BeanDefinition的作用"></a>8. BeanDefinition的作用</h3><blockquote><p>它主要负责存储Bean的<strong>定义信息</strong>:决定Bean的生产方式。如：spring.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.tuling.User&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span> <span class="hljs-attr">lazy</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">abstract</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">....</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;xushu&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后续BeanFactory根据这些信息就行生产Bean： 比如实例化 可以通过class进行反射进而得到实例对象 ， 比如lazy 则不会在IoC加载时创建Bean</p></blockquote><h3 id="9-BeanFactory-和-ApplicationContext有什么区别？"><a href="#9-BeanFactory-和-ApplicationContext有什么区别？" class="headerlink" title="9. BeanFactory 和 ApplicationContext有什么区别？"></a>9. <strong>BeanFactory 和 ApplicationContext有什么区别？</strong></h3><blockquote><p>BeanFactory和ApplicationContext是Spring的两大核心接口，都可以当做Spring的容器。其中ApplicationContext是 BeanFactory的子接口。</p><p>依赖关系 </p><p>BeanFactory：是Spring里面最顶层的接口，包含了各种Bean的定义，读取bean配置文档，管理bean的加载、实例化，控制bean的生命周期，维护bean之间的依赖关系。BeanFactory 简单粗暴，可以理解为就是个 HashMap，Key 是 BeanName，Value 是 Bean 实例。通常只提供注册（put），获取（get）这两个功能。我们可以称之为 **”低级容器”**。</p><p>ApplicationContext 可以称之为 **”高级容器”**。因为他比 BeanFactory 多了更多的功能。他继承了多个接口。因此具备了更多的功能。例如资源的获取，支持多种消息（例如 JSP tag 的支持），对 BeanFactory 多了工具级别的支持等待。所以你看他的名字，已经不是 BeanFactory 之类的工厂了，而是 “应用上下文”， 代表着整个大容器的所有功能。该接口定义了一个 refresh 方法，此方法是所有阅读 Spring 源码的人的最熟悉的方法，用于刷新整个容器，即重新加载&#x2F;刷新所有的 bean。 </p><p>ApplicationContext接口作为BeanFactory的派生，除了提供BeanFactory所具有的功能外，还提供了更完整的框架功能。</p><p>官方文档截图：</p><img src="/2024/02/28/quiz-spring-cloud/image-20240229131015957.png" class="" title="image-20240229131015957"></blockquote><h3 id="10-BeanFactory-和FactoryBean有什么区别？"><a href="#10-BeanFactory-和FactoryBean有什么区别？" class="headerlink" title="10. BeanFactory 和FactoryBean有什么区别？"></a>10. BeanFactory 和FactoryBean有什么区别？</h3><blockquote><p>BeanFactory是一个工厂，也就是一个容器，是来管理和生产bean的；</p><p>FactoryBean是一个bean，但是它是一个特殊的bean，所以也是由BeanFactory来管理的，它是一个接口，他必须被一个bean去实现。</p><p>不过FactoryBean不是一个普通的Bean，它会表现出工厂模式的样子，是一个能产生或者修饰对象生成的工厂Bean，里面的getObject()就是用来获取FactoryBean产生的对象。所以在BeanFactory中使用”&amp;”来得到FactoryBean本身，用来区分通过容器获取FactoryBean产生的对象还是获取FactoryBean本身。</p></blockquote><h3 id="11-IoC容器的加载过程："><a href="#11-IoC容器的加载过程：" class="headerlink" title="11. IoC容器的加载过程："></a>11. IoC容器的加载过程：</h3><blockquote><p><strong>从概念态---&gt;定义态的过程</strong> </p><ol><li>实例化一个ApplicationContext的对象； </li><li>调用bean工厂后置处理器完成扫描；</li><li>循环解析扫描出来的类信息； </li><li>实例化一个BeanDefinition对象来存储解析出来的信息； </li><li>把实例化好的beanDefinition对象put到beanDefinitionMap当中缓存起来，以便后面实例化bean；</li><li>再次调用其他bean工厂后置处理器；</li></ol><p><strong>从定义态到纯净态</strong></p><ol start="7"><li>当然Spring还会干很多事情，比如国际化，比如注册BeanPostProcessor等等，如果我们只关心如何实例化一个bean的话那么这一步就是spring调用finishBeanFactoryInitialization方法来实例化单例的bean，实例化之前Spring要做验证，需要遍历所有扫描出来的类，依次判断这个bean是否Lazy，是否prototype，是否 abstract等等； </li><li>如果验证完成Spring在实例化一个bean之前需要推断构造方法，因为Spring实例化对象是通过构造方法反射，故而需要知道用哪个构造方法； </li><li>推断完构造方法之后Spring调用构造方法反射<strong>实例化</strong>一个对象；注意我这里说的是对象、对象、对象；这个时候对象已经实例化出来了，但是并不是一个完整的bean，最简单的体现是这个时候实例化出来的对象属性是没有注入，所以不是一个完整的bean；</li></ol><p><strong>从纯净态到成熟态</strong></p><ol start="10"><li>Spring处理合并后的beanDefinition </li><li>判断是否需要完成<strong>属性注入</strong></li><li>如果需要完成属性注入，则开始注入属性</li></ol><p><strong>初始化</strong></p><ol start="13"><li>判断bean的类型回调Aware接口</li><li>调用生命周期回调方法</li><li>如果需要代理则完成代理</li></ol><p><strong>创建完成</strong></p><ol start="16"><li>put到单例池——bean完成——存在Spring容器当中</li></ol><img src="/2024/02/28/quiz-spring-cloud/image-20240229131617951.png" class="" title="image-20240229131617951"></blockquote><img src="/2024/02/28/quiz-spring-cloud/image-20240229131600091.png" class="" title="image-20240229131600091"><h3 id="12-你知道Spring的哪些扩展点？在什么时候调用？"><a href="#12-你知道Spring的哪些扩展点？在什么时候调用？" class="headerlink" title="12.你知道Spring的哪些扩展点？在什么时候调用？"></a>12.你知道Spring的哪些扩展点？在什么时候调用？</h3><blockquote><p>Spring中非常非常多的扩展接口，当然你也不需要全部回答，可以挑重点回答：</p></blockquote><ol><li><p>执行BeanFactoryPostProcessor的postProcessBeanFactory方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 作用： 在注册BeanDefinition的可以对beanFactory进行扩展 后</span><br><span class="hljs-comment"> * 调用时机： Ioc加载时注册BeanDefinition 的时候会调用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanFactoryPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryPostProcessor</span> &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>执行BeanDefinitionRegistryPostProcessor的postProcessBeanDefinitionRegistry方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 作用：动态注册BeanDefinition</span><br><span class="hljs-comment"> * 调用时机： Ioc加载时注册BeanDefinition 的时候会调用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanDefinitionRegistryPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanDefinitionRegistryPostProcessor</span> &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanDefinitionRegistry</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br><span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(Car.class);<br>registry.registerBeanDefinition(<span class="hljs-string">&quot;car&quot;</span>,beanDefinition);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>加载BeanPostProcessor实现类 : <strong>在Bean的生命周期会调用9次Bean的后置处理器</strong></p></li><li><p>创建所有单例bean</p><img src="/2024/02/28/quiz-spring-cloud/image-20240301175939535.png" class="" title="image-20240301175939535"></li></ol><p><strong>初始化阶段:</strong></p><ol start="5"><li>初始化阶段调用XXXAware接口的SetXXXAware方法 ：</li></ol><h5 id="生命周期回调：-初始化、销毁"><a href="#生命周期回调：-初始化、销毁" class="headerlink" title="生命周期回调： 初始化、销毁"></a>生命周期回调： 初始化、销毁</h5><ol start="6"><li>执行BeanPostProcessor实现类的postProcessBeforeInitialization方法</li><li>执行InitializingBean实现类的afterPropertiesSet方法</li><li>执行bean的init-method属性指定的初始化方法</li><li>执行BeanPostProcessor实现类的postProcessAfterInitialization方法</li><li>初始化完成</li><li>关闭容器，执行DiposibleBean实现类的destory</li><li>执行bean的destroy-method属性指定的初始化方法</li></ol><h2 id="三、Spring-Beans"><a href="#三、Spring-Beans" class="headerlink" title="三、Spring Beans"></a>三、Spring Beans</h2><h3 id="13-什么是Spring-beans"><a href="#13-什么是Spring-beans" class="headerlink" title="13. 什么是Spring beans?"></a>13. 什么是Spring beans?</h3><blockquote><p>Spring 官方文档对 bean 的解释是：</p><p>In Spring， the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans. A bean is an object that is instantiated， assembled， and otherwise managed by a Spring IoC container.</p><p>翻译过来就是：</p><p>在 Spring 中，构成应用程序主干并由Spring IoC容器管理的对象称为bean。bean是一个由Spring IoC容器实例化、组装和管理的对象。</p><p>概念简单明了，我们提取处关键的信息：</p><ol><li><p>bean是对象，一个或者多个不限定</p></li><li><p>bean由Spring中一个叫IoC的东西管理</p></li></ol></blockquote><h3 id="14-配置Bean有哪几种方式？"><a href="#14-配置Bean有哪几种方式？" class="headerlink" title="14. 配置Bean有哪几种方式？"></a>14. 配置Bean有哪几种方式？</h3><ol><li><p>xml: &lt;bean class&#x3D;&quot;com.tuling.UserService&quot; id&#x3D;&quot;&quot;&gt;</p></li><li><p>注解：@Component(@Controller 、@Service、@Repostory) 前提：需要配置扫描包&lt;component-scan&gt; 反射调用构造方法 </p></li><li><p>javaConfig: @Bean 可以自己控制实例化过程</p></li><li><p>@import 3种方式</p></li></ol><h3 id="15-解释Spring支持的几种bean的作用域"><a href="#15-解释Spring支持的几种bean的作用域" class="headerlink" title="15. 解释Spring支持的几种bean的作用域"></a>15. 解释Spring支持的几种bean的作用域</h3><blockquote><p>Spring框架支持以下五种bean的作用域：</p><ul><li><strong>singleton :</strong> bean在每个Spring IoC 容器中只有一个实例。</li><li><strong>prototype</strong>：一个bean的定义可以有多个实例。 </li><li><strong>request</strong>：每次http请求都会创建一个bean，该作用域仅在基于web的Spring ApplicationContext情形下有效。 </li><li><strong>session</strong>：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</li><li><strong>application</strong>：全局 Web 应用程序范围的范围标识符。</li></ul><p><strong>注意：</strong> 缺省的Spring bean 的作用域是Singleton。使用 prototype 作用域需要慎重的思考，因为频繁创建和销毁 bean会带来很大的性能开销。</p></blockquote><h3 id="16-单例bean的优势"><a href="#16-单例bean的优势" class="headerlink" title="16. 单例bean的优势"></a>16. 单例bean的优势</h3><blockquote><p>由于不会每次都新创建新对象所以有一下几个性能上的优势： </p><p>1.减少了新生成实例的消耗新生成实例消耗包括两方面，第一，spring会通过反射或者cglib来生成bean实例这都是耗性能的操作，其次给对象分配内存也会涉及复杂算法。 提供服务器内存的利用率 ，减少服务器内存消耗。</p><p>2.减少jvm垃圾回收由于不会给每个请求都新生成bean实例，所以自然回收的对象少了。</p><p>3.可以快速获取到bean因为单例的获取bean操作除了第一次生成之外其余的都是从缓存里获取的所以很快。</p></blockquote><h3 id="17-Spring实例化bean方式的几种方式"><a href="#17-Spring实例化bean方式的几种方式" class="headerlink" title="17.Spring实例化bean方式的几种方式"></a>17.Spring实例化bean方式的几种方式</h3><blockquote><ol><li><p>构造器方式（反射）；</p></li><li><p>静态工厂方式； factory-method</p></li><li><p>实例工厂方式(@Bean)； factory-bean+factory-method</p></li><li><p>FactoryBean方式</p></li></ol></blockquote><h3 id="18-Spring框架中的单例bean是线程安全的吗？（阿里一面）"><a href="#18-Spring框架中的单例bean是线程安全的吗？（阿里一面）" class="headerlink" title="18.Spring框架中的单例bean是线程安全的吗？（阿里一面）"></a>18.Spring框架中的单例bean是线程安全的吗？（阿里一面）</h3><blockquote><p>不是，Spring框架中的单例bean不是线程安全的。</p><p>spring 中的 bean 默认是单例模式，spring 框架并没有对单例 bean 进行多线程的封装处理。</p><p>实际上大部分时候 spring bean 无状态的（比如 dao 类），所以某种程度上来说 bean 也是安全的，但如果 bean 有状态的话（比如 view model 对象），那就要开发者自己去保证线程安全了，最简单的就是改变 bean 的作用域，把”singleton”变更为”prototype”，这样请求 bean 相当于 new Bean()了，所以就可以保证线程安全了。</p><ul><li>有状态就是有数据存储功能（比如成员变量读写）。</li><li>无状态就是不会保存数据。</li></ul></blockquote><h3 id="19-Spring如何处理线程并发问题？"><a href="#19-Spring如何处理线程并发问题？" class="headerlink" title="19.Spring如何处理线程并发问题？"></a>19.Spring如何处理线程并发问题？</h3><blockquote><p>在一般情况下，只有无状态的Bean才可以在多线程环境下共享，在Spring中，绝大部分Bean都可以声明为singleton作用域，因为Spring对一些Bean中非线程安全状态采用ThreadLocal进行处理，解决线程安全问题。 ThreadLocal和线程同步机制都是为了解决多线程中相同变量的访问冲突问题。同步机制采用了”时间换空间”的方式，仅提供一份变量，不同的线程在访问前需要获取锁，没获得锁的线程则需要排队。而ThreadLocal采用了”空间换时间”的方式。</p><p>ThreadLocal会为每一个线程提供一个独立的变量副本，从而隔离了多个线程对数据的访问冲突。因为每一个线程都拥有自己的变量副本，从而也就没有必要对该变量进行同步了。ThreadLocal提供了线程安全的共享对象，在编写多线程代码时，可以把不安全的变量封装进ThreadLocal。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> 徐庶 QQ:1092002729</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Slogan</span> 致敬大师，致敬未来的你</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 单例Bean的情况 如果在类中声明成员变量 并且有读写操作（有状态），就是线程不安全 </span><br><span class="hljs-comment"> 解决： </span><br><span class="hljs-comment"> 1.设置为多例 </span><br><span class="hljs-comment"> 2.将成员变量放在ThreadLocal </span><br><span class="hljs-comment"> 3.同步锁 会影响服务器吞吐量 但是! 只需要把成员变量声明在方法中（无状态），</span><br><span class="hljs-comment"> * 单例Bean是线程安全的</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Run</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(<br>            MainConfig.class);<br><br>        <span class="hljs-comment">// 线程一</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> applicationContext.getBean(UserService.class);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() ‐&gt; &#123;<br>            System.out.println(bean.welcome(<span class="hljs-string">&quot;张三&quot;</span>));<br> &#125;).start();<br><br>        <span class="hljs-comment">// 线程二</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">bean2</span> <span class="hljs-operator">=</span> applicationContext.getBean(UserService.class);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() ‐&gt; &#123;<br>            System.out.println(bean2.welcome(<span class="hljs-string">&quot;李四&quot;</span>));<br> &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h3 id="20-什么是bean装配？"><a href="#20-什么是bean装配？" class="headerlink" title="20. 什么是bean装配？"></a>20. 什么是bean装配？</h3><blockquote><p>装配，或bean 装配是指在Spring 容器中把bean组装到一起，前提是容器需要知道bean的依赖关系，如何通过依赖注入来把它们装配到一起。</p></blockquote><h3 id="21-什么是bean的自动装配？"><a href="#21-什么是bean的自动装配？" class="headerlink" title="21.什么是bean的自动装配？"></a>21.什么是bean的自动装配？</h3><blockquote><p>在Spring框架中，在配置文件中设定bean的依赖关系是一个很好的机制，Spring 容器能够自动装配相互合作的bean，这意味着容器不需要和配置，能通过Bean工厂自动处理bean之间的协作。这意味着 Spring可以通过向Bean Factory中注入的方式自动搞定bean之间的依赖关系。自动装配可以设置在每个bean上，也可以设定在特定的bean上。</p></blockquote><h3 id="22-自动装配有哪些限制（需要注意）？"><a href="#22-自动装配有哪些限制（需要注意）？" class="headerlink" title="22. 自动装配有哪些限制（需要注意）？"></a>22. 自动装配有哪些限制（需要注意）？</h3><blockquote><ul><li>一定要声明set方法</li><li>覆盖： 你仍可以用 &lt;constructor-arg &gt;和 &lt; property &gt; 配置来定义依赖，这些配置将始终覆盖自动注入。</li><li>基本数据类型：不能自动装配简单的属性，如基本数据类型、字符串和类。 (手动注入还是可以注入基本数据类型的 &lt;property value&#x3D;&quot;&quot; @Value)</li><li>模糊特性：自动装配不如显式装配精确，如果有可能尽量使用显示装配。</li></ul><p>所以更推荐使用手动装配(@Autowired（根据类型、再根据名字） ref&#x3D;&quot;&quot; 这种方式 更加灵活更加清晰 )</p></blockquote><h3 id="23-Spring-自动装配-bean-有哪些方式？"><a href="#23-Spring-自动装配-bean-有哪些方式？" class="headerlink" title="23. Spring 自动装配 bean 有哪些方式？"></a>23. Spring 自动装配 bean 有哪些方式？</h3><blockquote><p>在Spring中，对象无需自己查找或创建与其关联的其他对象，由容器负责把需要相互协作的对象引用赋予各个对象，使用autowire来配置自动装载模式。</p><p>在Spring框架xml配置中共有5种自动装配：</p><ul><li>no：默认的方式是不进行自动装配的，通过手工设置ref属性来进行装配bean。@Autowired 来进行手动指定需要自动注入的属性</li><li>byName：通过bean的名称进行自动装配，如果一个bean的 property 与另一bean 的name 相同，就进行自动装配。</li><li>byType：通过参数的数据类型进行自动装配。 </li><li>constructor：利用构造函数进行装配，并且构造函数的参数通过byType进行装配。 </li><li>autodetect：自动探测，如果有构造方法，通过 construct的方式自动装配，否则使用 byType的方式自动装配。 （在Spring3.0+弃用）</li></ul></blockquote><h3 id="24-有哪些生命周期回调方法？有哪几种实现方式？"><a href="#24-有哪些生命周期回调方法？有哪几种实现方式？" class="headerlink" title="24.有哪些生命周期回调方法？有哪几种实现方式？"></a>24.有哪些生命周期回调方法？有哪几种实现方式？</h3><blockquote><p>有两个重要的bean 生命周期方法，第一个是init ， 它是在容器加载bean的时候被调用。第二个方法是 destroy 它是在容器卸载类的时候被调用。</p><p>bean 标签有两个重要的属性（init-method和destroy-method）。用它们你可以自己定制初始化和注销方法。它们也有相应的注解（@PostConstruct和@PreDestroy）。</p></blockquote><h3 id="20-Spring-在加载过程中Bean有哪几种形态："><a href="#20-Spring-在加载过程中Bean有哪几种形态：" class="headerlink" title="20.Spring 在加载过程中Bean有哪几种形态："></a>20.Spring 在加载过程中Bean有哪几种形态：</h3><blockquote><img src="/2024/02/28/quiz-spring-cloud/image-20240301183401545.png" class="" title="image-20240301183401545"></blockquote><h3 id="25-解释Spring框架中bean的生命周期"><a href="#25-解释Spring框架中bean的生命周期" class="headerlink" title="25. 解释Spring框架中bean的生命周期"></a>25. 解释Spring框架中bean的生命周期</h3><blockquote><p>Bean生命周期：指定的就是Bean从创建到销毁的整个过程: 分4步：</p><ol><li><p>实例化</p><p>a.  通过反射去推断构造函数进行实例化</p><p>b.  实例工厂、 静态工厂</p></li><li><p>属性赋值</p><p>a.  解析自动装配（byname bytype constractor none @Autowired） DI的体现</p><p>b.  循环依赖</p></li><li><p>初始化</p><p>a.  调用XXXAware回调方法</p><p>b.  调用初始化生命周期回调（三种）</p><p>c.  如果bean实现aop 创建动态代理</p></li><li><p>销毁</p><p>a.  在spring容器关闭的时候进行调用</p><p>b.  调用销毁生命周期回调</p></li></ol><p>下图展示了bean装载到Spring应用上下文中的一个典型的生命周期过程。</p><img src="/2024/02/28/quiz-spring-cloud/image-20240301183449831.png" class="" title="image-20240301183449831"><p>bean在Spring容器中从创建到销毁经历了若干阶段，每一阶段都可以针对Spring如何管理bean进行个性化定制。正如你所见，在bean准备就绪之前，bean工厂执行了若干启动步骤。</p><p>我们对上图进行详细描述： Spring对bean进行实例化； Spring将值和bean的引用注入到bean对应的属性中；</p><p>如果bean实现了BeanNameAware接口，Spring将bean的ID传递给setBean-Name()方法；</p><p>如果bean实现了BeanFactoryAware接口，Spring将调用setBeanFactory()方法，将BeanFactory容器实例传入；</p><p>如果bean实现了ApplicationContextAware接口，Spring将调用setApplicationContext()方法，将bean所在的应用上下文的引用传入进来；</p><p>如果bean实现了BeanPostProcessor接口，Spring将调用它们的post-ProcessBeforeInitialization()方法；</p><p>如果bean实现了InitializingBean接口，Spring将调用它们的after-PropertiesSet()方法。类似地，如果bean使用 initmethod声明了初始化方法，该方法也会被调用；</p><p>如果bean实现了BeanPostProcessor接口，Spring将调用它们的post-ProcessAfterInitialization()方法；</p><p>此时，bean已经准备就绪，可以被应用程序使用了，它们将一直驻留在应用上下文中，直到该应用上下文被销毁；</p><p>如果bean实现了DisposableBean接口，Spring将调用它的destroy()接口方法。同样，如果bean使用destroy-method声明了销毁方法，该方法也会被调用。</p><p>现在你已经了解了如何创建和加载一个Spring容器。但是一个空的容器并没有太大的价值，在你把东西放进去之前，它里面什么都没有。为了从Spring的DI(依赖注入)中受益，我们必须将应用对象装配进Spring容器中。</p></blockquote><h3 id="26-Spring是如何解决Bean的循环依赖？"><a href="#26-Spring是如何解决Bean的循环依赖？" class="headerlink" title="26. Spring是如何解决Bean的循环依赖？"></a>26. Spring是如何解决Bean的循环依赖？</h3><blockquote><p>Spring是如何解决的循环依赖： 采用三级缓存解决的 就是三个Map ； 关键： 一定要有一个缓存保存它的早期对象作为死循环的出口</p><ol><li><p>一级缓存：存储完整的Bean</p></li><li><p>二级缓存： 避免多重循环依赖的情况 重复创建动态代理。</p></li><li><p>三级缓存：</p><p>a.  缓存是函数接口：通过lambda 把方法传进去（ 把Bean的实例和Bean名字传进去（aop创建） ）</p><p>b.  不会立即调：（如果在实例化后立即调用的话：所有的aop 不管bean是否循环依赖都会在 实例化后创建 proxy， 正常Bean 其实spring还是希望遵循生命周期在初始化创建动态代理， 只能循环依赖才创建)</p><p>c.  会在 ABA (第二次getBean(A) 才会去调用三级缓存（如果实现了aop才会创建动态代理，如果没有实现依然返回的Bean的实例））</p><p>d.  放入二级缓存（避免重复创建）</p></li></ol><img src="/2024/02/28/quiz-spring-cloud/image-20240301183922079.png" class="" title="image-20240301183922079"><p>夺命连环问：</p><ol><li><p>二级缓存能不能解决循环依赖？</p><p>a.  如果只是死循环的问题： 一级缓存就可以解决 ：无法避免在并发下获取不完整的Bean?</p><p>b.  二级缓存也可以解决循环依赖： 只不过如果出现重复循环依赖 会多次创建aop的动态代理</p></li><li><p>Spring有没有解决多例Bean的循环依赖？</p><p>a.  多例不会使用缓存进行存储（多例Bean每次使用都需要重新创建）</p><p>b.  不缓存早期对象就无法解决循环</p></li><li><p>Spring有没有解决构造函数参数Bean的循环依赖？</p><ol><li>构造函数的循环依赖也是会报错</li><li>可以通过人工进行解决：@Lazy<ol><li>就不会立即创建依赖的bean了</li><li>而是等到用到才通过动态代理进行创建</li></ol></li></ol></li></ol></blockquote><h3 id="27-Spring如何避免在并发下获取不完整的Bean"><a href="#27-Spring如何避免在并发下获取不完整的Bean" class="headerlink" title="27.Spring如何避免在并发下获取不完整的Bean?"></a>27.Spring如何避免在并发下获取不完整的Bean?</h3><blockquote><p>双重检查锁</p><ul><li>为什么一级缓存不加到锁里面：<ul><li>性能：避免已经创建好的Bean阻塞等待</li></ul></li></ul><img src="/2024/02/28/quiz-spring-cloud/image-20240301184207118.png" class="" title="image-20240301184207118"></blockquote><h3 id="28-BeanDefinition的加载过程"><a href="#28-BeanDefinition的加载过程" class="headerlink" title="28. BeanDefinition的加载过程"></a>28. BeanDefinition的加载过程</h3><blockquote><p>BeanDefinition的加载过程就是将 概念态的Bean注册为定义态的Bean不同的Spring上下文会有不同的注册过程，但是会用共同的api步骤：</p><ol><li><p>通过BeanDefinitionReader 将配置类(AnnotatedBeanDefinitionReader)（xml文件:XmlBeanDefinitionReader) 注册为BeanDefinition</p></li><li><p>解析配置类ConfigurationClassParser(xml文件:BeanDefinitionDocumentReader）</p></li><li><p>不同的注解（xml节点）有不同的解析器</p><ol><li>比如ComponentScan 需要通过ClassPathBeanDefinitionScanner扫描所有类找到类上面有 @Import的类</li></ol></li><li><p>将读取到的Bean定义信息通过BeanDefinitionRegistry注册为一个BeanDefinition</p></li></ol></blockquote><h3 id="29-如何在Spring所有BeanDefinition注册完后做扩展？"><a href="#29-如何在Spring所有BeanDefinition注册完后做扩展？" class="headerlink" title="29. 如何在Spring所有BeanDefinition注册完后做扩展？"></a>29. 如何在Spring所有BeanDefinition注册完后做扩展？</h3><blockquote><p>通常可以使用beanFactoryPostProcessor 对已注册的BeanDefinition进行修改、或者通过它的子接口BeanDefinitionRegistryPostProcessor 再进行注册</p></blockquote><h3 id="30-如何在Spring所有Bean创建完后做扩展？"><a href="#30-如何在Spring所有Bean创建完后做扩展？" class="headerlink" title="30. 如何在Spring所有Bean创建完后做扩展？"></a>30. 如何在Spring所有Bean创建完后做扩展？</h3><blockquote><p>哪里才算所有的Bean创建完： new ApplicationContext()----&gt;refresh() &gt;finishBeanFactoryInitialization（循环所有的BeanDefinition，通过BeanFactory.getBean()生成所有的Bean）这个循环结束之后所有的bean也就创建完了。</p></blockquote><h3 id="31、Spring容器启动时，为什么先加载BeanFactoryPostProcess"><a href="#31、Spring容器启动时，为什么先加载BeanFactoryPostProcess" class="headerlink" title="31、Spring容器启动时，为什么先加载BeanFactoryPostProcess"></a>31、Spring容器启动时，为什么先加载BeanFactoryPostProcess</h3><blockquote><ol><li>因为BeanDefinition会在IoC容器加载的先注册， 而BeanFactoryPostProcess就是在所有的BeanDefinition注册完后做扩展的，所以要先加载BeanFactoryPostProcess</li><li>解析配置类的组件 它就实现BeanFactoryPostProcess， 所以要先去加载BeanFactoryPostProcess</li></ol><p>方式一 基于SmartInitializingSingleton接口</p><p>Source</p><p>在创建所有单例Bean的方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">finishBeanFactoryInitialization(beanFactory);<br></code></pre></td></tr></table></figure><p>SmartInitializingSingleton接口是在所有的Bean实例化完成以后，Spring回调的方法，所以这里也是一个扩展点，可以在单例bean全部完成实例化以后做处理。</p><img src="/2024/02/28/quiz-spring-cloud/image-20240301185918755.png" class="" title="image-20240301185918755"><p>在创建所有单例Bean的方法中：</p><p>Code</p><p>【配置类】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.artisan.beanLoadedExtend.smartinit;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.artisan.beanLoadedExtend&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmartInitConfig</span> &#123;<br></code></pre></td></tr></table></figure><p>【扩展类 implements SmartInitializingSingleton 】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.SmartInitializingSingleton;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmartInitExtend</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SmartInitializingSingleton</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterSingletonsInstantiated</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;all singleton beans loaded , 自定义扩展here &quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>【测试】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SmartInitConfig.class);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方式二 基于Spring事件监听</p><p>Source</p><p>生命周期的最后一步是finishRefresh();，这里面中有一个方法是publishEvent</p><img src="/2024/02/28/quiz-spring-cloud/image-20240301190552143.png" class="" title="image-20240301190552143"><p>所以这里也可以进行扩展，监听ContextRefreshedEvent事件 。</p></blockquote><h3 id="32-Bean的创建顺序是什么样的？"><a href="#32-Bean的创建顺序是什么样的？" class="headerlink" title="32. Bean的创建顺序是什么样的？"></a>32. Bean的创建顺序是什么样的？</h3><blockquote><p>Bean的创建顺序是由BeanDefinition的注册顺序来决定的， 当然依赖关系也会影响Bean创建顺序 （A-B)。</p><p>BeanDefinition的注册顺序由什么来决定的？</p><p>主要是由注解（配置）的解析顺序来决定：</p><img src="/2024/02/28/quiz-spring-cloud/image-20240301185332104.png" class="" title="image-20240301185332104"><ol><li><p>@Configuration</p></li><li><p>@Component</p></li><li><p>@Import—类</p></li><li><p>@Bean</p></li><li><p>@Import—ImportBeanDefinitionRegistrar</p><img src="/2024/02/28/quiz-spring-cloud/image-20240301185415533.png" class="" title="image-20240301185415533"></li><li><p>BeanDefinitionRegistryPostProcessor</p></li></ol></blockquote><h2 id="四、Spring注解"><a href="#四、Spring注解" class="headerlink" title="四、Spring注解"></a>四、Spring注解</h2><h3 id="33-Spring有哪几种配置方式："><a href="#33-Spring有哪几种配置方式：" class="headerlink" title="33. Spring有哪几种配置方式："></a>33. Spring有哪几种配置方式：</h3><blockquote><p>这里有三种重要的方法给Spring 容器提供配置元数据。</p><ol><li><p>XML配置文件。 Spring诞生</p><p>a.  spring.xml &lt;bean&gt;</p></li><li><p>基于注解的配置。 Spring2.5+</p><p>a.  spring.xml &lt;component-scan base-package&#x3D;&quot; &quot;&#x2F;&gt; @Component @Autowired</p></li><li><p>基于Java的配置。 JavaConfig Spring3.0+</p><p>a.  @Configuration @Bean .…</p></li></ol></blockquote><h3 id="34-用过JavaConfig方式的Spring配置吗？它是如何替代xml的？"><a href="#34-用过JavaConfig方式的Spring配置吗？它是如何替代xml的？" class="headerlink" title="34.用过JavaConfig方式的Spring配置吗？它是如何替代xml的？"></a>34.用过JavaConfig方式的Spring配置吗？它是如何替代xml的？</h3><blockquote><p>基于Java的配置，允许你在少量的Java注解的帮助下，进行你的大部分Spring配置而非通过XML文件。以@Configuration 注解为例，它用来标记类可以当做一个bean的定义，被Spring IoC容器使用。</p><p>另一个例子是@Bean注解，它表示此方法将要返回一个对象，作为一个bean注册进Spring应用上下文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentConfig</span>&#123;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> StudentBean <span class="hljs-title function_">myStudent</span><span class="hljs-params">()</span>&#123;<br>returnnewStudentBean();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>应用：</p><ol><li><p>以前Xml</p><p>a.  Spring容器 ClassPathXmlApplicationContext(&quot;xml&quot;)</p><p>b.  Spring.xml</p><p>c.  &lt;bean scope lazy&gt;</p><p>d.  扫描包: &lt;component-scan&gt;</p><p>e.  引入外部属性配置文件 &lt;property-placeHodeler resource&#x3D;&quot;xxx.properties&quot;&gt;</p><p>f.  &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;${mysql.password}&quot;&gt;&lt;&#x2F;property&gt;</p><p>g.  指定其他配置文件：&lt;import resource&#x3D;&quot;&quot;</p></li><li><p>javaconfig</p><p>a.  Spring容器：AnnotationConfigApplicationContext(javaconfig.class)</p><p>b.  配置类 @Configuration</p><p>c.  @Bean @Scope @Lazy</p><p>d.  扫描包: @ComponentScan</p><p>e.  引入外部属性配置文件 @PropertySource(&quot;classpath:db.properties&quot;)</p><p>f.  @Value(&quot;${mysql.password}&quot;)</p><p>g.  @Import @Import({配置类}) 使用比较灵活</p></li></ol><p>源码：</p><img src="/2024/02/28/quiz-spring-cloud/image-20240301191211454.png" class="" title="image-20240301191211454"></blockquote><h3 id="35-Component，-Controller，-Repository，-Service-有何区别？"><a href="#35-Component，-Controller，-Repository，-Service-有何区别？" class="headerlink" title="35. @Component， @Controller， @Repository， @Service 有何区别？"></a>35. @Component， @Controller， @Repository， @Service 有何区别？</h3><blockquote><p>@Component：这将 java 类标记为 bean。它是任何 Spring 管理组件的通用构造型。spring 的组件扫描机制现在可以将其拾取并将其拉入应用程序环境中。</p><p>@Controller：这将一个类标记为 Spring Web MVC 控制器。标有它的 Bean 会自动导入到 IoC 容器中。 @Service：此注解是组件注解的特化。它不会对 @Component 注解提供任何其他行为。您可以在服务层类中使用 @Service 而不是 @Component，因为它以更好的方式指定了意图。 @Repository：这个注解是具有类似用途和功能的 @Component 注解的特化。它为 DAO 提供了额外的好处。它将 DAO 导入 IoC 容器，并使未经检查的异常有资格转换为 Spring DataAccessException。</p></blockquote><h5 id="36-Import可以有几种用法？"><a href="#36-Import可以有几种用法？" class="headerlink" title="36.@Import可以有几种用法？"></a>36.@Import可以有几种用法？</h5><blockquote><p>4种：</p></blockquote><ol><li><p>直接指定类 （如果配置类会按配置类正常解析、 如果是个普通类就会解析成Bean)</p></li><li><p>通过<strong>ImportSelector</strong> 可以一次性注册多个，返回一个string[] 每一个值就是类的完整类路径</p><p>a.  通过<strong>DeferredImportSelector</strong>可以一次性注册多个，返回一个string[] 每一个值就是类的完整类路径</p><pre><code class="hljs">i.  区别：**DeferredImportSelector 顺序靠后**</code></pre></li><li><p>通过ImportBeanDefinitionRegistrar 可以一次性注册多个，通过BeanDefinitionRegistry来动态注册BeanDefintion</p></li></ol><h4 id="37-如何让自动注入没有找到依赖Bean时不报错"><a href="#37-如何让自动注入没有找到依赖Bean时不报错" class="headerlink" title="37.如何让自动注入没有找到依赖Bean时不报错"></a>37.如何让自动注入没有找到依赖Bean时不报错</h4><blockquote><p>这个注解表明bean的属性必须在配置的时候设置，通过一个bean定义的显式的属性值或通过自动装配，若@Required注解的bean属性未被设置，容器将抛出BeanInitializationException。示例：</p></blockquote><p>+—————————-+——————————————————–+<br>| &gt; 1 @Autowired(required &#x3D; | &gt; false)                                               |<br>+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+<br>| &gt; 2 private Role role;     |                                                        |<br>+—————————-+——————————————————–+</p><blockquote><p><strong>38.如何让自动注入找到多个依赖Bean时不报错</strong></p><p><img src="/media/image36.png">{width&#x3D;”4.272185039370079in” height&#x3D;”1.3781244531933508in”}</p></blockquote><h2 id="39-Autowired-注解有什么作用"><a href="#39-Autowired-注解有什么作用" class="headerlink" title="39.@Autowired 注解有什么作用"></a>39.@Autowired 注解有什么作用</h2><blockquote><p>@Autowired默认是按照类型装配注入的，默认情况下它要求依赖对象必须存在（可以设置它required属性为false）。 @Autowired 注解提供了更细粒度的控制，包括在何处以及如何完成自动装配。</p><p><strong>40.@Autowired和@Resource之间的区别</strong> @Autowired可用于：构造函数、成员变量、Setter方法 @Autowired和@Resource之间的区别</p><p>@Autowired默认是按照类型装配注入的，默认情况下它要求依赖对象必须存在（可以设置它required属性为 false）。</p><p>@Resource默认是按照名称来装配注入的，只有当找不到与名称匹配的bean才会按照类型来装配注入。</p></blockquote><h5 id="41-使用-Autowired注解自动装配的过程是怎样的？"><a href="#41-使用-Autowired注解自动装配的过程是怎样的？" class="headerlink" title="41.使用@Autowired注解自动装配的过程是怎样的？"></a>41.使用@Autowired注解自动装配的过程是怎样的？</h5><blockquote><p>记住：@Autowired 通过Bean的后置处理器进行解析的</p></blockquote><ol><li><p>在创建一个Spring上下文的时候再构造函数中进行注册AutowiredAnnotationBeanPostProcessor</p></li><li><p>在Bean的创建过程中进行解析</p><ol><li><p>在实例化后预解析（解析@Autowired标注的属性、方法 比如：把属性的类型、名称、属性所在的类. 元数据缓存起）</p></li><li><p>在属性注入真正的解析（拿到上一步缓存的元数据 去IoC容器帮进行查找，并且返回注入）</p><p>a.  首先根据预解析的元数据拿到 类型去容器中进行查找</p></li></ol></li></ol><blockquote><p>如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据；如果查询的结果不止一个，那么@Autowired会根据名称来查找；</p><p><img src="/media/image37.jpeg">{width&#x3D;”3.982542650918635in” height&#x3D;”3.301353893263342in”}如果上述查找的结果为空，那么会抛出异常。解决方法时，使用required&#x3D;false。</p></blockquote><h5 id="42-配置类-Configuration的作用解析原理"><a href="#42-配置类-Configuration的作用解析原理" class="headerlink" title="42.配置类@Configuration的作用解析原理:"></a>42.配置类@Configuration的作用解析原理:</h5><ol><li><p><a href="mailto:1.@Configuration用来代替xml配置方式spring.xml配置文件">@Configuration用来代替xml配置方式spring.xml配置文件</a> &lt;bean&gt;</p></li><li><p>没有@Configuration也是可以配置@Bean</p></li><li><p>@Configuration加与不加有什么区别</p></li><li><p>加了@Configuration会为配置类创建cglib动态代理（保证配置类@Bean方法调用Bean的单例），@Bean方法的调用就会通过容器.getBean进行获取</p></li></ol><blockquote><p>原理：</p></blockquote><ol><li>创建Spring上下文的时候会注册一个解析配置的处理器<strong>ConfigurationClassPostProcessor</strong>（实现BeanFactoryPostProcessor和 BeanDefinitionRegistryPostProcessor)</li></ol><blockquote><p>2.在调用invokeBeanFactoryPostProcessor，就会去调用 <strong>ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry</strong>进行解析配置（解析配置类说白就是去解析各种注解 (@Bean @Configuration@Import @Component ... 就是注册BeanDefinition)</p><p>3. <strong>ConfigurationClassPostProcessor.postProcessBeanFactory</strong>去创建cglib动态代理</p></blockquote><h5 id="43-Bean之间的方法调用是怎么保证单例的？"><a href="#43-Bean之间的方法调用是怎么保证单例的？" class="headerlink" title="43.@Bean之间的方法调用是怎么保证单例的？"></a>43.@Bean之间的方法调用是怎么保证单例的？</h5><blockquote><p>（ <strong>@Configuration加与不加的区别是什么？）</strong></p></blockquote><ol><li><p>如果希望@bean的方法返回是对象是单例 需要在类上面加上@Configuration，</p></li><li><p>Spring 会在invokeBeanFactoryPostProcessor 通过内置BeanFactoryPostProcessor中会CGLib生成动态代理代理 3.当@Bean方法进行互调时， 则会通过CGLIB进行增强，通过调用的方法名作为bean的名称去IoC容器中获取，进而保证了@Bean方法的单例</p></li></ol><h5 id="44-要将一个第三方的类配成为Bean有哪些方式？"><a href="#44-要将一个第三方的类配成为Bean有哪些方式？" class="headerlink" title="44.要将一个第三方的类配成为Bean有哪些方式？"></a>44.要将一个第三方的类配成为Bean有哪些方式？</h5><ol><li><p><span class="underline">@Bean</span></p></li><li><p>@Import 3.通过Spring的扩展接口：BeanDefinitionRegistryPostProcessor</p></li></ol><h5 id="45、为什么-ComponentScan-不设置basePackage也会扫描？"><a href="#45、为什么-ComponentScan-不设置basePackage也会扫描？" class="headerlink" title="45、为什么@ComponentScan 不设置basePackage也会扫描？"></a>45、为什么@ComponentScan 不设置basePackage也会扫描？</h5><blockquote><p>因为Spring在解析@ComponentScan的时候 拿到basePackage 如果没有设置会将你的类所在的包的地址作为扫描包的地址</p></blockquote><h3 id="五、Spring-AOP"><a href="#五、Spring-AOP" class="headerlink" title="五、Spring AOP"></a>五、Spring AOP</h3><h4 id="46-什么是AOP、能做什么"><a href="#46-什么是AOP、能做什么" class="headerlink" title="46.什么是AOP、能做什么"></a>46.什么是AOP、能做什么</h4><blockquote><p>AOP(Aspect-Oriented Programming)，一般称为面向切面编程，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻</p><p>辑，抽取并封装为一个可重用的模块，这个模块被命名为”切面”（Aspect），减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。</p><p>可用于权限认证、日志、事务处理等。</p><p>AOP、OOP在字面上虽然非常类似，但却是面向不同领域的两种设计思想。OOP（面向对象编程）针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰高效的逻辑单元划分。 而AOP作为面向对象的一种补充，则是针对业务处理过程中的切面进行提取，已达到业务代码和公共行为代码之间低耦合性的隔离效果。这两种设计思想在目标上有着本质的差异。</p></blockquote><ol start="47"><li><h4 id="解释一下Spring-AOP里面的几个名词"><a href="#解释一下Spring-AOP里面的几个名词" class="headerlink" title="解释一下Spring AOP里面的几个名词"></a>解释一下Spring AOP里面的几个名词</h4><ol><li><p>切面（Aspect）： 在Spring Aop指定就是”切面类” ，切面类会管理着切点、通知。</p></li><li><p>连接点（Join point）： 指定就是被增强的业务方法</p></li><li><p>通知（Advice）： 就是需要增加到业务方法中的公共代码， 通知有很多种类型分别可以在需要增加的业务方法不同位置进行执行（前置通知、后置通知、异常通知、返回通知、环绕通知）</p></li><li><p>切点（Pointcut）： 由他决定哪些方法需要增强、哪些不需要增强， 结合切点表达式进行实现</p></li><li><p>目标对象（Target Object）： 指定是增强的对象</p></li><li><p>织入（Weaving） ： spring aop用的织入方式：动态代理。 就是为目标对象创建动态代理的过程就叫织入。</p></li></ol></li></ol><p><img src="/media/image38.jpeg">{width&#x3D;”4.347458442694663in” height&#x3D;”4.094998906386702in”}</p><h4 id="48-Spring通知有哪些类型？"><a href="#48-Spring通知有哪些类型？" class="headerlink" title="48.Spring通知有哪些类型？"></a>48.Spring通知有哪些类型？</h4><blockquote><p>在AOP术语中，在的某个特定的连接点上执行的动作——官方 Spring切面可以应用5种类型的通知：</p></blockquote><ol><li><p>前置通知（Before）：在目标方法被调用之前调用通知功能；</p></li><li><p>后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么；</p></li><li><p>返回通知（After-returning ）：在目标方法成功执行之后调用通知；</p></li><li><p>异常通知（After-throwing）：在目标方法抛出异常后调用通知；</p></li><li><p>环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。执行顺序：</p></li></ol><blockquote><p><img src="/media/image39.png">{width&#x3D;”4.284726596675416in” height&#x3D;”1.085in”}</p></blockquote><h5 id="Spring在5-2-7之后就改变的advice-的执行顺序。-在github官网版本更新说明中有说明：如图"><a href="#Spring在5-2-7之后就改变的advice-的执行顺序。-在github官网版本更新说明中有说明：如图" class="headerlink" title="Spring在5.2.7之后就改变的advice 的执行顺序。 在github官网版本更新说明中有说明：如图"></a>Spring在5.2.7之后就改变的advice 的执行顺序。 在github官网版本更新说明中有说明：如图</h5><blockquote><p>1、正常执行：@Before­­­&gt;方法­­­­&gt;@AfterReturning­­­&gt;@After 2、异常执行：@Before­­­&gt;方法­­­­&gt;@AfterThrowing­­­&gt;@After</p></blockquote><p><img src="/media/image40.jpeg">{width&#x3D;”4.24527012248469in” height&#x3D;”1.9047911198600176in”}</p><blockquote><p>更新说明：<a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.2.7.RELEASE"><span class="underline">https://github.com/spring­projects/spring­framewor...</span></a> #25186链接：<a href="https://github.com/spring-projects/spring-framework/issues/25186"><span class="underline">https://github.com/spring­projects/spring­framewor...</span></a></p></blockquote><h4 id="Spring-AOP-and-AspectJ-AOP-有什么区别？"><a href="#Spring-AOP-and-AspectJ-AOP-有什么区别？" class="headerlink" title="Spring AOP and AspectJ AOP 有什么区别？"></a>Spring AOP and AspectJ AOP 有什么区别？</h4><h5 id="关系："><a href="#关系：" class="headerlink" title="关系："></a>关系：</h5><blockquote><p>当在Spring中要使用@Aspect、@Before.等这些注解的时候， 就需要添加AspectJ相关依赖</p><p><strong>Spring Aop提供了 AspectJ 的支持，但只用到的AspectJ的切点解析和匹配。</strong> @Aspect、@Before.等这些注解</p><p>都是由<strong>AspectJ 发明的</strong></p><p>AOP实现的关键在于 代理模式，AOP代理主要分为静态代理和动态代理。静态代理的代表为AspectJ；动态代理则以 Spring AOP为代表。</p></blockquote><h5 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h5><blockquote><p>（2）<strong>Spring AOP</strong>使用的动态代理，<strong>它基于动态代理来实现</strong>。默认地，如果使用接口的，用 JDK 提供的动态代理实现，如果没有接口，使用 CGLIB 实现。</p><p>（1）AspectJ是静态代理的增强，所谓静态代理，就是AOP框架会在编译阶段生成AOP代理类，因此也称为编译时增强，他会在编译阶段将AspectJ(切面)织入到Java字节码中，运行的时候就是增强之后的AOP对象。</p><p>属于静态织入，它是通过修改代码来实现的，它的织入时机可以是：</p><p>Compile-time weaving：编译期织入，如类 A 使用 AspectJ 添加了一个属性，类 B 引用了它，这个场景就需要编译期的时候就进行织入，否则没法编译类 B。</p><p>Post-compile weaving：编译后织入，也就是已经生成了 .class 文件，或已经打成 jar 包了，这种情况我们需要增强处理的话，就要用到编译后织入。</p><p><strong>Load-time weaving</strong>：指的是在加载类的时候进行织入，要实现这个时期的织入，有几种常见的方法。1、自定义类加载器来干这个，这个应该是最容易想到的办法，在被织入类加载到 JVM 前去对它进行加载，这样就可以在加载的时候定义行为了。2、在 JVM 启动的时候指定 AspectJ 提供的 agent：-javaagent:xxx&#x2F;xxx&#x2F;aspectjweaver.jar。</p><p>AspectJ 出身也是名门，来自于 Eclipse 基金会，link：<a href="https://www.eclipse.org/aspectj"><span class="underline">https://www.eclipse.org/aspectj</span></a></p><p>AspectJ 能干很多 Spring AOP 干不了的事情，它是 <strong>AOP 编程的完全解决方案</strong>。Spring AOP 致力于解决的是企业级开发中最普遍的 AOP 需求（方法织入），而不是力求成为一个像 AspectJ 一样的 AOP 编程完全解决方案。</p><p>因为 AspectJ 在实际代码运行前完成了织入，所以大家会说它生成的类是没有额外运行时开销的。</p><p>很多人会对比 Spring AOP 和 AspectJ 的性能，Spring AOP 是基于代理实现的，在容器启动的时候需要生成代理实例，在方法调用上也会增加栈的深度，使得 Spring AOP 的性能不如 AspectJ 那么好。</p></blockquote><h4 id="JDK动态代理和CGLIB动态代理的区别"><a href="#JDK动态代理和CGLIB动态代理的区别" class="headerlink" title="JDK动态代理和CGLIB动态代理的区别"></a>JDK动态代理和CGLIB动态代理的区别</h4><blockquote><p>Spring AOP中的动态代理主要有两种方式，JDK动态代理和CGLIB动态代理： JDK动态代理<strong>只提供接口的代理，不支持类的代理。</strong></p><p>JDK会在运行时为目标类生成一个 动态代理类$proxy*.class .</p><p>该代理类是实现了接目标类<strong>接口</strong>， 并且代理类会实现<strong>接口</strong>所有的方法增强代码。</p><p>调用时 通过代理类先去调用处理类进行增强，再通过<strong>反射</strong>的方式进行调用目标方法。从而实现AOP</p><p>如果代理类<strong>没有实现 接口</strong>，那么Spring AOP会选择使用CGLIB来动态代理目标类。</p><p>CGLIB的底层是通过<strong>ASM</strong>在运行时动态的生成目标类的一个<strong>子类</strong>。（还有其他相关类，主要是为增强调用时效率） 会生成多个 ，</p><p>并且会重写<strong>父类</strong>所有的方法增强代码，</p><p>调用时先通过代理类进行增强，再<strong>直接调用父类对应的方法</strong>进行调用目标方法。从而实现 AOP。</p><p>CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为 final，那么它是无法使用CGLIB做动态代理的。</p><p>CGLIB 除了生成目标子类代理类，还有一个FastClass(路由类)，可以</p><p>（但不是必须）让本类方法调用进行增强，而不会像jdk代理那样本类方法调用增强会失效</p><p>很多人会对比 JDK和Cglib的性能，jdk动态代理生成类速度快，调用慢，cglib生成类速度慢，但后续调用快，在老版本CGLIB的速度是JDK速度的10倍左右， 但是实际上JDK的速度在版本升级的时候每次都提高很多性能，而 CGLIB仍止步不前.</p><p>在对JDK动态代理与CGlib动态代理的代码实验中看，1W次执行下，JDK7及8的动态代理性能比CGlib要好20%左右。</p></blockquote><h5 id="51-JavaConfig方式如何启用AOP-如何强制使用cglib"><a href="#51-JavaConfig方式如何启用AOP-如何强制使用cglib" class="headerlink" title="51.JavaConfig方式如何启用AOP?如何强制使用cglib?"></a>51.JavaConfig方式如何启用AOP?如何强制使用cglib?</h5><blockquote><p><strong>52.介绍AOP有几种实现方式</strong></p><p>Spring 1.2 <strong>基于接口的配置</strong>：最早的 Spring AOP 是完全基于几个接口的，想看源码的同学可以从这里起步。 Spring 2.0 <strong>schema-based 配置</strong>：Spring 2.0 以后使用 XML 的方式来配置，使用 命名空间 &lt;aop &gt;&lt;&#x2F;aop&gt;</p><p>Spring 2.0 <strong><span class="underline"><a href="https://github.com/AspectJ">@Aspect</a>J</span> 配置</strong>：使用注解的方式来配置，这种方式感觉是最方便的，还有，这里虽然叫做 <a href="https://github.com/AspectJ"><span class="underline">@AspectJ</span></a>，但是这个和 AspectJ 其实没啥关系。</p><p>AspectJ 方式，这种方式其实和Spring没有关系，采用AspectJ 进行动态织入的方式实现AOP，需要用 AspectJ 单独编译。</p></blockquote><h5 id="53-什么情况下AOP会失效，怎么解决？"><a href="#53-什么情况下AOP会失效，怎么解决？" class="headerlink" title="53.什么情况下AOP会失效，怎么解决？"></a>53.什么情况下AOP会失效，怎么解决？</h5><blockquote><p>失效原因：</p></blockquote><ol><li><p>方法是private 也会失效，解决：改成public</p></li><li><p>目标类没有配置为Bean也会失效， 解决：配置为Bean</p></li><li><p>切点表达式没有配置正确</p></li><li><p>...</p></li></ol><h6 id="内部调用不会触发AoP"><a href="#内部调用不会触发AoP" class="headerlink" title="内部调用不会触发AoP."></a>内部调用不会触发AoP.</h6><blockquote><p>解决方式：必须走<strong>代理， 重新拿到代理对象再次执行方法才能进行增强</strong></p></blockquote><ol><li><h6 id="在本类中自动注入当前的bean"><a href="#在本类中自动注入当前的bean" class="headerlink" title="在本类中自动注入当前的bean"></a>在本类中自动注入当前的bean</h6></li><li><p><strong>设置暴露当前代理对象到本地线程， 可以通过</strong>AopContext.currentProxy() 拿到当前正在调用的动态代理对象</p></li></ol><h5 id="54-Spring的AOP是在哪里创建的动态代理？"><a href="#54-Spring的AOP是在哪里创建的动态代理？" class="headerlink" title="54.Spring的AOP是在哪里创建的动态代理？"></a>54.Spring的AOP是在哪里创建的动态代理？</h5><ol><li><p>正常的Bean会在Bean的生命周期的’初始化’后， 通过BeanPostProcessor.postProcessAfterInitialization创建aop的动态代理</p></li><li><p>还有一种特殊情况： 循环依赖的Bean会在Bean的生命周期’属性注入’时存在的循环依赖的情况下， 也会为循环依赖的Bean通过MergedBeanDefinitionPostProcessor.postProcessMergedBeanDefinition创建aop</p></li></ol><h5 id="55-Spring的-Aop的完整实现流程？"><a href="#55-Spring的-Aop的完整实现流程？" class="headerlink" title="55.Spring的 Aop的完整实现流程？"></a>55.Spring的 Aop的完整实现流程？</h5><blockquote><p>Aop的实现大致分为三大步：JavaConfig</p><p>当@EnableAspectJAutoProxy 会通过@Import注册一个BeanPostProcessor处理AOP</p></blockquote><ol><li><p><strong>解析切面</strong>： 在Bean创建之前的第一个Bean后置处理器会去解析切面（解析切面中通知、切点，一个通知就会解析成一个advisor(通知、切点)）</p></li><li><p><strong>创建动态代理</strong> 正常的Bean初始化后调用BeanPostProcessor 拿到之前缓存的advisor ，再通过advisor中pointcut判断当前Bean是否被切点表达式匹配，如果匹配，就会为Bean创建动态代理（创建方式1.jdk动态代理2.cglib)。</p></li><li><p><strong>调用</strong>：拿到动态代理对象， 调用方法 就会判断当前方法是否增强的方法， 就会通过<strong>调用链</strong>的方式依次去执行通知.</p></li></ol><p><img src="/media/image41.jpeg">{width&#x3D;”6.858179133858267in” height&#x3D;”2.0999989063867015in”}</p><h4 id="六、Spring事务"><a href="#六、Spring事务" class="headerlink" title="六、Spring事务"></a>六、Spring事务</h4><h5 id="56-事务四大特性"><a href="#56-事务四大特性" class="headerlink" title="56.事务四大特性"></a>56.事务四大特性</h5><h6 id="⑴-原子性（Atomicity）"><a href="#⑴-原子性（Atomicity）" class="headerlink" title="⑴ 原子性（Atomicity）"></a>⑴ 原子性（Atomicity）</h6><blockquote><p>原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚， 因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p></blockquote><h6 id="⑵-一致性（Consistency）"><a href="#⑵-一致性（Consistency）" class="headerlink" title="⑵ 一致性（Consistency）"></a>⑵ 一致性（Consistency）</h6><blockquote><p>一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p><p>拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是</p><p>5000，这就是事务的一致性。</p></blockquote><h6 id="⑶-隔离性（Isolation）"><a href="#⑶-隔离性（Isolation）" class="headerlink" title="⑶ 隔离性（Isolation）"></a>⑶ 隔离性（Isolation）</h6><blockquote><p>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p><p>即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都 感觉不到有其他事务在并发地执行。</p><p>关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。</p></blockquote><h6 id="⑷-持久性（Durability）"><a href="#⑷-持久性（Durability）" class="headerlink" title="⑷ 持久性（Durability）"></a>⑷ 持久性（Durability）</h6><blockquote><p>持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p><p>例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错</p><p>误。</p></blockquote><h4 id="Spring支持的事务管理类型，-spring-事务实现方式有哪些？"><a href="#Spring支持的事务管理类型，-spring-事务实现方式有哪些？" class="headerlink" title="Spring支持的事务管理类型， spring 事务实现方式有哪些？"></a>Spring支持的事务管理类型， spring 事务实现方式有哪些？</h4><blockquote><p>Spring支持两种类型的事务管理：</p><p><strong>编程式事务管理</strong>：这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。</p><p><strong>声明式事务管理</strong>：这意味着你可以将业务代码和事务管理分离，你只需用注解和XML配置来管理事务。</p></blockquote><h6 id="实现声明式事务的三种方式："><a href="#实现声明式事务的三种方式：" class="headerlink" title="实现声明式事务的三种方式："></a>实现声明式事务的三种方式：</h6><ol><li><p><strong>基于接口</strong></p><p>a.  <strong>基于 TransactionInterceptor 的声明式事务:</strong> Spring 声明式事务的基础，通常也不建议使用这种方式，但是与aop一样，了解这种方式对理解 Spring 声明式事务有很大作用。</p><p>b.  <strong>基于 TransactionProxyFactoryBean 的声明式事务:</strong> 第一种方式的改进版本，简化的配置文件的书写，这是</p></li></ol><blockquote><p>Spring 早期推荐的声明式事务管理方式，但是在 Spring 2.0 中已经不推荐了。</p></blockquote><ol start="2"><li><p><strong>基于&lt; tx&gt; 和&lt; aop&gt;命名空间的声明式事务管理：</strong> 目前推荐的方式，其最大特点是与 Spring AOP 结合紧密，可以充分利用切点表达式的强大支持，使得管理事务更加灵活。</p></li><li><p><strong>基于 @Transactional 的全注解方式：</strong> 将声明式事务管理简化到了极致。开发人员只需在配置文件中加上一行启用相关后处理 Bean 的配置，然后在需要实施事务管理的方法或者类上使用 @Transactional 指定事务规则即可实现事务管理，而且功能也不必其他方式逊色。</p></li></ol><h2 id="58、说一下Spring的事务传播行为"><a href="#58、说一下Spring的事务传播行为" class="headerlink" title="58、说一下Spring的事务传播行为"></a>58、说一下Spring的事务传播行为</h2><blockquote><p>事务的传播特性指的是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行？</p></blockquote><p>+————————+———————-+———————————————————+————————————————————+<br>| &gt; <strong>事务传播行为类型</strong> | &gt; <strong>外部不存在事务</strong> | &gt; <strong>外部存在事务</strong>                                      | &gt; <strong>使用方式</strong>                                             |<br>+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+<br>| REQUIRED（默认）       | 开启新的事务         | &gt; 融合到外部事务中                                      | &gt; @Transactional(propagation &#x3D; Propagation.REQUIRED)      |<br>|                        |                      |                                                         | &gt;                                                          |<br>|                        |                      |                                                         | &gt; 适用增删改查                                             |<br>+————————+———————-+———————————————————+————————————————————+<br>| SUPPORTS               | 不开启新的事务       | &gt; 融合到外部事务中                                      | &gt; @Transactional(propagation &#x3D; Propagation.SUPPORTS)      |<br>|                        |                      |                                                         | &gt;                                                          |<br>|                        |                      |                                                         | &gt; 适用查询                                                 |<br>+————————+———————-+———————————————————+————————————————————+<br>| REQUIRES_NEW           | 开启新的事务         | &gt; 不用外部事务，创建新的事务                            | &gt; @Transactional(propagation &#x3D; Propagation.REQUIRES_NEW)  |<br>|                        |                      |                                                         | &gt;                                                          |<br>|                        |                      |                                                         | &gt; 适用内部事务和外部事务不存在业务关联情况，如日志         |<br>+————————+———————-+———————————————————+————————————————————+<br>| NOT_SUPPORTED          | 不开启新的事务       | &gt; 不用外部事务                                          | &gt; @Transactional(propagation &#x3D; Propagation.NOT_SUPPORTED) |<br>|                        |                      |                                                         | &gt;                                                          |<br>|                        |                      |                                                         | &gt; 不常用                                                   |<br>+————————+———————-+———————————————————+————————————————————+<br>| NEVER                  | 不开启新的事务       | &gt; 抛出异常                                              | &gt; @Transactional(propagation &#x3D; Propagation.NEVER )        |<br>|                        |                      |                                                         | &gt;                                                          |<br>|                        |                      |                                                         | &gt; 不常用                                                   |<br>+————————+———————-+———————————————————+————————————————————+<br>| MANDATORY              | 抛出异常             | &gt; 融合到外部事务中                                      | &gt; @Transactional(propagation &#x3D; Propagation.MANDATORY)     |<br>|                        |                      |                                                         | &gt;                                                          |<br>|                        |                      |                                                         | &gt; 不常用                                                   |<br>+————————+———————-+———————————————————+————————————————————+<br>| NESTED                 | 开启新的事务         | &gt; 融合到外部事务中，SavePoint机制，外层影响内层， 内层不 | &gt; @Transactional(propagation &#x3D; Propagation.NESTED)不常用  |<br>|                        |                      | &gt;                                                       |                                                            |<br>|                        |                      | &gt; 会影响外层                                            |                                                            |<br>+————————+———————-+———————————————————+————————————————————+</p><h4 id="说一下-spring-的事务隔离？"><a href="#说一下-spring-的事务隔离？" class="headerlink" title="说一下 spring 的事务隔离？"></a>说一下 spring 的事务隔离？</h4><blockquote><p>用来解决并发事务所产生一些问题：并发会产生什么问题？</p><p>1.脏读</p><p>2.不可重复度</p><p>3.幻影读</p><p>概念： 通过设置隔离级别可解决在并发过程中产生的那些问题：</p></blockquote><ol><li><strong>脏读</strong></li></ol><hr><p>  <strong>事务1</strong> begin                      <strong>事务2</strong> begin</p><hr><pre><code class="hljs">                                   update t_user set balance=800 where id=1;</code></pre><hr><p>+————————————+———————————+<br>|                                    | #balance&#x3D;800                    |<br>+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+<br>| select * from t_user where id&#x3D;1   |                                 |<br>|                                    |                                 |<br>| commit;                            |                                 |<br>|                                    |                                 |<br>| #balance&#x3D;800                       |                                 |<br>+————————————+———————————+<br>|                                    | rollback; #回滚                 |<br>|                                    |                                 |<br>|                                    | #balance&#x3D;1000                   |<br>+————————————+———————————+</p><ol><li>一个事务，读取了另一个事务中没有提交的数据，会在本事务中产生的数据不一致的问题解决方式：@Transactional(isolation &#x3D; Isolation.READ_COMMITTED)</li></ol><blockquote><p>读已提交：READ COMMITTED</p><p>要求Transaction01只能读取Transaction02已提交的修改。</p></blockquote><ol><li><strong>不可重复度</strong></li></ol><p>+————————————+——————————————-+<br>| <strong>事务1</strong> begin                    | <strong>事务2</strong> begin                           |<br>+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+<br>| select * from t_user where id&#x3D;1   |                                           |<br>|                                    |                                           |<br>| #balance&#x3D;1000                      |                                           |<br>+————————————+——————————————-+<br>|                                    | update t_user set balance&#x3D;800 where id&#x3D;1; |<br>|                                    |                                           |<br>|                                    | commit;                                   |<br>|                                    |                                           |<br>|                                    | #balance&#x3D;800                              |<br>+————————————+——————————————-+<br>| select * from t_user where id&#x3D;1   |                                           |<br>|                                    |                                           |<br>| #balance&#x3D;800                       |                                           |<br>+————————————+——————————————-+<br>| commit;                            |                                           |<br>+————————————+——————————————-+</p><blockquote><p>一个事务中，多次读取相同的数据， 但是读取的结果不一样， 会在本事务中产生数据不一致的问题。解决方式：@Transactional(isolation &#x3D; Isolation.REPEATABLE_READ)</p><p>可重复读：REPEATABLE READ</p><p>确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新。(行锁）</p></blockquote><ol start="2"><li><strong>幻影读</strong></li></ol><p>+——————————————–+———————————–+<br>| <strong>事务1</strong> begin                            | <strong>事务2</strong> begin                   |<br>+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+<br>| select sum(balance) from t_user where id&#x3D;1 |                                   |<br>|                                            |                                   |<br>| #balance&#x3D;3000                              |                                   |<br>+——————————————–+———————————–+<br>|                                            | INSERT INTO t_user VALUES         |<br>|                                            |                                   |<br>|                                            | &gt; (                               |<br>|                                            | &gt;                                 |<br>|                                            | &gt; &#39;4&#39;，                          |<br>|                                            | &gt;                                 |<br>|                                            | &gt; &#39;赵六&#39;， &#39;123456784&#39;，        |<br>|                                            | &gt;                                 |<br>|                                            | &gt; &#39;1000&#39;                        |<br>|                                            |                                   |<br>|                                            | );                                |<br>|                                            |                                   |<br>|                                            | commit;                           |<br>+——————————————–+———————————–+<br>| select sum(balance) from t_user where id&#x3D;1 |                                   |<br>|                                            |                                   |<br>| #balance&#x3D;4000                              |                                   |<br>+——————————————–+———————————–+<br>| commit;                                    |                                   |<br>+——————————————–+———————————–+</p><blockquote><p>一个事务中，多次对数据进行整表数据读取（统计），但是结果不一样， 会在本事务中产生数据不一致的问题。解决方式：@Transactional(isolation &#x3D; Isolation.SERIALIZABLE)</p><p>串行化：SERIALIZABLE</p><p>确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。（表锁）</p><p>很多人容易搞混不可重复读和幻读，确实这两者有些相似：对于前者， 只需要锁行</p><p>对于后者， 需要锁表</p><p><img src="/media/image42.jpeg">{width&#x3D;”4.036305774278215in” height&#x3D;”1.1793744531933508in”}</p><p>当不设置事务隔离级别将使用数据库的默认事务隔离级别：</p></blockquote><h5 id="60-Spring事务实现基本原理"><a href="#60-Spring事务实现基本原理" class="headerlink" title="60.Spring事务实现基本原理"></a>60.Spring事务实现基本原理</h5><blockquote><p>使用：</p><p>原理：</p></blockquote><ol><li><p>解析切面 ——&gt; bean的创建前第一个bean的后置处理器进行解析advisor(pointcut(通过@Transacational解析的切点) ， advise) (这个advisor 是通过@EnableTransactionManagement注册了一个配置类，该配置类就配置了adivsor)</p></li><li><p>创建动态代理——&gt; bean的初始化后调用bean的后置处理器进行创建动态代理(有接口使用jdk，没接口使用cglib)， 创建动态代理之前会先根据advisor中pointCut 匹配@Transacational( 方法里面是不是有、类上面是不是有、接口或父类上面是不是有 ) ， 匹配到就创建动态代理。</p></li><li><p>调用： 动态代理</p></li></ol><blockquote><p>try{</p><p>4.创建一个数据库连接Connection， 并且修改数据库连接的autoCommit属性为false，禁止此连接的自动提交，这是实现Spring事务非常重要的一步</p><p>5.然后执行目标方法方法，方法中会执行数据库操作sql</p><p>}</p><p>catch{</p><p>6.如果出现了异常，并且这个异常是需要回滚的就会回滚事务，否则仍然提交事务</p><p>}</p><p>7.执行完当前方法后，如果没有出现异常就直接提交事务</p><p><img src="/media/image43.jpeg">{width&#x3D;”4.25419728783902in” height&#x3D;”0.9097911198600175in”}</p></blockquote><h5 id="Spring事务传播行为实现原理："><a href="#Spring事务传播行为实现原理：" class="headerlink" title="Spring事务传播行为实现原理："></a>Spring事务传播行为实现原理：</h5><ol start="2"><li>Spring的事务信息是存在ThreadLocal中的， 所以一个线程永远只能有一个事务，</li></ol><blockquote><p><strong>融入：</strong>当传播行为是融入外部事务则拿到ThreadLocal中的Connection、共享一个数据库连接共同提交、回</p><p>滚；</p><p><strong>创建新事务：</strong>当传播行为是创建新事务，会将嵌套新事务存入ThreadLocal、再将外部事务暂存起来； 当嵌套</p><p>事务提交、回滚后，会将暂存的事务信息恢复到ThreadLocal中调用：融入</p><p>调用：创建新事务</p></blockquote><ol start="62"><li><h5 id="Spring多线程事务-能否保证事务的一致性（同时提交、同时回滚）？"><a href="#Spring多线程事务-能否保证事务的一致性（同时提交、同时回滚）？" class="headerlink" title="Spring多线程事务 能否保证事务的一致性（同时提交、同时回滚）？"></a>Spring多线程事务 能否保证事务的一致性（同时提交、同时回滚）？</h5><ol><li><p>Spring的事务信息是存在ThreadLocal中的Connection， 所以一个线程永远只能有一个事务</p></li><li><p>所以Spring 的事务是无法实现事务一致性的</p></li><li><p>可以通过编程式事务，或者通过分布式事务的思路:二阶段提交方式</p></li></ol></li></ol><h5 id="63-Spring事务的失效原因？"><a href="#63-Spring事务的失效原因？" class="headerlink" title="63.Spring事务的失效原因？"></a>63.Spring事务的失效原因？</h5><blockquote><p>失效原因：</p></blockquote><ol><li><p>方法是private 也会失效，解决：改成public</p></li><li><p>目标类没有配置为Bean也会失效 解决：配置为Bean</p></li><li><p>自己捕获了异常 解决：不要捕获处理</p></li><li><p>使用cglib动态代理，但是@Transactional声明在接口上面</p></li><li><p>...</p></li></ol><h6 id="内部调用导致事务传播失效"><a href="#内部调用导致事务传播失效" class="headerlink" title="内部调用导致事务传播失效."></a>内部调用导致事务传播失效.</h6><blockquote><p>解决方式：必须走<strong>代理， 重新拿到代理对象再次执行方法才能进行增强</strong></p></blockquote><ol start="3"><li><h6 id="在本类中自动注入当前的bean-1"><a href="#在本类中自动注入当前的bean-1" class="headerlink" title="在本类中自动注入当前的bean"></a>在本类中自动注入当前的bean</h6></li><li><p><strong>设置暴露当前代理对象到本地线程， 可以通过</strong>AopContext.currentProxy() 拿到当前正在调用的动态代理对象</p></li></ol><blockquote><p><strong>七、Spring其他</strong></p><p><strong>64.Spring事件监听的核心机制是什么？</strong></p><p>原理：观察者模式</p><p>支持异步：</p><p>异步发布事件的核心机制？ 多线程</p><p>spring的事件监听有三个部分组成：</p><p><strong>事件</strong>（ApplicationEvent) 负责对应相应监听器 事件源发生某事件是特定事件监听器被触发的原因。</p><p><strong>监听器(<strong>ApplicationListener) 对应于观察者模式中的</strong>观察者</strong>。监听器监听特定事件，并在内部定义了事件发生后的响应逻辑。</p><p><strong>事件发布器</strong>（ApplicationEventMulticaster ）对应于观察者模式中的<strong>被观察者&#x2F;主题， 负责通知观察者</strong> 对外提供发布事件和增删事件监听器的接口，维护事件和事件监听器之间的映射关系，并在事件发生时负责通知相关监听器。</p><p><img src="/media/image44.jpeg">{width&#x3D;”5.089530839895013in” height&#x3D;”3.1609372265966753in”}</p></blockquote><p><img src="/media/image45.jpeg">{width&#x3D;”3.489589895013123in” height&#x3D;”3.5523950131233595in”}</p><h6 id="Spring事件机制是观察者模式的一种实现，但是除了发布者和监听者者两个角色之外，还有一个EventMultiCaster的角色负责把事件转发给监听者，工作流程如下："><a href="#Spring事件机制是观察者模式的一种实现，但是除了发布者和监听者者两个角色之外，还有一个EventMultiCaster的角色负责把事件转发给监听者，工作流程如下：" class="headerlink" title="Spring事件机制是观察者模式的一种实现，但是除了发布者和监听者者两个角色之外，还有一个EventMultiCaster的角色负责把事件转发给监听者，工作流程如下："></a>Spring事件机制是观察者模式的一种实现，但是除了发布者和监听者者两个角色之外，还有一个EventMultiCaster的角色负责把事件转发给监听者，工作流程如下：</h6><blockquote><p><img src="/media/image46.jpeg">{width&#x3D;”3.423801399825022in” height&#x3D;”2.223853893263342in”}</p><p><strong>Spring事件机制</strong></p><p><strong>也就是说上面代码中发布者调用</strong>applicationEventPublisher.publishEvent(msg); <strong>是会将事件发送给了EventMultiCaster， 而后由 EventMultiCaster注册着所有的Listener，然后根据事件类型决定转发给那个Listener。</strong></p></blockquote><h5 id="Spring-框架中都用到了哪些设计模式？"><a href="#Spring-框架中都用到了哪些设计模式？" class="headerlink" title="Spring 框架中都用到了哪些设计模式？"></a>Spring 框架中都用到了哪些设计模式？</h5><p><img src="/media/image47.jpeg">{width&#x3D;”6.189207130358705in” height&#x3D;”3.50625in”}</p><blockquote><p><strong>66.Spring是如何整合MyBatis将Mapper接口注册为Bean的原理？</strong></p></blockquote><ol><li><p>首先MyBatis的Mapper接口核心是<strong>JDK动态代理</strong></p></li><li><p>Spring会排除接口，无法注册到IoC容器中</p></li><li><p>MyBatis 实现了<strong>BeanDefinitionRegistryPostProcessor</strong> 可以动态注册BeanDefinition</p></li><li><p>需要<strong>自定义扫描器</strong>（继承Spring内部扫描器ClassPathBeanDefinitionScanner ) 重写排除接口的方法</p></li></ol><blockquote><p>（isCandidateComponent）</p></blockquote><ol start="5"><li><p>但是接口虽然注册成了BeanDefinition但是无法实例化Bean 因为接口无法实例化</p></li><li><p>需要将BeanDefinition的BeanClass 替换成JDK动态代理的实例（<strong>偷天换日</strong>）</p></li><li><p>Mybatis 通过<strong>FactoryBean</strong>的工厂方法设计模式可以自由控制Bean的实例化过程，可以在getObject方法中创建JDK动态代理</p></li></ol><p><img src="/media/image48.png">{width&#x3D;”4.27830927384077in” height&#x3D;”3.6365616797900264in”}</p><h1 id="八、SpringMVC"><a href="#八、SpringMVC" class="headerlink" title="八、SpringMVC"></a>八、SpringMVC</h1><h5 id="说说你是如何解决-get-和-post-乱码问题？"><a href="#说说你是如何解决-get-和-post-乱码问题？" class="headerlink" title="说说你是如何解决 get 和 post 乱码问题？"></a>说说你是如何解决 get 和 post 乱码问题？</h5><ol><li><p>解决post请求乱码问题：在web.xml中配置一个CharacterEncodingFilter过滤器，设置成utf­8；</p><ol><li><p>&lt;filter&gt;</p></li><li><p>&lt;filter‐name&gt;CharacterEncodingFilter&lt;&#x2F;filter‐name&gt;</p></li><li><p>&lt;filter‐class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter‐class&gt;</p></li><li><p>&lt;init‐param&gt;</p></li><li><p>&lt;param‐name&gt;encoding&lt;&#x2F;param‐name&gt;</p></li><li><p>&lt;param‐value&gt;utf‐8&lt;&#x2F;param‐value&gt;</p></li><li><p>&lt;&#x2F;init‐param&gt;</p></li><li><p>&lt;&#x2F;filter&gt;</p></li></ol></li></ol><blockquote><p>9</p></blockquote><ol start="10"><li><p>&lt;filter‐mapping&gt;</p></li><li><p>&lt;filter‐name&gt;CharacterEncodingFilter&lt;&#x2F;filter‐name&gt;</p></li><li><p>&lt;url‐pattern&gt;&#x2F;*&lt;&#x2F;url‐pattern&gt;</p></li><li><p>&lt;&#x2F;filter‐mapping&gt;</p></li></ol><p>&nbsp;</p><ol start="2"><li>get请求中文参数出现乱码解决方法有两个：</li></ol><blockquote><p>①修改tomcat配置文件添加编码与工程编码一致，如下：</p><p>ISO8859­1是tomcat默认编码，需要将tomcat编码后的内容按utf­8编码。</p></blockquote><h5 id="Spring-MVC的控制器是不是单例模式，如果是，有什么问题，怎么解决？"><a href="#Spring-MVC的控制器是不是单例模式，如果是，有什么问题，怎么解决？" class="headerlink" title="Spring MVC的控制器是不是单例模式，如果是，有什么问题，怎么解决？"></a>Spring MVC的控制器是不是单例模式，如果是，有什么问题，怎么解决？</h5><blockquote><p>答：是单例模式，所以在多线程访问的时候有线程安全问题，不要用同步，会影响性能的，解决方案是在控制器里面不能写字段。</p></blockquote><h5 id="请描述Spring-MVC的工作流程？描述一下-DispatcherServlet-的工作流程？"><a href="#请描述Spring-MVC的工作流程？描述一下-DispatcherServlet-的工作流程？" class="headerlink" title="请描述Spring MVC的工作流程？描述一下 DispatcherServlet 的工作流程？"></a>请描述Spring MVC的工作流程？描述一下 DispatcherServlet 的工作流程？</h5><blockquote><p>（1）用户发送请求至前端控制器DispatcherServlet；</p><p>（2） DispatcherServlet收到请求后，调用HandlerMapping处理器映射器，请求获取Handle；</p><p>（3）处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给 DispatcherServlet；</p></blockquote><ol start="4"><li><p>DispatcherServlet 调用 HandlerAdapter处理器适配器；</p></li><li><p>HandlerAdapter 经过适配调用 具体处理器(Handler，也叫后端控制器)；</p></li></ol><blockquote><p>（6）Handler执行完成返回ModelAndView；</p><p>（7）HandlerAdapter将Handler执行结果ModelAndView返回给DispatcherServlet；</p><p>（8）DispatcherServlet将ModelAndView传给ViewResolver视图解析器进行解析；</p><p>（9）ViewResolver解析后返回具体View；</p><p>（10）DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）</p><p>（11）DispatcherServlet响应用户。</p></blockquote><p><img src="/media/image49.jpeg">{width&#x3D;”5.688757655293088in” height&#x3D;”4.127811679790026in”}</p><h5 id="70-SpringMvc怎么和AJAX相互调用的？"><a href="#70-SpringMvc怎么和AJAX相互调用的？" class="headerlink" title="70.SpringMvc怎么和AJAX相互调用的？"></a>70.SpringMvc怎么和AJAX相互调用的？</h5><blockquote><p>（1）加入Jackson.jar</p><p>（2）在配置文件中配置json的消息转换器.(jackson不需要该配置HttpMessageConverter）</p><p>（3）在接受Ajax方法里面可以直接返回Object，List等，但方法前面要加上@ResponseBody注解。</p><p><img src="/media/image50.jpeg">{width&#x3D;”4.2826148293963255in” height&#x3D;”1.5956244531933508in”}</p><p>springMVC对数据Message的处理操作提供了一个接口HttpMessageConverter，用来对参数值和返回值的转换处理。在请求和返回过程中可以进行转换json</p></blockquote><h5 id="71-Spring和SpringMVC为什么需要父子容器？"><a href="#71-Spring和SpringMVC为什么需要父子容器？" class="headerlink" title="71.Spring和SpringMVC为什么需要父子容器？"></a>71.Spring和SpringMVC为什么需要父子容器？</h5><blockquote><p>就功能性来说不用子父容器也可以完成（参考：SpringBoot就没用子父容器）</p></blockquote><ol><li><p>所以父子容器的主要作用应该是划分框架边界。有点单一职责的味道。service、dao层我们一般使用spring框架来管理、controller层交给springmvc管理</p></li><li><p>规范整体架构 使 父容器service无法访问子容器controller、子容器controller可以访问父容器 service</p></li><li><p>方便子容器的切换。如果现在我们想把web层从spring mvc替换成struts，那么只需要将spring­mvc.xml替换成 Struts的配置文件struts.xml即可，而spring­core.xml不需要改变。</p></li><li><p>为了节省重复bean创建</p></li></ol><h5 id="是否可以把所有Bean都通过Spring容器来管理？（Spring的applicationContext-xml中配置全局扫描"><a href="#是否可以把所有Bean都通过Spring容器来管理？（Spring的applicationContext-xml中配置全局扫描" class="headerlink" title="是否可以把所有Bean都通过Spring容器来管理？（Spring的applicationContext.xml中配置全局扫描)"></a>是否可以把所有Bean都通过Spring容器来管理？（Spring的applicationContext.xml中配置全局扫描)</h5><blockquote><p>不可以，这样会导致我们请求接口的时候产生404。 如果所有的Bean都交给父容器，SpringMVC在初始化HandlerMethods的时候（initHandlerMethods）无法根据Controller的handler方法注册HandlerMethod，并没有去查找父容器的bean；</p><p>也就无法根据请求URI 获取到 HandlerMethod来进行匹配.</p><p><img src="/media/image51.jpeg">{width&#x3D;”4.365512904636921in” height&#x3D;”0.48374890638670165in”}</p></blockquote><h5 id="是否可以把我们所需的Bean都放入Spring­mvc子容器里面来管理（springmvc的spring­-servlet-xml中配置全局扫描）"><a href="#是否可以把我们所需的Bean都放入Spring­mvc子容器里面来管理（springmvc的spring­-servlet-xml中配置全局扫描）" class="headerlink" title="是否可以把我们所需的Bean都放入Spring­mvc子容器里面来管理（springmvc的spring­ servlet.xml中配置全局扫描）?"></a>是否可以把我们所需的Bean都放入Spring­mvc子容器里面来管理（springmvc的spring­ servlet.xml中配置全局扫描）?</h5><blockquote><p><strong>可以</strong> ， 因为父容器的体现无非是为了获取子容器不包含的bean， 如果全部包含在子容器完全用不到父容器了， 所以是可以全部放在 springmvc子容器来管理的。</p><p>虽然可以这么做不过一般应该是不推荐这么去做的，一般人也不会这么干的。<strong>如果你的项目里有用到事物、或者aop记得也需要把这部分配置需要放到Spring-mvc子容器的配置文件来，不然一部分内容在子容器和一部分内容在父容器，可能就会导致你的事物或者AOP不生效</strong>。 所以如果aop或事物如果不生效也有可能是通过父容器(spring)去增强子容器 (Springmvc)，也就无法增强。</p></blockquote><h5 id="74-如何实现无XML零配置的SpringMVC"><a href="#74-如何实现无XML零配置的SpringMVC" class="headerlink" title="74.如何实现无XML零配置的SpringMVC"></a>74.如何实现无XML零配置的SpringMVC</h5><ol><li><p>省略<strong>web.xml</strong></p><p>a.  servlet3.0之后规范中提供了<strong>SPI</strong>扩展:META-INF&#x2F;services&#x2F;javax.servlet.ServletContainerInitializer</p><p>b.  SpringMVC通过实现ServletContainerInitializer接口</p><p>c.  动态注册ContextLoaderListener 和DispatcherServlet并创建子父容器(Application)</p></li><li><p>省略<strong>spring.xml</strong>和<strong>spring-mvc.xml(只是sprinmvc方式 ，springboot在自动配置类完成) 配置类--xml</strong></p><p>a.  实现一个继承AbstractAnnotationConfigDispatcherServletInitializer的类</p><p>b.  该类就实现了ServletContainerInitializer，它会创建ContextLoaderListener 和DispatcherServlet</p><p>c.  还会创建父子容器， 创建容器时<strong>传入父子容器配置类</strong>则可以替代spring.xml和spring-mvc.xml</p></li></ol><h5 id="75-SpringMVC的拦截器和过滤器有什么区别？执行顺序？"><a href="#75-SpringMVC的拦截器和过滤器有什么区别？执行顺序？" class="headerlink" title="75.SpringMVC的拦截器和过滤器有什么区别？执行顺序？"></a>75.SpringMVC的拦截器和过滤器有什么区别？执行顺序？</h5><blockquote><p>拦截器不依赖与servlet容器，过滤器依赖与servlet容器。</p><p>拦截器只能对action请求(DispatcherServlet 映射的请求)起作用，而过滤器则可以对几乎所有的请求起作用。 拦截器可以访问容器中的Bean(DI)，而过滤器不能访问（基于spring注册的过滤器也可以访问容器中的bean）。</p></blockquote><p>####### 执行顺序：</p><p><img src="/media/image52.png">{width&#x3D;”3.3020002187226596in” height&#x3D;”2.9175in”}<img src="/media/image53.jpeg">{width&#x3D;”4.325415573053369in” height&#x3D;”1.3534372265966754in”}</p><blockquote><p>多个过滤器的执行顺序跟xml文件中定义的先后关系有关</p><p>当然，对于多个拦截器它们之间的执行顺序跟在SpringMVC的配置文件中定义的先后顺序有关。</p></blockquote><h1 id="九、Spring-Boot"><a href="#九、Spring-Boot" class="headerlink" title="九、Spring Boot"></a>九、Spring Boot</h1><blockquote><p><strong>76.谈谈你对SpringBoot的理解，它有哪些特性（优点）？</strong> SpringBoot的用来快速开发Spring应用的一个脚手架、其设计目的是用来简新Spring应用的初始搭建以及开发过程。 1.SpringBoot提供了很多内置的Starter结合自动配置，对主流框架无配置集成、开箱即用。</p><p>2.SpringBoot简化了开发，采用JavaConfig的方式可以使用零xml的方式进行开发；</p><p>2.SpringBoot内置Web容器无需依赖外部Web服务器，省略了Web.xml，直接运行jar文件就可以启动web应用； 4.SpringBoot帮我管理了常用的第三方依赖的版本，减少出现版本冲突的问题；</p></blockquote><ol><li>SpringBoot自带了监控功能，可以监控应用程序的运行状况，或者内存、线程池、Http 请求统计等，同时还提供了优雅关闭应用程序等功能。</li></ol><h5 id="77-Spring和SpringBoot的关系和区别？"><a href="#77-Spring和SpringBoot的关系和区别？" class="headerlink" title="77.Spring和SpringBoot的关系和区别？"></a>77.Spring和SpringBoot的关系和区别？</h5><blockquote><p>SpringBoot是Spring生态的产品。 Spring Framework是一个容器框架</p><p>SpringBoot 它不是一个框架、它是一个可以快速构建基于Spring的脚手架(里面包含了Spring和各种框架），为开发Spring生态其他框架铺平道路</p><p>2个不是一个层面的东西， 没有可比性。</p></blockquote><h5 id="78-SpringBoot的核心注解"><a href="#78-SpringBoot的核心注解" class="headerlink" title="78.SpringBoot的核心注解"></a>78.SpringBoot的核心注解</h5><ol><li><p>@SpringBootApplication注解：这个注解标识了一个SpringBoot工程，它实际上是另外三个注解的组合，这三个注解是：</p></li><li><p>@SpringBootConfiguration：这个注解实际就是一个@Configuration，表示启动类也是一个配置类</p></li><li><p>@EnableAutoConfiguration：向Spring容器中导入了一个Selector，用来加载ClassPath下SpringFactories中所定义的自动配置类，将这些自动加载为配置Bean</p></li><li><p>@Conditional 也很关键， 如果没有它我们无法在自定义应用中进行定制开发</p></li></ol><blockquote><p>@ConditionalOnBean、 @ConditionalOnClass、 @ConditionalOnExpression、 @ConditionalOnMissingBean等。</p></blockquote><h5 id="79-springboot的自动配置原理？"><a href="#79-springboot的自动配置原理？" class="headerlink" title="79.springboot的自动配置原理？"></a>79.springboot的自动配置原理？</h5><blockquote><p>1.通过@SpringBootConfiguration 引入了<strong>@EnableAutoConfiguration</strong> (负责启动自动配置功能） 2.@EnableAutoConfiguration 引入了<strong>@Import</strong> 3.Spring容器启动时：加载IoC容器时会解析@Import 注解</p></blockquote><ol><li>@Import导入了一个<strong>deferredImportSelector</strong>(它会使SpringBoot的自动配置类的顺序在最后，这样方便我们扩展和覆盖？) 5.然后读取所有的**&#x2F;META-INF&#x2F;spring.factories**文件（SPI)</li></ol><blockquote><p>6.过滤出所有<strong>AutoConfigurtionClass</strong>类型的类 7.最后通过<strong>@ConditioOnXXX</strong>排除无效的自动配置类</p><p><img src="/media/image54.jpeg">{width&#x3D;”6.65513779527559in” height&#x3D;”2.3357283464566927in”}</p></blockquote><h5 id="80-为什么SpringBoot的jar可以直接运行？"><a href="#80-为什么SpringBoot的jar可以直接运行？" class="headerlink" title="80.为什么SpringBoot的jar可以直接运行？"></a>80.为什么SpringBoot的jar可以直接运行？</h5><ol><li><p>SpringBoot提供了一个插件spring-boot-maven-plugin用于把程序打包成一个可执行的jar包。</p></li><li><p>Spring Boot应用打包之后，生成一个Fat jar(jar包中包含jar)，包含了应用依赖的jar包和Spring Boot loader相关的类。</p></li><li><p>java -jar会去找jar中的manifest文件，在那里面找到真正的启动类（Main-Class）；</p></li><li><p>Fat jar的启动Main函数是JarLauncher，它负责创建一个LaunchedURLClassLoader来加载boot-lib下面的jar，并以一个新线程启动应用的启动类的Main函数（找到manifest中的Start-Class）。</p></li></ol><h5 id="81-SpringBoot的启动原理？"><a href="#81-SpringBoot的启动原理？" class="headerlink" title="81.SpringBoot的启动原理？"></a>81.SpringBoot的启动原理？</h5><ol><li>运行main方法： 初始化new SpringApplication 从spring.factories 读取 listener ApplicationContextInitializer 。</li></ol><blockquote><p><img src="/media/image55.jpeg">{width&#x3D;”4.33217738407699in” height&#x3D;”0.9406244531933509in”}</p><p>2.运行run方法</p></blockquote><ol start="3"><li><p>读取 环境变量 配置信息.….</p></li><li><p>创建springApplication上下文:<strong>ServletWebServerApplicationContext</strong></p></li><li><p>预初始化上下文 ： 将启动类作为配置类进行读取--&gt;将配置注册为BeanDefinition 6.调用refresh 加载IoC容器</p></li></ol><blockquote><p>invokeBeanFactoryPostProcessor -- 解析@Import: 加载所有的自动配置类 onRefresh 创建(内置)servlet容器</p><p>7.在这个过程中springboot会调用很多监听器对外进行扩展</p><p><img src="/media/image56.jpeg">{width&#x3D;”6.889550524934383in” height&#x3D;”8.06in”}</p></blockquote><h5 id="82-SpringBoot内置Tomcat启动原理？"><a href="#82-SpringBoot内置Tomcat启动原理？" class="headerlink" title="82.SpringBoot内置Tomcat启动原理？"></a>82.SpringBoot内置Tomcat启动原理？</h5><blockquote><p>当依赖Spring-boot-starter-web依赖时会在SpringBoot中添加：ServletWebServerFactoryAutoConfiguration servlet容器自动配置类</p><p>该自动配置类通过@Import导入了可用(通过@ConditionalOnClass判断决定使用哪一个)的一个Web容器工厂（默认Tomcat)在内嵌Tomcat类中配置了一个TomcatServletWebServerFactory的Bean（Web容器工厂）</p><p>它会在SpringBoot启动时 加载IoC容器(refresh) OnRefersh 创建内嵌的Tomcat并启动</p><p><img src="/media/image57.png">{width&#x3D;”4.273486439195101in” height&#x3D;”8.429791119860017in”}</p></blockquote><h5 id="83-SpringBoot外置Tomcat启动原理？"><a href="#83-SpringBoot外置Tomcat启动原理？" class="headerlink" title="83.SpringBoot外置Tomcat启动原理？"></a>83.SpringBoot外置Tomcat启动原理？</h5><blockquote><p>servlet3.0 规范官方文档： 8.2.4</p></blockquote><p><img src="/media/image58.jpeg">{width&#x3D;”6.757574365704287in” height&#x3D;”1.7179166666666668in”}</p><blockquote><p>大概： 当servlet容器启动时候 就会去META-INF&#x2F;services 文件夹中找到javax.servlet.ServletContainerInitializer， 这个文件里面肯定绑定一个ServletContainerInitializer. 当servlet容器启动时候就会去该文件中找到ServletContainerInitializer的实现类，从而创建它的实例调用onstartUp</p><p>@HandlesTypes(WebApplicationInitializer.class).</p><p>@HandlesTypes传入的类为ServletContainerInitializer感兴趣的</p><p>容器会自动在classpath中找到 WebApplicationInitializer 会传入到onStartup方法的 webAppInitializerClasses中</p><p>Set&lt;Class&lt;?&gt;&gt; webAppInitializerClasses 这里面也包括之前定义的TomcatStartSpringBoot</p><p><img src="/media/image59.png">{width&#x3D;”5.759113079615048in” height&#x3D;”1.96875in”}</p><p>SpringBootServletInitializer</p><p>之前定义的TomcatStartSpringBoot 就是继承它</p><p>当调用configure就会来到TomcatStartSpringBoot .configure</p><p>将Springboot启动类传入到builder.source</p><p>&#x2F;&#x2F; 调用SpringApplication application &#x3D; builder.build(); 就会根据传入的Springboot启动类来构建一个SpringApplication</p><p>&#x2F;&#x2F; 调用 return run(application); 就会帮我启动springboot应用</p><p>它就相当于我们的</p><p><strong>84.会不会SpringBoot自定义Starter？大概实现过程？</strong></p></blockquote><ol start="2"><li><p>HelloProperties</p></li><li><p>IndexController</p></li><li><p>HelloAutoConfitguration</p></li><li><p>spring.factories</p></li></ol><blockquote><p>在 resources 下创建文件夹 META-INF 并在 META-INF 下创建文件 spring.factories ，内容如下：</p><p><img src="/media/image60.png">{width&#x3D;”2.066052055993001in” height&#x3D;”0.56375in”}</p><p><img src="/media/image61.png">{width&#x3D;”1.9672637795275592in” height&#x3D;”1.8073742344706911in”}到这儿，我们的配置自定义的starter就写完了 ，我们hello-spring-boot-starter-autoconfigurer、hello-spring-boot- starter 安装成本地jar包。</p></blockquote><h5 id="85-SpringBoot读取配置文件的原理是什么？加载顺序是怎样的"><a href="#85-SpringBoot读取配置文件的原理是什么？加载顺序是怎样的" class="headerlink" title="85.SpringBoot读取配置文件的原理是什么？加载顺序是怎样的?"></a>85.SpringBoot读取配置文件的原理是什么？加载顺序是怎样的?</h5><blockquote><p>通过事件监听的方式读取的配置文件：ConfigFileApplicationListener优先级从高到低，高优先级的配置覆盖低优先级的配置，所有配置会形成互补配置。</p></blockquote><h5 id="86-SpringBoot的默认日志实现框架是什么？怎么切换成别的？"><a href="#86-SpringBoot的默认日志实现框架是什么？怎么切换成别的？" class="headerlink" title="86.SpringBoot的默认日志实现框架是什么？怎么切换成别的？"></a>86.SpringBoot的默认日志实现框架是什么？怎么切换成别的？</h5><p><img src="/media/image62.png">{width&#x3D;”6.829580052493438in” height&#x3D;”2.6679166666666667in”}</p><blockquote><p>总结：</p></blockquote><ol><li><p>SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p><p>a.  logback桥接：logback-classic</p></li><li><p>SpringBoot也把其他的日志都替换成了slf4j；</p><p>a.  log4j 适配： log4j-over-slf4j</p><p>b.  jul适配：jul-to-slf4j</p><p>c.  这两个适配器都是为了适配Spring的默认日志：jc</p></li></ol><h5 id="切换日志框架"><a href="#切换日志框架" class="headerlink" title="切换日志框架"></a>切换日志框架</h5><blockquote><p>将 logback切换成log4j2</p></blockquote><ol><li><p>将logback的场景启动器排除（slf4j只能运行有1个桥接器）</p></li><li><p>添加log4j2的场景启动器</p></li><li><p>添加log4j2的配置文件</p></li></ol><blockquote><p>将 logback切换成log4j</p></blockquote><ol><li><p>要将logback的桥接器排除</p></li><li><p>添加log4j的桥接器</p></li><li><p>添加log4j的配置文件</p></li></ol><blockquote><p>log4j.properties</p></blockquote><h5 id="87-说说你在开发的时候怎么在SpringBoot的基础上做扩展？"><a href="#87-说说你在开发的时候怎么在SpringBoot的基础上做扩展？" class="headerlink" title="87.说说你在开发的时候怎么在SpringBoot的基础上做扩展？"></a>87.说说你在开发的时候怎么在SpringBoot的基础上做扩展？</h5><blockquote><p>首先肯定要确认你扩展的技术点（比如扩展的是aop)打开aop自动配置类:</p><p>重点关注@ConditionalOnXXX 它可以帮助开启或关闭 某些功能 深入看源码 有些自动配置类 提供对外的扩展接口、实现接口也可以进行扩展</p></blockquote><h1 id="十、微服务"><a href="#十、微服务" class="headerlink" title="十、微服务"></a>十、微服务</h1><h5 id="88、微服务架构的优缺点"><a href="#88、微服务架构的优缺点" class="headerlink" title="88、微服务架构的优缺点"></a>88、微服务架构的优缺点</h5><ol><li><p>演变而来（从单体应用演变过来）</p></li><li><p>初期评估起手就上微服务</p></li></ol><h5 id="分工协作"><a href="#分工协作" class="headerlink" title="分工协作"></a>分工协作</h5><p><strong>单体：</strong>影响开发效率，发布和迭代性差；项目启动慢， 每个人对整体的项目都要有所把握； 业务缩减后如果</p><blockquote><p>语言不一致开发人员面临流失。</p><p><strong>拆分：提高开发效率</strong>和敏捷性ꞏ；单个服务启动快， 专人处理专事专注自己的服务； 充分利用项目开发人员</p><p>（哪怕是不同的语言不同框架，不同存储技术，也可以）</p></blockquote><h5 id="并发能力"><a href="#并发能力" class="headerlink" title="并发能力"></a>并发能力</h5><blockquote><p><strong>单体：</strong>整体集群，易造成系统资源浪费； 之前下单功能要去集群无法准确评测最大并发量， 因为所有的功能都在一起，无法准确预估扩容的服务器。</p><p><strong>拆分：</strong>服务集群，充分利用服务器资源； 现在只需要针对下单服务进行压测就可以得到，下单功能具体能承受的并发量最高水位，从而更准确的进行扩容。</p></blockquote><h5 id="维护能力（维护困难）"><a href="#维护能力（维护困难）" class="headerlink" title="维护能力（维护困难）"></a>维护能力（维护困难）</h5><blockquote><p><strong>单体：</strong>随着业务量增加，应用慢慢膨胀，后续可能会变得牵一发而动全身，难以维护。<strong>拆分：</strong>根据功能垂直拆分，责任更加分明，维护更加精准。</p></blockquote><h5 id="容错"><a href="#容错" class="headerlink" title="容错"></a>容错</h5><blockquote><p><strong>单体</strong>：单点故障，一个功能OOM导致整个应用都不可用</p><p><strong>拆分</strong>：弱依赖的服务出现故障，可以进行熔断（隔离） 依然不影响主业务正常使用</p></blockquote><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><blockquote><p><strong>单体</strong>：难以技术升级</p><p><strong>拆分</strong>：新的服务采用任意新技术（技术多样性）</p></blockquote><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><h6 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h6><blockquote><p>分布式系统较难编程，因为远程调用速度很慢，并且总是面临失败的风险。对于开发人员的技术要求更高<strong>最终一致性</strong></p><p>对于分布式系统而言，保持强一致性非常困难，这意味着每个人都必须管理最终一致性。<strong>运维复杂性</strong></p><p>微服务必定带来开发、上线、运维的复杂度的提高，如果说单体应用复杂度为 10，实施了微服务后的复杂度将是 100，配备了相应的工具和平台后，可以将复杂度降低到 50，但仍然比单体复杂的多。</p></blockquote><h6 id="隐式接口"><a href="#隐式接口" class="headerlink" title="隐式接口"></a>隐式接口</h6><blockquote><p>服务和服务之间通过接口来”联系”，当某一个服务更改接口格式时，可能涉及到此接口的所有服务都需要做调整。<strong>重复劳动</strong></p><p>在很多服务中可能都会使用到同一个功能，而这一功能点没有足够大到提供一个服务的程度，这个时候可能不同的服务团队都会单独开发这一功能，重复的业务逻辑，这违背了良好的软件工程中的很多原则。</p></blockquote><h5 id="89-SOA、分布式、微服务之间有什么关系和区别？"><a href="#89-SOA、分布式、微服务之间有什么关系和区别？" class="headerlink" title="89.SOA、分布式、微服务之间有什么关系和区别？"></a>89.SOA、分布式、微服务之间有什么关系和区别？</h5><blockquote><p>1分布式架构是指将单体架构中的各个部分拆分，然后部署不同的机器或进程中去，SOA和微服务基本上都是分布式架构的</p><p>2SOA是一种面向服务的架构，系统的所有服务都注册在总线上，当调用服务时，从总线上查找服务信息，然后调用</p><p>3微服务是一种更彻底的面向服务的架构，将系统中各个功能个体抽成一个个小的应用程序，基本保持一个应用对应的一个服务的架构</p><p><strong>90.怎么拆分微服务、拆分时机是什么？</strong></p><p><strong>怎么拆：</strong></p><p>1、高内聚低耦合，职责单一，服务粒度适中，服务不要太细（有的团队甚至一个接口一个服务，一个表一个服务）</p><p>2、以业务模型切入：比如产品，用户，订单为一个模型来切入）</p><p>3、演进式拆分：刚开始不要划分太细，可以随着迭代过程来逐步优化。</p></blockquote><p><img src="/media/image63.jpeg">{width&#x3D;”5.481999125109361in” height&#x3D;”1.9739577865266842in”}</p><blockquote><p>微服务 1.0，仅使用注册发现，基于 SpringCloud 或者 Dubbo 进行开发，目前意图实施微服务的传统企业大部分处于这个阶段，或者正从单体应用，向这个阶段过渡，处于 0.5 的阶段；</p><p>微服务 2.0，使用了熔断，限流，降级等服务治理策略，并配备完整微服务工具和平台，目前大部分互联网企业处于这个阶段。传统企业中的领头羊，在做互联网转型的过程中，正在向这个阶段过渡，处于 1.5 的阶段；</p><p>微服务 3.0，Service Mesh 将服务治理作为通用组件，下沉到平台层实现，使得应用层仅仅关注业务逻辑，平台层可以根据业务监控自动调度和参数调整，实现 AIOps 和智能调度。目前一线互联网公司在进行这方面的尝试。</p></blockquote><p>####### 拆分时机：</p><blockquote><p><strong>业务量足够大，足够成本（投入成本、时间成本）</strong></p><p>首先，如果是预估到业务在飞速增长，那就别犹豫，一定要提前考虑微服务的拆分。其次，如果在设计架构的时候，发现需要很多异构的技术栈，那也要考虑下微服务。</p><p>最后，如果公司技术基础设施非常完备，对应的业务起初就设计的非常复杂，那么也别犹豫，起手就上微服务。</p></blockquote><h5 id="width-”6-83325678040245in”-height-”2-384325240594926in”-91-Spring-Cloud有哪些常用组件，作用是什么？"><a href="#width-”6-83325678040245in”-height-”2-384325240594926in”-91-Spring-Cloud有哪些常用组件，作用是什么？" class="headerlink" title="{width&#x3D;”6.83325678040245in” height&#x3D;”2.384325240594926in”}91.Spring Cloud有哪些常用组件，作用是什么？"></a><img src="/media/image64.jpeg">{width&#x3D;”6.83325678040245in” height&#x3D;”2.384325240594926in”}91.Spring Cloud有哪些常用组件，作用是什么？</h5><blockquote><p>注册中心：管理服务</p><p>负载均衡：客户端的负载均衡器</p><p>服务调用：使远程服务调用更加优雅配置中心：管理服务的配置</p><p>服务熔断：保证应用高可用 防止出现服务雪崩，防止激增流量打垮冷系统.….分布式事务：Seata</p><p>网关：为客户端提供统一的服务，一些跟业务本身功能无光的公共逻辑都可以放在网关实现：鉴权、日志、限流、跨域、路由转发.…</p><p>链路追踪：实时追踪服务的监控状况，协助快速恢复</p></blockquote><h5 id="92-注册中心的原理是什么？"><a href="#92-注册中心的原理是什么？" class="headerlink" title="92.注册中心的原理是什么？"></a>92.注册中心的原理是什么？</h5><p><img src="/media/image65.jpeg">{width&#x3D;”5.569900481189851in” height&#x3D;”3.180833333333333in”}</p><blockquote><p>服务注册： 当服务启动 通过Rest请求的方式向Nacos Server注册自己的服务</p><p>服务心跳：Nacose Client 会维护一个定时心跳持续通知Nacos Server ， 默认5s一次， 如果nacos Client超过了15秒没有接收心跳，会将服务健康状态设置false（拉取的时候会忽略）， 如果nacos Client超过了30 秒没有接收心跳 剔除服务。</p><p>服务发现：Nacose Client 会有一个定时任务，实时去Nacos Server 拉取健康服务服务停止： Nacose Client 会主动通过Rest请求Nacos Server 发送一个注销的请求</p></blockquote><h5 id="93-谈谈配置中心？"><a href="#93-谈谈配置中心？" class="headerlink" title="93.谈谈配置中心？"></a>93.谈谈配置中心？</h5><blockquote><p><img src="/media/image66.jpeg">{width&#x3D;”6.682064741907261in” height&#x3D;”2.6774989063867016in”}</p><p>集中管理服务的配置、提高维护性、时效性、安全性<strong>有哪些东西可以作为配置？</strong></p><p>比方说，数据库连接Url，缓存连接url字符串，数据库的用户名，密码都可以作为配置的字符串，除此之外，还有一些可以动态调整的参数，比方说，客户端的超时设置限流规则和降级开关，流量的动态调度，比方说某个功能只是针对某个地区用户，还有某个功能只在大促的时段开放，如果这种需要通过静态的方式去配置或者发布的方式去配置，那么响应速度是非常慢，可能对业务存在风险，如果有一套集中式的配置中心，只需要相关人员在配置中心动态去调整参数，就基本上可以实时或准实时去调整相关对应的业务。所以配置中心在微服务中算是一个举足轻重的组件。</p></blockquote><h5 id="推还是拉"><a href="#推还是拉" class="headerlink" title="推还是拉"></a>推还是拉</h5><blockquote><p>现在我们了解了 Nacos 的配置管理的功能了，但是有一个问题我们需要弄明白，那就是 Nacos 客户端是怎么实时获取到 Nacos 服务端的最新数据的。</p><p>其实客户端和服务端之间的数据交互，无外乎两种情况：服务端推数据给客户端</p><p>客户端从服务端拉数据</p><p>那到底是推还是拉呢，从 Nacos 客户端<strong>通过 Listener</strong> 来接收最新数据进行分析</p><p><img src="/media/image67.png">{width&#x3D;”6.327788713910762in” height&#x3D;”2.7636450131233596in”}</p><p>原理：</p><p>Nacos 服务端创建了相关的配置项后，客户端就可以进行监听了。</p><p>客户端是通过一个定时任务来检查自己监听的配置项的数据的，一旦服务端的数据发生变化时，客户端将会获取到最新的数据，并将最新的数据保存在一个 CacheData 对象中，然后会重新计算 CacheData 的 md5 属性的值，此时就会对该 CacheData 所绑定的 Listener 触发 receiveConfigInfo（接收配置信息） 回调。</p></blockquote><h5 id="拉的优势"><a href="#拉的优势" class="headerlink" title="拉的优势"></a>拉的优势</h5><blockquote><p>客户端拉取服务端的数据与服务端推送数据给客户端相比，优势在哪呢，为什么 Nacos 不设计成主动推送数据，而是要客户端去拉取呢？如果用推的方式，服务端需要维持与客户端的长连接，这样的话需要耗费大量的资源，并且还需要考虑连接的有效性，例如需要通过心跳来维持两者之间的连接。而用拉的方式，客户端只需要通过一个无状态的 http 请求即可获取到服务端的数据。</p></blockquote><h5 id="94-说说服务网关可以做什么？"><a href="#94-说说服务网关可以做什么？" class="headerlink" title="94.说说服务网关可以做什么？"></a>94.说说服务网关可以做什么？</h5><blockquote><p><img src="/media/image68.jpeg">{width&#x3D;”4.2866283902012245in” height&#x3D;”2.1328116797900263in”}</p><p>面对互联网复杂的业务系统，基本可以将服务网关分成两类：流量网关和业务网关。</p><p><strong>流量网关：</strong>跟具体的后端业务系统和服务完全无关的部分，比如安全策略、全局性流控策略、流量分发策略等。</p><p><strong>业务网关：</strong>针对具体的后端业务系统，或者是服务和业务有一定关联性的部分，并且一般被直接部署在业务服务的前面。业务网关一般部署在流量网关之后，业务系统之前，比流量网关更靠近系统。我们大部分情况下说的 API 网关，狭义上指的是业务网关。并且如果系统的规模不大，我们也会将两者合二为一，使用一个网关来处理所有的工作</p></blockquote><h5 id="95-什么是服务雪崩？什么是服务限流？"><a href="#95-什么是服务雪崩？什么是服务限流？" class="headerlink" title="95.什么是服务雪崩？什么是服务限流？"></a>95.什么是服务雪崩？什么是服务限流？</h5><p><img src="/media/image69.jpeg">{width&#x3D;”6.721771653543307in” height&#x3D;”3.0795833333333333in”}</p><blockquote><p><strong>服务雪崩效应</strong>： 因服务提供者的不可用导致服务调用者的不可用，并将不可用逐渐放大的过程，就叫服务雪崩效应解决方式：</p><p><strong>通过熔断机制，</strong>当一个服务挂了，被影响的服务能够及时熔断，使用 Fallback 数据保证流程在非关键服务不可用的情况下，仍然可以进行。</p><p><strong>通过线程池和消息队列机制实现异步化</strong>，允许服务快速失败，当一个服务因为过慢而阻塞，被影响服务可以在超时后快速失败，不会影响整个调用链路。</p></blockquote><p><img src="/media/image70.jpeg">{width&#x3D;”4.32847331583552in” height&#x3D;”2.9182283464566927in”}</p><h5 id="服务限流"><a href="#服务限流" class="headerlink" title="服务限流"></a>服务限流</h5><blockquote><p>是指在高并发请求下，为了保护系统，可以对访问服务的请求进行数量上的限制，从而防止系统不被大量请求压垮，在秒杀中，限流是非常重要的。</p></blockquote><h5 id="96-什么是服务熔断？什么是服务降级？区别是什么？"><a href="#96-什么是服务熔断？什么是服务降级？区别是什么？" class="headerlink" title="96.什么是服务熔断？什么是服务降级？区别是什么？"></a>96.什么是服务熔断？什么是服务降级？区别是什么？</h5><blockquote><p>1服务熔断（终止交易），当服务A调用的某个服务B不可用时，上游服务A为了保证自己不受影响，及时切断与服务B的通讯。以防服务雪崩。 防止服务雪崩一种措施</p></blockquote><ol start="2"><li>服务降级（执行B计划）：提前预想好另外一种兜底措施， 可以进行后期补救。 直到服务B恢复，再恢复和B服务的正常通讯。 当被调用服务不可用时的一种兜底措施。</li></ol><h5 id="97-说说Seata的实现原理？"><a href="#97-说说Seata的实现原理？" class="headerlink" title="97.说说Seata的实现原理？"></a>97.说说Seata的实现原理？</h5><blockquote><p>在应用中Seata整体事务逻辑基于两阶段提交的模型，核心概念包含三个角色： TC：事务协调者，即独立运行的seata-server，用于接收事务注册，提交和回滚。 TM：事务发起者。用来告诉TC全局事务的开始，提交，回滚。 RM：事务资源，每一个RM都会作为一个分支事务注册在TC。</p></blockquote><h6 id="AT-Auto-Transaction-模式"><a href="#AT-Auto-Transaction-模式" class="headerlink" title="AT(Auto Transaction)模式"></a>AT(Auto Transaction)模式</h6><blockquote><p><strong>第一阶段</strong></p><p>过程：</p><p>TM 向 TC 申请开启一个全局事务，全局事务创建并生成一个全局唯一的XID。 XID 在微服务调用链路的上下文中传播。</p><p>假设运行：<strong>update</strong> product <strong>set name</strong> &#x3D; &#39;GTS&#39; <strong>where name</strong> &#x3D; &#39;TXC&#39;; &#x2F;&#x2F; id&#x3D;1</p></blockquote><ol><li><p>解析 SQL：得到 SQL 的类型（UPDATE），表（product），条件（where name &#x3D; &#39;TXC&#39;）等相关的信息。</p></li><li><p>查询前镜像：根据解析得到的条件信息，生成查询语句，定位数据。 select * from product where name</p></li></ol><blockquote><p>&#x3D; &#39;TXC&#39; 镜像前数据</p></blockquote><ol start="3"><li><p>执行业务 SQL：更新这条记录的 name 为 &#39;GTS&#39;。</p></li><li><p>查询后镜像：根据前镜像的结果，通过 主键 定位数据。select * from produc where name &#x3D; &#39;TXC&#39; 镜像后数据</p></li><li><p>插入回滚日志：把前后镜像数据以及业务 SQL 相关的信息组成一条回滚日志记录，插入到 UNDO_LOG 表中。</p></li></ol><blockquote><p>提交前，RM 向 TC 注册分支：申请 product 表中，主键值等于 1 的记录的 全局锁 。</p></blockquote><ol start="6"><li>本地事务提交：业务数据的更新和前面步骤中生成的 UNDO LOG 一并提交。</li></ol><blockquote><p>TM 向 TC 发起针对 XID 的全局提交或回滚决议。将本地事务提交的结果上报给 TC</p></blockquote><p><img src="/media/image71.png">{width&#x3D;”6.7528685476815395in” height&#x3D;”3.315in”}</p><h3 id="二阶段-提交"><a href="#二阶段-提交" class="headerlink" title="二阶段-提交"></a>二阶段-提交</h3><blockquote><p>TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求。</p></blockquote><ol><li><p>收到 TC 的分支提交请求，把请求放入一个异步任务的队列中，马上返回提交成功的结果给 TC。</p></li><li><p><img src="/media/image72.png">{width&#x3D;”6.625010936132983in” height&#x3D;”3.3821872265966753in”}异步任务阶段的分支:提交请求，将异步和批量地删除相应 UNDO LOG 记录。</p></li></ol><h3 id="二阶段-回滚"><a href="#二阶段-回滚" class="headerlink" title="二阶段-回滚"></a>二阶段-回滚</h3><blockquote><p>TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求。</p></blockquote><ol><li><p>收到 TC 的分支回滚请求，开启一个本地事务，执行如下操作。</p></li><li><p>通过 XID 和 Branch ID 查找到相应的 UNDO LOG 记录。</p></li><li><p>数据校验：拿 UNDO LOG 中的后镜与当前数据进行比较，如果有不同，说明数据被当前全局事务之外的动作做了修改（出现脏写），转人工处理（Seata 因为无法感知这个脏写如何发生，此时只能打印日志和触发异常通知，告知用户需要人工介入）</p></li><li><p>人工没有脏写就简单了：根据 UNDO LOG 中的前镜像和业务 SQL 的相关信息生成并执行回滚的语句：</p></li><li><p><img src="/media/image73.png">{width&#x3D;”6.692711067366579in” height&#x3D;”3.4070833333333335in”}提交本地事务。并把本地事务的执行结果（即分支事务回滚的结果）上报给 TC。</p></li></ol><blockquote><p><strong>98.你的微服务项目出了异常怎样更快速的定位？</strong></p><p><img src="/media/image74.jpeg">{width&#x3D;”5.977158792650918in” height&#x3D;”2.2691666666666666in”}</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ol><li>页面</li></ol><blockquote><p><img src="/media/image75.jpeg">{width&#x3D;”6.14278980752406in” height&#x3D;”3.0160411198600174in”}</p></blockquote><ol><li><p>报错通知</p><p>a.  DB</p></li></ol><blockquote><p><img src="/media/image76.png">{width&#x3D;”4.243413167104112in” height&#x3D;”4.336770559930009in”}</p><p>i.</p><p>1. Hystrix</p><p><img src="/media/image77.jpeg">{width&#x3D;”4.311620734908137in” height&#x3D;”2.9624989063867018in”}</p></blockquote><h3 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h3><blockquote><p>1. hystrix</p><p><img src="/media/image78.jpeg">{width&#x3D;”6.114226815398076in” height&#x3D;”3.1240616797900262in”}</p><p><img src="/media/image79.jpeg">{width&#x3D;”6.135669291338583in” height&#x3D;”3.2621872265966756in”}</p></blockquote><ol><li>日志</li></ol><blockquote><p><img src="/media/image80.jpeg">{width&#x3D;”6.4217049431321085in” height&#x3D;”3.4239577865266844in”}</p><p>a.</p></blockquote><h3 id="动态日志级别调整"><a href="#动态日志级别调整" class="headerlink" title="动态日志级别调整"></a>动态日志级别调整</h3><ol><li><p>使用场景</p><p>a.  线上问题排查。</p></li><li><p>使用方式</p><p>a.  直接调整单个运行的节点的日志级别获取更详细的日志信息。</p></li><li><p>使用效果</p><p>a.  无需重启服务即可打印详细日志。</p><p>b.  单节点调整，不会影响其他节点。</p></li></ol><p><img src="/media/image81.jpeg">{width&#x3D;”6.187591863517061in” height&#x3D;”3.073124453193351in”}</p><h3 id="历史状态日志"><a href="#历史状态日志" class="headerlink" title="历史状态日志"></a>历史状态日志</h3><ol><li><p>查看一定时间内的微服务状态信息</p><p>a.  上线下情况</p><p>b.  访问情况</p><p>c.  异常情况及其详细信息</p><p>d.  状态变化时间点</p></li></ol><p><img src="/media/image82.jpeg">{width&#x3D;”5.765074365704287in” height&#x3D;”2.7454155730533683in”}</p><h3 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h3><ol><li><p>微服务执行对应数据库测试语句失败。</p></li><li><p>监控页面微服务对应颜色从绿色变成红色。</p></li><li><p>触发企业微信通知</p></li><li><p>相关人员获知微服务出现的异常情况与原因</p></li><li><p>解决问题</p><p>a.  可以通过异常信息直接判断异常原因</p><pre><code class="hljs">i.  直接进行相关处理。</code></pre><p>b.  通过异常信息无法判断异常原因</p><pre><code class="hljs">i.  直接访问该微服务的异常节点查看相关日志。</code></pre></li></ol><blockquote><p><img src="/media/image83.jpeg">{width&#x3D;”4.314992344706912in” height&#x3D;”5.498124453193351in”}</p></blockquote><p><img src="/media/image84.jpeg">{width&#x3D;”4.336924759405075in” height&#x3D;”2.0125in”}</p><h3 id="低版本问题"><a href="#低版本问题" class="headerlink" title="低版本问题"></a>低版本问题</h3><blockquote><p><img src="/media/image85.jpeg">{width&#x3D;”3.416393263342082in” height&#x3D;”3.610207786526684in”}</p></blockquote><ol><li><p>低版本的配置中心会每次检查都会访问一次配置中心数据</p><p>a.  解决方案</p><pre><code class="hljs">i.  升级为部门标准版本</code></pre><p>b.  高版本优化</p><pre><code class="hljs">i.  加入缓存</code></pre></li></ol><h5 id="99-Ribbon说说有哪些负载均衡策略"><a href="#99-Ribbon说说有哪些负载均衡策略" class="headerlink" title="99.Ribbon说说有哪些负载均衡策略"></a>99.Ribbon说说有哪些负载均衡策略</h5><p><img src="/media/image86.png">{width&#x3D;”6.723307086614173in” height&#x3D;”2.6303116797900263in”}</p><p>####### IRule</p><blockquote><p>这是所有负载均衡策略的父接口，里边的核心方法就是choose方法，用来选择一个服务实例。</p></blockquote><p>####### AbstractLoadBalancerRule</p><blockquote><p>AbstractLoadBalancerRule是一个抽象类，里边主要定义了一个ILoadBalancer，这里定义它的目的主要是辅助负责均衡策略选取合适的服务端实例。</p></blockquote><p>####### RandomRule</p><blockquote><p>看名字就知道，这种负载均衡策略就是<strong>随机选择一个服务实例</strong>，看源码我们知道，在RandomRule的无参构造方法中初始化了一个Random对象，然后在它重写的choose方法又调用了choose(ILoadBalancer lb， Object key)这个重载的choose方法，在这个重载的choose方法中，每次利用 random对象生成一个不大于服务实例总数的随机数，并将该数作为下标所以获取一个服务实例。</p></blockquote><p>####### RoundRobinRule</p><blockquote><p>RoundRobinRule这种负载均衡策略叫做线性<strong>轮询负载均衡策略</strong>。这个类的choose(ILoadBalancer lb， Object key)函数整体逻辑是这样的：开启一个计数器count，在while循环中遍历服务清单，获取清单之前先通过incrementAndGetModulo方法获取一个下标，这个下标是一个不断自增长</p><p>的数先加1然后和服务清单总数取模之后获取到的（所以这个下标从来不会越界），拿着下标再去服务清单列表中取服务，每次循环计数器都会加</p><p>1，如果连续10次都没有取到服务，则会报一个警告No available alive servers after 10 tries from load balancer: XXXX。</p><p><strong>RetryRule</strong>（在轮询的基础上进行重试）</p><p>看名字就知道这种负载均衡策略带有<strong>重试</strong>功能。首先RetryRule中又定义了一个subRule，它的实现类是RoundRobinRule，然后在RetryRule的 choose(ILoadBalancer lb， Object key)方法中，每次还是采用RoundRobinRule中的choose规则来选择一个服务实例，如果选到的实例正常就返回，如果选择的服务实例为null或者已经失效，则在失效时间deadline之前不断的进行重试（重试时获取服务的策略还是RoundRobinRule中定义的策略），如果超过了deadline还是没取到则会返回一个null。</p><p><strong>WeightedResponseTimeRule（</strong>权重 —nacos的NacosRule ，Nacos还扩展了一个自己的基于配置的权重扩展<strong>）</strong> WeightedResponseTimeRule是RoundRobinRule的一个子类，在WeightedResponseTimeRule中对RoundRobinRule的功能进行了扩展， WeightedResponseTimeRule中会根据每一个实例的运行情况来给计算出该实例的一个<strong>权重</strong>，然后在挑选实例的时候则根据权重进行挑选，这样能够实现更优的实例调用。WeightedResponseTimeRule中有一个名叫DynamicServerWeightTask的定时任务，默认情况下每隔30秒会计算一次各个服务实例的权重，权重的计算规则也很简单，<strong>如果一个服务的平均响应时间越短则权重越大，那么该服务实例被选中执行任务的概率也就越大</strong>。</p></blockquote><p>####### ClientConfigEnabledRoundRobinRule</p><blockquote><p>ClientConfigEnabledRoundRobinRule选择策略的实现很简单，内部定义了RoundRobinRule，choose方法还是采用了RoundRobinRule的 choose方法，所以它的选择策略<strong>和RoundRobinRule的选择策略一致</strong>，不赘述。</p></blockquote><p>####### BestAvailableRule</p><blockquote><p>BestAvailableRule继承自ClientConfigEnabledRoundRobinRule，它在ClientConfigEnabledRoundRobinRule的基础上主要增加了根据 loadBalancerStats中保存的服务实例的状态信息来<strong>过滤掉失效的服务实例的功能，然后顺便找出并发请求最小的服务实例来使用。</strong>然而 loadBalancerStats有可能为null，如果loadBalancerStats为null，则BestAvailableRule将采用它的父类即 ClientConfigEnabledRoundRobinRule的服务选取策略（线性轮询）。</p><p><strong>ZoneAvoidanceRule</strong> （<strong>默认规则</strong>，复合判断server所在区域的性能和server的可用性选择服务器。）</p><p>ZoneAvoidanceRule是PredicateBasedRule的一个实现类，只不过这里多一个过滤条件，ZoneAvoidanceRule中的过滤条件是以 ZoneAvoidancePredicate为主过滤条件和以</p><p>AvailabilityPredicate为次过滤条件组成的一个叫做CompositePredicate的组合过滤条件，过滤成功之后，继续采用线性轮询</p><p>(<strong>RoundRobinRule</strong>)的方式从过滤结果中选择一个出来。</p><p><strong>AvailabilityFilteringRule</strong>（先过滤掉故障实例，再选择并发较小的实例）</p><p>过滤掉一直连接失败的被标记为circuit tripped的后端Server，并过滤掉那些高并发的后端Server或者使用一个AvailabilityPredicate来包含过滤server的逻辑，其实就是检查status里记录的各个Server的运行状态。</p></blockquote><h5 id="100-你项目哪些场景用到了限流、降级？怎么配的？"><a href="#100-你项目哪些场景用到了限流、降级？怎么配的？" class="headerlink" title="100.你项目哪些场景用到了限流、降级？怎么配的？"></a>100.你项目哪些场景用到了限流、降级？怎么配的？</h5><blockquote><p>服务降级的预案</p><p>在进行降级之前要对系统进行梳理，提前将一些 <strong>不重要</strong> 或 <strong>不紧急</strong> 的服务（弱依赖）或任务进行服务的 <strong>延迟使用</strong> 或 <strong>暂停使用</strong>。 （积分）看看哪些服务是必须誓死保护，哪些系统是能够丢卒保帅；具体可以参考日志级别设置预案：</p><p>一般：有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；</p><p>警告：有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警；</p><p>错误：可用率低于90%，或者连接池被占用满了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；</p><p>严重错误：因为特殊原因数据错误了，此时需要紧急人工降级</p><p>测试会提供准确的数据；自己算： 二八法则</p><p>计算关系：</p><p>QPS &#x3D; 并发量 &#x2F; 平均响应时间并发量 &#x3D; QPS * 平均响应时间</p><p>根据以上计算关系，我们来预估下单日访问量在 1000W 需要多大的QPS来支持：</p><p>通常情况下，80% 的访问量集中在 20%的时间，算一下这 1000w pv实际需要机器达到多少qps才能满足， qps &#x3D; (1000w * 0.8) &#x2F; (24 * 3600 * 0.2)</p><p>qps &#x3D; 462.9</p><p>根据压力测试的反馈，单台机子的QPS是多少，利用以上结果就可以算出需要几台机器 或 大致推算出需不需要使用缓存配置方案一： 使用集群服务器 不使用缓存服务器</p><p>方案二： 使用集群服务器 同时使用缓存服务器 (推荐)例子：</p><p>每秒可以处理的请求数 QPS（TPS）：每秒钟可以处理的请求或者事务的数量。并发数： 系统同一时候处理的请求数量（事务数）</p><p>响应时间： 一般取平均响应时间 QPS（TPS）&#x3D; 并发数&#x2F;平均响应时间并发数 &#x3D; QPS*平均响应时间</p><p>例子:</p><p>一个典型的上班签到系统，早上8点上班。7点半到8点这30分钟的时间里用户会登录签到系统进行签到。公司员工为1000人，平均每一个员上登录签到系统的时长为5分钟。能够用以下的方法计算。</p><p>（1）QPS &#x3D; 1000&#x2F;(30*60) 事务&#x2F;秒</p><p>（2）平均响应时间为 &#x3D; 5*60 秒</p><p>（3）并发数&#x3D; QPS*平均响应时间 &#x3D; 1000&#x2F;(30*60) *(5*60)&#x3D;166.7</p><p>再看如果老板要求实现多少并发数，在反推出机器需要多少QPS，看是否集群配置。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式 - Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 实用小工具</title>
    <link href="/2024/02/20/windows-tools/"/>
    <url>/2024/02/20/windows-tools/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows-实用小工具"><a href="#Windows-实用小工具" class="headerlink" title="Windows 实用小工具"></a>Windows 实用小工具</h1><h2 id="TopMost-任意窗口置顶显示"><a href="#TopMost-任意窗口置顶显示" class="headerlink" title="TopMost -任意窗口置顶显示"></a>TopMost -任意窗口置顶显示</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我们经常会在电脑上打开不止一个软件窗口，有时可能<strong>需要某个窗口保持置顶</strong>在最上层显示。</p><p>比如写论文时的参考文档，或者想要边浏览网页边看视频……但是 Windows 以及很多软件本身并不自带“置顶”功能。</p><p>下面就给大家分享一款非常实用的 Windows 小工具——<strong>「Window TopMost Control」</strong>。它可以让电脑上的任意窗口置顶显示，完美让 Windows 支持置顶功能。</p><h3 id="让任意窗口置顶显示"><a href="#让任意窗口置顶显示" class="headerlink" title="让任意窗口置顶显示"></a>让任意窗口置顶显示</h3><p><strong>Window TopMost Control</strong> 是一款非常小巧简单的 Windows 软件，功能也只有一个——就是<strong>让任意窗口置顶显示</strong>。</p><img src="/2024/02/20/windows-tools/v2-2c666172108e4807def336b4fd4803db_1440w.webp" class="" title="img"><ul><li>官网：<a href="https://link.zhihu.com/?target=https://www.sordum.org/9182/window-topmost-control-v1-2/">Window TopMost Control</a></li><li>下载：<a href="https://link.zhihu.com/?target=https://pan.quark.cn/s/31e1d6e35371">Window TopMost Control v1.3</a>（32位 + 64位）</li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>软件为绿色版，下载后解压到文件夹中，双击运行 TopMost(_x64).exe，然后就能在任务栏托盘中看到软件图标了。</p> <img src="/2024/02/20/windows-tools/v2-69b724ea16bc9e1cda8c932d19925ce7_1440w.webp" class="" title="img"><p>右键软件图标 -&gt; Window List -&gt; 勾选需要置顶显示的窗口，完成。</p> <img src="/2024/02/20/windows-tools/v2-f73809a710bd6c7045cfdefba7bd2dd5_1440w.webp" class="" title="img"><p>此时，所选程序已置顶显示在最上面，即使点击其它窗口切换，也不会被覆盖。而且可以随时对置顶窗口进行操作和编辑。</p> <img src="/2024/02/20/windows-tools/v2-968ca48c16dba5660c7cf11c9177ac9f_1440w.webp" class="" title="img"><p>除了右键菜单，还有<strong>三种方式</strong>可以进行置顶设置：</p><ol><li>选中窗口 -&gt; 按快捷键「Ctrl + Alt + Space」；</li><li>选中窗口 -&gt; 双击托盘里的软件图标；</li><li>使用 CMD 命令行。</li></ol><p>设置（Options）中可以选择开机启动、保存窗口置顶配置、修改快捷键等。</p> <img src="/2024/02/20/windows-tools/v2-4ad43bc4e33e8e01dfb7a377444ee408_1440w.webp" class="" title="img"><p>同类软件还有之前介绍过的 PiP-Tool，但它是截取了部分区域进行画中画置顶显示，还是有些差别的，具体可以看《<a href="https://zhuanlan.zhihu.com/p/86102994">Windows 黑科技软件，让任意窗口以“画中画”模式置顶显示</a>》。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>Window TopMost Control 功能虽然简单，但非常实用，软件本身只有不到 1M 大小，就给电脑加上了置顶功能。对于有“窗口置顶”需要的朋友来说，这个软件相当不错！</p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WinPE</tag>
      
      <tag>UltraISO</tag>
      
      <tag>DiskGenius</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>free-apps 开发文档</title>
    <link href="/2024/02/03/free-apps/"/>
    <url>/2024/02/03/free-apps/</url>
    
    <content type="html"><![CDATA[<h1 id="free-apps-开发文档"><a href="#free-apps-开发文档" class="headerlink" title="free-apps 开发文档"></a>free-apps 开发文档</h1><h2 id="单个新日期"><a href="#单个新日期" class="headerlink" title="单个新日期"></a>单个新日期</h2><p>* </p><ul><li><pre><code class="hljs">MultiThreadGenScriptTextExecutor</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>开发文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mkv</title>
    <link href="/2024/02/02/mkv-util/"/>
    <url>/2024/02/02/mkv-util/</url>
    
    <content type="html"><![CDATA[<h3 id="m2ts转mkv"><a href="#m2ts转mkv" class="headerlink" title="m2ts转mkv"></a>m2ts转mkv</h3><p>mkvtoolnix-gui.exe</p><img src="/2024/02/02/mkv-util/image-20240202175316729.png" class="" title="image-20240202175316729"><h3 id="mkv提取字幕"><a href="#mkv提取字幕" class="headerlink" title="mkv提取字幕"></a>mkv提取字幕</h3><p>gMKVExtractGUI.exe</p><img src="/2024/02/02/mkv-util/image-20240202175538896.png" class="" title="image-20240202175538896">]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker Desktop 相关</title>
    <link href="/2024/02/01/docker-desktop/"/>
    <url>/2024/02/01/docker-desktop/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-Desktop-相关"><a href="#Docker-Desktop-相关" class="headerlink" title="Docker Desktop 相关"></a>Docker Desktop 相关</h1><p>启用或关闭 Windows 功能</p><p><a href="https://zhuanlan.zhihu.com/p/666788196">解决：Docker Desktop Unexpected WSL error</a></p><h3 id="记录安装docker-desktop遇到unexpected-wsl-error的解决过程"><a href="#记录安装docker-desktop遇到unexpected-wsl-error的解决过程" class="headerlink" title="记录安装docker desktop遇到unexpected wsl error的解决过程"></a><a href="https://zhuanlan.zhihu.com/p/669999834">记录安装docker desktop遇到unexpected wsl error的解决过程</a></h3><p>先卸载，再安装</p><p><a href="https://cloud.tencent.com/developer/article/2240706">Windows安装docker desktop打开报错问题</a></p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Installing, this may <span class="hljs-keyword">take</span> a few minutes...<br>WslRegisterDistribution failed <span class="hljs-keyword">with</span> error: <span class="hljs-number">0</span>x80370102<br>Please enable the <span class="hljs-keyword">Virtual</span> Machine <span class="hljs-keyword">Platform</span> Windows feature <span class="hljs-keyword">and</span> <span class="hljs-keyword">ensure</span> virtualization <span class="hljs-keyword">is</span> enabled <span class="hljs-keyword">in</span> the BIOS.<br><span class="hljs-keyword">For</span> information please visit https:<span class="hljs-comment">//aka.ms/enablevirtualization</span><br>Press any key <span class="hljs-keyword">to</span> <span class="hljs-keyword">continue</span>...<br></code></pre></td></tr></table></figure><img src="/2024/02/01/docker-desktop/image-20240201193545509.png" class="" title="image-20240201193545509">]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面试题</title>
    <link href="/2024/02/01/interview-question-java/"/>
    <url>/2024/02/01/interview-question-java/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h1><h2 id="什么是字节码？采用字节码的最大好处是什么"><a href="#什么是字节码？采用字节码的最大好处是什么" class="headerlink" title="什么是字节码？采用字节码的最大好处是什么"></a>什么是字节码？采用字节码的最大好处是什么</h2><p>字节码：Java源代码经过虚拟机编译器编译后产生的文件（即扩展为.class的文件），它不面向任何特定的处理器，只面向虚拟机。</p><p>采用字节码的好处：</p><p>Java语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以Java程序运行时比较高效，而且，由于字节码并不专对一种特定的机器，因此，Java程序无须重新编译便可在多种不同的计算机上运行。</p><p>先看下java中的编译器和解释器：</p><p>Java中引入了虚拟机的概念，即在机器和编译程序之间加入了一层抽象的虚拟机器。这台虚拟的机器在任何平台上都提供给编译程序一个的共同的接口。编译程序只需要面向虚拟机，生成虚拟机能够理解的代码，然后由解释器来将虚拟机代码转换为特定系统的机器码执行。在Java中，这种供虚拟机理解的代码叫做字节码（即扩展为.class的文件），它不面向任何特定的处理器，只面向虚拟机。每一种平台的解释器是不同的，但是实现的虚拟机是相同的。Java源程序经过编译器编译后变成字节码，字节码由虚拟机解释执行，虚拟机将每一条要执行的字节码送给解释器，解释器将其翻译成特定机器上的机器码，然后在特定的机器上运行，这就是上面提到的Java的特点的编译与解释并存的解释。</p><p>Java源代码—-&gt;编译器—-&gt;jvm可执行的Java字节码(即虚拟指令)—-&gt;jvm—-&gt;jvm中解释器—–&gt;机器可执行的二进制机器码—-&gt;程序运行。<br>⑧.<br>————————————————<br>版权声明：本文为CSDN博主「Java程序员-张凯」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41701956/article/details/110119625">https://blog.csdn.net/qq_41701956/article/details/110119625</a></p><h3 id="15-Java-中-IO-流分为几种？"><a href="#15-Java-中-IO-流分为几种？" class="headerlink" title="15. Java 中 IO 流分为几种？"></a>15. Java 中 IO 流分为几种？</h3><p>按功能来分：输入流（input）、输出流（output）。</p><p>按类型来分：字节流和字符流。</p><p>字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据。</p><h3 id="16-BIO、NIO、AIO-有什么区别？"><a href="#16-BIO、NIO、AIO-有什么区别？" class="headerlink" title="16. BIO、NIO、AIO 有什么区别？"></a>16. BIO、NIO、AIO 有什么区别？</h3><ul><li>BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。</li><li>NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。</li><li>AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。</li></ul><h2 id="面试总结之-JDK1-8新特性"><a href="#面试总结之-JDK1-8新特性" class="headerlink" title="面试总结之[JDK1.8新特性]"></a>面试总结之[JDK1.8新特性]</h2><p>分类专栏： 基础篇 文章标签： 面试 JDK8 新特性 java HashMap<br>版权<br>这几天面试中,问到JDK的基本都会问到有关JDK1.8的新特性,基于这点,自己简单总结了下;<br>看到网上有个人总结了这样一句话,感觉比较通俗易懂;</p><ul><li><p>速度更快 – 红黑树</p></li><li><p>代码更少 – Lambda</p></li><li><p>强大的Stream API – Stream</p></li><li><p>便于并行 – Parallel</p></li><li><p>最大化减少空指针异常 – Optional</p></li></ul><h3 id="1、HashMap"><a href="#1、HashMap" class="headerlink" title="1、HashMap"></a>1、HashMap</h3><p>有人会在问你HashMap的时候会问你JDK1.7和1.8有什么变化;<br>主要还是HashMap中链长度大于8时采取红黑树的结构存储。(1.7的时候是链表结构)<br>红黑树，除了添加，效率高于链表结构。</p><h3 id="2、ConcurrentHashMap-阻塞-zu-se"><a href="#2、ConcurrentHashMap-阻塞-zu-se" class="headerlink" title="2、ConcurrentHashMap  阻塞[zǔ sè]"></a>2、ConcurrentHashMap  阻塞[zǔ sè]</h3><p>Jdk1.7时隔壁级别ConcurrentLevel（锁分段机制）默认为16。</p><p>JDK1.8采取了CAS算法<br>CAS原理主要涉及的有锁机制、CAS 操作;具体可以参考CAS原理分析</p><p>Jdk1.8没有永久区，取而代之的是MetaSpace元空间，用的是物理内存。<br>(当你跟面试官聊到JVM的时候可以聊到1.8后用就去是被取代了,这回事一个加分项)</p><h3 id="3、Lambda表达式"><a href="#3、Lambda表达式" class="headerlink" title="3、Lambda表达式"></a>3、Lambda表达式</h3><p>1、Lambda表达式的基础语法：Java8引入了一个新的操作符“-&gt;”，该操作符成为箭头操作符或者Lambda操作符，箭头操作符将Lambda表达式拆分成两部分</p><p>左侧：Lambda表达式的参数列表<br>右侧：Lambda表达式中所需执行的功能，即Lambda体。</p><p>语法格式一：无参数，无返回值</p><p>Runnable r2 &#x3D; () -&gt; System.out.println(“hello lambda”);<br>        r2.run();</p><p>语法格式二：有一个参数，并且无返回值</p><p>(x) -&gt; System.out.print(x);<br>1<br>语法格式三：若只有一个参数，小括号可以省略不写</p><p>x -&gt; System.out.print(x);<br>1<br>语法格式四：有两个以上的参数，有返回值，并且Lambda体中有多条语句</p><pre><code class="hljs">    Comparator&lt;Integer&gt; c1 = (x, y) -&gt; &#123;        System.out.print(Integer.compare(x, y)+&quot;函数式接口&quot;);        return Integer.compare(x, y);    &#125;  ;    c1.compare(1, 2);</code></pre><p>语法格式五：若Lambda体中只有一条语句，return和大括号都可以省略不写</p><p>Comparator c1 &#x3D; (x,y) -&gt; Integer.compare(x,y);</p><p>语法格式六：Lambda表达式的参数列表的数据类型可以省略不写，因为JVM编译器可以通过上下文进行类型推断出数据类型，既“类型推断”。(Integer x,Integer y) -&gt; Integre.compare(x,y);<br>结论：<br>左右遇一括号省，左侧推断类型省， 能省则省。</p><h3 id="4、并行流"><a href="#4、并行流" class="headerlink" title="4、并行流"></a>4、并行流</h3><p>Fork&#x2F;Join框架：<br>在必要的情况下，将一个大任务进行必要的拆分Fork成若干个小任务，再将小任务的运算结果进行Join汇总。</p><p>Fork&#x2F;Join框架和传统线程池的区别：<br>采用“工作窃取”模式（Working-stealing），即当执行新的任务时它可以将其拆分分成更小的任务执行，并将小任务加到线程队列中，然后再从一个随机线程的队列中偷一个并把它放在自己的队列中。</p><p>相对于一般的线程池实现，fork&#x2F;join框架的优势体现在对其中包含的任务的处理方式上，如果一个线程正在执行的任务由于某些原因无法继续运行，那么该线程会处于等待状态，而在fork&#x2F;join框架实现中，如果某个子问题由于等待另外一个子问题的完成而无法继续运行，那么处理该子问题的线程会主动寻找其他尚未运行的子问题来执行，这种方式减少了线程等待的时间，提高了性能。</p><p>并行流就是把一个内容分成多个数据块，并用不同的线程分别处理每个数据块的流。<br>Java 8 中将并行进行了优化，我们可以很容易的对数据进行并行操作。Stream API 可以声明性地通过 parallel() 与sequential() 在并行流与顺序流之间进行切换。</p><h3 id="5、Optional-类"><a href="#5、Optional-类" class="headerlink" title="5、Optional 类"></a>5、Optional 类</h3><p>Optional 类(java.util.Optional) 是一个容器类，代表一个值存在或不存在，原来用 null 表示一个值不存在，现在Optional 可以更好的表达这个概念。并且可以避免空指针异常。</p><p>常用方法：</p><ul><li>Optional.of(T t) : 创建一个Optional 实例</li><li>Optional.empty() : 创建一个空的Optional 实例</li><li>Optional.ofNullable(T t):若t 不为null,创建Optional 实例,否则创建空实例</li><li>isPresent() : 判断是否包含值</li><li>orElse(T t) : 如果调用对象包含值，返回该值，否则返回t</li><li>orElseGet(Supplier s) :如果调用对象包含值，返回该值，否则返回s 获取的值</li><li>map(Function f): 如果有值对其处理，并返回处理后的Optional，否则返回Optional.empty()</li><li>flatMap(Function mapper):与map 类似，要求返回值必须是Optional<br>————————————————<br>版权声明：本文为CSDN博主「有糖哥」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/hequan199411/article/details/81713827">https://blog.csdn.net/hequan199411/article/details/81713827</a></li></ul><h2 id="十九、JVM"><a href="#十九、JVM" class="headerlink" title="十九、JVM"></a>十九、JVM</h2><h3 id="194-说一下-JVM-的主要组成部分及其作用？"><a href="#194-说一下-JVM-的主要组成部分及其作用？" class="headerlink" title="194. 说一下 JVM 的主要组成部分及其作用？"></a>194. 说一下 JVM 的主要组成部分及其作用？</h3><ul><li>类加载器（ClassLoader）</li><li>运行时数据区（Runtime Data Area）</li><li>执行引擎（Execution Engine）</li><li>本地库接口（Native Interface）</li></ul><p>组件的作用： </p><ul><li>首先通过类加载器（ClassLoader）会把 Java 代码转换成字节码，</li><li>运行时数据区（Runtime Data Area）再把字节码加载到内存中，</li><li>而字节码文件只是 JVM 的一套指令集规范，并不能直接交个底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），</li><li>将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。</li></ul><h3 id="说一下-JVM运行时数据区？"><a href="#说一下-JVM运行时数据区？" class="headerlink" title="说一下 JVM运行时数据区？"></a>说一下 JVM运行时数据区？</h3><ul><li>程序计数器</li><li>虚拟机栈</li><li>本地方法栈</li><li>堆</li><li>方法区</li></ul><p>有的区域随着虚拟机进程的启动而存在，有的区域则依赖用户进程的启动和结束而创建和销毁。</p> <img src="/2024/02/01/interview-question-java/640-17067762970382.webp" class="" title="图片"><h3 id="196-说一下堆栈的区别？"><a href="#196-说一下堆栈的区别？" class="headerlink" title="196. 说一下堆栈的区别？"></a>196. 说一下堆栈的区别？</h3><ol><li>栈内存存储的是局部变量而堆内存存储的是实体；</li><li>栈内存的更新速度要快于堆内存，因为局部变量的生命周期很短；</li><li>栈内存存放的变量生命周期一旦结束就会被释放，而堆内存存放的实体会被垃圾回收机制不定时的回收。</li></ol><h3 id="197-队列和栈是什么？有什么区别？"><a href="#197-队列和栈是什么？有什么区别？" class="headerlink" title="197. 队列和栈是什么？有什么区别？"></a>197. 队列和栈是什么？有什么区别？</h3><ul><li>队列和栈都是被用来预存储数据的。</li><li>队列允许先进先出检索元素，但也有例外的情况，Deque 接口允许从两端检索元素。</li><li>栈和队列很相似，但它运行对元素进行后进先出进行检索。</li></ul><h3 id="198-什么是双亲委派模型？"><a href="#198-什么是双亲委派模型？" class="headerlink" title="198. 什么是双亲委派模型？"></a>198. 什么是双亲委派模型？</h3><p>在介绍双亲委派模型之前先说下类加载器。对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立在 JVM 中的唯一性，每一个类加载器，都有一个独立的类名称空间。类加载器就是根据指定全限定名称将 class 文件加载到 JVM 内存，然后再转化为 class 对象。</p><p>类加载器分类：</p><ul><li>启动类加载器（Bootstrap ClassLoader），是虚拟机自身的一部分，用来加载Java_HOME&#x2F;lib&#x2F;目录中的，或者被 -Xbootclasspath 参数所指定的路径中并且被虚拟机识别的类库；</li><li>其他类加载器：</li><li>扩展类加载器（Extension ClassLoader）：负责加载<java_home style="box-sizing: border-box; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; outline: 0px !important;">\lib\ext目录或Java. ext. dirs系统变量指定的路径中的所有类库；</java_home></li><li>应用程序类加载器（Application ClassLoader）。负责加载用户类路径（classpath）上的指定类库，我们可以直接使用这个类加载器。一般情况，如果我们没有自定义类加载器默认就是用这个加载器。</li></ul><p>双亲委派模型：如果一个类加载器收到了类加载的请求，它首先不会自己去加载这个类，而是把这个请求委派给父类加载器去完成，每一层的类加载器都是如此，这样所有的加载请求都会被传送到顶层的启动类加载器中，只有当父加载无法完成加载请求（它的搜索范围中没找到所需的类）时，子加载器才会尝试去加载类。</p><h3 id="199-说一下类加载的执行过程？"><a href="#199-说一下类加载的执行过程？" class="headerlink" title="199. 说一下类加载的执行过程？"></a>199. 说一下类加载的执行过程？</h3><p>类加载分为以下 5 个步骤：</p><ol><li>加载：根据查找路径找到相应的 class 文件然后导入；</li><li>检查：检查加载的 class 文件的正确性；</li><li>准备：给类中的静态变量分配内存空间；</li><li>解析：虚拟机将常量池中的符号引用替换成直接引用的过程。符号引用就理解为一个标示，而在直接引用直接指向内存中的地址；</li><li>初始化：对静态变量和静态代码块执行初始化工作。</li></ol><h3 id="200-怎么判断对象是否可以被回收？"><a href="#200-怎么判断对象是否可以被回收？" class="headerlink" title="200. 怎么判断对象是否可以被回收？"></a>200. 怎么判断对象是否可以被回收？</h3><p>一般有两种方法来判断：</p><ul><li>引用计数器：为每个对象创建一个引用计数，有对象引用时计数器 +1，引用被释放时计数 -1，当计数器为 0 时就可以被回收。它有一个缺点不能解决循环引用的问题；</li><li>可达性分析：从 GC Roots 开始向下搜索，搜索所走过的路径称为引用链。当一个对象到 GC Roots 没有任何引用链相连时，则证明此对象是可以被回收的。</li></ul><h3 id="201-Java-中都有哪些引用类型？"><a href="#201-Java-中都有哪些引用类型？" class="headerlink" title="201. Java 中都有哪些引用类型？"></a>201. Java 中都有哪些引用类型？</h3><ul><li>强引用</li><li>软引用</li><li>弱引用</li><li>虚引用（幽灵引用&#x2F;幻影引用）</li></ul><h3 id="202-说一下-JVM-有哪些垃圾回收算法？"><a href="#202-说一下-JVM-有哪些垃圾回收算法？" class="headerlink" title="202. 说一下 JVM 有哪些垃圾回收算法？"></a>202. 说一下 JVM 有哪些垃圾回收算法？</h3><ul><li>标记-清除算法</li><li>标记-整理算法</li><li>复制算法</li><li>分代算法</li></ul><h3 id="203-说一下-JVM-有哪些垃圾回收器？"><a href="#203-说一下-JVM-有哪些垃圾回收器？" class="headerlink" title="203. 说一下 JVM 有哪些垃圾回收器？"></a>203. 说一下 JVM 有哪些垃圾回收器？</h3><ul><li>Serial：最早的单线程串行垃圾回收器。</li><li>Serial Old：Serial 垃圾回收器的老年版本，同样也是单线程的，可以作为 CMS 垃圾回收器的备选预案。</li><li>ParNew：是 Serial 的多线程版本。</li><li>Parallel 和 ParNew 收集器类似是多线程的，但 Parallel 是吞吐量优先的收集器，可以牺牲等待时间换取系统的吞吐量。</li><li>Parallel Old 是 Parallel 老生代版本，Parallel 使用的是复制的内存回收算法，Parallel Old 使用的是标记-整理的内存回收算法。</li><li>CMS：一种以获得最短停顿时间为目标的收集器，非常适用 B&#x2F;S 系统。</li><li>G1：一种兼顾吞吐量和停顿时间的 GC 实现，是 JDK 9 以后的默认 GC 选项。</li></ul><h3 id="204-详细介绍一下-CMS-垃圾回收器？"><a href="#204-详细介绍一下-CMS-垃圾回收器？" class="headerlink" title="204. 详细介绍一下 CMS 垃圾回收器？"></a>204. 详细介绍一下 CMS 垃圾回收器？</h3><p>CMS 是英文 Concurrent Mark-Sweep 的简称，是以牺牲吞吐量为代价来获得最短回收停顿时间的垃圾回收器。对于要求服务器响应速度的应用上，这种垃圾回收器非常适合。在启动 JVM 的参数加上“-XX:+UseConcMarkSweepGC”来指定使用 CMS 垃圾回收器。</p><p>CMS 使用的是标记-清除的算法实现的，所以在 gc 的时候回产生大量的内存碎片，当剩余内存不能满足程序运行要求时，系统将会出现 Concurrent Mode Failure，临时 CMS 会采用 Serial Old 回收器进行垃圾清除，此时的性能将会被降低。</p><h3 id="205-新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？"><a href="#205-新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？" class="headerlink" title="205. 新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？"></a>205. 新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？</h3><ul><li>新生代回收器：Serial、ParNew、Parallel Scavenge</li><li>老年代回收器：Serial Old、Parallel Old、CMS</li><li>整堆回收器：G1</li></ul><p>新生代垃圾回收器一般采用的是复制算法，复制算法的优点是效率高，缺点是内存利用率低；老年代回收器一般采用的是标记-整理的算法进行垃圾回收。</p><h3 id="206-简述分代垃圾回收器是怎么工作的？"><a href="#206-简述分代垃圾回收器是怎么工作的？" class="headerlink" title="206. 简述分代垃圾回收器是怎么工作的？"></a>206. 简述分代垃圾回收器是怎么工作的？</h3><p>分代回收器有两个分区：老生代和新生代，新生代默认的空间占比总空间的 1&#x2F;3，老生代的默认占比是 2&#x2F;3。</p><p>新生代使用的是复制算法，新生代里有 3 个分区：Eden、To Survivor、From Survivor，它们的默认占比是 8:1:1，它的执行流程如下：</p><ul><li>把 Eden + From Survivor 存活的对象放入 To Survivor 区；</li><li>清空 Eden 和 From Survivor 分区；</li><li>From Survivor 和 To Survivor 分区交换，From Survivor 变 To Survivor，To Survivor 变 From Survivor。</li></ul><p>每次在 From Survivor 到 To Survivor 移动时都存活的对象，年龄就 +1，当年龄到达 15（默认配置是 15）时，升级为老生代。大对象也会直接进入老生代。</p><p>老生代当空间占用到达某个值之后就会触发全局垃圾收回，一般使用标记整理的执行算法。以上这些循环往复就构成了整个分代垃圾回收的整体执行流程。</p><h3 id="207-说一下-JVM-调优的工具？"><a href="#207-说一下-JVM-调优的工具？" class="headerlink" title="207. 说一下 JVM 调优的工具？"></a>207. 说一下 JVM 调优的工具？</h3><p>JDK 自带了很多监控工具，都位于 JDK 的 bin 目录下，其中最常用的是 jconsole 和 jvisualvm 这两款视图监控工具。</p><ul><li>jconsole：用于对 JVM 中的内存、线程和类等进行监控；</li><li>jvisualvm：JDK 自带的全能分析工具，可以分析：内存快照、线程快照、程序死锁、监控内存的变化、gc 变化等。</li></ul><h3 id="208-常用的-jvm-调优的参数都有哪些？"><a href="#208-常用的-jvm-调优的参数都有哪些？" class="headerlink" title="208. 常用的 jvm 调优的参数都有哪些？"></a>208. 常用的 jvm 调优的参数都有哪些？</h3><ul><li>-Xms2g：初始化推大小为 2g；</li><li>-Xmx2g：堆最大内存为 2g；</li><li>-XX:NewRatio&#x3D;4：设置年轻的和老年代的内存比例为 1:4；</li><li>-XX:SurvivorRatio&#x3D;8：设置新生代 Eden 和 Survivor 比例为 8:2；</li><li>–XX:+UseParNewGC：指定使用 ParNew + Serial Old 垃圾回收器组合；</li><li>-XX:+UseParallelOldGC：指定使用 ParNew + ParNew Old 垃圾回收器组合；</li><li>-XX:+UseConcMarkSweepGC：指定使用 CMS + Serial Old 垃圾回收器组合；</li><li>-XX:+PrintGC：开启打印 gc 信息；</li><li>-XX:+PrintGCDetails：打印 gc 详细信息。</li></ul><p><strong>（完）</strong></p><h1 id="Java-多线程编程"><a href="#Java-多线程编程" class="headerlink" title="Java 多线程编程"></a>Java 多线程编程</h1><p>Java 给多线程编程提供了内置的支持。 一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p><p>多线程是多任务的一种特别的形式，但多线程使用了更小的资源开销。</p><p>这里定义和线程相关的另一个术语 - 进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。一个线程不能独立的存在，它必须是进程的一部分。一个进程一直运行，直到所有的非守护线程都结束运行后才能结束。</p><p>多线程能满足程序员编写高效率的程序来达到充分利用 CPU 的目的。</p><hr><h2 id="一个线程的生命周期"><a href="#一个线程的生命周期" class="headerlink" title="一个线程的生命周期"></a>一个线程的生命周期</h2><p>线程是一个动态执行的过程，它也有一个从产生到死亡的过程。</p><p>下图显示了一个线程完整的生命周期。</p><img src="/2024/02/01/interview-question-java/java-thread.jpg" class="" title="img"><ul><li><p>新建状态:</p><p>使用 <strong>new</strong> 关键字和 <strong>Thread</strong> 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 <strong>start()</strong> 这个线程。</p></li><li><p>就绪状态:</p><p>当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。</p></li><li><p>运行状态:</p><p>如果就绪状态的线程获取 CPU 资源，就可以执行 **run()**，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。</p></li><li><p>阻塞状态:</p><p>如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：</p><ul><li>等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。</li><li>同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。</li><li>其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I&#x2F;O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I&#x2F;O 处理完毕，线程重新转入就绪状态。</li></ul></li><li><p>死亡状态:</p><p>一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。</p></li></ul><hr><h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><p>每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。</p><p>Java 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。</p><p>默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。</p><p>具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。</p><hr><h2 id="创建一个线程"><a href="#创建一个线程" class="headerlink" title="创建一个线程"></a>创建一个线程</h2><p>Java 提供了三种创建线程的方法：</p><ul><li>通过实现 Runnable 接口；</li><li>通过继承 Thread 类本身；</li><li>通过 Callable 和 Future 创建线程。</li></ul><hr><h2 id="通过实现-Runnable-接口来创建线程"><a href="#通过实现-Runnable-接口来创建线程" class="headerlink" title="通过实现 Runnable 接口来创建线程"></a>通过实现 Runnable 接口来创建线程</h2><p>创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类。</p><p>为了实现 Runnable，一个类只需要执行一个方法调用 run()，声明如下：</p><p>public void run()</p><p>你可以重写该方法，重要的是理解的 run() 可以调用其他方法，使用其他类，并声明变量，就像主线程一样。</p><p>在创建一个实现 Runnable 接口的类之后，你可以在类中实例化一个线程对象。</p><p>Thread 定义了几个构造方法，下面的这个是我们经常使用的：</p><p>Thread(Runnable threadOb,String threadName);</p><p>这里，threadOb 是一个实现 Runnable 接口的类的实例，并且 threadName 指定新线程的名字。</p><p>新线程创建之后，你调用它的 start() 方法它才会运行。</p><p>void start();</p><p>下面是一个创建线程并开始让它执行的实例：</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 文件名 : DisplayMessage.java</span><br><span class="hljs-comment">// 通过实现 Runnable 接口创建线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DisplayMessage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>   <span class="hljs-keyword">private</span> String message;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">DisplayMessage</span><span class="hljs-params">(String message)</span> &#123;<br>      <span class="hljs-built_in">this</span>.message = message;<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>         System.out.println(message);<br>      &#125;<br>   &#125;<br>&#125;<br><br>GuessANumber.java 文件代码：<br><span class="hljs-comment">// 文件名 : GuessANumber.java</span><br><span class="hljs-comment">// 通过继承 Thread 类创建线程</span><br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GuessANumber</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> number;<br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">GuessANumber</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> &#123;<br>      <span class="hljs-built_in">this</span>.number = number;<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">counter</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">guess</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">do</span> &#123;<br>         guess = (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">100</span> + <span class="hljs-number">1</span>);<br>         System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot; guesses &quot;</span> + guess);<br>         counter++;<br>      &#125; <span class="hljs-keyword">while</span>(guess != number);<br>      System.out.println(<span class="hljs-string">&quot;** Correct!&quot;</span> + <span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;in&quot;</span> + counter + <span class="hljs-string">&quot;guesses.**&quot;</span>);<br>   &#125;<br>&#125;<br><br>ThreadClassDemo.java 文件代码：<br><span class="hljs-comment">// 文件名 : ThreadClassDemo.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadClassDemo</span> &#123;<br> <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span> &#123;<br>      <span class="hljs-type">Runnable</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DisplayMessage</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>      <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(hello);<br>      thread1.setDaemon(<span class="hljs-literal">true</span>);<br>      thread1.setName(<span class="hljs-string">&quot;hello&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;Starting hello thread...&quot;</span>);<br>      thread1.start();<br>      <br>      <span class="hljs-type">Runnable</span> <span class="hljs-variable">bye</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DisplayMessage</span>(<span class="hljs-string">&quot;Goodbye&quot;</span>);<br>      <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(bye);<br>      thread2.setPriority(Thread.MIN_PRIORITY);<br>      thread2.setDaemon(<span class="hljs-literal">true</span>);<br>      System.out.println(<span class="hljs-string">&quot;Starting goodbye thread...&quot;</span>);<br>      thread2.start();<br> <br>      System.out.println(<span class="hljs-string">&quot;Starting thread3...&quot;</span>);<br>      <span class="hljs-type">Thread</span> <span class="hljs-variable">thread3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GuessANumber</span>(<span class="hljs-number">27</span>);<br>      thread3.start();<br>      <span class="hljs-keyword">try</span> &#123;<br>         thread3.join();<br>      &#125;<span class="hljs-keyword">catch</span>(InterruptedException e) &#123;<br>         System.out.println(<span class="hljs-string">&quot;Thread interrupted.&quot;</span>);<br>      &#125;<br>      System.out.println(<span class="hljs-string">&quot;Starting thread4...&quot;</span>);<br>      <span class="hljs-type">Thread</span> <span class="hljs-variable">thread4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GuessANumber</span>(<span class="hljs-number">75</span>);<br>      <br>      thread4.start();<br>      System.out.println(<span class="hljs-string">&quot;main() is ending...&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>class RunnableDemo implements Runnable {   private Thread t;   private String threadName;      RunnableDemo( String name) {      threadName &#x3D; name;      System.out.println(“Creating “ +  threadName );   }      public void run() {      System.out.println(“Running “ +  threadName );      try {         for(int i &#x3D; 4; i &gt; 0; i–) {            System.out.println(“Thread: “ + threadName + “, “ + i);            &#x2F;&#x2F; 让线程睡眠一会            Thread.sleep(50);         }      }catch (InterruptedException e) {         System.out.println(“Thread “ +  threadName + “ interrupted.”);      }      System.out.println(“Thread “ +  threadName + “ exiting.”);   }      public void start () {      System.out.println(“Starting “ +  threadName );      if (t &#x3D;&#x3D; null) {         t &#x3D; new Thread (this, threadName);         t.start ();      }   } }  public class TestThread {    public static void main(String args[]) {      RunnableDemo R1 &#x3D; new RunnableDemo( “Thread-1”);      R1.start();            RunnableDemo R2 &#x3D; new RunnableDemo( “Thread-2”);      R2.start();   }    }</p><p>编译以上程序运行结果如下：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Creating</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><br><span class="hljs-variable">Starting</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><br><span class="hljs-variable">Creating</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">2</span><br><span class="hljs-variable">Starting</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">2</span><br><span class="hljs-variable">Running</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><br><span class="hljs-built_in">Thread</span><span class="hljs-operator">:</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><br><span class="hljs-variable">Running</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">2</span><br><span class="hljs-built_in">Thread</span><span class="hljs-operator">:</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><br><span class="hljs-built_in">Thread</span><span class="hljs-operator">:</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><br><span class="hljs-built_in">Thread</span><span class="hljs-operator">:</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><br><span class="hljs-built_in">Thread</span><span class="hljs-operator">:</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><br><span class="hljs-built_in">Thread</span><span class="hljs-operator">:</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><br><span class="hljs-built_in">Thread</span><span class="hljs-operator">:</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><br><span class="hljs-built_in">Thread</span><span class="hljs-operator">:</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><br><span class="hljs-built_in">Thread</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">1</span> <span class="hljs-variable">exiting</span><span class="hljs-operator">.</span><br><span class="hljs-built_in">Thread</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">2</span> <span class="hljs-variable">exiting</span><span class="hljs-operator">.</span><br></code></pre></td></tr></table></figure><hr><h2 id="通过继承Thread来创建线程"><a href="#通过继承Thread来创建线程" class="headerlink" title="通过继承Thread来创建线程"></a>通过继承Thread来创建线程</h2><p>创建一个线程的第二种方法是创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。</p><p>继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。</p><p>该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。</p><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><p>class ThreadDemo extends Thread {   private Thread t;   private String threadName;      ThreadDemo( String name) {      threadName &#x3D; name;      System.out.println(“Creating “ +  threadName );   }      public void run() {      System.out.println(“Running “ +  threadName );      try {         for(int i &#x3D; 4; i &gt; 0; i–) {            System.out.println(“Thread: “ + threadName + “, “ + i);            &#x2F;&#x2F; 让线程睡眠一会            Thread.sleep(50);         }      }catch (InterruptedException e) {         System.out.println(“Thread “ +  threadName + “ interrupted.”);      }      System.out.println(“Thread “ +  threadName + “ exiting.”);   }      public void start () {      System.out.println(“Starting “ +  threadName );      if (t &#x3D;&#x3D; null) {         t &#x3D; new Thread (this, threadName);         t.start ();      }   } }  public class TestThread {    public static void main(String args[]) {      ThreadDemo T1 &#x3D; new ThreadDemo( “Thread-1”);      T1.start();            ThreadDemo T2 &#x3D; new ThreadDemo( “Thread-2”);      T2.start();   }    }</p><p>编译以上程序运行结果如下：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Creating</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><br><span class="hljs-variable">Starting</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><br><span class="hljs-variable">Creating</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">2</span><br><span class="hljs-variable">Starting</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">2</span><br><span class="hljs-variable">Running</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><br><span class="hljs-built_in">Thread</span><span class="hljs-operator">:</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><br><span class="hljs-variable">Running</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">2</span><br><span class="hljs-built_in">Thread</span><span class="hljs-operator">:</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><br><span class="hljs-built_in">Thread</span><span class="hljs-operator">:</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><br><span class="hljs-built_in">Thread</span><span class="hljs-operator">:</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><br><span class="hljs-built_in">Thread</span><span class="hljs-operator">:</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><br><span class="hljs-built_in">Thread</span><span class="hljs-operator">:</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><br><span class="hljs-built_in">Thread</span><span class="hljs-operator">:</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><br><span class="hljs-built_in">Thread</span><span class="hljs-operator">:</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><br><span class="hljs-built_in">Thread</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">1</span> <span class="hljs-variable">exiting</span><span class="hljs-operator">.</span><br><span class="hljs-built_in">Thread</span> <span class="hljs-built_in">Thread</span><span class="hljs-operator">-</span><span class="hljs-number">2</span> <span class="hljs-variable">exiting</span><span class="hljs-operator">.</span><br></code></pre></td></tr></table></figure><hr><h2 id="Thread-方法"><a href="#Thread-方法" class="headerlink" title="Thread 方法"></a>Thread 方法</h2><p>下表列出了Thread类的一些重要方法：</p><table><thead><tr><th align="left"><strong>序号</strong></th><th align="center"><strong>方法描述</strong></th></tr></thead><tbody><tr><td align="left">1</td><td align="center"><strong>public void start()</strong> 使该线程开始执行；<strong>Java</strong> 虚拟机调用该线程的 run 方法。</td></tr><tr><td align="left">2</td><td align="center"><strong>public void run()</strong> 如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。</td></tr><tr><td align="left">3</td><td align="center"><strong>public final void setName(String name)</strong> 改变线程名称，使之与参数 name 相同。</td></tr><tr><td align="left">4</td><td align="center"><strong>public final void setPriority(int priority)</strong>  更改线程的优先级。</td></tr><tr><td align="left">5</td><td align="center"><strong>public final void setDaemon(boolean on)</strong> 将该线程标记为守护线程或用户线程。</td></tr><tr><td align="left">6</td><td align="center"><strong>public final void join(long millisec)</strong> 等待该线程终止的时间最长为 millis 毫秒。</td></tr><tr><td align="left">7</td><td align="center"><strong>public void interrupt()</strong> 中断线程。</td></tr><tr><td align="left">8</td><td align="center"><strong>public final boolean isAlive()</strong> 测试线程是否处于活动状态。</td></tr></tbody></table><p>上述方法是被 Thread 对象调用的，下面表格的方法是 Thread 类的静态方法。</p><table><thead><tr><th align="left"><strong>序号</strong></th><th align="center"><strong>方法描述</strong></th></tr></thead><tbody><tr><td align="left">1</td><td align="center"><strong>public static void yield()</strong> 暂停当前正在执行的线程对象，并执行其他线程。</td></tr><tr><td align="left">2</td><td align="center"><strong>public static void sleep(long millisec)</strong> 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。</td></tr><tr><td align="left">3</td><td align="center"><strong>public static boolean holdsLock(Object x)</strong> 当且仅当当前线程在指定的对象上保持监视器锁时，才返回 true。</td></tr><tr><td align="left">4</td><td align="center"><strong>public static Thread currentThread()</strong> 返回对当前正在执行的线程对象的引用。</td></tr><tr><td align="left">5</td><td align="center"><strong>public static void dumpStack()</strong> 将当前线程的堆栈跟踪打印至标准错误流。</td></tr></tbody></table><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>如下的ThreadClassDemo 程序演示了Thread类的一些方法：</p><h2 id="DisplayMessage-java-文件代码："><a href="#DisplayMessage-java-文件代码：" class="headerlink" title="DisplayMessage.java 文件代码："></a>DisplayMessage.java 文件代码：</h2><p>&#x2F;&#x2F; 文件名 : DisplayMessage.java &#x2F;&#x2F; 通过实现 Runnable 接口创建线程 public class DisplayMessage implements Runnable {   private String message;      public DisplayMessage(String message) {      this.message &#x3D; message;   }      public void run() {      while(true) {         System.out.println(message);      }   } }</p><h2 id="GuessANumber-java-文件代码："><a href="#GuessANumber-java-文件代码：" class="headerlink" title="GuessANumber.java 文件代码："></a>GuessANumber.java 文件代码：</h2><p>&#x2F;&#x2F; 文件名 : GuessANumber.java &#x2F;&#x2F; 通过继承 Thread 类创建线程  public class GuessANumber extends Thread {   private int number;   public GuessANumber(int number) {      this.number &#x3D; number;   }      public void run() {      int counter &#x3D; 0;      int guess &#x3D; 0;      do {         guess &#x3D; (int) (Math.random() * 100 + 1);         System.out.println(this.getName() + “ guesses “ + guess);         counter++;      } while(guess !&#x3D; number);      System.out.println(“** Correct!” + this.getName() + “in” + counter + “guesses.**”);   } }</p><h2 id="ThreadClassDemo-java-文件代码："><a href="#ThreadClassDemo-java-文件代码：" class="headerlink" title="ThreadClassDemo.java 文件代码："></a>ThreadClassDemo.java 文件代码：</h2><p>&#x2F;&#x2F; 文件名 : ThreadClassDemo.java public class ThreadClassDemo {    public static void main(String [] args) {      Runnable hello &#x3D; new DisplayMessage(“Hello”);      Thread thread1 &#x3D; new Thread(hello);      thread1.setDaemon(true);      thread1.setName(“hello”);      System.out.println(“Starting hello thread…”);      thread1.start();            Runnable bye &#x3D; new DisplayMessage(“Goodbye”);      Thread thread2 &#x3D; new Thread(bye);      thread2.setPriority(Thread.MIN_PRIORITY);      thread2.setDaemon(true);      System.out.println(“Starting goodbye thread…”);      thread2.start();       System.out.println(“Starting thread3…”);      Thread thread3 &#x3D; new GuessANumber(27);      thread3.start();      try {         thread3.join();      }catch(InterruptedException e) {         System.out.println(“Thread interrupted.”);      }      System.out.println(“Starting thread4…”);      Thread thread4 &#x3D; new GuessANumber(75);            thread4.start();      System.out.println(“main() is ending…”);   } }</p><p>运行结果如下，每一次运行的结果都不一样。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs lasso">Starting hello <span class="hljs-keyword">thread</span><span class="hljs-params">...</span><br>Starting goodbye <span class="hljs-keyword">thread</span><span class="hljs-params">...</span><br>Hello<br>Hello<br>Hello<br>Hello<br>Hello<br>Hello<br>Goodbye<br>Goodbye<br>Goodbye<br>Goodbye<br>Goodbye<br><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br></code></pre></td></tr></table></figure><hr><h2 id="通过-Callable-和-Future-创建线程"><a href="#通过-Callable-和-Future-创建线程" class="headerlink" title="通过 Callable 和 Future 创建线程"></a>通过 Callable 和 Future 创建线程</h2><ul><li>\1. 创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。</li><li>\2. 创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</li><li>\3. 使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。</li><li>\4. 调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</li></ul><h2 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h2><p>public class CallableThreadTest implements Callable<Integer> {    public static void main(String[] args)      {          CallableThreadTest ctt &#x3D; new CallableThreadTest();          FutureTask<Integer> ft &#x3D; new FutureTask&lt;&gt;(ctt);          for(int i &#x3D; 0;i &lt; 100;i++)          {              System.out.println(Thread.currentThread().getName()+” 的循环变量i的值”+i);              if(i&#x3D;&#x3D;20)              {                  new Thread(ft,”有返回值的线程”).start();              }          }          try          {              System.out.println(“子线程的返回值：”+ft.get());          } catch (InterruptedException e)          {              e.printStackTrace();          } catch (ExecutionException e)          {              e.printStackTrace();          }        }    @Override      public Integer call() throws Exception      {          int i &#x3D; 0;          for(;i&lt;100;i++)          {              System.out.println(Thread.currentThread().getName()+” “+i);          }          return i;      }   }</p><hr><h2 id="创建线程的三种方式的对比"><a href="#创建线程的三种方式的对比" class="headerlink" title="创建线程的三种方式的对比"></a>创建线程的三种方式的对比</h2><ul><li>\1. 采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。</li><li>\2. 使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。</li></ul><hr><h2 id="线程的几个主要概念"><a href="#线程的几个主要概念" class="headerlink" title="线程的几个主要概念"></a>线程的几个主要概念</h2><p>在多线程编程时，你需要了解以下几个概念：</p><ul><li>线程同步</li><li>线程间通信</li><li>线程死锁</li><li>线程控制：挂起、停止和恢复</li></ul><hr><h2 id="多线程的使用"><a href="#多线程的使用" class="headerlink" title="多线程的使用"></a>多线程的使用</h2><p>有效利用多线程的关键是理解程序是并发执行而不是串行执行的。例如：程序中有两个子系统需要并发执行，这时候就需要利用多线程编程。</p><p>通过对多线程的使用，可以编写出非常高效的程序。不过请注意，如果你创建太多的线程，程序执行的效率实际上是降低了，而不是提升了。</p><p>请记住，上下文的切换开销也很重要，如果你创建了太多的线程，CPU 花费在上下文的切换的时间将多于执行程序的时间！</p><h2 id="Java面试题及答案2019版"><a href="#Java面试题及答案2019版" class="headerlink" title="Java面试题及答案2019版"></a>Java面试题及答案2019版</h2><p>Java程序员-张凯 2019-07-15 16:25:48  111579  收藏 998<br>分类专栏： java面试题 文章标签： java面试题<br>版权</p><h3 id="1、面向对象的特征有哪些方面？"><a href="#1、面向对象的特征有哪些方面？" class="headerlink" title="1、面向对象的特征有哪些方面？"></a>1、面向对象的特征有哪些方面？</h3><p>答：面向对象的特征主要有以下几个方面：</p><p>抽象：抽象是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的细节是什么。</p><p>继承：继承是从已有类得到继承信息创建新类的过程。提供继承信息的类被称为父类（超类、基类）；得到继承信息的类被称为子类（派生类）。继承让变化中的软件系统有了一定的延续性，同时继承也是封装程序中可变因素的重要手段（如果不能理解请阅读阎宏博士的《Java与模式》或《设计模式精解》中关于桥梁模式的部分）。</p><p>封装：通常认为封装是把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口。面向对象的本质就是将现实世界描绘成一系列完全自治、封闭的对象。我们在类中编写的方法就是对实现细节的一种封装；我们编写一个类就是对数据和数据操作的封装。可以说，封装就是隐藏一切可隐藏的东西，只向外界提供最简单的编程接口（可以想想普通洗衣机和全自动洗衣机的差别，明显全自动洗衣机封装更好因此操作起来更简单；我们现在使用的智能手机也是封装得足够好的，因为几个按键就搞定了所有的事情）。</p><p>多态性：多态性是指允许不同子类型的对象对同一消息作出不同的响应。简单的说就是用同样的对象引用调用同样的方法但是做了不同的事情。多态性分为编译时的多态性和运行时的多态性。如果将对象的方法视为对象向外界提供的服务，那么运行时的多态性可以解释为：当A系统访问B系统提供的服务时，B系统有多种提供服务的方式，但一切对A系统来说都是透明的（就像电动剃须刀是A系统，它的供电系统是B系统，B系统可以使用电池供电或者用交流电，甚至还有可能是太阳能，A系统只会通过B类对象调用供电的方法，但并不知道供电系统的底层实现是什么，究竟通过何种方式获得了动力）。方法重载（overload）实现的是编译时的多态性（也称为前绑定），而方法重写（override）实现的是运行时的多态性（也称为后绑定）。运行时的多态是面向对象最精髓的东西，要实现多态需要做两件事：1). 方法重写（子类继承父类并重写父类中已有的或抽象的方法）；2). 对象造型（用父类型引用引用子类型对象，这样同样的引用调用同样的方法就会根据子类对象的不同而表现出不同的行为）。</p><h3 id="2、访问修饰符public-private-protected-以及不写（默认）时的区别？"><a href="#2、访问修饰符public-private-protected-以及不写（默认）时的区别？" class="headerlink" title="2、访问修饰符public,private,protected,以及不写（默认）时的区别？"></a>2、访问修饰符public,private,protected,以及不写（默认）时的区别？</h3><p>答：类的成员不写访问修饰时默认为default。默认对于同一个包中的其他类相当于公开（public），对于不是同一个包中的其他类相当于私有（private）。受保护（protected）对子类相当于公开，对不是同一包中的没有父子关系的类相当于私有。Java中，外部类的修饰符只能是public或默认，类的成员（包括内部类）的修饰符可以是以上四种。</p><h3 id="3、String是最基本的数据类型吗？"><a href="#3、String是最基本的数据类型吗？" class="headerlink" title="3、String是最基本的数据类型吗？"></a>3、String是最基本的数据类型吗？</h3><p>答：不是。Java中的基本数据类型只有8个：byte、short、int、long、float、double、char、boolean；除了基本类型（primitive type），剩下的都是引用类型（reference type），Java 5以后引入的枚举类型也算是一种比较特殊的引用类型。</p><h3 id="4、float-f-3-4-是否正确？"><a href="#4、float-f-3-4-是否正确？" class="headerlink" title="4、float f&#x3D;3.4;是否正确？"></a>4、float f&#x3D;3.4;是否正确？</h3><p>答:不正确。3.4是双精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换float f &#x3D;(float)3.4; 或者写成float f &#x3D;3.4F;。</p><h3 id="5、short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗？"><a href="#5、short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗？" class="headerlink" title="5、short s1 &#x3D; 1; s1 &#x3D; s1 + 1;有错吗?short s1 &#x3D; 1; s1 +&#x3D; 1;有错吗？"></a>5、short s1 &#x3D; 1; s1 &#x3D; s1 + 1;有错吗?short s1 &#x3D; 1; s1 +&#x3D; 1;有错吗？</h3><p>答：对于short s1 &#x3D; 1; s1 &#x3D; s1 + 1;由于1是int类型，因此s1+1运算结果也是int 型，需要强制转换类型才能赋值给short型。而short s1 &#x3D; 1; s1 +&#x3D; 1;可以正确编译，因为s1+&#x3D; 1;相当于s1 &#x3D; (short)(s1 + 1);其中有隐含的强制类型转换。<br>示例代码如下：</p><p>前者有错，s1会自动提升为int类型，结果赋值给short类型，所以报错。<br>后者无错，+&#x3D;这种赋值运算符隐含了强制类型转换。其实变量s1的值未被使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Math.round(<span class="hljs-number">11.5</span>));    <span class="hljs-comment">// 12</span><br>        System.out.println(Math.round(-<span class="hljs-number">11.5</span>));   <span class="hljs-comment">// -11</span><br><br>        <span class="hljs-comment">// short s1 = 1; </span><br>        <span class="hljs-comment">// s1 = s1 + 1; // Type mismatch: cannot convert from int to short 类型不匹配：不能从int转换为short</span><br>     <br>        <span class="hljs-type">short</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// The value of the local variable s1 is not used 局部变量s1的值未被使用 出现了警告</span><br>        s1 += <span class="hljs-number">1</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、Java有没有goto？"><a href="#6、Java有没有goto？" class="headerlink" title="6、Java有没有goto？"></a>6、Java有没有goto？</h3><p>答：goto 是Java中的保留字，在目前版本的Java中没有使用。（根据James Gosling（Java之父）编写的《The Java Programming Language》一书的附录中给出了一个Java关键字列表，其中有goto和const，但是这两个是目前无法使用的关键字，因此有些地方将其称之为保留字，其实保留字这个词应该有更广泛的意义，因为熟悉C语言的程序员都知道，在系统类库中使用过的有特殊意义的单词或单词的组合都被视为保留字）</p><h3 id="7、int和Integer有什么区别？"><a href="#7、int和Integer有什么区别？" class="headerlink" title="7、int和Integer有什么区别？"></a>7、int和Integer有什么区别？</h3><p>答：Java是一个近乎纯洁的面向对象编程语言，但是为了编程的方便还是引入了基本数据类型，但是为了能够将这些基本数据类型当成对象操作，Java为每一个基本数据类型都引入了对应的包装类型（wrapper class），int的包装类就是Integer，从Java 5开始引入了自动装箱&#x2F;拆箱机制，使得二者可以相互转换。<br>Java 为每个原始类型提供了包装类型：</p><p>原始类型：boolean，char，byte，short，int，long，float，double<br>包装类型：Boolean，Character，Byte，Short，Integer，Long，Float，Double<br>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoUnboxingTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">3</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;                  <span class="hljs-comment">// 将3自动装箱成Integer类型</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>        System.out.println(a == b);     <span class="hljs-comment">// false 两个引用没有引用同一对象</span><br>        System.out.println(a == c);     <span class="hljs-comment">// true  a自动拆箱成int类型再和c比较</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>最近还遇到一个面试题，也是和自动装箱和拆箱有点关系的，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test03</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>, f2 = <span class="hljs-number">100</span>, f3 = <span class="hljs-number">150</span>, f4 = <span class="hljs-number">150</span>;<br>     <br>        System.out.println(f1 == f2);<br>        System.out.println(f3 == f4);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>如果不明就里很容易认为两个输出要么都是true要么都是false。首先需要注意的是f1、f2、f3、f4四个变量都是Integer对象引用，所以下面的&#x3D;&#x3D;运算比较的不是值而是引用。装箱的本质是什么呢？当我们给一个Integer对象赋一个int值的时候，会调用Integer类的静态方法valueOf，如果看看valueOf的源代码就知道发生了什么。</p><pre><code class="hljs">public static Integer valueOf(int i) &#123;    if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)        return IntegerCache.cache[i + (-IntegerCache.low)];    return new Integer(i);&#125;</code></pre><p>IntegerCache是Integer的内部类，其代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Cache to support the object identity semantics of autoboxing for values between</span><br><span class="hljs-comment">     * -128 and 127 (inclusive) as required by JLS.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * The cache is initialized on first usage.  The size of the cache</span><br><span class="hljs-comment">     * may be controlled by the &#123;<span class="hljs-doctag">@code</span> -XX:AutoBoxCacheMax=&lt;size&gt;&#125; option.</span><br><span class="hljs-comment">     * During VM initialization, java.lang.Integer.IntegerCache.high property</span><br><span class="hljs-comment">     * may be set and saved in the private system properties in the</span><br><span class="hljs-comment">     * sun.misc.VM class.</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntegerCache</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> -<span class="hljs-number">128</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> high;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer cache[];<br> <br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// high value may be configured by property</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">integerCacheHighPropValue</span> <span class="hljs-operator">=</span><br>            sun.misc.VM.getSavedProperty(<span class="hljs-string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);<br>        <span class="hljs-keyword">if</span> (integerCacheHighPropValue != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> parseInt(integerCacheHighPropValue);<br>                i = Math.max(i, <span class="hljs-number">127</span>);<br>                <span class="hljs-comment">// Maximum array size is Integer.MAX_VALUE</span><br>                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span>( NumberFormatException nfe) &#123;<br>                <span class="hljs-comment">// If the property cannot be parsed into an int, ignore it.</span><br>            &#125;<br>        &#125;<br>        high = h;<br> <br>        cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[(high - low) + <span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> low;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; cache.length; k++)<br>            cache[k] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(j++);<br> <br>        <span class="hljs-comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span><br>        <span class="hljs-keyword">assert</span> IntegerCache.high &gt;= <span class="hljs-number">127</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">IntegerCache</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>简单的说，如果整型字面量的值在-128到127之间，那么不会new新的Integer对象，而是直接引用常量池中的Integer对象，所以上面的面试题中f1&#x3D;&#x3D;f2的结果是true，而f3&#x3D;&#x3D;f4的结果是false。</p><p>提醒：越是貌似简单的面试题其中的玄机就越多，需要面试者有相当深厚的功力。</p><h3 id="8、-和-的区别？"><a href="#8、-和-的区别？" class="headerlink" title="8、&amp;和&amp;&amp;的区别？"></a>8、&amp;和&amp;&amp;的区别？</h3><p>答：&amp;运算符有两种用法：(1)按位与；(2)逻辑与。&amp;&amp;运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是true整个表达式的值才是true。&amp;&amp;之所以称为短路运算是因为，如果&amp;&amp;左边的表达式的值是false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用&amp;&amp;而不是&amp;，例如在验证用户登录时判定用户名不是null而且不是空字符串，应当写为：username !&#x3D; null &amp;&amp; !username.equals(“”)，二者的顺序不能交换，更不能用&amp;运算符，因为第一个条件如果不成立，根本不能进行字符串的equals比较，否则会产生NullPointerException异常。注意：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。</p><p>补充：如果你熟悉JavaScript，那你可能更能感受到短路运算的强大，想成为JavaScript的高手就先从玩转短路运算开始吧。</p><h3 id="9、解释内存中的栈-stack-、堆-heap-和方法区-method-area-的用法。"><a href="#9、解释内存中的栈-stack-、堆-heap-和方法区-method-area-的用法。" class="headerlink" title="9、解释内存中的栈(stack)、堆(heap)和方法区(method area)的用法。"></a>9、解释内存中的栈(stack)、堆(heap)和方法区(method area)的用法。</h3><p>答：通常我们定义一个基本数据类型的变量，一个对象的引用，还有就是函数调用的现场保存都使用JVM中的栈空间；而通过new关键字和构造器创建的对象则放在堆空间，堆是垃圾收集器管理的主要区域，由于现在的垃圾收集器都采用分代收集算法，所以堆空间还可以细分为新生代和老生代，再具体一点可以分为Eden、Survivor（又可分为From Survivor和To Survivor）、Tenured；方法区和堆都是各个线程共享的内存区域，用于存储已经被JVM加载的类信息、常量、静态变量、JIT编译器编译后的代码等数据；程序中的字面量（literal）如直接书写的100、”hello”和常量都是放在常量池中，常量池是方法区的一部分，。栈空间操作起来最快但是栈很小，通常大量的对象都是放在堆空间，栈和堆的大小都可以通过JVM的启动参数来进行调整，栈空间用光了会引发StackOverflowError，而堆和常量池空间不足则会引发OutOfMemoryError。</p><p>String str &#x3D; new String(“hello”);<br>上面的语句中变量str放在栈上，用new创建出来的字符串对象放在堆上，而”hello”这个字面量是放在方法区的。</p><p>补充1：较新版本的Java（从Java 6的某个更新开始）中，由于JIT编译器的发展和”逃逸分析”技术的逐渐成熟，栈上分配、标量替换等优化技术使得对象一定分配在堆上这件事情已经变得不那么绝对了。<br>补充2：运行时常量池相当于Class文件常量池具有动态性，Java语言并不要求常量一定只有编译期间才能产生，运行期间也可以将新的常量放入池中，String类的intern()方法就是这样的。</p><p>看看下面代码的执行结果是什么并且比较一下jdk7以前和以后的运行结果是否一致。</p><p>String.intern()是一个Native方法，它的作用是：如果字符串常量池中已经包含了一个等于此String对象的字符串，则返回代表池(运行时常量池)中这个字符串的String对象；否则，将此String对象包含的字符串添加到常量池中并且返回此String对象的引用。此方法在jdk1.6和jdk1.7中有差异。</p><p>String s1 &#x3D; new StringBuilder(“go”).append(“od”).toString();<br>System.out.println(s1.intern() &#x3D;&#x3D; s1);<br>String s2 &#x3D; new StringBuilder(“ja”).append(“va”).toString();<br>System.out.println(s2.intern() &#x3D;&#x3D; s2);</p><p>这段代码在jdk1.6中运行，会得到两个false，而在jdk1.7中运行会得到一个true一个false。产生差异的原因是：在jdk1.6中，intern()方法会把首次遇到的字符串实例复制到永久代中，返回的也是永久代中这个字符串实例的引用，而用StringBuilder创建的字符串实例在Java堆上，所以必然不是同一个引用，将返回false。而jdk1.7中的intern()实现不会再复制实例，只是在常量池中记录首次出现的实例引用，因此intern()返回的引用和由StringBuilder创建的那个字符串实例是同一个。对比str2返回false是因为“java”这个字符串在执行StringBuilder.toString()之前已经出现过，字符串常量池中已经有它的引用了，不符合首次出现的原则，而“good”这个字符串则是首次出现的，因此返回true。</p><p>现在的疑问是“java”这个字符串在常量池中什么时候存在了？<br>我最开始的猜想是“java”这个字符串是不是常驻在常量池中的？那为什么常驻在常量池中呢？Java虚拟机什么时候加载了“java”这个字符串？<br>  答：java虚拟机会自动调用System类，代码如下：</p><p>&#x2F;* register the natives via the static initializer.<br> *</p><ul><li>VM will invoke the initializeSystemClass method to complete</li><li>the initialization for this class separated from clinit.</li><li>Note that to use properties set by the VM, see the constraints</li><li>described in the initializeSystemClass method.<br> *&#x2F;<br> 在System类中的注释可以知道，调用了initializeSystemClass方法，在此方法中调用了Version对象的init静态方法<br> sun.misc.Version.init();<br> 因此sun.misc.Version类会在JDK类库的初始化过程中被加载并初始化。<br> 查看Version类定义的私有静态字符串常量如下：<br> private static final String launcher_name &#x3D; “java”;<br> private static final String java_version &#x3D; “1.7.0_51”;<br> private static final String java_runtime_name &#x3D; “Java(TM) SE Runtime Environment”;<br> private static final String java_runtime_version &#x3D; “1.7.0_51-b13”;<br> 在初始化Version类时，对其静态常量字段根据指定的常量值做默认初始化，所以”java”被加载到了字符串常量池中，修改上面代码使字符串值为上面常量中的任意一个都会返回false。<br> String str2&#x3D;new StringBuilder(“1.7.0”).append(“_51”).toString();<br> System.out.println(str2.intern()&#x3D;&#x3D;str2);<br>   这个问题解决了，上面这些在虚拟机加载时就初始化的常量，我们再定义其他的字符串常量试试，比如“xiaoyi and heize”，运行结果：true，可以知道”xiaoyi and heize”这个字符串常量没有被预先加载到常量池中。</li></ul><p>ps：在虚拟机上进行开发的开发人员称方法区为“永久代”，但两者本质上并不等价，仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集器扩展至方法区，或者说使用永久代来实现方法区而已，但现在看来使用永久代实现方法区并不是一个好主意，因为这样更容易遇到内存溢出问题，在jdk1.7中的HotSpot中，已经把原本放在永久代中的字符串常量池移除—摘自《深入理解Java虚拟机》</p><h3 id="10、Math-round-11-5-等于多少？Math-round-11-5-等于多少？"><a href="#10、Math-round-11-5-等于多少？Math-round-11-5-等于多少？" class="headerlink" title="10、Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？"></a>10、Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？</h3><p>答：Math.round(11.5)的返回值是12，Math.round(-11.5)的返回值是-11。四舍五入的原理是在参数上加0.5然后进行下取整。</p><p>Math类的成员方法：<br>    public static int round(float a) 　　四舍五入(参数为double的自学)<br>    要深刻理解四舍五入的具体含义：<br>        满足五入的条件后，得到的值要比原来的值大；<br>        满足四舍的条件后，得到的值要比原来的值小；<br>        不管是正数还是负数。</p><h3 id="11、switch是否能作用在byte上，是否能作用在long上，是否能作用在String上？"><a href="#11、switch是否能作用在byte上，是否能作用在long上，是否能作用在String上？" class="headerlink" title="11、switch是否能作用在byte上，是否能作用在long上，是否能作用在String上？"></a>11、switch是否能作用在byte上，是否能作用在long上，是否能作用在String上？</h3><p>答：在Java 5以前，switch(expr)中，expr只能是byte、short、char、int；从Java 5开始，Java中引入了枚举类型，expr也可以是enum类型；从Java 7开始，expr还可以是字符串（String），但是长整型（long）在目前所有的版本中都是不可以的。</p><h3 id="12、用最有效率的方法计算2乘以8？"><a href="#12、用最有效率的方法计算2乘以8？" class="headerlink" title="12、用最有效率的方法计算2乘以8？"></a>12、用最有效率的方法计算2乘以8？</h3><p>答： 2 &lt;&lt; 3（左移3位相当于乘以2的3次方，右移3位相当于除以2的3次方）。</p><p>补充：我们为编写的类重写hashCode方法时，可能会看到如下所示的代码，其实我们不太理解为什么要使用这样的乘法运算来产生哈希码（散列码），而且为什么这个数是个素数，为什么通常选择31这个数？前两个问题的答案你可以自己百度一下，选择31是因为可以用移位和减法运算来代替乘法，从而得到更好的性能。说到这里你可能已经想到了：31 * num 等价于(num &lt;&lt; 5) - num，左移5位相当于乘以2的5次方再减去自身就相当于乘以31，现在的VM都能自动完成这个优化。</p><p>为编写的类重写hashCode方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PhoneNumber</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> areaCode;<br>    <span class="hljs-keyword">private</span> String prefix;<br>    <span class="hljs-keyword">private</span> String lineNumber;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">prime</span> <span class="hljs-operator">=</span> <span class="hljs-number">31</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        result = prime * result + areaCode;<br>        result = prime * result<br>                + ((lineNumber == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : lineNumber.hashCode());<br>        result = prime * result + ((prefix == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : prefix.hashCode());<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>     <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == obj)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (getClass() != obj.getClass())<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">PhoneNumber</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (PhoneNumber) obj;<br>        <span class="hljs-keyword">if</span> (areaCode != other.areaCode)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (lineNumber == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (other.lineNumber != <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!lineNumber.equals(other.lineNumber))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (prefix == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (other.prefix != <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!prefix.equals(other.prefix))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="13、数组有没有length-方法？String有没有length-方法？"><a href="#13、数组有没有length-方法？String有没有length-方法？" class="headerlink" title="13、数组有没有length()方法？String有没有length()方法？"></a>13、数组有没有length()方法？String有没有length()方法？</h3><p>答：数组没有length()方法，有length的属性。<br>String有length()方法。在JavaScript中，获得字符串的长度是通过length属性得到的，这一点容易和Java混淆。</p><h3 id="14、在Java中，如何跳出当前的多重嵌套循环？"><a href="#14、在Java中，如何跳出当前的多重嵌套循环？" class="headerlink" title="14、在Java中，如何跳出当前的多重嵌套循环？"></a>14、在Java中，如何跳出当前的多重嵌套循环？</h3><p>答：在最外层循环前加一个标记如A，然后用break A;可以跳出多重循环。（Java中支持带标签的break和continue语句，作用有点类似于C和C++中的goto语句，但是就像要避免使用goto一样，应该避免使用带标签的break和continue，因为它不会让你的程序变得更优雅，很多时候甚至有相反的作用，所以这种语法其实不知道更好，为什么会让程序变得不优雅呢？一个程序跳来跳去，太灵活了，我们不能够控制了，就不好了）</p><h3 id="15、构造器（constructor）是否可被重写（override）？"><a href="#15、构造器（constructor）是否可被重写（override）？" class="headerlink" title="15、构造器（constructor）是否可被重写（override）？"></a>15、构造器（constructor）是否可被重写（override）？</h3><p>答：构造器不能被继承，因此不能被重写，但可以被重载。</p><h3 id="16、两个对象值相同-x-equals-y-true-，但却可有不同的hash-code，这句话对不对？"><a href="#16、两个对象值相同-x-equals-y-true-，但却可有不同的hash-code，这句话对不对？" class="headerlink" title="16、两个对象值相同(x.equals(y) &#x3D;&#x3D; true)，但却可有不同的hash code，这句话对不对？"></a>16、两个对象值相同(x.equals(y) &#x3D;&#x3D; true)，但却可有不同的hash code，这句话对不对？</h3><p>答：不对，如果两个对象x和y满足x.equals(y) &#x3D;&#x3D; true，它们的哈希码（hash code）应当相同。Java对于eqauls方法和hashCode方法是这样规定的：<br>  (1) 如果两个对象相同（equals方法返回true），那么它们的hashCode值一定要相同；<br>  (2) 如果两个对象的hashCode相同，它们并不一定相同。<br>当然，你未必要按照要求去做，但是如果你违背了上述原则就会发现在使用容器时，相同的对象可以出现在Set集合中，同时增加新元素的效率会大大下降（对于使用哈希存储的系统，如果哈希码频繁的冲突将会造成存取性能急剧下降）。</p><p>补充：关于equals和hashCode方法，很多Java程序都知道，但很多人也就是仅仅知道而已，在Joshua Bloch的大作《Effective Java》（很多软件公司，《Effective Java》、《Java编程思想》以及《重构：改善既有代码质量》是Java程序员必看书籍，如果你还没看过，那就赶紧去亚马逊买一本吧）中是这样介绍equals方法的：首先equals方法必须满足自反性（x.equals(x)必须返回true）、对称性（x.equals(y)返回true时，y.equals(x)也必须返回true）、传递性（x.equals(y)和y.equals(z)都返回true时，x.equals(z)也必须返回true）和一致性（当x和y引用的对象信息没有被修改时，多次调用x.equals(y)应该得到同样的返回值），而且对于任何非null值的引用x，x.equals(null)必须返回false。<br>实现高质量的equals方法的诀窍包括：<br>  1. 使用&#x3D;&#x3D;操作符检查”参数是否为这个对象的引用”；<br>  2. 使用instanceof操作符检查”参数是否为正确的类型”；<br>  3. 对于类中的关键属性，检查参数传入对象的属性是否与之相匹配；<br>  4. 编写完equals方法后，问自己它是否满足对称性、传递性、一致性；<br>  5. 重写equals时总是要重写hashCode；<br>  6. 不要将equals方法参数中的Object对象替换为其他的类型，在重写时不要忘掉@Override注解。</p><h3 id="17、是否可以继承String类？"><a href="#17、是否可以继承String类？" class="headerlink" title="17、是否可以继承String类？"></a>17、是否可以继承String类？</h3><p>答：String 类是final类，不可以被继承。</p><p>补充：继承String本身就是一个错误的行为，对String类型最好的重用方式是关联关系（Has-A）和依赖关系（Use-A）而不是继承关系（Is-A）。</p><h3 id="18、当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？"><a href="#18、当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？" class="headerlink" title="18、当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？"></a>18、当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？</h3><p>答：是值传递。Java语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用（地址值）。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。C++和C#中可以通过传引用或传输出参数来改变传入的参数的值。在C#中可以编写如下所示的代码，但是在Java中却做不到。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">CS01</span> &#123;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span> &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span>(<span class="hljs-params"><span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> x, <span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> y</span>)</span> &#123;<br>            <span class="hljs-built_in">int</span> temp = x;<br>            x = y;<br>            y = temp;<br>        &#125;<br>     <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span> (<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span> &#123;<br>            <span class="hljs-built_in">int</span> a = <span class="hljs-number">5</span>, b = <span class="hljs-number">10</span>;<br>            swap (<span class="hljs-keyword">ref</span> a, <span class="hljs-keyword">ref</span> b);<br>            <span class="hljs-comment">// a = 10, b = 5;</span><br>            Console.WriteLine (<span class="hljs-string">&quot;a = &#123;0&#125;, b = &#123;1&#125;&quot;</span>, a, b);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>说明：Java中没有传引用实在是非常的不方便，这一点在Java 8中仍然没有得到改进，正是如此在Java编写的代码中才会出现大量的Wrapper类（将需要通过方法调用修改的引用置于一个Wrapper类中，再将Wrapper对象传入方法），这样的做法只会让代码变得臃肿，尤其是让从C和C++转型为Java程序员的开发者无法容忍。</p><p>其实还是不够明白，我们来看看下面的例子吧：<br>强烈推荐鄙人的例子，参考链接：<a href="https://www.cnblogs.com/chenmingjun/p/8698719.html">https://www.cnblogs.com/chenmingjun/p/8698719.html</a></p><h3 id="19、String和StringBuilder、StringBuffer的区别？"><a href="#19、String和StringBuilder、StringBuffer的区别？" class="headerlink" title="19、String和StringBuilder、StringBuffer的区别？"></a>19、String和StringBuilder、StringBuffer的区别？</h3><p>答：Java平台提供了两种类型的字符串：String和StringBuffer&#x2F;StringBuilder，它们可以储存和操作字符串。其中String是只读字符串，也就意味着String引用的字符串内容是不能被改变的。而StringBuffer&#x2F;StringBuilder类表示的字符串对象可以直接进行修改。StringBuilder是Java 5中引入的，它和StringBuffer的方法完全相同，区别在于它是在单线程环境下使用的，因为它的所有方面都没有被synchronized修饰（非同步），因此它的效率也比StringBuffer要高。</p><p>面试题1：什么情况下用+运算符进行字符串连接比调用StringBuffer&#x2F;StringBuilder对象的append方法连接字符串性能更好？<br>面试题2：请说出下面程序的输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StringEqualTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Programming&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Programming&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Program&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ming&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Program&quot;</span> + <span class="hljs-string">&quot;ming&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s6</span> <span class="hljs-operator">=</span> s3 + s4;<br>        System.out.println(s1 == s2); <span class="hljs-comment">// false</span><br>        System.out.println(s1 == s5); <span class="hljs-comment">// true</span><br>        System.out.println(s1 == s6); <span class="hljs-comment">// false</span><br>        System.out.println(s1 == s6.intern()); <span class="hljs-comment">// true</span><br>        System.out.println(s2 == s2.intern()); <span class="hljs-comment">// false</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>补充：解答上面的面试题需要清除两点：</p><p>String对象的intern方法会得到字符串对象在常量池中对应的版本的引用（如果常量池中有一个字符串与String对象的equals结果是true），如果常量池中没有对应的字符串，则该字符串将被添加到常量池中，然后返回常量池中字符串的引用。<br>字符串的+操作其本质是创建了StringBuilder对象进行append操作，然后将拼接后的StringBuilder对象用toString方法处理成String对象，这一点可以用javap -c StringEqualTest.class命令获得class文件对应的JVM字节码指令就可以看出来。<br>要想获取对象的内存地址应使用System.identityHashCode()方法。</p><h3 id="20、重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？"><a href="#20、重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？" class="headerlink" title="20、重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？"></a>20、重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？</h3><p>答：方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。重载对返回类型没有特殊的要求。</p><p>面试题：华为的面试题中曾经问过这样一个问题：”为什么不能根据返回类型来区分重载”，快说出你的答案吧！</p><h3 id="21、描述一下JVM加载class文件的原理机制？"><a href="#21、描述一下JVM加载class文件的原理机制？" class="headerlink" title="21、描述一下JVM加载class文件的原理机制？"></a>21、描述一下JVM加载class文件的原理机制？</h3><p>答：JVM中类的装载是由类加载器（ClassLoader）和它的子类来实现的，Java中的类加载器是一个重要的Java运行时系统组件，它负责在运行时查找和装入类文件中的类。</p><p>由于Java的跨平台性，经过编译的Java源程序并不是一个可执行程序，而是一个或多个类文件。当Java程序需要使用某个类时，JVM会确保这个类已经被加载、连接（验证、准备和解析）和初始化。类的加载是指把类的.class文件中的数据读入到内存中，通常是创建一个字节数组读入.class文件，然后产生与所加载类对应的Class对象。加载完成后，Class对象还不完整，所以此时的类还不可用。当类被加载后就进入连接阶段，这一阶段包括验证、准备（为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。最后JVM对类进行初始化，包括：1) 如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类；2) 如果类中存在初始化语句，就依次执行这些初始化语句。</p><p>类的加载是由类加载器完成的，类加载器包括：根加载器（BootStrap）、扩展加载器（Extension）、系统加载器（System）和用户自定义类加载器（java.lang.ClassLoader的子类）。从Java 2（JDK 1.2）开始，类加载过程采取了父亲委托机制（PDM）。PDM更好的保证了Java平台的安全性，在该机制中，JVM自带的Bootstrap是根加载器，其他的加载器都有且仅有一个父类加载器。类的加载首先请求父类加载器加载，父类加载器无能为力时才由其子类加载器自行加载。JVM不会向Java程序提供对Bootstrap的引用。下面是关于几个类加载器的说明：</p><p>Bootstrap：一般用本地代码实现，负责加载JVM基础核心类库（rt.jar）；<br>Extension：从java.ext.dirs系统属性所指定的目录中加载类库，它的父加载器是Bootstrap；<br>System：又叫应用类加载器，其父类是Extension。它是应用最广泛的类加载器。它从环境变量classpath或者系统属性java.class.path所指定的目录中记载类，是用户自定义加载器的默认父加载器。</p><h3 id="22、char-型变量中能不能存贮一个中文汉字，为什么？"><a href="#22、char-型变量中能不能存贮一个中文汉字，为什么？" class="headerlink" title="22、char 型变量中能不能存贮一个中文汉字，为什么？"></a>22、char 型变量中能不能存贮一个中文汉字，为什么？</h3><p>答：char类型可以存储一个中文汉字，因为Java中使用的编码是Unicode（不选择任何特定的编码，直接使用字符在字符集中的编号，这是统一的唯一方法），一个char类型占2个字节（16比特），所以放一个中文是没问题的。</p><p>补充：使用Unicode意味着字符在JVM内部和外部有不同的表现形式，在JVM内部都是Unicode，当这个字符被从JVM内部转移到外部时（例如存入文件系统中），需要进行编码转换。所以Java中有字节流和字符流，以及在字符流和字节流之间进行转换的转换流，如InputStreamReader和OutputStreamReader，这两个类是字节流和字符流之间的适配器类，承担了编码转换的任务；对于C程序员来说，要完成这样的编码转换恐怕要依赖于union（联合体&#x2F;共用体）共享内存的特征来实现了。</p><h3 id="23、抽象类（abstract-class）和接口（interface）有什么异同？"><a href="#23、抽象类（abstract-class）和接口（interface）有什么异同？" class="headerlink" title="23、抽象类（abstract class）和接口（interface）有什么异同？"></a>23、抽象类（abstract class）和接口（interface）有什么异同？</h3><p>答：抽象类和接口都不能够实例化，但可以定义抽象类和接口类型的引用。一个类如果继承了某个抽象类或者实现了某个接口都需要对其中的抽象方法全部进行实现，否则该类仍然需要被声明为抽象类。接口比抽象类更加抽象，因为抽象类中可以定义构造器，可以有抽象方法和具体方法，而接口中不能定义构造器而且其中的方法全部都是抽象方法。抽象类中的成员可以是private、默认、protected、public的，而接口中的成员全都是public的。抽象类中可以定义成员变量，而接口中定义的成员变量实际上都是常量。有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法。</p><h3 id="24、静态嵌套类（Static-Nested-Class）和内部类（Inner-Class）的不同？"><a href="#24、静态嵌套类（Static-Nested-Class）和内部类（Inner-Class）的不同？" class="headerlink" title="24、静态嵌套类（Static Nested Class）和内部类（Inner Class）的不同？"></a>24、静态嵌套类（Static Nested Class）和内部类（Inner Class）的不同？</h3><p>答：Static Nested Class是被声明为静态（static）的内部类，它可以不依赖于外部类实例被实例化。而通常的内部类需要在外部类实例化后才能实例化，其语法看起来挺诡异的。</p><p>面试题：下面的代码哪些地方会产生编译错误？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;&#125;<br>     <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">()</span> &#123; <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>(); <br>    &#125;<br>     <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bar</span><span class="hljs-params">()</span> &#123; <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>(); <br>    &#125;<br>     <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：Java中非静态内部类对象的创建要依赖其外部类对象，上面的面试题中foo和main方法都是静态方法，静态方法中没有this，也就是说没有所谓的外部类对象，因此无法创建内部类对象，如果要在静态方法中创建内部类对象，可以这样做：new Outer().new Inner();</p><h3 id="25、Java中会存在内存泄漏吗？请简单描述。"><a href="#25、Java中会存在内存泄漏吗？请简单描述。" class="headerlink" title="25、Java中会存在内存泄漏吗？请简单描述。"></a>25、Java中会存在内存泄漏吗？请简单描述。</h3><p>答：理论上Java因为有垃圾回收机制（GC）不会存在内存泄露问题（这也是Java被广泛使用于服务器端编程的一个重要原因）；然而在实际开发中，可能会存在无用但可达的对象，这些对象不能被GC回收，因此也会导致内存泄露的发生。例如Hibernate的Session（一级缓存）中的对象属于持久态，垃圾回收器是不会回收这些对象的，然而这些对象中可能存在无用的垃圾对象，如果不及时关闭（close）或清空（flush）一级缓存就可能导致内存泄露。下面例子中的代码也会导致内存泄露。</p><p>import java.util.Arrays;<br>import java.util.EmptyStackException;</p><p>public class MyStack<T> {<br>    private T[] elements;<br>    private int size &#x3D; 0;</p><pre><code class="hljs">private static final int INIT_CAPACITY = 16; public MyStack() &#123;    elements = (T[]) new Object[INIT_CAPACITY];&#125; public void push(T elem) &#123;    ensureCapacity();    elements[size++] = elem;&#125; public T pop() &#123;    if(size == 0)         throw new EmptyStackException();    return elements[--size];&#125; private void ensureCapacity() &#123;    if(elements.length == size) &#123;        elements = Arrays.copyOf(elements, 2 * size + 1);    &#125;&#125;</code></pre><p>}<br>上面的代码实现了一个栈（先进后出（FILO））结构，乍看之下似乎没有什么明显的问题，它甚至可以通过你编写的各种单元测试。然而其中的pop方法却存在内存泄露的问题，当我们用pop方法弹出栈中的对象时，该对象不会被当作垃圾回收，即使使用栈的程序不再引用这些对象，因为栈内部维护着对这些对象的过期引用（obsolete reference）。在支持垃圾回收的语言中，内存泄露是很隐蔽的，这种内存泄露其实就是无意识的对象保持。如果一个对象引用被无意识的保留起来了，那么垃圾回收器不会处理这个对象，也不会处理该对象引用的其他对象，即使这样的对象只有少数几个，也可能会导致很多的对象被排除在垃圾回收之外，从而对性能造成重大影响，极端情况下会引发Disk Paging（物理内存与硬盘的虚拟内存交换数据），甚至造成OutOfMemoryError。</p><p>26、抽象的（abstract）方法是否可同时是静态的（static），是否可同时是本地方法（native），是否可同时被synchronized修饰？<br>答：都不能。抽象方法需要子类重写，而静态的方法是无法被重写的，因此二者是矛盾的。本地方法是由本地代码（如C代码）实现的方法，而抽象方法是没有实现的，也是矛盾的。synchronized和方法的实现细节有关，抽象方法不涉及实现细节，因此也是相互矛盾的。</p><h3 id="27、阐述静态变量和实例变量的区别。"><a href="#27、阐述静态变量和实例变量的区别。" class="headerlink" title="27、阐述静态变量和实例变量的区别。"></a>27、阐述静态变量和实例变量的区别。</h3><p>答：静态变量是被static修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个拷贝；实例变量必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。</p><p>补充：在Java开发中，上下文类和工具类中通常会有大量的静态成员。</p><h3 id="28、是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？"><a href="#28、是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？" class="headerlink" title="28、是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？"></a>28、是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？</h3><p>答：不可以，静态方法只能访问静态成员，因为非静态方法的调用要先创建对象，在调用静态方法时可能对象并没有被初始化。</p><h3 id="29、如何实现对象克隆？"><a href="#29、如何实现对象克隆？" class="headerlink" title="29、如何实现对象克隆？"></a>29、如何实现对象克隆？</h3><p>答：有两种方式：<br>  1) 实现Cloneable接口并重写Object类中的clone()方法；<br>  2) 实现Serializable接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆。</p><p>注意：基于序列化和反序列化实现的克隆不仅仅是深度克隆，更重要的是通过泛型限定，可以检查出要克隆的对象是否支持序列化，这项检查是编译器完成的，不是在运行时抛出异常，这种是方案明显优于使用Object类的clone方法克隆对象。让问题在编译的时候暴露出来总是好过把问题留到运行时。</p><h3 id="30、GC是什么？为什么要有GC？"><a href="#30、GC是什么？为什么要有GC？" class="headerlink" title="30、GC是什么？为什么要有GC？"></a>30、GC是什么？为什么要有GC？</h3><p>答：GC是垃圾收集的意思，内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，Java提供的GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，Java语言没有提供释放已分配内存的显示操作方法。Java程序员不用担心内存管理，因为垃圾收集器会自动进行管理。要请求垃圾收集，可以调用下面的方法之一：System.gc() 或 Runtime.getRuntime().gc() ，但JVM可以屏蔽掉显示的垃圾回收调用。<br>  垃圾回收可以有效的防止内存泄露，有效的使用可以使用的内存。垃圾回收器通常是作为一个单独的低优先级的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清除和回收，程序员不能实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收。在Java诞生初期，垃圾回收是Java最大的亮点之一，因为服务器端的编程需要有效的防止内存泄露问题，然而时过境迁，如今Java的垃圾回收机制已经成为被诟病的东西。移动智能终端用户通常觉得iOS的系统比Android系统有更好的用户体验，其中一个深层次的原因就在于Android系统中垃圾回收的不可预知性。</p><p>补充：垃圾回收机制有很多种，包括：分代复制垃圾回收、标记垃圾回收、增量垃圾回收等方式。标准的Java进程既有栈又有堆。栈保存了原始型局部变量，堆保存了要创建的对象。Java平台对堆内存回收和再利用的基本算法被称为标记和清除，但是Java对其进行了改进，采用“分代式垃圾收集”。这种方法会跟据Java对象的生命周期将堆内存划分为不同的区域，在垃圾收集过程中，可能会将对象移动到不同区域：</p><p>伊甸园（Eden）：这是对象最初诞生的区域，并且对大多数对象来说，这里是它们唯一存在过的区域。<br>幸存者乐园（Survivor）：从伊甸园幸存下来的对象会被挪到这里。<br>终身颐养园（Tenured）：这是足够老的幸存对象的归宿。年轻代收集（Minor-GC）过程是不会触及这个地方的。当年轻代收集不能把对象放进终身颐养园时，就会触发一次完全收集（Major-GC），这里可能还会牵扯到压缩，以便为大对象腾出足够的空间。<br>与垃圾回收相关的JVM参数：</p><p>-Xms &#x2F; -Xmx –&gt; 堆的初始大小 &#x2F; 堆的最大大小<br>-Xmn –&gt; 堆中年轻代的大小<br>-XX:-DisableExplicitGC –&gt; 让System.gc()不产生任何作用<br>-XX:+PrintGCDetails –&gt; 打印GC的细节<br>-XX:+PrintGCDateStamps –&gt; 打印GC操作的时间戳<br>-XX:NewSize –&gt; 设置新生代大小<br>-XX:MaxNewSize –&gt; 设置新生代最大大小<br>-XX:NewRatio –&gt; 可以设置老生代和新生代的比例<br>-XX:PrintTenuringDistribution –&gt; 设置每次新生代GC后输出幸存者乐园中对象年龄的分布<br>-XX:InitialTenuringThreshold –&gt; 设置老年代阀值的初始值<br>-XX:MaxTenuringThreshold –&gt; 设置老年代阀值的最大值<br>-XX:TargetSurvivorRatio –&gt; 设置幸存区的目标使用率</p><h3 id="31、String-s-new-String-“xyz”-创建了几个字符串对象？"><a href="#31、String-s-new-String-“xyz”-创建了几个字符串对象？" class="headerlink" title="31、String s &#x3D; new String(“xyz”);创建了几个字符串对象？"></a>31、String s &#x3D; new String(“xyz”);创建了几个字符串对象？</h3><p>答：两个对象，一个是静态区的”xyz”，一个是用new创建在堆上的对象。</p><h3 id="32、接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete-class）？"><a href="#32、接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete-class）？" class="headerlink" title="32、接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete class）？"></a>32、接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete class）？</h3><p>答：接口可以继承接口，而且支持多重继承。抽象类可以实现(implements)接口，抽象类可继承具体类也可以继承抽象类。</p><h3 id="33、一个”-java”源文件中是否可以包含多个类（不是内部类）？有什么限制？"><a href="#33、一个”-java”源文件中是否可以包含多个类（不是内部类）？有什么限制？" class="headerlink" title="33、一个”.java”源文件中是否可以包含多个类（不是内部类）？有什么限制？"></a>33、一个”.java”源文件中是否可以包含多个类（不是内部类）？有什么限制？</h3><p>答：可以，但一个源文件中最多只能有一个公开类（public class）而且文件名必须和公开类的类名完全保持一致。</p><h3 id="34、Anonymous-Inner-Class-匿名内部类-是否可以继承其它类？是否可以实现接口？"><a href="#34、Anonymous-Inner-Class-匿名内部类-是否可以继承其它类？是否可以实现接口？" class="headerlink" title="34、Anonymous Inner Class(匿名内部类)是否可以继承其它类？是否可以实现接口？"></a>34、Anonymous Inner Class(匿名内部类)是否可以继承其它类？是否可以实现接口？</h3><p>答：可以继承其他类或实现其他接口，在Swing编程和Android开发中常用此方式来实现事件监听和回调。</p><h3 id="35、内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？"><a href="#35、内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？" class="headerlink" title="35、内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？"></a>35、内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？</h3><p>答：一个内部类对象可以访问创建它的外部类对象的成员，包括私有成员。</p><h3 id="36、Java-中的final关键字有哪些用法？"><a href="#36、Java-中的final关键字有哪些用法？" class="headerlink" title="36、Java 中的final关键字有哪些用法？"></a>36、Java 中的final关键字有哪些用法？</h3><p>答：<br>　　(1)修饰类：表示该类不能被继承；<br>　　(2)修饰方法：表示方法不能被重写；<br>　　(3)修饰变量：表示变量只能一次赋值以后值不能被修改（常量）。</p><h3 id="37、指出下面程序的运行结果。"><a href="#37、指出下面程序的运行结果。" class="headerlink" title="37、指出下面程序的运行结果。"></a>37、指出下面程序的运行结果。</h3><p>class A {</p><pre><code class="hljs">static &#123;    System.out.print(&quot;1&quot;);&#125; public A() &#123;    System.out.print(&quot;2&quot;);&#125;</code></pre><p>}</p><p>class B extends A {</p><pre><code class="hljs">static &#123;    System.out.print(&quot;a&quot;);&#125; public B() &#123;    System.out.print(&quot;b&quot;);&#125;</code></pre><p>}</p><p>public class Hello {</p><pre><code class="hljs">public static void main(String[] args) &#123;    A ab = new B();    ab = new B();&#125;</code></pre><p>}<br>答：执行结果：1a2b2b。创建对象时构造器的调用顺序是：先初始化静态成员，然后调用父类构造器，再初始化非静态成员，最后调用自身构造器。</p><p>提示：如果不能给出此题的正确答案，说明之前第21题Java类加载机制还没有完全理解，赶紧再看看吧。</p><h3 id="38、数据类型之间的转换"><a href="#38、数据类型之间的转换" class="headerlink" title="38、数据类型之间的转换"></a>38、数据类型之间的转换</h3><p>如何将字符串转换为基本数据类型？<br>  答：调用基本数据类型对应的包装类中的方法parseXXX(String)或valueOf(String)即可返回相应基本数据类型。<br>如何将基本数据类型转换为字符串？<br>  答：一种方法是将基本数据类型与空字符串（””）连接（+）即可获得其所对应的字符串；另一种方法是调用String 类中的valueOf()方法返回相应字符串。</p><h3 id="39、如何实现字符串的反转及替换？"><a href="#39、如何实现字符串的反转及替换？" class="headerlink" title="39、如何实现字符串的反转及替换？"></a>39、如何实现字符串的反转及替换？</h3><p>答：方法很多，可以自己写实现也可以使用String或StringBuffer&#x2F;StringBuilder中的方法。有一道很常见的面试题是用递归实现字符串反转，代码如下所示：</p><pre><code class="hljs">public static String reverse(String originStr) &#123;    if (originStr == null || originStr.length() &lt;= 1)        return originStr;    return reverse(originStr.substring(1)) + originStr.charAt(0);&#125;</code></pre><h3 id="40、怎样将GB2312编码的字符串转换为ISO-8859-1编码的字符串？"><a href="#40、怎样将GB2312编码的字符串转换为ISO-8859-1编码的字符串？" class="headerlink" title="40、怎样将GB2312编码的字符串转换为ISO-8859-1编码的字符串？"></a>40、怎样将GB2312编码的字符串转换为ISO-8859-1编码的字符串？</h3><p>答：代码如下所示：</p><p>String s1 &#x3D; “你好”;<br>String s2 &#x3D; new String(s1.getBytes(“GB2312”), “ISO-8859-1”);</p><h3 id="41、日期和时间"><a href="#41、日期和时间" class="headerlink" title="41、日期和时间"></a>41、日期和时间</h3><p>如何取得年月日、小时分钟秒？<br>如何取得从1970年1月1日0时0分0秒到现在的毫秒数？<br>如何取得某月的最后一天？<br>如何格式化日期？<br>答：<br>问题1：创建java.util.Calendar实例，调用其get()方法传入不同的参数即可获得参数所对应的值。<br>Java 8中可以使用java.time.LocalDateTimel来获取，代码如下所示。<br>public class DateTimeTest {<br>    public static void main(String[] args) {<br>        Calendar cal &#x3D; Calendar.getInstance();<br>        System.out.println(cal.get(Calendar.YEAR));<br>        System.out.println(cal.get(Calendar.MONTH)); &#x2F;&#x2F; 0 - 11<br>        System.out.println(cal.get(Calendar.DATE));<br>        System.out.println(cal.get(Calendar.HOUR_OF_DAY));<br>        System.out.println(cal.get(Calendar.MINUTE));<br>        System.out.println(cal.get(Calendar.SECOND));</p><pre><code class="hljs">    // Java 8    LocalDateTime dt = LocalDateTime.now();    System.out.println(dt.getYear());    System.out.println(dt.getMonthValue()); // 1 - 12    System.out.println(dt.getDayOfMonth());    System.out.println(dt.getHour());    System.out.println(dt.getMinute());    System.out.println(dt.getSecond());&#125;</code></pre><p>}<br>问题2：以下方法均可获得该毫秒数。</p><pre><code class="hljs">Calendar.getInstance().getTimeInMillis();System.currentTimeMillis();Clock.systemDefaultZone().millis(); // Java 8</code></pre><p>问题3：代码如下所示。</p><pre><code class="hljs">Calendar time = Calendar.getInstance();time.getActualMaximum(Calendar.DAY_OF_MONTH);</code></pre><p>问题4：利用java.text.DataFormat 的子类（如SimpleDateFormat类）中的format(Date)方法可将日期格式化。Java 8中可以用java.time.format.DateTimeFormatter来格式化时间日期，代码如下所示。</p><p>import java.text.SimpleDateFormat;<br>import java.time.LocalDate;<br>import java.time.format.DateTimeFormatter;<br>import java.util.Date;</p><p>class DateFormatTest {</p><pre><code class="hljs">public static void main(String[] args) &#123;    SimpleDateFormat oldFormatter = new SimpleDateFormat(&quot;yyyy/MM/dd&quot;);    Date date1 = new Date();    System.out.println(oldFormatter.format(date1));     // Java 8    DateTimeFormatter newFormatter = DateTimeFormatter.ofPattern(&quot;yyyy/MM/dd&quot;);    LocalDate date2 = LocalDate.now();    System.out.println(date2.format(newFormatter));&#125;</code></pre><p>}<br>补充：Java的时间日期API一直以来都是被诟病的东西，为了解决这一问题，Java 8中引入了新的时间日期API，其中包括LocalDate、LocalTime、LocalDateTime、Clock、Instant等类，这些的类的设计都使用了不变模式，因此是线程安全的设计。如果不理解这些内容，可以参考我的另一篇文章《关于Java并发编程的总结和思考》。</p><h3 id="42、打印昨天的当前时刻。"><a href="#42、打印昨天的当前时刻。" class="headerlink" title="42、打印昨天的当前时刻。"></a>42、打印昨天的当前时刻。</h3><p>import java.util.Calendar;</p><p>class YesterdayCurrent {<br>    public static void main(String[] args){<br>        Calendar cal &#x3D; Calendar.getInstance();<br>        cal.add(Calendar.DATE, -1);<br>        System.out.println(cal.getTime());<br>    }<br>}<br>在Java 8中，可以用下面的代码实现相同的功能。</p><p>import java.time.LocalDateTime;</p><p>class YesterdayCurrent {</p><pre><code class="hljs">public static void main(String[] args) &#123;    LocalDateTime today = LocalDateTime.now();    LocalDateTime yesterday = today.minusDays(1);     System.out.println(yesterday);&#125;</code></pre><p>}</p><h3 id="43、比较一下Java和JavaSciprt。"><a href="#43、比较一下Java和JavaSciprt。" class="headerlink" title="43、比较一下Java和JavaSciprt。"></a>43、比较一下Java和JavaSciprt。</h3><p>答：JavaScript 与Java是两个公司开发的不同的两个产品。Java 是原Sun Microsystems公司推出的面向对象的程序设计语言，特别适合于互联网应用程序开发；而JavaScript是Netscape公司的产品，为了扩展Netscape浏览器的功能而开发的一种可以嵌入Web页面中运行的基于对象和事件驱动的解释性语言。JavaScript的前身是LiveScript；而Java的前身是Oak语言。<br>下面对两种语言间的异同作如下比较：</p><p>基于对象和面向对象：Java是一种真正的面向对象的语言，即使是开发简单的程序，必须设计对象；JavaScript是种脚本语言，它可以用来制作与网络无关的，与用户交互作用的复杂软件。它是一种基于对象（Object-Based）和事件驱动（Event-Driven）的编程语言，因而它本身提供了非常丰富的内部对象供设计人员使用。<br>解释和编译：Java的源代码在执行之前，必须经过编译。JavaScript是一种解释性编程语言，其源代码不需经过编译，由浏览器解释执行。（目前的浏览器几乎都使用了JIT（即时编译）技术来提升JavaScript的运行效率）<br>强类型变量和类型弱变量：Java采用强类型变量检查，即所有变量在编译之前必须作声明；JavaScript中变量是弱类型的，甚至在使用变量前可以不作声明，JavaScript的解释器在运行时检查推断其数据类型。<br>代码格式不一样。</p><p>补充：上面列出的四点是网上流传的所谓的标准答案。其实Java和JavaScript最重要的区别是一个是静态语言，一个是动态语言。目前的编程语言的发展趋势是函数式语言和动态语言。在Java中类（class）是一等公民，而JavaScript中函数（function）是一等公民，因此JavaScript支持函数式编程，可以使用Lambda函数和闭包（closure），当然Java 8也开始支持函数式编程，提供了对Lambda表达式以及函数式接口的支持。对于这类问题，在面试的时候最好还是用自己的语言回答会更加靠谱，不要背网上所谓的标准答案。</p><h3 id="44、什么时候用断言（assert）？"><a href="#44、什么时候用断言（assert）？" class="headerlink" title="44、什么时候用断言（assert）？"></a>44、什么时候用断言（assert）？</h3><p>答：断言在软件开发中是一种常用的调试方式，很多开发语言中都支持这种机制。一般来说，断言用于保证程序最基本、关键的正确性。断言检查通常在开发和测试时开启。为了保证程序的执行效率，在软件发布后断言检查通常是关闭的。断言是一个包含布尔表达式的语句，在执行这个语句时假定该表达式为true；如果表达式的值为false，那么系统会报告一个AssertionError。断言的使用如下面的代码所示：</p><p>assert(a &gt; 0); &#x2F;&#x2F; throws an AssertionError if a &lt;&#x3D; 0</p><p>断言可以有两种形式：<br>  assert Expression1;<br>  assert Expression1 : Expression2 ;<br>Expression1 应该总是产生一个布尔值。<br>Expression2 可以是得出一个值的任意表达式；这个值用于生成显示更多调试信息的字符串消息。</p><p>要在运行时启用断言，可以在启动JVM时使用-enableassertions或者-ea标记。要在运行时选择禁用断言，可以在启动JVM时使用-da或者-disableassertions标记。要在系统类中启用或禁用断言，可使用-esa或-dsa标记。还可以在包的基础上启用或者禁用断言。</p><p>注意：断言不应该以任何方式改变程序的状态。简单的说，如果希望在不满足某些条件时阻止代码的执行，就可以考虑用断言来阻止它。</p><h3 id="45、Error和Exception有什么区别？"><a href="#45、Error和Exception有什么区别？" class="headerlink" title="45、Error和Exception有什么区别？"></a>45、Error和Exception有什么区别？</h3><p>答：Error表示系统级的错误和程序不必处理的异常，是恢复不是不可能但很困难的情况下的一种严重问题；比如内存溢出，不可能指望程序能处理这样的情况；Exception表示需要捕捉或者需要程序进行处理的异常，是一种设计或实现问题；也就是说，它表示如果程序运行正常，从不会发生的情况。</p><p>面试题：2005年摩托罗拉的面试中曾经问过这么一个问题“If a process reports a stack overflow run-time error, what’s the most possible cause?”，给了四个选项a. lack of memory; b. write on an invalid memory space; c. recursive function calling; d. array index out of boundary. Java程序在运行时也可能会遭遇StackOverflowError，这是一个无法恢复的错误，只能重新修改代码了，这个面试题的答案是c。如果写了不能迅速收敛的递归，则很有可能引发栈溢出的错误，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StackOverflowErrorTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    main(<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>提示：用递归编写程序时一定要牢记两点：1. 递归公式；2. 收敛条件（什么时候就不再继续递归）。</p><h3 id="46、try-里有一个return语句，那么紧跟在这个try后的finally-里的代码会不会被执行，什么时候被执行，在return前还是后？"><a href="#46、try-里有一个return语句，那么紧跟在这个try后的finally-里的代码会不会被执行，什么时候被执行，在return前还是后？" class="headerlink" title="46、try{}里有一个return语句，那么紧跟在这个try后的finally{}里的代码会不会被执行，什么时候被执行，在return前还是后？"></a>46、try{}里有一个return语句，那么紧跟在这个try后的finally{}里的代码会不会被执行，什么时候被执行，在return前还是后？</h3><p>答：会执行，在方法返回调用者前执行。</p><p>注意：在finally中改变返回值的做法是不好的，因为如果存在finally代码块，try中的return语句不会立马返回调用者，而是记录下返回值待finally代码块执行完毕之后再向调用者返回其值，然后如果在finally中修改了返回值，就会返回修改后的值。显然，在finally中返回或者修改返回值会对程序造成很大的困扰，C#中直接用编译错误的方式来阻止程序员干这种龌龊的事情，Java中也可以通过提升编译器的语法检查级别来产生警告或错误，Eclipse中可以在如图所示的地方进行设置，强烈建议将此项设置为编译错误。</p><h3 id="47、Java语言如何进行异常处理，关键字：throws、throw、try、catch、finally分别如何使用？"><a href="#47、Java语言如何进行异常处理，关键字：throws、throw、try、catch、finally分别如何使用？" class="headerlink" title="47、Java语言如何进行异常处理，关键字：throws、throw、try、catch、finally分别如何使用？"></a>47、Java语言如何进行异常处理，关键字：throws、throw、try、catch、finally分别如何使用？</h3><p>答：Java通过面向对象的方法进行异常处理，把各种不同的异常进行分类，并提供了良好的接口。在Java中，每个异常都是一个对象，它是Throwable类或其子类的实例。当一个方法出现异常后便抛出一个异常对象，该对象中包含有异常信息，调用这个对象的方法可以捕获到这个异常并可以对其进行处理。Java的异常处理是通过5个关键词来实现的：try、catch、throw、throws和finally。一般情况下是用try来执行一段程序，如果系统会抛出（throw）一个异常对象，可以通过它的类型来捕获（catch）它，或通过总是执行代码块（finally）来处理；try用来指定一块预防所有异常的程序；catch子句紧跟在try块后面，用来指定你想要捕获的异常的类型；throw语句用来明确地抛出一个异常；throws用来声明一个方法可能抛出的各种异常（当然声明异常时允许无病呻吟）；finally为确保一段代码不管发生什么异常状况都要被执行；try语句可以嵌套，每当遇到一个try语句，异常的结构就会被放入异常栈中，直到所有的try语句都完成。如果下一级的try语句没有对某种异常进行处理，异常栈就会执行出栈操作，直到遇到有处理这种异常的try语句或者最终将异常抛给JVM。</p><h3 id="48、运行时异常与受检异常有何异同？"><a href="#48、运行时异常与受检异常有何异同？" class="headerlink" title="48、运行时异常与受检异常有何异同？"></a>48、运行时异常与受检异常有何异同？</h3><p>答：异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误，只要程序设计得没有问题通常就不会发生。受检异常跟程序运行的上下文环境有关，即使程序设计无误，仍然可能因使用的问题而引发。Java编译器要求方法必须声明抛出可能发生的受检异常，但是并不要求必须声明抛出未被捕获的运行时异常。异常和继承一样，是面向对象程序设计中经常被滥用的东西，在《Effective Java》中对异常的使用给出了以下指导原则：</p><p>不要将异常处理用于正常的控制流（设计良好的API不应该强迫它的调用者为了正常的控制流而使用异常）<br>对可以恢复的情况使用受检异常，对编程错误使用运行时异常<br>避免不必要的使用受检异常（可以通过一些状态检测手段来避免异常的发生）<br>优先使用标准的异常<br>每个方法抛出的异常都要有文档<br>保持异常的原子性<br>不要在catch中忽略掉捕获到的异常</p><h3 id="49、列出一些你常见的运行时异常？"><a href="#49、列出一些你常见的运行时异常？" class="headerlink" title="49、列出一些你常见的运行时异常？"></a>49、列出一些你常见的运行时异常？</h3><p>答：</p><p>ArithmeticException（算术异常）<br>ClassCastException （类转换异常）<br>IllegalArgumentException （非法参数异常）<br>IndexOutOfBoundsException （下标越界异常）<br>NullPointerException （空指针异常）<br>SecurityException （安全异常）</p><h3 id="50、阐述final、finally、finalize的区别。"><a href="#50、阐述final、finally、finalize的区别。" class="headerlink" title="50、阐述final、finally、finalize的区别。"></a>50、阐述final、finally、finalize的区别。</h3><p>答：</p><p>final：修饰符（关键字）有三种用法：如果一个类被声明为final，意味着它不能再派生出新的子类，即不能被继承，因此它和abstract是反义词。将变量声明为final，可以保证它们在使用中不被改变，被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取不可修改。被声明为final的方法也同样只能使用，不能在子类中被重写。<br>finally：通常放在try…catch…的后面构造总是执行代码块，这就意味着程序无论正常执行还是发生异常，这里的代码只要JVM不关闭都能执行，可以将释放外部资源的代码写在finally块中。<br>finalize：Object类中定义的方法，Java中允许使用finalize()方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在销毁对象时调用的，通过重写finalize()方法可以整理系统资源或者执行其他清理工作。<br>————————————————<br>版权声明：本文为CSDN博主「Java程序员-张凯」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41701956/article/details/86686492">https://blog.csdn.net/qq_41701956/article/details/86686492</a></p><h3 id="51、类ExampleA继承Exception，类ExampleB继承ExampleA。"><a href="#51、类ExampleA继承Exception，类ExampleB继承ExampleA。" class="headerlink" title="51、类ExampleA继承Exception，类ExampleB继承ExampleA。"></a>51、类ExampleA继承Exception，类ExampleB继承ExampleA。</h3><p>有如下代码片断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExampleB</span>(<span class="hljs-string">&quot;b&quot;</span>)<br>&#125; <span class="hljs-keyword">catch</span>（ExampleA e）&#123;<br>    System.out.println(<span class="hljs-string">&quot;ExampleA&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span>（Exception e）&#123;<br>    System.out.println(<span class="hljs-string">&quot;Exception&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>请问执行此段代码的输出是什么？<br>答：输出：ExampleA。（根据里氏代换原则[能使用父类型的地方一定能使用子类型]，抓取ExampleA类型异常的catch块能够抓住try块中抛出的ExampleB类型的异常）</p><p>面试题：说出下面代码的运行结果。（此题的出处是《Java编程思想》一书）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>            &#125; <br>            <span class="hljs-keyword">catch</span> (A a) &#123;<br>                System.out.println(<span class="hljs-string">&quot;Caught A&quot;</span>);<br>                <span class="hljs-keyword">throw</span> a;<br>            &#125;<br>        &#125; <br>        <span class="hljs-keyword">catch</span> (B b) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Caught B&quot;</span>);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出结果为：</p><p>Caught A<br>Caught B<br>Hello World!</p><h3 id="52、List、Set、Map是否继承自Collection接口？"><a href="#52、List、Set、Map是否继承自Collection接口？" class="headerlink" title="52、List、Set、Map是否继承自Collection接口？"></a>52、List、Set、Map是否继承自Collection接口？</h3><p>答：List、Set 是，Map 不是。Map是键值对映射容器，与List和Set有明显的区别，而Set存储的零散的元素且不允许有重复元素（数学中的集合也是如此），List是线性结构的容器，适用于按数值索引访问元素的情形。</p><h3 id="53、阐述ArrayList、Vector、LinkedList的存储性能和特性。"><a href="#53、阐述ArrayList、Vector、LinkedList的存储性能和特性。" class="headerlink" title="53、阐述ArrayList、Vector、LinkedList的存储性能和特性。"></a>53、阐述ArrayList、Vector、LinkedList的存储性能和特性。</h3><p>答：ArrayList 和Vector都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，Vector中的方法由于添加了synchronized修饰，因此Vector是线程安全的容器，但性能上较ArrayList差，因此已经是Java中的遗留容器。LinkedList使用双向链表实现存储（将内存中零散的内存单元通过附加的引用关联起来，形成一个可以按序号索引的线性结构，这种链式存储方式与数组的连续存储方式相比，内存的利用率更高），按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。Vector属于遗留容器（Java早期的版本中提供的容器，除此之外，Hashtable、Dictionary、BitSet、Stack、Properties都是遗留容器），已经不推荐使用，但是由于ArrayList和LinkedListed都是非线程安全的，如果遇到多个线程操作同一个容器的场景，则可以通过工具类Collections中的synchronizedList方法将其转换成线程安全的容器后再使用（这是对装潢模式的应用，将已有对象传入另一个类的构造器中创建新的对象来增强实现）。</p><p>补充：遗留容器中的Properties类和Stack类在设计上有严重的问题，Properties是一个键和值都是字符串的特殊的键值对映射，在设计上应该是关联一个Hashtable并将其两个泛型参数设置为String类型，但是Java API中的Properties直接继承了Hashtable，这很明显是对继承的滥用。这里复用代码的方式应该是Has-A关系而不是Is-A关系，另一方面容器都属于工具类，继承工具类本身就是一个错误的做法，使用工具类最好的方式是Has-A关系（关联）或Use-A关系（依赖）。同理，Stack类继承Vector也是不正确的。Sun公司的工程师们也会犯这种低级错误，让人唏嘘不已。</p><h3 id="54、Collection和Collections的区别？"><a href="#54、Collection和Collections的区别？" class="headerlink" title="54、Collection和Collections的区别？"></a>54、Collection和Collections的区别？</h3><p>答：Collection是一个接口，它是Set、List等容器的父接口；Collections是个一个工具类，提供了一系列的静态方法来辅助容器操作，这些方法包括对容器的搜索、排序、线程安全化等等。</p><h3 id="55、List、Map、Set三个接口存取元素时，各有什么特点？"><a href="#55、List、Map、Set三个接口存取元素时，各有什么特点？" class="headerlink" title="55、List、Map、Set三个接口存取元素时，各有什么特点？"></a>55、List、Map、Set三个接口存取元素时，各有什么特点？</h3><p>答：List以特定索引来存取元素，可以有重复元素。Set不能存放重复元素（用对象的equals()方法来区分元素是否重复）。Map保存键值对（key-value pair）映射，映射关系可以是一对一或多对一。Set和Map容器都有基于哈希存储和排序树的两种实现版本，基于哈希存储的版本理论存取时间复杂度为O(1)，而基于排序树版本的实现在插入或删除元素时会按照元素或元素的键（key）构成排序树从而达到排序和去重的效果。</p><h3 id="56、TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort-方法如何比较元素？"><a href="#56、TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort-方法如何比较元素？" class="headerlink" title="56、TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort()方法如何比较元素？"></a>56、TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort()方法如何比较元素？</h3><p>答：TreeSet要求存放的对象所属的类必须实现Comparable接口，该接口提供了比较元素的compareTo()方法，当插入元素时会回调该方法比较元素的大小。TreeMap要求存放的键值对映射的键必须实现Comparable接口从而根据键对元素进行排序。Collections工具类的sort方法有两种重载的形式，第一种要求传入的待排序容器中存放的对象比较实现Comparable接口以实现元素的比较；第二种不强制性的要求容器中的元素必须可比较，但是要求传入第二个参数，参数是Comparator接口的子类型（需要重写compare方法实现元素的比较），相当于一个临时定义的排序规则，其实就是通过接口注入比较元素大小的算法，也是对回调模式的应用（Java中对函数式编程的支持）。</p><h3 id="57、Thread类的-sleep-方法和对象的-wait-方法都可以让线程暂停执行，它们有什么区别？"><a href="#57、Thread类的-sleep-方法和对象的-wait-方法都可以让线程暂停执行，它们有什么区别？" class="headerlink" title="57、Thread类的 sleep() 方法和对象的 wait() 方法都可以让线程暂停执行，它们有什么区别？"></a>57、Thread类的 sleep() 方法和对象的 wait() 方法都可以让线程暂停执行，它们有什么区别？</h3><p>答：sleep()方法（休眠）是线程类（Thread）的静态方法，调用此方法会让当前线程暂停执行指定的时间，将执行机会（CPU）让给其他线程，但是对象的锁依然保持，因此休眠时间结束后会自动恢复（线程回到就绪状态，请参考第66题中的线程状态转换图）。wait()是Object类的方法，调用对象的wait()方法导致当前线程放弃对象的锁（线程暂停执行），进入对象的等待池（wait pool），只有调用对象的notify()方法（或notifyAll()方法）时才能唤醒等待池中的线程进入等锁池（lock pool），如果线程重新获得对象的锁就可以进入就绪状态。</p><p>补充：可能不少人对什么是进程，什么是线程还比较模糊，对于为什么需要多线程编程也不是特别理解。简单的说：进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，是操作系统进行资源分配和调度的一个独立单位；线程是进程的一个实体，是CPU调度和分派的基本单位，是比进程更小的能独立运行的基本单位。线程的划分尺度小于进程，这使得多线程程序的并发性高；进程在执行时通常拥有独立的内存单元，而线程之间可以共享内存。使用多线程的编程通常能够带来更好的性能和用户体验，但是多线程的程序对于其他程序是不友好的，因为它可能占用了更多的CPU资源。当然，也不是线程越多，程序的性能就越好，因为线程之间的调度和切换也会浪费CPU时间。时下很时髦的Node.js就采用了单线程异步I&#x2F;O的工作模式。</p><h3 id="58、线程的-sleep-方法和-yield-方法有什么区别？"><a href="#58、线程的-sleep-方法和-yield-方法有什么区别？" class="headerlink" title="58、线程的 sleep() 方法和 yield() 方法有什么区别？"></a>58、线程的 sleep() 方法和 yield() 方法有什么区别？</h3><p>答：1、sleep()方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的线程以运行的机会；yield()方法只会给相同优先级或更高优先级的线程以运行的机会；<br>2、 线程执行sleep()方法后转入阻塞（blocked）状态，而执行yield()方法后转入就绪（ready）状态；<br>3、sleep()方法声明抛出 InterruptedException，而 yield() 方法没有声明任何异常；<br>4、sleep()方法比yield()方法（跟操作系统CPU调度相关）具有更好的可移植性。</p><h3 id="59、当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B？"><a href="#59、当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B？" class="headerlink" title="59、当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B？"></a>59、当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B？</h3><p>答：不能。其它线程只能访问该对象的非同步方法，同步方法则不能进入。因为非静态方法上的synchronized修饰符要求执行方法时要获得对象的锁，如果已经进入A方法说明对象锁已经被取走，那么试图进入B方法的线程就只能在等锁池（注意不是等待池哦）中等待对象的锁。</p><h3 id="60、请说出与线程同步以及线程调度相关的方法。"><a href="#60、请说出与线程同步以及线程调度相关的方法。" class="headerlink" title="60、请说出与线程同步以及线程调度相关的方法。"></a>60、请说出与线程同步以及线程调度相关的方法。</h3><p>答：wait()：使一个线程处于等待（阻塞）状态，并且释放所持有的对象的锁；<br>sleep()：使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要处理 InterruptedException 异常；<br>notify()：唤醒一个处于等待状态的线程，当然在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且与优先级无关；<br>notityAll()：唤醒所有处于等待状态的线程，该方法并不是将对象的锁给所有线程，而是让它们竞争，只有获得锁的线程才能进入就绪状态。<br>提示：关于Java多线程和并发编程的问题，建议大家看我的另一篇文章《关于Java并发编程的总结和思考》。<br>补充：Java 5通过Lock接口提供了显式的锁机制（explicit lock），增强了灵活性以及对线程的协调。Lock接口中定义了加锁（lock()）和解锁（unlock()）的方法，同时还提供了newCondition()方法来产生用于线程之间通信的Condition对象；此外，Java 5还提供了信号量机制（semaphore），信号量可以用来限制对某个共享资源进行访问的线程的数量。在对资源进行访问之前，线程必须得到信号量的许可（调用Semaphore对象的acquire()方法）；在完成对资源的访问后，线程必须向信号量归还许可（调用Semaphore对象的release()方法）。</p><h3 id="61、编写多线程程序有几种实现方式？"><a href="#61、编写多线程程序有几种实现方式？" class="headerlink" title="61、编写多线程程序有几种实现方式？"></a>61、编写多线程程序有几种实现方式？</h3><p>答：Java 5以前实现多线程有两种实现方法：一种是继承Thread类；另一种是实现Runnable接口。两种方式都要通过重写run()方法来定义线程的行为，推荐使用后者，因为Java中的继承是单继承，一个类有一个父类，如果继承了Thread类就无法再继承其他类了，显然使用Runnable接口更为灵活。</p><p>补充：Java 5以后创建线程还有第三种方式：实现Callable接口，该接口中的call方法可以在线程执行结束时产生一个返回值。</p><h3 id="62、synchronized-关键字的用法？"><a href="#62、synchronized-关键字的用法？" class="headerlink" title="62、synchronized 关键字的用法？"></a>62、synchronized 关键字的用法？</h3><p>答：synchronized关键字可以将对象或者方法标记为同步，以实现对对象和方法的互斥访问，可以用synchronized(对象) { … }定义同步代码块，或者在声明方法时将synchronized作为方法的修饰符。</p><h3 id="63、举例说明同步和异步。"><a href="#63、举例说明同步和异步。" class="headerlink" title="63、举例说明同步和异步。"></a>63、举例说明同步和异步。</h3><p>答：如果系统中存在临界资源（资源数量少于竞争资源的线程数量的资源），例如正在写的数据以后可能被另一个线程读到，或者正在读的数据可能已经被另一个线程写过了，那么这些数据就必须进行同步存取（数据库操作中的排他锁就是最好的例子）。当应用程序在对象上调用了一个需要花费很长时间来执行的方法，并且不希望让程序等待方法的返回时，就应该使用异步编程，在很多情况下采用异步途径往往更有效率。事实上，所谓的同步就是指阻塞式操作，而异步就是非阻塞式操作。</p><h3 id="64、启动一个线程是调用run-还是start-方法？"><a href="#64、启动一个线程是调用run-还是start-方法？" class="headerlink" title="64、启动一个线程是调用run()还是start()方法？"></a>64、启动一个线程是调用run()还是start()方法？</h3><p>答：启动一个线程是调用start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由JVM 调度并执行，这并不意味着线程就会立即运行。run()方法是线程启动后要进行回调（callback）的方法。</p><h3 id="65、什么是线程池（thread-pool）？"><a href="#65、什么是线程池（thread-pool）？" class="headerlink" title="65、什么是线程池（thread pool）？"></a>65、什么是线程池（thread pool）？</h3><p>答：在面向对象编程中，创建和销毁对象是很费时间的，因为创建一个对象要获取内存资源或者其它更多资源。在Java中更是如此，虚拟机将试图跟踪每一个对象，以便能够在对象销毁后进行垃圾回收。所以提高服务程序效率的一个手段就是尽可能减少创建和销毁对象的次数，特别是一些很耗资源的对象创建和销毁，这就是”池化资源”技术产生的原因。线程池顾名思义就是事先创建若干个可执行的线程放入一个池（容器）中，需要的时候从池中获取线程不用自行创建，使用完毕不需要销毁线程而是放回池中，从而减少创建和销毁线程对象的开销。</p><p>Java 5+中的 Executor 接口定义一个执行线程的工具。它的子类型即线程池接口是 ExecutorService 。要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，因此在工具类 Executors 里面提供了一些静态工厂方法，生成一些常用的线程池，如下所示：</p><p>newSingleThreadExecutor：创建一个单线程的线程池。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。<br>newFixedThreadPool：创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。<br>newCachedThreadPool：创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。<br>newScheduledThreadPool：创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。<br>newSingleThreadExecutor：创建一个单线程的线程池。此线程池支持定时以及周期性执行任务的需求。</p><h3 id="66、线程的基本状态以及状态之间的关系？"><a href="#66、线程的基本状态以及状态之间的关系？" class="headerlink" title="66、线程的基本状态以及状态之间的关系？"></a>66、线程的基本状态以及状态之间的关系？</h3><p>答：说明：其中Running表示运行状态，Runnable表示就绪状态（万事俱备，只欠CPU），Blocked表示阻塞状态，阻塞状态又有多种情况，可能是因为调用wait()方法进入等待池，也可能是执行同步方法或同步代码块进入等锁池，或者是调用了sleep()方法或join()方法等待休眠或其他线程结束，或是因为发生了I&#x2F;O中断。</p><h3 id="67、简述-synchronized-和-java-util-concurrent-locks-Lock-的异同？"><a href="#67、简述-synchronized-和-java-util-concurrent-locks-Lock-的异同？" class="headerlink" title="67、简述 synchronized 和 java.util.concurrent.locks.Lock 的异同？"></a>67、简述 synchronized 和 java.util.concurrent.locks.Lock 的异同？</h3><p>答：Lock是Java 5以后引入的新的API，和关键字synchronized相比主要相同点：Lock 能完成synchronized所实现的所有功能；主要不同点：Lock有比synchronized更精确的线程语义和更好的性能，而且不强制性的要求一定要获得锁。synchronized会自动释放锁，而Lock一定要求程序员手工释放，并且最好在finally 块中释放（这是释放外部资源的最好的地方）。</p><h3 id="68、Java-中如何实现序列化，有什么意义？"><a href="#68、Java-中如何实现序列化，有什么意义？" class="headerlink" title="68、Java 中如何实现序列化，有什么意义？"></a>68、Java 中如何实现序列化，有什么意义？</h3><p>答：序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决对象流读写操作时可能引发的问题（如果不进行序列化可能会存在数据乱序的问题）。</p><p>要实现序列化，需要让一个类实现Serializable接口，该接口是一个标识性接口，标注该类对象是可被序列化的，然后使用一个输出流来构造一个对象输出流并通过writeObject(Object)方法就可以将实现对象写出（即保存其状态）；如果需要反序列化则可以用一个输入流建立对象输入流，然后通过readObject方法从流中读取对象。序列化除了能够实现对象的持久化之外，还能够用于对象的深度克隆（可以参考第29题）。</p><h3 id="69、Java-中有几种类型的流？"><a href="#69、Java-中有几种类型的流？" class="headerlink" title="69、Java 中有几种类型的流？"></a>69、Java 中有几种类型的流？</h3><p>答：字节流和字符流。字节流继承于InputStream、OutputStream，字符流继承于Reader、Writer。在java.io 包中还有许多其他的流，主要是为了提高性能和使用方便。关于Java的I&#x2F;O需要注意的有两点：一是两种对称性（输入和输出的对称性，字节和字符的对称性）；二是两种设计模式（适配器模式和装潢模式）。另外Java中的流不同于C#的是它只有一个维度一个方向。</p><p>面试题：编程实现文件拷贝。（这个题目在笔试的时候经常出现，下面的代码给出了两种实现方案）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.FileChannel;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">MyUtil</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fileCopy</span><span class="hljs-params">(String source, String target)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(source)) &#123;<br>            <span class="hljs-keyword">try</span> (<span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(target)) &#123;<br>                <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4096</span>];<br>                <span class="hljs-type">int</span> bytesToRead;<br>                <span class="hljs-keyword">while</span>((bytesToRead = in.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                    out.write(buffer, <span class="hljs-number">0</span>, bytesToRead);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fileCopyNIO</span><span class="hljs-params">(String source, String target)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(source)) &#123;<br>            <span class="hljs-keyword">try</span> (<span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(target)) &#123;<br>                <span class="hljs-type">FileChannel</span> <span class="hljs-variable">inChannel</span> <span class="hljs-operator">=</span> in.getChannel();<br>                <span class="hljs-type">FileChannel</span> <span class="hljs-variable">outChannel</span> <span class="hljs-operator">=</span> out.getChannel();<br>                <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">4096</span>);<br>                <span class="hljs-keyword">while</span>(inChannel.read(buffer) != -<span class="hljs-number">1</span>) &#123;<br>                    buffer.flip();<br>                    outChannel.write(buffer);<br>                    buffer.clear();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：上面用到Java 7的TWR，使用TWR后可以不用在finally中释放外部资源 ，从而让代码更加优雅。</p><h3 id="70、写一个方法，输入一个文件名和一个字符串，统计这个字符串在这个文件中出现的次数。"><a href="#70、写一个方法，输入一个文件名和一个字符串，统计这个字符串在这个文件中出现的次数。" class="headerlink" title="70、写一个方法，输入一个文件名和一个字符串，统计这个字符串在这个文件中出现的次数。"></a>70、写一个方法，输入一个文件名和一个字符串，统计这个字符串在这个文件中出现的次数。</h3><p>详解如下：</p><p>import java.io.BufferedReader;<br>import java.io.FileReader;</p><p>public final class MyUtil {</p><pre><code class="hljs">// 工具类中的方法都是静态方式访问的因此将构造器私有不允许创建对象(绝对好习惯)private MyUtil() &#123;    throw new AssertionError();&#125; /** * 统计给定文件中给定字符串的出现次数 *  * @param filename  文件名 * @param word 字符串 * @return 字符串在文件中出现的次数 */public static int countWordInFile(String filename, String word) &#123;    int counter = 0;    try (FileReader fr = new FileReader(filename)) &#123;        try (BufferedReader br = new BufferedReader(fr)) &#123;            String line = null;            while ((line = br.readLine()) != null) &#123;                int index = -1;                while (line.length() &gt;= word.length() &amp;&amp; (index = line.indexOf(word)) &gt;= 0) &#123;                    counter++;                    line = line.substring(index + word.length());                &#125;            &#125;        &#125;    &#125; catch (Exception ex) &#123;        ex.printStackTrace();    &#125;    return counter;&#125;</code></pre><p>}</p><h3 id="71、如何用Java代码列出一个目录下所有的文件？"><a href="#71、如何用Java代码列出一个目录下所有的文件？" class="headerlink" title="71、如何用Java代码列出一个目录下所有的文件？"></a>71、如何用Java代码列出一个目录下所有的文件？</h3><p>详解如下：</p><p>如果只要求列出当前文件夹下的文件，代码如下所示：</p><p>import java.io.File;</p><p>class Test12 {</p><pre><code class="hljs">public static void main(String[] args) &#123;    File f = new File(&quot;/Users/Hao/Downloads&quot;);    for(File temp : f.listFiles()) &#123;        if(temp.isFile()) &#123;            System.out.println(temp.getName());        &#125;    &#125;&#125;</code></pre><p>}<br>如果需要对文件夹继续展开，代码如下所示：</p><p>import java.io.File;</p><p>class Test12 {</p><pre><code class="hljs">public static void main(String[] args) &#123;    showDirectory(new File(&quot;/Users/Hao/Downloads&quot;));&#125; public static void showDirectory(File f) &#123;    _walkDirectory(f, 0);&#125; private static void _walkDirectory(File f, int level) &#123;    if(f.isDirectory()) &#123;        for(File temp : f.listFiles()) &#123;            _walkDirectory(temp, level + 1);        &#125;    &#125;    else &#123;        for(int i = 0; i &lt; level - 1; i++) &#123;            System.out.print(&quot;\t&quot;);        &#125;        System.out.println(f.getName());    &#125;&#125;</code></pre><p>}<br> 在Java 7中可以使用NIO.2的API来做同样的事情，代码如下所示：</p><p>class ShowFileTest {</p><pre><code class="hljs">public static void main(String[] args) throws IOException &#123;    Path initPath = Paths.get(&quot;/Users/Hao/Downloads&quot;);    Files.walkFileTree(initPath, new SimpleFileVisitor&lt;Path&gt;() &#123;         @Override        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)                 throws IOException &#123;            System.out.println(file.getFileName().toString());            return FileVisitResult.CONTINUE;        &#125;     &#125;);&#125;</code></pre><p>}</p><h3 id="72、用Java的套接字编程实现一个多线程的回显（echo）服务器。"><a href="#72、用Java的套接字编程实现一个多线程的回显（echo）服务器。" class="headerlink" title="72、用Java的套接字编程实现一个多线程的回显（echo）服务器。"></a>72、用Java的套接字编程实现一个多线程的回显（echo）服务器。</h3><p>详解如下：</p><p>import java.io.BufferedReader;<br>import java.io.IOException;<br>import java.io.InputStreamReader;<br>import java.io.PrintWriter;<br>import java.net.ServerSocket;<br>import java.net.Socket;</p><p>public class EchoServer {</p><pre><code class="hljs">private static final int ECHO_SERVER_PORT = 6789; public static void main(String[] args) &#123;            try(ServerSocket server = new ServerSocket(ECHO_SERVER_PORT)) &#123;        System.out.println(&quot;服务器已经启动...&quot;);        while(true) &#123;            Socket client = server.accept();            new Thread(new ClientHandler(client)).start();        &#125;    &#125; catch (IOException e) &#123;        e.printStackTrace();    &#125;&#125; private static class ClientHandler implements Runnable &#123;    private Socket client;     public ClientHandler(Socket client) &#123;        this.client = client;    &#125;     @Override    public void run() &#123;        try(BufferedReader br = new BufferedReader(new InputStreamReader(client.getInputStream()));                PrintWriter pw = new PrintWriter(client.getOutputStream())) &#123;            String msg = br.readLine();            System.out.println(&quot;收到&quot; + client.getInetAddress() + &quot;发送的: &quot; + msg);            pw.println(msg);            pw.flush();        &#125; catch(Exception ex) &#123;            ex.printStackTrace();        &#125; finally &#123;            try &#123;                client.close();            &#125; catch (IOException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre><p>}<br>注意：上面的代码使用了Java 7的TWR语法，由于很多外部资源类都间接的实现了AutoCloseable接口（单方法回调接口），因此可以利用TWR语法在try结束的时候通过回调的方式自动调用外部资源类的close()方法，避免书写冗长的finally代码块。此外，上面的代码用一个静态内部类实现线程的功能，使用多线程可以避免一个用户I&#x2F;O操作所产生的中断影响其他用户对服务器的访问，简单的说就是一个用户的输入操作不会造成其他用户的阻塞。当然，上面的代码使用线程池可以获得更好的性能，因为频繁的创建和销毁线程所造成的开销也是不可忽视的。</p><h3 id="73、XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？"><a href="#73、XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？" class="headerlink" title="73、XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？"></a>73、XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？</h3><p>答：XML文档定义分为DTD和Schema两种形式，二者都是对XML语法的约束，其本质区别在于Schema本身也是一个XML文件，可以被XML解析器解析，而且可以为XML承载的数据定义类型，约束能力较之DTD更强大。对XML的解析主要有DOM（文档对象模型，Document Object Model）、SAX（Simple API for XML）和StAX（Java 6中引入的新的解析XML的方式，Streaming API for XML），其中DOM处理大型文件时其性能下降的非常厉害，这个问题是由DOM树结构占用的内存较多造成的，而且DOM解析方式必须在解析文件之前把整个文档装入内存，适合对XML的随机访问（典型的用空间换取时间的策略）；SAX是事件驱动型的XML解析方式，它顺序读取XML文件，不需要一次全部装载整个文件。当遇到像文件开头，文档结束，或者标签开头与标签结束时，它会触发一个事件，用户通过事件回调代码来处理XML文件，适合对XML的顺序访问；顾名思义，StAX把重点放在流上，实际上StAX与其他解析方式的本质区别就在于应用程序能够把XML作为一个事件流来处理。将XML作为一组事件来处理的想法并不新颖（SAX就是这样做的），但不同之处在于StAX允许应用程序代码把这些事件逐个拉出来，而不用提供在解析器方便时从解析器中接收事件的处理程序。</p><h3 id="74、你在项目中哪些地方用到了XML？"><a href="#74、你在项目中哪些地方用到了XML？" class="headerlink" title="74、你在项目中哪些地方用到了XML？"></a>74、你在项目中哪些地方用到了XML？</h3><p>答：XML的主要作用有两个方面：数据交换和信息配置。在做数据交换时，XML将数据用标签组装成起来，然后压缩打包加密后通过网络传送给接收者，接收解密与解压缩后再从XML文件中还原相关信息进行处理，XML曾经是异构系统间交换数据的事实标准，但此项功能几乎已经被JSON（JavaScript Object Notation）取而代之。当然，目前很多软件仍然使用XML来存储配置信息，我们在很多项目中通常也会将作为配置信息的硬代码写在XML文件中，Java的很多框架也是这么做的，而且这些框架都选择了dom4j作为处理XML的工具，因为Sun公司的官方API实在不怎么好用。</p><p>补充：现在有很多时髦的软件（如Sublime）已经开始将配置文件书写成JSON格式，我们已经强烈的感受到XML的另一项功能也将逐渐被业界抛弃。</p><h3 id="75、阐述JDBC操作数据库的步骤。"><a href="#75、阐述JDBC操作数据库的步骤。" class="headerlink" title="75、阐述JDBC操作数据库的步骤。"></a>75、阐述JDBC操作数据库的步骤。</h3><p>答：下面的代码以连接本机的Oracle数据库为例，演示JDBC操作数据库的步骤。<br>加载驱动。</p><pre><code class="hljs">Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);</code></pre><p>创建连接。</p><pre><code class="hljs">Connection con = DriverManager.getConnection(&quot;jdbc:oracle:thin:@localhost:1521:orcl&quot;, &quot;scott&quot;, &quot;tiger&quot;);</code></pre><p>创建语句。</p><pre><code class="hljs">PreparedStatement ps = con.prepareStatement(&quot;select * from emp where sal between ? and ?&quot;);ps.setInt(1, 1000);ps.setInt(2, 3000);</code></pre><p>执行语句。</p><pre><code class="hljs">ResultSet rs = ps.executeQuery();</code></pre><p>处理结果。</p><pre><code class="hljs">while(rs.next()) &#123;    System.out.println(rs.getInt(&quot;empno&quot;) + &quot; --- &quot; + rs.getString(&quot;ename&quot;));&#125;</code></pre><p>关闭资源。</p><pre><code class="hljs">finally &#123;    if(con != null) &#123;        try &#123;            con.close();        &#125; catch (SQLException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><p>提示：关闭外部资源的顺序应该和打开的顺序相反，也就是说先关闭ResultSet、再关闭Statement、再关闭Connection。上面的代码只关闭了Connection（连接），虽然通常情况下在关闭连接时，连接上创建的语句和打开的游标也会关闭，但不能保证总是如此，因此应该按照刚才说的顺序分别关闭。此外，第一步加载驱动在JDBC 4.0中是可以省略的（自动从类路径中加载驱动），但是我们建议保留。</p><h3 id="76、Statement和PreparedStatement有什么区别？哪个性能更好？"><a href="#76、Statement和PreparedStatement有什么区别？哪个性能更好？" class="headerlink" title="76、Statement和PreparedStatement有什么区别？哪个性能更好？"></a>76、Statement和PreparedStatement有什么区别？哪个性能更好？</h3><p>答：与Statement相比，1）PreparedStatement接口代表预编译的语句，它主要的优势在于可以减少SQL的编译错误并增加SQL的安全性（减少SQL注射攻击的可能性）；2）PreparedStatement中的SQL语句是可以带参数的，避免了用字符串连接拼接SQL语句的麻烦和不安全；3）当批量处理SQL或频繁执行相同的查询时，PreparedStatement有明显的性能上的优势，由于数据库可以将编译优化后的SQL语句缓存起来，下次执行相同结构的语句时就会很快（不用再次编译和生成执行计划）。</p><p>补充：为了提供对存储过程的调用，JDBC API中还提供了CallableStatement接口。存储过程（Stored Procedure）是数据库中一组为了完成特定功能的SQL语句的集合，经编译后存储在数据库中，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。虽然调用存储过程会在网络开销、安全性、性能上获得很多好处，但是存在如果底层数据库发生迁移时就会有很多麻烦，因为每种数据库的存储过程在书写上存在不少的差别。</p><h3 id="77、使用JDBC操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？"><a href="#77、使用JDBC操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？" class="headerlink" title="77、使用JDBC操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？"></a>77、使用JDBC操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？</h3><p>答：要提升读取数据的性能，可以指定通过结果集（ResultSet）对象的setFetchSize()方法指定每次抓取的记录数（典型的空间换时间策略）；要提升更新数据的性能可以使用PreparedStatement语句构建批处理，将若干SQL语句置于一个批处理中执行。</p><h3 id="78、在进行数据库编程时，连接池有什么作用？"><a href="#78、在进行数据库编程时，连接池有什么作用？" class="headerlink" title="78、在进行数据库编程时，连接池有什么作用？"></a>78、在进行数据库编程时，连接池有什么作用？</h3><p>答：由于创建连接和释放连接都有很大的开销（尤其是数据库服务器不在本地时，每次建立连接都需要进行TCP的三次握手，释放连接需要进行TCP四次握手，造成的开销是不可忽视的），为了提升系统访问数据库的性能，可以事先创建若干连接置于连接池中，需要时直接从连接池获取，使用结束时归还连接池而不必关闭连接，从而避免频繁创建和释放连接所造成的开销，这是典型的用空间换取时间的策略（浪费了空间存储连接，但节省了创建和释放连接的时间）。池化技术在Java开发中是很常见的，在使用线程时创建线程池的道理与此相同。基于Java的开源数据库连接池主要有：C3P0、Proxool、DBCP、BoneCP、Druid等。</p><p>补充：在计算机系统中时间和空间是不可调和的矛盾，理解这一点对设计满足性能要求的算法是至关重要的。大型网站性能优化的一个关键就是使用缓存，而缓存跟上面讲的连接池道理非常类似，也是使用空间换时间的策略。可以将热点数据置于缓存中，当用户查询这些数据时可以直接从缓存中得到，这无论如何也快过去数据库中查询。当然，缓存的置换策略等也会对系统性能产生重要影响，对于这个问题的讨论已经超出了这里要阐述的范围。</p><h3 id="79、什么是DAO模式？"><a href="#79、什么是DAO模式？" class="headerlink" title="79、什么是DAO模式？"></a>79、什么是DAO模式？</h3><p>答：DAO（Data Access Object）顾名思义是一个为数据库或其他持久化机制提供了抽象接口的对象，在不暴露底层持久化方案实现细节的前提下提供了各种数据访问操作。在实际的开发中，应该将所有对数据源的访问操作进行抽象化后封装在一个公共API中。用程序设计语言来说，就是建立一个接口，接口中定义了此应用程序中将会用到的所有事务方法。在这个应用程序中，当需要和数据源进行交互的时候则使用这个接口，并且编写一个单独的类来实现这个接口，在逻辑上该类对应一个特定的数据存储。DAO模式实际上包含了两个模式，一是Data Accessor（数据访问器），二是Data Object（数据对象），前者要解决如何访问数据的问题，而后者要解决的是如何用对象封装数据。</p><h3 id="80、事务的ACID是指什么？"><a href="#80、事务的ACID是指什么？" class="headerlink" title="80、事务的ACID是指什么？"></a>80、事务的ACID是指什么？</h3><p>答：</p><p>原子性(Atomic)：事务中各项操作，要么全做要么全不做，任何一项操作的失败都会导致整个事务的失败；<br>一致性(Consistent)：事务结束后系统状态是一致的；<br>隔离性(Isolated)：并发执行的事务彼此无法看到对方的中间状态；<br>持久性(Durable)：事务完成后所做的改动都会被持久化，即使发生灾难性的失败。通过日志和同步备份可以在故障发生后重建数据。<br>补充：关于事务，在面试中被问到的概率是很高的，可以问的问题也是很多的。首先需要知道的是，只有存在并发数据访问时才需要事务。当多个事务访问同一数据时，可能会存在5类问题，包括3类数据读取问题（脏读、不可重复读和幻读）和2类数据更新问题（第1类丢失更新和第2类丢失更新）。</p><p>脏读（Dirty Read）：A事务读取B事务尚未提交的数据并在此基础上操作，而B事务执行回滚，那么A读取到的数据就是脏数据。</p><p>不可重复读（Unrepeatable Read）：事务A重新读取前面读取过的数据，发现该数据已经被另一个已提交的事务B修改过了。</p><p>幻读（Phantom Read）：事务A重新执行一个查询，返回一系列符合查询条件的行，发现其中插入了被事务B提交的行。</p><p>第1类丢失更新：事务A撤销时，把已经提交的事务B的更新数据覆盖了。</p><p>第2类丢失更新：事务A覆盖事务B已经提交的数据，造成事务B所做的操作丢失。</p><p>数据并发访问所产生的问题，在有些场景下可能是允许的，但是有些场景下可能就是致命的，数据库通常会通过锁机制来解决数据并发访问问题，按锁定对象不同可以分为表级锁和行级锁；按并发事务锁定关系可以分为共享锁和独占锁，具体的内容大家可以自行查阅资料进行了解。</p><p>直接使用锁是非常麻烦的，为此数据库为用户提供了自动锁机制，只要用户指定会话的事务隔离级别，数据库就会通过分析SQL语句然后为事务访问的资源加上合适的锁，此外，数据库还会维护这些锁通过各种手段提高系统的性能，这些对用户来说都是透明的（就是说你不用理解，事实上我确实也不知道）。ANSI&#x2F;ISO SQL 92标准定义了4个等级的事务隔离级别，如下表所示：</p><p>需要说明的是，事务隔离级别和数据访问的并发性是对立的，事务隔离级别越高并发性就越差。所以要根据具体的应用来确定合适的事务隔离级别，这个地方没有万能的原则。</p><h3 id="81、JDBC中如何进行事务处理？"><a href="#81、JDBC中如何进行事务处理？" class="headerlink" title="81、JDBC中如何进行事务处理？"></a>81、JDBC中如何进行事务处理？</h3><p>答：Connection提供了事务处理的方法，通过调用setAutoCommit(false)可以设置手动提交事务；当事务完成后用commit()显式提交事务；如果在事务处理过程中发生异常则通过rollback()进行事务回滚。除此之外，从JDBC 3.0中还引入了Savepoint（保存点）的概念，允许通过代码设置保存点并让事务回滚到指定的保存点。</p><h3 id="82、JDBC能否处理Blob和Clob？"><a href="#82、JDBC能否处理Blob和Clob？" class="headerlink" title="82、JDBC能否处理Blob和Clob？"></a>82、JDBC能否处理Blob和Clob？</h3><p>答： Blob是指二进制大对象（Binary Large Object），而Clob是指大字符对象（Character Large Objec），因此其中Blob是为存储大的二进制数据而设计的，而Clob是为存储大的文本数据而设计的。JDBC的PreparedStatement和ResultSet都提供了相应的方法来支持Blob和Clob操作。下面的代码展示了如何使用JDBC操作LOB：<br>下面以MySQL数据库为例，创建一个张有三个字段的用户表，包括编号（id）、姓名（name）和照片（photo），建表语句如下：</p><p>create table tb_user<br>(<br>    id int primary key auto_increment,<br>    name varchar(20) unique not null,<br>    photo longblob<br>);<br>下面的Java代码向数据库中插入一条记录：</p><p>import java.io.FileInputStream;<br>import java.io.IOException;<br>import java.io.InputStream;<br>import java.sql.Connection;<br>import java.sql.DriverManager;<br>import java.sql.PreparedStatement;<br>import java.sql.SQLException;</p><p>class JdbcLobTest {</p><pre><code class="hljs">public static void main(String[] args) &#123;    Connection con = null;    try &#123;        // 1. 加载驱动（Java6以上版本可以省略）        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        // 2. 建立连接        con = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;, &quot;root&quot;, &quot;123456&quot;);        // 3. 创建语句对象        PreparedStatement ps = con.prepareStatement(&quot;insert into tb_user values (default, ?, ?)&quot;);        ps.setString(1, &quot;骆昊&quot;);              // 将SQL语句中第一个占位符换成字符串        try (InputStream in = new FileInputStream(&quot;test.jpg&quot;)) &#123;    // Java 7的TWR            ps.setBinaryStream(2, in);      // 将SQL语句中第二个占位符换成二进制流            // 4. 发出SQL语句获得受影响行数            System.out.println(ps.executeUpdate() == 1 ? &quot;插入成功&quot; : &quot;插入失败&quot;);        &#125; catch(IOException e) &#123;            System.out.println(&quot;读取照片失败!&quot;);        &#125;    &#125; catch (ClassNotFoundException | SQLException e) &#123;     // Java 7的多异常捕获        e.printStackTrace();    &#125; finally &#123; // 释放外部资源的代码都应当放在finally中保证其能够得到执行        try &#123;            if(con != null &amp;&amp; !con.isClosed()) &#123;                con.close();    // 5. 释放数据库连接                 con = null;     // 指示垃圾回收器可以回收该对象            &#125;        &#125; catch (SQLException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><p>}<br>83、简述正则表达式及其用途。<br>答：在编写处理字符串的程序时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。</p><p>说明：计算机诞生初期处理的信息几乎都是数值，但是时过境迁，今天我们使用计算机处理的信息更多的时候不是数值而是字符串，正则表达式就是在进行字符串匹配和处理的时候最为强大的工具，绝大多数语言都提供了对正则表达式的支持。</p><h3 id="84、Java中是如何支持正则表达式操作的？"><a href="#84、Java中是如何支持正则表达式操作的？" class="headerlink" title="84、Java中是如何支持正则表达式操作的？"></a>84、Java中是如何支持正则表达式操作的？</h3><p>答：Java中的String类提供了支持正则表达式操作的方法，包括：matches()、replaceAll()、replaceFirst()、split()。此外，Java中可以用Pattern类表示正则表达式对象，它提供了丰富的API进行各种正则表达式操作，请参考下面面试题的代码。</p><p>面试题：如果要从字符串中截取第一个英文左括号之前的字符串，例如：北京市(朝阳区)(西城区)(海淀区)，截取结果为：北京市，那么正则表达式怎么写？</p><p>import java.util.regex.Matcher;<br>import java.util.regex.Pattern;</p><p>class RegExpTest {</p><pre><code class="hljs">public static void main(String[] args) &#123;    String str = &quot;北京市(朝阳区)(西城区)(海淀区)&quot;;    Pattern p = Pattern.compile(&quot;.*?(?=\\()&quot;);    Matcher m = p.matcher(str);    if(m.find()) &#123;        System.out.println(m.group());    &#125;&#125;</code></pre><p>}<br>说明：上面的正则表达式中使用了懒惰匹配和前瞻，如果不清楚这些内容，推荐读一下网上很有名的《正则表达式30分钟入门教程》。</p><h3 id="85、获得一个类的类对象有哪些方式？"><a href="#85、获得一个类的类对象有哪些方式？" class="headerlink" title="85、获得一个类的类对象有哪些方式？"></a>85、获得一个类的类对象有哪些方式？</h3><p>答：</p><p>方法1：类型.class，例如：String.class<br>方法2：对象.getClass()，例如：”hello”.getClass()<br>方法3：Class.forName()，例如：Class.forName(“java.lang.String”)</p><h3 id="86、如何通过反射创建对象？"><a href="#86、如何通过反射创建对象？" class="headerlink" title="86、如何通过反射创建对象？"></a>86、如何通过反射创建对象？</h3><p>答：</p><p>方法1：通过类对象调用newInstance()方法，例如：String.class.newInstance()<br>方法2：通过类对象的getConstructor()或getDeclaredConstructor()方法获得构造器（Constructor）对象并调用其newInstance()方法创建对象，例如：String.class.getConstructor(String.class).newInstance(“Hello”);</p><h3 id="87、如何通过反射获取和设置对象私有字段的值？"><a href="#87、如何通过反射获取和设置对象私有字段的值？" class="headerlink" title="87、如何通过反射获取和设置对象私有字段的值？"></a>87、如何通过反射获取和设置对象私有字段的值？</h3><p>答：可以通过类对象的getDeclaredField()方法字段（Field）对象，然后再通过字段对象的setAccessible(true)将其设置为可以访问，接下来就可以通过get&#x2F;set方法来获取&#x2F;设置字段的值了。下面的代码实现了一个反射的工具类，其中的两个静态方法分别用于获取和设置私有字段的值，字段可以是基本类型也可以是对象类型且支持多级对象操作，例如ReflectionUtil.get(dog, “owner.car.engine.id”);可以获得dog对象的主人的汽车的引擎的ID号。</p><p>import java.lang.reflect.Constructor;<br>import java.lang.reflect.Field;<br>import java.lang.reflect.Modifier;<br>import java.util.ArrayList;<br>import java.util.List;</p><p>&#x2F;**</p><ul><li><p>反射工具类</p></li><li><p>@author 骆昊</p></li><li><p>  *&#x2F;<br> public class ReflectionUtil {</p><p>  private ReflectionUtil() {<br>  throw new AssertionError();<br>  }</p><p>  &#x2F;**</p><ul><li><p>通过反射取对象指定字段(属性)的值</p></li><li><p>@param target 目标对象</p></li><li><p>@param fieldName 字段的名字</p></li><li><p>@throws 如果取不到对象指定字段的值则抛出异常</p></li><li><p>@return 字段的值<br>*&#x2F;<br>  public static Object getValue(Object target, String fieldName) {<br> Class&lt;?&gt; clazz &#x3D; target.getClass();<br> String[] fs &#x3D; fieldName.split(“\.”);</p><p> try {<br> for(int i &#x3D; 0; i &lt; fs.length - 1; i++) {<br>     Field f &#x3D; clazz.getDeclaredField(fs[i]);<br>     f.setAccessible(true);<br>     target &#x3D; f.get(target);<br>     clazz &#x3D; target.getClass();<br> }<br><br> Field f &#x3D; clazz.getDeclaredField(fs[fs.length - 1]);<br> f.setAccessible(true);<br> return f.get(target);<br> }<br> catch (Exception e) {<br> throw new RuntimeException(e);<br> }<br>  }</p></li></ul><p>  &#x2F;**</p><ul><li>通过反射给对象的指定字段赋值</li><li>@param target 目标对象</li><li>@param fieldName 字段的名称</li><li>@param value 值<br>*&#x2F;<br>public static void setValue(Object target, String fieldName, Object value) {<br> Class<?> clazz = target.getClass(); String[] fs = fieldName.split("\\."); try { for(int i = 0; i < fs.length - 1; i++) {     Field f = clazz.getDeclaredField(fs[i]);     f.setAccessible(true);     Object val = f.get(target);     if(val == null) {         Constructor<?> c &#x3D; f.getType().getDeclaredConstructor();<br>         c.setAccessible(true);<br>         val &#x3D; c.newInstance();<br>         f.set(target, val);<br>     }<br>     target &#x3D; val;<br>     clazz &#x3D; target.getClass();<br> }<br><br> Field f &#x3D; clazz.getDeclaredField(fs[fs.length - 1]);<br> f.setAccessible(true);<br> f.set(target, value);<br> }<br> catch (Exception e) {<br> throw new RuntimeException(e);<br> }<br>}<br>  }<br>  88、如何通过反射调用对象的方法？<br>  答：请看下面的代码：</li></ul></li></ul><p>import java.lang.reflect.Method;</p><p>class MethodInvokeTest {</p><pre><code class="hljs">public static void main(String[] args) throws Exception &#123;    String str = &quot;hello&quot;;    Method m = str.getClass().getMethod(&quot;toUpperCase&quot;);    System.out.println(m.invoke(str));  // HELLO&#125;</code></pre><p>}</p><h3 id="89、简述一下面向对象的”六原则一法则”。"><a href="#89、简述一下面向对象的”六原则一法则”。" class="headerlink" title="89、简述一下面向对象的”六原则一法则”。"></a>89、简述一下面向对象的”六原则一法则”。</h3><p>答：</p><p>单一职责原则：一个类只做它该做的事情。（单一职责原则想表达的就是”高内聚”，写代码最终极的原则只有六个字”高内聚、低耦合”，就如同葵花宝典或辟邪剑谱的中心思想就八个字”欲练此功必先自宫”，所谓的高内聚就是一个代码模块只完成一项功能，在面向对象中，如果只让一个类完成它该做的事，而不涉及与它无关的领域就是践行了高内聚的原则，这个类就只有单一职责。我们都知道一句话叫”因为专注，所以专业”，一个对象如果承担太多的职责，那么注定它什么都做不好。这个世界上任何好的东西都有两个特征，一个是功能单一，好的相机绝对不是电视购物里面卖的那种一个机器有一百多种功能的，它基本上只能照相；另一个是模块化，好的自行车是组装车，从减震叉、刹车到变速器，所有的部件都是可以拆卸和重新组装的，好的乒乓球拍也不是成品拍，一定是底板和胶皮可以拆分和自行组装的，一个好的软件系统，它里面的每个功能模块也应该是可以轻易的拿到其他系统中使用的，这样才能实现软件复用的目标。）</p><p>开闭原则：软件实体应当对扩展开放，对修改关闭。（在理想的状态下，当我们需要为一个软件系统增加新功能时，只需要从原来的系统派生出一些新类就可以，不需要修改原来的任何一行代码。要做到开闭有两个要点：1）抽象是关键，一个系统中如果没有抽象类或接口系统就没有扩展点；2）封装可变性，将系统中的各种可变因素封装到一个继承结构中，如果多个可变因素混杂在一起，系统将变得复杂而换乱，如果不清楚如何封装可变性，可以参考《设计模式精解》一书中对桥梁模式的讲解的章节。）</p><p>依赖倒转原则：面向接口编程。（该原则说得直白和具体一些就是声明方法的参数类型、方法的返回类型、变量的引用类型时，尽可能使用抽象类型而不用具体类型，因为抽象类型可以被它的任何一个子类型所替代，请参考下面的里氏替换原则。）</p><p>里氏替换原则：任何时候都可以用子类型替换掉父类型。（关于里氏替换原则的描述，Barbara Liskov女士的描述比这个要复杂得多，但简单的说就是能用父类型的地方就一定能使用子类型。里氏替换原则可以检查继承关系是否合理，如果一个继承关系违背了里氏替换原则，那么这个继承关系一定是错误的，需要对代码进行重构。例如让猫继承狗，或者狗继承猫，又或者让正方形继承长方形都是错误的继承关系，因为你很容易找到违反里氏替换原则的场景。需要注意的是：子类一定是增加父类的能力而不是减少父类的能力，因为子类比父类的能力更多，把能力多的对象当成能力少的对象来用当然没有任何问题。）</p><p>接口隔离原则：接口要小而专，绝不能大而全。（臃肿的接口是对接口的污染，既然接口表示能力，那么一个接口只应该描述一种能力，接口也应该是高度内聚的。例如，琴棋书画就应该分别设计为四个接口，而不应设计成一个接口中的四个方法，因为如果设计成一个接口中的四个方法，那么这个接口很难用，毕竟琴棋书画四样都精通的人还是少数，而如果设计成四个接口，会几项就实现几个接口，这样的话每个接口被复用的可能性是很高的。Java中的接口代表能力、代表约定、代表角色，能否正确的使用接口一定是编程水平高低的重要标识。）</p><p>合成聚合复用原则：优先使用聚合或合成关系复用代码。（通过继承来复用代码是面向对象程序设计中被滥用得最多的东西，因为所有的教科书都无一例外的对继承进行了鼓吹从而误导了初学者，类与类之间简单的说有三种关系，Is-A关系、Has-A关系、Use-A关系，分别代表继承、关联和依赖。其中，关联关系根据其关联的强度又可以进一步划分为关联、聚合和合成，但说白了都是Has-A关系，合成聚合复用原则想表达的是优先考虑Has-A关系而不是Is-A关系复用代码，原因嘛可以自己从百度上找到一万个理由，需要说明的是，即使在Java的API中也有不少滥用继承的例子，例如Properties类继承了Hashtable类，Stack类继承了Vector类，这些继承明显就是错误的，更好的做法是在Properties类中放置一个Hashtable类型的成员并且将其键和值都设置为字符串来存储数据，而Stack类的设计也应该是在Stack类中放一个Vector对象来存储数据。记住：任何时候都不要继承工具类，工具是可以拥有并可以使用的，而不是拿来继承的。）</p><p>迪米特法则：迪米特法则又叫最少知识原则，一个对象应当对其他对象有尽可能少的了解。（迪米特法则简单的说就是如何做到”低耦合”，门面模式和调停者模式就是对迪米特法则的践行。对于门面模式可以举一个简单的例子，你去一家公司洽谈业务，你不需要了解这个公司内部是如何运作的，你甚至可以对这个公司一无所知，去的时候只需要找到公司入口处的前台美女，告诉她们你要做什么，她们会找到合适的人跟你接洽，前台的美女就是公司这个系统的门面。再复杂的系统都可以为用户提供一个简单的门面，Java Web开发中作为前端控制器的Servlet或Filter不就是一个门面吗，浏览器对服务器的运作方式一无所知，但是通过前端控制器就能够根据你的请求得到相应的服务。调停者模式也可以举一个简单的例子来说明，例如一台计算机，CPU、内存、硬盘、显卡、声卡各种设备需要相互配合才能很好的工作，但是如果这些东西都直接连接到一起，计算机的布线将异常复杂，在这种情况下，主板作为一个调停者的身份出现，它将各个设备连接在一起而不需要每个设备之间直接交换数据，这样就减小了系统的耦合度和复杂度，如下图所示。迪米特法则用通俗的话来讲就是不要和陌生人打交道，如果真的需要，找一个自己的朋友，让他替你和陌生人打交道。）</p><h3 id="90、简述一下你了解的设计模式。"><a href="#90、简述一下你了解的设计模式。" class="headerlink" title="90、简述一下你了解的设计模式。"></a>90、简述一下你了解的设计模式。</h3><p>答：所谓设计模式，就是一套被反复使用的代码设计经验的总结（情境中一个问题经过证实的一个解决方案）。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。设计模式使人们可以更加简单方便的复用成功的设计和体系结构。将已证实的技术表述成设计模式也会使新系统开发者更加容易理解其设计思路。<br>在GoF的《Design Patterns: Elements of Reusable Object-Oriented Software》中给出了三类（创建型[对类的实例化过程的抽象化]、结构型[描述如何将类或对象结合在一起形成更大的结构]、行为型[对在不同的对象之间划分责任和算法的抽象化]）共23种设计模式，包括：Abstract Factory（抽象工厂模式），Builder（建造者模式），Factory Method（工厂方法模式），Prototype（原始模型模式），Singleton（单例模式）；Facade（门面模式），Adapter（适配器模式），Bridge（桥梁模式），Composite（合成模式），Decorator（装饰模式），Flyweight（享元模式），Proxy（代理模式）；Command（命令模式），Interpreter（解释器模式），Visitor（访问者模式），Iterator（迭代子模式），Mediator（调停者模式），Memento（备忘录模式），Observer（观察者模式），State（状态模式），Strategy（策略模式），Template Method（模板方法模式）， Chain Of Responsibility（责任链模式）。</p><p>面试被问到关于设计模式的知识时，可以拣最常用的作答，例如：</p><p>工厂模式：工厂类可以根据条件生成不同的子类实例，这些子类有一个公共的抽象父类并且实现了相同的方法，但是这些方法针对不同的数据进行了不同的操作（多态方法）。当得到子类的实例后，开发人员可以调用基类中的方法而不必考虑到底返回的是哪一个子类的实例。<br>代理模式：给一个对象提供一个代理对象，并由代理对象控制原对象的引用。实际开发中，按照使用目的的不同，代理可以分为：远程代理、虚拟代理、保护代理、Cache代理、防火墙代理、同步化代理、智能引用代理。<br>适配器模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起使用的类能够一起工作。<br>模板方法模式：提供一个抽象类，将部分逻辑以具体方法或构造器的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法（多态实现），从而实现不同的业务逻辑。<br>除此之外，还可以讲讲上面提到的门面模式、桥梁模式、单例模式、装潢模式（Collections工具类和I&#x2F;O系统中都使用装潢模式）等，反正基本原则就是拣自己最熟悉的、用得最多的作答，以免言多必失。</p><h3 id="91、用Java写一个单例类。"><a href="#91、用Java写一个单例类。" class="headerlink" title="91、用Java写一个单例类。"></a>91、用Java写一个单例类。</h3><p>答：</p><p>饿汉式单例<br>public class Student {</p><pre><code class="hljs">// 构造私有，外界就不能造对象了private Student() &#123;&#125; // 在成员变量位置自己创建一个对象// 静态方法只能访问静态成员变量，所以成员变量加静态修饰// 为了不让外界直接访问修改这个成员变量的值，所以该成员变量加private修饰private static Student s = new Student(); // 提供公共的访问方式，返回该对象。为了保证外界能够直接访问该方法，所以方法加静态修饰public static Student getStudent() &#123;    return s;&#125;</code></pre><p>}<br>懒汉式单例<br>public class Teacher {<br>    private Teacher() {<br>    }</p><pre><code class="hljs">private static Teacher t = null; public static synchronized Teacher getTeacher() &#123;    if (t == null) &#123;        t = new Teacher();    &#125;    return t;&#125;</code></pre><p>}<br>注意：实现一个单例有两点注意事项，1）将构造器私有，不允许外界通过构造器创建对象；2）通过公开的静态方法向外界返回类的唯一实例。这里有一个问题可以思考：Spring的IoC容器可以为普通的类创建单例，它是怎么做到的呢？<br>1、Bean的简介<br>  在Spring中，那些组成应用程序的主体(backbone)及由Spring IoC容器所管理的对象，被称之为bean。简单地讲，bean就是由Spring容器初始化、装配及管理的对象，除此之外，bean就与应用程序中的其他对象没有什么区别了。而bean定义以及bean相互间的依赖关系将通过配置元数据来描述。<br>2、Bean的作用域<br>  创建一个bean定义，其实质是用该bean定义对应的类来创建真正实例的“配方(recipe)”。把bean定义看成一个配方很有意义，它与class很类似，只根据一张“处方”就可以创建多个实例。不仅可以控制注入到对象中的各种依赖和配置值，还可以控制该对象的作用域。这样可以灵活选择所建对象的作用域，而不必在Java Class级定义作用域。Spring Framework支持五种作用域（其中有三种只能用在基于web的Spring ApplicationContext）。<br>1）singleton<br>  当一个bean的作用域为singleton, 那么Spring IoC容器中只会存在一个共享的bean实例，并且所有对bean的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例。<br>  注意：Singleton作用域是Spring中的缺省作用域。要在XML中将bean定义成singleton，可以这样配置：<bean id="empServiceImpl" class="cn.csdn.service.EmpServiceImpl" scope="singleton"><br>2）prototype<br>  一个bean定义对应多个对象实例。Prototype作用域的bean会导致在每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）时都会创建一个新的bean实例。根据经验，对有状态的bean应该使用prototype作用域，而对无状态的bean则应该使用singleton作用域。<br>3）request<br>  在一次HTTP请求中，一个bean定义对应一个实例；即每次HTTP请求将会有各自的bean实例，它们依据某个bean定义创建而成。该作用域仅在基于web的Spring ApplicationContext情形下有效。考虑下面bean定义：&lt;bean id&#x3D;”loginAction” class&#x3D;cn.csdn.LoginAction” scope&#x3D;”request”&#x2F;&gt;针对每次HTTP请求，Spring容器会根据loginAction的bean定义创建一个全新的LoginAction bean实例，且该loginAction的bean实例仅在当前HTTP request内有效，因此可以根据需要放心的更改所建实例的内部状态，而其他请求中根据loginAction的bean定义创建的实例，将不会看到这些特定于某个请求的状态变化。 当处理请求结束，request作用域的bean实例将被销毁。</p><h3 id="92、什么是UML？"><a href="#92、什么是UML？" class="headerlink" title="92、什么是UML？"></a>92、什么是UML？</h3><p>答：UML是统一建模语言（Unified Modeling Language）的缩写，它发表于1997年，综合了当时已经存在的面向对象的建模语言、方法和过程，是一个支持模型化和软件系统开发的图形化语言，为软件开发的所有阶段提供模型化和可视化支持。使用UML可以帮助沟通与交流，辅助应用设计和文档的生成，还能够阐释系统的结构和行为。</p><h3 id="93、UML中有哪些常用的图？"><a href="#93、UML中有哪些常用的图？" class="headerlink" title="93、UML中有哪些常用的图？"></a>93、UML中有哪些常用的图？</h3><p>答：UML定义了多种图形化的符号来描述软件系统部分或全部的静态结构和动态结构，包括：用例图（use case diagram）、类图（class diagram）、时序图（sequence diagram）、协作图（collaboration diagram）、状态图（statechart diagram）、活动图（activity diagram）、构件图（component diagram）、部署图（deployment diagram）等。在这些图形化符号中，有三种图最为重要，分别是：用例图（用来捕获需求，描述系统的功能，通过该图可以迅速的了解系统的功能模块及其关系）、类图（描述类以及类与类之间的关系，通过该图可以快速了解系统）、时序图（描述执行特定任务时对象之间的交互关系以及执行顺序，通过该图可以了解对象能接收的消息也就是说对象能够向外界提供的服务）。</p><p>用例图：</p><p>类图：</p><p>时序图：</p><h3 id="94、用Java写一个冒泡排序。"><a href="#94、用Java写一个冒泡排序。" class="headerlink" title="94、用Java写一个冒泡排序。"></a>94、用Java写一个冒泡排序。</h3><p>答：冒泡排序几乎是个程序员都写得出来，但是面试的时候如何写一个逼格高的冒泡排序却不是每个人都能做到，下面提供一个参考代码：xxx链接</p><h3 id="95、用Java写一个折半查找。"><a href="#95、用Java写一个折半查找。" class="headerlink" title="95、用Java写一个折半查找。"></a>95、用Java写一个折半查找。</h3><p>答：折半查找，也称二分查找、二分搜索，是一种在有序数组中查找某一特定元素的搜索算法。搜素过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜素过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组已经为空，则表示找不到指定的元素。这种搜索算法每一次比较都使搜索范围缩小一半，其时间复杂度是O(logN)。<br>————————————————<br>版权声明：本文为CSDN博主「Java程序员-张凯」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41701956/article/details/86699263">https://blog.csdn.net/qq_41701956/article/details/86699263</a></p><h1 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h1><h2 id="一、Spring概述"><a href="#一、Spring概述" class="headerlink" title="一、Spring概述"></a>一、Spring概述</h2><h3 id="1-什么是-Spring-？"><a href="#1-什么是-Spring-？" class="headerlink" title="1. 什么是 Spring ？"></a>1. 什么是 Spring ？</h3><p>Spring 是一个轻量级 Java 开发框架，最早有 Rod Johnson 创建，目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。它是一个分层的JavaSE&#x2F;JavaEE full-stack（一站式）轻量级开源框架，为开发 Java 应用程序提供全面的基础架构支持。Spring 负责基础架构，因此 Java 开发者可以专注于应用程序的开发。</p><p>Spring 最根本的使命是解决企业级应用开发的复杂性，即简化  Java 开发。</p><p>Spring 可以做很多事情，它为企业级开发提供给了丰富的功能，但是这些功能的底层都依赖于它的两个核心特性，也就是依赖注入（dependency injection，DI）和面向切面编程（aspect-oriented programming，AOP）。</p><p>为了降低 Java 开发的复杂性，Spring 采取了以下4种关键策略</p><ul><li>基于POJO的轻量级和最小侵入性编程；</li><li>通过依赖注入和面向接口实现松耦合；</li><li>基于切面和惯例进行声明式编程；</li><li>通过切面和模板减少样板式代码。</li></ul><h3 id="2-Spring-框架的设计目标，设计理念和核心是什么？"><a href="#2-Spring-框架的设计目标，设计理念和核心是什么？" class="headerlink" title="2. Spring 框架的设计目标，设计理念和核心是什么？"></a>2. Spring 框架的设计目标，设计理念和核心是什么？</h3><p>Spring 设计目标：Spring 为开发者提供一个一站式轻量级应用开发平台；</p><p>Spring 设计理念：在 JavaEE 开发中，支持 POJO 和  JavaBean 开发方式，使应用面向接口开发，充分支持OO（面向对象）设计方法；Spring 通过 IoC 容器实现对象耦合关系的管理，并实现依赖反转，将对象之间的依赖关系交给 IoC 容器，实现解耦；</p><p>Spring 框架的核心：IoC 容器和 AOP 模块。通过 IoC 容器管理 POJO 对象以及他们之间的耦合关系；通过 AOP 以动态非侵入的方式增强服务。</p><p>IoC 让相互协作的组件保持松散的耦合，而 AOP 编程允许你把遍布于应用各层的功能分离出来形成可重用的功能组件。</p><h3 id="3-Spring-的优缺点是什么？"><a href="#3-Spring-的优缺点是什么？" class="headerlink" title="3. Spring 的优缺点是什么？"></a>3. Spring 的优缺点是什么？</h3><p>优点<br>①. 方便解耦，简化开发</p><p>Spring 就是一个大工厂，可以将所有对象的创建和依赖关系的维护，交给 Spring 管理。</p><p>②. AOP编程的支持</p><p>Spring 提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能。</p><p>③. 声明式事务的支持</p><p>只需要通过配置就可以完成对事务的管理，而无需手动编程。</p><p>④. 方便程序的测试</p><p>Spring 对 JUnit4 支持，可以通过注解方便的测试 Spring 程序。</p><p>⑤. 方便集成各种优秀框架</p><p>Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架的直接支持（如：Struts、Hibernate、MyBatis等）。</p><p>⑥. 降低 JavaEE API的使用难度</p><p>Spring 对 JavaEE 开发中非常难用的一些 API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低。</p><p>缺点<br>Spring 明明一个很轻量级的框架，却给人感觉大而全<br>Spring 依赖反射，反射影响性能<br>使用门槛升高，入门Spring需要较长时间</p><h3 id="4-Spring-有哪些应用场景"><a href="#4-Spring-有哪些应用场景" class="headerlink" title="4. Spring 有哪些应用场景"></a>4. Spring 有哪些应用场景</h3><p>应用场景：JavaEE企业应用开发，包括SSH、SSM等</p><p>Spring价值：</p><p>Spring是非侵入式的框架，目标是使应用程序代码对框架依赖最小化；<br>Spring提供一个一致的编程模型，使应用直接使用POJO开发，与运行环境隔离开来；<br>Spring推动应用设计风格向面向对象和面向接口开发转变，提高了代码的重用性和可测试性；</p><h3 id="5-Spring-由哪些模块组成？"><a href="#5-Spring-由哪些模块组成？" class="headerlink" title="5. Spring 由哪些模块组成？"></a>5. Spring 由哪些模块组成？</h3><p>Spring 总共大约有 20 个模块， 由 1300 多个不同的文件构成。 而这些组件被分别整合在核心容器（Core Container） 、 AOP（Aspect Oriented Programming）和设备支持（Instrmentation） 、数据访问与集成（Data Access&#x2F;Integeration） 、 Web、 消息（Messaging） 、 Test等 6 个模块中。 以下是 Spring 5 的模块结构图：</p><p>spring core：提供了框架的基本组成部分，包括控制反转（Inversion of Control，IOC）和依赖注入（Dependency Injection，DI）功能。<br>spring beans：提供了BeanFactory，是工厂模式的一个经典实现，Spring将管理对象称为Bean。<br>spring context：构建于 core 封装包基础上的 context 封装包，提供了一种框架式的对象访问方法。<br>spring jdbc：提供了一个JDBC的抽象层，消除了烦琐的JDBC编码和数据库厂商特有的错误代码解析， 用于简化JDBC。<br>spring aop：提供了面向切面的编程实现，让你可以自定义拦截器、切点等。<br>spring web：提供了针对 Web 开发的集成特性，例如文件上传，利用 servlet listeners 进行 ioc 容器初始化和针对 Web 的 ApplicationContext。<br>spring test：主要为测试提供支持的，支持使用JUnit或TestNG对Spring组件进行单元测试和集成测试。</p><h3 id="6-Spring-框架中都用到了哪些设计模式？"><a href="#6-Spring-框架中都用到了哪些设计模式？" class="headerlink" title="6. Spring 框架中都用到了哪些设计模式？"></a>6. Spring 框架中都用到了哪些设计模式？</h3><ul><li>工厂模式：BeanFactory 就是简单工厂模式的体现，用来创建对象的实例；</li><li>单例模式：Bean 默认为单例模式。</li><li>代理模式：Spring 的 AOP 功能用到了 JDK 的动态代理和 CGLIB 字节码生成技术；</li><li>模板方法：用来解决代码重复的问题。比如. RestTemplate, JmsTemplate, JpaTemplate。</li><li>观察者模式：定义对象键一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知被制动更新，如 Spring 中 listener 的实现 – ApplicationListener。</li></ul><h3 id="7-详细讲解一下核心容器（spring-context应用上下文-模块"><a href="#7-详细讲解一下核心容器（spring-context应用上下文-模块" class="headerlink" title="7. 详细讲解一下核心容器（spring context应用上下文) 模块"></a>7. 详细讲解一下核心容器（spring context应用上下文) 模块</h3><p>这是基本的Spring模块，提供spring 框架的基础功能，BeanFactory 是 任何以Spring为基础的应用的核心。Spring 框架建立在此模块之上，它使Spring成为一个容器。</p><p>Bean 工厂是工厂模式的一个实现，提供了控制反转功能，用来把应用的配置和依赖从真正的应用代码中分离。最常用的就是org.springframework.beans.factory.xml.XmlBeanFactory ，它根据XML文件中的定义加载beans。该容器从XML 文件读取配置元数据并用它去创建一个完全配置的系统或应用。</p><h3 id="8-Spring-框架中有哪些不同类型的事件"><a href="#8-Spring-框架中有哪些不同类型的事件" class="headerlink" title="8. Spring 框架中有哪些不同类型的事件"></a>8. Spring 框架中有哪些不同类型的事件</h3><p>Spring 提供了以下5种标准的事件：</p><p>上下文更新事件（ContextRefreshedEvent）：在调用ConfigurableApplicationContext 接口中的refresh()方法时被触发。<br>上下文开始事件（ContextStartedEvent）：当容器调用ConfigurableApplicationContext的start()方法开始&#x2F;重新开始容器时触发该事件。<br>上下文停止事件（ContextStoppedEvent）：当容器调用ConfigurableApplicationContext的stop()方法停止容器时触发该事件。<br>上下文关闭事件（ContextClosedEvent）：当ApplicationContext被关闭时触发该事件。容器被关闭时，其管理的所有单例Bean都被销毁。<br>请求处理事件（RequestHandledEvent）：在Web应用中，当一个http请求（request）结束触发该事件。如果一个bean实现了ApplicationListener接口，当一个ApplicationEvent 被发布以后，bean会自动被通知。</p><h3 id="9-Spring-应用程序有哪些不同组件？"><a href="#9-Spring-应用程序有哪些不同组件？" class="headerlink" title="9.Spring 应用程序有哪些不同组件？"></a>9.Spring 应用程序有哪些不同组件？</h3><p>Spring 应用一般有以下组件：</p><p>接口 - 定义功能。<br>Bean 类 - 它包含属性，setter 和 getter 方法，函数等。<br>Bean 配置文件 - 包含类的信息以及如何配置它们。<br>Spring 面向切面编程（AOP） - 提供面向切面编程的功能。<br>用户程序 - 它使用接口。</p><h2 id="10-使用-Spring-有哪些方式？"><a href="#10-使用-Spring-有哪些方式？" class="headerlink" title="10.使用 Spring 有哪些方式？"></a>10.使用 Spring 有哪些方式？</h2><p>使用 Spring 有以下方式：</p><p>作为一个成熟的 Spring Web 应用程序。<br>作为第三方 Web 框架，使用 Spring Frameworks 中间层。<br>作为企业级 Java Bean，它可以包装现有的 POJO（Plain Old Java Objects）。<br>用于远程使用。</p><p>二、Spring控制反转(IoC)</p><ol><li>什么是 Spring IoC 容器？<br>控制反转即 IoC (Inversion of Control)，它把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的“控制反转”概念就是对组件对象控制权的转移，从程序代码本身转移到了外部容器。</li></ol><p>Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。</p><ol start="2"><li>控制反转(IoC)有什么作用<br>管理对象的创建和依赖关系的维护。对象的创建并不是一件简单的事，在对象关系比较复杂时，如果依赖关系需要程序猿来维护的话，那是相当头疼的<br>解耦，由容器去维护具体的对象<br>托管了类的产生过程，比如我们需要在类的产生过程中做一些处理，最直接的例子就是代理，如果有容器程序可以把这部分处理交给容器，应用程序则无需去关心类是如何完成代理的</li><li>IoC的优点是什么？<br>IoC 或 依赖注入把应用的代码量降到最低。<br>它使应用容易测试，单元测试不再需要单例和JNDI查找机制。<br>最小的代价和最小的侵入性使松散耦合得以实现。<br>IOC容器支持加载服务时的饿汉式初始化和懒加载。</li><li>Spring IoC 的实现机制<br>Spring 中的 IoC 的实现原理就是工厂模式加反射机制。</li></ol><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Fruit</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">eat</span>();<br> &#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Apple</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Fruit</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Apple&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Orange</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Fruit</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Orange&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title class_">Fruit</span> <span class="hljs-title function_">getInstance</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> ClassName</span>) &#123;<br>        <span class="hljs-title class_">Fruit</span> f=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            f=(<span class="hljs-title class_">Fruit</span>)<span class="hljs-title class_">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-title class_">ClassName</span>).<span class="hljs-title function_">newInstance</span>();<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> f;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] a</span>) &#123;<br>        <span class="hljs-title class_">Fruit</span> f=<span class="hljs-title class_">Factory</span>.<span class="hljs-title function_">getInstance</span>(<span class="hljs-string">&quot;io.github.dunwu.spring.Apple&quot;</span>);<br>        <span class="hljs-keyword">if</span>(f!=<span class="hljs-literal">null</span>)&#123;<br>            f.<span class="hljs-title function_">eat</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>Spring 的 IoC支持哪些功能<br>Spring 的 IoC 设计支持以下功能：</li></ol><p>依赖注入<br>依赖检查<br>自动装配<br>支持集合<br>指定初始化方法和销毁方法<br>支持回调某些方法（但是需要实现 Spring 接口，略有侵入）<br>其中，最重要的就是依赖注入，从 XML 的配置上说，即 ref 标签。对应 Spring RuntimeBeanReference 对象。</p><p>对于 IoC 来说，最重要的就是容器。容器管理着 Bean 的生命周期，控制着 Bean 的依赖注入。</p><ol start="6"><li>BeanFactory 和 ApplicationContext有什么区别？<br>BeanFactory 和 ApplicationContext 是 Spring 的两大核心接口，都可以当做Spring的容器。其中ApplicationContext是BeanFactory的子接口。</li></ol><p>依赖关系</p><p>BeanFactory：是Spring里面最底层的接口，包含了各种Bean的定义，读取bean配置文档，管理bean的加载、实例化，控制bean的生命周期，维护bean之间的依赖关系。</p><p>ApplicationContext接口作为BeanFactory的派生，除了提供BeanFactory所具有的功能外，还提供了更完整的框架功能：</p><p>继承MessageSource，因此支持国际化。<br>统一的资源文件访问方式。<br>提供在监听器中注册bean的事件。<br>同时加载多个配置文件。<br>载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层。<br>加载方式</p><p>BeanFactroy 采用的是延迟加载形式来注入Bean的，即只有在使用到某个Bean时(调用getBean())，才对该Bean进行加载实例化。这样，我们就不能发现一些存在的Spring的配置问题。如果Bean的某一个属性没有注入，BeanFacotry加载后，直至第一次使用调用getBean方法才会抛出异常。</p><p>ApplicationContext，它是在容器启动时，一次性创建了所有的Bean。这样，在容器启动时，我们就可以发现Spring中存在的配置错误，这样有利于检查所依赖属性是否注入。 ApplicationContext启动后预载入所有的单实例Bean，通过预载入单实例bean ,确保当你需要的时候，你就不用等待，因为它们已经创建好了。</p><p>相对于基本的 BeanFactory，ApplicationContext 唯一的不足是占用内存空间。当应用程序配置Bean较多时，程序启动较慢。</p><p>创建方式</p><p>BeanFactory通常以编程的方式被创建，ApplicationContext 还能以声明的方式创建，如使用 ContextLoader。</p><p>注册方式</p><p>BeanFactory和ApplicationContext都支持BeanPostProcessor、BeanFactoryPostProcessor的使用，但两者之间的区别是：BeanFactory需要手动注册，而ApplicationContext则是自动注册。</p><ol start="7"><li>Spring 如何设计容器的，BeanFactory和ApplicationContext的关系详解<br>Spring 作者 Rod Johnson 设计了两个接口用以表示容器。</li></ol><p>BeanFactory<br>ApplicationContext<br>BeanFactory 简单粗暴，可以理解为就是个 HashMap，Key 是 BeanName，Value 是 Bean 实例。通常只提供注册（put），获取（get）这两个功能。我们可以称之为 “低级容器”。</p><p>ApplicationContext 可以称之为 “高级容器”。因为他比 BeanFactory 多了更多的功能。他继承了多个接口。因此具备了更多的功能。例如资源的获取，支持多种消息（例如 JSP tag 的支持），对 BeanFactory 多了工具级别的支持等待。所以你看他的名字，已经不是 BeanFactory 之类的工厂了，而是 “应用上下文”， 代表着整个大容器的所有功能。该接口定义了一个 refresh 方法，此方法是所有阅读 Spring 源码的人的最熟悉的方法，用于刷新整个容器，即重新加载&#x2F;刷新所有的 bean。</p><p>当然，除了这两个大接口，还有其他的辅助接口，这里就不介绍他们了。</p><p>BeanFactory和ApplicationContext的关系</p><p>为了更直观的展示 “低级容器” 和 “高级容器” 的关系，这里通过常用的 ClassPathXmlApplicationContext 类来展示整个容器的层级 UML 关系。</p><p>有点复杂？ 先不要慌，我来解释一下。</p><p>最上面的是 BeanFactory，下面的 3 个绿色的，都是功能扩展接口，这里就不展开讲。</p><p>看下面的隶属 ApplicationContext 粉红色的 “高级容器”，依赖着 “低级容器”，这里说的是依赖，不是继承哦。他依赖着 “低级容器” 的 getBean 功能。而高级容器有更多的功能：支持不同的信息源头，可以访问文件资源，支持应用事件（Observer 模式）。</p><p>通常用户看到的就是 “高级容器”。 但 BeanFactory 也非常够用啦！</p><p>左边灰色区域的是 “低级容器”， 只负载加载 Bean，获取 Bean。容器其他的高级功能是没有的。例如上图画的 refresh 刷新 Bean 工厂所有配置，生命周期事件回调等。</p><p>小结<br>说了这么多，不知道你有没有理解Spring IoC？ 这里小结一下：IoC 在 Spring 里，只需要低级容器就可以实现，2 个步骤：</p><p>加载配置文件，解析成 BeanDefinition 放在 Map 里。</p><p>调用 getBean 的时候，从 BeanDefinition 所属的 Map 里，拿出 Class 对象进行实例化，同时，如果有依赖关系，将递归调用 getBean 方法 —— 完成依赖注入。</p><p>上面就是 Spring 低级容器（BeanFactory）的 IoC。</p><p>至于高级容器 ApplicationContext，他包含了低级容器的功能，当他执行 refresh 模板方法的时候，将刷新整个容器的 Bean。同时其作为高级容器，包含了太多的功能。一句话，他不仅仅是 IoC。他支持不同信息源头，支持 BeanFactory 工具类，支持层级容器，支持访问文件资源，支持事件发布通知，支持接口回调等等。</p><ol start="8"><li>ApplicationContext通常的实现是什么？<br>FileSystemXmlApplicationContext ：此容器从一个XML文件中加载beans的定义，XML Bean 配置文件的全路径名必须提供给它的构造函数。</li></ol><p>ClassPathXmlApplicationContext：此容器也从一个XML文件中加载beans的定义，这里，你需要正确设置classpath因为这个容器将在classpath里找bean配置。</p><p>WebXmlApplicationContext：此容器加载一个XML文件，此文件定义了一个WEB应用的所有bean。</p><ol start="9"><li>什么是Spring的依赖注入？</li></ol><p>  控制反转IoC是一个很大的概念，可以用不同的方式来实现。其主要实现方式有两种：依赖注入和依赖查找</p><p>依赖注入：相对于IoC而言，依赖注入(DI)更加准确地描述了IoC的设计理念。所谓依赖注入（Dependency Injection），即组件之间的依赖关系由容器在应用系统运行期来决定，也就是由容器动态地将某种依赖关系的目标对象实例注入到应用系统中的各个关联的组件之中。组件不做定位查询，只提供普通的Java方法让容器去决定依赖关系。</p><ol start="10"><li><p>依赖注入的基本原则<br>依赖注入的基本原则是：应用组件不应该负责查找资源或者其他依赖的协作对象。配置对象的工作应该由IoC容器负责，“查找资源”的逻辑应该从应用组件的代码中抽取出来，交给IoC容器负责。容器全权负责组件的装配，它会把符合依赖关系的对象通过属性（JavaBean中的setter）或者是构造器传递给需要的对象。</p></li><li><p>依赖注入有什么优势<br>依赖注入之所以更流行是因为它是一种更可取的方式：让容器全权负责依赖查询，受管组件只需要暴露JavaBean的setter方法或者带参数的构造器或者接口，使容器可以在初始化时组装对象的依赖关系。其与依赖查找方式相比，主要优势为：</p></li></ol><p>查找定位操作与应用代码完全无关。<br>不依赖于容器的API，可以很容易地在任何容器以外使用应用对象。<br>不需要特殊的接口，绝大多数对象可以做到完全不必依赖容器。<br>12. 有哪些不同类型的依赖注入实现方式？<br>依赖注入是时下最流行的IoC实现方式，依赖注入分为接口注入（Interface Injection），Setter方法注入（Setter Injection）和构造器注入（Constructor Injection）三种方式。其中接口注入由于在灵活性和易用性比较差，现在从Spring4开始已被废弃。</p><p>构造器依赖注入：构造器依赖注入通过容器触发一个类的构造器来实现的，该类有一系列参数，每个参数代表一个对其他类的依赖。</p><p>Setter方法注入：Setter方法注入是容器通过调用无参构造器或无参static工厂 方法实例化bean之后，调用该bean的setter方法，即实现了基于setter的依赖注入。</p><ol start="13"><li>构造器依赖注入和 Setter方法注入的区别<br>构造函数注入setter 注入<br>没有部分注入有部分注入<br>不会覆盖 setter 属性会覆盖 setter 属性<br>任意修改都会创建一个新实例任意修改不会创建一个新实例<br>适用于设置很多属性适用于设置少量属性<br>两种依赖方式都可以使用，构造器注入和Setter方法注入。最好的解决方案是用构造器参数实现强制依赖，setter方法实现可选依赖。</li></ol><p>三、Spring Beans</p><ol><li><p>什么是Spring beans？<br>Spring beans 是那些形成Spring应用的主干的java对象。它们被Spring IOC容器初始化，装配，和管理。这些beans通过容器中配置的元数据创建。比如，以XML文件中 的形式定义。</p></li><li><p>一个 Spring Bean 定义 包含什么？<br>一个Spring Bean 的定义包含容器必知的所有配置元数据，包括如何创建一个bean，它的生命周期详情及它的依赖。</p></li><li><p>如何给Spring 容器提供配置元数据？Spring有几种配置方式<br>这里有三种重要的方法给Spring 容器提供配置元数据。</p></li></ol><p>XML配置文件。<br>基于注解的配置。<br>基于java的配置。<br>4. Spring配置文件包含了哪些信息<br>Spring配置文件是个XML 文件，这个文件包含了类信息，描述了如何配置它们，以及如何相互调用。</p><ol start="5"><li><p>Spring基于xml注入bean的几种方式<br>Set方法注入；<br>构造器注入：①通过index设置参数的位置；②通过type设置参数类型；<br>静态工厂注入；<br>实例工厂；</p></li><li><p>你怎样定义类的作用域？<br>当定义一个 在Spring里，我们还能给这个bean声明一个作用域。它可以通过bean 定义中的scope属性来定义。如，当Spring要在需要的时候每次生产一个新的bean实例，bean的scope属性被指定为prototype。另一方面，一个bean每次使用的时候必须返回同一个实例，这个bean的scope 属性 必须设为 singleton。</p></li><li><p>解释Spring支持的几种bean的作用域<br>Spring框架支持以下五种bean的作用域：</p></li></ol><p>singleton : bean在每个Spring ioc 容器中只有一个实例。<br>prototype：一个bean的定义可以有多个实例。<br>request：每次http请求都会创建一个bean，该作用域仅在基于web的Spring ApplicationContext情形下有效。<br>session：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。<br>global-session：在一个全局的HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。<br>注意： 缺省的Spring bean 的作用域是Singleton。使用 prototype 作用域需要慎重的思考，因为频繁创建和销毁 bean 会带来很大的性能开销。</p><ol start="8"><li>Spring框架中的单例bean是线程安全的吗？<br>不是，Spring框架中的单例bean不是线程安全的。</li></ol><p>spring 中的 bean 默认是单例模式，spring 框架并没有对单例 bean 进行多线程的封装处理。</p><p>实际上大部分时候 spring bean 无状态的（比如 dao 类），所有某种程度上来说 bean 也是安全的，但如果 bean 有状态的话（比如 view model 对象），那就要开发者自己去保证线程安全了，最简单的就是改变 bean 的作用域，把“singleton”变更为“prototype”，这样请求 bean 相当于 new Bean()了，所以就可以保证线程安全了。</p><p>有状态就是有数据存储功能。<br>无状态就是不会保存数据。<br>9. Spring如何处理线程并发问题？<br>在一般情况下，只有无状态的Bean才可以在多线程环境下共享，在Spring中，绝大部分Bean都可以声明为singleton作用域，因为Spring对一些Bean中非线程安全状态采用ThreadLocal进行处理，解决线程安全问题。</p><p>ThreadLocal和线程同步机制都是为了解决多线程中相同变量的访问冲突问题。同步机制采用了“时间换空间”的方式，仅提供一份变量，不同的线程在访问前需要获取锁，没获得锁的线程则需要排队。而ThreadLocal采用了“空间换时间”的方式。</p><p>ThreadLocal会为每一个线程提供一个独立的变量副本，从而隔离了多个线程对数据的访问冲突。因为每一个线程都拥有自己的变量副本，从而也就没有必要对该变量进行同步了。ThreadLocal提供了线程安全的共享对象，在编写多线程代码时，可以把不安全的变量封装进ThreadLocal。</p><ol start="10"><li><p>解释 Spring 框架中 bean 的生命周期</p><p>在传统的Java应用中，bean的生命周期很简单。使用Java关键字new进行bean实例化，然后该bean就可以使用了。一旦该bean不再被使用，则由Java自动进行垃圾回收。相比之下，Spring容器中的bean的生命周期就显得相对复杂多了。正确理解Spring bean的生命周期非常重要，因为你或许要利用Spring提供的扩展点来自定义bean 的创建过程。下图展示了bean装载到Spring应用上下文中的一个典型的生命周期过程。</p></li></ol><p>bean在Spring容器中从创建到销毁经历了若干阶段，每一阶段都可以针对Spring如何管理bean进行个性化定制。</p><p>正如你所见，在bean准备就绪之前，bean工厂执行了若干启动步骤。</p><p>我们对上图进行详细描述：</p><p>Spring对bean进行实例化；</p><p>Spring将值和bean的引用注入到bean对应的属性中；</p><p>如果bean实现了BeanNameAware接口，Spring将bean的ID传递给setBean-Name()方法；</p><p>如果bean实现了BeanFactoryAware接口，Spring将调用setBeanFactory()方法，将BeanFactory容器实例传入；</p><p>如果bean实现了ApplicationContextAware接口，Spring将调用setApplicationContext()方法，将bean所在的应用上下文的引用传入进来；</p><p>如果bean实现了BeanPostProcessor接口，Spring将调用它们的post-ProcessBeforeInitialization()方法；</p><p>如果bean实现了InitializingBean接口，Spring将调用它们的after-PropertiesSet()方法。类似地，如果bean使用initmethod声明了初始化方法，该方法也会被调用；</p><p>如果bean实现了BeanPostProcessor接口，Spring将调用它们的post-ProcessAfterInitialization()方法；</p><p>此时，bean已经准备就绪，可以被应用程序使用了，它们将一直驻留在应用上下文中，直到该应用上下文被销毁；</p><p>如果bean实现了DisposableBean接口，Spring将调用它的destroy()接口方法。同样，如果bean使用destroy-method声明了销毁方法，该方法也会被调用。</p><p>现在你已经了解了如何创建和加载一个Spring容器。但是一个空的容器并没有太大的价值，在你把东西放进去之前，它里面什么都没有。为了从Spring的DI(依赖注入)中受益，我们必须将应用对象装配进Spring容器中。</p><ol start="11"><li>哪些是重要的bean生命周期方法？ 你能重载它们吗？<br>有两个重要的bean 生命周期方法，第一个是 setup ， 它是在容器加载bean的时候被调用。第二个方法是 teardown 它是在容器卸载类的时候被调用。</li></ol><p>bean 标签有两个重要的属性（init-method和destroy-method）。用它们你可以自己定制初始化和注销方法。它们也有相应的注解（@PostConstruct和@PreDestroy）。</p><ol start="12"><li><p>什么是Spring的内部 bean ？什么是Spring inner beans？<br>在Spring框架中，当一个bean仅被用作另一个bean的属性时，它能被声明为一个内部bean。内部bean可以用setter注入“属性”和构造方法注入“构造参数”的方式来实现，内部bean通常是匿名的，它们的Scope一般是prototype。</p></li><li><p>在 Spring中如何注入一个java集合？<br>Spring提供以下几种集合的配置元素：</p></li></ol><p>类型用于注入一列值，允许有相同的值。</p><p>类型用于注入一组值，不允许有相同的值。</p><p>类型用于注入一组键值对，键和值都可以为任意类型。</p><p>类型用于注入一组键值对，键和值都只能为String类型。</p><ol start="14"><li><p>什么是bean装配？<br>装配，或bean 装配是指在Spring 容器中把bean组装到一起，前提是容器需要知道bean的依赖关系，如何通过依赖注入来把它们装配到一起。</p></li><li><p>什么是bean的自动装配？<br>在Spring框架中，在配置文件中设定bean的依赖关系是一个很好的机制，Spring 容器能够自动装配相互合作的bean，这意味着容器不需要和配置，能通过Bean工厂自动处理bean之间的协作。这意味着 Spring可以通过向Bean Factory中注入的方式自动搞定bean之间的依赖关系。自动装配可以设置在每个bean上，也可以设定在特定的bean上。</p></li><li><p>解释不同方式的自动装配，spring 自动装配 bean 有哪些方式？<br>在spring中，对象无需自己查找或创建与其关联的其他对象，由容器负责把需要相互协作的对象引用赋予各个对象，使用autowire来配置自动装载模式。</p></li></ol><p>在Spring框架xml配置中共有5种自动装配：</p><ul><li><p>no：默认的方式是不进行自动装配的，通过手工设置ref属性来进行装配 bean。</p></li><li><p>byName：通过bean的名称进行自动装配，如果一个bean的 property 与另一bean 的name 相同，就进行自动装配。</p></li><li><p>byType：通过参数的数据类型进行自动装配。</p></li><li><p>constructor：利用构造函数进行装配，并且构造函数的参数通过byType进行装配。</p></li><li><p>autodetect：自动探测，如果有构造方法，通过 construct的方式自动装配，否则使用 byType的方式自动装配。</p></li></ul><ol start="17"><li>使用@Autowired注解自动装配的过程是怎样的？<br>使用@Autowired注解来自动装配指定的bean。在使用@Autowired注解之前需要在Spring配置文件进行配置，&lt;context:annotation-config &#x2F;&gt;。</li></ol><p>在启动spring IoC时，容器自动装载了一个AutowiredAnnotationBeanPostProcessor后置处理器，当容器扫描到@Autowied、@Resource或@Inject时，就会在IoC容器自动查找需要的bean，并装配给该对象的属性。在使用@Autowired时，首先在容器中查询对应类型的bean：</p><p>如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据；<br>如果查询的结果不止一个，那么@Autowired会根据名称来查找；<br>如果上述查找的结果为空，那么会抛出异常。解决方法时，使用required&#x3D;false。<br>18. 自动装配有哪些局限性？<br>自动装配的局限性是：</p><p>重写：你仍需用 和 配置来定义依赖，意味着总要重写自动装配。</p><p>基本数据类型：你不能自动装配简单的属性，如基本数据类型，String字符串，和类。</p><p>模糊特性：自动装配不如显式装配精确，如果有可能，建议使用显式装配。</p><ol start="19"><li>你可以在Spring中注入一个null 和一个空字符串吗？<br>可以。</li></ol><p>四、Spring注解</p><ol><li>什么是基于Java的Spring注解配置? 给一些注解的例子<br>基于Java的配置，允许你在少量的Java注解的帮助下，进行你的大部分Spring配置而非通过XML文件。</li></ol><p>以@Configuration 注解为例，它用来标记类可以当做一个bean的定义，被Spring IOC容器使用。</p><p>另一个例子是@Bean注解，它表示此方法将要返回一个对象，作为一个bean注册进Spring应用上下文。</p><p>@Configuration<br>public class StudentConfig {<br>    @Bean<br>    public StudentBean myStudent() {<br>        return new StudentBean();<br>    }<br>}<br>2. 怎样开启注解装配？<br>注解装配在默认情况下是不开启的，为了使用注解装配，我们必须在Spring配置文件中配置 <a href="context:annotation-config/">context:annotation-config/</a>元素。</p><ol start="3"><li>@Component, @Controller, @Repository, @Service 有何区别？<br>@Component：这将 java 类标记为 bean。它是任何 Spring 管理组件的通用构造型。spring 的组件扫描机制现在可以将其拾取并将其拉入应用程序环境中。</li></ol><p>@Controller：这将一个类标记为 Spring Web MVC 控制器。标有它的 Bean 会自动导入到 IoC 容器中。</p><p>@Service：此注解是组件注解的特化。它不会对 @Component 注解提供任何其他行为。您可以在服务层类中使用 @Service 而不是 @Component，因为它以更好的方式指定了意图。</p><p>@Repository：这个注解是具有类似用途和功能的 @Component 注解的特化。它为 DAO 提供了额外的好处。它将 DAO 导入 IoC 容器，并使未经检查的异常有资格转换为 Spring DataAccessException。</p><ol start="4"><li>@Required 注解有什么作用<br>这个注解表明bean的属性必须在配置的时候设置，通过一个bean定义的显式的属性值或通过自动装配，若@Required注解的bean属性未被设置，容器将抛出BeanInitializationException。示例：</li></ol><p>public class Employee {<br>    private String name;<br>    @Required<br>    public void setName(String name){<br>        this.name&#x3D;name;<br>    }<br>    public string getName(){<br>        return name;<br>    }<br>}<br>5. @Autowired 注解有什么作用<br>@Autowired默认是按照类型装配注入的，默认情况下它要求依赖对象必须存在（可以设置它required属性为false）。@Autowired 注解提供了更细粒度的控制，包括在何处以及如何完成自动装配。它的用法和@Required一样，修饰setter方法、构造器、属性或者具有任意名称和&#x2F;或多个参数的PN方法。</p><p>public class Employee {<br>    private String name;<br>    @Autowired<br>    public void setName(String name) {<br>        this.name&#x3D;name;<br>    }<br>    public string getName(){<br>        return name;<br>    }<br>}<br>6. @Autowired和@Resource之间的区别<br>@Autowired可用于：构造函数、成员变量、Setter方法</p><p>@Autowired和@Resource之间的区别</p><p>@Autowired默认是按照类型装配注入的，默认情况下它要求依赖对象必须存在（可以设置它required属性为false）。<br>@Resource默认是按照名称来装配注入的，只有当找不到与名称匹配的bean才会按照类型来装配注入。<br>7. @Qualifier 注解有什么作用<br>当您创建多个相同类型的 bean 并希望仅使用属性装配其中一个 bean 时，您可以使用@Qualifier 注解和 @Autowired 通过指定应该装配哪个确切的 bean 来消除歧义。</p><ol start="8"><li>@RequestMapping 注解有什么用？<br>@RequestMapping 注解用于将特定 HTTP 请求方法映射到将处理相应请求的控制器中的特定类&#x2F;方法。此注释可应用于两个级别：</li></ol><p>类级别：映射请求的 URL<br>方法级别：映射 URL 以及 HTTP 请求方法</p><p>五、Spring数据访问</p><ol><li><p>解释对象&#x2F;关系映射集成模块<br>Spring 通过提供ORM模块，支持我们在直接JDBC之上使用一个对象&#x2F;关系映射映射(ORM)工具，Spring 支持集成主流的ORM框架，如Hiberate，JDO和 iBATIS，JPA，TopLink，JDO，OJB 。Spring的事务管理同样支持以上所有ORM框架及JDBC。</p></li><li><p>在Spring框架中如何更有效地使用JDBC？<br>使用Spring JDBC 框架，资源管理和错误处理的代价都会被减轻。所以开发者只需写statements 和 queries从数据存取数据，JDBC也可以在Spring框架提供的模板类的帮助下更有效地被使用，这个模板叫JdbcTemplate</p></li><li><p>解释JDBC抽象和DAO模块<br>通过使用JDBC抽象和DAO模块，保证数据库代码的简洁，并能避免数据库资源错误关闭导致的问题，它在各种不同的数据库的错误信息之上，提供了一个统一的异常访问层。它还利用Spring的AOP 模块给Spring应用中的对象提供事务管理服务。</p></li><li><p>spring DAO 有什么用？<br>Spring DAO（数据访问对象） 使得 JDBC，Hibernate 或 JDO 这样的数据访问技术更容易以一种统一的方式工作。这使得用户容易在持久性技术之间切换。它还允许您在编写代码时，无需考虑捕获每种技术不同的异常。</p></li><li><p>spring JDBC API 中存在哪些类？<br>JdbcTemplate<br>SimpleJdbcTemplate<br>NamedParameterJdbcTemplate<br>SimpleJdbcInsert<br>SimpleJdbcCall</p></li><li><p>JdbcTemplate是什么<br>JdbcTemplate 类提供了很多便利的方法解决诸如把数据库数据转变成基本数据类型或对象，执行写好的或可调用的数据库操作语句，提供自定义的数据错误处理。</p></li><li><p>使用Spring通过什么方式访问Hibernate？使用 Spring 访问 Hibernate 的方法有哪些？<br>在Spring中有两种方式访问Hibernate：</p></li></ol><p>使用 Hibernate 模板和回调进行控制反转<br>扩展 HibernateDAOSupport 并应用 AOP 拦截器节点<br>8. 如何通过HibernateDaoSupport将Spring和Hibernate结合起来？<br>用Spring的 SessionFactory 调用 LocalSessionFactory。集成过程分三步：</p><p>配置the Hibernate SessionFactory<br>继承HibernateDaoSupport实现一个DAO<br>在AOP支持的事务中装配<br>9. Spring支持的事务管理类型， spring 事务实现方式有哪些？<br>Spring支持两种类型的事务管理：</p><p>编程式事务管理：这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。</p><p>声明式事务管理：这意味着你可以将业务代码和事务管理分离，你只需用注解和XML配置来管理事务。</p><ol start="10"><li><p>Spring事务的实现方式和实现原理<br>Spring事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，spring是无法提供事务功能的。真正的数据库层的事务提交和回滚是通过binlog或者redo log实现的。</p></li><li><p>说一下Spring的事务传播行为<br>spring事务的传播行为说的是，当多个事务同时存在的时候，spring如何处理这些事务的行为。</p></li></ol><p>① PROPAGATION_REQUIRED：如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，该设置是最常用的设置。</p><p>② PROPAGATION_SUPPORTS：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。</p><p>③ PROPAGATION_MANDATORY：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常。</p><p>④ PROPAGATION_REQUIRES_NEW：创建新事务，无论当前存不存在事务，都创建新事务。</p><p>⑤ PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</p><p>⑥ PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。</p><p>⑦ PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则按REQUIRED属性执行。</p><ol start="12"><li>说一下 spring 的事务隔离？<br>spring 有五大隔离级别，默认值为 ISOLATION_DEFAULT（使用数据库的设置），其他四个隔离级别和数据库的隔离级别一致：</li></ol><p>ISOLATION_DEFAULT：用底层数据库的设置隔离级别，数据库设置的是什么我就用什么；<br>ISOLATION_READ_UNCOMMITTED：未提交读，最低隔离级别、事务未提交前，就可被其他事务读取（会出现幻读、脏读、不可重复读）；<br>ISOLATION_READ_COMMITTED：提交读，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读），SQL server 的默认级别；<br>ISOLATION_REPEATABLE_READ：可重复读，保证多次读取同一个数据时，其值都和事务开始时候的内容是一致，禁止读取到别的事务未提交的数据（会造成幻读），MySQL 的默认级别；<br>ISOLATION_SERIALIZABLE：序列化，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读。<br>脏读 ：表示一个事务能够读取另一个事务中还未提交的数据。比如，某个事务尝试插入记录 A，此时该事务还未提交，然后另一个事务尝试读取到了记录 A。</p><p>不可重复读 ：是指在一个事务内，多次读同一数据。</p><p>幻读 ：指同一个事务内多次查询返回的结果集不一样。比如同一个事务 A 第一次查询时候有 n 条记录，但是第二次同等条件下查询却有 n+1 条记录，这就好像产生了幻觉。发生幻读的原因也是另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据，同一个记录的数据内容被修改了，所有数据行的记录就变多或者变少了。</p><ol start="13"><li>Spring框架的事务管理有哪些优点？<br>为不同的事务API 如 JTA，JDBC，Hibernate，JPA 和JDO，提供一个不变的编程模式。<br>为编程式事务管理提供了一套简单的API而不是一些复杂的事务API<br>支持声明式事务管理。<br>和Spring各种数据访问抽象层很好得集成。</li><li>你更倾向用那种事务管理类型？<br>大多数Spring框架的用户选择声明式事务管理，因为它对应用代码的影响最小，因此更符合一个无侵入的轻量级容器的思想。声明式事务管理要优于编程式事务管理，虽然比编程式事务管理（这种方式允许你通过代码控制事务）少了一点灵活性。唯一不足地方是，最细粒度只能作用到方法级别，无法做到像编程式事务那样可以作用到代码块级别。</li></ol><p>六、Spring面向切面编程(AOP)</p><ol><li>什么是AOP<br>OOP(Object-Oriented Programming)面向对象编程，允许开发者定义纵向的关系，但并适用于定义横向的关系，导致了大量代码的重复，而不利于各个模块的重用。</li></ol><p>AOP(Aspect-Oriented Programming)，一般称为面向切面编程，作为面向对象的一种补充，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”（Aspect），减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。可用于权限认证、日志、事务处理等。</p><ol start="2"><li>Spring AOP and AspectJ AOP 有什么区别？AOP 有哪些实现方式？<br>AOP实现的关键在于 代理模式，AOP代理主要分为静态代理和动态代理。静态代理的代表为AspectJ；动态代理则以Spring AOP为代表。</li></ol><p>（1）AspectJ是静态代理的增强，所谓静态代理，就是AOP框架会在编译阶段生成AOP代理类，因此也称为编译时增强，他会在编译阶段将AspectJ(切面)织入到Java字节码中，运行的时候就是增强之后的AOP对象。</p><p>（2）Spring AOP使用的动态代理，所谓的动态代理就是说AOP框架不会去修改字节码，而是每次运行时在内存中临时为方法生成一个AOP对象，这个AOP对象包含了目标对象的全部方法，并且在特定的切点做了增强处理，并回调原对象的方法。</p><ol start="3"><li>JDK动态代理和CGLIB动态代理的区别<br>Spring AOP中的动态代理主要有两种方式，JDK动态代理和CGLIB动态代理：</li></ol><p>JDK动态代理只提供接口的代理，不支持类的代理。核心InvocationHandler接口和Proxy类，InvocationHandler 通过invoke()方法反射来调用目标类中的代码，动态地将横切逻辑和业务编织在一起；接着，Proxy利用 InvocationHandler动态创建一个符合某一接口的的实例, 生成目标类的代理对象。<br>如果代理类没有实现 InvocationHandler 接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成指定类的一个子类对象，并覆盖其中特定方法并添加增强代码，从而实现AOP。CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。<br>静态代理与动态代理区别在于生成AOP代理对象的时机不同，相对来说AspectJ的静态代理方式具有更好的性能，但是AspectJ需要特定的编译器进行处理，而Spring AOP则无需特定的编译器处理。</p><p>InvocationHandler 的 invoke(Object proxy,Method method,Object[] args)：proxy是最终生成的代理实例; method 是被代理目标实例的某个具体方法; args 是被代理目标实例某个方法的具体入参, 在方法反射调用时使用。</p><ol start="4"><li>如何理解 Spring 中的代理？<br>将 Advice 应用于目标对象后创建的对象称为代理。在客户端对象的情况下，目标对象和代理对象是相同的。</li></ol><p>Advice + Target Object &#x3D; Proxy</p><ol start="5"><li>解释一下Spring AOP里面的几个名词<br>（1）切面（Aspect）：切面是通知和切点的结合。通知和切点共同定义了切面的全部内容。 在Spring AOP中，切面可以使用通用类（基于模式的风格） 或者在普通类中以 @AspectJ 注解来实现。</li></ol><p>（2）连接点（Join point）：指方法，在Spring AOP中，一个连接点 总是 代表一个方法的执行。 应用可能有数以千计的时机应用通知。这些时机被称为连接点。连接点是在应用执行过程中能够插入切面的一个点。这个点可以是调用方法时、抛出异常时、甚至修改一个字段时。切面代码可以利用这些点插入到应用的正常流程之中，并添加新的行为。</p><p>（3）通知（Advice）：在AOP术语中，切面的工作被称为通知。</p><p>（4）切入点（Pointcut）：切点的定义会匹配通知所要织入的一个或多个连接点。我们通常使用明确的类和方法名称，或是利用正则表达式定义所匹配的类和方法名称来指定这些切点。</p><p>（5）引入（Introduction）：引入允许我们向现有类添加新方法或属性。</p><p>（6）目标对象（Target Object）： 被一个或者多个切面（aspect）所通知（advise）的对象。它通常是一个代理对象。也有人把它叫做 被通知（adviced） 对象。 既然Spring AOP是通过运行时代理实现的，这个对象永远是一个 被代理（proxied） 对象。</p><p>（7）织入（Weaving）：织入是把切面应用到目标对象并创建新的代理对象的过程。在目标对象的生命周期里有多少个点可以进行织入：</p><p>编译期：切面在目标类编译时被织入。AspectJ的织入编译器是以这种方式织入切面的。<br>类加载期：切面在目标类加载到JVM时被织入。需要特殊的类加载器，它可以在目标类被引入应用之前增强该目标类的字节码。AspectJ5的加载时织入就支持以这种方式织入切面。<br>运行期：切面在应用运行的某个时刻被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态地创建一个代理对象。SpringAOP就是以这种方式织入切面。<br>6. Spring在运行时通知对象<br>通过在代理类中包裹切面，Spring在运行期把切面织入到Spring管理的bean中。代理封装了目标类，并拦截被通知方法的调用，再把调用转发给真正的目标bean。当代理拦截到方法调用时，在调用目标bean方法之前，会执行切面逻辑。</p><p>直到应用需要被代理的bean时，Spring才创建代理对象。如果使用的是ApplicationContext的话，在ApplicationContext从BeanFactory中加载所有bean的时候，Spring才会创建被代理的对象。因为Spring运行时才创建代理对象，所以我们不需要特殊的编译器来织入SpringAOP的切面。</p><ol start="7"><li><p>Spring只支持方法级别的连接点<br>因为Spring基于动态代理，所以Spring只支持方法连接点。Spring缺少对字段连接点的支持，而且它不支持构造器连接点。方法之外的连接点拦截功能，我们可以利用Aspect来补充。</p></li><li><p>在Spring AOP 中，关注点和横切关注的区别是什么？在 spring aop 中 concern 和 cross-cutting concern 的不同之处<br>关注点（concern）是应用中一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个功能。</p></li></ol><p>横切关注点（cross-cutting concern）是一个关注点，此关注点是整个应用都会使用的功能，并影响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横切关注点。</p><ol start="9"><li>Spring通知有哪些类型？<br>在AOP术语中，切面的工作被称为通知，实际上是程序执行时要通过SpringAOP框架触发的代码段。</li></ol><p>Spring切面可以应用5种类型的通知：</p><p>前置通知（Before）：在目标方法被调用之前调用通知功能；<br>后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么；<br>返回通知（After-returning ）：在目标方法成功执行之后调用通知；<br>异常通知（After-throwing）：在目标方法抛出异常后调用通知；<br>环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。<br>同一个aspect，不同advice的执行顺序：</p><p>①没有异常情况下的执行顺序：</p><p>around before advice<br>before advice<br>target method 执行<br>around after advice<br>after advice<br>afterReturning<br>②有异常情况下的执行顺序：</p><p>around before advice<br>before advice<br>target method 执行<br>around after advice<br>after advice<br>afterThrowing:异常发生<br>java.lang.RuntimeException: 异常发生<br>10. 什么是切面 Aspect？<br>aspect 由 pointcount 和 advice 组成，切面是通知和切点的结合。 它既包含了横切逻辑的定义, 也包括了连接点的定义. Spring AOP 就是负责实施切面的框架, 它将切面所定义的横切逻辑编织到切面所指定的连接点中.</p><p>AOP 的工作重心在于如何将增强编织目标对象的连接点上, 这里包含两个工作:</p><p>如何通过 pointcut 和 advice 定位到特定的 joinpoint 上<br>如何在 advice 中编写切面代码.<br>可以简单地认为, 使用 @Aspect 注解的类就是切面。</p><ol start="11"><li><p>解释基于XML Schema方式的切面实现<br>在这种情况下，切面由常规类以及基于XML的配置实现。</p></li><li><p>解释基于注解的切面实现<br>在这种情况下(基于@AspectJ的实现)，涉及到的切面声明的风格与带有java5标注的普通java类一致。</p></li><li><p>有几种不同类型的自动代理？<br>BeanNameAutoProxyCreator<br>DefaultAdvisorAutoProxyCreator<br>Metadata autoproxying<br>这就是我分享给大家的77道Spring面试题以及参考答案（2021年最新版）<br>————————————————<br>版权声明：本文为CSDN博主「Java程序员-张凯」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41701956/article/details/116354268">https://blog.csdn.net/qq_41701956/article/details/116354268</a></p></li></ol><h1 id="Spring-Boot-框架"><a href="#Spring-Boot-框架" class="headerlink" title="Spring Boot 框架"></a>Spring Boot 框架</h1><h3 id="什么是-Spring-Boot？"><a href="#什么是-Spring-Boot？" class="headerlink" title="什么是 Spring Boot？"></a>什么是 Spring Boot？</h3><ul><li>Spring Boot 是 Spring 开源组织下的子项目，是 Spring 组件一站式解决方案，主要是简化了使用 Spring 的难度，简省了繁重的配置，提供了各种启动器，使开发者能快速上手。</li></ul><h3 id="为什么要用-SpringBoot"><a href="#为什么要用-SpringBoot" class="headerlink" title="为什么要用 SpringBoot"></a>为什么要用 SpringBoot</h3><ul><li>快速开发，快速整合，配置简化、内嵌服务容器</li></ul><h3 id="SpringBoot-与-SpringCloud-区别"><a href="#SpringBoot-与-SpringCloud-区别" class="headerlink" title="SpringBoot 与 SpringCloud 区别"></a>SpringBoot 与 SpringCloud 区别</h3><ul><li>SpringBoot 是快速开发的 Spring 框架，SpringCloud 是完整的微服务框架，SpringCloud 依赖于 SpringBoot。</li></ul><h3 id="Spring-Boot-有哪些优点？"><a href="#Spring-Boot-有哪些优点？" class="headerlink" title="Spring Boot 有哪些优点？"></a>Spring Boot 有哪些优点？</h3><ul><li>Spring Boot 主要有如下优点：<ol><li>容易上手，提升开发效率，为 Spring 开发提供一个更快、更简单的开发框架。</li><li>开箱即用，远离繁琐的配置。</li><li>提供了一系列大型项目通用的非业务性功能，例如：内嵌服务器、安全管理、运行数据监控、运行状况检查和外部化配置等。</li><li>SpringBoot总结就是使编码变简单、配置变简单、部署变简单、监控变简单等等</li></ol></li></ul><h3 id="Spring-Boot-的核心注解是哪个？它主要由哪几个注解组成的？"><a href="#Spring-Boot-的核心注解是哪个？它主要由哪几个注解组成的？" class="headerlink" title="Spring Boot 的核心注解是哪个？它主要由哪几个注解组成的？"></a>Spring Boot 的核心注解是哪个？它主要由哪几个注解组成的？</h3><ul><li>启动类上面的注解是 @SpringBootApplication，它也是 Spring Boot 的核心注解，主要组合包含了以下 3 个注解：<ul><li>@SpringBootConfiguration：组合了 @Configuration 注解，实现配置文件的功能。</li><li>@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项， 例如：<code>Java 如关闭数据源自动配置功能： @SpringBootApplication(exclude = &#123; DataSourceAutoConfiguration.class &#125;)。</code></li><li>@ComponentScan：Spring 组件扫描。</li></ul></li></ul><h3 id="Spring-Boot-支持哪些日志框架？推荐和默认的日志框架是哪个？"><a href="#Spring-Boot-支持哪些日志框架？推荐和默认的日志框架是哪个？" class="headerlink" title="Spring Boot 支持哪些日志框架？推荐和默认的日志框架是哪个？"></a>Spring Boot 支持哪些日志框架？推荐和默认的日志框架是哪个？</h3><ul><li>Spring Boot 支持 Java Util Logging，Log4j2，Lockback 作为日志框架，如果你使用 Starters 启动器，Spring Boot 将使用 Logback 作为默认日志框架，但是不管是那种日志框架他都支持将配置文件输出到控制台或者文件中。</li></ul><h3 id="SpringBoot-Starter-的工作原理"><a href="#SpringBoot-Starter-的工作原理" class="headerlink" title="SpringBoot Starter 的工作原理"></a>SpringBoot Starter 的工作原理</h3><ul><li><code>我个人理解SpringBoot就是由各种Starter组合起来的，我们自己也可以开发Starter</code></li><li>在 SprinBoot 启动时由 @SpringBootApplication 注解会自动去 maven 中读取每个 starter 中的 spring.factories 文件，该文件里配置了所有需要被创建 spring容器中的 bean，并且进行自动配置把 bean 注入 SpringContext 中 &#x2F;&#x2F;（SpringContext是Spring的配置文件）</li></ul><h3 id="Spring-Boot-2-X-有什么新特性？与-1-X-有什么区别？"><a href="#Spring-Boot-2-X-有什么新特性？与-1-X-有什么区别？" class="headerlink" title="Spring Boot 2.X 有什么新特性？与 1.X 有什么区别？"></a>Spring Boot 2.X 有什么新特性？与 1.X 有什么区别？</h3><ul><li>配置变更</li><li>JDK 版本升级</li><li>第三方类库升级</li><li>响应式 Spring 编程支持</li><li>HTTP&#x2F;2 支持</li><li>配置属性绑定</li><li>更多改进与加强</li></ul><h3 id="SpringBoot-支持什么前端模板，"><a href="#SpringBoot-支持什么前端模板，" class="headerlink" title="SpringBoot 支持什么前端模板，"></a>SpringBoot 支持什么前端模板，</h3><ul><li>thymeleaf，freemarker，jsp，官方不推荐JSP会有限制</li></ul><h3 id="SpringBoot-的缺点"><a href="#SpringBoot-的缺点" class="headerlink" title="SpringBoot 的缺点"></a>SpringBoot 的缺点</h3><ul><li>我觉得是为难人，SpringBoot在目前我觉得没有什么缺点，非要找一个出来我觉得就是<ul><li>由于不用自己做的配置，报错时很难定位。</li></ul></li></ul><h3 id="运行-Spring-Boot-有哪几种方式？"><a href="#运行-Spring-Boot-有哪几种方式？" class="headerlink" title="运行 Spring Boot 有哪几种方式？"></a>运行 Spring Boot 有哪几种方式？</h3><ol><li>打包用命令或者放到容器中运行</li><li>用 Maven&#x2F; Gradle 插件运行</li><li>直接执行 main 方法运行</li></ol><h3 id="Spring-Boot-需要独立的容器运行吗？"><a href="#Spring-Boot-需要独立的容器运行吗？" class="headerlink" title="Spring Boot 需要独立的容器运行吗？"></a>Spring Boot 需要独立的容器运行吗？</h3><ul><li>可以不需要，内置了 Tomcat&#x2F; Jetty 等容器。</li></ul><h3 id="开启-Spring-Boot-特性有哪几种方式？"><a href="#开启-Spring-Boot-特性有哪几种方式？" class="headerlink" title="开启 Spring Boot 特性有哪几种方式？"></a>开启 Spring Boot 特性有哪几种方式？</h3><ol><li>继承spring-boot-starter-parent项目</li><li>导入spring-boot-dependencies项目依赖</li></ol><h3 id="SpringBoot-实现热部署有哪几种方式？"><a href="#SpringBoot-实现热部署有哪几种方式？" class="headerlink" title="SpringBoot 实现热部署有哪几种方式？"></a>SpringBoot 实现热部署有哪几种方式？</h3><ul><li>热部署就是可以不用重新运行SpringBoot项目可以实现操作后台代码自动更新到以运行的项目中</li><li>主要有两种方式：<ul><li>Spring Loaded</li><li>Spring-boot-devtools</li></ul></li></ul><h3 id="SpringBoot-事物的使用"><a href="#SpringBoot-事物的使用" class="headerlink" title="SpringBoot 事物的使用"></a>SpringBoot 事物的使用</h3><ul><li>SpringBoot的事物很简单，首先使用注解EnableTransactionManagement开启事物之后，然后在Service方法上添加注解Transactional便可。</li></ul><h3 id="Async-异步调用方法"><a href="#Async-异步调用方法" class="headerlink" title="Async 异步调用方法"></a>Async 异步调用方法</h3><ul><li>在SpringBoot中使用异步调用是很简单的，只需要在方法上使用@Async注解即可实现方法的异步调用。 注意：需要在启动类加入@EnableAsync使异步调用@Async注解生效。</li></ul><h3 id="如何在-Spring-Boot-启动的时候运行一些特定的代码？"><a href="#如何在-Spring-Boot-启动的时候运行一些特定的代码？" class="headerlink" title="如何在 Spring Boot 启动的时候运行一些特定的代码？"></a>如何在 Spring Boot 启动的时候运行一些特定的代码？</h3><ul><li>可以实现接口 ApplicationRunner 或者 CommandLineRunner，这两个接口实现方式一样，它们都只提供了一个 run 方法</li></ul><h3 id="Spring-Boot-有哪几种读取配置的方式？"><a href="#Spring-Boot-有哪几种读取配置的方式？" class="headerlink" title="Spring Boot 有哪几种读取配置的方式？"></a>Spring Boot 有哪几种读取配置的方式？</h3><ul><li>Spring Boot 可以通过 @PropertySource,@Value,@Environment, @ConfigurationPropertie注解来绑定变量</li></ul><h3 id="什么是-JavaConfig？"><a href="#什么是-JavaConfig？" class="headerlink" title="什么是  JavaConfig？"></a>什么是  JavaConfig？</h3><ul><li>Spring JavaConfig 是 Spring 社区的产品，Spring 3.0 引入了他，它提供了配置 Spring IOC 容器的纯Java 方法。因此它有助于避免使用 XML 配置。使用 JavaConfig 的优点在于：<ul><li>面向对象的配置。由于配置被定义为 JavaConfig 中的类，因此用户可以充分利用 Java 中的面向对象功能。一个配置类可以继承另一个，重写它的@Bean 方法等。</li><li>减少或消除 XML 配置。基于依赖注入原则的外化配置的好处已被证明。但是，许多开发人员不希望在 XML 和 Java 之间来回切换。JavaConfig 为开发人员提供了一种纯 Java 方法来配置与 XML 配置概念相似的 Spring 容器。从技术角度来讲，只使用 JavaConfig 配置类来配置容器是可行的，但实际上很多人认为将JavaConfig 与 XML 混合匹配是理想的。</li><li>类型安全和重构友好。JavaConfig 提供了一种类型安全的方法来配置 Spring容器。由于 Java 5.0 对泛型的支持，现在可以按类型而不是按名称检索 bean，不需要任何强制转换或基于字符串的查找。</li></ul></li><li>常用的Java config：<ul><li>@Configuration：在类上打上写下此注解，表示这个类是配置类</li><li>@ComponentScan：在配置类上添加 @ComponentScan 注解。该注解默认会扫描该类所在的包下所有的配置类，相当于之前的 &lt;context:component-scan &gt;。</li><li>@Bean：bean的注入：相当于以前的&lt; bean id&#x3D;”objectMapper” class&#x3D;”org.codehaus.jackson.map.ObjectMapper” &#x2F;&gt;</li><li>@EnableWebMvc：相当于xml的&lt;mvc:annotation-driven &gt;</li><li>@ImportResource： 相当于xml的 &lt; import resource&#x3D;”applicationContext-cache.xml”&gt;</li></ul></li></ul><h3 id="SpringBoot-的自动配置原理是什么"><a href="#SpringBoot-的自动配置原理是什么" class="headerlink" title="SpringBoot 的自动配置原理是什么"></a>SpringBoot 的自动配置原理是什么</h3><ul><li>主要是Spring Boot的启动类上的核心注解 SpringBootApplication 注解主配置类，有了这个主配置类启动时就会为SpringBoot开启一个@EnableAutoConfiguration注解自动配置功能。</li><li>有了这个EnableAutoConfiguration的话就会：<ol><li>从配置文件META_INF&#x2F;spring.factories加载可能用到的自动配置类</li><li>去重，并将exclude和excludeName属性携带的类排除</li><li>过滤，将满足条件（@Conditional）的自动配置类返回</li></ol></li></ul><h3 id="你如何理解-Spring-Boot-配置加载顺序？"><a href="#你如何理解-Spring-Boot-配置加载顺序？" class="headerlink" title="你如何理解 Spring Boot 配置加载顺序？"></a>你如何理解 Spring Boot 配置加载顺序？</h3><ul><li>在 Spring Boot 里面，可以使用以下几种方式来加载配置。<ul><li>1.properties文件；</li><li>2.YAML文件；</li><li>3.系统环境变量；</li><li>4.命令行参数；</li><li>等等……</li></ul></li></ul><h3 id="什么是-YAML？"><a href="#什么是-YAML？" class="headerlink" title="什么是 YAML？"></a>什么是 YAML？</h3><ul><li>YAML 是一种人类可读的数据序列化语言。它通常用于配置文件。与属性文件相比，如果我们想要在配置文件中添加复杂的属性，YAML 文件就更加结构化，而且更少混淆。可以看出 YAML 具有分层配置数据。</li></ul><h3 id="YAML-配置的优势在哪里"><a href="#YAML-配置的优势在哪里" class="headerlink" title="YAML 配置的优势在哪里 ?"></a>YAML 配置的优势在哪里 ?</h3><ul><li>YAML 现在可以算是非常流行的一种配置文件格式了，无论是前端还是后端，都可以见到 YAML 配置。那么 YAML 配置和传统的 properties 配置相比到底有哪些优势呢？<ul><li>配置有序，在一些特殊的场景下，配置有序很关键</li><li>简洁明了，他还支持数组，数组中的元素可以是基本数据类型也可以是对象</li><li>相比 properties 配置文件，YAML 还有一个缺点，就是不支持 @PropertySource 注解导入自定义的 YAML 配置。</li></ul></li></ul><h3 id="Spring-Boot-是否可以使用-XML-配置"><a href="#Spring-Boot-是否可以使用-XML-配置" class="headerlink" title="Spring Boot 是否可以使用 XML 配置 ?"></a>Spring Boot 是否可以使用 XML 配置 ?</h3><ul><li>Spring Boot 推荐使用 Java 配置而非 XML 配置，但是 Spring Boot 中也可以使用 XML 配置，通过 @ImportResource 注解可以引入一个 XML 配置。</li></ul><h3 id="spring-boot-核心配置文件是什么？bootstrap-properties-和-application-properties-有何区别"><a href="#spring-boot-核心配置文件是什么？bootstrap-properties-和-application-properties-有何区别" class="headerlink" title="spring boot 核心配置文件是什么？bootstrap.properties 和 application.properties 有何区别 ?"></a>spring boot 核心配置文件是什么？bootstrap.properties 和 application.properties 有何区别 ?</h3><ul><li>单纯做 Spring Boot 开发，可能不太容易遇到 bootstrap.properties 配置文件，但是在结合 Spring Cloud 时，这个配置就会经常遇到了，特别是在需要加载一些远程配置文件的时侯。</li><li>spring boot 核心的两个配置文件：<ul><li>bootstrap (. yml 或者 . properties)：boostrap 由父 ApplicationContext 加载的，比 applicaton 优先加载，配置在应用程序上下文的引导阶段生效。一般来说我们在 Spring Cloud 配置就会使用这个文件。且 boostrap 里面的属性不能被覆盖；</li><li>application (. yml 或者 . properties)： 由ApplicatonContext 加载，用于 spring boot 项目的自动化配置。</li></ul></li></ul><h3 id="什么是-Spring-Profiles？"><a href="#什么是-Spring-Profiles？" class="headerlink" title="什么是 Spring Profiles？"></a>什么是 Spring Profiles？</h3><ul><li>在项目的开发中，有些配置文件在开发、测试或者生产等不同环境中可能是不同的，例如数据库连接、redis 的配置等等。那我们如何在不同环境中自动实现配置的切换呢？Spring给我们提供了profiles机制给我们提供的就是来回切换配置文件的功能</li><li>Spring Profiles 允许用户根据配置文件（dev，test，prod 等）来注册 bean。因此，当应用程序在开发中运行时，只有某些 bean 可以加载，而在 PRODUCTION中，某些其他 bean 可以加载。假设我们的要求是 Swagger 文档仅适用于 QA 环境，并且禁用所有其他文档。这可以使用配置文件来完成。Spring Boot 使得使用配置文件非常简单。</li></ul><h3 id="SpringBoot-多数据源拆分的思路"><a href="#SpringBoot-多数据源拆分的思路" class="headerlink" title="SpringBoot 多数据源拆分的思路"></a>SpringBoot 多数据源拆分的思路</h3><ul><li>先在properties配置文件中配置两个数据源，创建分包mapper，使用@ConfigurationProperties读取properties中的配置，使用@MapperScan注册到对应的mapper包中</li></ul><h3 id="SpringBoot-多数据源事务如何管理"><a href="#SpringBoot-多数据源事务如何管理" class="headerlink" title="SpringBoot 多数据源事务如何管理"></a>SpringBoot 多数据源事务如何管理</h3><ul><li>第一种方式是在service层的@TransactionManager中使用transactionManager指定DataSourceConfig中配置的事务</li><li>第二种是使用jta-atomikos实现分布式事务管理</li></ul><h3 id="保护-Spring-Boot-应用有哪些方法？"><a href="#保护-Spring-Boot-应用有哪些方法？" class="headerlink" title="保护 Spring Boot 应用有哪些方法？"></a>保护 Spring Boot 应用有哪些方法？</h3><ul><li>在生产中使用HTTPS</li><li>使用Snyk检查你的依赖关系</li><li>升级到最新版本</li><li>启用CSRF保护</li><li>使用内容安全策略防止XSS攻击</li></ul><h3 id="如何实现-Spring-Boot-应用程序的安全性？"><a href="#如何实现-Spring-Boot-应用程序的安全性？" class="headerlink" title="如何实现 Spring Boot 应用程序的安全性？"></a>如何实现 Spring Boot 应用程序的安全性？</h3><ul><li>为了实现 Spring Boot 的安全性，我们使用 spring-boot-starter-security 依赖项，并且必须添加安全配置。它只需要很少的代码。配置类将必须扩展WebSecurityConfigurerAdapter 并覆盖其方法。</li></ul><h3 id="比较一下-Spring-Security-和-Shiro-各自的优缺点"><a href="#比较一下-Spring-Security-和-Shiro-各自的优缺点" class="headerlink" title="比较一下 Spring Security 和 Shiro 各自的优缺点 ?"></a>比较一下 Spring Security 和 Shiro 各自的优缺点 ?</h3><ul><li>由于 Spring Boot 官方提供了大量的非常方便的开箱即用的 Starter ，包括 Spring Security 的 Starter ，使得在 Spring Boot 中使用 Spring Security 变得更加容易，甚至只需要添加一个依赖就可以保护所有的接口，所以，如果是 Spring Boot 项目，一般选择 Spring Security 。当然这只是一个建议的组合，单纯从技术上来说，无论怎么组合，都是没有问题的。Shiro 和 Spring Security 相比，主要有如下一些特点：<ul><li>Spring Security 是一个重量级的安全管理框架；Shiro 则是一个轻量级的安全管理框架</li><li>Spring Security 概念复杂，配置繁琐；Shiro 概念简单、配置简单</li><li>Spring Security 功能强大；Shiro 功能简单</li></ul></li></ul><h3 id="Spring-Boot-中如何解决跨域问题"><a href="#Spring-Boot-中如何解决跨域问题" class="headerlink" title="Spring Boot 中如何解决跨域问题 ?"></a>Spring Boot 中如何解决跨域问题 ?</h3><ul><li>跨域可以在前端通过 JSONP 来解决，但是 JSONP 只可以发送 GET 请求，无法发送其他类型的请求，在 RESTful 风格的应用中，就显得非常鸡肋，因此我们推荐在后端通过 （CORS，Cross-origin resource sharing） 来解决跨域问题。这种解决方案并非 Spring Boot 特有的，在传统的 SSM 框架中，就可以通过 CORS 来解决跨域问题，只不过之前我们是在 XML 文件中配置 CORS ，现在可以通过实现WebMvcConfigurer接口然后重写addCorsMappings方法解决跨域问题。</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">@Configuration<br>public class CorsConfig implements WebMvcConfigurer &#123;<br><br>    @Override<br>    public void addCorsMappings(CorsRegistry registry) &#123;<br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .allowedOrigins(<span class="hljs-string">&quot;*&quot;</span>)<br>                .allowCredentials(true)<br>                .allowedMethods(<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-keyword">POST</span>&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-keyword">PUT</span>&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-keyword">DELETE</span>&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-keyword">OPTIONS</span>&quot;</span>)<br>                .maxAge(<span class="hljs-number">3600</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Spring-Boot-中的监视器是什么？"><a href="#Spring-Boot-中的监视器是什么？" class="headerlink" title="Spring Boot 中的监视器是什么？"></a>Spring Boot 中的监视器是什么？</h3><ul><li>Spring boot actuator 是 spring 启动框架中的重要功能之一。Spring boot 监视器可帮助您访问生产环境中正在运行的应用程序的当前状态。有几个指标必须在生产环境中进行检查和监控。即使一些外部应用程序可能正在使用这些服务来向相关人员触发警报消息。监视器模块公开了一组可直接作为 HTTP URL 访问的REST 端点来检查状态。</li></ul><h3 id="如何使用-Spring-Boot-实现全局异常处理？"><a href="#如何使用-Spring-Boot-实现全局异常处理？" class="headerlink" title="如何使用 Spring Boot 实现全局异常处理？"></a>如何使用 Spring Boot 实现全局异常处理？</h3><ul><li>Spring 提供了一种使用 ControllerAdvice 处理异常的非常有用的方法。 我们通过实现一个 ControlerAdvice 类，来处理控制器类抛出的所有异常。</li></ul><h3 id="我们如何监视所有-Spring-Boot-微服务？"><a href="#我们如何监视所有-Spring-Boot-微服务？" class="headerlink" title="我们如何监视所有 Spring Boot 微服务？"></a>我们如何监视所有 Spring Boot 微服务？</h3><ul><li>Spring Boot 提供监视器端点以监控各个微服务的度量。这些端点对于获取有关应用程序的信息（如它们是否已启动）以及它们的组件（如数据库等）是否正常运行很有帮助。但是，使用监视器的一个主要缺点或困难是，我们必须单独打开应用程序的知识点以了解其状态或健康状况。想象一下涉及 50 个应用程序的微服务，管理员将不得不击中所有 50 个应用程序的执行终端。为了帮助我们处理这种情况，我们将使用位于的开源项目。 它建立在 Spring Boot Actuator 之上，它提供了一个 Web UI，使我们能够可视化多个应用程序的度量。</li></ul><h3 id="SpringBoot-性能如何优化"><a href="#SpringBoot-性能如何优化" class="headerlink" title="SpringBoot 性能如何优化"></a>SpringBoot 性能如何优化</h3><ul><li>如果项目比较大，类比较多，不使用@SpringBootApplication，采用@Compoment指定扫包范围</li><li>在项目启动时设置JVM初始内存和最大内存相同</li><li>将springboot内置服务器由tomcat设置为undertow</li></ul><h3 id="如何重新加载-Spring-Boot-上的更改，而无需重新启动服务器？Spring-Boot项目如何热部署？"><a href="#如何重新加载-Spring-Boot-上的更改，而无需重新启动服务器？Spring-Boot项目如何热部署？" class="headerlink" title="如何重新加载 Spring Boot 上的更改，而无需重新启动服务器？Spring Boot项目如何热部署？"></a>如何重新加载 Spring Boot 上的更改，而无需重新启动服务器？Spring Boot项目如何热部署？</h3><ul><li>这可以使用 DEV 工具来实现。通过这种依赖关系，您可以节省任何更改，嵌入式tomcat 将重新启动。Spring Boot 有一个开发工具（DevTools）模块，它有助于提高开发人员的生产力。Java 开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器。开发人员可以重新加载 Spring Boot 上的更改，而无需重新启动服务器。这将消除每次手动部署更改的需要。Spring Boot 在发布它的第一个版本时没有这个功能。这是开发人员最需要的功能。DevTools 模块完全满足开发人员的需求。该模块将在生产环境中被禁用。它还提供 H2 数据库控制台以更好地测试应用程序。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>复制代码<br></code></pre></td></tr></table></figure><h3 id="SpringBoot微服务中如何实现-session-共享"><a href="#SpringBoot微服务中如何实现-session-共享" class="headerlink" title="SpringBoot微服务中如何实现 session 共享 ?"></a>SpringBoot微服务中如何实现 session 共享 ?</h3><ul><li>在微服务中，一个完整的项目被拆分成多个不相同的独立的服务，各个服务独立部署在不同的服务器上，各自的 session 被从物理空间上隔离开了，但是经常，我们需要在不同微服务之间共享 session ，常见的方案就是 Spring Session + Redis 来实现 session 共享。将所有微服务的 session 统一保存在 Redis 上，当各个微服务对 session 有相关的读写操作时，都去操作 Redis 上的 session 。这样就实现了 session 共享，Spring Session 基于 Spring 中的代理过滤器实现，使得 session 的同步操作对开发人员而言是透明的，非常简便。</li></ul><h3 id="您使用了哪些-starter-maven-依赖项？"><a href="#您使用了哪些-starter-maven-依赖项？" class="headerlink" title="您使用了哪些 starter maven 依赖项？"></a>您使用了哪些 starter maven 依赖项？</h3><ul><li>使用了下面的一些依赖项<ul><li>spring-boot-starter-web 嵌入tomcat和web开发需要servlet与jsp支持</li><li>spring-boot-starter-data-jpa 数据库支持</li><li>spring-boot-starter-data-redis redis数据库支持</li><li>spring-boot-starter-data-solr solr支持</li><li>mybatis-spring-boot-starter 第三方的mybatis集成starter</li><li>自定义的starter(如果自己开发过就可以说出来)</li></ul></li></ul><h3 id="Spring-Boot-中的-starter-到底是什么"><a href="#Spring-Boot-中的-starter-到底是什么" class="headerlink" title="Spring Boot 中的 starter 到底是什么 ?"></a>Spring Boot 中的 starter 到底是什么 ?</h3><ul><li>首先，这个 Starter 并非什么新的技术点，基本上还是基于 Spring 已有功能来实现的。首先它提供了一个自动化配置类，一般命名为 <code>XXXAutoConfiguration</code> ，在这个配置类中通过条件注解来决定一个配置是否生效（条件注解就是 Spring 中原本就有的），然后它还会提供一系列的默认配置，也允许开发者根据实际情况自定义相关配置，然后通过类型安全的属性(spring.factories)注入将这些配置属性注入进来，新注入的属性会代替掉默认属性。正因为如此，很多第三方框架，我们只需要引入依赖就可以直接使用了。当然，开发者也可以自定义 Starter</li></ul><h3 id="Spring-Boot-中如何实现定时任务"><a href="#Spring-Boot-中如何实现定时任务" class="headerlink" title="Spring Boot 中如何实现定时任务 ?"></a>Spring Boot 中如何实现定时任务 ?</h3><ul><li>在 Spring Boot 中使用定时任务主要有两种不同的方式，一个就是使用 Spring 中的 @Scheduled 注解，另一-个则是使用第三方框架 Quartz。</li><li>使用 Spring 中的 @Scheduled 的方式主要通过 @Scheduled 注解来实现。</li></ul><h3 id="spring-boot-starter-parent-有什么用"><a href="#spring-boot-starter-parent-有什么用" class="headerlink" title="spring-boot-starter-parent 有什么用 ?"></a>spring-boot-starter-parent 有什么用 ?</h3><ul><li>我们都知道，新创建一个 Spring Boot 项目，默认都是有 parent 的，这个 parent 就是 spring-boot-starter-parent ，spring-boot-starter-parent 主要有如下作用：<ol><li>定义了 Java 编译版本为 1.8 。</li><li>使用 UTF-8 格式编码。</li><li>继承自 spring-boot-dependencies，这个里边定义了依赖的版本，也正是因为继承了这个依赖，所以我们在写依赖时才不需要写版本号。</li><li>执行打包操作的配置。</li><li>自动化的资源过滤。</li><li>自动化的插件配置。</li><li>针对 application.properties 和 application.yml 的资源过滤，包括通过 profile 定义的不同环境的配置文件，例如 application-dev.properties 和 application-dev.yml。</li></ol></li><li>总结就是打包用的</li></ul><h3 id="SpringBoot如何实现打包"><a href="#SpringBoot如何实现打包" class="headerlink" title="SpringBoot如何实现打包"></a>SpringBoot如何实现打包</h3><ul><li>进入项目目录在控制台输入mvn clean package，clean是清空已存在的项目包，package进行打包</li><li>或者点击左边选项栏中的Mavne，先点击clean在点击package</li></ul><h3 id="Spring-Boot-打成的-jar-和普通的-jar-有什么区别"><a href="#Spring-Boot-打成的-jar-和普通的-jar-有什么区别" class="headerlink" title="Spring Boot 打成的 jar 和普通的 jar 有什么区别 ?"></a>Spring Boot 打成的 jar 和普通的 jar 有什么区别 ?</h3><ul><li>Spring Boot 项目最终打包成的 jar 是可执行 jar ，这种 jar 可以直接通过 <code>java -jar xxx.jar</code> 命令来运行，这种 jar 不可以作为普通的 jar 被其他项目依赖，即使依赖了也无法使用其中的类。</li><li>Spring Boot 的 jar 无法被其他项目依赖，主要还是他和普通 jar 的结构不同。普通的 jar 包，解压后直接就是包名，包里就是我们的代码，而 Spring Boot 打包成的可执行 jar 解压后，在 <code>\BOOT-INF\classes</code> 目录下才是我们的代码，因此无法被直接引用。如果非要引用，可以在 pom.xml 文件中增加配置，将 Spring Boot 项目打包成两个 jar ，一个可执行，一个可引用。</li></ul><p>作者：小杰要吃蛋<br>链接：<a href="https://juejin.cn/post/6844904125709156359">https://juejin.cn/post/6844904125709156359</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h1 id="Spring-Cloud框架"><a href="#Spring-Cloud框架" class="headerlink" title="Spring Cloud框架"></a>Spring Cloud框架</h1><h2 id="什么是微服务架构"><a href="#什么是微服务架构" class="headerlink" title="什么是微服务架构"></a>什么是微服务架构</h2><ul><li>微服务架构就是将单体的应用程序分成多个应用程序，这多个应用程序就成为微服务，每个微服务运行在自己的进程中，并使用轻量级的机制通信。这些服务围绕业务能力来划分，并通过自动化部署机制来独立部署。这些服务可以使用不同的编程语言，不同数据库，以保证最低限度的集中式管理。</li></ul><h2 id="为什么需要学习-SpringCloud"><a href="#为什么需要学习-SpringCloud" class="headerlink" title="为什么需要学习 SpringCloud"></a>为什么需要学习 SpringCloud</h2><ul><li>首先SpringCloud基于SpingBoot的优雅简洁，可还记得我们被无数xml支配的恐惧？可还记得SpringMVC，mybatis错综复杂的配置，有了spingboot，这些东西都不需要了，spingboot好处不再赘诉，springcloud就基于SpringBoot把市场上优秀的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理</li><li>什么叫做开箱即用？即使是当年的黄金搭档dubbo+zookeeper下载配置起来也是颇费心神的！而springcloud完成这些只需要一个jar的依赖就可以了！</li><li>springcloud大多数子模块都是直击痛点，像zuul解决的跨域，fegin解决的负载均衡，hystrix的熔断机制等等等等</li></ul><h2 id="SpringCloud-是什么"><a href="#SpringCloud-是什么" class="headerlink" title="SpringCloud 是什么"></a>SpringCloud 是什么</h2><ul><li>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、智能路由、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。</li><li>Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</li></ul><h2 id="SpringCloud-的优缺点"><a href="#SpringCloud-的优缺点" class="headerlink" title="SpringCloud 的优缺点"></a>SpringCloud 的优缺点</h2><p>优点：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs">1.耦合度比较低。不会影响其他模块的开发。<br>2.减轻团队的成本，可以并行开发，不用关注其他人怎么开发，先关注自己的开发。<br>3.配置比较简单，基本用注解就能实现，不用使用过多的配置文件。<br>4.微服务跨平台的，可以用任何一种语言开发。<br>5.每个微服务可以有自己的独立的数据库也有用公共的数据库。<br>6.直接写后端的代码，不用关注前端怎么开发，直接写自己的后端代码即可，然后暴露接口，通过组件进行服务通信。<br></code></pre></td></tr></table></figure><p>缺点：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">1.部署比较麻烦，给运维工程师带来一定的麻烦。<br>2.针对数据的管理比麻烦，因为微服务可以每个微服务使用一个数据库。<br>3.系统集成测试比较麻烦<br>4.性能的监控比较麻烦。【最好开发一个大屏监控系统】<br></code></pre></td></tr></table></figure><ul><li>总的来说优点大过于缺点，目前看来Spring Cloud是一套非常完善的分布式框架，目前很多企业开始用微服务、Spring Cloud的优势是显而易见的。因此对于想研究微服务架构的同学来说，学习Spring Cloud是一个不错的选择。</li></ul><h2 id="SpringBoot-和-SpringCloud-的区别？"><a href="#SpringBoot-和-SpringCloud-的区别？" class="headerlink" title="SpringBoot 和 SpringCloud 的区别？"></a>SpringBoot 和 SpringCloud 的区别？</h2><ul><li>SpringBoot 专注于快速方便的开发单个个体微服务。</li><li>SpringCloud 是关注全局的微服务协调整理治理框架，它将 SpringBoot 开发的一个个单体微服务整合并管理起来，</li><li>为各个微服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等集成服务</li><li>SpringBoot 可以离开 SpringCloud 独立使用开发项目， 但是 SpringCloud 离不开 SpringBoot  ，属于依赖的关系</li><li>SpringBoot 专注于快速、方便的开发单个微服务个体，SpringCloud 关注全局的服务治理框架。</li></ul><h2 id="Spring-Cloud和SpringBoot版本对应关系"><a href="#Spring-Cloud和SpringBoot版本对应关系" class="headerlink" title="Spring Cloud和SpringBoot版本对应关系"></a>Spring Cloud和SpringBoot版本对应关系</h2><blockquote><table><thead><tr><th>Spring Cloud Version</th><th>SpringBoot Version</th></tr></thead><tbody><tr><td>Hoxton</td><td>2.2.x</td></tr><tr><td>Greenwich</td><td>2.1.x</td></tr><tr><td>Finchley</td><td>2.0.x</td></tr><tr><td>Edgware</td><td>1.5.x</td></tr><tr><td>Dalston</td><td>1.5.x</td></tr></tbody></table></blockquote><h2 id="SpringCloud-由什么组成"><a href="#SpringCloud-由什么组成" class="headerlink" title="SpringCloud 由什么组成"></a>SpringCloud 由什么组成</h2><ul><li>其中最重要的有：<ul><li>Spring Cloud Eureka：服务注册与发现</li><li>Spring Cloud Zuul：服务网关</li><li>Spring Cloud Ribbon：客户端负载均衡</li><li>Spring Cloud Feign：声明性的Web服务客户端</li><li>Spring Cloud Hystrix：断路器</li><li>Spring Cloud Config：分布式统一配置管理</li><li>等20几个框架，开源一直在更新</li></ul></li></ul><h2 id="使用-Spring-Boot-开发分布式微服务时，我们面临什么问题"><a href="#使用-Spring-Boot-开发分布式微服务时，我们面临什么问题" class="headerlink" title="使用 Spring Boot 开发分布式微服务时，我们面临什么问题"></a>使用 Spring Boot 开发分布式微服务时，我们面临什么问题</h2><ul><li>（1）与分布式系统相关的复杂性-这种开销包括网络问题，延迟开销，带宽问题，安全问题。</li><li>（2）服务发现-服务发现工具管理群集中的流程和服务如何查找和互相交谈。它涉及一个服务目录，在该目录中注册服务，然后能够查找并连接到该目录中的服务。</li><li>（3）冗余-分布式系统中的冗余问题。</li><li>（4）负载平衡 –负载平衡改善跨多个计算资源的工作负荷，诸如计算机，计算机集群，网络链路，中央处理单元，或磁盘驱动器的分布。</li><li>（5）性能-问题 由于各种运营开销导致的性能问题。</li></ul><h2 id="SpringCloud-和-dubbo-区别"><a href="#SpringCloud-和-dubbo-区别" class="headerlink" title="SpringCloud 和 dubbo 区别?"></a>SpringCloud 和 dubbo 区别?</h2><ul><li>（1）服务调用方式：dubbo是RPC springcloud Rest Api</li><li>（2）注册中心：dubbo 是zookeeper springcloud是eureka，也可以是zookeeper</li><li>（3）服务网关，dubbo本身没有实现，只能通过其他第三方技术整合，springcloud有Zuul路由网关，作为路由服务器，进行消费者的请求分发,springcloud支持断路器，与git完美集成配置文件支持版本控制，事物总线实现配置文件的更新与服务自动装配等等一系列的微服务架构要素。</li></ul><h1 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h1><h2 id="服务注册和发现是什么意思？Spring-Cloud-如何实现？"><a href="#服务注册和发现是什么意思？Spring-Cloud-如何实现？" class="headerlink" title="服务注册和发现是什么意思？Spring Cloud 如何实现？"></a>服务注册和发现是什么意思？Spring Cloud 如何实现？</h2><ul><li>当我们开始一个项目时，我们通常在属性文件中进行所有的配置。随着越来越多的服务开发和部署，添加和修改这些属性变得更加复杂。有些服务可能会下降，而某些位置可能会发生变化。手动更改属性可能会产生问题。 Eureka 服务注册和发现可以在这种情况下提供帮助。由于所有服务都在 Eureka 服务器上注册并通过调用 Eureka 服务器完成查找，因此无需处理服务地点的任何更改和处理。</li></ul><h2 id="什么是-Eureka"><a href="#什么是-Eureka" class="headerlink" title="什么是 Eureka"></a>什么是 Eureka</h2><ul><li>Eureka 作为 SpringCloud 的服务注册功能服务器，他是服务注册中心，系统中的其他服务使用Eureka的客户端将其连接到Eureka Service中，并且保持心跳，这样工作人员可以通过 Eureka Service 来监控各个微服务是否运行正常。</li></ul><h2 id="Eureka-怎么实现高可用"><a href="#Eureka-怎么实现高可用" class="headerlink" title="Eureka 怎么实现高可用"></a>Eureka 怎么实现高可用</h2><ul><li>集群，注册多台 Eureka，然后把 SpringCloud 服务互相注册，客户端从 Eureka 获取信息时，按照 Eureka 的顺序来访问。</li></ul><h2 id="什么是-Eureka-的自我保护模式，"><a href="#什么是-Eureka-的自我保护模式，" class="headerlink" title="什么是 Eureka 的自我保护模式，"></a>什么是 Eureka 的自我保护模式，</h2><ul><li>默认情况下，如果 Eureka Service 在一定时间内没有接收到某个微服务的心跳，Eureka Service 会进入自我保护模式，在该模式下 Eureka Service 会保护服务注册表中的信息，不在删除注册表中的数据，当网络故障恢复后，Eureka Service 节点会自动退出自我保护模式</li></ul><h2 id="DiscoveryClient的作用"><a href="#DiscoveryClient的作用" class="headerlink" title="DiscoveryClient的作用"></a>DiscoveryClient的作用</h2><ul><li>可以从注册中心中根据服务别名获取注册的服务器信息。</li></ul><h2 id="Eureka和ZooKeeper都可以提供服务注册与发现的功能-请说说两个的区别"><a href="#Eureka和ZooKeeper都可以提供服务注册与发现的功能-请说说两个的区别" class="headerlink" title="Eureka和ZooKeeper都可以提供服务注册与发现的功能,请说说两个的区别"></a>Eureka和ZooKeeper都可以提供服务注册与发现的功能,请说说两个的区别</h2><ol><li><p>ZooKeeper中的节点服务挂了就要选举 在选举期间注册服务瘫痪,虽然服务最终会恢复,但是选举期间不可用的， 选举就是改微服务做了集群，必须有一台主其他的都是从</p></li><li><p>Eureka各个节点是平等关系,服务器挂了没关系，只要有一台Eureka就可以保证服务可用，数据都是最新的。 如果查询到的数据并不是最新的，就是因为Eureka的自我保护模式导致的</p></li><li><p>Eureka本质上是一个工程,而ZooKeeper只是一个进程</p></li><li><p>Eureka可以很好的应对因网络故障导致部分节点失去联系的情况,而不会像ZooKeeper 一样使得整个注册系统瘫痪</p></li><li><p>ZooKeeper保证的是CP，Eureka保证的是AP</p><p>CAP： C：一致性&gt;Consistency; 取舍：(强一致性、单调一致性、会话一致性、最终一致性、弱一致性) A：可用性&gt;Availability; P：分区容错性&gt;Partition tolerance;</p></li></ol><h1 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h1><h2 id="什么是网关"><a href="#什么是网关" class="headerlink" title="什么是网关?"></a>什么是网关?</h2><ul><li>网关相当于一个网络服务架构的入口，所有网络请求必须通过网关转发到具体的服务。</li></ul><h2 id="网关的作用是什么"><a href="#网关的作用是什么" class="headerlink" title="网关的作用是什么"></a>网关的作用是什么</h2><ul><li>统一管理微服务请求，权限控制、负载均衡、路由转发、监控、安全控制黑名单和白名单等</li></ul><h2 id="什么是Spring-Cloud-Zuul（服务网关）"><a href="#什么是Spring-Cloud-Zuul（服务网关）" class="headerlink" title="什么是Spring Cloud Zuul（服务网关）"></a>什么是Spring Cloud Zuul（服务网关）</h2><ul><li>Zuul是对SpringCloud提供的成熟对的路由方案，他会根据请求的路径不同，网关会定位到指定的微服务，并代理请求到不同的微服务接口，他对外隐蔽了微服务的真正接口地址。 三个重要概念：动态路由表，路由定位，反向代理：<ul><li>动态路由表：Zuul支持Eureka路由，手动配置路由，这俩种都支持自动更新</li><li>路由定位：根据请求路径，Zuul有自己的一套定位服务规则以及路由表达式匹配</li><li>反向代理：客户端请求到路由网关，网关受理之后，在对目标发送请求，拿到响应之后在 给客户端</li></ul></li><li>它可以和Eureka,Ribbon,Hystrix等组件配合使用，</li><li>Zuul的应用场景：<ul><li>对外暴露，权限校验，服务聚合，日志审计等</li></ul></li></ul><h2 id="网关与过滤器有什么区别"><a href="#网关与过滤器有什么区别" class="headerlink" title="网关与过滤器有什么区别"></a>网关与过滤器有什么区别</h2><ul><li>网关是对所有服务的请求进行分析过滤，过滤器是对单个服务而言。</li></ul><h2 id="常用网关框架有那些？"><a href="#常用网关框架有那些？" class="headerlink" title="常用网关框架有那些？"></a>常用网关框架有那些？</h2><ul><li>Nginx、Zuul、Gateway</li></ul><h2 id="Zuul与Nginx有什么区别？"><a href="#Zuul与Nginx有什么区别？" class="headerlink" title="Zuul与Nginx有什么区别？"></a>Zuul与Nginx有什么区别？</h2><ul><li>Zuul是java语言实现的，主要为java服务提供网关服务，尤其在微服务架构中可以更加灵活的对网关进行操作。Nginx是使用C语言实现，性能高于Zuul，但是实现自定义操作需要熟悉lua语言，对程序员要求较高，可以使用Nginx做Zuul集群。</li></ul><h2 id="既然Nginx可以实现网关？为什么还需要使用Zuul框架"><a href="#既然Nginx可以实现网关？为什么还需要使用Zuul框架" class="headerlink" title="既然Nginx可以实现网关？为什么还需要使用Zuul框架"></a>既然Nginx可以实现网关？为什么还需要使用Zuul框架</h2><ul><li>Zuul是SpringCloud集成的网关，使用Java语言编写，可以对SpringCloud架构提供更灵活的服务。</li></ul><h2 id="如何设计一套API接口"><a href="#如何设计一套API接口" class="headerlink" title="如何设计一套API接口"></a>如何设计一套API接口</h2><ul><li>考虑到API接口的分类可以将API接口分为开发API接口和内网API接口，内网API接口用于局域网，为内部服务器提供服务。开放API接口用于对外部合作单位提供接口调用，需要遵循Oauth2.0权限认证协议。同时还需要考虑安全性、幂等性等问题。</li></ul><h2 id="ZuulFilter常用有那些方法"><a href="#ZuulFilter常用有那些方法" class="headerlink" title="ZuulFilter常用有那些方法"></a>ZuulFilter常用有那些方法</h2><ul><li>Run()：过滤器的具体业务逻辑</li><li>shouldFilter()：判断过滤器是否有效</li><li>filterOrder()：过滤器执行顺序</li><li>filterType()：过滤器拦截位置</li></ul><h2 id="如何实现动态Zuul网关路由转发"><a href="#如何实现动态Zuul网关路由转发" class="headerlink" title="如何实现动态Zuul网关路由转发"></a>如何实现动态Zuul网关路由转发</h2><ul><li>通过path配置拦截请求，通过ServiceId到配置中心获取转发的服务列表，Zuul内部使用Ribbon实现本地负载均衡和转发。</li></ul><h2 id="Zuul网关如何搭建集群"><a href="#Zuul网关如何搭建集群" class="headerlink" title="Zuul网关如何搭建集群"></a>Zuul网关如何搭建集群</h2><ul><li>使用Nginx的upstream设置Zuul服务集群，通过location拦截请求并转发到upstream，默认使用轮询机制对Zuul集群发送请求。</li></ul><h1 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h1><h2 id="负载平衡的意义什么？"><a href="#负载平衡的意义什么？" class="headerlink" title="负载平衡的意义什么？"></a>负载平衡的意义什么？</h2><ul><li>简单来说： 先将集群，集群就是把一个的事情交给多个人去做，假如要做1000个产品给一个人做要10天，我叫10个人做就是一天，这就是集群，负载均衡的话就是用来控制集群，他把做的最多的人让他慢慢做休息会，把做的最少的人让他加量让他做多点。</li><li>在计算中，负载平衡可以改善跨计算机，计算机集群，网络链接，中央处理单元或磁盘驱动器等多种计算资源的工作负载分布。负载平衡旨在优化资源使用，最大化吞吐量，最小化响应时间并避免任何单一资源的过载。使用多个组件进行负载平衡而不是单个组件可能会通过冗余来提高可靠性和可用性。负载平衡通常涉及专用软件或硬件，例如多层交换机或域名系统服务器进程。</li></ul><h2 id="Ribbon是什么？"><a href="#Ribbon是什么？" class="headerlink" title="Ribbon是什么？"></a>Ribbon是什么？</h2><ul><li>Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法</li><li>Ribbon客户端组件提供一系列完善的配置项，如连接超时，重试等。简单的说，就是在配置文件中列出后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随即连接等）去连接这些机器。我们也很容易使用Ribbon实现自定义的负载均衡算法。（有点类似Nginx）</li></ul><h2 id="Nginx与Ribbon的区别"><a href="#Nginx与Ribbon的区别" class="headerlink" title="Nginx与Ribbon的区别"></a>Nginx与Ribbon的区别</h2><ul><li>Nginx是反向代理同时可以实现负载均衡，nginx拦截客户端请求采用负载均衡策略根据upstream配置进行转发，相当于请求通过nginx服务器进行转发。Ribbon是客户端负载均衡，从注册中心读取目标服务器信息，然后客户端采用轮询策略对服务直接访问，全程在客户端操作。</li></ul><h2 id="Ribbon底层实现原理"><a href="#Ribbon底层实现原理" class="headerlink" title="Ribbon底层实现原理"></a>Ribbon底层实现原理</h2><ul><li>Ribbon使用discoveryClient从注册中心读取目标服务信息，对同一接口请求进行计数，使用%取余算法获取目标服务集群索引，返回获取到的目标服务信息。</li></ul><h2 id="LoadBalanced注解的作用"><a href="#LoadBalanced注解的作用" class="headerlink" title="@LoadBalanced注解的作用"></a>@LoadBalanced注解的作用</h2><p>​     开启客户端负载均衡。</p><h1 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h1><h2 id="什么是断路器"><a href="#什么是断路器" class="headerlink" title="什么是断路器"></a>什么是断路器</h2><ul><li>当一个服务调用另一个服务由于网络原因或自身原因出现问题，调用者就会等待被调用者的响应 当更多的服务请求到这些资源导致更多的请求等待，发生连锁效应（雪崩效应）</li><li>断路器有三种状态<ul><li>打开状态：一段时间内 达到一定的次数无法调用 并且多次监测没有恢复的迹象 断路器完全打开 那么下次请求就不会请求到该服务</li><li>半开状态：短时间内 有恢复迹象 断路器会将部分请求发给该服务，正常调用时 断路器关闭</li><li>关闭状态：当服务一直处于正常状态 能正常调用</li></ul></li></ul><h2 id="什么是-Hystrix？"><a href="#什么是-Hystrix？" class="headerlink" title="什么是 Hystrix？"></a>什么是 Hystrix？</h2><ul><li>在分布式系统，我们一定会依赖各种服务，那么这些个服务一定会出现失败的情况，就会导致雪崩，Hystrix就是这样的一个工具，防雪崩利器，它具有服务降级，服务熔断，服务隔离，监控等一些防止雪崩的技术。</li><li>Hystrix有四种防雪崩方式:<ul><li>服务降级：接口调用失败就调用本地的方法返回一个空</li><li>服务熔断：接口调用失败就会进入调用接口提前定义好的一个熔断的方法，返回错误信息</li><li>服务隔离：隔离服务之间相互影响</li><li>服务监控：在服务发生调用时,会将每秒请求数、成功请求数等运行指标记录下来。</li></ul></li></ul><h2 id="谈谈服务雪崩效应"><a href="#谈谈服务雪崩效应" class="headerlink" title="谈谈服务雪崩效应"></a>谈谈服务雪崩效应</h2><ul><li>雪崩效应是在大型互联网项目中，当某个服务发生宕机时，调用这个服务的其他服务也会发生宕机，大型项目的微服务之间的调用是互通的，这样就会将服务的不可用逐步扩大到各个其他服务中，从而使整个项目的服务宕机崩溃.发生雪崩效应的原因有以下几点</li><li>单个服务的代码存在bug. 2请求访问量激增导致服务发生崩溃(如大型商城的枪红包，秒杀功能). 3.服务器的硬件故障也会导致部分服务不可用.</li></ul><h2 id="在微服务中，如何保护服务"><a href="#在微服务中，如何保护服务" class="headerlink" title="在微服务中，如何保护服务?"></a>在微服务中，如何保护服务?</h2><ul><li>一般使用使用Hystrix框架，实现服务隔离来避免出现服务的雪崩效应，从而达到保护服务的效果。当微服务中，高并发的数据库访问量导致服务线程阻塞，使单个服务宕机，服务的不可用会蔓延到其他服务，引起整体服务灾难性后果，使用服务降级能有效为不同的服务分配资源,一旦服务不可用则返回友好提示，不占用其他服务资源，从而避免单个服务崩溃引发整体服务的不可用.</li></ul><h2 id="服务雪崩效应产生的原因"><a href="#服务雪崩效应产生的原因" class="headerlink" title="服务雪崩效应产生的原因"></a>服务雪崩效应产生的原因</h2><ul><li>因为Tomcat默认情况下只有一个线程池来维护客户端发送的所有的请求，这时候某一接口在某一时刻被大量访问就会占据tomcat线程池中的所有线程，其他请求处于等待状态，无法连接到服务接口。</li></ul><h2 id="谈谈服务降级、熔断、服务隔离"><a href="#谈谈服务降级、熔断、服务隔离" class="headerlink" title="谈谈服务降级、熔断、服务隔离"></a>谈谈服务降级、熔断、服务隔离</h2><ul><li>服务降级：当客户端请求服务器端的时候，防止客户端一直等待，不会处理业务逻辑代码，直接返回一个友好的提示给客户端。</li><li>服务熔断是在服务降级的基础上更直接的一种保护方式，当在一个统计时间范围内的请求失败数量达到设定值（requestVolumeThreshold）或当前的请求错误率达到设定的错误率阈值（errorThresholdPercentage）时开启断路，之后的请求直接走fallback方法，在设定时间（sleepWindowInMilliseconds）后尝试恢复。</li><li>服务隔离就是Hystrix为隔离的服务开启一个独立的线程池，这样在高并发的情况下不会影响其他服务。服务隔离有线程池和信号量两种实现方式，一般使用线程池方式。</li></ul><h2 id="服务降级底层是如何实现的？"><a href="#服务降级底层是如何实现的？" class="headerlink" title="服务降级底层是如何实现的？"></a>服务降级底层是如何实现的？</h2><ul><li>Hystrix实现服务降级的功能是通过重写HystrixCommand中的getFallback()方法，当Hystrix的run方法或construct执行发生错误时转而执行getFallback()方法。</li></ul><h1 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h1><h2 id="什么是Feign？"><a href="#什么是Feign？" class="headerlink" title="什么是Feign？"></a>什么是Feign？</h2><ul><li>Feign 是一个声明web服务客户端，这使得编写web服务客户端更容易</li><li>他将我们需要调用的服务方法定义成抽象方法保存在本地就可以了，不需要自己构建Http请求了，直接调用接口就行了，不过要注意，调用方法要和本地抽象方法的签名完全一致。</li></ul><h2 id="SpringCloud有几种调用接口方式"><a href="#SpringCloud有几种调用接口方式" class="headerlink" title="SpringCloud有几种调用接口方式"></a>SpringCloud有几种调用接口方式</h2><ul><li>Feign</li><li>RestTemplate</li></ul><h2 id="Ribbon和Feign调用服务的区别"><a href="#Ribbon和Feign调用服务的区别" class="headerlink" title="Ribbon和Feign调用服务的区别"></a>Ribbon和Feign调用服务的区别</h2><ul><li>调用方式同：Ribbon需要我们自己构建Http请求，模拟Http请求然后通过RestTemplate发给其他服务，步骤相当繁琐</li><li>而Feign则是在Ribbon的基础上进行了一次改进，采用接口的形式，将我们需要调用的服务方法定义成抽象方法保存在本地就可以了，不需要自己构建Http请求了，直接调用接口就行了，不过要注意，调用方法要和本地抽象方法的签名完全一致。</li></ul><h1 id="Bus"><a href="#Bus" class="headerlink" title="Bus"></a>Bus</h1><h2 id="什么是-Spring-Cloud-Bus？"><a href="#什么是-Spring-Cloud-Bus？" class="headerlink" title="什么是 Spring Cloud Bus？"></a>什么是 Spring Cloud Bus？</h2><ul><li>Spring Cloud Bus就像一个分布式执行器，用于扩展的Spring Boot应用程序的配置文件，但也可以用作应用程序之间的通信通道。</li><li>Spring Cloud Bus 不能单独完成通信，需要配合MQ支持</li><li>Spring Cloud Bus一般是配合Spring Cloud Config做配置中心的</li><li>Springcloud config实时刷新也必须采用SpringCloud Bus消息总线</li></ul><h1 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h1><h2 id="什么是Spring-Cloud-Config"><a href="#什么是Spring-Cloud-Config" class="headerlink" title="什么是Spring Cloud Config?"></a>什么是Spring Cloud Config?</h2><ul><li>Spring Cloud Config为分布式系统中的外部配置提供服务器和客户端支持，可以方便的对微服务各个环境下的配置进行集中式管理。Spring Cloud Config分为Config Server和Config Client两部分。Config Server负责读取配置文件，并且暴露Http API接口，Config Client通过调用Config Server的接口来读取配置文件。</li></ul><h2 id="分布式配置中心有那些框架？"><a href="#分布式配置中心有那些框架？" class="headerlink" title="分布式配置中心有那些框架？"></a>分布式配置中心有那些框架？</h2><ul><li>Apollo、zookeeper、springcloud config。</li></ul><h2 id="分布式配置中心的作用？"><a href="#分布式配置中心的作用？" class="headerlink" title="分布式配置中心的作用？"></a>分布式配置中心的作用？</h2><ul><li>动态变更项目配置信息而不必重新部署项目。</li></ul><h2 id="SpringCloud-Config-可以实现实时刷新吗？"><a href="#SpringCloud-Config-可以实现实时刷新吗？" class="headerlink" title="SpringCloud Config 可以实现实时刷新吗？"></a>SpringCloud Config 可以实现实时刷新吗？</h2><ul><li>springcloud config实时刷新采用SpringCloud Bus消息总线。</li></ul><h1 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h1><h2 id="什么是Spring-Cloud-Gateway"><a href="#什么是Spring-Cloud-Gateway" class="headerlink" title="什么是Spring Cloud Gateway?"></a>什么是Spring Cloud Gateway?</h2><ul><li>Spring Cloud Gateway是Spring Cloud官方推出的第二代网关框架，取代Zuul网关。网关作为流量的，在微服务系统中有着非常作用，网关常见的功能有路由转发、权限校验、限流控制等作用。</li><li>使用了一个RouteLocatorBuilder的bean去创建路由，除了创建路由RouteLocatorBuilder可以让你添加各种predicates和filters，predicates断言的意思，顾名思义就是根据具体的请求的规则，由具体的route去处理，filters是各种过滤器，用来对请求做各种判断和修改。</li></ul><h1 id="SpringCloud主要项目"><a href="#SpringCloud主要项目" class="headerlink" title="SpringCloud主要项目"></a>SpringCloud主要项目</h1><ul><li>Spring Cloud的子项目，大致可分成两类，一类是对现有成熟框架”Spring Boot化”的封装和抽象，也是数量最多的项目；第二类是开发了一部分分布式系统的基础设施的实现，如Spring Cloud Stream扮演的就是kafka, ActiveMQ这样的角色。</li></ul><h3 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h3><ul><li>Config能够管理所有微服务的配置文件</li><li>集中配置管理工具，分布式系统中统一的外部配置管理，默认使用Git来存储配置，可以支持客户端配置的刷新及加密、解密操作。</li></ul><h3 id="Spring-Cloud-Netflix-重点，这些组件用的最多"><a href="#Spring-Cloud-Netflix-重点，这些组件用的最多" class="headerlink" title="Spring Cloud Netflix(重点，这些组件用的最多)"></a>Spring Cloud Netflix(重点，这些组件用的最多)</h3><ul><li>Netflix OSS 开源组件集成，包括Eureka、Hystrix、Ribbon、Feign、Zuul等核心组件。<ul><li>Eureka：服务治理组件，包括服务端的注册中心和客户端的服务发现机制；</li><li>Ribbon：负载均衡的服务调用组件，具有多种负载均衡调用策略；</li><li>Hystrix：服务容错组件，实现了断路器模式，为依赖服务的出错和延迟提供了容错能力；</li><li>Feign：基于Ribbon和Hystrix的声明式服务调用组件；</li><li>Zuul：API网关组件，对请求提供路由及过滤功能。</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">我觉得SpringCloud的福音是Netflix，他把人家的组件都搬来进行封装了，使开发者能快速简单安全的使用<br></code></pre></td></tr></table></figure><h3 id="Spring-Cloud-Bus"><a href="#Spring-Cloud-Bus" class="headerlink" title="Spring Cloud Bus"></a>Spring Cloud Bus</h3><ul><li>用于传播集群状态变化的消息总线，使用轻量级消息代理链接分布式系统中的节点，可以用来动态刷新集群中的服务配置信息。</li><li>简单来说就是修改了配置文件，发送一次请求，所有客户端便会重新读取配置文件。<ul><li>需要利用中间插件MQ</li></ul></li></ul><h3 id="Spring-Cloud-Consul"><a href="#Spring-Cloud-Consul" class="headerlink" title="Spring Cloud Consul"></a>Spring Cloud Consul</h3><ul><li>Consul 是 HashiCorp 公司推出的开源工具，用于实现分布式系统的服务发现与配置。与其它分布式服务注册与发现的方案，Consul 的方案更“一站式”，内置了服务注册与发现框架、分布一致性协议实现、健康检查、Key&#x2F;Value 存储、多数据中心方案，不再需要依赖其它工具（比如 ZooKeeper 等）。使用起来也较为简单。Consul 使用 Go 语言编写，因此具有天然可移植性(支持Linux、windows和Mac OS X)；安装包仅包含一个可执行文件，方便部署，与 Docker 等轻量级容器可无缝配合。</li></ul><h3 id="Spring-Cloud-Security"><a href="#Spring-Cloud-Security" class="headerlink" title="Spring Cloud Security"></a>Spring Cloud Security</h3><ul><li>安全工具包，他可以对<ul><li>对Zuul代理中的负载均衡从前端到后端服务中获取SSO令牌</li><li>资源服务器之间的中继令牌</li><li>使Feign客户端表现得像<code>OAuth2RestTemplate</code>（获取令牌等）的拦截器</li><li>在Zuul代理中配置下游身份验证</li></ul></li><li>Spring Cloud Security提供了一组原语，用于构建安全的应用程序和服务，而且操作简便。可以在外部（或集中）进行大量配置的声明性模型有助于实现大型协作的远程组件系统，通常具有中央身份管理服务。它也非常易于在Cloud Foundry等服务平台中使用。在Spring Boot和Spring Security OAuth2的基础上，可以快速创建实现常见模式的系统，如单点登录，令牌中继和令牌交换。</li></ul><h3 id="Spring-Cloud-Sleuth"><a href="#Spring-Cloud-Sleuth" class="headerlink" title="Spring Cloud Sleuth"></a>Spring Cloud Sleuth</h3><ul><li>在微服务中，通常根据业务模块分服务，项目中前端发起一个请求，后端可能跨几个服务调用才能完成这个请求（如下图）。如果系统越来越庞大，服务之间的调用与被调用关系就会变得很复杂，假如一个请求中需要跨几个服务调用，其中一个服务由于网络延迟等原因挂掉了，那么这时候我们需要分析具体哪一个服务出问题了就会显得很困难。Spring Cloud Sleuth服务链路跟踪功能就可以帮助我们快速的发现错误根源以及监控分析每条请求链路上的性能等等。 <img src="https://user-gold-cdn.xitu.io/2020/4/13/17172a98478b000a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="20180927153655583"></li></ul><h3 id="Spring-Cloud-Stream"><a href="#Spring-Cloud-Stream" class="headerlink" title="Spring Cloud Stream"></a>Spring Cloud Stream</h3><ul><li>轻量级事件驱动微服务框架，可以使用简单的声明式模型来发送及接收消息，主要实现为Apache Kafka及RabbitMQ。</li></ul><h3 id="Spring-Cloud-Task"><a href="#Spring-Cloud-Task" class="headerlink" title="Spring Cloud Task"></a>Spring Cloud Task</h3><ul><li>Spring Cloud Task的目标是为Spring Boot应用程序提供创建短运行期微服务的功能。在Spring Cloud Task中，我们可以灵活地动态运行任何任务，按需分配资源并在任务完成后检索结果。Tasks是Spring Cloud Data Flow中的一个基础项目，允许用户将几乎任何Spring Boot应用程序作为一个短期任务执行。</li></ul><h3 id="Spring-Cloud-Zookeeper"><a href="#Spring-Cloud-Zookeeper" class="headerlink" title="Spring Cloud Zookeeper"></a>Spring Cloud Zookeeper</h3><ul><li>SpringCloud支持三种注册方式Eureka， Consul(go语言编写)，zookeeper</li><li>Spring Cloud Zookeeper是基于Apache Zookeeper的服务治理组件。</li></ul><h3 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h3><ul><li>Spring cloud gateway是spring官方基于Spring 5.0、Spring Boot2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供简单、有效和统一的API路由管理方式，Spring Cloud Gateway作为Spring Cloud生态系统中的网关，目标是替代Netflix Zuul，其不仅提供统一的路由方式，并且还基于Filer链的方式提供了网关基本的功能，例如：安全、监控&#x2F;埋点、限流等。</li></ul><h3 id="Spring-Cloud-OpenFeign"><a href="#Spring-Cloud-OpenFeign" class="headerlink" title="Spring Cloud OpenFeign"></a>Spring Cloud OpenFeign</h3><ul><li>Feign是一个声明性的Web服务客户端。它使编写Web服务客户端变得更容易。要使用Feign，我们可以将调用的服务方法定义成抽象方法保存在本地添加一点点注解就可以了，不需要自己构建Http请求了，直接调用接口就行了，不过要注意，调用方法要和本地抽象方法的签名完全一致。</li></ul><p>作者：小杰要吃蛋<br>链接：<a href="https://juejin.cn/post/6844904125717544973">https://juejin.cn/post/6844904125717544973</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h2><p>设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性、程序的重用性。</p><h2 id="为什么要学习设计模式"><a href="#为什么要学习设计模式" class="headerlink" title="为什么要学习设计模式"></a>为什么要学习设计模式</h2><p>看懂源代码：如果你不懂设计模式去看JDK、Spring、SpringMVC、IO等等的源码，你会很迷茫，你会寸步难行<br>看看前辈的代码：你去个公司难道都是新项目让你接手？很有可能是接盘的，前辈的开发难道不用设计模式？<br>编写自己的理想中的好代码：我个人反正是这样的，对于我自己开发的项目我会很认真，我对他比对我女朋友还好，把项目当成自己的儿子一样</p><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><p>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p><p>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p><p>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p><p><img src="/images%5C20200411190730722.jpg" alt="在这里插入图片描述"></p><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><p><img src="/images%5C20200411190736327.jpg" alt="在这里插入图片描述"></p><h3 id="开放封闭原则（Open-Close-Principle）"><a href="#开放封闭原则（Open-Close-Principle）" class="headerlink" title="开放封闭原则（Open Close Principle）"></a>开放封闭原则（Open Close Principle）</h3><p>原则思想：尽量通过扩展软件实体来解决需求变化，而不是通过修改已有的代码来完成变化<br>描述：一个软件产品在生命周期内，都会发生变化，既然变化是一个既定的事实，我们就应该在设计的时候尽量适应这些变化，以提高项目的稳定性和灵活性。<br>优点：单一原则告诉我们，每个类都有自己负责的职责，里氏替换原则不能破坏继承关系的体系。</p><h3 id="里氏代换原则（Liskov-Substitution-Principle）"><a href="#里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="里氏代换原则（Liskov Substitution Principle）"></a>里氏代换原则（Liskov Substitution Principle）</h3><p>原则思想：使用的基类可以在任何地方使用继承的子类，完美的替换基类。<br>大概意思是：子类可以扩展父类的功能，但不能改变父类原有的功能。子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法，子类中可以增加自己特有的方法。<br>优点：增加程序的健壮性，即使增加了子类，原有的子类还可以继续运行，互不影响。</p><h3 id="依赖倒转原则（Dependence-Inversion-Principle）"><a href="#依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="依赖倒转原则（Dependence Inversion Principle）"></a>依赖倒转原则（Dependence Inversion Principle）</h3><p>依赖倒置原则的核心思想是面向接口编程.</p><p>依赖倒转原则要求我们在程序代码中传递参数时或在关联关系中，尽量引用层次高的抽象层类，</p><p>这个是开放封闭原则的基础，具体内容是：对接口编程，依赖于抽象而不依赖于具体。</p><h3 id="接口隔离原则（Interface-Segregation-Principle）"><a href="#接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则（Interface Segregation Principle）"></a>接口隔离原则（Interface Segregation Principle）</h3><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。<br>例如：支付类的接口和订单类的接口，需要把这俩个类别的接口变成俩个隔离的接口</p><h3 id="迪米特法则（最少知道原则）（Demeter-Principle）"><a href="#迪米特法则（最少知道原则）（Demeter-Principle）" class="headerlink" title="迪米特法则（最少知道原则）（Demeter Principle）"></a>迪米特法则（最少知道原则）（Demeter Principle）</h3><p>原则思想：一个对象应当对其他对象有尽可能少地了解，简称类间解耦<br>大概意思就是一个类尽量减少自己对其他对象的依赖，原则是低耦合，高内聚，只有使各个模块之间的耦合尽量的低，才能提高代码的复用率。<br>优点：低耦合，高内聚。</p><h3 id="单一职责原则（Principle-of-single-responsibility）"><a href="#单一职责原则（Principle-of-single-responsibility）" class="headerlink" title="单一职责原则（Principle of single responsibility）"></a>单一职责原则（Principle of single responsibility）</h3><p>原则思想：一个方法只负责一件事情。<br>描述：单一职责原则很简单，一个方法 一个类只负责一个职责，各个职责的程序改动，不影响其它程序。 这是常识，几乎所有程序员都会遵循这个原则。<br>优点：降低类和类的耦合，提高可读性，增加可维护性和可拓展性，降低可变性的风险。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="1-什么是单例"><a href="#1-什么是单例" class="headerlink" title="1. 什么是单例"></a>1. 什么是单例</h3><p>保证一个类只有一个实例，并且提供一个访问该全局访问点</p><h3 id="2-那些地方用到了单例模式"><a href="#2-那些地方用到了单例模式" class="headerlink" title="2. 那些地方用到了单例模式"></a>2. 那些地方用到了单例模式</h3><p>网站的计数器，一般也是采用单例模式实现，否则难以同步。<br>应用程序的日志应用，一般都是单例模式实现，只有一个实例去操作才好，否则内容不好追加显示。<br>多线程的线程池的设计一般也是采用单例模式，因为线程池要方便对池中的线程进行控制<br>Windows的（任务管理器）就是很典型的单例模式，他不能打开俩个<br>Windows的（回收站）也是典型的单例应用。在整个系统运行过程中，回收站只维护一个实例。</p><h3 id="3-单例优缺点"><a href="#3-单例优缺点" class="headerlink" title="3. 单例优缺点"></a>3. 单例优缺点</h3><ul><li>优点：</li></ul><p>在单例模式中，活动的单例只有一个实例，对单例类的所有实例化得到的都是相同的一个实例。这样就防止其它对象对自己的实例化，确保所有的对象都访问一个实例<br>单例模式具有一定的伸缩性，类自己来控制实例化进程，类就在改变实例化进程上有相应的伸缩性。<br>提供了对唯一实例的受控访问。<br>由于在系统内存中只存在一个对象，因此可以节约系统资源，当需要频繁创建和销毁的对象时单例模式无疑可以提高系统的性能。<br>允许可变数目的实例。<br>避免对共享资源的多重占用。</p><ul><li>缺点：</li></ul><p>不适用于变化的对象，如果同一类型的对象总是要在不同的用例场景发生变化，单例就会引起数据的错误，不能保存彼此的状态。<br>由于单利模式中没有抽象层，因此单例类的扩展有很大的困难。<br>单例类的职责过重，在一定程度上违背了“单一职责原则”。<br>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。</p><h3 id="4-单例模式使用注意事项："><a href="#4-单例模式使用注意事项：" class="headerlink" title="4. 单例模式使用注意事项："></a>4. 单例模式使用注意事项：</h3><p>使用时不能用反射模式创建单例，否则会实例化一个新的对象<br>使用懒单例模式时注意线程安全问题<br>饿单例模式和懒单例模式构造方法都是私有的，因而是不能被继承的，有些单例模式可以被继承（如登记式模式）</p><h3 id="5-单例防止反射漏洞攻击"><a href="#5-单例防止反射漏洞攻击" class="headerlink" title="5. 单例防止反射漏洞攻击"></a>5. 单例防止反射漏洞攻击</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br><br><span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">false</span>) &#123;<br>flag = !flag;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;单例模式被侵犯！&quot;</span>);<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-如何选择单例创建方式"><a href="#6-如何选择单例创建方式" class="headerlink" title="6. 如何选择单例创建方式"></a>6. 如何选择单例创建方式</h3><p>如果不需要延迟加载单例，可以使用枚举或者饿汉式，相对来说枚举性好于饿汉式。<br>如果需要延迟加载，可以使用静态内部类或者懒汉式，相对来说静态内部类好于懒韩式。<br>最好使用饿汉式</p><h3 id="7-单例创建方式"><a href="#7-单例创建方式" class="headerlink" title="7. 单例创建方式"></a>7. 单例创建方式</h3><p>（主要使用懒汉和懒汉式）</p><p>饿汉式：类初始化时，会立即加载该对象，线程天生安全,调用效率高。<br>懒汉式：类初始化时，不会初始化该对象，真正需要使用的时候才会创建该对象,具备懒加载功能。<br>静态内部方式：结合了懒汉式和饿汉式各自的优点，真正需要对象的时候才会加载，加载类是线程安全的。<br>枚举单例：使用枚举实现单例模式，优点：实现简单、调用效率高，枚举本身就是单例，由jvm从根本上提供保障！避免通过反射和反序列化的漏洞， 缺点没有延迟加载。<br>双重检测锁方式 (因为JVM本质重排序的原因，可能会初始化多次，不推荐使用)</p><h4 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1.饿汉式"></a>1.饿汉式</h4><p>饿汉式:类初始化时,会立即加载该对象，线程天生安全,调用效率高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lijie;<br><br><span class="hljs-comment">//饿汉式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> &#123;<br><br>    <span class="hljs-comment">// 类初始化时,会立即加载该对象，线程安全,调用效率高</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Demo1</span> <span class="hljs-variable">demo1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo1</span>();<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Demo1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;私有Demo1构造参数初始化&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Demo1 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> demo1;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Demo1</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> Demo1.getInstance();<br>        <span class="hljs-type">Demo1</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> Demo1.getInstance();<br>        System.out.println(s1 == s2);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-懒汉式"><a href="#2-懒汉式" class="headerlink" title="2.懒汉式"></a>2.懒汉式</h4><p>懒汉式: 类初始化时,不会初始化该对象,真正需要使用的时候才会创建该对象,具备懒加载功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lijie;<br><br><span class="hljs-comment">//懒汉式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2</span> &#123;<br><br>    <span class="hljs-comment">//类初始化时，不会初始化该对象，真正需要使用的时候才会创建该对象。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Demo2 demo2;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Demo2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;私有Demo2构造参数初始化&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> Demo2 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (demo2 == <span class="hljs-literal">null</span>) &#123;<br>            demo2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo2</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> demo2;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Demo2</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> Demo2.getInstance();<br>        <span class="hljs-type">Demo2</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> Demo2.getInstance();<br>        System.out.println(s1 == s2);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-静态内部类"><a href="#3-静态内部类" class="headerlink" title="3.静态内部类"></a>3.静态内部类</h4><p>静态内部方式:结合了懒汉式和饿汉式各自的优点，真正需要对象的时候才会加载，加载类是线程安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lijie;<br><br><span class="hljs-comment">// 静态内部类方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo3</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Demo3</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;私有Demo3构造参数初始化&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonClassInstance</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Demo3</span> <span class="hljs-variable">DEMO_3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo3</span>();<br>    &#125;<br>    <br>    <span class="hljs-comment">// 方法没有同步</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Demo3 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> SingletonClassInstance.DEMO_3;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Demo3</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> Demo3.getInstance();<br>        <span class="hljs-type">Demo3</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> Demo3.getInstance();<br>        System.out.println(s1 == s2);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-枚举单例式"><a href="#4-枚举单例式" class="headerlink" title="4.枚举单例式"></a>4.枚举单例式</h4><p>枚举单例: 使用枚举实现单例模式 优点:实现简单、调用效率高，枚举本身就是单例，由jvm从根本上提供保障!避免通过反射和反序列化的漏洞， 缺点没有延迟加载。<br>package com.lijie;</p><p>&#x2F;&#x2F;使用枚举实现单例模式 优点:实现简单、枚举本身就是单例，由jvm从根本上提供保障!避免通过反射和反序列化的漏洞 缺点没有延迟加载<br>public class Demo4 {</p><pre><code class="hljs">public static Demo4 getInstance() &#123;    return Demo.INSTANCE.getInstance();&#125;public static void main(String[] args) &#123;    Demo4 s1 = Demo4.getInstance();    Demo4 s2 = Demo4.getInstance();    System.out.println(s1 == s2);&#125;//定义枚举private static enum Demo &#123;    INSTANCE;    // 枚举元素为单例    private Demo4 demo4;    private Demo() &#123;        System.out.println(&quot;枚举Demo私有构造参数&quot;);        demo4 = new Demo4();    &#125;    public Demo4 getInstance() &#123;        return demo4;    &#125;&#125;</code></pre><p>}</p><h4 id="5-双重检测锁方式"><a href="#5-双重检测锁方式" class="headerlink" title="5.双重检测锁方式"></a>5.双重检测锁方式</h4><p>双重检测锁方式 (因为JVM本质重排序的原因，可能会初始化多次，不推荐使用)<br>package com.lijie;</p><p>&#x2F;&#x2F;双重检测锁方式<br>public class Demo5 {</p><pre><code class="hljs">private static Demo5 demo5;private Demo5() &#123;    System.out.println(&quot;私有Demo4构造参数初始化&quot;);&#125;public static Demo5 getInstance() &#123;    if (demo5 == null) &#123;        synchronized (Demo5.class) &#123;            if (demo5 == null) &#123;                demo5 = new Demo5();            &#125;        &#125;    &#125;    return demo5;&#125;public static void main(String[] args) &#123;    Demo5 s1 = Demo5.getInstance();    Demo5 s2 = Demo5.getInstance();    System.out.println(s1 == s2);&#125;</code></pre><p>}</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="1-什么是工厂模式"><a href="#1-什么是工厂模式" class="headerlink" title="1.什么是工厂模式"></a>1.什么是工厂模式</h3><p>它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。实现了创建者和调用者分离，工厂模式分为简单工厂、工厂方法、抽象工厂模式</p><h3 id="2-工厂模式好处"><a href="#2-工厂模式好处" class="headerlink" title="2.工厂模式好处"></a>2.工厂模式好处</h3><p>工厂模式是我们最常用的实例化对象模式了，是用工厂方法代替new操作的一种模式。<br>利用工厂模式可以降低程序的耦合性，为后期的维护修改提供了很大的便利。<br>将选择实现类、创建对象统一管理和控制。从而将调用者跟我们的实现类解耦。</p><h3 id="3-为什么要学习工厂设计模式"><a href="#3-为什么要学习工厂设计模式" class="headerlink" title="3.为什么要学习工厂设计模式"></a>3.为什么要学习工厂设计模式</h3><p>不知道你们面试题问到过源码没有，你知道Spring的源码吗，MyBatis的源码吗，等等等<br>如果你想学习很多框架的源码，或者你想自己开发自己的框架，就必须先掌握设计模式（工厂设计模式用的是非常非常广泛的）</p><h3 id="4-Spring开发中的工厂设计模式"><a href="#4-Spring开发中的工厂设计模式" class="headerlink" title="4.Spring开发中的工厂设计模式"></a>4.Spring开发中的工厂设计模式</h3><h4 id="1-Spring-IoC"><a href="#1-Spring-IoC" class="headerlink" title="1.Spring IoC"></a>1.Spring IoC</h4><p>看过Spring源码就知道，在Spring IoC容器创建bean的过程是使用了工厂设计模式</p><p>Spring中无论是通过xml配置还是通过配置类还是注解进行创建bean，大部分都是通过简单工厂来进行创建的。</p><p>当容器拿到了beanName和class类型后，动态的通过反射创建具体的某个对象，最后将创建的对象放到Map中。</p><h4 id="2-为什么Spring-IoC要使用工厂设计模式创建Bean呢"><a href="#2-为什么Spring-IoC要使用工厂设计模式创建Bean呢" class="headerlink" title="2.为什么Spring IoC要使用工厂设计模式创建Bean呢"></a>2.为什么Spring IoC要使用工厂设计模式创建Bean呢</h4><p>在实际开发中，如果我们A对象调用B，B调用C，C调用D的话我们程序的耦合性就会变高。（耦合大致分为类与类之间的依赖，方法与方法之间的依赖。）</p><p>在很久以前的三层架构编程时，都是控制层调用业务层，业务层调用数据访问层时，都是是直接new对象，耦合性大大提升，代码重复量很高，对象满天飞。为了避免这种情况，Spring使用工厂模式编程，写一个工厂，由工厂创建Bean，以后我们如果要对象就直接管工厂要就可以，剩下的事情不归我们管了。Spring IOC容器的工厂中有个静态的Map集合，是为了让工厂符合单例设计模式，即每个对象只生产一次，生产出对象后就存入到Map集合中，保证了实例不会重复影响程序效率。</p><h3 id="5-工厂模式分类"><a href="#5-工厂模式分类" class="headerlink" title="5.工厂模式分类"></a>5.工厂模式分类</h3><p>工厂模式分为简单工厂、工厂方法、抽象工厂模式</p><ul><li>简单工厂 ：用来生产同一等级结构中的任意产品。（不支持拓展增加产品）</li><li>工厂方法 ：用来生产同一等级结构中的固定产品。（支持拓展增加产品）   </li><li>抽象工厂 ：用来生产不同产品族的全部产品。（不支持拓展增加产品；支持增加产品族）</li></ul><p>我下面来使用代码演示一下：</p><h4 id="5-1-简单工厂模式"><a href="#5-1-简单工厂模式" class="headerlink" title="5.1 简单工厂模式"></a>5.1 简单工厂模式</h4><p>什么是简单工厂模式</p><p>简单工厂模式相当于是一个工厂中有各种产品，创建在一个类中，客户无需知道具体产品的名称，只需要知道产品类所对应的参数即可。但是工厂的职责过重，而且当类型过多时不利于系统的扩展维护。<br>代码演示：</p><p>创建工厂<br>package com.lijie;</p><p>public interface Car {<br>    public void run();<br>}</p><p>创建工厂的产品（宝马）<br>package com.lijie;</p><p>public class Bmw implements Car {<br>    public void run() {<br>        System.out.println(“我是宝马汽车…”);<br>    }<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>创建工另外一种产品（奥迪）<br>package com.lijie;</p><p>public class AoDi implements Car {<br>    public void run() {<br>        System.out.println(“我是奥迪汽车..”);<br>    }<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>创建核心工厂类，由他决定具体调用哪产品<br>package com.lijie;</p><p>public class CarFactory {</p><pre><code class="hljs"> public static Car createCar(String name) &#123;    if (&quot;&quot;.equals(name)) &#123;         return null;    &#125;    if(name.equals(&quot;奥迪&quot;))&#123;        return new AoDi();    &#125;    if(name.equals(&quot;宝马&quot;))&#123;        return new Bmw();    &#125;    return null;&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>演示创建工厂的具体实例<br>package com.lijie;</p><p>public class Client01 {</p><pre><code class="hljs">public static void main(String[] args) &#123;    Car aodi  =CarFactory.createCar(&quot;奥迪&quot;);    Car bmw  =CarFactory.createCar(&quot;宝马&quot;);    aodi.run();    bmw.run();&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>单工厂的优点&#x2F;缺点</p><p>优点：简单工厂模式能够根据外界给定的信息，决定究竟应该创建哪个具体类的对象。明确区分了各自的职责和权力，有利于整个软件体系结构的优化。<br>缺点：很明显工厂类集中了所有实例的创建逻辑，容易违反GRASPR的高内聚的责任分配原则</p><h4 id="5-2-工厂方法模式"><a href="#5-2-工厂方法模式" class="headerlink" title="5.2 工厂方法模式"></a>5.2 工厂方法模式</h4><p>什么是工厂方法模式</p><p>工厂方法模式Factory Method，又称多态性工厂模式。在工厂方法模式中，核心的工厂类不再负责所有的产品的创建，而是将具体创建的工作交给子类去做。该核心类成为一个抽象工厂角色，仅负责给出具体工厂子类必须实现的接口，而不接触哪一个产品类应当被实例化这种细节<br>代码演示：</p><p>创建工厂<br>package com.lijie;</p><p>public interface Car {<br>    public void run();<br>}<br>1<br>2<br>3<br>4<br>5<br>创建工厂方法调用接口（所有的产品需要new出来必须继承他来实现方法）<br>package com.lijie;</p><p>public interface CarFactory {</p><pre><code class="hljs">Car createCar();</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>创建工厂的产品（奥迪）<br>package com.lijie;</p><p>public class AoDi implements Car {<br>    public void run() {<br>        System.out.println(“我是奥迪汽车..”);<br>    }<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>创建工厂另外一种产品（宝马）<br>package com.lijie;</p><p>public class Bmw implements Car {<br>    public void run() {<br>        System.out.println(“我是宝马汽车…”);<br>    }<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>创建工厂方法调用接口的实例（奥迪）<br>package com.lijie;</p><p>public class AoDiFactory implements CarFactory {</p><pre><code class="hljs">public Car createCar() &#123;    return new AoDi();&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>创建工厂方法调用接口的实例（宝马）<br>package com.lijie;</p><p>public class BmwFactory implements CarFactory {</p><pre><code class="hljs">public Car createCar() &#123;    return new Bmw();&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>演示创建工厂的具体实例<br>package com.lijie;</p><p>public class Client {</p><pre><code class="hljs">public static void main(String[] args) &#123;    Car aodi = new AoDiFactory().createCar();    Car jili = new BmwFactory().createCar();    aodi.run();    jili.run();&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11</p><h4 id="5-3-抽象工厂模式"><a href="#5-3-抽象工厂模式" class="headerlink" title="5.3 抽象工厂模式"></a>5.3 抽象工厂模式</h4><p>什么是抽象工厂模式</p><p>抽象工厂简单地说是工厂的工厂，抽象工厂可以创建具体工厂，由具体工厂来产生具体产品。</p><p>代码演示：<br>创建第一个子工厂，及实现类<br>package com.lijie;</p><p>&#x2F;&#x2F;汽车<br>public interface Car {<br>       void run();<br>}</p><p> class CarA implements Car{</p><pre><code class="hljs">public void run() &#123;    System.out.println(&quot;宝马&quot;);&#125;</code></pre><p>}<br> class CarB implements Car{</p><pre><code class="hljs">public void run() &#123;    System.out.println(&quot;摩拜&quot;);&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>创建第二个子工厂，及实现类<br>package com.lijie;</p><p>&#x2F;&#x2F;发动机<br>public interface Engine {</p><pre><code class="hljs">void run();</code></pre><p>}</p><p>class EngineA implements Engine {</p><pre><code class="hljs">public void run() &#123;    System.out.println(&quot;转的快!&quot;);&#125;</code></pre><p>}</p><p>class EngineB implements Engine {</p><pre><code class="hljs">public void run() &#123;    System.out.println(&quot;转的慢!&quot;);&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>创建一个总工厂，及实现类（由总工厂的实现类决定调用那个工厂的那个实例）<br>package com.lijie;</p><p>public interface TotalFactory {<br>    &#x2F;&#x2F; 创建汽车<br>    Car createChair();<br>    &#x2F;&#x2F; 创建发动机<br>    Engine createEngine();<br>}</p><p>&#x2F;&#x2F;总工厂实现类，由他决定调用哪个工厂的那个实例<br>class TotalFactoryReally implements TotalFactory {</p><pre><code class="hljs">public Engine createEngine() &#123;    return new EngineA();&#125;public Car createChair() &#123;    return new CarA();&#125;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>运行测试<br>package com.lijie;</p><p>public class Test {</p><pre><code class="hljs">public static void main(String[] args) &#123;    TotalFactory totalFactory2 = new TotalFactoryReally();    Car car = totalFactory2.createChair();    car.run();    TotalFactory totalFactory = new TotalFactoryReally();    Engine engine = totalFactory.createEngine();    engine.run();&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14</p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="1-什么是代理模式"><a href="#1-什么是代理模式" class="headerlink" title="1.什么是代理模式"></a>1.什么是代理模式</h3><p>通过代理控制对象的访问，可以在这个对象调用方法之前、调用方法之后去处理&#x2F;添加新的功能。(也就是AO的P微实现)</p><p>代理在原有代码乃至原业务流程都不修改的情况下，直接在业务流程中切入新代码，增加新功能，这也和 Spring 的（面向切面编程）很相似</p><h3 id="2-代理模式应用场景"><a href="#2-代理模式应用场景" class="headerlink" title="2.代理模式应用场景"></a>2.代理模式应用场景</h3><p>Spring AOP、日志打印、异常处理、事务控制、权限控制等</p><h3 id="3-代理的分类"><a href="#3-代理的分类" class="headerlink" title="3.代理的分类"></a>3.代理的分类</h3><p>静态代理(静态定义代理类)<br>动态代理(动态生成代理类，也称为Jdk自带动态代理)<br>Cglib 、javaassist（字节码操作库）</p><h3 id="4-三种代理的区别"><a href="#4-三种代理的区别" class="headerlink" title="4.三种代理的区别"></a>4.三种代理的区别</h3><p>静态代理：简单代理模式，是动态代理的理论基础。常见使用在代理模式<br>jdk动态代理：使用反射完成代理。需要有顶层接口才能使用，常见是mybatis的mapper文件是代理。<br>cglib动态代理：也是使用反射完成代理，可以直接代理类（jdk动态代理不行），使用字节码技术，不能对 final类进行继承。（需要导入jar包）</p><h3 id="5-用代码演示三种代理"><a href="#5-用代码演示三种代理" class="headerlink" title="5.用代码演示三种代理"></a>5.用代码演示三种代理</h3><h4 id="5-1-静态代理"><a href="#5-1-静态代理" class="headerlink" title="5.1.静态代理"></a>5.1.静态代理</h4><p>什么是静态代理</p><p>由程序员创建或工具生成代理类的源码，再编译代理类。所谓静态也就是在程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就确定了。<br>代码演示：</p><p>我有一段这样的代码：（如何能在不修改UserDao接口类的情况下开事务和关闭事务呢）<br>package com.lijie;</p><p>&#x2F;&#x2F;接口类<br>public class UserDao{<br>    public void save() {<br>        System.out.println(“保存数据方法”);<br>    }<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>package com.lijie;</p><p>&#x2F;&#x2F;运行测试类<br>public  class Test{<br>    public static void main(String[] args) {<br>        UserDao userDao &#x3D; new UserDao();<br>        userDao.save();<br>    }<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>修改代码，添加代理类</p><p>package com.lijie;</p><p>&#x2F;&#x2F;代理类<br>public class UserDaoProxy extends UserDao {<br>    private UserDao userDao;</p><pre><code class="hljs">public UserDaoProxy(UserDao userDao) &#123;    this.userDao = userDao;&#125;public void save() &#123;    System.out.println(&quot;开启事物...&quot;);    userDao.save();    System.out.println(&quot;关闭事物...&quot;);&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>&#x2F;&#x2F;添加完静态代理的测试类<br>public class Test{<br>    public static void main(String[] args) {<br>        UserDao userDao &#x3D; new UserDao();<br>        UserDaoProxy userDaoProxy &#x3D; new UserDaoProxy(userDao);<br>        userDaoProxy.save();<br>    }<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>缺点：每个需要代理的对象都需要自己重复编写代理，很不舒服，<br>优点：但是可以面相实际对象或者是接口的方式实现代理</p><h4 id="2-2-动态代理"><a href="#2-2-动态代理" class="headerlink" title="2.2.动态代理"></a>2.2.动态代理</h4><p>什么是动态代理</p><p>动态代理也叫做，JDK代理、接口代理。</p><p>动态代理的对象，是利用JDK的API，动态的在内存中构建代理对象（是根据被代理的接口来动态生成代理类的class文件，并加载运行的过程），这就叫动态代理</p><p>package com.lijie;</p><p>&#x2F;&#x2F;接口<br>public interface UserDao {<br>    void save();<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>package com.lijie;</p><p>&#x2F;&#x2F;接口实现类<br>public class UserDaoImpl implements UserDao {<br>    public void save() {<br>        System.out.println(“保存数据方法”);<br>    }<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>&#x2F;&#x2F;下面是代理类，可重复使用，不像静态代理那样要自己重复编写代理<br>package com.lijie;</p><p>import java.lang.reflect.InvocationHandler;<br>import java.lang.reflect.Method;</p><p>&#x2F;&#x2F; 每次生成动态代理类对象时,实现了InvocationHandler接口的调用处理器对象<br>public class InvocationHandlerImpl implements InvocationHandler {</p><pre><code class="hljs">// 这其实业务实现类对象，用来调用具体的业务方法private Object target;// 通过构造函数传入目标对象public InvocationHandlerImpl(Object target) &#123;    this.target = target;&#125;//动态代理实际运行的代理方法public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;    System.out.println(&quot;调用开始处理&quot;);    //下面invoke()方法是以反射的方式来创建对象，第一个参数是要创建的对象，第二个是构成方法的参数，由第二个参数来决定创建对象使用哪个构造方法    Object result = method.invoke(target, args);    System.out.println(&quot;调用结束处理&quot;);    return result;&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>&#x2F;&#x2F;利用动态代理使用代理方法<br>package com.lijie;</p><p>import java.lang.reflect.Proxy;</p><p>public class Test {<br>    public static void main(String[] args) {<br>        &#x2F;&#x2F; 被代理对象<br>        UserDao userDaoImpl &#x3D; new UserDaoImpl();<br>        InvocationHandlerImpl invocationHandlerImpl &#x3D; new InvocationHandlerImpl(userDaoImpl);</p><pre><code class="hljs">    //类加载器    ClassLoader loader = userDaoImpl.getClass().getClassLoader();    Class&lt;?&gt;[] interfaces = userDaoImpl.getClass().getInterfaces();    // 主要装载器、一组接口及调用处理动态代理实例    UserDao newProxyInstance = (UserDao) Proxy.newProxyInstance(loader, interfaces, invocationHandlerImpl);    newProxyInstance.save();&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>缺点：必须是面向接口，目标业务类必须实现接口<br>优点：不用关心代理类，只需要在运行阶段才指定代理哪一个对象</p><h4 id="5-3-CGLIB动态代理"><a href="#5-3-CGLIB动态代理" class="headerlink" title="5.3.CGLIB动态代理"></a>5.3.CGLIB动态代理</h4><p>CGLIB动态代理原理：</p><p>利用asm开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。<br>什么是CGLIB动态代理</p><p>CGLIB动态代理和jdk代理一样，使用反射完成代理，不同的是他可以直接代理类（jdk动态代理不行，他必须目标业务类必须实现接口），CGLIB动态代理底层使用字节码技术，CGLIB动态代理不能对 final类进行继承。（CGLIB动态代理需要导入jar包）<br>代码演示：</p><p>package com.lijie;</p><p>&#x2F;&#x2F;接口<br>public interface UserDao {<br>    void save();<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>package com.lijie;</p><p>&#x2F;&#x2F;接口实现类<br>public class UserDaoImpl implements UserDao {<br>    public void save() {<br>        System.out.println(“保存数据方法”);<br>    }<br>}</p><p>package com.lijie;</p><p>import org.springframework.cglib.proxy.Enhancer;<br>import org.springframework.cglib.proxy.MethodInterceptor;<br>import org.springframework.cglib.proxy.MethodProxy;<br>import java.lang.reflect.Method;</p><p>&#x2F;&#x2F;代理主要类<br>public class CglibProxy implements MethodInterceptor {<br>    private Object targetObject;<br>    &#x2F;&#x2F; 这里的目标类型为Object，则可以接受任意一种参数作为被代理类，实现了动态代理<br>    public Object getInstance(Object target) {<br>        &#x2F;&#x2F; 设置需要创建子类的类<br>        this.targetObject &#x3D; target;<br>        Enhancer enhancer &#x3D; new Enhancer();<br>        enhancer.setSuperclass(target.getClass());<br>        enhancer.setCallback(this);<br>        return enhancer.create();<br>    }</p><pre><code class="hljs">//代理实际方法public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable &#123;    System.out.println(&quot;开启事物&quot;);    Object result = proxy.invoke(targetObject, args);    System.out.println(&quot;关闭事物&quot;);    // 返回代理对象    return result;&#125;</code></pre><p>}</p><p>package com.lijie;</p><p>&#x2F;&#x2F;测试CGLIB动态代理<br>public class Test {<br>    public static void main(String[] args) {<br>        CglibProxy cglibProxy &#x3D; new CglibProxy();<br>        UserDao userDao &#x3D; (UserDao) cglibProxy.getInstance(new UserDaoImpl());<br>        userDao.save();<br>    }<br>}</p><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><h3 id="1-什么是建造者模式"><a href="#1-什么是建造者模式" class="headerlink" title="1.什么是建造者模式"></a>1.什么是建造者模式</h3><p>建造者模式：是将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的方式进行创建。</p><p>工厂类模式是提供的是创建单个类的产品</p><p>而建造者模式则是将各种产品集中起来进行管理，用来具有不同的属性的产品</p><p>建造者模式通常包括下面几个角色：</p><p>uilder：给出一个抽象接口，以规范产品对象的各个组成成分的建造。这个接口规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建。<br>ConcreteBuilder：实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建。 在建造过程完成后，提供产品的实例。<br>Director：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。<br>Product：要创建的复杂对象。</p><h3 id="2-建造者模式的使用场景"><a href="#2-建造者模式的使用场景" class="headerlink" title="2.建造者模式的使用场景"></a>2.建造者模式的使用场景</h3><p>使用场景：</p><p>需要生成的对象具有复杂的内部结构。<br>需要生成的对象内部属性本身相互依赖。<br>与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</p><p>Java 中的 StringBuilder就是建造者模式创建的，他把一个单个字符的char数组组合起来</p><p>Spring不是建造者模式，它提供的操作应该是对于字符串本身的一些操作，而不是创建或改变一个字符串。</p><h3 id="3-代码案例"><a href="#3-代码案例" class="headerlink" title="3.代码案例"></a>3.代码案例</h3><p>建立一个装备对象Arms</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lijie;<br><br><span class="hljs-comment">//装备类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Arms</span> &#123;<br><span class="hljs-comment">//头盔</span><br><span class="hljs-keyword">private</span> String helmet;<br><span class="hljs-comment">//铠甲</span><br><span class="hljs-keyword">private</span> String armor;<br><span class="hljs-comment">//武器</span><br><span class="hljs-keyword">private</span> String weapon;<br><br><br><span class="hljs-comment">//省略Git和Set方法...........</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>创建Builder接口（给出一个抽象接口，以规范产品对象的各个组成成分的建造，这个接口只是规范）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lijie;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PersonBuilder</span> &#123;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">builderHelmetMurder</span><span class="hljs-params">()</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">builderArmorMurder</span><span class="hljs-params">()</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">builderWeaponMurder</span><span class="hljs-params">()</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">builderHelmetYanLong</span><span class="hljs-params">()</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">builderArmorYanLong</span><span class="hljs-params">()</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">builderWeaponYanLong</span><span class="hljs-params">()</span>;<br><br>Arms <span class="hljs-title function_">BuilderArms</span><span class="hljs-params">()</span>; <span class="hljs-comment">//组装</span><br>&#125;<br></code></pre></td></tr></table></figure><p>创建Builder实现类（这个类主要实现复杂对象创建的哪些部分需要什么属性）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lijie;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArmsBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PersonBuilder</span> &#123;<br>    <span class="hljs-keyword">private</span> Arms arms;<br><br>    <span class="hljs-comment">//创建一个Arms实例,用于调用set方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArmsBuilder</span><span class="hljs-params">()</span> &#123;<br>        arms = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Arms</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">builderHelmetMurder</span><span class="hljs-params">()</span> &#123;<br>        arms.setHelmet(<span class="hljs-string">&quot;夺命头盔&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">builderArmorMurder</span><span class="hljs-params">()</span> &#123;<br>        arms.setArmor(<span class="hljs-string">&quot;夺命铠甲&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">builderWeaponMurder</span><span class="hljs-params">()</span> &#123;<br>        arms.setWeapon(<span class="hljs-string">&quot;夺命宝刀&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">builderHelmetYanLong</span><span class="hljs-params">()</span> &#123;<br>        arms.setHelmet(<span class="hljs-string">&quot;炎龙头盔&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">builderArmorYanLong</span><span class="hljs-params">()</span> &#123;<br>        arms.setArmor(<span class="hljs-string">&quot;炎龙铠甲&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">builderWeaponYanLong</span><span class="hljs-params">()</span> &#123;<br>        arms.setWeapon(<span class="hljs-string">&quot;炎龙宝刀&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> Arms <span class="hljs-title function_">BuilderArms</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> arms;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Director（调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lijie;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonDirector</span> &#123;<br><br><br><span class="hljs-comment">//组装</span><br><span class="hljs-keyword">public</span> Arms <span class="hljs-title function_">constructPerson</span><span class="hljs-params">(PersonBuilder pb)</span> &#123;<br>pb.builderHelmetYanLong();<br>pb.builderArmorMurder();<br>pb.builderWeaponMurder();<br><span class="hljs-keyword">return</span> pb.BuilderArms();<br>&#125;<br><br><span class="hljs-comment">//这里进行测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">PersonDirector</span> <span class="hljs-variable">pb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonDirector</span>();<br><span class="hljs-type">Arms</span> <span class="hljs-variable">arms</span> <span class="hljs-operator">=</span> pb.constructPerson(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArmsBuilder</span>());<br>System.out.println(arms.getHelmet());<br>System.out.println(arms.getArmor());<br>System.out.println(arms.getWeapon());<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><h3 id="1-什么是模板方法"><a href="#1-什么是模板方法" class="headerlink" title="1.什么是模板方法"></a>1.什么是模板方法</h3><p>模板方法模式：定义一个操作中的算法骨架（父类），而将一些步骤延迟到子类中。<br>模板方法使得子类可以不改变一个算法的结构来重定义该算法的</p><h3 id="2-什么时候使用模板方法"><a href="#2-什么时候使用模板方法" class="headerlink" title="2.什么时候使用模板方法"></a>2.什么时候使用模板方法</h3><p>实现一些操作时，整体步骤很固定，但是呢。就是其中一小部分需要改变，这时候可以使用模板方法模式，将容易变的部分抽象出来，供子类实现。</p><h3 id="3-实际开发中应用场景哪里用到了模板方法"><a href="#3-实际开发中应用场景哪里用到了模板方法" class="headerlink" title="3.实际开发中应用场景哪里用到了模板方法"></a>3.实际开发中应用场景哪里用到了模板方法</h3><p>其实很多框架中都有用到了模板方法模式<br>例如：数据库访问的封装、Junit单元测试、servlet中关于doGet&#x2F;doPost方法的调用等等<br>4.现实生活中的模板方法<br>例如：</p><p>去餐厅吃饭，餐厅给我们提供了一个模板就是：看菜单，点菜，吃饭，付款，走人<br>（这里 “点菜和付款” 是不确定的由子类来完成的，其他的则是一个模板。）<br>5.代码实现模板方法模式<br>先定义一个模板。把模板中的点菜和付款，让子类来实现。<br>package com.lijie;</p><p>&#x2F;&#x2F;模板方法<br>public abstract class RestaurantTemplate {</p><pre><code class="hljs">// 1.看菜单public void menu() &#123;    System.out.println(&quot;看菜单&quot;);&#125;// 2.点菜业务abstract void spotMenu();// 3.吃饭业务public void havingDinner()&#123; System.out.println(&quot;吃饭&quot;); &#125;// 3.付款业务abstract void payment();// 3.走人public void GoR() &#123; System.out.println(&quot;走人&quot;); &#125;//模板通用结构public void process()&#123;    menu();    spotMenu();    havingDinner();    payment();    GoR();&#125;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>具体的模板方法子类 1<br>package com.lijie;</p><p>public class RestaurantGinsengImpl extends RestaurantTemplate {</p><pre><code class="hljs">void spotMenu() &#123;    System.out.println(&quot;人参&quot;);&#125;void payment() &#123;    System.out.println(&quot;5快&quot;);&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>具体的模板方法子类 2<br>package com.lijie;</p><p>public class RestaurantLobsterImpl  extends RestaurantTemplate  {</p><pre><code class="hljs">void spotMenu() &#123;    System.out.println(&quot;龙虾&quot;);&#125;void payment() &#123;    System.out.println(&quot;50块&quot;);&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>客户端测试<br>package com.lijie;</p><p>public class Client {</p><pre><code class="hljs">public static void main(String[] args) &#123;    //调用第一个模板实例    RestaurantTemplate restaurantTemplate = new RestaurantGinsengImpl();    restaurantTemplate.process();&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10</p><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><h3 id="1-什么是外观模式"><a href="#1-什么是外观模式" class="headerlink" title="1.什么是外观模式"></a>1.什么是外观模式</h3><p>外观模式：也叫门面模式，隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。</p><p>它向现有的系统添加一个接口，用这一个接口来隐藏实际的系统的复杂性。</p><p>使用外观模式，他外部看起来就是一个接口，其实他的内部有很多复杂的接口已经被实现</p><h3 id="2-外观模式例子"><a href="#2-外观模式例子" class="headerlink" title="2.外观模式例子"></a>2.外观模式例子</h3><p>用户注册完之后，需要调用阿里短信接口、邮件接口、微信推送接口。<br>创建阿里短信接口<br>package com.lijie;</p><p>&#x2F;&#x2F;阿里短信消息<br>public interface AliSmsService {<br>    void sendSms();<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>package com.lijie;</p><p>public class AliSmsServiceImpl implements AliSmsService {</p><pre><code class="hljs">public void sendSms() &#123;    System.out.println(&quot;阿里短信消息&quot;);&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>创建邮件接口<br>package com.lijie;</p><p>&#x2F;&#x2F;发送邮件消息<br>public interface EamilSmsService {<br>    void sendSms();<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>package com.lijie;</p><p>public class EamilSmsServiceImpl implements   EamilSmsService{<br>    public void sendSms() {<br>        System.out.println(“发送邮件消息”);<br>    }<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>创建微信推送接口<br>package com.lijie;</p><p>&#x2F;&#x2F;微信消息推送<br>public interface WeiXinSmsService {<br>   void sendSms();<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>package com.lijie;</p><p>public class WeiXinSmsServiceImpl implements  WeiXinSmsService {<br>    public void sendSms() {<br>        System.out.println(“发送微信消息推送”);<br>    }<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>创建门面（门面看起来很简单使用，复杂的东西以及被门面给封装好了）<br>package com.lijie;</p><p>public class Computer {<br>    AliSmsService aliSmsService;<br>    EamilSmsService eamilSmsService;<br>    WeiXinSmsService weiXinSmsService;</p><pre><code class="hljs">public Computer() &#123;    aliSmsService = new AliSmsServiceImpl();    eamilSmsService = new EamilSmsServiceImpl();    weiXinSmsService = new WeiXinSmsServiceImpl();&#125;//只需要调用它public void sendMsg() &#123;    aliSmsService.sendSms();    eamilSmsService.sendSms();    weiXinSmsService.sendSms();&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>启动测试<br>package com.lijie;</p><p>public class Client {</p><pre><code class="hljs">public static void main(String[] args) &#123;    //普通模式需要这样    AliSmsService aliSmsService = new AliSmsServiceImpl();    EamilSmsService eamilSmsService = new EamilSmsServiceImpl();    WeiXinSmsService weiXinSmsService = new WeiXinSmsServiceImpl();    aliSmsService.sendSms();    eamilSmsService.sendSms();    weiXinSmsService.sendSms();    //利用外观模式简化方法    new Computer().sendMsg();&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17</p><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><h3 id="1-什么是原型模式"><a href="#1-什么是原型模式" class="headerlink" title="1.什么是原型模式"></a>1.什么是原型模式</h3><p>原型设计模式简单来说就是克隆</p><p>原型表明了有一个样板实例，这个原型是可定制的。原型模式多用于创建复杂的或者构造耗时的实例，因为这种情况下，复制一个已经存在的实例可使程序运行更高效。</p><h3 id="2-原型模式的应用场景"><a href="#2-原型模式的应用场景" class="headerlink" title="2.原型模式的应用场景"></a>2.原型模式的应用场景</h3><p>类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。这时我们就可以通过原型拷贝避免这些消耗。<br>通过new产生的一个对象需要非常繁琐的数据准备或者权限，这时可以使用原型模式。<br>一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用，即保护性拷贝。<br>我们Spring框架中的多例就是使用原型。</p><h3 id="3-原型模式的使用方式"><a href="#3-原型模式的使用方式" class="headerlink" title="3.原型模式的使用方式"></a>3.原型模式的使用方式</h3><p>实现Cloneable接口。在java语言有一个Cloneable接口，它的作用只有一个，就是在运行时通知虚拟机可以安全地在实现了此接口的类上使用clone方法。在java虚拟机中，只有实现了这个接口的类才可以被拷贝，否则在运行时会抛出CloneNotSupportedException异常。</p><p>重写Object类中的clone方法。Java中，所有类的父类都是Object类，Object类中有一个clone方法，作用是返回对象的一个拷贝，但是其作用域protected类型的，一般的类无法调用，因此Prototype类需要将clone方法的作用域修改为public类型。</p><h4 id="3-1原型模式分为浅复制和深复制"><a href="#3-1原型模式分为浅复制和深复制" class="headerlink" title="3.1原型模式分为浅复制和深复制"></a>3.1原型模式分为浅复制和深复制</h4><p>（浅复制）只是拷贝了基本类型的数据，而引用类型数据，只是拷贝了一份引用地址。</p><p>（深复制）在计算机中开辟了一块新的内存地址用于存放复制的对象。</p><h3 id="4-代码演示"><a href="#4-代码演示" class="headerlink" title="4.代码演示"></a>4.代码演示</h3><p>创建User类<br>package com.lijie;</p><p>import java.util.ArrayList;</p><p>public class User implements Cloneable {<br>    private String name;<br>    private String password;<br>    private ArrayList<String> phones;</p><pre><code class="hljs">protected User clone() &#123;    try &#123;        User user = (User) super.clone();        //重点，如果要连带引用类型一起复制，需要添加底下一条代码，如果不加就对于是复制了引用地址        user.phones = (ArrayList&lt;String&gt;) this.phones.clone();//设置深复制        return user;    &#125; catch (CloneNotSupportedException e) &#123;        e.printStackTrace();    &#125;    return null;&#125;//省略所有属性Git Set方法......</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>测试复制<br>package com.lijie;</p><p>import java.util.ArrayList;</p><p>public class Client {<br>    public static void main(String[] args) {<br>        &#x2F;&#x2F;创建User原型对象<br>        User user &#x3D; new User();<br>        user.setName(“李三”);<br>        user.setPassword(“123456”);<br>        ArrayList<String> phones &#x3D; new ArrayList&lt;&gt;();<br>        phones.add(“17674553302”);<br>        user.setPhones(phones);</p><pre><code class="hljs">    //copy一个user对象,并且对象的属性    User user2 = user.clone();    user2.setPassword(&quot;654321&quot;);    //查看俩个对象是否是一个    System.out.println(user == user2);    //查看属性内容    System.out.println(user.getName() + &quot; | &quot; + user2.getName());    System.out.println(user.getPassword() + &quot; | &quot; + user2.getPassword());    //查看对于引用类型拷贝    System.out.println(user.getPhones() == user2.getPhones());&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>如果不需要深复制，需要删除User 中的<br>&#x2F;&#x2F;默认引用类型为浅复制，这是设置了深复制<br>user.phones &#x3D; (ArrayList<String>) this.phones.clone();<br>1<br>2</p><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="1-什么是策略模式"><a href="#1-什么是策略模式" class="headerlink" title="1.什么是策略模式"></a>1.什么是策略模式</h3><p>定义了一系列的算法 或 逻辑 或 相同意义的操作，并将每一个算法、逻辑、操作封装起来，而且使它们还可以相互替换。（其实策略模式Java中用的非常非常广泛）</p><p>我觉得主要是为了 简化 if…else 所带来的复杂和难以维护。</p><h3 id="2-策略模式应用场景"><a href="#2-策略模式应用场景" class="headerlink" title="2.策略模式应用场景"></a>2.策略模式应用场景</h3><p>策略模式的用意是针对一组算法或逻辑，将每一个算法或逻辑封装到具有共同接口的独立的类中，从而使得它们之间可以相互替换。<br>例如：我要做一个不同会员打折力度不同的三种策略，初级会员，中级会员，高级会员（三种不同的计算）。</p><p>例如：我要一个支付模块，我要有微信支付、支付宝支付、银联支付等</p><h3 id="3-策略模式的优点和缺点"><a href="#3-策略模式的优点和缺点" class="headerlink" title="3.策略模式的优点和缺点"></a>3.策略模式的优点和缺点</h3><p>优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性非常良好。</p><p>缺点： 1、策略类会增多。 2、所有策略类都需要对外暴露。</p><h3 id="4-代码演示-1"><a href="#4-代码演示-1" class="headerlink" title="4.代码演示"></a>4.代码演示</h3><p>模拟支付模块有微信支付、支付宝支付、银联支付<br>定义抽象的公共方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lijie;<br><br><span class="hljs-comment">//策略模式 定义抽象方法 所有支持公共接口</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PayStrategy</span> &#123;<br><br><span class="hljs-comment">// 支付逻辑方法</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">algorithmInterface</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>定义实现微信支付</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.lijie;·<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PayStrategyA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">PayStrategy</span> </span>&#123;<br><br>void algorithmInterface() &#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;微信支付&quot;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>定义实现支付宝支付</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.lijie;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PayStrategyB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">PayStrategy</span> </span>&#123;<br><br>void algorithmInterface() &#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;支付宝支付&quot;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>定义实现银联支付</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.lijie;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PayStrategyC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">PayStrategy</span> </span>&#123;<br><br>void algorithmInterface() &#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;银联支付&quot;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>定义下文维护算法策略</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.lijie;<span class="hljs-comment">// 使用上下文维护算法策略</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Context</span> </span>&#123;<br><br>PayStrategy strategy;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Context</span><span class="hljs-params">(PayStrategy strategy)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.strategy = strategy;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">algorithmInterface</span><span class="hljs-params">()</span> </span>&#123;<br>strategy.algorithmInterface();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>运行测试<br>package com.lijie;</p><p>class ClientTestStrategy {<br>    public static void main(String[] args) {<br>        Context context;<br>        &#x2F;&#x2F;使用支付逻辑A<br>        context &#x3D; new Context(new PayStrategyA());<br>        context.algorithmInterface();<br>        &#x2F;&#x2F;使用支付逻辑B<br>        context &#x3D; new Context(new PayStrategyB());<br>        context.algorithmInterface();<br>        &#x2F;&#x2F;使用支付逻辑C<br>        context &#x3D; new Context(new PayStrategyC());<br>        context.algorithmInterface();<br>    }<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16</p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="1-什么是观察者模式"><a href="#1-什么是观察者模式" class="headerlink" title="1.什么是观察者模式"></a>1.什么是观察者模式</h3><p>先讲什么是行为性模型，行为型模式关注的是系统中对象之间的相互交互，解决系统在运行时对象之间的相互通信和协作，进一步明确对象的职责。</p><p>观察者模式，是一种行为性模型，又叫发布-订阅模式，他定义对象之间一种一对多的依赖关系，使得当一个对象改变状态，则所有依赖于它的对象都会得到通知并自动更新。</p><h3 id="2-模式的职责"><a href="#2-模式的职责" class="headerlink" title="2.模式的职责"></a>2.模式的职责</h3><p>观察者模式主要用于1对N的通知。当一个对象的状态变化时，他需要及时告知一系列对象，令他们做出相应。<br>实现有两种方式：</p><p>推：每次都会把通知以广播的方式发送给所有观察者，所有的观察者只能被动接收。<br>拉：观察者只要知道有情况即可，至于什么时候获取内容，获取什么内容，都可以自主决定。</p><h3 id="3-观察者模式应用场景"><a href="#3-观察者模式应用场景" class="headerlink" title="3.观察者模式应用场景"></a>3.观察者模式应用场景</h3><p>关联行为场景，需要注意的是，关联行为是可拆分的，而不是“组合”关系。事件多级触发场景。<br>跨系统的消息交换场景，如消息队列、事件总线的处理机制。</p><h3 id="4-代码实现观察者模式"><a href="#4-代码实现观察者模式" class="headerlink" title="4.代码实现观察者模式"></a>4.代码实现观察者模式</h3><p>定义抽象观察者，每一个实现该接口的实现类都是具体观察者。<br>package com.lijie;</p><p>&#x2F;&#x2F;观察者的接口，用来存放观察者共有方法<br>public interface Observer {<br>    &#x2F;&#x2F; 观察者方法<br>    void update(int state);<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>定义具体观察者<br>package com.lijie;</p><p>&#x2F;&#x2F; 具体观察者<br>public class ObserverImpl implements Observer {</p><pre><code class="hljs">// 具体观察者的属性private int myState;public void update(int state) &#123;    myState=state;    System.out.println(&quot;收到消息,myState值改为：&quot;+state);&#125;public int getMyState() &#123;    return myState;&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>定义主题。主题定义观察者数组，并实现增、删及通知操作。<br>package com.lijie;</p><p>import java.util.Vector;</p><p>&#x2F;&#x2F;定义主题，以及定义观察者数组，并实现增、删及通知操作。<br>public class Subjecct {<br>    &#x2F;&#x2F;观察者的存储集合，不推荐ArrayList，线程不安全，<br>    private Vector<Observer> list &#x3D; new Vector&lt;&gt;();</p><pre><code class="hljs">// 注册观察者方法public void registerObserver(Observer obs) &#123;    list.add(obs);&#125;// 删除观察者方法public void removeObserver(Observer obs) &#123;    list.remove(obs);&#125;// 通知所有的观察者更新public void notifyAllObserver(int state) &#123;    for (Observer observer : list) &#123;        observer.update(state);    &#125;&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>定义具体的，他继承继承Subject类，在这里实现具体业务，在具体项目中，该类会有很多。<br>package com.lijie;</p><p>&#x2F;&#x2F;具体主题<br>public class RealObserver extends Subjecct {<br>    &#x2F;&#x2F;被观察对象的属性<br>     private int state;<br>     public int getState(){<br>         return state;<br>     }<br>     public void  setState(int state){<br>         this.state&#x3D;state;<br>         &#x2F;&#x2F;主题对象(目标对象)值发生改变<br>         this.notifyAllObserver(state);<br>     }<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>运行测试<br>package com.lijie;</p><p>public class Client {</p><pre><code class="hljs">public static void main(String[] args) &#123;    // 目标对象    RealObserver subject = new RealObserver();    // 创建多个观察者    ObserverImpl obs1 = new ObserverImpl();    ObserverImpl obs2 = new ObserverImpl();    ObserverImpl obs3 = new ObserverImpl();    // 注册到观察队列中    subject.registerObserver(obs1);    subject.registerObserver(obs2);    subject.registerObserver(obs3);    // 改变State状态    subject.setState(300);    System.out.println(&quot;obs1观察者的MyState状态值为：&quot;+obs1.getMyState());    System.out.println(&quot;obs2观察者的MyState状态值为：&quot;+obs2.getMyState());    System.out.println(&quot;obs3观察者的MyState状态值为：&quot;+obs3.getMyState());    // 改变State状态    subject.setState(400);    System.out.println(&quot;obs1观察者的MyState状态值为：&quot;+obs1.getMyState());    System.out.println(&quot;obs2观察者的MyState状态值为：&quot;+obs2.getMyState());    System.out.println(&quot;obs3观察者的MyState状态值为：&quot;+obs3.getMyState());&#125;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>文章就到这了，没错，没了<br>察者方法<br>public void removeObserver(Observer obs) {<br>list.remove(obs);<br>}</p><p>&#x2F;&#x2F; 通知所有的观察者更新<br>public void notifyAllObserver(int state) {<br>    for (Observer observer : list) {<br>        observer.update(state);<br>    }<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>}</p><ol start="4"><li>定义具体的，他继承继承Subject类，在这里实现具体业务，在具体项目中，该类会有很多。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lijie;<br><br><span class="hljs-comment">//具体主题</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealObserver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Subjecct</span> &#123;<br>    <span class="hljs-comment">//被观察对象的属性</span><br> <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> state;<br> <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getState</span><span class="hljs-params">()</span>&#123;<br> <span class="hljs-keyword">return</span> state;<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">setState</span><span class="hljs-params">(<span class="hljs-type">int</span> state)</span>&#123;<br> <span class="hljs-built_in">this</span>.state=state;<br> <span class="hljs-comment">//主题对象(目标对象)值发生改变</span><br> <span class="hljs-built_in">this</span>.notifyAllObserver(state);<br> &#125;<br>&#125;<br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br><span class="hljs-number">6</span><br><span class="hljs-number">7</span><br><span class="hljs-number">8</span><br><span class="hljs-number">9</span><br><span class="hljs-number">10</span><br><span class="hljs-number">11</span><br><span class="hljs-number">12</span><br><span class="hljs-number">13</span><br><span class="hljs-number">14</span><br><span class="hljs-number">15</span><br><span class="hljs-number">16</span><br><span class="hljs-number">17</span><br>运行测试<br><span class="hljs-keyword">package</span> com.lijie;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 目标对象</span><br><span class="hljs-type">RealObserver</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealObserver</span>();<br><span class="hljs-comment">// 创建多个观察者</span><br><span class="hljs-type">ObserverImpl</span> <span class="hljs-variable">obs1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObserverImpl</span>();<br><span class="hljs-type">ObserverImpl</span> <span class="hljs-variable">obs2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObserverImpl</span>();<br><span class="hljs-type">ObserverImpl</span> <span class="hljs-variable">obs3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObserverImpl</span>();<br><span class="hljs-comment">// 注册到观察队列中</span><br>subject.registerObserver(obs1);<br>subject.registerObserver(obs2);<br>subject.registerObserver(obs3);<br><span class="hljs-comment">// 改变State状态</span><br>subject.setState(<span class="hljs-number">300</span>);<br>System.out.println(<span class="hljs-string">&quot;obs1观察者的MyState状态值为：&quot;</span>+obs1.getMyState());<br>System.out.println(<span class="hljs-string">&quot;obs2观察者的MyState状态值为：&quot;</span>+obs2.getMyState());<br>System.out.println(<span class="hljs-string">&quot;obs3观察者的MyState状态值为：&quot;</span>+obs3.getMyState());<br><span class="hljs-comment">// 改变State状态</span><br>subject.setState(<span class="hljs-number">400</span>);<br>System.out.println(<span class="hljs-string">&quot;obs1观察者的MyState状态值为：&quot;</span>+obs1.getMyState());<br>System.out.println(<span class="hljs-string">&quot;obs2观察者的MyState状态值为：&quot;</span>+obs2.getMyState());<br>System.out.println(<span class="hljs-string">&quot;obs3观察者的MyState状态值为：&quot;</span>+obs3.getMyState());<br>&#125;<br>&#125;<br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br><span class="hljs-number">6</span><br><span class="hljs-number">7</span><br><span class="hljs-number">8</span><br><span class="hljs-number">9</span><br><span class="hljs-number">10</span><br><span class="hljs-number">11</span><br><span class="hljs-number">12</span><br><span class="hljs-number">13</span><br><span class="hljs-number">14</span><br><span class="hljs-number">15</span><br><span class="hljs-number">16</span><br><span class="hljs-number">17</span><br><span class="hljs-number">18</span><br><span class="hljs-number">19</span><br><span class="hljs-number">20</span><br><span class="hljs-number">21</span><br><span class="hljs-number">22</span><br><span class="hljs-number">23</span><br><span class="hljs-number">24</span><br><span class="hljs-number">25</span><br><span class="hljs-number">26</span><br><span class="hljs-number">27</span><br>文章就到这了，没错，没了<br>如果不是必要，准备上面那九个设计模式就好了，全部记住有点难<br>————————————————<br>版权声明：本文为CSDN博主「小杰要吃蛋」的原创文章，遵循CC <span class="hljs-number">4.0</span> BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：https:<span class="hljs-comment">//blog.csdn.net/weixin_43122090/article/details/105462226</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="为什么用自增列作为主键"><a href="#为什么用自增列作为主键" class="headerlink" title="为什么用自增列作为主键"></a>为什么用自增列作为主键</h3><ol><li>如果我们定义了主键(PRIMARY KEY)，那么InnoDB会选择主键作为聚集索引、如果没有显式定义主键，则InnoDB会选择第一个不包含有NULL值的唯一索引作为主键索引、如果也没有这样的唯一索引，则InnoDB会选择内置6字节长的ROWID作为隐含的聚集索引(ROWID随着行记录的写入而主键递增，这个ROWID不像ORACLE的ROWID那样可引用，是隐含的)。</li><li>数据记录本身被存于主索引（一颗B+Tree）的叶子节点上。这就要求同一个叶子节点内（大小为一个内存页或磁盘页）的各条数据记录按主键顺序存放，因此每当有一条新的记录插入时，MySQL会根据其主键将其插入适当的节点和位置，如果页面达到装载因子（InnoDB默认为15&#x2F;16），则开辟一个新的页（节点）</li><li>如果表使用自增主键，那么每次插入新的记录，记录就会顺序添加到当前索引节点的后续位置，当一页写满，就会自动开辟一个新的页</li><li>如果使用非自增主键（如果身份证号或学号等），由于每次插入主键的值近似于随机，因此每次新纪录都要被插到现有索引页得中间某个位置，此时MySQL不得不为了将新记录插到合适位置而移动数据，甚至目标页面可能已经被回写到磁盘上而从缓存中清掉，此时又要从磁盘上读回来，这增加了很多开销，同时频繁的移动、分页操作造成了大量的碎片，得到了不够紧凑的索引结构，后续不得不通过OPTIMIZE TABLE来重建表并优化填充页面。</li></ol><h3 id="为什么使用数据索引能提高效率"><a href="#为什么使用数据索引能提高效率" class="headerlink" title="为什么使用数据索引能提高效率"></a>为什么使用数据索引能提高效率</h3><ol><li>数据索引的存储是有序的</li><li>在有序的情况下，通过索引查询一个数据是无需遍历索引记录的</li><li>极端情况下，数据索引的查询效率为二分法查询效率，趋近于 log2(N)</li></ol><h3 id="B-树索引和哈希索引的区别"><a href="#B-树索引和哈希索引的区别" class="headerlink" title="B+树索引和哈希索引的区别"></a>B+树索引和哈希索引的区别</h3><p>B+树是一个平衡的多叉树，从根节点到每个叶子节点的高度差值不超过1，而且同层级的节点间有指针相互链接，是有序的</p><p><img src="/images%5CBplusTree.jpg" alt="图片"></p><p>哈希索引就是采用一定的哈希算法，把键值换算成新的哈希值，检索时不需要类似B+树那样从根节点到叶子节点逐级查找，只需一次哈希算法即可,是无序的</p><p><img src="/images%5CHashTree.jpg" alt="图片"></p><p>哈希索引的优势：</p><p>**<br>**</p><ol><li>等值查询。哈希索引具有绝对优势（前提是：没有大量重复键值，如果大量重复键值时，哈希索引的效率很低，因为存在所谓的哈希碰撞问题。）</li></ol><p>**<br>**</p><p>哈希索引不适用的场景：</p><p>**<br>**</p><ol><li>不支持范围查询</li><li>不支持索引完成排序</li><li>不支持联合索引的最左前缀匹配规则</li></ol><p>通常，B+树索引结构适用于绝大多数场景，像下面这种场景用哈希索引才更有优势：</p><p>在HEAP表中，如果存储的数据重复度很低（也就是说基数很大），对该列数据以等值查询为主，没有范围查询、没有排序的时候，特别适合采用哈希索引，例如这种SQL：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> id,<span class="hljs-type">name</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;李明&#x27;</span>; — 仅等值查询<br></code></pre></td></tr></table></figure><p>而常用的InnoDB引擎中默认使用的是B+树索引，它会实时监控表上索引的使用情况，如果认为建立哈希索引可以提高查询效率，则自动在内存中的“自适应哈希索引缓冲区”建立哈希索引（在InnoDB中默认开启自适应哈希索引），通过观察搜索模式，MySQL会利用index key的前缀建立哈希索引，如果一个表几乎大部分都在缓冲池中，那么建立一个哈希索引能够加快等值查询。</p><p>注意：在某些工作负载下，通过哈希索引查找带来的性能提升远大于额外的监控索引搜索情况和保持这个哈希表结构所带来的开销。但某些时候，在负载高的情况下，自适应哈希索引中添加的read&#x2F;write锁也会带来竞争，比如高并发的join操作。like操作和%的通配符操作也不适用于自适应哈希索引，可能要关闭自适应哈希索引。</p><h2 id="B树和B-树的区别"><a href="#B树和B-树的区别" class="headerlink" title="B树和B+树的区别"></a><strong>B树和B+树的区别</strong></h2><ol><li><p>B树，每个节点都存储key和data，所有节点组成这棵树，并且叶子节点指针为nul，叶子结点不包含任何关键字信息。</p><p><img src="https://mmbiz.qpic.cn/mmbiz/QCu849YTaIOqRD2H1iceraQdQroRXcW1YPNQD2iaD2ia5JniapuyYCvyAmfLwv9mjSDqM5yr0D8jo7MKnPxuH5yMsg/640?wx_fmt=other&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p></li><li><p>B+树，所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大的顺序链接，所有的非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键字。 (而B 树的非终节点也包含需要查找的有效信息)</p></li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz/QCu849YTaIOqRD2H1iceraQdQroRXcW1YAfMEG02fjvBN4BYXlicxVrSwfjxMb49yrtVlQf2ZXiaHcxkXjibo2Vd2w/640?wx_fmt=other&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="为什么说-B-比-B-树更适合实际应用中操作系统的文件索引和数据库索引？"><a href="#为什么说-B-比-B-树更适合实际应用中操作系统的文件索引和数据库索引？" class="headerlink" title="为什么说 B+ 比 B 树更适合实际应用中操作系统的文件索引和数据库索引？"></a><strong>为什么说 B+ 比 B 树更适合实际应用中操作系统的文件索引和数据库索引？</strong></h2><ol><li>B+的磁盘读写代价更低 B+的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。</li><li>B+-tree的查询效率更加稳定 由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</li></ol><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="MySQL联合索引"><a href="#MySQL联合索引" class="headerlink" title="MySQL联合索引"></a><strong>MySQL联合索引</strong></h2><ol><li>联合索引是两个或更多个列上的索引。对于联合索引:Mysql从左到右的使用索引中的字段，一个查询可以只使用索引中的一部份，但只能是最左侧部分。例如索引是key index (a,b,c). 可以支持a  、   a,b  、  a,b,c 3种组合进行查找，但不支持 b,c进行查找 .当最左侧字段是常量引用时，索引就十分有效。</li><li>利用索引中的附加列，您可以缩小搜索的范围，但使用一个具有两列的索引 不同于使用两个单独的索引。复合索引的结构与电话簿类似，人名由姓和名构成，电话簿首先按姓氏对进行排序，然后按名字对有相同姓氏的人进行排序。如果您知 道姓，电话簿将非常有用；如果您知道姓和名，电话簿则更为有用，但如果您只知道名不姓，电话簿将没有用处。</li></ol><h2 id="什么情况下应不建或少建索引"><a href="#什么情况下应不建或少建索引" class="headerlink" title="什么情况下应不建或少建索引"></a><strong>什么情况下应不建或少建索引</strong></h2><ol><li>表记录太少</li><li>经常插入、删除、修改的表</li><li>数据重复且分布平均的表字段，假如一个表有10万行记录，有一个字段A只有T和F两种值，且每个值的分布概率大约为50%，那么对这种表A字段建索引一般不会提高数据库的查询速度。</li><li>经常和主字段一块查询但主字段索引值比较多的表字段</li></ol><h2 id="MySQL分区"><a href="#MySQL分区" class="headerlink" title="MySQL分区"></a><strong>MySQL分区</strong></h2><h3 id="一-什么是表分区？"><a href="#一-什么是表分区？" class="headerlink" title="一. 什么是表分区？"></a>一. 什么是表分区？</h3><p>表分区，是指根据一定规则，将数据库中的一张表分解成多个更小的，容易管理的部分。从逻辑上看，只有一张表，但是底层却是由多个物理分区组成。</p><h3 id="二-表分区与分表的区别"><a href="#二-表分区与分表的区别" class="headerlink" title="二. 表分区与分表的区别"></a>二. 表分区与分表的区别</h3><p>分表：指的是通过一定规则，将一张表分解成多张不同的表。比如将用户订单记录根据时间成多个表。</p><p>分表与分区的区别在于：分区从逻辑上来讲只有一张表，而分表则是将一张表分解成多张表。</p><h3 id="三-表分区有什么好处？"><a href="#三-表分区有什么好处？" class="headerlink" title="三. 表分区有什么好处？"></a>三. 表分区有什么好处？</h3><ol><li>分区表的数据可以分布在不同的物理设备上，从而高效地利用多个硬件设备。 2. 和单个磁盘或者文件系统相比，可以存储更多数据</li><li>优化查询。在where语句中包含分区条件时，可以只扫描一个或多个分区表来提高查询效率；涉及sum和count语句时，也可以在多个分区上并行处理，最后汇总结果。</li><li>分区表更容易维护。例如：想批量删除大量数据可以清除整个分区。</li><li>可以使用分区表来避免某些特殊的瓶颈，例如InnoDB的单个索引的互斥访问，ext3问价你系统的inode锁竞争等。</li></ol><h3 id="四-分区表的限制因素"><a href="#四-分区表的限制因素" class="headerlink" title="四. 分区表的限制因素"></a>四. 分区表的限制因素</h3><ol><li>一个表最多只能有1024个分区</li><li>MySQL5.1中，分区表达式必须是整数，或者返回整数的表达式。在MySQL5.5中提供了非整数表达式分区的支持。</li><li>如果分区字段中有主键或者唯一索引的列，那么多有主键列和唯一索引列都必须包含进来。即：分区字段要么不包含主键或者索引列，要么包含全部主键和索引列。</li><li>分区表中无法使用外键约束</li><li>MySQL的分区适用于一个表的所有数据和索引，不能只对表数据分区而不对索引分区，也不能只对索引分区而不对表分区，也不能只对表的一部分数据分区。</li></ol><h3 id="五-如何判断当前MySQL是否支持分区？"><a href="#五-如何判断当前MySQL是否支持分区？" class="headerlink" title="五. 如何判断当前MySQL是否支持分区？"></a>五. 如何判断当前MySQL是否支持分区？</h3><p>命令：show variables like ‘%partition%’ 运行结果:</p><p>mysql&gt; show variables like ‘%partition%’; +——————-+——-+ | Variable_name   | Value | +——————-+——-+ | have_partitioning | YES  | +——————-+——-+ 1 row in set (0.00 sec) have_partintioning 的值为YES，表示支持分区。</p><h3 id="六-MySQL支持的分区类型有哪些？"><a href="#六-MySQL支持的分区类型有哪些？" class="headerlink" title="六. MySQL支持的分区类型有哪些？"></a>六. MySQL支持的分区类型有哪些？</h3><ol><li>RANGE分区： 这种模式允许将数据划分不同范围。例如可以将一个表通过年份划分成若干个分区</li><li>LIST分区： 这种模式允许系统通过预定义的列表的值来对数据进行分割。按照List中的值分区，与RANGE的区别是，range分区的区间范围值是连续的。</li><li>HASH分区 ：这中模式允许通过对表的一个或多个列的Hash Key进行计算，最后通过这个Hash码不同数值对应的数据区域进行分区。例如可以建立一个对表主键进行分区的表。</li><li>KEY分区 ：上面Hash模式的一种延伸，这里的Hash Key是MySQL系统产生的。</li></ol><h2 id="四种隔离级别"><a href="#四种隔离级别" class="headerlink" title="四种隔离级别"></a><strong>四种隔离级别</strong></h2><ol><li>Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。</li><li>Repeatable read (可重复读)：可避免脏读、不可重复读的发生。</li><li>Read committed (读已提交)：可避免脏读的发生。</li><li>Read uncommitted (读未提交)：最低级别，任何情况都无法保证。</li></ol><h2 id="关于MVVC"><a href="#关于MVVC" class="headerlink" title="关于MVVC"></a><strong>关于MVVC</strong></h2><p>MySQL InnoDB 存储引擎，实现的是基于多版本的并发控制协议—— MVCC (Multi-Version Concurrency Control)  (注：与MVCC相对的，是基于锁的并发控制，Lock-Based Concurrency Control)。MVCC最大的好处：读不加锁，读写不冲突。在读多写少的OLTP应用中，读写不冲突是非常重要的，极大的增加了系统的并发性能，现阶段几乎所有的RDBMS，都支持了 MVCC。</p><ol><li>LBCC：Lock-Based Concurrency Control，基于锁的并发控制。</li><li>MVCC：Multi-Version Concurrency Control，基于多版本的并发控制协议。纯粹基于锁的并发机制并发量低，MVCC是在基于锁的并发控制上的改进，主要是在读操作上提高了并发量。</li></ol><p>在MVCC并发控制中，读操作可以分成两类：</p><ol><li>快照读 (snapshot read)：读取的是记录的可见版本 (有可能是历史版本)，不用加锁（共享读锁s锁也不加，所以不会阻塞其他事务的写）。</li><li>当前读 (current read)：读取的是记录的最新版本，并且，当前读返回的记录，都会加上锁，保证其他事务不会再并发修改这条记录。</li></ol><h2 id="行级锁定的优点："><a href="#行级锁定的优点：" class="headerlink" title="行级锁定的优点："></a><strong>行级锁定的优点：</strong></h2><ol><li>当在许多线程中访问不同的行时只存在少量锁定冲突。</li><li>回滚时只有少量的更改</li><li>可以长时间锁定单一的行。</li></ol><h2 id="行级锁定的缺点："><a href="#行级锁定的缺点：" class="headerlink" title="行级锁定的缺点："></a><strong>行级锁定的缺点：</strong></h2><ol><li>比页级或表级锁定占用更多的内存。</li><li>当在表的大部分中使用时，比页级或表级锁定速度慢，因为你必须获取更多的锁。</li><li>如果你在大部分数据上经常进行GROUP BY操作或者必须经常扫描整个表，比其它锁定明显慢很多。</li><li>用高级别锁定，通过支持不同的类型锁定，你也可以很容易地调节应用程序，因为其锁成本小于行级锁定。</li></ol><h2 id="MySQL触发器简单实例"><a href="#MySQL触发器简单实例" class="headerlink" title="MySQL触发器简单实例"></a><strong>MySQL触发器简单实例</strong></h2><ol><li>CREATE TRIGGER &lt;触发器名称&gt;  –触发器必须有名字，最多64个字符，可能后面会附有分隔符.它和MySQL中其他对象的命名方式基本相象.</li><li>{ BEFORE | AFTER }  –触发器有执行的时间设置：可以设置为事件发生前或后。</li><li>{ INSERT | UPDATE | DELETE }  –同样也能设定触发的事件：它们可以在执行insert、update或delete的过程中触发。</li><li>ON &lt;表名称&gt;  –触发器是属于某一个表的:当在这个表上执行插入、 更新或删除操作的时候就导致触发器的激活. 我们不能给同一张表的同一个事件安排两个触发器。</li><li>FOR EACH ROW  –触发器的执行间隔：FOR EACH ROW子句通知触发器 每隔一行执行一次动作，而不是对整个表执行一次。</li><li>&lt;触发器SQL语句&gt;  –触发器包含所要触发的SQL语句：这里的语句可以是任何合法的语句， 包括复合语句，但是这里的语句受的限制和函数的一样。</li></ol><h2 id="什么是存储过程"><a href="#什么是存储过程" class="headerlink" title="什么是存储过程"></a><strong>什么是存储过程</strong></h2><p>简单的说，就是一组SQL语句集，功能强大，可以实现一些比较复杂的逻辑功能，类似于JAVA语言中的方法；</p><p>ps:存储过程跟触发器有点类似，都是一组SQL集，但是存储过程是主动调用的，且功能比触发器更加强大，触发器是某件事触发后自动调用；</p><p>有哪些特性</p><ol><li>有输入输出参数，可以声明变量，有if&#x2F;else, case,while等控制语句，通过编写存储过程，可以实现复杂的逻辑功能；</li><li>函数的普遍特性：模块化，封装，代码复用；</li><li>速度快，只有首次执行需经过编译和优化步骤，后续被调用可以直接执行，省去以上步骤；</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> IF <span class="hljs-keyword">EXISTS</span> `proc_adder`;<br>DELIMITER ;;<br><span class="hljs-keyword">CREATE</span> DEFINER<span class="hljs-operator">=</span>`root`@`localhost` <span class="hljs-keyword">PROCEDURE</span> `proc_adder`(<span class="hljs-keyword">IN</span> a <span class="hljs-type">int</span>, <span class="hljs-keyword">IN</span> b <span class="hljs-type">int</span>, <span class="hljs-keyword">OUT</span> sum <span class="hljs-type">int</span>)<br><span class="hljs-keyword">BEGIN</span><br>   #Routine body goes here...<br><br>   <span class="hljs-keyword">DECLARE</span> c <span class="hljs-type">int</span>;<br>   if a <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">set</span> a <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">end</span> if;<br> <br>   if b <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">set</span> b <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">end</span> if;<br><br>   <span class="hljs-keyword">set</span> sum  <span class="hljs-operator">=</span> a <span class="hljs-operator">+</span> b;<br><span class="hljs-keyword">END</span><br>;;<br>DELIMITER ;<br><br><span class="hljs-keyword">set</span> <span class="hljs-variable">@b</span><span class="hljs-operator">=</span><span class="hljs-number">5</span>;<br><span class="hljs-keyword">call</span> proc_adder(<span class="hljs-number">0</span>,<span class="hljs-variable">@b</span>,<span class="hljs-variable">@s</span>);<br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@s</span> <span class="hljs-keyword">as</span> sum;<br><br><br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tab2(<br>  tab2_id <span class="hljs-type">varchar</span>(<span class="hljs-number">11</span>)<br>);<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TRIGGER</span> if <span class="hljs-keyword">EXISTS</span> t_ai_on_tab1;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">TRAILING</span> t_ai_on_tab1<br>AFTER <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> tab1<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span><br><span class="hljs-keyword">BEGIN</span><br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab2(tab2_id) <span class="hljs-keyword">values</span>(new.tab1_id);<br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab1(tab1_id) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;0001&#x27;</span>);<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tab2;<br></code></pre></td></tr></table></figure><h2 id="MySQL优化"><a href="#MySQL优化" class="headerlink" title="MySQL优化"></a><strong>MySQL优化</strong></h2><ol><li>开启查询缓存，优化查询</li><li>explain你的select查询，这可以帮你分析你的查询语句或是表结构的性能瓶颈。EXPLAIN 的查询结果还会告诉你你的索引主键被如何利用的，你的数据表是如何被搜索和排序的</li><li>当只要一行数据时使用limit 1，MySQL数据库引擎会在找到一条数据后停止搜索，而不是继续往后查少下一条符合记录的数据</li><li>为搜索字段建索引</li><li>使用 ENUM 而不是 VARCHAR，如果你有一个字段，比如“性别”，“国家”，“民族”，“状态”或“部门”，你知道这些字段的取值是有限而且固定的，那么，你应该使用 ENUM 而不是VARCHAR。</li><li>Prepared Statements Prepared Statements很像存储过程，是一种运行在后台的SQL语句集合，我们可以从使用 prepared statements 获得很多好处，无论是性能问题还是安全问题。Prepared Statements 可以检查一些你绑定好的变量，这样可以保护你的程序不会受到“SQL注入式”攻击</li><li>垂直分表</li><li>选择正确的存储引擎</li></ol><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="key和index的区别"><a href="#key和index的区别" class="headerlink" title="key和index的区别"></a><strong>key和index的区别</strong></h2><ol><li>key 是数据库的物理结构，它包含两层意义和作用，一是约束（偏重于约束和规范数据库的结构完整性），二是索引（辅助查询用的）。包括primary key, unique key, foreign key 等</li><li>index是数据库的物理结构，它只是辅助查询的，它创建时会在另外的表空间（mysql中的innodb表空间）以一个类似目录的结构存储。索引要分类的话，分为前缀索引、全文本索引等；</li></ol><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><h2 id="Mysql-中-MyISAM-和-InnoDB-的区别有哪些？"><a href="#Mysql-中-MyISAM-和-InnoDB-的区别有哪些？" class="headerlink" title="Mysql 中 MyISAM 和 InnoDB 的区别有哪些？"></a><strong>Mysql 中 MyISAM 和 InnoDB 的区别有哪些？</strong></h2><p>区别：</p><ol><li>InnoDB支持事务，MyISAM不支持，对于InnoDB每一条SQL语言都默认封装成事务，自动提交，这样会影响速度，所以最好把多条SQL语言放在begin和commit之间，组成一个事务；</li><li>InnoDB支持外键，而MyISAM不支持。对一个包含外键的InnoDB表转为MYISAM会失败；</li><li>InnoDB是聚集索引，数据文件是和索引绑在一起的，必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。而MyISAM是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的。</li><li>InnoDB不保存表的具体行数，执行select count(*) from table时需要全表扫描。而MyISAM用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快；</li><li>Innodb不支持全文索引，而MyISAM支持全文索引，查询效率上MyISAM要高；</li></ol><p>如何选择：</p><ol><li>是否要支持事务，如果要请选择innodb，如果不需要可以考虑MyISAM；</li><li>如果表中绝大多数都只是读查询，可以考虑MyISAM，如果既有读写也挺频繁，请使用InnoDB。</li><li>系统奔溃后，MyISAM恢复起来更困难，能否接受；</li><li>MySQL5.5版本开始Innodb已经成为Mysql的默认引擎(之前是MyISAM)，说明其优势是有目共睹的，如果你不知道用什么，那就用InnoDB，至少不会差。</li></ol><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><h2 id="数据库表创建注意事项"><a href="#数据库表创建注意事项" class="headerlink" title="数据库表创建注意事项"></a><strong>数据库表创建注意事项</strong></h2><h3 id="一、字段名及字段配制合理性"><a href="#一、字段名及字段配制合理性" class="headerlink" title="一、字段名及字段配制合理性"></a>一、字段名及字段配制合理性</h3><ol><li>剔除关系不密切的字段</li><li>字段命名要有规则及相对应的含义（不要一部分英文，一部分拼音，还有类似a.b.c这样不明含义的字段）</li><li>字段命名尽量不要使用缩写（大多数缩写都不能明确字段含义）</li><li>字段不要大小写混用（想要具有可读性，多个英文单词可使用下划线形式连接）</li><li>字段名不要使用保留字或者关键字</li><li>保持字段名和类型的一致性</li><li>慎重选择数字类型</li><li>给文本字段留足余量</li></ol><h3 id="-4"><a href="#-4" class="headerlink" title=""></a></h3><h3 id="二、系统特殊字段处理及建成后建议"><a href="#二、系统特殊字段处理及建成后建议" class="headerlink" title="二、系统特殊字段处理及建成后建议"></a>二、系统特殊字段处理及建成后建议</h3><ol><li>添加删除标记（例如操作人、删除时间）</li><li>建立版本机制</li></ol><h3 id="-5"><a href="#-5" class="headerlink" title=""></a></h3><h3 id="三、表结构合理性配置"><a href="#三、表结构合理性配置" class="headerlink" title="三、表结构合理性配置"></a>三、表结构合理性配置</h3><ol><li>多型字段的处理，就是表中是否存在字段能够分解成更小独立的几部分（例如：人可以分为男人和女人）</li><li>多值字段的处理，可以将表分为三张表，这样使得检索和排序更加有调理，且保证数据的完整性！</li></ol><h3 id="-6"><a href="#-6" class="headerlink" title=""></a></h3><h3 id="四、其它建议"><a href="#四、其它建议" class="headerlink" title="四、其它建议"></a>四、其它建议</h3><ol><li>对于大数据字段，独立表进行存储，以便影响性能（例如：简介字段）</li><li>使用varchar类型代替char，因为varchar会动态分配长度，char指定长度是固定的。</li><li>给表创建主键，对于没有主键的表，在查询和索引定义上有一定的影响。</li><li>避免表字段运行为null，建议设置默认值（例如：int类型设置默认值为0）在索引查询上，效率立显！</li><li>建立索引，最好建立在唯一和非空的字段上，建立太多的索引对后期插入、更新都存在一定的影响（考虑实际情况来创建）。</li></ol><h2 id="-7"><a href="#-7" class="headerlink" title=""></a></h2><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a><strong>Redis</strong></h2><h2 id="Redis单线程问题"><a href="#Redis单线程问题" class="headerlink" title="Redis单线程问题"></a><strong>Redis单线程问题</strong></h2><p>单线程指的是网络请求模块使用了一个线程（所以不需考虑并发安全性），即一个线程处理所有网络请求，其他模块仍用了多个线程。</p><h2 id="为什么说Redis能够快速执行"><a href="#为什么说Redis能够快速执行" class="headerlink" title="为什么说Redis能够快速执行"></a><strong>为什么说Redis能够快速执行</strong></h2><ol><li>绝大部分请求是纯粹的内存操作（非常快速）</li><li>采用单线程,避免了不必要的上下文切换和竞争条件</li><li>非阻塞IO - IO多路复用</li></ol><h2 id="Redis的内部实现"><a href="#Redis的内部实现" class="headerlink" title="Redis的内部实现"></a><strong>Redis的内部实现</strong></h2><p>内部实现采用epoll，采用了epoll+自己实现的简单的事件框架。epoll中的读、写、关闭、连接都转化成了事件，然后利用epoll的多路复用特性，不在io上浪费一点时间 这3个条件不是相互独立的，特别是第一条，如果请求都是耗时的，采用单线程吞吐量及性能很差。redis为特殊的场景选择了合适的技术方案。</p><h2 id="-8"><a href="#-8" class="headerlink" title=""></a></h2><h2 id="Redis关于线程安全问题"><a href="#Redis关于线程安全问题" class="headerlink" title="Redis关于线程安全问题"></a><strong>Redis关于线程安全问题</strong></h2><p>redis实际上是采用了线程封闭的观念，把任务封闭在一个线程，自然避免了线程安全问题，不过对于需要依赖多个redis操作的复合操作来说，依然需要锁，而且有可能是分布式锁。</p><h2 id="使用Redis有哪些好处？"><a href="#使用Redis有哪些好处？" class="headerlink" title="使用Redis有哪些好处？"></a><strong>使用Redis有哪些好处？</strong></h2><ol><li>速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)</li><li>支持丰富数据类型，支持string，list，set，sorted set，hash</li><li>支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行</li><li>丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</li></ol><h2 id="redis相比memcached有哪些优势？"><a href="#redis相比memcached有哪些优势？" class="headerlink" title="redis相比memcached有哪些优势？"></a><strong>redis相比memcached有哪些优势？</strong></h2><ol><li>memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型</li><li>redis的速度比memcached快很多</li><li>redis可以持久化其数据</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li><li>使用底层模型不同，它们之间底层实现方式 以及与客户端之间通信的应用协议不一样。Redis直接自己构建了VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。</li><li>value大小：redis最大可以达到1GB，而memcache只有1MB</li></ol><h2 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a><strong>Redis主从复制</strong></h2><p>过程原理：</p><ol><li>当从库和主库建立MS关系后,会向主数据库发送SYNC命令</li><li>主库接收到SYNC命令后会开始在后台保存快照(RDB持久化过程),并将期间接收到的写命令缓存起来</li><li>当快照完成后,主Redis会将快照文件和所有缓存的写命令发送给从Redis</li><li>从Redis接收到后,会载入快照文件并且执行收到的缓存的命令</li><li>之后,主Redis每当接收到写命令时就会将命令发送从Redis，从而保证数据的一致</li></ol><p>缺点：所有的slave节点数据的复制和同步都由master节点来处理,会照成master节点压力太大,使用主从从结构来解决</p><h2 id="Redis两种持久化方式的优缺点"><a href="#Redis两种持久化方式的优缺点" class="headerlink" title="Redis两种持久化方式的优缺点"></a><strong>Redis两种持久化方式的优缺点</strong></h2><ol><li>RDB 持久化可以在指定的时间间隔内生成数据集的时间点快照（point-in-time snapshot）</li><li>AOF 持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。</li><li>Redis 还可以同时使用 AOF 持久化和 RDB 持久化。当redis重启时,它会有限使用AOF文件来还原数据集,因为AOF文件保存的数据集通常比RDB文件所保存的数据集更加完整</li></ol><p>**<br>**</p><p><strong>RDB的优点：</strong></p><p>**<br>**</p><ol><li>RDB 是一个非常紧凑（compact）的文件，它保存了 Redis 在某个时间点上的数据集。 这种文件非常适合用于进行备份： 比如说，你可以在最近的 24 小时内，每小时备份一次 RDB 文件，并且在每个月的每一天，也备份一个 RDB 文件。 这样的话，即使遇上问题，也可以随时将数据集还原到不同的版本。</li><li>RDB 非常适用于灾难恢复（disaster recovery）：它只有一个文件，并且内容都非常紧凑，可以（在加密后）将它传送到别的数据中心，或者亚马逊 S3 中。</li><li>RDB 可以最大化 Redis 的性能：父进程在保存 RDB 文件时唯一要做的就是 fork 出一个子进程，然后这个子进程就会处理接下来的所有保存工作，父进程无须执行任何磁盘 I&#x2F;O 操作。</li><li>RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快</li></ol><h2 id="-9"><a href="#-9" class="headerlink" title=""></a></h2><h2 id="Redis常见的性能问题都有哪些？如何解决？"><a href="#Redis常见的性能问题都有哪些？如何解决？" class="headerlink" title="Redis常见的性能问题都有哪些？如何解决？"></a><strong>Redis常见的性能问题都有哪些？如何解决？</strong></h2><ol><li>Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照。</li><li>Master AOF持久化，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，AOF文件过大会影响Master重启的恢复速度。Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。</li><li>Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。</li><li>Redis主从复制的性能问题，为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内</li></ol><h2 id="-10"><a href="#-10" class="headerlink" title=""></a></h2><h2 id="Redis提供6种数据淘汰策略"><a href="#Redis提供6种数据淘汰策略" class="headerlink" title="Redis提供6种数据淘汰策略"></a><strong>Redis提供6种数据淘汰策略</strong></h2><ol><li>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li><li>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li><li>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li><li>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</li><li>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</li><li>no-enviction（驱逐）：禁止驱逐数据</li></ol><h1 id="史上最全的数据库面试题，不看绝对后悔"><a href="#史上最全的数据库面试题，不看绝对后悔" class="headerlink" title="史上最全的数据库面试题，不看绝对后悔"></a><a href="https://www.cnblogs.com/wenxiaofei/p/9853682.html">史上最全的数据库面试题，不看绝对后悔</a></h1><h1 id="数据库面试知识点汇总"><a href="#数据库面试知识点汇总" class="headerlink" title="数据库面试知识点汇总"></a>数据库面试知识点汇总</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><h4 id="1-主键、外键、超键、候选键"><a href="#1-主键、外键、超键、候选键" class="headerlink" title="1.主键、外键、超键、候选键"></a><strong>1.主键、外键、超键、候选键</strong></h4><blockquote><p><strong>超键</strong>：在关系中能唯一标识元组的属性集称为关系模式的超键。一个属性可以为作为一个超键，多个属性组合在一起也可以作为一个超键。超键包含候选键和主键。</p><p><strong>候选键</strong>：是最小超键，即没有冗余元素的超键。</p><p><strong>主键</strong>：数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合。一个数据列只能有一个主键，且主键的取值不能缺失，即不能为空值（Null）。</p><p><strong>外键</strong>：在一个表中存在的另一个表的主键称此表的外键。</p></blockquote><h4 id="2-为什么用自增列作为主键"><a href="#2-为什么用自增列作为主键" class="headerlink" title="2.为什么用自增列作为主键"></a><strong>2.为什么用自增列作为主键</strong></h4><blockquote><p>如果我们定义了主键(PRIMARY KEY)，那么InnoDB会选择主键作为聚集索引、</p><p>如果没有显式定义主键，则InnoDB会选择第一个不包含有NULL值的唯一索引作为主键索引、</p><p>如果也没有这样的唯一索引，则InnoDB会选择内置6字节长的ROWID作为隐含的聚集索引(ROWID随着行记录的写入而主键递增，这个ROWID不像ORACLE的ROWID那样可引用，是隐含的)。</p><p>数据记录本身被存于主索引（一颗B+Tree）的叶子节点上。这就要求同一个叶子节点内（大小为一个内存页或磁盘页）的各条数据记录按主键顺序存放，因此每当有一条新的记录插入时，MySQL会根据其主键将其插入适当的节点和位置，如果页面达到装载因子（InnoDB默认为15&#x2F;16），则开辟一个新的页（节点）</p><p>如果表使用自增主键，那么每次插入新的记录，记录就会顺序添加到当前索引节点的后续位置，当一页写满，就会自动开辟一个新的页</p><p>如果使用非自增主键（如果身份证号或学号等），由于每次插入主键的值近似于随机，因此每次新纪录都要被插到现有索引页得中间某个位置，此时MySQL不得不为了将新记录插到合适位置而移动数据，甚至目标页面可能已经被回写到磁盘上而从缓存中清掉，此时又要从磁盘上读回来，这增加了很多开销，同时频繁的移动、分页操作造成了大量的碎片，得到了不够紧凑的索引结构，后续不得不通过OPTIMIZE TABLE来重建表并优化填充页面。</p></blockquote><h4 id="3-触发器的作用？"><a href="#3-触发器的作用？" class="headerlink" title="3.触发器的作用？"></a><strong>3.触发器的作用？</strong></h4><blockquote><p>触发器是一种特殊的存储过程，主要是通过事件来触发而被执行的。它可以强化约束，来维护数据的完整性和一致性，可以跟踪数据库内的操作从而不允许未经许可的更新和变化。可以联级运算。如，某表上的触发器上包含对另一个表的数据操作，而该操作又会导致该表触发器被触发。</p></blockquote><h4 id="4-什么是存储过程？用什么来调用？"><a href="#4-什么是存储过程？用什么来调用？" class="headerlink" title="4.什么是存储过程？用什么来调用？"></a><strong>4.什么是存储过程？用什么来调用？</strong></h4><blockquote><p>存储过程是一个预编译的SQL语句，优点是允许模块化的设计，就是说只需创建一次，以后在该程序中就可以调用多次。如果某次操作需要执行多次SQL，使用存储过程比单纯SQL语句执行要快。</p><p><strong>调用：</strong></p><p>1）可以用一个命令对象来调用存储过程。</p><p>2）可以供外部程序调用，比如：java程序。</p></blockquote><h4 id="5-存储过程的优缺点？"><a href="#5-存储过程的优缺点？" class="headerlink" title="5.存储过程的优缺点？"></a><strong>5.存储过程的优缺点？</strong></h4><blockquote><p><strong>优点：</strong></p><p>1）存储过程是预编译过的，执行效率高。</p><p>2）存储过程的代码直接存放于数据库中，通过存储过程名直接调用，减少网络通讯。</p><p>3）安全性高，执行存储过程需要有一定权限的用户。</p><p>4）存储过程可以重复使用，可减少数据库开发人员的工作量。</p><p><strong>缺点：</strong>移植性差</p></blockquote><h4 id="6-存储过程与函数的区别"><a href="#6-存储过程与函数的区别" class="headerlink" title="6.存储过程与函数的区别"></a><strong>6.存储过程与函数的区别</strong></h4><p><img src="https://i.imgur.com/ymE9HPJ.png" alt="img"></p><h4 id="7-什么叫视图？游标是什么？"><a href="#7-什么叫视图？游标是什么？" class="headerlink" title="7.什么叫视图？游标是什么？"></a><strong>7.什么叫视图？游标是什么？</strong></h4><blockquote><p><strong>视图：</strong></p><p>是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，试图通常是有一个表或者多个表的行或列的子集。对视图的修改会影响基本表。它使得我们获取数据更容易，相比多表查询。</p><p><strong>游标：</strong></p><p>是对查询出来的结果集作为一个单元来有效的处理。游标可以定在该单元中的特定行，从结果集的当前行检索一行或多行。可以对结果集当前行做修改。一般不使用游标，但是需要逐条处理数据的时候，游标显得十分重要。</p></blockquote><h4 id="8-视图的优缺点"><a href="#8-视图的优缺点" class="headerlink" title="8.视图的优缺点"></a><strong>8.视图的优缺点</strong></h4><blockquote><p><strong>优点：</strong></p><p>1对数据库的访问，因为视图可以有选择性的选取数据库里的一部分。</p><p>2)用户通过简单的查询可以从复杂查询中得到结果。</p><p>3)维护数据的独立性，试图可从多个表检索数据。</p><p>4)对于相同的数据可产生不同的视图。</p><p><strong>缺点：</strong></p><p>性能：查询视图时，必须把视图的查询转化成对基本表的查询，如果这个视图是由一个复杂的多表查询所定义，那么，那么就无法更改数据</p></blockquote><h4 id="9-drop、truncate、-delete区别"><a href="#9-drop、truncate、-delete区别" class="headerlink" title="9.drop、truncate、 delete区别"></a><strong>9.drop、truncate、 delete区别</strong></h4><blockquote><p><strong>最基本：</strong></p><ul><li>drop直接删掉表。</li><li>truncate删除表中数据，再插入时自增长id又从1开始。</li><li>delete删除表中数据，可以加where字句。</li></ul><p>（1） DELETE语句执行删除的过程是每次从表中删除一行，并且同时将该行的删除操作作为事务记录在日志中保存以便进行进行回滚操作。TRUNCATE TABLE 则一次性地从表中删除所有的数据并不把单独的删除操作记录记入日志保存，删除行是不能恢复的。并且在删除的过程中不会激活与表有关的删除触发器。执行速度快。</p><p>（2） 表和索引所占空间。当表被TRUNCATE 后，这个表和索引所占用的空间会恢复到初始大小，而DELETE操作不会减少表或索引所占用的空间。drop语句将表所占用的空间全释放掉。</p><p>（3） 一般而言，drop &gt; truncate &gt; delete</p><p>（4） 应用范围。TRUNCATE 只能对TABLE；DELETE可以是table和view</p><p>（5） TRUNCATE 和DELETE只删除数据，而DROP则删除整个表（结构和数据）。</p><p>（6） truncate与不带where的delete ：只删除数据，而不删除表的结构（定义）drop语句将删除表的结构被依赖的约束（constrain),触发器（trigger)索引（index);依赖于该表的存储过程&#x2F;函数将被保留，但其状态会变为：invalid。</p><p>（7） delete语句为DML（data maintain Language),这个操作会被放到 rollback segment中,事务提交后才生效。如果有相应的 tigger,执行的时候将被触发。</p><p>（8） truncate、drop是DLL（data define language),操作立即生效，原数据不放到 rollback segment中，不能回滚。</p><p>（9） 在没有备份情况下，谨慎使用 drop 与 truncate。要删除部分数据行采用delete且注意结合where来约束影响范围。回滚段要足够大。要删除表用drop;若想保留表而将表中数据删除，如果于事务无关，用truncate即可实现。如果和事务有关，或老师想触发trigger,还是用delete。</p><p>（10） Truncate table 表名 速度快,而且效率高,因为:?truncate table 在功能上与不带 WHERE 子句的 DELETE 语句相同：二者均删除表中的全部行。但 TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少。DELETE 语句每次删除一行，并在事务日志中为所删除的每行记录一项。TRUNCATE TABLE 通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。</p><p>（11） TRUNCATE TABLE 删除表中的所有行，但表结构及其列、约束、索引等保持不变。新行标识所用的计数值重置为该列的种子。如果想保留标识计数值，请改用 DELETE。如果要删除表定义及其数据，请使用 DROP TABLE 语句。</p><p>（12） 对于由 FOREIGN KEY 约束引用的表，不能使用 TRUNCATE TABLE，而应使用不带 WHERE 子句的 DELETE 语句。由于 TRUNCATE TABLE 不记录在日志中，所以它不能激活触发器。</p></blockquote><h4 id="10-什么是临时表，临时表什么时候删除"><a href="#10-什么是临时表，临时表什么时候删除" class="headerlink" title="10.什么是临时表，临时表什么时候删除?"></a><strong>10.什么是临时表，临时表什么时候删除?</strong></h4><blockquote><p><strong>临时表可以手动删除：</strong><br>DROP TEMPORARY TABLE IF EXISTS temp_tb;</p><p><strong>临时表只在当前连接可见，当关闭连接时，MySQL会自动删除表并释放所有空间。因此在不同的连接中可以创建同名的临时表，并且操作属于本连接的临时表。<br>创建临时表的语法与创建表语法类似，不同之处是增加关键字TEMPORARY，</strong></p><p>如：</p><p>CREATE TEMPORARY TABLE tmp_table (</p><p>NAME VARCHAR (10) NOT NULL,</p><p>time date NOT NULL<br>);</p><p>select * from tmp_table;</p></blockquote><h4 id="11-非关系型数据库和关系型数据库区别，优势比较"><a href="#11-非关系型数据库和关系型数据库区别，优势比较" class="headerlink" title="11.非关系型数据库和关系型数据库区别，优势比较?"></a><strong>11.非关系型数据库和关系型数据库区别，优势比较?</strong></h4><blockquote><p><strong>非关系型数据库的优势：</strong></p><ul><li><strong>性能：</strong>NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。</li><li><strong>可扩展性：</strong>同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。</li></ul><p><strong>关系型数据库的优势：</strong></p><ul><li><strong>复杂查询：</strong>可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。</li><li><strong>事务支持：</strong>使得对于安全性能很高的数据访问要求得以实现。</li></ul><p><strong>其他：</strong></p><p>**1.**对于这两类数据库，对方的优势就是自己的弱势，反之亦然。</p><p>**2.**NOSQL数据库慢慢开始具备SQL数据库的一些复杂查询功能，比如MongoDB。</p><p>**3.**对于事务的支持也可以用一些系统级的原子操作来实现例如乐观锁之类的方法来曲线救国，比如Redis set nx。</p></blockquote><h4 id="12-数据库范式，根据某个场景设计数据表"><a href="#12-数据库范式，根据某个场景设计数据表" class="headerlink" title="12.数据库范式，根据某个场景设计数据表?"></a><strong>12.数据库范式，根据某个场景设计数据表?</strong></h4><blockquote><p><strong>第一范式:</strong>(确保每列保持原子性)所有字段值都是不可分解的原子值。</p><p>第一范式是最基本的范式。如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。<br>第一范式的合理遵循需要根据系统的实际需求来定。比如某些数据库系统中需要用到“地址”这个属性，本来直接将“地址”属性设计成一个数据库表的字段就行。但是如果系统经常会访问“地址”属性中的“城市”部分，那么就非要将“地址”这个属性重新拆分为省份、城市、详细地址等多个部分进行存储，这样在对地址中某一部分操作的时候将非常方便。这样设计才算满足了数据库的第一范式，如下表所示。<br>上表所示的用户信息遵循了第一范式的要求，这样在对用户使用城市进行分类的时候就非常方便，也提高了数据库的性能。</p><p><strong>第二范式:</strong>(确保表中的每列都和主键相关)在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。</p><p>第二范式在第一范式的基础之上更进一层。第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。<br>比如要设计一个订单信息表，因为订单中可能会有多种商品，所以要将订单编号和商品编号作为数据库表的联合主键。</p><p><strong>第三范式:</strong>(确保每列都和主键列直接相关,而不是间接相关) 数据表中的每一列数据都和主键直接相关，而不能间接相关。</p><p>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。<br>比如在设计一个订单数据表的时候，可以将客户编号作为一个外键和订单表建立相应的关系。而不可以在订单表中添加关于客户其它信息（比如姓名、所属公司等）的字段。</p><p>**BCNF:**符合3NF，并且，主属性不依赖于主属性。</p><p>若关系模式属于第二范式，且每个属性都不传递依赖于键码，则R属于BC范式。<br>通常BC范式的条件有多种等价的表述：每个非平凡依赖的左边必须包含键码；每个决定因素必须包含键码。<br>BC范式既检查非主属性，又检查主属性。当只检查非主属性时，就成了第三范式。满足BC范式的关系都必然满足第三范式。<br>还可以这么说：若一个关系达到了第三范式，并且它只有一个候选码，或者它的每个候选码都是单属性，则该关系自然达到BC范式。<br>一般，一个数据库设计符合3NF或BCNF就可以了。</p><p>**第四范式:**要求把同一表内的多对多关系删除。</p><p>**第五范式:**从最终结构重新建立原始结构。</p></blockquote><h4 id="13-什么是-内连接、外连接、交叉连接、笛卡尔积等"><a href="#13-什么是-内连接、外连接、交叉连接、笛卡尔积等" class="headerlink" title="13.什么是 内连接、外连接、交叉连接、笛卡尔积等?"></a><strong>13.什么是 内连接、外连接、交叉连接、笛卡尔积等?</strong></h4><blockquote><p><strong>内连接:</strong> 只连接匹配的行</p><p><strong>左外连接:</strong> 包含左边表的全部行（不管右边的表中是否存在与它们匹配的行），以及右边表中全部匹配的行</p><p><strong>右外连接:</strong> 包含右边表的全部行（不管左边的表中是否存在与它们匹配的行），以及左边表中全部匹配的行</p><p>例如1：<br>SELECT a.<em>,b.</em> FROM luntan LEFT JOIN usertable as b ON a.username&#x3D;b.username</p><p>例如2：<br>SELECT a.<em>,b.</em> FROM city as a FULL OUTER JOIN user as b ON a.username&#x3D;b.username</p><p><strong>全外连接:</strong> 包含左、右两个表的全部行，不管另外一边的表中是否存在与它们匹配的行。</p><p><strong>交叉连接:</strong> 生成笛卡尔积－它不使用任何匹配或者选取条件，而是直接将一个数据源中的每个行与另一个数据源的每个行都一一匹配</p><p>例如：<br>SELECT type,pub_name FROM titles CROSS JOIN publishers ORDER BY type</p><p><strong>注意：</strong></p><p>很多公司都只是考察是否知道其概念，但是也有很多公司需要不仅仅知道概念，还需要动手写sql,一般都是简单的连接查询，具体关于连接查询的sql练习，参见以下链接：</p><p><a href="https://www.nowcoder.com/ta/sql">牛客网数据库SQL实战</a></p><p><a href="https://leetcode-cn.com/problemset/database/">leetcode中文网站数据库练习</a></p><p><a href="http://www.baidu.com/">我的另一篇文章，常用sql练习50题</a></p></blockquote><h4 id="14-varchar和char的使用场景"><a href="#14-varchar和char的使用场景" class="headerlink" title="14.varchar和char的使用场景?"></a><strong>14.varchar和char的使用场景?</strong></h4><blockquote><p>**1.**char的长度是不可变的，而varchar的长度是可变的。</p></blockquote><blockquote><p>定义一个char[10]和varchar[10]。<br>如果存进去的是‘csdn’,那么char所占的长度依然为10，除了字符‘csdn’外，后面跟六个空格，varchar就立马把长度变为4了，取数据的时候，char类型的要用trim()去掉多余的空格，而varchar是不需要的。</p><p>**2.**char的存取数度还是要比varchar要快得多，因为其长度固定，方便程序的存储与查找。<br>char也为此付出的是空间的代价，因为其长度固定，所以难免会有多余的空格占位符占据空间，可谓是以空间换取时间效率。<br>varchar是以空间效率为首位。</p><p>**3.**char的存储方式是：对英文字符（ASCII）占用1个字节，对一个汉字占用两个字节。<br>varchar的存储方式是：对每个英文字符占用2个字节，汉字也占用2个字节。</p><p>**4.**两者的存储数据都非unicode的字符数据。</p></blockquote><h4 id="15-SQL语言分类"><a href="#15-SQL语言分类" class="headerlink" title="15.SQL语言分类"></a><strong>15.SQL语言分类</strong></h4><blockquote><p><strong>SQL语言共分为四大类：</strong></p><ul><li>数据查询语言DQL</li><li>数据操纵语言DML</li><li>数据定义语言DDL</li><li>数据控制语言DCL。</li></ul><p><strong>1. 数据查询语言DQL</strong></p><p>数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE子句组成的查询块：</p><p>SELECT<br>FROM<br>WHERE</p><p><strong>2 .数据操纵语言DML</strong></p><p>数据操纵语言DML主要有三种形式：</p><ol><li>插入：INSERT</li><li>更新：UPDATE</li><li>删除：DELETE</li></ol><p><strong>3. 数据定义语言DDL</strong></p><p>数据定义语言DDL用来创建数据库中的各种对象—–表、视图、索引、同义词、聚簇等如：<br>CREATE TABLE&#x2F;VIEW&#x2F;INDEX&#x2F;SYN&#x2F;CLUSTER</p><p>表 视图 索引 同义词 簇</p><p>DDL操作是隐性提交的！不能rollback</p><p><strong>4. 数据控制语言DCL</strong></p><p>数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制数据库操纵事务发生的时间及效果，对数据库实行监视等。如：</p><ol><li>GRANT：授权。</li><li>ROLLBACK [WORK] TO [SAVEPOINT]：回退到某一点。回滚—ROLLBACK；回滚命令使数据库状态回到上次最后提交的状态。其格式为：<br>SQL&gt;ROLLBACK;</li><li>COMMIT [WORK]：提交。</li></ol><p>在数据库的插入、删除和修改操作时，只有当事务在提交到数据<br>库时才算完成。在事务提交前，只有操作数据库的这个人才能有权看<br>到所做的事情，别人只有在最后提交完成后才可以看到。<br>提交数据有三种类型：显式提交、隐式提交及自动提交。下面分<br>别说明这三种类型。</p><p>(1) 显式提交<br>用COMMIT命令直接完成的提交为显式提交。其格式为：<br>SQL&gt;COMMIT；</p><p>(2) 隐式提交<br>用SQL命令间接完成的提交为隐式提交。这些命令是：<br>ALTER，AUDIT，COMMENT，CONNECT，CREATE，DISCONNECT，DROP，<br>EXIT，GRANT，NOAUDIT，QUIT，REVOKE，RENAME。</p><p>(3) 自动提交<br>若把AUTOCOMMIT设置为ON，则在插入、修改、删除语句执行后，<br>系统将自动进行提交，这就是自动提交。其格式为：<br>SQL&gt;SET AUTOCOMMIT ON；</p><p>参考文章：<br><a href="https://www.cnblogs.com/study-s/p/5287529.html">https://www.cnblogs.com/study-s/p/5287529.html</a></p></blockquote><h4 id="16-like-和-的区别"><a href="#16-like-和-的区别" class="headerlink" title="16.like %和-的区别"></a><strong>16.like %和-的区别</strong></h4><blockquote><p><strong>通配符的分类:</strong></p><p>**%百分号通配符:**表示任何字符出现任意次数(可以是0次).</p><p>**_下划线通配符:**表示只能匹配单个字符,不能多也不能少,就是一个字符.</p><p><strong>like操作符:</strong> LIKE作用是指示mysql后面的搜索模式是利用通配符而不是直接相等匹配进行比较.</p><p><strong>注意:</strong> 如果在使用like操作符时,后面的没有使用通用匹配符效果是和&#x3D;一致的,SELECT * FROM products WHERE products.prod_name like ‘1000’;<br>只能匹配的结果为1000,而不能匹配像JetPack 1000这样的结果.</p><ul><li>%通配符使用: 匹配以”yves”开头的记录:(包括记录”yves”) SELECT <em>FROM products WHERE products.prod_name like ‘yves%’;<br>匹配包含”yves”的记录(包括记录”yves”) SELECT</em> FROM products WHERE products.prod_name like ‘%yves%’;<br>匹配以”yves”结尾的记录(包括记录”yves”,不包括记录”yves “,也就是yves后面有空格的记录,这里需要注意) SELECT * FROM products WHERE products.prod_name like ‘%yves’;</li><li><em>通配符使用: SELECT *FROM products WHERE products.prod_name like ‘_yves’; 匹配结果为: 像”yyves”这样记录.<br>SELECT* FROM products WHERE products.prod*name like ‘yves</em>*’; 匹配结果为: 像”yvesHe”这样的记录.(一个下划线只能匹配一个字符,不能多也不能少)</li></ul><p><strong>注意事项:</strong></p><ul><li>注意大小写,在使用模糊匹配时,也就是匹配文本时,mysql是可能区分大小的,也可能是不区分大小写的,这个结果是取决于用户对MySQL的配置方式.如果是区分大小写,那么像YvesHe这样记录是不能被”yves__”这样的匹配条件匹配的.</li><li>注意尾部空格,”%yves”是不能匹配”heyves “这样的记录的.</li><li>注意NULL,%通配符可以匹配任意字符,但是不能匹配NULL,也就是说SELECT * FROM products WHERE products.prod_name like ‘%;是匹配不到products.prod_name为NULL的的记录.</li></ul><p><strong>技巧与建议:</strong></p><p>正如所见， MySQL的通配符很有用。但这种功能是有代价的：通配符搜索的处理一般要比前面讨论的其他搜索所花时间更长。这里给出一些使用通配符要记住的技巧。</p><ul><li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该 使用其他操作符。</li><li>在确实需要使用通配符时，除非绝对有必要，否则不要把它们用 在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起 来是最慢的。</li><li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数.</li></ul></blockquote><p>参考博文：<a href="https://blog.csdn.net/u011479200/article/details/78513632">https://blog.csdn.net/u011479200/article/details/78513632</a></p><h4 id="17-count-、count-1-、count-column-的区别"><a href="#17-count-、count-1-、count-column-的区别" class="headerlink" title="17.count(*)、count(1)、count(column)的区别"></a><strong>17.count(*)、count(1)、count(column)的区别</strong></h4><blockquote><ul><li>count(*)对行的数目进行计算,包含NULL</li><li>count(column)对特定的列的值具有的行数进行计算,不包含NULL值。</li><li>count()还有一种使用方式,count(1)这个用法和count(*)的结果是一样的。</li></ul><p><strong>性能问题:</strong></p><p>1.任何情况下SELECT COUNT(*) FROM tablename是最优选择;</p><p>2.尽量减少SELECT COUNT(*) FROM tablename WHERE COL &#x3D; ‘value’ 这种查询;</p><p>3.杜绝SELECT COUNT(COL) FROM tablename WHERE COL2 &#x3D; ‘value’ 的出现。</p><ul><li>如果表没有主键,那么count(1)比count(*)快。</li><li>如果有主键,那么count(主键,联合主键)比count(*)快。</li><li>如果表只有一个字段,count(*)最快。</li></ul><p>count(1)跟count(主键)一样,只扫描主键。count(*)跟count(非主键)一样,扫描整个表。明显前者更快一些。</p></blockquote><h4 id="18-最左前缀原则"><a href="#18-最左前缀原则" class="headerlink" title="18.最左前缀原则"></a><strong>18.最左前缀原则</strong></h4><blockquote><p><strong>多列索引：</strong></p><p>ALTER TABLE people ADD INDEX lname_fname_age (lame,fname,age);</p><p>为了提高搜索效率，我们需要考虑运用多列索引,由于索引文件以B－Tree格式保存，所以我们不用扫描任何记录，即可得到最终结果。</p><p>注：在mysql中执行查询时，只能使用一个索引，如果我们在lname,fname,age上分别建索引,执行查询时，只能使用一个索引，mysql会选择一个最严格(获得结果集记录数最少)的索引。</p><p><strong>最左前缀原则：</strong>顾名思义，就是最左优先，上例中我们创建了lname_fname_age多列索引,相当于创建了(lname)单列索引，(lname,fname)组合索引以及(lname,fname,age)组合索引。</p></blockquote><h2 id="二、索引"><a href="#二、索引" class="headerlink" title="二、索引"></a>二、索引</h2><h4 id="1-什么是索引？"><a href="#1-什么是索引？" class="headerlink" title="1.什么是索引？"></a><strong>1.什么是索引？</strong></h4><blockquote><p><strong>何为索引：</strong></p><p>数据库索引，是数据库管理系统中一个排序的数据结构，索引的实现通常使用B树及其变种B+树。</p><p>在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。</p></blockquote><h4 id="2-索引的作用？它的优点缺点是什么？"><a href="#2-索引的作用？它的优点缺点是什么？" class="headerlink" title="2.索引的作用？它的优点缺点是什么？"></a><strong>2.索引的作用？它的优点缺点是什么？</strong></h4><blockquote><p><strong>索引作用：</strong></p><p>协助快速查询、更新数据库表中数据。</p><p>为表设置索引要付出代价的：</p><ul><li>一是增加了数据库的存储空间</li><li>二是在插入和修改数据时要花费较多的时间(因为索引也要随之变动)。</li></ul></blockquote><h4 id="3-索引的优缺点？"><a href="#3-索引的优缺点？" class="headerlink" title="3.索引的优缺点？"></a>3.索引的优缺点？</h4><p><strong>创建索引可以大大提高系统的性能（优点）：</strong></p><p>1.通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</p><p>2.可以大大加快数据的检索速度，这也是创建索引的最主要的原因。</p><p>3.可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。</p><p>4.在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。</p><p>5.通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</p><p><strong>增加索引也有许多不利的方面(缺点)：</strong></p><p>1.创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。</p><p>2.索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。</p><p>3.当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。</p><h4 id="4-哪些列适合建立索引、哪些不适合建索引？"><a href="#4-哪些列适合建立索引、哪些不适合建索引？" class="headerlink" title="4.哪些列适合建立索引、哪些不适合建索引？"></a><strong>4.哪些列适合建立索引、哪些不适合建索引？</strong></h4><blockquote><p>索引是建立在数据库表中的某些列的上面。在创建索引的时候，应该考虑在哪些列上可以创建索引，在哪些列上不能创建索引。</p><p><strong>一般来说，应该在这些列上创建索引：</strong></p><p>（1）在经常需要搜索的列上，可以加快搜索的速度；</p><p>（2）在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构；</p><p>（3）在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度；</p><p>（4）在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的；</p><p>（5）在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间；</p><p>（6）在经常使用在WHERE子句中的列上面创建索引，加快条件的判断速度。</p><p><strong>对于有些列不应该创建索引：</strong></p><p>（1）对于那些在查询中很少使用或者参考的列不应该创建索引。</p><p>这是因为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。</p><p>（2）对于那些只有很少数据值的列也不应该增加索引。</p><p>这是因为，由于这些列的取值很少，例如人事表的性别列，在查询的结果中，结果集的数据行占了表中数据行的很大比例，即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。</p><p>（3）对于那些定义为 text, image 和 bit 数据类型的列不应该增加索引。</p><p>这是因为，这些列的数据量要么相当大，要么取值很少。</p><p>(4)当修改性能远远大于检索性能时，不应该创建索引。</p><p>这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改性能远远大于检索性能时，不应该创建索引。</p></blockquote><h4 id="5-什么样的字段适合建索引"><a href="#5-什么样的字段适合建索引" class="headerlink" title="5.什么样的字段适合建索引"></a><strong>5.什么样的字段适合建索引</strong></h4><blockquote><p>唯一、不为空、经常被查询的字段</p><h4 id="6-MySQL-B-Tree索引和Hash索引的区别"><a href="#6-MySQL-B-Tree索引和Hash索引的区别" class="headerlink" title="6.MySQL B+Tree索引和Hash索引的区别?"></a>6.MySQL B+Tree索引和Hash索引的区别?</h4><p><strong>Hash索引和B+树索引的特点：</strong></p><ul><li>Hash索引结构的特殊性，其检索效率非常高，索引的检索可以一次定位;</li><li>B+树索引需要从根节点到枝节点，最后才能访问到页节点这样多次的IO访问;</li></ul><p><strong>为什么不都用Hash索引而使用B+树索引？</strong></p><ol><li>Hash索引仅仅能满足”&#x3D;”,”IN”和””查询，不能使用范围查询,因为经过相应的Hash算法处理之后的Hash值的大小关系，并不能保证和Hash运算前完全一样；</li><li>Hash索引无法被用来避免数据的排序操作，因为Hash值的大小关系并不一定和Hash运算前的键值完全一样；</li><li>Hash索引不能利用部分索引键查询，对于组合索引，Hash索引在计算Hash值的时候是组合索引键合并后再一起计算Hash值，而不是单独计算Hash值，所以通过组合索引的前面一个或几个索引键进行查询的时候，Hash索引也无法被利用；</li><li>Hash索引在任何时候都不能避免表扫描，由于不同索引键存在相同Hash值，所以即使取满足某个Hash键值的数据的记录条数，也无法从Hash索引中直接完成查询，还是要回表查询数据；</li><li>Hash索引遇到大量Hash值相等的情况后性能并不一定就会比B+树索引高。</li></ol><p><strong>补充：</strong></p><p>1.MySQL中，只有HEAP&#x2F;MEMORY引擎才显示支持Hash索引。</p><p>2.常用的InnoDB引擎中默认使用的是B+树索引，它会实时监控表上索引的使用情况，如果认为建立哈希索引可以提高查询效率，则自动在内存中的“自适应哈希索引缓冲区”建立哈希索引（在InnoDB中默认开启自适应哈希索引），通过观察搜索模式，MySQL会利用index key的前缀建立哈希索引，如果一个表几乎大部分都在缓冲池中，那么建立一个哈希索引能够加快等值查询。<br>B+树索引和哈希索引的明显区别是：</p><p>3.如果是等值查询，那么哈希索引明显有绝对优势，因为只需要经过一次算法即可找到相应的键值；当然了，这个前提是，键值都是唯一的。如果键值不是唯一的，就需要先找到该键所在位置，然后再根据链表往后扫描，直到找到相应的数据；</p><p>4.如果是范围查询检索，这时候哈希索引就毫无用武之地了，因为原先是有序的键值，经过哈希算法后，有可能变成不连续的了，就没办法再利用索引完成范围查询检索；<br>同理，哈希索引没办法利用索引完成排序，以及like ‘xxx%’ 这样的部分模糊查询（这种部分模糊查询，其实本质上也是范围查询）；</p><p>5.哈希索引也不支持多列联合索引的最左匹配规则；</p><p>6.B+树索引的关键字检索效率比较平均，不像B树那样波动幅度大，在有大量重复键值情况下，哈希索引的效率也是极低的，因为存在所谓的哈希碰撞问题。</p><p>7.在大多数场景下，都会有范围查询、排序、分组等查询特征，用B+树索引就可以了。</p></blockquote><h4 id="7-B树和B-树的区别"><a href="#7-B树和B-树的区别" class="headerlink" title="7.B树和B+树的区别"></a><strong>7.B树和B+树的区别</strong></h4><blockquote><ol><li>B树，每个节点都存储key和data，所有节点组成这棵树，并且叶子节点指针为nul，叶子结点不包含任何关键字信息。<br><img src="https://i.imgur.com/RbzI0R8.jpg" alt="img"></li><li>B+树，所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大的顺序链接，所有的非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键字。 (而B 树的非终节点也包含需要查找的有效信息)<br><img src="https://i.imgur.com/9VbnDME.jpg" alt="img"></li></ol></blockquote><h4 id="8-为什么说B-比B树更适合实际应用中操作系统的文件索引和数据库索引？"><a href="#8-为什么说B-比B树更适合实际应用中操作系统的文件索引和数据库索引？" class="headerlink" title="8.为什么说B+比B树更适合实际应用中操作系统的文件索引和数据库索引？"></a><strong>8.为什么说B+比B树更适合实际应用中操作系统的文件索引和数据库索引？</strong></h4><blockquote><p><strong>1.B+的磁盘读写代价更低</strong></p><p>B+的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。</p><p><strong>2.B+tree的查询效率更加稳定</strong></p><p>由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</p></blockquote><h4 id="9-聚集索引和非聚集索引区别"><a href="#9-聚集索引和非聚集索引区别" class="headerlink" title="9.聚集索引和非聚集索引区别?"></a><strong>9.聚集索引和非聚集索引区别?</strong></h4><blockquote><p><strong>聚合索引(clustered index):</strong></p><p>聚集索引<strong>表记录的排列顺序和索引的排列顺序一致，所以查询效率快，</strong>只要找到第一个索引值记录，其余就连续性的记录在物理也一样连续存放。聚集索引对应的缺点就是修改慢，因为为了保证表中记录的物理和索引顺序一致，在记录插入的时候，会对数据页重新排序。<br>聚集索引类似于新华字典中用拼音去查找汉字，拼音检索表于书记顺序都是按照a~z排列的，就像相同的逻辑顺序于物理顺序一样，当你需要查找a,ai两个读音的字，或是想一次寻找多个傻(sha)的同音字时，也许向后翻几页，或紧接着下一行就得到结果了。</p><p><strong>非聚合索引(nonclustered index):</strong></p><p>非聚集索引<strong>指定了表中记录的逻辑顺序，但是记录的物理和索引不一定一致，</strong>两种索引都采用B+树结构，非聚集索引的叶子层并不和实际数据页相重叠，而采用叶子层包含一个指向表中的记录在数据页中的指针方式。非聚集索引层次多，不会造成数据重排。<br>非聚集索引类似在新华字典上通过偏旁部首来查询汉字，检索表也许是按照横、竖、撇来排列的，但是由于正文中是a~z的拼音顺序，所以就类似于逻辑地址于物理地址的不对应。同时适用的情况就在于分组，大数目的不同值，频繁更新的列中，这些情况即不适合聚集索引。</p><p><strong>根本区别：</strong></p><p>聚集索引和非聚集索引的根本区别是表记录的排列顺序和与索引的排列顺序是否一致。</p></blockquote><h2 id="三、事务"><a href="#三、事务" class="headerlink" title="三、事务"></a>三、事务</h2><h4 id="1-什么是事务？"><a href="#1-什么是事务？" class="headerlink" title="1.什么是事务？"></a><strong>1.什么是事务？</strong></h4><blockquote><p>事务是对数据库中一系列操作进行统一的回滚或者提交的操作，主要用来保证数据的完整性和一致性。</p></blockquote><h4 id="2-事务四大特性（ACID）原子性、一致性、隔离性、持久性"><a href="#2-事务四大特性（ACID）原子性、一致性、隔离性、持久性" class="headerlink" title="2. 事务四大特性（ACID）原子性、一致性、隔离性、持久性?"></a><strong>2. 事务四大特性（ACID）原子性、一致性、隔离性、持久性?</strong></h4><blockquote><p><strong>原子性（Atomicity）:</strong><br>原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p><p><strong>一致性（Consistency）:</strong><br>事务开始前和结束后，数据库的完整性约束没有被破坏。比如A向B转账，不可能A扣了钱，B却没收到。</p><p><strong>隔离性（Isolation）:</strong><br>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。</p><p><strong>持久性（Durability）:</strong><br>持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p></blockquote><h4 id="3-事务的并发-事务隔离级别，每个级别会引发什么问题，MySQL默认是哪个级别"><a href="#3-事务的并发-事务隔离级别，每个级别会引发什么问题，MySQL默认是哪个级别" class="headerlink" title="3. 事务的并发? 事务隔离级别，每个级别会引发什么问题，MySQL默认是哪个级别?"></a><strong>3. 事务的并发? 事务隔离级别，每个级别会引发什么问题，MySQL默认是哪个级别?</strong></h4><blockquote><p>从理论上来说, 事务应该彼此完全隔离, 以避免并发事务所导致的问题，然而, 那样会对性能产生极大的影响, 因为事务必须按顺序运行， 在实际开发中, 为了提升性能, 事务会以较低的隔离级别运行， 事务的隔离级别可以通过隔离事务属性指定。<br><strong>事务的并发问题：</strong></p><p><strong>1、脏读：</strong>事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</p><p><strong>2、不可重复读：</strong>事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果因此本事务先后两次读到的数据结果会不一致。</p><p><strong>3、幻读：</strong>幻读解决了不重复读，保证了同一个事务里，查询的结果都是事务开始时的状态（一致性）。</p><p>例如：事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作 这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。 而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有跟没有修改一样，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。<br><strong>小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表。</strong></p><p><strong>事务的隔离级别</strong></p><p><img src="https://i.imgur.com/xAeWTSp.png" alt="img"></p><p><strong>读未提交：</strong>另一个事务修改了数据，但尚未提交，而本事务中的SELECT会读到这些未被提交的数据脏读</p><p><strong>不可重复读：</strong>事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果因此本事务先后两次读到的数据结果会不一致。</p><p><strong>可重复读：</strong>在同一个事务里，SELECT的结果是事务开始时时间点的状态，因此，同样的SELECT操作读到的结果会是一致的。但是，会有幻读现象</p><p><strong>串行化：</strong>最高的隔离级别，在这个隔离级别下，不会产生任何异常。并发的事务，就像事务是在一个个按照顺序执行一样</p></blockquote><p><strong>特别注意：</strong></p><blockquote><p>MySQL默认的事务隔离级别为repeatable-read</p><p>MySQL 支持 4 中事务隔离级别.</p><p>事务的隔离级别要得到底层数据库引擎的支持, 而不是应用程序或者框架的支持.</p><p>Oracle 支持的 2 种事务隔离级别：READ_COMMITED , SERIALIZABLE</p><p>SQL规范所规定的标准，不同的数据库具体的实现可能会有些差异</p><p><strong>MySQL中默认事务隔离级别是“可重复读”时并不会锁住读取到的行</strong></p><p><strong>事务隔离级别：</strong>未提交读时，写数据只会锁住相应的行。</p><p><strong>事务隔离级别为：</strong>可重复读时，写数据会锁住整张表。</p><p><strong>事务隔离级别为：</strong>串行化时，读写数据都会锁住整张表。</p><p>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大，鱼和熊掌不可兼得啊。对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed，它能够避免脏读取，而且具有较好的并发性能。尽管它会导致不可重复读、幻读这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制。</p></blockquote><h4 id="4-事务传播行为"><a href="#4-事务传播行为" class="headerlink" title="4.事务传播行为"></a><strong>4.事务传播行为</strong></h4><blockquote><p><strong>1.PROPAGATION_REQUIRED：</strong>如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，该设置是最常用的设置。</p><p><strong>2.PROPAGATION_SUPPORTS：</strong>支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。</p><p><strong>3.PROPAGATION_MANDATORY：</strong>支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常。</p><p><strong>4.PROPAGATION_REQUIRES_NEW：</strong>创建新事务，无论当前存不存在事务，都创建新事务。</p><p><strong>5.PROPAGATION_NOT_SUPPORTED：</strong>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</p><p><strong>6.PROPAGATION_NEVER：</strong>以非事务方式执行，如果当前存在事务，则抛出异常。</p><p><strong>7.PROPAGATION_NESTED：</strong>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</p></blockquote><h4 id="5-嵌套事务"><a href="#5-嵌套事务" class="headerlink" title="5.嵌套事务"></a><strong>5.嵌套事务</strong></h4><blockquote><p><strong>什么是嵌套事务？</strong></p><p>嵌套是子事务套在父事务中执行，子事务是父事务的一部分，在进入子事务之前，父事务建立一个回滚点，叫save point，然后执行子事务，这个子事务的执行也算是父事务的一部分，然后子事务执行结束，父事务继续执行。重点就在于那个save point。看几个问题就明了了：</p><p><strong>如果子事务回滚，会发生什么？</strong></p><p>父事务会回滚到进入子事务前建立的save point，然后尝试其他的事务或者其他的业务逻辑，父事务之前的操作不会受到影响，更不会自动回滚。</p><p><strong>如果父事务回滚，会发生什么？</strong></p><p>父事务回滚，子事务也会跟着回滚！为什么呢，因为父事务结束之前，子事务是不会提交的，我们说子事务是父事务的一部分，正是这个道理。那么：</p><p><strong>事务的提交，是什么情况？</strong></p><p>是父事务先提交，然后子事务提交，还是子事务先提交，父事务再提交？答案是第二种情况，还是那句话，子事务是父事务的一部分，由父事务统一提交。</p></blockquote><p>参考文章：<a href="https://blog.csdn.net/liangxw1/article/details/51197560">https://blog.csdn.net/liangxw1/article/details/51197560</a></p><h2 id="四、存储引擎"><a href="#四、存储引擎" class="headerlink" title="四、存储引擎"></a>四、存储引擎</h2><h4 id="1-MySQL常见的三种存储引擎（InnoDB、MyISAM、MEMORY）的区别"><a href="#1-MySQL常见的三种存储引擎（InnoDB、MyISAM、MEMORY）的区别" class="headerlink" title="1.MySQL常见的三种存储引擎（InnoDB、MyISAM、MEMORY）的区别?"></a><strong>1.MySQL常见的三种存储引擎（InnoDB、MyISAM、MEMORY）的区别?</strong></h4><blockquote><p><strong>两种存储引擎的大致区别表现在：</strong></p><p>1.<strong>InnoDB支持事务，MyISAM不支持，</strong> <strong>这一点是非常之重要。</strong>事务是一种高级的处理方式，如在一些列增删改中只要哪个出错还可以回滚还原，而MyISAM就不可以了。</p><p>2.MyISAM适合查询以及插入为主的应用。</p><p>3.InnoDB适合频繁修改以及涉及到安全性较高的应用。</p><p>4.InnoDB支持外键，MyISAM不支持。</p><p>5.从MySQL5.5.5以后，InnoDB是默认引擎。</p><p>6.InnoDB不支持FULLTEXT类型的索引。</p><p>7.InnoDB中不保存表的行数，如select count(<em>) from table时，InnoDB需要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count(</em>)语句包含where条件时MyISAM也需要扫描整个表。</p><p>8.对于自增长的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中可以和其他字段一起建立联合索引。</p><p>9.DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的 删除，效率非常慢。MyISAM则会重建表。</p><p>10.InnoDB支持行锁（某些情况下还是锁整表，如 update table set a&#x3D;1 where user like ‘%lee%’。</p></blockquote><h4 id="2-MySQL存储引擎MyISAM与InnoDB如何选择"><a href="#2-MySQL存储引擎MyISAM与InnoDB如何选择" class="headerlink" title="2.MySQL存储引擎MyISAM与InnoDB如何选择"></a><strong>2.MySQL存储引擎MyISAM与InnoDB如何选择</strong></h4><blockquote><p>MySQL有多种存储引擎，每种存储引擎有各自的优缺点，可以择优选择使用：MyISAM、InnoDB、MERGE、MEMORY(HEAP)、BDB(BerkeleyDB)、EXAMPLE、FEDERATED、ARCHIVE、CSV、BLACKHOLE。</p><p>虽然MySQL里的存储引擎不只是MyISAM与InnoDB这两个，但常用的就是两个。<br>关于MySQL数据库提供的两种存储引擎，MyISAM与InnoDB选择使用：</p></blockquote><ul><li>1.INNODB会支持一些关系数据库的高级功能，如事务功能和行级锁，MyISAM不支持。</li><li>2.MyISAM的性能更优，占用的存储空间少，所以，选择何种存储引擎，视具体应用而定。</li></ul><blockquote><p>如果你的应用程序一定要使用事务，毫无疑问你要选择INNODB引擎。但要注意，INNODB的行级锁是有条件的。在where条件没有使用主键时，照样会锁全表。比如DELETE FROM mytable这样的删除语句。</p><p>如果你的应用程序对查询性能要求较高，就要使用MyISAM了。MyISAM索引和数据是分开的，而且其索引是压缩的，可以更好地利用内存。所以它的查询性能明显优于INNODB。压缩后的索引也能节约一些磁盘空间。MyISAM拥有全文索引的功能，这可以极大地优化LIKE查询的效率。</p><p>有人说MyISAM只能用于小型应用，其实这只是一种偏见。如果数据量比较大，这是需要通过升级架构来解决，比如分表分库，而不是单纯地依赖存储引擎。</p><p>现在一般都是选用innodb了，主要是MyISAM的全表锁，读写串行问题，并发效率锁表，效率低，MyISAM对于读写密集型应用一般是不会去选用的。<br>MEMORY存储引擎</p><p>MEMORY是MySQL中一类特殊的存储引擎。它使用存储在内存中的内容来创建表，而且数据全部放在内存中。这些特性与前面的两个很不同。<br>每个基于MEMORY存储引擎的表实际对应一个磁盘文件。该文件的文件名与表名相同，类型为frm类型。该文件中只存储表的结构。而其数据文件，都是存储在内存中，这样有利于数据的快速处理，提高整个表的效率。值得注意的是，服务器需要有足够的内存来维持MEMORY存储引擎的表的使用。如果不需要了，可以释放内存，甚至删除不需要的表。</p><p>MEMORY默认使用哈希索引。速度比使用B型树索引快。当然如果你想用B型树索引，可以在创建索引时指定。</p><p>注意，MEMORY用到的很少，因为它是把数据存到内存中，如果内存出现异常就会影响数据。如果重启或者关机，所有数据都会消失。因此，基于MEMORY的表的生命周期很短，一般是一次性的。</p></blockquote><h4 id="3-MySQL的MyISAM与InnoDB两种存储引擎在，事务、锁级别，各自的适用场景"><a href="#3-MySQL的MyISAM与InnoDB两种存储引擎在，事务、锁级别，各自的适用场景" class="headerlink" title="3.MySQL的MyISAM与InnoDB两种存储引擎在，事务、锁级别，各自的适用场景?"></a><strong>3.MySQL的MyISAM与InnoDB两种存储引擎在，事务、锁级别，各自的适用场景?</strong></h4><blockquote><p><strong>事务处理上方面</strong></p></blockquote><ul><li>MyISAM：强调的是性能，每次查询具有原子性,其执行数度比InnoDB类型更快，但是不提供事务支持。</li><li>InnoDB：提供事务支持事务，外部键等高级数据库功能。 具有事务(commit)、回滚(rollback)和崩溃修复能力(crash recovery capabilities)的事务安全(transaction-safe (ACID compliant))型表。</li></ul><blockquote><p><strong>锁级别</strong></p></blockquote><ul><li>MyISAM：只支持表级锁，用户在操作MyISAM表时，select，update，delete，insert语句都会给表自动加锁，如果加锁以后的表满足insert并发的情况下，可以在表的尾部插入新的数据。</li><li>InnoDB：支持事务和行级锁，是innodb的最大特色。行锁大幅度提高了多用户并发操作的新能。但是InnoDB的行锁，只是在WHERE的主键是有效的，非主键的WHERE都会锁全表的。</li></ul><blockquote><p><strong>关于存储引擎MyISAM和InnoDB的其他参考资料如下：</strong></p><p><a href="http://blog.csdn.net/lc0817/article/details/52757194">MySQL存储引擎中的MyISAM和InnoDB区别详解</a></p><p><a href="https://www.cnblogs.com/kevingrace/p/5685355.html">MySQL存储引擎之MyISAM和Innodb总结性梳理</a></p></blockquote><h2 id="五、优化"><a href="#五、优化" class="headerlink" title="五、优化"></a>五、优化</h2><h4 id="1-查询语句不同元素（where、jion、limit、group-by、having等等）执行先后顺序"><a href="#1-查询语句不同元素（where、jion、limit、group-by、having等等）执行先后顺序" class="headerlink" title="1.查询语句不同元素（where、jion、limit、group by、having等等）执行先后顺序?"></a><strong>1.查询语句不同元素（where、jion、limit、group by、having等等）执行先后顺序?</strong></h4><ul><li>1.查询中用到的关键词主要包含<strong>六个</strong>，并且他们的顺序依次为 <strong>select–from–where–group by–having–order by</strong></li></ul><blockquote><p><strong>其中select和from是必须的，其他关键词是可选的，这六个关键词的执行顺序 与sql语句的书写顺序并不是一样的，而是按照下面的顺序来执行</strong></p><p>**from:**需要从哪个数据表检索数据</p></blockquote><blockquote><p>**where:**过滤表中数据的条件</p><p>**group by:**如何将上面过滤出的数据分组</p><p>**having:**对上面已经分组的数据进行过滤的条件</p><p>**select:**查看结果集中的哪个列，或列的计算结果</p><p>**order by :**按照什么样的顺序来查看返回的数据</p></blockquote><ul><li>2.<strong>from后面的表关联，是自右向左解析 而where条件的解析顺序是自下而上的。</strong></li></ul><blockquote><p>也就是说，在写SQL语句的时候，尽量把数据量小的表放在最右边来进行关联（用小表去匹配大表），而把能筛选出小量数据的条件放在where语句的最左边 （用小表去匹配大表）</p><p>其他参考资源：<br><a href="http://www.cnblogs.com/huminxxl/p/3149097.html">http://www.cnblogs.com/huminxxl/p/3149097.html</a></p></blockquote><h4 id="2-使用explain优化sql和索引"><a href="#2-使用explain优化sql和索引" class="headerlink" title="2.使用explain优化sql和索引?"></a><strong>2.使用explain优化sql和索引?</strong></h4><blockquote><p><strong>对于复杂、效率低的sql语句，我们通常是使用explain sql 来分析sql语句，这个语句可以打印出，语句的执行。这样方便我们分析，进行优化</strong></p><p><strong>table：</strong>显示这一行的数据是关于哪张表的</p><p><strong>type：</strong>这是重要的列，显示连接使用了何种类型。从最好到最差的连接类型为const、eq_reg、ref、range、index和ALL</p><p><strong>all:</strong> full table scan ;MySQL将遍历全表以找到匹配的行；</p><p><strong>index:</strong> index scan; index 和 all的区别在于index类型只遍历索引；</p><p><strong>range：</strong>索引范围扫描，对索引的扫描开始于某一点，返回匹配值的行，常见与between ，等查询；</p><p><strong>ref：</strong>非唯一性索引扫描，返回匹配某个单独值的所有行，常见于使用非唯一索引即唯一索引的非唯一前缀进行查找；</p><p><strong>eq_ref：</strong>唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配，常用于主键或者唯一索引扫描；</p><p><strong>const，system：</strong>当MySQL对某查询某部分进行优化，并转为一个常量时，使用这些访问类型。如果将主键置于where列表中，MySQL就能将该查询转化为一个常量。</p><p><strong>possible_keys：</strong>显示可能应用在这张表中的索引。如果为空，没有可能的索引。可以为相关的域从WHERE语句中选择一个合适的语句</p><p><strong>key：</strong> 实际使用的索引。如果为NULL，则没有使用索引。很少的情况下，MySQL会选择优化不足的索引。这种情况下，可以在SELECT语句中使用USE INDEX（indexname）来强制使用一个索引或者用IGNORE INDEX（indexname）来强制MySQL忽略索引</p><p><strong>key_len：</strong>使用的索引的长度。在不损失精确性的情况下，长度越短越好</p><p><strong>ref：</strong>显示索引的哪一列被使用了，如果可能的话，是一个常数</p><p><strong>rows：</strong>MySQL认为必须检查的用来返回请求数据的行数</p><p><strong>Extra：</strong>关于MySQL如何解析查询的额外信息。将在表4.3中讨论，但这里可以看到的坏的例子是Using temporary和Using filesort，意思MySQL根本不能使用索引，结果是检索会很慢。</p></blockquote><h4 id="3-MySQL慢查询怎么解决"><a href="#3-MySQL慢查询怎么解决" class="headerlink" title="3.MySQL慢查询怎么解决?"></a><strong>3.MySQL慢查询怎么解决?</strong></h4><blockquote><ul><li>slow_query_log 慢查询开启状态。</li><li>slow_query_log_file 慢查询日志存放的位置（这个目录需要MySQL的运行帐号的可写权限，一般设置为MySQL的数据存放目录）。</li><li>long_query_time 查询超过多少秒才记录。</li></ul></blockquote><h2 id="六、数据库锁"><a href="#六、数据库锁" class="headerlink" title="六、数据库锁"></a>六、数据库锁</h2><h4 id="1-mysql-都有什么锁，死锁判定原理和具体场景，死锁怎么解决"><a href="#1-mysql-都有什么锁，死锁判定原理和具体场景，死锁怎么解决" class="headerlink" title="1. mysql 都有什么锁，死锁判定原理和具体场景，死锁怎么解决?"></a><strong>1. mysql 都有什么锁，死锁判定原理和具体场景，死锁怎么解决?</strong></h4><blockquote><p><strong>MySQL有三种锁的级别：</strong>页级、表级、行级。</p><ul><li><strong>表级锁：</strong>开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。</li><li><strong>行级锁：</strong>开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</li><li><strong>页面锁：</strong>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般<br><strong>什么情况下会造成死锁?</strong></li></ul><p><strong>什么是死锁？</strong></p><p><strong>死锁:</strong> 是指两个或两个以上的进程在执行过程中。因争夺资源而造成的一种互相等待的现象,若无外力作用,它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁,这些永远在互相等竺的进程称为死锁进程。</p><p>表级锁不会产生死锁.所以解决死锁主要还是针对于最常用的 InnoDB。</p><p><strong>死锁的关键在于：</strong>两个(或以上)的Session加锁的顺序不一致。</p><p>那么对应的解决死锁问题的关键就是：让不同的session加锁有次序。</p><p><strong>死锁的解决办法?</strong></p><p>1.查出的线程杀死 kill<br>SELECT trx_MySQL_thread_id FROM information_schema.INNODB_TRX;</p><p>2.设置锁的超时时间<br>Innodb 行锁的等待时间，单位秒。可在会话级别设置，RDS 实例该参数的默认值为 50（秒）。</p><p>生产环境不推荐使用过大的 innodb_lock_wait_timeout参数值<br>该参数支持在会话级别修改，方便应用在会话级别单独设置某些特殊操作的行锁等待超时时间，如下：<br>set innodb_lock_wait_timeout&#x3D;1000; —设置当前会话 Innodb 行锁等待超时时间，单位秒。</p><p>3.指定获取锁的顺序</p></blockquote><h4 id="2-有哪些锁（乐观锁悲观锁），select-时怎么加排它锁"><a href="#2-有哪些锁（乐观锁悲观锁），select-时怎么加排它锁" class="headerlink" title="2. 有哪些锁（乐观锁悲观锁），select 时怎么加排它锁?"></a><strong>2. 有哪些锁（乐观锁悲观锁），select 时怎么加排它锁?</strong></h4><blockquote><p><strong>悲观锁（Pessimistic Lock）:</strong></p><p>**悲观锁特点:**先获取锁，再进行业务操作。</p><p>即“悲观”的认为获取锁是非常有可能失败的，因此要先确保获取锁成功再进行业务操作。通常所说的<strong>“一锁二查三更新”即指的是使用悲观锁。</strong>通常来讲在数据库上的悲观锁需要数据库本身提供支持，即通过常用的select … for update操作来实现悲观锁。当数据库执行select for update时会获取被select中的数据行的行锁，因此其他并发执行的select for update如果试图选中同一行则会发生排斥（需要等待行锁被释放），因此达到锁的效果。select for update获取的行锁会在当前事务结束时自动释放，因此必须在事务中使用。</p><p><strong>补充：</strong><br>不同的数据库对select for update的实现和支持都是有所区别的，</p><ul><li>oracle支持select for update no wait，表示如果拿不到锁立刻报错，而不是等待，MySQL就没有no wait这个选项。</li><li>MySQL还有个问题是select for update语句执行中所有扫描过的行都会被锁上，这一点很容易造成问题。因此如果在MySQL中用悲观锁务必要确定走了索引，而不是全表扫描。</li></ul><p><strong>乐观锁（Optimistic Lock）:</strong></p><p>**1. **乐观锁，也叫乐观并发控制，它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，那么当前正在提交的事务会进行回滚。</p><p>**2.  <strong>乐观锁的特点先进行业务操作，不到万不得已不去拿锁。</strong>即“乐观”的认为拿锁多半是会成功的，因此在进行完业务操作需要实际更新数据的最后一步再去拿一下锁就好。<br>乐观锁在数据库上的实现完全是逻辑的，不需要数据库提供特殊的支持。</p><p><strong>3.<strong>一般的做法是</strong>在需要锁的数据上增加一个版本号，或者时间戳</strong>，</p><p><strong>实现方式举例如下：</strong></p><p><strong>乐观锁（给表加一个版本号字段）</strong> 这个并不是乐观锁的定义，给表加版本号，是<strong>数据库实现乐观锁的一种方式</strong>。</p><ol><li>SELECT data AS old_data, version AS old_version FROM …;</li><li>根据获取的数据进行业务操作，得到new_data和new_version</li><li>UPDATE SET data &#x3D; new_data, version &#x3D; new_version WHERE version &#x3D; old_version</li></ol><p>if (updated row &gt; 0) {</p><p>&#x2F;&#x2F; 乐观锁获取成功，操作完成</p><p>} else {</p><p>&#x2F;&#x2F; 乐观锁获取失败，回滚并重试</p><p>}</p><p><strong>注意：</strong></p><ul><li>乐观锁在不发生取锁失败的情况下开销比悲观锁小，但是一旦发生失败回滚开销则比较大，因此适合用在取锁失败概率比较小的场景，可以提升系统并发性能</li><li>乐观锁还适用于一些比较特殊的场景，例如在业务操作过程中无法和数据库保持连接等悲观锁无法适用的地方。</li></ul><p><strong>总结：</strong><br>悲观锁和乐观锁是数据库用来保证数据并发安全防止更新丢失的两种方法，例子在select … for update前加个事务就可以防止更新丢失。悲观锁和乐观锁大部分场景下差异不大，一些独特场景下有一些差别，一般我们可以从如下几个方面来判断。</p><ul><li><strong>响应速度：</strong> 如果需要非常高的响应速度，建议采用乐观锁方案，成功就执行，不成功就失败，不需要等待其他并发去释放锁。’</li><li><strong>冲突频率：</strong> 如果冲突频率非常高，建议采用悲观锁，保证成功率，如果冲突频率大，乐观锁会需要多次重试才能成功，代价比较大。</li><li><strong>重试代价：</strong> 如果重试代价大，建议采用悲观锁。</li></ul></blockquote><h2 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a>七、其他</h2><h4 id="1-数据库的主从复制"><a href="#1-数据库的主从复制" class="headerlink" title="1.数据库的主从复制"></a><strong>1.数据库的主从复制</strong></h4><blockquote><p><strong>主从复制的几种方式:</strong></p><p><strong>同步复制:</strong></p><p>所谓的同步复制，意思是master的变化，必须等待slave-1,slave-2,…,slave-n完成后才能返回。 这样，显然不可取，也不是MySQL复制的默认设置。比如，在WEB前端页面上，用户增加了条记录，需要等待很长时间。</p><p><strong>异步复制:</strong></p><p>如同AJAX请求一样。master只需要完成自己的数据库操作即可。至于slaves是否收到二进制日志，是否完成操作，不用关心,MySQL的默认设置。</p><p><strong>半同步复制:</strong></p><p>master只保证slaves中的一个操作成功，就返回，其他slave不管。 这个功能，是由google为MySQL引入的。</p></blockquote><h4 id="2-数据库主从复制分析的-7-个问题"><a href="#2-数据库主从复制分析的-7-个问题" class="headerlink" title="2.数据库主从复制分析的 7 个问题?"></a><strong>2.数据库主从复制分析的 7 个问题?</strong></h4><p><strong>问题1：</strong>master的写操作，slaves被动的进行一样的操作，保持数据一致性，那么slave是否可以主动的进行写操作？</p><blockquote><p>假设slave可以主动的进行写操作，slave又无法通知master，这样就导致了master和slave数据不一致了。因此slave不应该进行写操作，至少是slave上涉及到复制的数据库不可以写。实际上，这里已经揭示了读写分离的概念。</p></blockquote><p><strong>问题2：</strong>主从复制中，可以有N个slave,可是这些slave又不能进行写操作，要他们干嘛？</p><blockquote><p><strong>实现数据备份:</strong><br>类似于高可用的功能，一旦master挂了，可以让slave顶上去，同时slave提升为master。</p><p>**异地容灾:**比如master在北京，地震挂了，那么在上海的slave还可以继续。<br>主要用于实现scale out,分担负载,可以将读的任务分散到slaves上。<br>【很可能的情况是，一个系统的读操作远远多于写操作，因此写操作发向master，读操作发向slaves进行操作】</p></blockquote><p><strong>问题3：</strong>主从复制中有master,slave1,slave2,…等等这么多MySQL数据库，那比如一个JAVA WEB应用到底应该连接哪个数据库?</p><blockquote><p>我们在应用程序中可以这样，insert&#x2F;delete&#x2F;update这些更新数据库的操作，用connection(for master)进行操作，</p><p>select用connection(for slaves)进行操作。那我们的应用程序还要完成怎么从slaves选择一个来执行select，例如使用简单的轮循算法。</p><p>这样的话，相当于应用程序完成了SQL语句的路由，而且与MySQL的主从复制架构非常关联，一旦master挂了，某些slave挂了，那么应用程序就要修改了。能不能让应用程序与MySQL的主从复制架构没有什么太多关系呢？<br>找一个组件，application program只需要与它打交道，用它来完成MySQL的代理，实现SQL语句的路由。<br>MySQL proxy并不负责，怎么从众多的slaves挑一个？可以交给另一个组件(比如haproxy)来完成。</p><p>这就是所谓的MySQL READ WRITE SPLITE，MySQL的读写分离。</p></blockquote><p><strong>问题4：</strong>如果MySQL proxy , direct , master他们中的某些挂了怎么办？</p><blockquote><p>总统一般都会弄个副总统，以防不测。同样的，可以给这些关键的节点来个备份。</p></blockquote><p><strong>问题5：</strong>当master的二进制日志每产生一个事件，都需要发往slave，如果我们有N个slave,那是发N次，还是只发一次？如果只发一次，发给了slave-1，那slave-2,slave-3,…它们怎么办？</p><blockquote><p>显 然，应该发N次。实际上，在MySQL master内部，维护N个线程，每一个线程负责将二进制日志文件发往对应的slave。master既要负责写操作，还的维护N个线程，负担会很重。可以这样，slave-1是master的从，slave-1又是slave-2,slave-3,…的主，同时slave-1不再负责select。 slave-1将master的复制线程的负担，转移到自己的身上。这就是所谓的多级复制的概念。</p></blockquote><p><strong>问题6：</strong>当一个select发往MySQL proxy，可能这次由slave-2响应，下次由slave-3响应，这样的话，就无法利用查询缓存了。</p><blockquote><p>应该找一个共享式的缓存，比如memcache来解决。将slave-2,slave-3,…这些查询的结果都缓存至mamcache中。</p></blockquote><p><strong>问题7：</strong>随着应用的日益增长，读操作很多，我们可以扩展slave，但是如果master满足不了写操作了，怎么办呢？</p><blockquote><p>scale on ?更好的服务器？ 没有最好的，只有更好的，太贵了。。。<br>scale out ? 主从复制架构已经满足不了。<br>可以分库【垂直拆分】，分表【水平拆分】。</p></blockquote><h4 id="3-mysql-高并发环境解决方案"><a href="#3-mysql-高并发环境解决方案" class="headerlink" title="3.mysql 高并发环境解决方案?"></a><strong>3.mysql 高并发环境解决方案?</strong></h4><blockquote><p><strong>MySQL 高并发环境解决方案：</strong> 分库 分表 分布式 增加二级缓存。。。。。</p><p><strong>需求分析：</strong>互联网单位 每天大量数据读取，写入，并发性高。</p><p><strong>现有解决方式：</strong>水平分库分表，由单点分布到多点数据库中，从而降低单点数据库压力。</p><p><strong>集群方案：</strong>解决DB宕机带来的单点DB不能访问问题。</p><p><strong>读写分离策略：</strong>极大限度提高了应用中Read数据的速度和并发量。无法解决高写入压力。</p></blockquote><h4 id="4-数据库崩溃时事务的恢复机制（REDO日志和UNDO日志）"><a href="#4-数据库崩溃时事务的恢复机制（REDO日志和UNDO日志）" class="headerlink" title="4.数据库崩溃时事务的恢复机制（REDO日志和UNDO日志）?"></a><strong>4.数据库崩溃时事务的恢复机制（REDO日志和UNDO日志）?</strong></h4><p>转载：<a href="https://www.cnblogs.com/Bozh/archive/2013/03/18/2966494.html">MySQL REDO日志和UNDO日志</a></p><blockquote><p><strong>Undo Log:</strong></p><p>Undo Log是为了实现事务的原子性，在MySQL数据库InnoDB存储引擎中，还用了Undo Log来实现多版本并发控制(简称：MVCC)。</p><p>事务的原子性(Atomicity)事务中的所有操作，要么全部完成，要么不做任何操作，不能只做部分操作。如果在执行的过程中发生了错误，要回滚(Rollback)到事务开始前的状态，就像这个事务从来没有执行过。<br>原理Undo Log的原理很简单，为了满足事务的原子性，在操作任何数据之前，首先将数据备份到一个地方（这个存储数据备份的地方称为UndoLog）。然后进行数据的修改。如果出现了错误或者用户执行了ROLLBACK语句，系统可以利用Undo Log中的备份将数据恢复到事务开始之前的状态。</p><p>之所以能同时保证原子性和持久化，是因为以下<strong>特点：</strong></p><p>更新数据前记录Undo log。<br>为了保证持久性，必须将数据在事务提交前写到磁盘。只要事务成功提交，数据必然已经持久化。<br>Undo log必须先于数据持久化到磁盘。如果在G,H之间系统崩溃，undo log是完整的， 可以用来回滚事务。<br>如果在A-F之间系统崩溃,因为数据没有持久化到磁盘。所以磁盘上的数据还是保持在事务开始前的状态。</p><p><strong>缺陷：</strong>每个事务提交前将数据和Undo Log写入磁盘，这样会导致大量的磁盘IO，因此性能很低。<br>如果能够将数据缓存一段时间，就能减少IO提高性能。但是这样就会丧失事务的持久性。因此引入了另外一种机制来实现持久化，即Redo Log。</p><p><strong>Redo Log:</strong></p><p>原理和Undo Log相反，Redo Log记录的是新数据的备份。在事务提交前，只要将Redo Log持久化即可，不需要将数据持久化。当系统崩溃时，虽然数据没有持久化，但是Redo Log已经持久化。系统可以根据Redo Log的内容，将所有数据恢复到最新的状态。</p></blockquote><h4 id="八、整理时参考的资料"><a href="#八、整理时参考的资料" class="headerlink" title="八、整理时参考的资料"></a><strong>八、整理时参考的资料</strong></h4><p><a href="http://mp.weixin.qq.com/s?__biz=MzIwMTY0NDU3Nw==&mid=2651936134&idx=1&sn=5213a59104f6d2a90bc18d878cafe417&chksm=8d0f3ac8ba78b3deb2ea3473906a37dd205b6e64bfbebe86cc00108242bfa4c49a7d1e509eca&mpshare=1&scene=1&srcid=0707k8Bdz85tDHyVotxEQ9of#rd">java团长 数据库整理</a></p><p><a href="https://my.oschina.net/yanpenglei/blog/1650277">20个数据库常见面试题讲解 - 鹏磊 - 开源中国”</a></p><p><a href="https://m.2cto.com/database/201710/688377.html">34个数据库常见面试题讲解</a></p><p><a href="https://kb.cnblogs.com/page/45712/">漫谈数据库索引<em>知识库</em>博客园</a></p><p><a href="https://blog.csdn.net/u011479200/article/details/78513632">Mysql| 使用通配符进行模糊查询(like,%,_)</a></p><p><a href="http://blog.csdn.net/lc0817/article/details/52757194">MySQL存储引擎中的MyISAM和InnoDB区别详解</a></p><p><a href="https://www.cnblogs.com/kevingrace/p/5685355.html">MySQL存储引擎之MyISAM和Innodb总结性梳理</a></p><p><a href="https://blog.csdn.net/liangxw1/article/details/51197560">https://blog.csdn.net/liangxw1/article/details/51197560</a></p><p>分类: <a href="https://www.cnblogs.com/wenxiaofei/category/1317332.html">数据库面试</a></p><h2 id="Mybatis面试题及答案整理"><a href="#Mybatis面试题及答案整理" class="headerlink" title="Mybatis面试题及答案整理"></a>Mybatis面试题及答案整理</h2><p>Java程序员-张凯 2019-03-13 13:34:15  2946  收藏 47<br>分类专栏： mybatis面试题 文章标签： mybatis面试题 mybatis面试题及答案<br>版权</p><h3 id="1、Mybatis是如何进行分页的？分页插件的原理是什么？"><a href="#1、Mybatis是如何进行分页的？分页插件的原理是什么？" class="headerlink" title="1、Mybatis是如何进行分页的？分页插件的原理是什么？"></a>1、Mybatis是如何进行分页的？分页插件的原理是什么？</h3><p>答：Mybatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页，可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。</p><p>分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。</p><p>举例：select * from student，拦截sql后重写为：select t.* from （select * from student）t limit 0，10</p><h3 id="2、简述Mybatis的插件运行原理，以及如何编写一个插件。"><a href="#2、简述Mybatis的插件运行原理，以及如何编写一个插件。" class="headerlink" title="2、简述Mybatis的插件运行原理，以及如何编写一个插件。"></a>2、简述Mybatis的插件运行原理，以及如何编写一个插件。</h3><p>答：Mybatis仅可以编写针对ParameterHandler、ResultSetHandler、StatementHandler、Executor这4种接口的插件，Mybatis使用JDK的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体就是InvocationHandler的invoke()方法，当然，只会拦截那些你指定需要拦截的方法。</p><p>实现Mybatis的Interceptor接口并复写intercept()方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，别忘了在配置文件中配置你编写的插件。</p><h3 id="3、Mybatis执行批量插入，能返回数据库主键列表吗？"><a href="#3、Mybatis执行批量插入，能返回数据库主键列表吗？" class="headerlink" title="3、Mybatis执行批量插入，能返回数据库主键列表吗？"></a>3、Mybatis执行批量插入，能返回数据库主键列表吗？</h3><p>答：能，JDBC都能，Mybatis当然也能。</p><h3 id="4、Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？"><a href="#4、Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？" class="headerlink" title="4、Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？"></a>4、Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？</h3><p>答：Mybatis动态sql可以让我们在Xml映射文件内，以标签的形式编写动态sql，完成逻辑判断和动态拼接sql的功能，Mybatis提供了9种动态sql标签trim|where|set|foreach|if|choose|when|otherwise|bind。</p><p>其执行原理为，使用OGNL从sql参数对象中计算表达式的值，根据表达式的值动态拼接sql，以此来完成动态sql的功能。</p><h3 id="5、Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？"><a href="#5、Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？" class="headerlink" title="5、Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？"></a>5、Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？</h3><p>答：第一种是使用<resultMap>标签，逐一定义列名和对象属性名之间的映射关系。第二种是使用sql列的别名功能，将列别名书写为对象属性名，比如T_NAME AS NAME，对象属性名一般是name，小写，但是列名不区分大小写，Mybatis会忽略列名大小写，智能找到与之对应对象属性名，你甚至可以写成T_NAME AS NaMe，Mybatis一样可以正常工作。</p><p>有了列名与属性名的映射关系后，Mybatis通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。</p><h3 id="6、Mybatis能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别。"><a href="#6、Mybatis能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别。" class="headerlink" title="6、Mybatis能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别。"></a>6、Mybatis能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别。</h3><p>答：能，Mybatis不仅可以执行一对一、一对多的关联查询，还可以执行多对一，多对多的关联查询，多对一查询，其实就是一对一查询，只需要把selectOne()修改为selectList()即可；多对多查询，其实就是一对多查询，只需要把selectOne()修改为selectList()即可。</p><p>关联对象查询，有两种实现方式，一种是单独发送一个sql去查询关联对象，赋给主对象，然后返回主对象。另一种是使用嵌套查询，嵌套查询的含义为使用join查询，一部分列是A对象的属性值，另外一部分列是关联对象B的属性值，好处是只发一个sql查询，就可以把主对象和其关联对象查出来。</p><p>那么问题来了，join查询出来100条记录，如何确定主对象是5个，而不是100个？其去重复的原理是<resultMap>标签内的<id>子标签，指定了唯一确定一条记录的id列，Mybatis根据<id>列值来完成100条记录的去重复功能，<id>可以有多个，代表了联合主键的语意。</p><p>同样主对象的关联对象，也是根据这个原理去重复的，尽管一般情况下，只有主对象会有重复记录，关联对象一般不会重复。</p><p>举例：下面join查询出来6条记录，一、二列是Teacher对象列，第三列为Student对象列，Mybatis去重复处理后，结果为1个老师6个学生，而不是6个老师6个学生。</p><pre><code class="hljs">   t_id    t_name           s_id</code></pre><p>|          1 | teacher      |      38 |<br>|          1 | teacher      |      39 |<br>|          1 | teacher      |      40 |<br>|          1 | teacher      |      41 |<br>|          1 | teacher      |      42 |<br>|          1 | teacher      |      43 |</p><h3 id="7、Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？"><a href="#7、Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？" class="headerlink" title="7、Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？"></a>7、Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？</h3><p>答：Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled&#x3D;true|false。</p><p>它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。</p><p>当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。</p><h3 id="8、Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？"><a href="#8、Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？" class="headerlink" title="8、Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？"></a>8、Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？</h3><p>答：不同的Xml映射文件，如果配置了namespace，那么id可以重复；如果没有配置namespace，那么id不能重复；毕竟namespace不是必须的，只是最佳实践而已。</p><p>原因就是namespace+id是作为Map&lt;String, MappedStatement&gt;的key使用的，如果没有namespace，就剩下id，那么，id重复会导致数据互相覆盖。有了namespace，自然id就可以重复，namespace不同，namespace+id自然也就不同。</p><h3 id="9、Mybatis中如何执行批处理？"><a href="#9、Mybatis中如何执行批处理？" class="headerlink" title="9、Mybatis中如何执行批处理？"></a>9、Mybatis中如何执行批处理？</h3><p>答：使用BatchExecutor完成批处理。</p><h3 id="10、Mybatis都有哪些Executor执行器？它们之间的区别是什么？"><a href="#10、Mybatis都有哪些Executor执行器？它们之间的区别是什么？" class="headerlink" title="10、Mybatis都有哪些Executor执行器？它们之间的区别是什么？"></a>10、Mybatis都有哪些Executor执行器？它们之间的区别是什么？</h3><p>答：Mybatis有三种基本的Executor执行器，SimpleExecutor、ReuseExecutor、BatchExecutor。</p><p>SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。</p><p>ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map&lt;String, Statement&gt;内，供下一次使用。简言之，就是重复使用Statement对象。</p><p>BatchExecutor：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。</p><p>作用范围：Executor的这些特点，都严格限制在SqlSession生命周期范围内。</p><h3 id="11、Mybatis中如何指定使用哪一种Executor执行器？"><a href="#11、Mybatis中如何指定使用哪一种Executor执行器？" class="headerlink" title="11、Mybatis中如何指定使用哪一种Executor执行器？"></a>11、Mybatis中如何指定使用哪一种Executor执行器？</h3><p>答：在Mybatis配置文件中，可以指定默认的ExecutorType执行器类型，也可以手动给DefaultSqlSessionFactory的创建SqlSession的方法传递ExecutorType类型参数。</p><h3 id="12、Mybatis是否可以映射Enum枚举类？"><a href="#12、Mybatis是否可以映射Enum枚举类？" class="headerlink" title="12、Mybatis是否可以映射Enum枚举类？"></a>12、Mybatis是否可以映射Enum枚举类？</h3><p>答：Mybatis可以映射枚举类，不单可以映射枚举类，Mybatis可以映射任何对象到表的一列上。映射方式为自定义一个TypeHandler，实现TypeHandler的setParameter()和getResult()接口方法。TypeHandler有两个作用，一是完成从javaType至jdbcType的转换，二是完成jdbcType至javaType的转换，体现为setParameter()和getResult()两个方法，分别代表设置sql问号占位符参数和获取列查询结果。</p><h3 id="13、Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？"><a href="#13、Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？" class="headerlink" title="13、Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？"></a>13、Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？</h3><p>答：虽然Mybatis解析Xml映射文件是按照顺序解析的，但是，被引用的B标签依然可以定义在任何地方，Mybatis都可以正确识别。</p><p>原理是，Mybatis解析A标签，发现A标签引用了B标签，但是B标签尚未解析到，尚不存在，此时，Mybatis会将A标签标记为未解析状态，然后继续解析余下的标签，包含B标签，待所有标签解析完毕，Mybatis会重新解析那些被标记为未解析的标签，此时再解析A标签时，B标签已经存在，A标签也就可以正常解析完成了。</p><h3 id="14、简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？"><a href="#14、简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？" class="headerlink" title="14、简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？"></a>14、简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？</h3><p>答：Mybatis将所有Xml配置信息都封装到All-In-One重量级对象Configuration内部。在Xml映射文件中，<parameterMap>标签会被解析为ParameterMap对象，其每个子元素会被解析为ParameterMapping对象。<resultMap>标签会被解析为ResultMap对象，其每个子元素会被解析为ResultMapping对象。每一个<select>、<insert>、<update>、<delete>标签均会被解析为MappedStatement对象，标签内的sql会被解析为BoundSql对象。</p><h3 id="15、为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？"><a href="#15、为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？" class="headerlink" title="15、为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？"></a>15、为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？</h3><p>答：Hibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。而Mybatis在查询关联对象或关联集合对象时，需要手动编写sql来完成，所以，称之为半自动ORM映射工具。</p><h3 id="16、-和-的区别是什么？"><a href="#16、-和-的区别是什么？" class="headerlink" title="16、#{}和${}的区别是什么？"></a>16、#{}和${}的区别是什么？</h3><p>答：${}是Properties文件中的变量占位符，它可以用于标签属性值和sql内部，属于静态文本替换，比如${driver}会被静态替换为com.mysql.jdbc.Driver。#{}是sql的参数占位符，Mybatis会将sql中的#{}替换为?号，在sql执行前会使用PreparedStatement的参数设置方法，按序给sql的?号占位符设置参数值，比如ps.setInt(0, parameterValue)，#{item.name}的取值方式为使用反射从参数对象中获取item对象的name属性值，相当于param.getItem().getName()。</p><h3 id="17、Xml映射文件中，除了常见的select-insert-updae-delete标签之外，还有哪些标签？"><a href="#17、Xml映射文件中，除了常见的select-insert-updae-delete标签之外，还有哪些标签？" class="headerlink" title="17、Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？"></a>17、Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？</h3><p>答：还有很多其他的标签，<resultMap>、<parameterMap>、<sql>、<include>、<selectKey>，加上动态sql的9个标签，trim|where|set|foreach|if|choose|when|otherwise|bind等，其中<sql>为sql片段标签，通过<include>标签引入sql片段，<selectKey>为不支持自增的主键生成策略标签。</p><h3 id="18、最佳实践中，通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？"><a href="#18、最佳实践中，通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？" class="headerlink" title="18、最佳实践中，通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？"></a>18、最佳实践中，通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？</h3><p>答：Dao接口，就是人们常说的Mapper接口，接口的全限名，就是映射文件中的namespace的值，接口的方法名，就是映射文件中MappedStatement的id值，接口方法内的参数，就是传递给sql的参数。Mapper接口是没有实现类的，当调用接口方法时，接口全限名+方法名拼接字符串作为key值，可唯一定位一个MappedStatement，举例：com.mybatis3.mappers.StudentDao.findStudentById，可以唯一找到namespace为com.mybatis3.mappers.StudentDao下面id &#x3D; findStudentById的MappedStatement。在Mybatis中，每一个<select>、<insert>、<update>、<delete>标签，都会被解析为一个MappedStatement对象。</p><p>Dao接口里的方法，是不能重载的，因为是全限名+方法名的保存和寻找策略。</p><p>Dao接口的工作原理是JDK动态代理，Mybatis运行时会使用JDK动态代理为Dao接口生成代理proxy对象，代理对象proxy会拦截接口方法，转而执行MappedStatement所代表的sql，然后将sql执行结果返回。</p><p>面试题看似都很简单，但是想要能正确回答上来，必定是研究过源码且深入的人，而不是仅会使用的人或者用的很熟的人。<br>————————————————<br>版权声明：本文为CSDN博主「Java程序员-张凯」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41701956/article/details/88530406">https://blog.csdn.net/qq_41701956/article/details/88530406</a></p><h1 id="开源框架"><a href="#开源框架" class="headerlink" title="开源框架"></a>开源框架</h1><p>java begin</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure><p>java end</p><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
    
    
    <categories>
      
      <category>面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程 - JVM - Spring - SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubeadm快速部署Kubernetes 1.29.0版本集群</title>
    <link href="/2024/02/01/k8s-1_29_0/"/>
    <url>/2024/02/01/k8s-1_29_0/</url>
    
    <content type="html"><![CDATA[<h1 id="kubeadm快速部署Kubernetes-1-29-0版本集群"><a href="#kubeadm快速部署Kubernetes-1-29-0版本集群" class="headerlink" title="kubeadm快速部署Kubernetes 1.29.0版本集群"></a>kubeadm快速部署Kubernetes 1.29.0版本集群</h1><h1 id="一、Kubernetes集群节点准备"><a href="#一、Kubernetes集群节点准备" class="headerlink" title="一、Kubernetes集群节点准备"></a>一、Kubernetes集群节点准备</h1><h2 id="1-1-主机操作系统说明"><a href="#1-1-主机操作系统说明" class="headerlink" title="1.1 主机操作系统说明"></a>1.1 主机操作系统说明</h2><table><thead><tr><th align="center">序号</th><th align="center">操作系统及版本</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">CentOS7u9</td><td align="center"></td></tr></tbody></table><h2 id="1-2-主机硬件配置说明"><a href="#1-2-主机硬件配置说明" class="headerlink" title="1.2 主机硬件配置说明"></a>1.2 主机硬件配置说明</h2><table><thead><tr><th>需求</th><th>CPU</th><th>内存</th><th>硬盘</th><th>角色</th><th>主机名</th></tr></thead><tbody><tr><td>值</td><td>8C</td><td>8G</td><td>1024GB</td><td>master</td><td>k8s-master01</td></tr><tr><td>值</td><td>8C</td><td>16G</td><td>1024GB</td><td>worker(node)</td><td>k8s-worker01</td></tr><tr><td>值</td><td>8C</td><td>16G</td><td>1024GB</td><td>worker(node)</td><td>k8s-worker02</td></tr></tbody></table><h2 id="1-3-主机配置"><a href="#1-3-主机配置" class="headerlink" title="1.3 主机配置"></a>1.3 主机配置</h2><h3 id="1-3-1-主机名配置"><a href="#1-3-1-主机名配置" class="headerlink" title="1.3.1  主机名配置"></a>1.3.1  主机名配置</h3><p>由于本次使用3台主机完成kubernetes集群部署，其中1台为master节点,名称为k8s-master01;其中2台为worker节点，名称分别为：k8s-worker01及k8s-worker02</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">master节点<br><span class="hljs-comment"># hostnamectl set-hostname k8s-master01</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">worker01节点<br><span class="hljs-comment"># hostnamectl set-hostname k8s-worker01</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">worker02节点<br><span class="hljs-comment"># hostnamectl set-hostname k8s-worker02</span><br></code></pre></td></tr></table></figure><h3 id="1-3-2-主机IP地址配置"><a href="#1-3-2-主机IP地址配置" class="headerlink" title="1.3.2 主机IP地址配置"></a>1.3.2 主机IP地址配置</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs powershell">k8s<span class="hljs-literal">-master01</span>节点IP地址为：<span class="hljs-number">192.168</span>.<span class="hljs-number">10.160</span>/<span class="hljs-number">24</span><br><span class="hljs-comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="hljs-built_in">TYPE</span>=<span class="hljs-string">&quot;Ethernet&quot;</span><br>PROXY_METHOD=<span class="hljs-string">&quot;none&quot;</span><br>BROWSER_ONLY=<span class="hljs-string">&quot;no&quot;</span><br>BOOTPROTO=<span class="hljs-string">&quot;none&quot;</span><br>DEFROUTE=<span class="hljs-string">&quot;yes&quot;</span><br>IPV4_FAILURE_FATAL=<span class="hljs-string">&quot;no&quot;</span><br>IPV6INIT=<span class="hljs-string">&quot;yes&quot;</span><br>IPV6_AUTOCONF=<span class="hljs-string">&quot;yes&quot;</span><br>IPV6_DEFROUTE=<span class="hljs-string">&quot;yes&quot;</span><br>IPV6_FAILURE_FATAL=<span class="hljs-string">&quot;no&quot;</span><br>IPV6_ADDR_GEN_MODE=<span class="hljs-string">&quot;stable-privacy&quot;</span><br>NAME=<span class="hljs-string">&quot;ens33&quot;</span><br>DEVICE=<span class="hljs-string">&quot;ens33&quot;</span><br>ONBOOT=<span class="hljs-string">&quot;yes&quot;</span><br>IPADDR=<span class="hljs-string">&quot;192.168.10.160&quot;</span><br>PREFIX=<span class="hljs-string">&quot;24&quot;</span><br>GATEWAY=<span class="hljs-string">&quot;192.168.10.2&quot;</span><br>DNS1=<span class="hljs-string">&quot;119.29.29.29&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs powershell">k8s<span class="hljs-literal">-worker01</span>节点IP地址为：<span class="hljs-number">192.168</span>.<span class="hljs-number">10.161</span>/<span class="hljs-number">24</span><br><span class="hljs-comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="hljs-built_in">TYPE</span>=<span class="hljs-string">&quot;Ethernet&quot;</span><br>PROXY_METHOD=<span class="hljs-string">&quot;none&quot;</span><br>BROWSER_ONLY=<span class="hljs-string">&quot;no&quot;</span><br>BOOTPROTO=<span class="hljs-string">&quot;none&quot;</span><br>DEFROUTE=<span class="hljs-string">&quot;yes&quot;</span><br>IPV4_FAILURE_FATAL=<span class="hljs-string">&quot;no&quot;</span><br>IPV6INIT=<span class="hljs-string">&quot;yes&quot;</span><br>IPV6_AUTOCONF=<span class="hljs-string">&quot;yes&quot;</span><br>IPV6_DEFROUTE=<span class="hljs-string">&quot;yes&quot;</span><br>IPV6_FAILURE_FATAL=<span class="hljs-string">&quot;no&quot;</span><br>IPV6_ADDR_GEN_MODE=<span class="hljs-string">&quot;stable-privacy&quot;</span><br>NAME=<span class="hljs-string">&quot;ens33&quot;</span><br>DEVICE=<span class="hljs-string">&quot;ens33&quot;</span><br>ONBOOT=<span class="hljs-string">&quot;yes&quot;</span><br>IPADDR=<span class="hljs-string">&quot;192.168.10.161&quot;</span><br>PREFIX=<span class="hljs-string">&quot;24&quot;</span><br>GATEWAY=<span class="hljs-string">&quot;192.168.10.2&quot;</span><br>DNS1=<span class="hljs-string">&quot;119.29.29.29&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs powershell">k8s<span class="hljs-literal">-worker02</span>节点IP地址为：<span class="hljs-number">192.168</span>.<span class="hljs-number">10.162</span>/<span class="hljs-number">24</span><br><span class="hljs-comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="hljs-built_in">TYPE</span>=<span class="hljs-string">&quot;Ethernet&quot;</span><br>PROXY_METHOD=<span class="hljs-string">&quot;none&quot;</span><br>BROWSER_ONLY=<span class="hljs-string">&quot;no&quot;</span><br>BOOTPROTO=<span class="hljs-string">&quot;none&quot;</span><br>DEFROUTE=<span class="hljs-string">&quot;yes&quot;</span><br>IPV4_FAILURE_FATAL=<span class="hljs-string">&quot;no&quot;</span><br>IPV6INIT=<span class="hljs-string">&quot;yes&quot;</span><br>IPV6_AUTOCONF=<span class="hljs-string">&quot;yes&quot;</span><br>IPV6_DEFROUTE=<span class="hljs-string">&quot;yes&quot;</span><br>IPV6_FAILURE_FATAL=<span class="hljs-string">&quot;no&quot;</span><br>IPV6_ADDR_GEN_MODE=<span class="hljs-string">&quot;stable-privacy&quot;</span><br>NAME=<span class="hljs-string">&quot;ens33&quot;</span><br>DEVICE=<span class="hljs-string">&quot;ens33&quot;</span><br>ONBOOT=<span class="hljs-string">&quot;yes&quot;</span><br>IPADDR=<span class="hljs-string">&quot;192.168.10.162&quot;</span><br>PREFIX=<span class="hljs-string">&quot;24&quot;</span><br>GATEWAY=<span class="hljs-string">&quot;192.168.10.2&quot;</span><br>DNS1=<span class="hljs-string">&quot;119.29.29.29&quot;</span><br></code></pre></td></tr></table></figure><h3 id="1-3-3-主机名与IP地址解析"><a href="#1-3-3-主机名与IP地址解析" class="headerlink" title="1.3.3 主机名与IP地址解析"></a>1.3.3 主机名与IP地址解析</h3><blockquote><p>所有集群主机均需要进行配置。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># cat /etc/hosts</span><br><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>   localhost localhost.localdomain localhost4 localhost4.localdomain4<br>::<span class="hljs-number">1</span>         localhost localhost.localdomain localhost6 localhost6.localdomain6<br><span class="hljs-number">192.168</span>.<span class="hljs-number">10.160</span> k8s<span class="hljs-literal">-master01</span><br><span class="hljs-number">192.168</span>.<span class="hljs-number">10.161</span> k8s<span class="hljs-literal">-worker01</span><br><span class="hljs-number">192.168</span>.<span class="hljs-number">10.162</span> k8s<span class="hljs-literal">-worker02</span><br></code></pre></td></tr></table></figure><h3 id="1-3-4-防火墙配置"><a href="#1-3-4-防火墙配置" class="headerlink" title="1.3.4  防火墙配置"></a>1.3.4  防火墙配置</h3><blockquote><p>所有主机均需要操作。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell">关闭现有防火墙firewalld<br><span class="hljs-comment"># systemctl disable firewalld</span><br><span class="hljs-comment"># systemctl stop firewalld</span><br><br>或<br><span class="hljs-comment"># systemctl disable --now firewalld</span><br><br>查看firewalld状态<br><span class="hljs-comment"># firewall-cmd --state</span><br>not running<br></code></pre></td></tr></table></figure><h3 id="1-3-5-SELINUX配置"><a href="#1-3-5-SELINUX配置" class="headerlink" title="1.3.5 SELINUX配置"></a>1.3.5 SELINUX配置</h3><blockquote><p>所有主机均需要操作。修改SELinux配置需要重启操作系统。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># sed -ri &#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27; /etc/selinux/config</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># sestatus</span><br></code></pre></td></tr></table></figure><h3 id="1-3-6-时间同步配置"><a href="#1-3-6-时间同步配置" class="headerlink" title="1.3.6 时间同步配置"></a>1.3.6 时间同步配置</h3><blockquote><p>所有主机均需要操作。最小化安装系统需要安装ntpdate软件。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># crontab -l</span><br><span class="hljs-number">0</span> */<span class="hljs-number">1</span> * * * /usr/sbin/ntpdate time1.aliyun.com<br></code></pre></td></tr></table></figure><h3 id="1-3-7-升级操作系统内核"><a href="#1-3-7-升级操作系统内核" class="headerlink" title="1.3.7 升级操作系统内核"></a>1.3.7 升级操作系统内核</h3><blockquote><p>所有主机均需要操作。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">导入elrepo gpg key<br><span class="hljs-comment"># rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">安装elrepo YUM源仓库<br><span class="hljs-comment"># yum -y install https://www.elrepo.org/elrepo-release-7.0-4.el7.elrepo.noarch.rpm</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">安装kernel<span class="hljs-literal">-ml</span>版本，ml为长期稳定版本，lt为长期维护版本<br><span class="hljs-comment"># yum --enablerepo=&quot;elrepo-kernel&quot; -y install kernel-lt.x86_64</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">设置grub2默认引导为<span class="hljs-number">0</span><br><span class="hljs-comment"># grub2-set-default 0</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">重新生成grub2引导文件<br><span class="hljs-comment"># grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">更新后，需要重启，使用升级的内核生效。<br><span class="hljs-comment"># reboot</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">重启后，需要验证内核是否为更新对应的版本<br><span class="hljs-comment"># uname -r</span><br></code></pre></td></tr></table></figure><h3 id="1-3-8-配置内核路由转发及网桥过滤"><a href="#1-3-8-配置内核路由转发及网桥过滤" class="headerlink" title="1.3.8  配置内核路由转发及网桥过滤"></a>1.3.8  配置内核路由转发及网桥过滤</h3><blockquote><p>所有主机均需要操作。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">添加网桥过滤及内核转发配置文件<br><span class="hljs-comment"># cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br>net.bridge.bridge<span class="hljs-literal">-nf-call-ip6tables</span> = <span class="hljs-number">1</span><br>net.bridge.bridge<span class="hljs-literal">-nf-call-iptables</span> = <span class="hljs-number">1</span><br>net.ipv4.ip_forward = <span class="hljs-number">1</span><br>EOF<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">加载br_netfilter模块<br><span class="hljs-comment"># modprobe br_netfilter</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">查看是否加载<br><span class="hljs-comment"># lsmod | grep br_netfilter</span><br>br_netfilter           <span class="hljs-number">22256</span>  <span class="hljs-number">0</span><br>bridge                <span class="hljs-number">151336</span>  <span class="hljs-number">1</span> br_netfilter<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">使其生效<br><span class="hljs-comment"># sysctl --system</span><br></code></pre></td></tr></table></figure><h3 id="1-3-9-安装ipset及ipvsadm"><a href="#1-3-9-安装ipset及ipvsadm" class="headerlink" title="1.3.9 安装ipset及ipvsadm"></a>1.3.9 安装ipset及ipvsadm</h3><blockquote><p>所有主机均需要操作。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">安装ipset及ipvsadm<br><span class="hljs-comment"># yum -y install ipset ipvsadm</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell">配置ipvsadm模块加载方式<br>添加需要加载的模块<br><span class="hljs-comment"># cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF</span><br><span class="hljs-comment">#!/bin/bash</span><br>modprobe <span class="hljs-literal">--</span> ip_vs<br>modprobe <span class="hljs-literal">--</span> ip_vs_rr<br>modprobe <span class="hljs-literal">--</span> ip_vs_wrr<br>modprobe <span class="hljs-literal">--</span> ip_vs_sh<br>modprobe <span class="hljs-literal">--</span> nf_conntrack<br>EOF<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">授权、运行、检查是否加载<br><span class="hljs-comment"># chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack</span><br></code></pre></td></tr></table></figure><h3 id="1-3-10-关闭SWAP分区"><a href="#1-3-10-关闭SWAP分区" class="headerlink" title="1.3.10 关闭SWAP分区"></a>1.3.10 关闭SWAP分区</h3><blockquote><p>修改完成后需要重启操作系统，如不重启，可临时关闭，命令为swapoff -a</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">永远关闭swap分区，需要重启操作系统<br><span class="hljs-comment"># cat /etc/fstab</span><br>......<br><br><span class="hljs-comment"># /dev/mapper/centos-swap swap                    swap    defaults        0 0</span><br><br>在上一行中行首添加<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h1 id="二、Docker-ce及cri-dockerd准备"><a href="#二、Docker-ce及cri-dockerd准备" class="headerlink" title="二、Docker-ce及cri-dockerd准备"></a>二、Docker-ce及cri-dockerd准备</h1><h2 id="2-1-Docker安装YUM源准备"><a href="#2-1-Docker安装YUM源准备" class="headerlink" title="2.1 Docker安装YUM源准备"></a>2.1 Docker安装YUM源准备</h2><blockquote><p>使用阿里云开源软件镜像站。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">wget</span> https://mirrors.aliyun.com/docker<span class="hljs-literal">-ce</span>/linux/centos/docker<span class="hljs-literal">-ce</span>.repo <span class="hljs-literal">-O</span> /etc/yum.repos.d/docker<span class="hljs-literal">-ce</span>.repo<br></code></pre></td></tr></table></figure><h2 id="2-2-Docker安装"><a href="#2-2-Docker安装" class="headerlink" title="2.2 Docker安装"></a>2.2 Docker安装</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">yum <span class="hljs-literal">-y</span> install docker<span class="hljs-literal">-ce</span><br></code></pre></td></tr></table></figure><h2 id="2-3-启动Docker服务"><a href="#2-3-启动Docker服务" class="headerlink" title="2.3 启动Docker服务"></a>2.3 启动Docker服务</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">systemctl enable <span class="hljs-literal">--now</span> docker<br></code></pre></td></tr></table></figure><h2 id="2-4-修改cgroup方式"><a href="#2-4-修改cgroup方式" class="headerlink" title="2.4 修改cgroup方式"></a>2.4 修改cgroup方式</h2><blockquote><p>&#x2F;etc&#x2F;docker&#x2F;daemon.json 默认没有此文件，需要单独创建</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">在/etc/docker/daemon.json添加如下内容<br><br><span class="hljs-comment"># cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br>&#123;<br>        <span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># systemctl restart docker</span><br></code></pre></td></tr></table></figure><h2 id="2-5-cri-dockerd安装"><a href="#2-5-cri-dockerd安装" class="headerlink" title="2.5 cri-dockerd安装"></a>2.5 cri-dockerd安装</h2><h2 id="cri-dockerd安装"><a href="#cri-dockerd安装" class="headerlink" title="cri-dockerd安装"></a>cri-dockerd安装</h2><p>![image-20220507120653090](kubeadm快速部署Kubernetes 1.29.0版本集群.assets&#x2F;image-20220507120653090-1702872869337.png)</p><p>![image-20220507120725815](kubeadm快速部署Kubernetes 1.29.0版本集群.assets&#x2F;image-20220507120725815-1702872869338.png)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.8/cri-dockerd-0.3.8-3.el7.x86_64.rpm</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># yum -y install cri-dockerd-0.3.8-3.el7.x86_64.rpm</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># vim /usr/lib/systemd/system/cri-docker.service</span><br><br>修改第<span class="hljs-number">10</span>行内容<br>ExecStart=/usr/bin/cri<span class="hljs-literal">-dockerd</span> <span class="hljs-literal">--pod-infra-container-image</span>=registry.k8s.io/pause:<span class="hljs-number">3.9</span> <span class="hljs-literal">--container-runtime-endpoint</span> fd://<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># systemctl start cri-docker</span><br><span class="hljs-comment"># systemctl enable cri-docker</span><br></code></pre></td></tr></table></figure><h1 id="三、kubernetes-1-29-0-集群部署"><a href="#三、kubernetes-1-29-0-集群部署" class="headerlink" title="三、kubernetes 1.29.0  集群部署"></a>三、kubernetes 1.29.0  集群部署</h1><h2 id="3-1-集群软件及版本说明"><a href="#3-1-集群软件及版本说明" class="headerlink" title="3.1  集群软件及版本说明"></a>3.1  集群软件及版本说明</h2><table><thead><tr><th></th><th>kubeadm</th><th>kubelet</th><th>kubectl</th></tr></thead><tbody><tr><td>版本</td><td>1.29.0</td><td>1.29.0</td><td>1.29.0</td></tr><tr><td>安装位置</td><td>集群所有主机</td><td>集群所有主机</td><td>集群所有主机</td></tr><tr><td>作用</td><td>初始化集群、管理集群等</td><td>用于接收api-server指令，对pod生命周期进行管理</td><td>集群应用命令行管理工具</td></tr></tbody></table><h2 id="3-2-kubernetes-YUM源准备"><a href="#3-2-kubernetes-YUM源准备" class="headerlink" title="3.2  kubernetes YUM源准备"></a>3.2  kubernetes YUM源准备</h2><blockquote><p>使用kubernetes社区YUM源</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># cat &gt; /etc/yum.repos.d/k8s.repo &lt;&lt;EOF</span><br>[<span class="hljs-type">kubernetes</span>]<br>name=Kubernetes<br>baseurl=https://pkgs.k8s.io/core:/stable:/v1.<span class="hljs-number">29</span>/rpm/<br>enabled=<span class="hljs-number">1</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https://pkgs.k8s.io/core:/stable:/v1.<span class="hljs-number">29</span>/rpm/repodata/repomd.xml.key<br><span class="hljs-comment">#exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni</span><br>EOF<br></code></pre></td></tr></table></figure><h2 id="3-3-集群软件安装"><a href="#3-3-集群软件安装" class="headerlink" title="3.3 集群软件安装"></a>3.3 集群软件安装</h2><blockquote><p>所有节点均可安装</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">默认安装<br><span class="hljs-comment"># yum -y install  kubeadm  kubelet kubectl</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">安装指定版本<br><span class="hljs-comment"># yum -y install  kubeadm-1.29.0-150500.1.1  kubelet-1.29.0-150500.1.1 kubectl-1.29.0-150500.1.1</span><br></code></pre></td></tr></table></figure><h2 id="3-4-配置kubelet"><a href="#3-4-配置kubelet" class="headerlink" title="3.4 配置kubelet"></a>3.4 配置kubelet</h2><blockquote><p>为了实现docker使用的cgroupdriver与kubelet使用的cgroup的一致性，建议修改如下文件内容。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># vim /etc/sysconfig/kubelet</span><br>KUBELET_EXTRA_ARGS=<span class="hljs-string">&quot;--cgroup-driver=systemd&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">设置kubelet为开机自启动即可，由于没有生成配置文件，集群初始化后自动启动<br><span class="hljs-comment"># systemctl enable kubelet</span><br></code></pre></td></tr></table></figure><h2 id="3-5-集群镜像准备"><a href="#3-5-集群镜像准备" class="headerlink" title="3.5  集群镜像准备"></a>3.5  集群镜像准备</h2><blockquote><p>可使用VPN实现下载。</p></blockquote><h3 id="k8s相关的镜像"><a href="#k8s相关的镜像" class="headerlink" title="k8s相关的镜像"></a>k8s相关的镜像</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">下载k8s所需镜像包<br>wget http:<span class="hljs-regexp">//mi</span>rrors.oby.ink<span class="hljs-regexp">/docker-images/</span>k8s-<span class="hljs-number">1.29</span>.<span class="hljs-number">0</span>.tar<br>导入k8s配置镜像<br>docker load -i k8s-<span class="hljs-number">1.29</span>.<span class="hljs-number">0</span>.tar<br></code></pre></td></tr></table></figure><h3 id="calico相关镜像"><a href="#calico相关镜像" class="headerlink" title="calico相关镜像"></a>calico相关镜像</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gauss">网络相关的镜像<br><br>wget http:<span class="hljs-comment">//mirrors.oby.ink/docker-images/k8s-calico-3.27.0.tar</span><br>docker <span class="hljs-keyword">load</span> -i k8s-calico<span class="hljs-number">-3.27</span><span class="hljs-number">.0</span>.tar<br><br>docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="hljs-built_in">pause</span>:<span class="hljs-number">3.6</span><br>docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="hljs-built_in">pause</span>:<span class="hljs-number">3.6</span> registry.k8s.io/<span class="hljs-built_in">pause</span>:<span class="hljs-number">3.6</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubeadm config images list --kubernetes-version=v1.29.0</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># cat image_download.sh</span><br><span class="hljs-comment">#!/bin/bash</span><br>images_list=<span class="hljs-string">&#x27;</span><br><span class="hljs-string">镜像列表&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$images_list</span><br><span class="hljs-keyword">do</span><br>        docker pull <span class="hljs-variable">$i</span><br>done<br><br>docker save <span class="hljs-literal">-o</span> k8s<span class="hljs-literal">-1-29-0</span>.tar <span class="hljs-variable">$images_list</span><br></code></pre></td></tr></table></figure><h2 id="3-6-集群初始化"><a href="#3-6-集群初始化" class="headerlink" title="3.6 集群初始化"></a>3.6 集群初始化</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubeadm init --kubernetes-version=v1.29.0 --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=192.168.10.160  --cri-socket unix:///var/run/cri-dockerd.sock</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs powershell">初始化过程输出<br>[<span class="hljs-type">init</span>] <span class="hljs-keyword">Using</span> Kubernetes version: v1.29.0<br>[<span class="hljs-type">preflight</span>] Running pre<span class="hljs-literal">-flight</span> checks<br>[<span class="hljs-type">preflight</span>] Pulling images required <span class="hljs-keyword">for</span> setting up a Kubernetes cluster<br>[<span class="hljs-type">preflight</span>] This might take a minute or two, depending on the speed of your internet connection<br>[<span class="hljs-type">preflight</span>] You can also perform this action <span class="hljs-keyword">in</span> beforehand <span class="hljs-keyword">using</span> <span class="hljs-string">&#x27;kubeadm config images pull&#x27;</span><br>[<span class="hljs-type">certs</span>] <span class="hljs-keyword">Using</span> certificateDir folder <span class="hljs-string">&quot;/etc/kubernetes/pki&quot;</span><br>[<span class="hljs-type">certs</span>] Generating <span class="hljs-string">&quot;ca&quot;</span> certificate and key<br>[<span class="hljs-type">certs</span>] Generating <span class="hljs-string">&quot;apiserver&quot;</span> certificate and key<br>[<span class="hljs-type">certs</span>] apiserver serving cert is signed <span class="hljs-keyword">for</span> DNS names [<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">kubernetes</span> <span class="hljs-type">kubernetes.default</span> <span class="hljs-type">kubernetes.default.svc</span> <span class="hljs-type">kubernetes.default.svc.cluster.local</span>] and IPs [<span class="hljs-number">10.96</span><span class="hljs-type">.0.1</span> <span class="hljs-number">192.168</span><span class="hljs-type">.10.160</span>]<br>[<span class="hljs-type">certs</span>] Generating <span class="hljs-string">&quot;apiserver-kubelet-client&quot;</span> certificate and key<br>[<span class="hljs-type">certs</span>] Generating <span class="hljs-string">&quot;front-proxy-ca&quot;</span> certificate and key<br>[<span class="hljs-type">certs</span>] Generating <span class="hljs-string">&quot;front-proxy-client&quot;</span> certificate and key<br>[<span class="hljs-type">certs</span>] Generating <span class="hljs-string">&quot;etcd/ca&quot;</span> certificate and key<br>[<span class="hljs-type">certs</span>] Generating <span class="hljs-string">&quot;etcd/server&quot;</span> certificate and key<br>[<span class="hljs-type">certs</span>] etcd/server serving cert is signed <span class="hljs-keyword">for</span> DNS names [<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">localhost</span>] and IPs [<span class="hljs-number">192.168</span><span class="hljs-type">.10.160</span> <span class="hljs-number">127.0</span><span class="hljs-type">.0.1</span> ::<span class="hljs-number">1</span>]<br>[<span class="hljs-type">certs</span>] Generating <span class="hljs-string">&quot;etcd/peer&quot;</span> certificate and key<br>[<span class="hljs-type">certs</span>] etcd/peer serving cert is signed <span class="hljs-keyword">for</span> DNS names [<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">localhost</span>] and IPs [<span class="hljs-number">192.168</span><span class="hljs-type">.10.160</span> <span class="hljs-number">127.0</span><span class="hljs-type">.0.1</span> ::<span class="hljs-number">1</span>]<br>[<span class="hljs-type">certs</span>] Generating <span class="hljs-string">&quot;etcd/healthcheck-client&quot;</span> certificate and key<br>[<span class="hljs-type">certs</span>] Generating <span class="hljs-string">&quot;apiserver-etcd-client&quot;</span> certificate and key<br>[<span class="hljs-type">certs</span>] Generating <span class="hljs-string">&quot;sa&quot;</span> key and public key<br>[<span class="hljs-type">kubeconfig</span>] <span class="hljs-keyword">Using</span> kubeconfig folder <span class="hljs-string">&quot;/etc/kubernetes&quot;</span><br>[<span class="hljs-type">kubeconfig</span>] Writing <span class="hljs-string">&quot;admin.conf&quot;</span> kubeconfig file<br>[<span class="hljs-type">kubeconfig</span>] Writing <span class="hljs-string">&quot;super-admin.conf&quot;</span> kubeconfig file<br>[<span class="hljs-type">kubeconfig</span>] Writing <span class="hljs-string">&quot;kubelet.conf&quot;</span> kubeconfig file<br>[<span class="hljs-type">kubeconfig</span>] Writing <span class="hljs-string">&quot;controller-manager.conf&quot;</span> kubeconfig file<br>[<span class="hljs-type">kubeconfig</span>] Writing <span class="hljs-string">&quot;scheduler.conf&quot;</span> kubeconfig file<br>[<span class="hljs-type">etcd</span>] Creating <span class="hljs-keyword">static</span> Pod manifest <span class="hljs-keyword">for</span> local etcd <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;/etc/kubernetes/manifests&quot;</span><br>[<span class="hljs-type">control</span>-<span class="hljs-type">plane</span>] <span class="hljs-keyword">Using</span> manifest folder <span class="hljs-string">&quot;/etc/kubernetes/manifests&quot;</span><br>[<span class="hljs-type">control</span>-<span class="hljs-type">plane</span>] Creating <span class="hljs-keyword">static</span> Pod manifest <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;kube-apiserver&quot;</span><br>[<span class="hljs-type">control</span>-<span class="hljs-type">plane</span>] Creating <span class="hljs-keyword">static</span> Pod manifest <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;kube-controller-manager&quot;</span><br>[<span class="hljs-type">control</span>-<span class="hljs-type">plane</span>] Creating <span class="hljs-keyword">static</span> Pod manifest <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;kube-scheduler&quot;</span><br>[<span class="hljs-type">kubelet</span>-<span class="hljs-type">start</span>] Writing kubelet environment file with flags to file <span class="hljs-string">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br>[<span class="hljs-type">kubelet</span>-<span class="hljs-type">start</span>] Writing kubelet configuration to file <span class="hljs-string">&quot;/var/lib/kubelet/config.yaml&quot;</span><br>[<span class="hljs-type">kubelet</span>-<span class="hljs-type">start</span>] Starting the kubelet<br>[<span class="hljs-built_in">wait-control</span>-<span class="hljs-type">plane</span>] Waiting <span class="hljs-keyword">for</span> the kubelet to boot up the control plane as <span class="hljs-keyword">static</span> Pods from directory <span class="hljs-string">&quot;/etc/kubernetes/manifests&quot;</span>. This can take up to <span class="hljs-number">4</span>m0s<br>[<span class="hljs-type">apiclient</span>] All control plane components are healthy after <span class="hljs-number">4.001643</span> seconds<br>[<span class="hljs-type">upload</span>-<span class="hljs-type">config</span>] Storing the configuration used <span class="hljs-keyword">in</span> ConfigMap <span class="hljs-string">&quot;kubeadm-config&quot;</span> <span class="hljs-keyword">in</span> the <span class="hljs-string">&quot;kube-system&quot;</span> Namespace<br>[<span class="hljs-type">kubelet</span>] Creating a ConfigMap <span class="hljs-string">&quot;kubelet-config&quot;</span> <span class="hljs-keyword">in</span> namespace kube<span class="hljs-literal">-system</span> with the configuration <span class="hljs-keyword">for</span> the kubelets <span class="hljs-keyword">in</span> the cluster<br>[<span class="hljs-type">upload</span>-<span class="hljs-type">certs</span>] Skipping phase. Please see <span class="hljs-literal">--upload-certs</span><br>[<span class="hljs-type">mark</span>-<span class="hljs-type">control</span>-<span class="hljs-type">plane</span>] Marking the node k8s<span class="hljs-literal">-master01</span> as control<span class="hljs-literal">-plane</span> by adding the labels: [<span class="hljs-type">node</span>-<span class="hljs-type">role.kubernetes.io</span>/<span class="hljs-type">control</span>-<span class="hljs-type">plane</span> <span class="hljs-type">node.kubernetes.io</span>/<span class="hljs-type">exclude</span>-<span class="hljs-type">from</span>-<span class="hljs-type">external</span>-<span class="hljs-type">load</span>-<span class="hljs-type">balancers</span>]<br>[<span class="hljs-type">mark</span>-<span class="hljs-type">control</span>-<span class="hljs-type">plane</span>] Marking the node k8s<span class="hljs-literal">-master01</span> as control<span class="hljs-literal">-plane</span> by adding the taints [<span class="hljs-type">node</span>-<span class="hljs-type">role.kubernetes.io</span>/<span class="hljs-type">control</span>-<span class="hljs-type">plane</span>:<span class="hljs-type">NoSchedule</span>]<br>[<span class="hljs-type">bootstrap</span>-<span class="hljs-type">token</span>] <span class="hljs-keyword">Using</span> token: nnyedz.y3ajtpy468lmol2g<br>[<span class="hljs-type">bootstrap</span>-<span class="hljs-type">token</span>] Configuring bootstrap tokens, cluster<span class="hljs-literal">-info</span> ConfigMap, RBAC Roles<br>[<span class="hljs-type">bootstrap</span>-<span class="hljs-type">token</span>] Configured RBAC rules to allow Node Bootstrap tokens to get nodes<br>[<span class="hljs-type">bootstrap</span>-<span class="hljs-type">token</span>] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class="hljs-keyword">in</span> order <span class="hljs-keyword">for</span> nodes to get long term certificate credentials<br>[<span class="hljs-type">bootstrap</span>-<span class="hljs-type">token</span>] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token<br>[<span class="hljs-type">bootstrap</span>-<span class="hljs-type">token</span>] Configured RBAC rules to allow certificate rotation <span class="hljs-keyword">for</span> all node client certificates <span class="hljs-keyword">in</span> the cluster<br>[<span class="hljs-type">bootstrap</span>-<span class="hljs-type">token</span>] Creating the <span class="hljs-string">&quot;cluster-info&quot;</span> ConfigMap <span class="hljs-keyword">in</span> the <span class="hljs-string">&quot;kube-public&quot;</span> namespace<br>[<span class="hljs-type">kubelet</span>-<span class="hljs-type">finalize</span>] Updating <span class="hljs-string">&quot;/etc/kubernetes/kubelet.conf&quot;</span> to point to a rotatable kubelet client certificate and key<br>[<span class="hljs-type">addons</span>] Applied essential addon: CoreDNS<br>[<span class="hljs-type">addons</span>] Applied essential addon: kube<span class="hljs-literal">-proxy</span><br><br>Your Kubernetes control<span class="hljs-literal">-plane</span> has initialized successfully!<br><br>To <span class="hljs-built_in">start</span> <span class="hljs-keyword">using</span> your cluster, you need to run the following as a regular user:<br><br>  mkdir <span class="hljs-literal">-p</span> <span class="hljs-variable">$HOME</span>/.kube<br>  sudo <span class="hljs-built_in">cp</span> <span class="hljs-literal">-i</span> /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>  sudo chown <span class="hljs-variable">$</span>(id <span class="hljs-literal">-u</span>):<span class="hljs-variable">$</span>(id <span class="hljs-literal">-g</span>) <span class="hljs-variable">$HOME</span>/.kube/config<br><br>Alternatively, <span class="hljs-keyword">if</span> you are the root user, you can run:<br><br>  export KUBECONFIG=/etc/kubernetes/admin.conf<br><br>You should now deploy a pod network to the cluster.<br>Run <span class="hljs-string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:<br>  https://kubernetes.io/docs/concepts/cluster<span class="hljs-literal">-administration</span>/addons/<br><br>Then you can join any number of worker nodes by running the following on each as root:<br><br>kubeadm join <span class="hljs-number">192.168</span>.<span class="hljs-number">10.160</span>:<span class="hljs-number">6443</span> <span class="hljs-literal">--token</span> nnyedz.y3ajtpy468lmol2g \<br>        <span class="hljs-literal">--discovery-token-ca-cert-hash</span> sha256:da611f922567238facd9c9557bd2e6b40d066b35567ca9696849f005dd15e646<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubeadm</span> init --kubernetes-version=v1.<span class="hljs-number">29</span>.<span class="hljs-number">0</span> --pod-network-cidr=<span class="hljs-number">10.244.0.0</span>/<span class="hljs-number">16</span> --apiserver-advertise-address=<span class="hljs-number">192.168.3.160</span>  --cri-socket unix:///var/run/cri-dockerd.sock<br><br></code></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[root@master01 home]# kubeadm init --kubernetes-version=v1<span class="hljs-number">.29</span><span class="hljs-number">.0</span> --pod-network-cidr=<span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">16</span> --apiserver-advertise-address=<span class="hljs-number">192.168</span><span class="hljs-number">.3</span><span class="hljs-number">.160</span>  --cri-socket unix:///var/run/cri-dockerd.sock<br>[init] <span class="hljs-symbol">Using</span> <span class="hljs-symbol">Kubernetes</span> version: v1<span class="hljs-number">.29</span><span class="hljs-number">.0</span><br>[preflight] <span class="hljs-symbol">Running</span> pre-flight checks<br>        [<span class="hljs-symbol">WARNING</span> <span class="hljs-symbol">Hostname</span>]: hostname <span class="hljs-string">&quot;master01&quot;</span> could not be reached<br>        [<span class="hljs-symbol">WARNING</span> <span class="hljs-symbol">Hostname</span>]: hostname <span class="hljs-string">&quot;master01&quot;</span>: lookup master01 on <span class="hljs-number">119.29</span><span class="hljs-number">.29</span><span class="hljs-number">.29</span>:<span class="hljs-number">53</span>: no such host<br>[preflight] <span class="hljs-symbol">Pulling</span> images required for setting up a <span class="hljs-symbol">Kubernetes</span> cluster<br>[preflight] <span class="hljs-symbol">This</span> might take a minute or two, depending on the speed of your internet connection<br>[preflight] <span class="hljs-symbol">You</span> can also perform this action in beforehand using <span class="hljs-string">&#x27;kubeadm config images pull&#x27;</span><br>[certs] <span class="hljs-symbol">Using</span> certificateDir folder <span class="hljs-string">&quot;/etc/kubernetes/pki&quot;</span><br>[certs] <span class="hljs-symbol">Generating</span> <span class="hljs-string">&quot;ca&quot;</span> certificate and key<br>[certs] <span class="hljs-symbol">Generating</span> <span class="hljs-string">&quot;apiserver&quot;</span> certificate and key<br>[certs] apiserver serving cert is signed for <span class="hljs-symbol">DNS</span> names [kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local master01] and <span class="hljs-symbol">IPs</span> [<span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-number">192.168</span><span class="hljs-number">.3</span><span class="hljs-number">.160</span>]<br>[certs] <span class="hljs-symbol">Generating</span> <span class="hljs-string">&quot;apiserver-kubelet-client&quot;</span> certificate and key<br>[certs] <span class="hljs-symbol">Generating</span> <span class="hljs-string">&quot;front-proxy-ca&quot;</span> certificate and key<br>[certs] <span class="hljs-symbol">Generating</span> <span class="hljs-string">&quot;front-proxy-client&quot;</span> certificate and key<br>[certs] <span class="hljs-symbol">Generating</span> <span class="hljs-string">&quot;etcd/ca&quot;</span> certificate and key<br>[certs] <span class="hljs-symbol">Generating</span> <span class="hljs-string">&quot;etcd/server&quot;</span> certificate and key<br>[certs] etcd/server serving cert is signed for <span class="hljs-symbol">DNS</span> names [localhost master01] and <span class="hljs-symbol">IPs</span> [<span class="hljs-number">192.168</span><span class="hljs-number">.3</span><span class="hljs-number">.160</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> ::<span class="hljs-number">1</span>]<br>[certs] <span class="hljs-symbol">Generating</span> <span class="hljs-string">&quot;etcd/peer&quot;</span> certificate and key<br>[certs] etcd/peer serving cert is signed for <span class="hljs-symbol">DNS</span> names [localhost master01] and <span class="hljs-symbol">IPs</span> [<span class="hljs-number">192.168</span><span class="hljs-number">.3</span><span class="hljs-number">.160</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> ::<span class="hljs-number">1</span>]<br>[certs] <span class="hljs-symbol">Generating</span> <span class="hljs-string">&quot;etcd/healthcheck-client&quot;</span> certificate and key<br>[certs] <span class="hljs-symbol">Generating</span> <span class="hljs-string">&quot;apiserver-etcd-client&quot;</span> certificate and key<br>[certs] <span class="hljs-symbol">Generating</span> <span class="hljs-string">&quot;sa&quot;</span> key and public key<br>[kubeconfig] <span class="hljs-symbol">Using</span> kubeconfig folder <span class="hljs-string">&quot;/etc/kubernetes&quot;</span><br>[kubeconfig] <span class="hljs-symbol">Writing</span> <span class="hljs-string">&quot;admin.conf&quot;</span> kubeconfig file<br>[kubeconfig] <span class="hljs-symbol">Writing</span> <span class="hljs-string">&quot;super-admin.conf&quot;</span> kubeconfig file<br>[kubeconfig] <span class="hljs-symbol">Writing</span> <span class="hljs-string">&quot;kubelet.conf&quot;</span> kubeconfig file<br>[kubeconfig] <span class="hljs-symbol">Writing</span> <span class="hljs-string">&quot;controller-manager.conf&quot;</span> kubeconfig file<br>[kubeconfig] <span class="hljs-symbol">Writing</span> <span class="hljs-string">&quot;scheduler.conf&quot;</span> kubeconfig file<br>[etcd] <span class="hljs-symbol">Creating</span> static <span class="hljs-symbol">Pod</span> manifest for local etcd in <span class="hljs-string">&quot;/etc/kubernetes/manifests&quot;</span><br>[control-plane] <span class="hljs-symbol">Using</span> manifest folder <span class="hljs-string">&quot;/etc/kubernetes/manifests&quot;</span><br>[control-plane] <span class="hljs-symbol">Creating</span> static <span class="hljs-symbol">Pod</span> manifest for <span class="hljs-string">&quot;kube-apiserver&quot;</span><br>[control-plane] <span class="hljs-symbol">Creating</span> static <span class="hljs-symbol">Pod</span> manifest for <span class="hljs-string">&quot;kube-controller-manager&quot;</span><br>[control-plane] <span class="hljs-symbol">Creating</span> static <span class="hljs-symbol">Pod</span> manifest for <span class="hljs-string">&quot;kube-scheduler&quot;</span><br>[kubelet-start] <span class="hljs-symbol">Writing</span> kubelet environment file with flags to file <span class="hljs-string">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br>[kubelet-start] <span class="hljs-symbol">Writing</span> kubelet configuration to file <span class="hljs-string">&quot;/var/lib/kubelet/config.yaml&quot;</span><br>[kubelet-start] <span class="hljs-symbol">Starting</span> the kubelet<br>[wait-control-plane] <span class="hljs-symbol">Waiting</span> for the kubelet to boot up the control plane as static <span class="hljs-symbol">Pods</span> from directory <span class="hljs-string">&quot;/etc/kubernetes/manifests&quot;</span>. <span class="hljs-symbol">This</span> can take up to <span class="hljs-number">4</span>m0s<br>[apiclient] <span class="hljs-symbol">All</span> control plane components are healthy after <span class="hljs-number">4.004977</span> seconds<br>[upload-config] <span class="hljs-symbol">Storing</span> the configuration used in <span class="hljs-symbol">ConfigMap</span> <span class="hljs-string">&quot;kubeadm-config&quot;</span> in the <span class="hljs-string">&quot;kube-system&quot;</span> <span class="hljs-symbol">Namespace</span><br>[kubelet] <span class="hljs-symbol">Creating</span> a <span class="hljs-symbol">ConfigMap</span> <span class="hljs-string">&quot;kubelet-config&quot;</span> in namespace kube-system with the configuration for the kubelets in the cluster<br>[upload-certs] <span class="hljs-symbol">Skipping</span> phase. <span class="hljs-symbol">Please</span> see --upload-certs<br>[mark-control-plane] <span class="hljs-symbol">Marking</span> the node master01 as control-plane by adding the labels: [node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]<br>[mark-control-plane] <span class="hljs-symbol">Marking</span> the node master01 as control-plane by adding the taints [node-role.kubernetes.io/control-plane:<span class="hljs-symbol">NoSchedule</span>]<br>[bootstrap-token] <span class="hljs-symbol">Using</span> token: ehe6np.b0x9c0o6jxgn877l<br>[bootstrap-token] <span class="hljs-symbol">Configuring</span> bootstrap tokens, cluster-info <span class="hljs-symbol">ConfigMap</span>, <span class="hljs-symbol">RBAC</span> <span class="hljs-symbol">Roles</span><br>[bootstrap-token] <span class="hljs-symbol">Configured</span> <span class="hljs-symbol">RBAC</span> rules to allow <span class="hljs-symbol">Node</span> <span class="hljs-symbol">Bootstrap</span> tokens to get nodes<br>[bootstrap-token] <span class="hljs-symbol">Configured</span> <span class="hljs-symbol">RBAC</span> rules to allow <span class="hljs-symbol">Node</span> <span class="hljs-symbol">Bootstrap</span> tokens to post <span class="hljs-symbol">CSRs</span> in order for nodes to get long term certificate credentials<br>[bootstrap-token] <span class="hljs-symbol">Configured</span> <span class="hljs-symbol">RBAC</span> rules to allow the csrapprover controller automatically approve <span class="hljs-symbol">CSRs</span> from a <span class="hljs-symbol">Node</span> <span class="hljs-symbol">Bootstrap</span> <span class="hljs-symbol">Token</span><br>[bootstrap-token] <span class="hljs-symbol">Configured</span> <span class="hljs-symbol">RBAC</span> rules to allow certificate rotation for all node client certificates in the cluster<br>[bootstrap-token] <span class="hljs-symbol">Creating</span> the <span class="hljs-string">&quot;cluster-info&quot;</span> <span class="hljs-symbol">ConfigMap</span> in the <span class="hljs-string">&quot;kube-public&quot;</span> namespace<br>[kubelet-finalize] <span class="hljs-symbol">Updating</span> <span class="hljs-string">&quot;/etc/kubernetes/kubelet.conf&quot;</span> to point to a rotatable kubelet client certificate and key<br>[addons] <span class="hljs-symbol">Applied</span> essential addon: <span class="hljs-symbol">CoreDNS</span><br>[addons] <span class="hljs-symbol">Applied</span> essential addon: kube-proxy<br><br><span class="hljs-symbol">Your</span> <span class="hljs-symbol">Kubernetes</span> control-plane has initialized successfully!<br><br><span class="hljs-symbol">To</span> start using your cluster, you need to run the following as a regular user:<br><br>  mkdir -p $<span class="hljs-symbol">HOME</span>/.kube<br>  sudo cp -i /etc/kubernetes/admin.conf $<span class="hljs-symbol">HOME</span>/.kube/config<br>  sudo chown $(id -u):$(id -g) $<span class="hljs-symbol">HOME</span>/.kube/config<br><br><span class="hljs-symbol">Alternatively</span>, if you are the root user, you can run:<br><br>  export <span class="hljs-symbol">KUBECONFIG</span>=/etc/kubernetes/admin.conf<br><br><span class="hljs-symbol">You</span> should now deploy a pod network to the cluster.<br><span class="hljs-symbol">Run</span> <span class="hljs-string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:<br>  https://kubernetes.io/docs/concepts/cluster-administration/addons/<br><br><span class="hljs-symbol">Then</span> you can join any number of worker nodes by running the following on each as root:<br><br>kubeadm join <span class="hljs-number">192.168</span><span class="hljs-number">.3</span><span class="hljs-number">.160</span>:<span class="hljs-number">6443</span> --token ehe6np.b0x9c0o6jxgn877l \<br>        --discovery-token-ca-cert-hash sha256:<span class="hljs-number">03</span>ec7ec1f2bfc19e3f91005027adec8c33008fdf44841d287cd5c23a6f51f3b2<br>[root@master01 home]#<br><br></code></pre></td></tr></table></figure><p>![image-20240122185058124](D:\05_Document\009_DevOps\使用kubeadm快速部署Kubernetes 1.29.0版本集群\01-笔记\assets\image-20240122185058124.png)</p><h2 id="3-7-集群应用客户端管理集群文件准备"><a href="#3-7-集群应用客户端管理集群文件准备" class="headerlink" title="3.7  集群应用客户端管理集群文件准备"></a>3.7  集群应用客户端管理集群文件准备</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># mkdir -p $HOME/.kube</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># chown $(id -u):$(id -g) $HOME/.kube/config</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># ls /root/.kube/</span><br>config<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><br>mkdir <span class="hljs-literal">-p</span> <span class="hljs-variable">$HOME</span>/.kube<br>sudo <span class="hljs-built_in">cp</span> <span class="hljs-literal">-i</span> /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>sudo chown <span class="hljs-variable">$</span>(id <span class="hljs-literal">-u</span>):<span class="hljs-variable">$</span>(id <span class="hljs-literal">-g</span>) <span class="hljs-variable">$HOME</span>/.kube/config<br>  <br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><br>[<span class="hljs-meta">root@master01 home</span>]<span class="hljs-meta"># ^C</span><br>You have <span class="hljs-keyword">new</span> mail <span class="hljs-keyword">in</span> /<span class="hljs-keyword">var</span>/spool/mail/root<br>[<span class="hljs-meta">root@master01 home</span>]<span class="hljs-meta"># mkdir -p $HOME/.kube</span><br>[<span class="hljs-meta">root@master01 home</span>]<span class="hljs-meta"># sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br>[<span class="hljs-meta">root@master01 home</span>]<span class="hljs-meta"># sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br>[<span class="hljs-meta">root@master01 home</span>]<span class="hljs-meta"># kubectl get nodes</span><br>NAME       STATUS     ROLES           AGE   VERSION<br>master01   NotReady   control-plane   <span class="hljs-number">82</span>m   v1<span class="hljs-number">.29</span><span class="hljs-number">.1</span><br>[<span class="hljs-meta">root@master01 home</span>]<span class="hljs-meta">#</span><br><br><br></code></pre></td></tr></table></figure><p>工作节点</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#===============================================================</span><br><span class="hljs-comment"># 方式2:</span><br><span class="hljs-comment"># 下载k8s所需镜像包</span><br>wget http:<span class="hljs-regexp">//mirr</span>ors.oby.ink/docker-images/k8s-<span class="hljs-number">1.29</span>.<span class="hljs-number">0</span>.tar<br><span class="hljs-comment"># 导入k8s配置镜像</span><br>docker load -i k8s-<span class="hljs-number">1.29</span>.<span class="hljs-number">0</span>.tar<br><br><span class="hljs-comment"># 所有需要用到镜像：</span><br>[admin@k8s-master-<span class="hljs-number">01</span> software]$ docker images<br><br><br>kubeadm <span class="hljs-keyword">join</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">3.160</span>:<span class="hljs-number">6443</span> --token ehe6np.b0x9c0o6jxgn877l \<br>        --discovery-token-ca-cert-hash sha256:<span class="hljs-number">03</span>ec7ec1f2bfc19e3f91005027adec8c33008fdf44841d287cd5c23a6f51f3b2 --cri-<span class="hljs-keyword">socket</span> unix:<span class="hljs-regexp">//</span><span class="hljs-regexp">/var/run</span>/cri-dockerd.sock<br><br><br></code></pre></td></tr></table></figure><p>![image-20240122185448530](D:\05_Document\009_DevOps\使用kubeadm快速部署Kubernetes 1.29.0版本集群\01-笔记\assets\image-20240122185448530.png)</p><p>![image-20240122193321596](D:\05_Document\009_DevOps\使用kubeadm快速部署Kubernetes 1.29.0版本集群\01-笔记\assets\image-20240122193321596.png)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br>[<span class="hljs-meta">root@k8s-worker01 home</span>]<span class="hljs-meta">#  kubeadm join 192.168.3.160:6443 --token ehe6np.b0x9c0o6jxgn877l \</span><br>&gt;         --discovery-token-ca-cert-hash sha256:<span class="hljs-number">03</span>ec7ec1f2bfc19e3f91005027adec8c33008fdf44841d287cd5c23a6f51f3b2 --cri-socket unix:<span class="hljs-comment"><span class="hljs-doctag">///</span>var/run/cri-dockerd.sock</span><br>[<span class="hljs-meta">preflight</span>] Running pre-flight checks<br>[<span class="hljs-meta">preflight</span>] Reading configuration <span class="hljs-keyword">from</span> the cluster...<br>[<span class="hljs-meta">preflight</span>] FYI: You can look at <span class="hljs-keyword">this</span> config file <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span><br>[<span class="hljs-meta">kubelet-start</span>] Writing kubelet configuration to file <span class="hljs-string">&quot;/var/lib/kubelet/config.yaml&quot;</span><br>[<span class="hljs-meta">kubelet-start</span>] Writing kubelet environment file <span class="hljs-keyword">with</span> flags to file <span class="hljs-string">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br>[<span class="hljs-meta">kubelet-start</span>] Starting the kubelet<br>[<span class="hljs-meta">kubelet-start</span>] Waiting <span class="hljs-keyword">for</span> the kubelet to perform the TLS Bootstrap...<br><br>This node has joined the cluster:<br>* Certificate signing request was sent to apiserver <span class="hljs-keyword">and</span> a response was received.<br>* The Kubelet was informed of the <span class="hljs-keyword">new</span> secure connection details.<br><br>Run <span class="hljs-string">&#x27;kubectl get nodes&#x27;</span> <span class="hljs-keyword">on</span> the control-plane to see <span class="hljs-keyword">this</span> node <span class="hljs-keyword">join</span> the cluster.<br><br>[<span class="hljs-meta">root@k8s-worker01 home</span>]<span class="hljs-meta">#</span><br><br></code></pre></td></tr></table></figure><p> ![image-20240122193242198](D:\05_Document\009_DevOps\使用kubeadm快速部署Kubernetes 1.29.0版本集群\01-笔记\assets\image-20240122193242198.png)</p><h2 id="3-8-集群网络插件部署-calico"><a href="#3-8-集群网络插件部署-calico" class="headerlink" title="3.8  集群网络插件部署 calico"></a>3.8  集群网络插件部署 calico</h2><blockquote><p>使用calico部署集群网络</p><p>安装参考网址：<a href="https://projectcalico.docs.tigera.io/about/about-calico">https://projectcalico.docs.tigera.io/about/about-calico</a></p></blockquote><p>![image-20230220180313085](kubeadm快速部署Kubernetes 1.29.0版本集群.assets\image-20230220180313085.png)</p><p>![image-20231218122240570](kubeadm快速部署Kubernetes 1.29.0版本集群.assets&#x2F;image-20231218122240570.png)</p><ul><li>如果yaml文件不能访问，可以vpn下载后离线方式安装</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell">应用operator资源清单文件<br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.4/manifests/tigera-operator.yaml</span><br><br><span class="hljs-comment"># 安装</span><br>kubectl create <span class="hljs-operator">-f</span> tigera<span class="hljs-literal">-operator</span>.yaml<br><br><span class="hljs-comment"># 删除</span><br>kubectl delete <span class="hljs-operator">-f</span> tigera<span class="hljs-literal">-operator</span>.yaml<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>[root@master01 home]<span class="hljs-comment"># kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/tigera-operator.yaml</span><br>namespace/tigera-operator created<br>customresourcedefinition.apiextensions.k8s.io/bgpconfigurations.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/bgpfilters.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/bgppeers.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/blockaffinities.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/caliconodestatuses.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/clusterinformations.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/felixconfigurations.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/globalnetworkpolicies.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/globalnetworksets.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/hostendpoints.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/ipamblocks.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/ipamconfigs.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/ipamhandles.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/ippools.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/ipreservations.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/kubecontrollersconfigurations.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/networkpolicies.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/networksets.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/apiservers.operator.tigera.io created<br>customresourcedefinition.apiextensions.k8s.io/imagesets.operator.tigera.io created<br>customresourcedefinition.apiextensions.k8s.io/installations.operator.tigera.io created<br>customresourcedefinition.apiextensions.k8s.io/tigerastatuses.operator.tigera.io created<br>serviceaccount/tigera-operator created<br>clusterrole.rbac.authorization.k8s.io/tigera-operator created<br>clusterrolebinding.rbac.authorization.k8s.io/tigera-operator created<br>deployment.apps/tigera-operator created<br>[root@master01 home]<span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></figure><p>![image-20240122193751276](D:\05_Document\009_DevOps\使用kubeadm快速部署Kubernetes 1.29.0版本集群\01-笔记\assets\image-20240122193751276.png)</p><p> ![image-20240122193822648](D:\05_Document\009_DevOps\使用kubeadm快速部署Kubernetes 1.29.0版本集群\01-笔记\assets\image-20240122193822648.png)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">通过自定义资源方式安装<br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># wget https://raw.githubusercontent.com/projectcalico/calico/v3.26.4/manifests/custom-resources.yaml</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell">修改文件第<span class="hljs-number">13</span>行，修改为使用kubeadm init <span class="hljs-literal">----pod-network-cidr</span>对应的IP地址段<br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># vim custom-resources.yaml</span><br>......<br> <span class="hljs-number">11</span>     ipPools:<br> <span class="hljs-number">12</span>     - blockSize: <span class="hljs-number">26</span><br> <span class="hljs-number">13</span>       cidr: <span class="hljs-number">10.244</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">16</span> <br> <span class="hljs-number">14</span>       encapsulation: VXLANCrossSubnet<br>......<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/projectcalico/</span>calico<span class="hljs-regexp">/v3.27.0/m</span>anifests/custom-resources.yaml<br><br>kubectl create -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/projectcalico/</span>calico<span class="hljs-regexp">/v3.27.0/m</span>anifests/custom-resources.yaml<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># This section includes base Calico installation configuration.</span><br><span class="hljs-comment"># For more information, see: https://docs.tigera.io/calico/latest/reference/installation/api#operator.tigera.io/v1.Installation</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">operator.tigera.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Installation</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-comment"># Configures Calico networking.</span><br>  <span class="hljs-attr">calicoNetwork:</span><br>    <span class="hljs-comment"># <span class="hljs-doctag">Note:</span> The ipPools section cannot be modified post-install.</span><br>    <span class="hljs-attr">ipPools:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">blockSize:</span> <span class="hljs-number">26</span><br>      <span class="hljs-attr">cidr:</span> <span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/16</span><br>      <span class="hljs-attr">encapsulation:</span> <span class="hljs-string">VXLANCrossSubnet</span><br>      <span class="hljs-attr">natOutgoing:</span> <span class="hljs-string">Enabled</span><br>      <span class="hljs-attr">nodeSelector:</span> <span class="hljs-string">all()</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-comment"># This section configures the Calico API server.</span><br><span class="hljs-comment"># For more information, see: https://docs.tigera.io/calico/latest/reference/installation/api#operator.tigera.io/v1.APIServer</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">operator.tigera.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">APIServer</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span> &#123;&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl <span class="hljs-keyword">delete</span> -f tigera-<span class="hljs-keyword">operator</span>.yaml<br><br>kubectl <span class="hljs-keyword">create</span> -f tigera-<span class="hljs-keyword">operator</span>.yaml<br><br><br>kubectl <span class="hljs-keyword">get</span> pods -n tigera-<span class="hljs-keyword">operator</span><br><br>watch kubectl <span class="hljs-keyword">get</span> pods -n tigera-<span class="hljs-keyword">operator</span><br><br><br><br>[root@master01 home]# ​​​​kubectl <span class="hljs-keyword">get</span> ns<br><span class="hljs-type">NAME</span>              STATUS   AGE<br><span class="hljs-keyword">default</span>           Active   <span class="hljs-number">16</span>h<br>kube-node-lease   Active   <span class="hljs-number">16</span>h<br>kube-<span class="hljs-built_in">public</span>       Active   <span class="hljs-number">16</span>h<br>kube-<span class="hljs-keyword">system</span>       Active   <span class="hljs-number">16</span>h<br>tigera-<span class="hljs-keyword">operator</span>   Active   <span class="hljs-number">30</span>s<br><br><br><br>[root@master01 home]# kubectl <span class="hljs-keyword">get</span> pods -n tigera-<span class="hljs-keyword">operator</span><br><span class="hljs-type">NAME</span>                               READY   STATUS              RESTARTS   AGE<br>tigera-<span class="hljs-keyword">operator</span><span class="hljs-number">-55585899</span>bf-pcnpb   <span class="hljs-number">0</span>/<span class="hljs-number">1</span>     ContainerCreating   <span class="hljs-number">0</span>          <span class="hljs-number">53</span>s<br>[root@master01 home]#<br><br><br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-number">1</span>.pod若处于运行状态，则通过kubectl logs 即可<br><br># 查看指定pod的日志<br>kubectl logs <span class="hljs-symbol">&lt;pod_name&gt;</span><br>kubectl logs -<span class="hljs-keyword">f</span> <span class="hljs-symbol">&lt;pod_name&gt;</span> #类似tail -<span class="hljs-keyword">f</span>的方式查看(tail -<span class="hljs-keyword">f</span> 实时查看日志文件 tail -<span class="hljs-keyword">f</span> 日志文件<span class="hljs-built_in">log</span>)<br><br># 查看指定pod中指定容器的日志<br>kubectl logs <span class="hljs-symbol">&lt;pod_name&gt;</span> -<span class="hljs-keyword">c</span> <span class="hljs-symbol">&lt;container_name&gt;</span><br><br>kubectl logs pod_name -<span class="hljs-keyword">c</span> container_name -n namespace (一次性查看)<br>kubectl logs -<span class="hljs-keyword">f</span> <span class="hljs-symbol">&lt;pod_name&gt;</span> -n namespace (tail -<span class="hljs-keyword">f</span>方式实时查看)<br><span class="hljs-number">2</span>.若pod处于init状态，则需要通过docker <span class="hljs-keyword">ps</span>查看<br><br>#获取对应的pod name<br>kubectl <span class="hljs-built_in">get</span> pods -n  namespace -<span class="hljs-keyword">o</span> wide (STATUS是init的pod_name)<br><br>#通过docker <span class="hljs-keyword">ps</span> 获取该pod的中的CONTAINER ID<br>docker <span class="hljs-keyword">ps</span> | <span class="hljs-keyword">grep</span> pod_name<br><br>#通过docker <span class="hljs-built_in">log</span>获取对应的日志信息<br>docker logs CONTAINER_ID<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">应用资源清单文件<br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl create -f custom-resources.yaml</span><br><br>kubectl create <span class="hljs-operator">-f</span> custom<span class="hljs-literal">-resources</span>.yaml<br><br>kubectl apply <span class="hljs-operator">-f</span> custom<span class="hljs-literal">-resources</span>.yaml<br><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">监视calico<span class="hljs-literal">-sysem</span>命名空间中pod运行情况<br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># watch kubectl get pods -n calico-system</span><br></code></pre></td></tr></table></figure><blockquote><p>Wait until each pod has the <code>STATUS</code> of <code>Running</code>.</p></blockquote><p><img src="C:\Users\CoderDream\AppData\Roaming\Typora\typora-user-images\image-20240123104316640.png" alt="image-20240123104316640"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">已经全部运行<br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get pods -n calico-system</span><br>NAME                                      READY   STATUS    RESTARTS   AGE<br>calico<span class="hljs-literal">-kube-controllers-666bb9949-dzp68</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">11</span>m<br>calico<span class="hljs-literal">-node-jhcf4</span>                         <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">4</span>          <span class="hljs-number">11</span>m<br>calico<span class="hljs-literal">-typha-68b96d8d9c-7qfq7</span>             <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">2</span>          <span class="hljs-number">11</span>m<br></code></pre></td></tr></table></figure><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 查看创建pod的日志</span><br>kubectl describe pod pod<span class="hljs-literal">-name</span> <span class="hljs-literal">-n</span> namespace<br><br>kubectl describe pod tigera<span class="hljs-literal">-operator</span> <span class="hljs-literal">-n</span> tigera<span class="hljs-literal">-operator</span><br></code></pre></td></tr></table></figure><ul><li><p>出错的日志：在worker02上找pause:3.6，从阿里云下载一个，然后修改tag</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 生成pause:3.6的镜像</span><br>docker pull registry.cn<span class="hljs-literal">-hangzhou</span>.aliyuncs.com/google_containers/pause:<span class="hljs-number">3.6</span><br><br>docker tag registry.cn<span class="hljs-literal">-hangzhou</span>.aliyuncs.com/google_containers/pause:<span class="hljs-number">3.6</span> registry.k8s.io/pause:<span class="hljs-number">3.6</span><br></code></pre></td></tr></table></figure></li></ul><p>![image-20240123110216444](D:\05_Document\009_DevOps\使用kubeadm快速部署Kubernetes 1.29.0版本集群\01-笔记\assets\image-20240123110216444.png)</p><ul><li>正常的日志</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master01</span> <span class="hljs-string">home</span>]<span class="hljs-comment"># kubectl describe pod tigera-operator -n tigera-operator</span><br><span class="hljs-attr">Name:</span>             <span class="hljs-string">tigera-operator-55585899bf-rvkg8</span><br><span class="hljs-attr">Namespace:</span>        <span class="hljs-string">tigera-operator</span><br><span class="hljs-attr">Priority:</span>         <span class="hljs-number">0</span><br><span class="hljs-attr">Service Account:</span>  <span class="hljs-string">tigera-operator</span><br><span class="hljs-attr">Node:</span>             <span class="hljs-string">k8s-worker02/192.168.3.162</span><br><span class="hljs-attr">Start Time:</span>       <span class="hljs-string">Tue,</span> <span class="hljs-number">23</span> <span class="hljs-string">Jan</span> <span class="hljs-number">2024 10:40:34</span> <span class="hljs-string">+0800</span><br><span class="hljs-attr">Labels:</span>           <span class="hljs-string">k8s-app=tigera-operator</span><br>                  <span class="hljs-string">name=tigera-operator</span><br>                  <span class="hljs-string">pod-template-hash=55585899bf</span><br><span class="hljs-attr">Annotations:</span>      <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-attr">Status:</span>           <span class="hljs-string">Running</span><br><span class="hljs-attr">IP:</span>               <span class="hljs-number">192.168</span><span class="hljs-number">.3</span><span class="hljs-number">.162</span><br><span class="hljs-attr">IPs:</span><br>  <span class="hljs-attr">IP:</span>           <span class="hljs-number">192.168</span><span class="hljs-number">.3</span><span class="hljs-number">.162</span><br><span class="hljs-attr">Controlled By:</span>  <span class="hljs-string">ReplicaSet/tigera-operator-55585899bf</span><br><span class="hljs-attr">Containers:</span><br>  <span class="hljs-attr">tigera-operator:</span><br>    <span class="hljs-attr">Container ID:</span>  <span class="hljs-string">docker://4666bd9ddd5d89130470af3ce44b01de38f279660ade27b1bccb3d27877b4780</span><br>    <span class="hljs-attr">Image:</span>         <span class="hljs-string">quay.io/tigera/operator:v1.32.3</span><br>    <span class="hljs-attr">Image ID:</span>      <span class="hljs-string">docker-pullable://quay.io/tigera/operator@sha256:715ac9a30f8a9579e44258af20de354715429e11836b493918e9e1a696e9b028</span><br>    <span class="hljs-attr">Port:</span>          <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Host Port:</span>     <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Command:</span><br>      <span class="hljs-string">operator</span><br>    <span class="hljs-attr">State:</span>          <span class="hljs-string">Running</span><br>      <span class="hljs-attr">Started:</span>      <span class="hljs-string">Tue,</span> <span class="hljs-number">23</span> <span class="hljs-string">Jan</span> <span class="hljs-number">2024 10:40:49</span> <span class="hljs-string">+0800</span><br>    <span class="hljs-attr">Ready:</span>          <span class="hljs-literal">True</span><br>    <span class="hljs-attr">Restart Count:</span>  <span class="hljs-number">0</span><br>    <span class="hljs-attr">Environment Variables from:</span><br>      <span class="hljs-attr">kubernetes-services-endpoint  ConfigMap  Optional:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">Environment:</span><br>      <span class="hljs-attr">WATCH_NAMESPACE:</span><br>      <span class="hljs-attr">POD_NAME:</span>                            <span class="hljs-string">tigera-operator-55585899bf-rvkg8</span> <span class="hljs-string">(v1:metadata.name)</span><br>      <span class="hljs-attr">OPERATOR_NAME:</span>                       <span class="hljs-string">tigera-operator</span><br>      <span class="hljs-attr">TIGERA_OPERATOR_INIT_IMAGE_VERSION:</span>  <span class="hljs-string">v1.32.3</span><br>    <span class="hljs-attr">Mounts:</span><br>      <span class="hljs-string">/var/lib/calico</span> <span class="hljs-string">from</span> <span class="hljs-string">var-lib-calico</span> <span class="hljs-string">(ro)</span><br>      <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount</span> <span class="hljs-string">from</span> <span class="hljs-string">kube-api-access-wvcll</span> <span class="hljs-string">(ro)</span><br><span class="hljs-attr">Conditions:</span><br>  <span class="hljs-string">Type</span>                        <span class="hljs-string">Status</span><br>  <span class="hljs-string">PodReadyToStartContainers</span>   <span class="hljs-literal">True</span><br>  <span class="hljs-string">Initialized</span>                 <span class="hljs-literal">True</span><br>  <span class="hljs-string">Ready</span>                       <span class="hljs-literal">True</span><br>  <span class="hljs-string">ContainersReady</span>             <span class="hljs-literal">True</span><br>  <span class="hljs-string">PodScheduled</span>                <span class="hljs-literal">True</span><br><span class="hljs-attr">Volumes:</span><br>  <span class="hljs-attr">var-lib-calico:</span><br>    <span class="hljs-attr">Type:</span>          <span class="hljs-string">HostPath</span> <span class="hljs-string">(bare</span> <span class="hljs-string">host</span> <span class="hljs-string">directory</span> <span class="hljs-string">volume)</span><br>    <span class="hljs-attr">Path:</span>          <span class="hljs-string">/var/lib/calico</span><br>    <span class="hljs-attr">HostPathType:</span><br>  <span class="hljs-attr">kube-api-access-wvcll:</span><br>    <span class="hljs-attr">Type:</span>                    <span class="hljs-string">Projected</span> <span class="hljs-string">(a</span> <span class="hljs-string">volume</span> <span class="hljs-string">that</span> <span class="hljs-string">contains</span> <span class="hljs-string">injected</span> <span class="hljs-string">data</span> <span class="hljs-string">from</span> <span class="hljs-string">multiple</span> <span class="hljs-string">sources)</span><br>    <span class="hljs-attr">TokenExpirationSeconds:</span>  <span class="hljs-number">3607</span><br>    <span class="hljs-attr">ConfigMapName:</span>           <span class="hljs-string">kube-root-ca.crt</span><br>    <span class="hljs-attr">ConfigMapOptional:</span>       <span class="hljs-string">&lt;nil&gt;</span><br>    <span class="hljs-attr">DownwardAPI:</span>             <span class="hljs-literal">true</span><br><span class="hljs-attr">QoS Class:</span>                   <span class="hljs-string">BestEffort</span><br><span class="hljs-attr">Node-Selectors:</span>              <span class="hljs-string">kubernetes.io/os=linux</span><br><span class="hljs-attr">Tolerations:</span>                 <span class="hljs-string">:NoExecute</span> <span class="hljs-string">op=Exists</span><br>                             <span class="hljs-string">:NoSchedule</span> <span class="hljs-string">op=Exists</span><br><span class="hljs-attr">Events:</span><br>  <span class="hljs-string">Type</span>    <span class="hljs-string">Reason</span>     <span class="hljs-string">Age</span>   <span class="hljs-string">From</span>               <span class="hljs-string">Message</span><br>  <span class="hljs-string">----</span>    <span class="hljs-string">------</span>     <span class="hljs-string">----</span>  <span class="hljs-string">----</span>               <span class="hljs-string">-------</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Scheduled</span>  <span class="hljs-string">21m</span>   <span class="hljs-string">default-scheduler</span>  <span class="hljs-string">Successfully</span> <span class="hljs-string">assigned</span> <span class="hljs-string">tigera-operator/tigera-operator-55585899bf-rvkg8</span> <span class="hljs-string">to</span> <span class="hljs-string">k8s-worker02</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Pulling</span>    <span class="hljs-string">21m</span>   <span class="hljs-string">kubelet</span>            <span class="hljs-string">Pulling</span> <span class="hljs-string">image</span> <span class="hljs-string">&quot;quay.io/tigera/operator:v1.32.3&quot;</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Pulled</span>     <span class="hljs-string">20m</span>   <span class="hljs-string">kubelet</span>            <span class="hljs-string">Successfully</span> <span class="hljs-string">pulled</span> <span class="hljs-string">image</span> <span class="hljs-string">&quot;quay.io/tigera/operator:v1.32.3&quot;</span> <span class="hljs-string">in</span> <span class="hljs-number">14.</span><span class="hljs-string">092s</span> <span class="hljs-string">(14.092s</span> <span class="hljs-string">including</span> <span class="hljs-string">waiting)</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Created</span>    <span class="hljs-string">20m</span>   <span class="hljs-string">kubelet</span>            <span class="hljs-string">Created</span> <span class="hljs-string">container</span> <span class="hljs-string">tigera-operator</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Started</span>    <span class="hljs-string">20m</span>   <span class="hljs-string">kubelet</span>            <span class="hljs-string">Started</span> <span class="hljs-string">container</span> <span class="hljs-string">tigera-operator</span><br><br>[<span class="hljs-string">root@master01</span> <span class="hljs-string">home</span>]<span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 查看状态的命令</span><br>kubectl get ns<br><br>kubectl get pods <span class="hljs-literal">-n</span> tigera<span class="hljs-literal">-operator</span><br><br></code></pre></td></tr></table></figure><h2 id="3-9-集群工作节点添加"><a href="#3-9-集群工作节点添加" class="headerlink" title="3.9  集群工作节点添加"></a>3.9  集群工作节点添加</h2><blockquote><p>因容器镜像下载较慢，可能会导致报错，主要错误为没有准备好cni（集群网络插件），如有网络，请耐心等待即可。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">worker01</span> ~]<span class="hljs-comment"># kubeadm join 192.168.10.160:6443 --token nnyedz.y3ajtpy468lmol2g \</span><br>        <span class="hljs-literal">--discovery-token-ca-cert-hash</span> sha256:da611f922567238facd9c9557bd2e6b40d066b35567ca9696849f005dd15e646 <span class="hljs-literal">--cri-socket</span> unix:///var/run/cri<span class="hljs-literal">-dockerd</span>.sock<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">worker02</span> ~]<span class="hljs-comment"># kubeadm join 192.168.10.160:6443 --token nnyedz.y3ajtpy468lmol2g \</span><br>        <span class="hljs-literal">--discovery-token-ca-cert-hash</span> sha256:da611f922567238facd9c9557bd2e6b40d066b35567ca9696849f005dd15e646 <span class="hljs-literal">--cri-socket</span> unix:///var/run/cri<span class="hljs-literal">-dockerd</span>.sock<br></code></pre></td></tr></table></figure><h1 id="四、-Kubernetes集群可用性验证"><a href="#四、-Kubernetes集群可用性验证" class="headerlink" title="四、 Kubernetes集群可用性验证"></a>四、 Kubernetes集群可用性验证</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">查看所有的节点<br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get nodes</span><br>NAME           STATUS   ROLES           AGE   VERSION<br>k8s<span class="hljs-literal">-master01</span>   Ready    control<span class="hljs-literal">-plane</span>   <span class="hljs-number">25</span>m   v1.<span class="hljs-number">29.0</span><br>k8s<span class="hljs-literal">-worker01</span>   Ready    &lt;none&gt;          <span class="hljs-number">24</span>m   v1.<span class="hljs-number">29.0</span><br>k8s<span class="hljs-literal">-worker02</span>   Ready    &lt;none&gt;          <span class="hljs-number">24</span>m   v1.<span class="hljs-number">29.0</span><br></code></pre></td></tr></table></figure><p> ![image-20240123110427063](D:\05_Document\009_DevOps\使用kubeadm快速部署Kubernetes 1.29.0版本集群\01-笔记\assets\image-20240123110427063.png)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">查看集群健康情况<br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get cs</span><br>Warning: v1 ComponentStatus is deprecated <span class="hljs-keyword">in</span> v1.<span class="hljs-number">19</span>+<br>NAME                 STATUS    MESSAGE   ERROR<br>scheduler            Healthy   ok<br>controller<span class="hljs-literal">-manager</span>   Healthy   ok<br>etcd<span class="hljs-literal">-0</span>               Healthy   ok<br></code></pre></td></tr></table></figure><p> ![image-20240123110457455](D:\05_Document\009_DevOps\使用kubeadm快速部署Kubernetes 1.29.0版本集群\01-笔记\assets\image-20240123110457455.png)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs powershell">查看kubernetes集群pod运行情况<br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get pods -n kube-system</span><br>NAME                                   READY   STATUS    RESTARTS   AGE<br>coredns<span class="hljs-literal">-76f75df574-9s28w</span>               <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">25</span>m<br>coredns<span class="hljs-literal">-76f75df574-th5zf</span>               <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">25</span>m<br>etcd<span class="hljs-literal">-k8s-master01</span>                      <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">26</span>m<br>kube<span class="hljs-literal">-apiserver-k8s-master01</span>            <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">26</span>m<br>kube<span class="hljs-literal">-controller-manager-k8s-master01</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">26</span>m<br>kube<span class="hljs-literal">-proxy-gjw8d</span>                       <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">25</span>m<br>kube<span class="hljs-literal">-proxy-hpdnl</span>                       <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">25</span>m<br>kube<span class="hljs-literal">-proxy-l7x5f</span>                       <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">25</span>m<br>kube<span class="hljs-literal">-scheduler-k8s-master01</span>            <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">26</span>m<br></code></pre></td></tr></table></figure><p>![image-20240123110533230](D:\05_Document\009_DevOps\使用kubeadm快速部署Kubernetes 1.29.0版本集群\01-笔记\assets\image-20240123110533230.png)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs powershell">再次查看calico<span class="hljs-literal">-system</span>命名空间中pod运行情况。<br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get pods -n calico-system</span><br>NAME                                       READY   STATUS    RESTARTS   AGE<br>calico<span class="hljs-literal">-kube-controllers-7488d78bb5-qdh68</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">23</span>m<br>calico<span class="hljs-literal">-node-2wh6d</span>                          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">23</span>m<br>calico<span class="hljs-literal">-node-cpb72</span>                          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">23</span>m<br>calico<span class="hljs-literal">-node-llm79</span>                          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">23</span>m<br>calico<span class="hljs-literal">-typha-5678bdcbbf-wtz6h</span>              <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">23</span>m<br>calico<span class="hljs-literal">-typha-5678bdcbbf-zz6dj</span>              <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">23</span>m<br>csi<span class="hljs-literal">-node-driver-7d8wb</span>                      <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">23</span>m<br>csi<span class="hljs-literal">-node-driver-l8rdb</span>                      <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">23</span>m<br>csi<span class="hljs-literal">-node-driver-rjbjn</span>                      <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">23</span>m<br></code></pre></td></tr></table></figure><p>![image-20240123110636491](D:\05_Document\009_DevOps\使用kubeadm快速部署Kubernetes 1.29.0版本集群\01-笔记\assets\image-20240123110636491.png)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">get</span> <span class="hljs-string">svc</span> <span class="hljs-string">-n</span> <span class="hljs-string">kube-system</span><br><br><span class="hljs-string">yum</span> <span class="hljs-string">-y</span> <span class="hljs-string">install</span> <span class="hljs-string">dig</span><br><br><span class="hljs-string">yum</span> <span class="hljs-string">-y</span> <span class="hljs-string">install</span> <span class="hljs-string">bind-utils</span><br><br><br>[<span class="hljs-string">root@master01</span> <span class="hljs-string">home</span>]<span class="hljs-comment"># kubectl get svc -n kube-system</span><br><span class="hljs-string">NAME</span>       <span class="hljs-string">TYPE</span>        <span class="hljs-string">CLUSTER-IP</span>   <span class="hljs-string">EXTERNAL-IP</span>   <span class="hljs-string">PORT(S)</span>                  <span class="hljs-string">AGE</span><br><span class="hljs-string">kube-dns</span>   <span class="hljs-string">ClusterIP</span>   <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span>   <span class="hljs-string">&lt;none&gt;</span>        <span class="hljs-number">53</span><span class="hljs-string">/UDP,53/TCP,9153/TCP</span>   <span class="hljs-string">17h</span><br>[<span class="hljs-string">root@master01</span> <span class="hljs-string">home</span>]<span class="hljs-comment"># dig -t a www.baidu.com @10.96.0.10</span><br><br><br>[<span class="hljs-string">root@master01</span> <span class="hljs-string">home</span>]<span class="hljs-comment"># dig -t a www.baidu.com @10.96.0.10</span><br><br><span class="hljs-string">;</span> <span class="hljs-string">&lt;&lt;&gt;&gt;</span> <span class="hljs-string">DiG</span> <span class="hljs-number">9.11</span><span class="hljs-number">.4</span><span class="hljs-string">-P2-RedHat-9.11.4-26.P2.el7_9.15</span> <span class="hljs-string">&lt;&lt;&gt;&gt;</span> <span class="hljs-string">-t</span> <span class="hljs-string">a</span> <span class="hljs-string">www.baidu.com</span> <span class="hljs-string">@10.96.0.10</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">global options:</span> <span class="hljs-string">+cmd</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">Got answer:</span><br><span class="hljs-string">;;</span> <span class="hljs-string">-&gt;&gt;HEADER&lt;&lt;-</span> <span class="hljs-attr">opcode:</span> <span class="hljs-string">QUERY,</span> <span class="hljs-attr">status:</span> <span class="hljs-string">NOERROR,</span> <span class="hljs-attr">id:</span> <span class="hljs-number">10054</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">flags:</span> <span class="hljs-string">qr</span> <span class="hljs-string">rd</span> <span class="hljs-string">ra;</span> <span class="hljs-attr">QUERY:</span> <span class="hljs-number">1</span><span class="hljs-string">,</span> <span class="hljs-attr">ANSWER:</span> <span class="hljs-number">3</span><span class="hljs-string">,</span> <span class="hljs-attr">AUTHORITY:</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-attr">ADDITIONAL:</span> <span class="hljs-number">1</span><br><br><span class="hljs-string">;;</span> <span class="hljs-attr">OPT PSEUDOSECTION:</span><br><span class="hljs-string">;</span> <span class="hljs-attr">EDNS: version:</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-string">flags:;</span> <span class="hljs-attr">udp:</span> <span class="hljs-number">4096</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">QUESTION SECTION:</span><br><span class="hljs-string">;www.baidu.com.</span>                 <span class="hljs-string">IN</span>      <span class="hljs-string">A</span><br><br><span class="hljs-string">;;</span> <span class="hljs-attr">ANSWER SECTION:</span><br><span class="hljs-string">www.baidu.com.</span>          <span class="hljs-number">30</span>      <span class="hljs-string">IN</span>      <span class="hljs-string">CNAME</span>   <span class="hljs-string">www.a.shifen.com.</span><br><span class="hljs-string">www.a.shifen.com.</span>       <span class="hljs-number">30</span>      <span class="hljs-string">IN</span>      <span class="hljs-string">A</span>       <span class="hljs-number">183.2</span><span class="hljs-number">.172</span><span class="hljs-number">.185</span><br><span class="hljs-string">www.a.shifen.com.</span>       <span class="hljs-number">30</span>      <span class="hljs-string">IN</span>      <span class="hljs-string">A</span>       <span class="hljs-number">183.2</span><span class="hljs-number">.172</span><span class="hljs-number">.42</span><br><br><span class="hljs-string">;;</span> <span class="hljs-attr">Query time:</span> <span class="hljs-number">26</span> <span class="hljs-string">msec</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">SERVER:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><span class="hljs-comment">#53(10.96.0.10)</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">WHEN:</span> <span class="hljs-string">Tue</span> <span class="hljs-string">Jan</span> <span class="hljs-number">23</span> <span class="hljs-number">11</span><span class="hljs-string">:14:31</span> <span class="hljs-string">CST</span> <span class="hljs-number">2024</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">MSG SIZE  rcvd:</span> <span class="hljs-number">149</span><br><br>[<span class="hljs-string">root@master01</span> <span class="hljs-string">home</span>]<span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></figure><p>![image-20240123111521130](D:\05_Document\009_DevOps\使用kubeadm快速部署Kubernetes 1.29.0版本集群\01-笔记\assets\image-20240123111521130.png)</p><h1 id="视频地址"><a href="#视频地址" class="headerlink" title="视频地址"></a>视频地址</h1><p><a href="https://www.bilibili.com/video/BV1LC4y1g7wz">40分钟带你使用kubeadm极速部署生产级kubernetes</a></p><p><a href="https://www.bilibili.com/video/BV1zK41147Wa">04-kubeadm部署k8s 1.29高可用集群 K8S高可用集群部署</a></p>]]></content>
    
    
    <categories>
      
      <category>持续集成</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
      <tag>CICD - Docker - k8s - SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 相关文档</title>
    <link href="/2024/02/01/Hexo/"/>
    <url>/2024/02/01/Hexo/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol><li><a href="https://hexo.io/zh-cn/docs/">Hexo中文官方文档</a></li><li><a href="https://hexo.io/zh-cn/docs/front-matter">Hexo-Front-matter</a></li><li><a href="https://blog.csdn.net/u013592576/article/details/121295187">Hexo如何修改网站图标favicon</a></li><li><a href="https://lonlypan.com/2022/05/03/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-Github/">Hexo博客搭建-Github</a></li><li><a href="https://lonlypan.com/2021/06/12/%E6%90%AD%E9%85%8D%20Fluid%20%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E5%86%99%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/">搭配 Fluid 如何优雅的写一篇文章</a></li><li><a href="https://fluid-dev.github.io/hexo-fluid-docs/">Hexo Fluid 用户手册</a></li></ol><h3 id="Hexo常用命令简写"><a href="#Hexo常用命令简写" class="headerlink" title="Hexo常用命令简写"></a>Hexo常用命令简写</h3><ul><li>hexo n “新的博文” &#x3D;&#x3D; hexo new “新的博文” #新建文章</li><li>hexo g &#x3D;&#x3D; hexo generate #生成</li><li>hexo s &#x3D;&#x3D; hexo server #启动服务预览</li><li>hexo d &#x3D;&#x3D; hexo deploy #部署</li><li>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</li><li>hexo server -s #静态模式</li><li>hexo server -p 5000 #更改端口</li><li>hexo server -i 192.168.1.1 #自定义 IP</li><li>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</li><li>hexo new draft “draft title” #新建草稿，保存在博客中但不显示</li><li>hexo new page “page title”</li></ul><h3 id="aplayer本地音频"><a href="#aplayer本地音频" class="headerlink" title="aplayer本地音频"></a>aplayer本地音频</h3><p>效果：</p><img src="/2024/02/01/Hexo/6vm09rbsz6.png" class="" title="img"><ol><li><p>博客中如果要插入本地音频，需要先安装hexo-tag-aplayer，在你的cmd输入</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-tag-aplayer</span><br></code></pre></td></tr></table></figure></li><li><p>然后确保你的hexo的配置文件_config.yml里</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>打开这个可以让你new新的文章时生成同名文件夹，当然如果你要使用别的路径，可以忽略这步。</p></li><li><p>把音频文件放到同名文件夹里，然后在文章插入以下语句</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&#123;<span class="hljs-meta">%</span> aplayer <span class="hljs-string">&quot;No_Time_for_Caution&quot;</span> <span class="hljs-string">&quot;Hans_Zimmer&quot;</span> <span class="hljs-string">&quot;No_Time_for_Caution-Hans_Zimmer-24026258.mp3&quot;</span> <span class="hljs-string">&quot;https://img4.kuwo.cn/star/albumcover/300/50/69/4184500136.jpg&quot;</span> <span class="hljs-meta">%</span>&#125;<br></code></pre></td></tr></table></figure><p>第三个引号是文件名，是本地的，图片也可以是本地的</p><p>其他详细参数参考<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://github.com/grzhan/hexo-tag-aplayer%23usage&source=article&objectId=2199563">https://github.com/grzhan/hexo-tag-aplayer#usage</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ping命令的7个基础用法，掌握了秒变大神</title>
    <link href="/2024/02/01/ping/"/>
    <url>/2024/02/01/ping/</url>
    
    <content type="html"><![CDATA[<h1 id="Ping命令的7个基础用法，掌握了秒变大神"><a href="#Ping命令的7个基础用法，掌握了秒变大神" class="headerlink" title="Ping命令的7个基础用法，掌握了秒变大神"></a>Ping命令的7个基础用法，掌握了秒变大神</h1><p>现在不管安防工程还是弱电工程，与网络的联系也越来越密切了，网络基础知识中的网络命令ping命令在项目中是使用频率最高的，一般我们用的都是它的基本功能，今天和大家来详细看下Ping命令的7个基础用法，掌握了秒变大神！</p><h3 id="一、ping命令基础介绍"><a href="#一、ping命令基础介绍" class="headerlink" title="一、ping命令基础介绍"></a><strong>一、ping命令基础介绍</strong></h3><p>在网络中ping是一个十分强大的TCP&#x2F;IP工具。它的作用主要为：1、用来检测网络的连通情况和分析网络速度2、根据域名得到服务器IP3、根据ping返回的TTL值来判断对方所使用的操作系统及数据包经过路由器数量。我们通常会用它来直接ping ip地址，来测试网络的连通情况。</p>  <img src="/2024/02/01/ping/v2-c1137523e6ed3fc1e5f824411194778a_1440w.webp" class="" title="img"><p>类如这种，直接ping ip地址或网关，ping通会显示出以上数据，有朋友可能会问，bytes&#x3D;32；time&lt;1ms；TTL&#x3D;128 这些是什么意思。</p><p>bytes值：数据包大小，也就是字节。</p><p>time值：响应时间，这个时间越小，说明你连接这个地址速度越快。</p><p>TTL值：Time To Live,表示DNS记录在DNS服务器上存在的时间，它是IP协议包的一个值，告诉路由器该数据包何时需要被丢弃。我们可以通过Ping返回的TTL值大小，粗略地判断目标系统类型是Windows系列还是UNIX&#x2F;Linux系列。</p><p>因此一般TTL值：100~130ms之间，Windows系统 ；</p><p>240~255ms之间，UNIX&#x2F;Linux系统。</p><p>当然，我们今天主要了解并不是这些，而是ping的其它参考。ping命令除了直接ping网络的ip地址，验证网络畅通和速度之外，它还有这些用法。</p>  <img src="/2024/02/01/ping/v2-feef041a487143a380150da89dc59706_1440w.webp" class="" title="img"><h3 id="二、ping-t的使用"><a href="#二、ping-t的使用" class="headerlink" title="二、ping -t的使用"></a><strong>二、ping -t的使用</strong></h3><p>不间断地Ping指定计算机，直到管理员中断。这就说明电脑连接路由器是通的，网络效果很好。下面按按住键盘的<strong>Ctrl+C</strong>终止它继续ping下去，就会停止了，会总结出运行的数据包有多少，通断的有多少了。</p>  <img src="/2024/02/01/ping/v2-97cbad6d66d83e736528770b32445402_1440w.webp" class="" title="img"><h3 id="三、ping-a的使用"><a href="#三、ping-a的使用" class="headerlink" title="三、ping -a的使用"></a><strong>三、ping -a的使用</strong></h3><p>ping-a解析计算机名与NetBios名。就是可以通过ping它的ip地址，可以解析出主机名。当你遇到一个ip，却不知道他是那个设备时，这时你可以通过ping -a知道它的主机名。</p>  <img src="/2024/02/01/ping/v2-4ab8e2765e354c8adc4cd1814770caf8_1440w.webp" class="" title="img"><h3 id="四、ping-n的使用"><a href="#四、ping-n的使用" class="headerlink" title="四、ping -n的使用"></a><strong>四、ping -n的使用</strong></h3><p>在默认情况下，一般都只发送四个数据包，通过这个命令可以自己定义发送的个数，对衡量网络速度很有帮助，比如我想测试发送10个数据包的返回的平均时间为多少，最快时间为多少，最慢时间为多少就可以通过以下获知：</p><p>从以上我就可以知道在给47.93.187.142发送10个数据包的过程当中，返回了10个，没有丢失，这10个数据包当中返回速度最快为32ms，最慢为55ms，平均速度为37ms。说明我的网络良好。</p><p>如果对于一些不好的网络，比如监控系统中非常卡顿，这样测试，返回的结果可能会显示出丢失出一部分，如果丢失的比较多的话，那么就说明网络不好，可以很直观的判断出网络的情况。</p><h3 id="五、ping-l-size的使用"><a href="#五、ping-l-size的使用" class="headerlink" title="五、ping -l size的使用"></a><strong>五、ping -l size的使用</strong></h3><p>ping-l size：发送size指定大小的到目标主机的数据包。</p><p>在默认的情况下Windows的ping发送的数据包大小为32byt，最大能发送65500byt。当一次发送的数据包大于或等于65500byt时，将可能导致接收方计算机宕机。所以微软限制了这一数值；这个参数配合其它参数以后危害非常强大，比如攻击者可以结合-t参数实施DOS攻击。（所以它具有危险性，不要轻易向别人计算机使用）。</p><p>例如：ping -l 65500 -t 211.84.7.46</p><p>会连续对IP地址执行ping命令，直到被用户以<strong>Ctrl+C</strong>中断。</p><p>这样它就会不停的向211.84.7.46计算机发送大小为65500byt的数据包，如果你只有一台计算机也许没有什么效果，但如果有很多计算机那么就可以使对方完全瘫痪，网络严重堵塞，由此可见威力非同小可。</p><h3 id="六、ping-r-count-的使用"><a href="#六、ping-r-count-的使用" class="headerlink" title="六、ping -r count 的使用"></a><strong>六、ping -r count 的使用</strong></h3><p>这个命令在“记录路由”字段中记录传出和返回数据包的路由，探测经过的路由个数，但最多只能跟踪到9个路由。</p><p>ping -n 1 -r 9 202.102.224.25 （发送一个数据包，最多记录9个路由）将经过 9个路由都显示出来了，可以看图。也就是说可以跟踪ip地址所经过的9个路由，在检查故障时可以快速定位。</p>  <img src="/2024/02/01/ping/v2-3b35ee4bb9525653211480b5bd6a9076_1440w.webp" class="" title="img"><h3 id="七、如何同时批量ping多个ip地址"><a href="#七、如何同时批量ping多个ip地址" class="headerlink" title="七、如何同时批量ping多个ip地址"></a><strong>七、如何同时批量ping多个ip地址</strong></h3><h4 id="1、ping一个网段"><a href="#1、ping一个网段" class="headerlink" title="1、ping一个网段"></a>1、ping一个网段</h4><p>对于一个网段ip地址众多，如果单个检测实在麻烦，那么我们可以直接批量ping网段检测，那个ip地址出了问题，一目了然。</p><p>先看代码，直接在命令行窗口输入：for &#x2F;L %D in (1,1,255) do ping 10.168.1.%D</p><p>IP地址段修改成你要检查的IP地址段。</p>  <img src="/2024/02/01/ping/v2-dee70061f08ad8b351c39f5b5fc95a42_1440w.webp" class="" title="img"><p>当输入批量命令后，那么它就自动把网段内所有的ip地址都ping完为止。</p><p>那么这段“for &#x2F;L %D in(1,1,255) do ping 10.168.1.%D” 代码是什么意思呢？</p><p>代码中的这个(1,1,255)就是网段起与始，就是检测网段192.168.1.1到192.168.1.255之间的所有的ip地址，每次逐<strong>增1</strong>，直接到1到255这255个ip检测完为止。</p><h4 id="2、ping网段升级"><a href="#2、ping网段升级" class="headerlink" title="2、ping网段升级"></a>2、ping网段升级</h4><p>上面的命令虽然能批量ping 地址，但是上面代码在命令行窗口显示数量多的时候看起来也很麻烦，那么再升级一下，用下面的代码。</p><p>for &#x2F;L %D in (1,1,255) do ping -n 10.168.1.%D &gt;&gt;a.txt 说明，ip地址是变的，你填你需要测的ip网段就行，a.txt也是变的，可以自已设置名称。</p><p>这样就会把结果导入的a.txt文件中，全部IP检查完成后打开a.txt搜索“TTL&#x3D;”包含它的就是通的地址，没有包含“TTL&#x3D;”的地址就是不通的。如下图</p>  <img src="/2024/02/01/ping/v2-c79db3b184076a74cc3557516c015244_1440w.webp" class="" title="img"><p>打开后，就直接搜索没TTL的就可以了。</p><h4 id="3、ping网段命令再升级"><a href="#3、ping网段命令再升级" class="headerlink" title="3、ping网段命令再升级"></a>3、ping网段命令再升级</h4><p>很多人要说了这样还要搜索，也不是太方便，需要这样查来查去，那么我们再看下，是否有更简便的方法呢？第一监控之前就发过。</p><p>答案肯定是有的，我们来看代码。</p><p>for &#x2F;l %D in (1,1,255) do (ping 192.168.1.%D -n 1 &amp;&amp; echo 192.168.1.%D&gt;&gt;ok.txt || echo 192.168.1.%D &gt;&gt;no.txt)这段代码会将ping通的IP和不通的IP分别放到两个文件里面，这样是不是很方便啦，如下图：</p>  <img src="/2024/02/01/ping/v2-f44269c7ff37846ab14f5a2405490981_1440w.webp" class="" title="img"><p>这段代码非常实用，在大网络中可以用到，就是大家在输入的时候需要细心，不过也没有关系，可以直接把这个文章收藏，日后要用，直接复制里面代码，然后改下里面ip地址就行了。</p><h4 id="4、ping网段命令终极方法"><a href="#4、ping网段命令终极方法" class="headerlink" title="4、ping网段命令终极方法"></a>4、ping网段命令终极方法</h4><p>上面提到的三种代码提到的都是针对同一个网段内ip地址批量检测，那么肯定在实际项目中，也可能存不同网段的ip地址需要同时检测，那么怎么办呢？也有方法。</p><p>可以把没有规划的ip地址同时批量检测，我们来看下代码：</p><p>for &#x2F;f %D in (ip.txt) do (ping %D -n 1 &amp;&amp; echo %i&gt;&gt;ok.txt || echo %D &gt;&gt;no.txt)</p><p>看见没有多了一个ip.txt文件，这个文件是要你自己准备的哦，把你ping的地址写到这个文件里面，同时可以ping 1000个ip地址以上，代码会自己读取这个文件里面的ip地址，并且把结果放到两个文件里面去。这里就不给大家截图了很容易理解。</p><p>这里面补充下：上面代码生成的文件在你命令行默认目录下。也就是说如果你的命令行状态是：”c:\windows\system32&gt;”那么生成的文件就在系统的system32目录下面。如果是”c:&quot;那么文件就在C盘根目录下。这个可以根据自己的实际情况进行调整。</p><p>发布于 2021-03-08 22:50</p><p>原文网址：<a href="https://zhuanlan.zhihu.com/p/355590015">https://zhuanlan.zhihu.com/p/355590015</a></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ping</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hutool工具箱学习笔记</title>
    <link href="/2024/02/01/hutool/"/>
    <url>/2024/02/01/hutool/</url>
    
    <content type="html"><![CDATA[<h1 id="hutool工具箱学习笔记"><a href="#hutool工具箱学习笔记" class="headerlink" title="hutool工具箱学习笔记"></a>hutool工具箱学习笔记</h1><h2 id="Hutool工具里，POST方法，body中传参的几种调用方法"><a href="#Hutool工具里，POST方法，body中传参的几种调用方法" class="headerlink" title="Hutool工具里，POST方法，body中传参的几种调用方法"></a>Hutool工具里，POST方法，body中传参的几种调用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.provy.guard.api;<br> <br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br> <br><span class="hljs-keyword">import</span> cn.hutool.http.HttpUtil;<br><span class="hljs-keyword">import</span> cn.hutool.json.JSONObject;<br><span class="hljs-keyword">import</span> cn.hutool.json.JSONUtil;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Hutool工具里，POST方法，body中传参的几种调用方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 开发者导航 codernav.com</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        post1();<span class="hljs-comment">// 成功</span><br>        post2();<span class="hljs-comment">// 成功</span><br>        post3();<span class="hljs-comment">// 失败</span><br>        post4();<span class="hljs-comment">// 成功</span><br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">post1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;StartTime\&quot;:\&quot;2018-10-10 09:42:02\&quot;,\&quot;EndTime\&quot;:\&quot;2018-10-29 09:42:02\&quot;,\&quot;StartIndex\&quot;:\&quot;0\&quot;,\&quot;PageSize\&quot;:\&quot;30\&quot;&#125;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> HttpUtil.post(<span class="hljs-string">&quot;http://localhost:8080/v1/hitrecord/2&quot;</span>, param);<br>        System.out.println(result);<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">post2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> JSONUtil.createObj();<br>        param.put(<span class="hljs-string">&quot;StartTime&quot;</span>, <span class="hljs-string">&quot;2018-10-10 09:42:02&quot;</span>);<br>        param.put(<span class="hljs-string">&quot;EndTime&quot;</span>, <span class="hljs-string">&quot;2018-10-29 09:42:02&quot;</span>);<br>        param.put(<span class="hljs-string">&quot;StartIndex&quot;</span>, <span class="hljs-number">0</span>);<br>        param.put(<span class="hljs-string">&quot;PageSize&quot;</span>, <span class="hljs-number">30</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> HttpUtil.post(<span class="hljs-string">&quot;http://localhost:8080/v1/hitrecord/2&quot;</span>, param.toString());<br>        System.out.println(result);<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">post3</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;String, Object&gt; param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        param.put(<span class="hljs-string">&quot;StartTime&quot;</span>, <span class="hljs-string">&quot;2018-10-10 09:42:02&quot;</span>);<br>        param.put(<span class="hljs-string">&quot;EndTime&quot;</span>, <span class="hljs-string">&quot;2018-10-29 09:42:02&quot;</span>);<br>        param.put(<span class="hljs-string">&quot;StartIndex&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>        param.put(<span class="hljs-string">&quot;PageSize&quot;</span>, <span class="hljs-string">&quot;30&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> HttpUtil.post(<span class="hljs-string">&quot;http://localhost:8080/v1/hitrecord/2&quot;</span>, param);<br>        System.out.println(result);<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">post4</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSONUtil.createObj();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> HttpUtil.createPost(<span class="hljs-string">&quot;http://localhost:8080/v1/hitrecord/2&quot;</span>).body(json).execute().body();<br>        System.out.println(result);<br>    &#125;<br> <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="get-请求页面"><a href="#get-请求页面" class="headerlink" title="get 请求页面"></a>get 请求页面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 最简单的HTTP请求，可以自动通过header等信息判断编码，不区分HTTP和HTTPS</span><br>String result1= HttpUtil.get(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>);<br><br><span class="hljs-comment">// 当无法识别页面编码的时候，可以自定义请求页面的编码</span><br>String result2= HttpUtil.get(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>, CharsetUtil.CHARSET_UTF_8);<br><br><span class="hljs-comment">//可以单独传入http参数，这样参数会自动做URL编码，拼接在URL中</span><br>HashMap&lt;String, Object&gt; paramMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>paramMap.put(<span class="hljs-string">&quot;city&quot;</span>, <span class="hljs-string">&quot;北京&quot;</span>);<br><br>String result3= HttpUtil.get(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>, paramMap);<br></code></pre></td></tr></table></figure><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title function_">get</span><span class="hljs-params">(String url, Map&lt;String, Object&gt; queryParams, Map&lt;String, String&gt; headers)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> HttpRequest.get(url).form(queryParams).addHeaders(headers).execute().body();<br>        <span class="hljs-keyword">return</span> JSONObject.parseObject(body);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="post-表单请求"><a href="#post-表单请求" class="headerlink" title="post 表单请求"></a>post 表单请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title function_">post</span><span class="hljs-params">(String url, Map&lt;String, Object&gt; queryParams, Map&lt;String, String&gt; headers)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> HttpRequest.post(url)<br>        .header(Header.USER_AGENT, <span class="hljs-string">&quot;Hutool http&quot;</span>)<span class="hljs-comment">//头信息，多个头信息多次调用此方法即可</span><br>        .form(queryParams)<span class="hljs-comment">//表单内容</span><br>        .timeout(<span class="hljs-number">20000</span>)<span class="hljs-comment">//超时，毫秒</span><br>        .execute().body();<br>    <span class="hljs-keyword">return</span> JSONObject.parseObject(body);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="post-json-请求"><a href="#post-json-请求" class="headerlink" title="post -json 请求"></a>post -json 请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title function_">post</span><span class="hljs-params">(String url, String json, Map&lt;String, String&gt; headers)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> HttpRequest.post(url).body(json).addHeaders(headers).execute().body();<br>    <span class="hljs-keyword">return</span> JSONObject.parseObject(body);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> HttpRequest.post(url)<br>    .setHttpProxy(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9080</span>)<br>    .body(json)<br>    .execute().body();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ping</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ping命令的7个基础用法，掌握了秒变大神</title>
    <link href="/2024/02/01/01-ping-template/"/>
    <url>/2024/02/01/01-ping-template/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ping</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub 相关经验</title>
    <link href="/2024/02/01/github/"/>
    <url>/2024/02/01/github/</url>
    
    <content type="html"><![CDATA[<h2 id="成功解决-443-Timed-out"><a href="#成功解决-443-Timed-out" class="headerlink" title="成功解决 443: Timed out"></a><a href="https://blog.csdn.net/Xminyang/article/details/124837086">成功解决 443: Timed out</a></h2><h3 id="01-遇到的问题"><a href="#01-遇到的问题" class="headerlink" title="01 遇到的问题"></a>01 遇到的问题</h3><p> 使用以下命令，提交代码到远程仓库时，</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">$ git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><p> 遇到如下问题：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">fatal: unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">access</span> <span class="hljs-string">&#x27;https://github.com/xxx/&#x27;</span>: Failed <span class="hljs-keyword">to</span> <span class="hljs-keyword">connect</span> <span class="hljs-keyword">to</span> github.com port <span class="hljs-number">443</span>: Timed <span class="hljs-keyword">out</span><br></code></pre></td></tr></table></figure><h3 id="02-解决方法"><a href="#02-解决方法" class="headerlink" title="02 解决方法"></a>02 解决方法</h3><blockquote><p>只需3步：设置代理、取消代理、再次提交。</p></blockquote><h4 id="👉-2-1-设置代理"><a href="#👉-2-1-设置代理" class="headerlink" title="👉 2.1 设置代理"></a>👉 2.1 设置代理</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global https.proxy</span><br></code></pre></td></tr></table></figure><h4 id="👉-2-2-取消代理"><a href="#👉-2-2-取消代理" class="headerlink" title="👉 2.2 取消代理"></a>👉 2.2 取消代理</h4><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">git config</span> <span class="hljs-literal">--</span><span class="hljs-comment">global</span> <span class="hljs-literal">--</span><span class="hljs-comment">unset https</span><span class="hljs-string">.</span><span class="hljs-comment">proxy</span><br></code></pre></td></tr></table></figure><h4 id="👉-2-3-再次提交"><a href="#👉-2-3-再次提交" class="headerlink" title="👉 2.3 再次提交"></a>👉 2.3 再次提交</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><h4 id="👉-2-4-提交效果"><a href="#👉-2-4-提交效果" class="headerlink" title="👉 2.4 提交效果"></a>👉 2.4 提交效果</h4> <img src="/2024/02/01/github/76f49bee597f4cb8aaca00b8c9676c06.jpeg" class="" title="img"><p>原文链接：<a href="https://blog.csdn.net/Xminyang/article/details/124837086">https://blog.csdn.net/Xminyang/article/details/124837086</a></p><h2 id="其他文档"><a href="#其他文档" class="headerlink" title="其他文档"></a>其他文档</h2><ol><li><a href="https://blog.csdn.net/qq_44275213/article/details/128857688">Github action报错remote: Write access to repository not granted.</a></li><li><a href="https://blog.csdn.net/yjw123456/article/details/119696726">【突发】解决remote: Support for password authentication was removed on August 13, 2021. Please use a perso</a></li></ol><h2 id="不翻墙上github"><a href="#不翻墙上github" class="headerlink" title="不翻墙上github"></a>不翻墙上github</h2><p>自由上网 edited this page on Nov 30, 2023 · <a href="https://github.com/Alvin9999/new-pac/wiki/%E4%B8%8D%E7%BF%BB%E5%A2%99%E4%B8%8Agithub/_history">10 revisions</a></p><p><strong>2023年11月30日更新。</strong></p><p><strong>前言：如果你所在地区不翻墙的情况下无法打开github.com网站，那么可以通过github镜像网站访问github，或者通过修改电脑本地hosts文件来访问github。</strong></p><hr><h3 id="一、通过github镜像网站访问github"><a href="#一、通过github镜像网站访问github" class="headerlink" title="一、通过github镜像网站访问github"></a>一、通过github镜像网站访问github</h3><p>github镜像站点1：<a href="https://bgithub.xyz/">https://bgithub.xyz</a></p><p>github镜像站点2：<a href="https://ggithub.xyz/">https://ggithub.xyz</a></p><hr><h3 id="二、修改电脑本地hosts文件访问github"><a href="#二、修改电脑本地hosts文件访问github" class="headerlink" title="二、修改电脑本地hosts文件访问github"></a>二、修改电脑本地hosts文件访问github</h3><p>具体方法：</p><p><a href="https://ineo6.github.io/hosts">https://ineo6.github.io/hosts</a></p><p>备用地址：</p><p><a href="https://gitlab.com/ineo6/hosts">https://gitlab.com/ineo6/hosts</a></p><p><a href="https://github.com/ineo6/hosts">https://github.com/ineo6/hosts</a></p><p>最新DNS新方案（定时更新）：<a href="https://gitlab.com/ineo6/hosts/-/raw/master/next-hosts">https://gitlab.com/ineo6/hosts/-/raw/master/next-hosts</a></p><p>原理：<a href="https://zhuanlan.zhihu.com/p/107334179">https://zhuanlan.zhihu.com/p/107334179</a></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络相关文档</title>
    <link href="/2024/02/01/network/"/>
    <url>/2024/02/01/network/</url>
    
    <content type="html"><![CDATA[<h2 id="网络相关文档"><a href="#网络相关文档" class="headerlink" title="网络相关文档"></a>网络相关文档</h2><h1 id="跟着动画来学TCP三次握手和四次挥手"><a href="#跟着动画来学TCP三次握手和四次挥手" class="headerlink" title="跟着动画来学TCP三次握手和四次挥手"></a><strong>跟着动画来学TCP三次握手和四次挥手</strong></h1><h2 id="1、引言"><a href="#1、引言" class="headerlink" title="1、引言"></a>1、引言</h2><p>网络编程中TCP协议的三次握手和四次挥手的问题，在面试中是最为常见的知识点之一。很多读者都知道“三次”和“四次”，但是如果问深入一点，他们往往都无法作出准确回答。</p><p>本篇文章尝试使用动画图片的方式，来对这个知识点进行“脑残式”讲解（哈哈），期望读者们可以更加简单、直观地理解TCP网络通信交互的本质。</p><p>另外，社区里的另两篇文章《<a href="http://www.52im.net/thread-258-1-1.html">理论经典：TCP协议的3次握手与4次挥手过程详解</a>》、《<a href="http://www.52im.net/thread-275-1-1.html">理论联系实际：Wireshark抓包分析TCP 3次握手、4次挥手过程</a>》也是不错的入门文章，有兴趣可一并详读之。</p><p><strong>友情提示：</strong>因本文gif动画较多，如果您的网速较慢，请耐心等候图片加载完成哦。</p><h2 id="2、关于作者"><a href="#2、关于作者" class="headerlink" title="2、关于作者"></a>2、关于作者</h2><img src="/2024/02/01/network/113806noi6o66zuw956uww-170675695226613.png" class="" title="脑残式网络编程入门(一)：跟着动画来学TCP三次握手和四次挥手_aa.png"><p><strong>钱文品（老钱）：</strong>毕业于华中科技大学计算机科学与技术专业，互联网分布式高并发技术十年老兵，目前任掌阅科技资深后端工程师。熟练使用 Java、Python、Golang 等多种计算机语言，开发过游戏，制作过网站，写过消息推送系统和MySQL 中间件，实现过开源的 ORM 框架、Web 框架、RPC 框架等。</p><p><strong>作者的Github：</strong> <a href="https://github.com/pyloque">https://github.com/pyloque</a></p><h2 id="3、系列文章"><a href="#3、系列文章" class="headerlink" title="3、系列文章"></a>3、系列文章</h2><p><strong>本文是系列文章中的第1篇，本系列大纲如下：</strong></p><ul><li>《<a href="http://www.52im.net/thread-1729-1-1.html">脑残式网络编程入门(一)：跟着动画来学TCP三次握手和四次挥手</a>》（本文）</li><li>《<a href="http://www.52im.net/thread-1732-1-1.html">脑残式网络编程入门(二)：我们在读写Socket时，究竟在读写什么？</a>》</li><li>《<a href="http://www.52im.net/thread-1751-1-1.html">脑残式网络编程入门(三)：HTTP协议必知必会的一些知识</a>》</li><li>《<a href="http://www.52im.net/thread-1795-1-1.html">脑残式网络编程入门(四)：快速理解HTTP&#x2F;2的服务器推送(Server Push)</a>》</li><li>《<a href="http://www.52im.net/thread-1973-1-1.html">脑残式网络编程入门(五)：每天都在用的Ping命令，它到底是什么？</a>》</li><li>《<a href="http://www.52im.net/thread-2082-1-1.html">脑残式网络编程入门(六)：什么是公网IP和内网IP？NAT转换又是什么鬼？</a>》</li><li>《<a href="http://www.52im.net/thread-2851-1-1.html">脑残式网络编程入门(七)：面视必备，史上最通俗计算机网络分层详解</a>》</li><li>《<a href="http://www.52im.net/thread-2928-1-1.html">脑残式网络编程入门(八)：你真的了解127.0.0.1和0.0.0.0的区别？</a>》</li><li>《<a href="http://www.52im.net/thread-3101-1-1.html">脑残式网络编程入门(九)：面试必考，史上最通俗大小端字节序详解</a>》</li></ul><h2 id="4、TCP-三次握手：“Say-hello-”"><a href="#4、TCP-三次握手：“Say-hello-”" class="headerlink" title="4、TCP 三次握手：“Say hello !”"></a>4、TCP 三次握手：“Say hello !”</h2><p>TCP 三次握手就好比两个人在街上隔着50米看见了对方，但是因为雾霾等原因不能100%确认，所以要通过招手的方式相互确定对方是否认识自己。</p><img src="/2024/02/01/network/102454xwfj5djch2msxa7x-170675695226715.gif" class="" title="脑残式网络编程入门(一)：跟着动画来学TCP三次握手和四次挥手_1.gif"><p>张三首先向李四招手(syn)，李四看到张三向自己招手后，向对方点了点头挤出了一个微笑(ack)。张三看到李四微笑后确认了李四成功辨认出了自己(进入estalished状态)。</p><p>但是李四还有点狐疑，向四周看了一看，有没有可能张三是在看别人呢，他也需要确认一下。所以李四也向张三招了招手(syn)，张三看到李四向自己招手后知道对方是在寻求自己的确认，于是也点了点头挤出了微笑(ack)，李四看到对方的微笑后确认了张三就是在向自己打招呼(进入established状态)。</p><p>于是两人加快步伐，走到了一起，相互拥抱。</p><img src="/2024/02/01/network/102503nsgxknd0k00doa85-170675695226717.gif" class="" title="脑残式网络编程入门(一)：跟着动画来学TCP三次握手和四次挥手_2.gif"><p>我们看到这个过程中一共是四个动作，张三招手–李四点头微笑–李四招手–张三点头微笑。其中李四连续进行了2个动作，先是点头微笑(回复对方)，然后再次招手(寻求确认)，实际上可以将这两个动作合一，招手的同时点头和微笑(syn+ack)。于是四个动作就简化成了三个动作，张三招手–李四点头微笑并招手–张三点头微笑。这就是三次握手的本质，中间的一次动作是两个动作的合并。</p><p>我们看到有两个中间状态，syn_sent和syn_rcvd，这两个状态叫着「半打开」状态，就是向对方招手了，但是还没来得及看到对方的点头微笑。syn_sent是主动打开方的「半打开」状态，syn_rcvd是被动打开方的「半打开」状态。客户端是主动打开方，服务器是被动打开方。</p><p>syn_sent: syn package has been sent<br>syn_rcvd: syn package has been received</p><h2 id="5、握手完成：开始TCP-数据传输"><a href="#5、握手完成：开始TCP-数据传输" class="headerlink" title="5、握手完成：开始TCP 数据传输"></a>5、握手完成：开始TCP 数据传输</h2><p>TCP 数据传输就是两个人隔空对话，差了一点距离，所以需要对方反复确认听见了自己的话。</p><img src="/2024/02/01/network/102510znki8k85ilu2q8ks-170675695226719.gif" class="" title="脑残式网络编程入门(一)：跟着动画来学TCP三次握手和四次挥手_3.gif"><p>张三喊了一句话(data)，李四听见了之后要向张三回复自己听见了(ack)。</p><p>如果张三喊了一句，半天没听到李四回复，张三就认为自己的话被大风吹走了，李四没听见，所以需要重新喊话，这就是tcp重传。</p><p>也有可能是李四听到了张三的话，但是李四向张三的回复被大风吹走了，以至于张三没听见李四的回复。张三并不能判断究竟是自己的话被大风吹走了还是李四的回复被大风吹走了，张三也不用管，重传一下就是。</p><p>既然会重传，李四就有可能同一句话听见了两次，这就是「去重」。「重传」和「去重」工作操作系统的网络内核模块都已经帮我们处理好了，用户层是不用关心的。</p><img src="/2024/02/01/network/102520m3d0zd4kdibxf56k-170675695226721.gif" class="" title="脑残式网络编程入门(一)：跟着动画来学TCP三次握手和四次挥手_4.gif"><p>张三可以向李四喊话，同样李四也可以向张三喊话，因为tcp链接是「双工的」，双方都可以主动发起数据传输。不过无论是哪方喊话，都需要收到对方的确认才能认为对方收到了自己的喊话。</p><p>张三可能是个高射炮，一说连说了八句话，这时候李四可以不用一句一句回复，而是连续听了这八句话之后，一起向对方回复说前面你说的八句话我都听见了，这就是批量ack。但是张三也不能一次性说了太多话，李四的脑子短时间可能无法消化太多，两人之间需要有协商好的合适的发送和接受速率，这个就是「TCP窗口大小」。</p><p>网络环境的数据交互同人类之间的对话还要复杂一些，它存在数据包乱序的现象。同一个来源发出来的不同数据包在「网际路由」上可能会走过不同的路径，最终达到同一个地方时，顺序就不一样了。操作系统的网络内核模块会负责对数据包进行排序，到用户层时顺序就已经完全一致了。</p><h2 id="6、TCP-四次挥手：“Say-goodbye-”"><a href="#6、TCP-四次挥手：“Say-goodbye-”" class="headerlink" title="6、TCP 四次挥手：“Say goodbye!”"></a>6、TCP 四次挥手：“Say goodbye!”</h2><p>TCP断开链接的过程和建立链接的过程比较类似，只不过中间的两部并不总是会合成一步走，所以它分成了4个动作，张三挥手(fin)——李四伤感地微笑(ack)——李四挥手(fin)——张三伤感地微笑(ack)。</p><img src="/2024/02/01/network/102527xjbw4zjvk22b7kvn-170675695226723.gif" class="" title="脑残式网络编程入门(一)：跟着动画来学TCP三次握手和四次挥手_5.gif"><p>之所以中间的两个动作没有合并，是因为tcp存在「半关闭」状态，也就是单向关闭。张三已经挥了手，可是人还没有走，只是不再说话，但是耳朵还是可以继续听，李四呢继续喊话。等待李四累了，也不再说话了，超张三挥了挥手，张三伤感地微笑了一下，才彻底结束了。</p><img src="/2024/02/01/network/121908tz1q6t404icd0cn0-170675695226725.gif" class="" title="脑残式网络编程入门(一)：跟着动画来学TCP三次握手和四次挥手_6.gif"><p>上面有一个非常特殊的状态time_wait，它是主动关闭的一方在回复完对方的挥手后进入的一个长期状态，这个状态标准的持续时间是4分钟，4分钟后才会进入到closed状态，释放套接字资源。不过在具体实现上这个时间是可以调整的。</p><p>它就好比主动分手方要承担的责任，是你提出的要分手，你得付出代价。这个后果就是持续4分钟的time_wait状态，不能释放套接字资源(端口)，就好比守寡期，这段时间内套接字资源(端口)不得回收利用。</p><p>它的作用是重传最后一个ack报文，确保对方可以收到。因为如果对方没有收到ack的话，会重传fin报文，处于time_wait状态的套接字会立即向对方重发ack报文。</p><p>同时在这段时间内，该链接在对话期间于网际路由上产生的残留报文(因为路径过于崎岖，数据报文走的时间太长，重传的报文都收到了，原始报文还在路上)传过来时，都会被立即丢弃掉。4分钟的时间足以使得这些残留报文彻底消逝。不然当新的端口被重复利用时，这些残留报文可能会干扰新的链接。</p><p>4分钟就是2个MSL，每个MSL是2分钟。MSL就是maximium segment lifetime——最长报文寿命。这个时间是由官方RFC协议规定的。至于为什么是2个MSL而不是1个MSL，我还没有看到一个非常满意的解释。</p><p>四次挥手也并不总是四次挥手，中间的两个动作有时候是可以合并一起进行的，这个时候就成了三次挥手，主动关闭方就会从fin_wait_1状态直接进入到time_wait状态，跳过了fin_wait_2状态。</p><h2 id="7、本文小结"><a href="#7、本文小结" class="headerlink" title="7、本文小结"></a>7、本文小结</h2><p>TCP状态转换是一个非常复杂的过程，本文仅对一些简单的基础知识点进行了类比讲解。关于TCP的更多知识还需要读者去搜寻相关技术文章进入深入学习。如果读者对TCP的基础知识掌握得比较牢固，高级的知识理解起来就不会太过于吃力。</p><h2 id="附录1：同类文章精选"><a href="#附录1：同类文章精选" class="headerlink" title="附录1：同类文章精选"></a>附录1：同类文章精选</h2><p><strong>如果您觉得本系列文章过于基础，您可直接阅读以下系列：</strong></p><ul><li>《<a href="http://www.52im.net/thread-1095-1-1.html">网络编程懒人入门(一)：快速理解网络通信协议（上篇）</a>》</li><li>《<a href="http://www.52im.net/thread-1103-1-1.html">网络编程懒人入门(二)：快速理解网络通信协议（下篇）</a>》</li><li>《<a href="http://www.52im.net/thread-1107-1-1.html">网络编程懒人入门(三)：快速理解TCP协议一篇就够</a>》</li><li>《<a href="http://www.52im.net/thread-1160-1-1.html">网络编程懒人入门(四)：快速理解TCP和UDP的差异</a>》</li><li>《<a href="http://www.52im.net/thread-1277-1-1.html">网络编程懒人入门(五)：快速理解为什么说UDP有时比TCP更有优势</a>》</li><li>《<a href="http://www.52im.net/thread-1629-1-1.html">网络编程懒人入门(六)：史上最通俗的集线器、交换机、路由器功能原理入门</a>》</li><li>《<a href="http://www.52im.net/thread-1677-1-1.html">网络编程懒人入门(七)：深入浅出，全面理解HTTP协议</a>》</li><li>《<a href="http://www.52im.net/thread-1722-1-1.html">网络编程懒人入门(八)：手把手教你写基于TCP的Socket长连接</a>》</li><li>《<a href="http://www.52im.net/thread-2067-1-1.html">网络编程懒人入门(九)：通俗讲解，有了IP地址，为何还要用MAC地址？</a>》</li></ul><p><strong>《不为人知的网络编程》系列文章为高阶必读，该系列目录如下：</strong></p><ul><li>《<a href="http://www.52im.net/thread-1003-1-1.html">不为人知的网络编程(一)：浅析TCP协议中的疑难杂症(上篇)</a>》</li><li>《<a href="http://www.52im.net/thread-1004-1-1.html">不为人知的网络编程(二)：浅析TCP协议中的疑难杂症(下篇)</a>》</li><li>《<a href="http://www.52im.net/thread-1007-1-1.html">不为人知的网络编程(三)：关闭TCP连接时为什么会TIME_WAIT、CLOSE_WAIT</a>》</li><li>《<a href="http://www.52im.net/thread-1014-1-1.html">不为人知的网络编程(四)：深入研究分析TCP的异常关闭</a>》</li><li>《<a href="http://www.52im.net/thread-1018-1-1.html">不为人知的网络编程(五)：UDP的连接性和负载均衡</a>》</li><li>《<a href="http://www.52im.net/thread-1024-1-1.html">不为人知的网络编程(六)：深入地理解UDP协议并用好它</a>》</li><li>《<a href="http://www.52im.net/thread-1293-1-1.html">不为人知的网络编程(七)：如何让不可靠的UDP变的可靠？</a>》</li><li>《<a href="http://www.52im.net/thread-2456-1-1.html">不为人知的网络编程(八)：从数据传输层深度解密HTTP</a>》</li><li>《<a href="http://www.52im.net/thread-2740-1-1.html">不为人知的网络编程(九)：理论联系实际，全方位深入理解DNS</a>》</li></ul><p><strong>关于移动端网络特性及优化手段的总结性文章请见：</strong></p><ul><li>《<a href="http://www.52im.net/thread-1413-1-1.html">现代移动端网络短连接的优化手段总结：请求速度、弱网适应、安全保障</a>》</li><li>《<a href="http://www.52im.net/thread-1587-1-1.html">移动端IM开发者必读(一)：通俗易懂，理解移动网络的“弱”和“慢”</a>》</li><li>《<a href="http://www.52im.net/thread-1588-1-1.html">移动端IM开发者必读(二)：史上最全移动弱网络优化方法总结</a>》</li></ul><h2 id="附录2：参考资料"><a href="#附录2：参考资料" class="headerlink" title="附录2：参考资料"></a>附录2：参考资料</h2><p>《<a href="http://www.52im.net/topic-tcpipvol1.html">TCP&#x2F;IP详解</a> - <a href="http://docs.52im.net/extend/docs/book/tcpip/vol1/11/">第11章·UDP：用户数据报协议</a>》<br>《<a href="http://www.52im.net/topic-tcpipvol1.html">TCP&#x2F;IP详解</a> - <a href="http://docs.52im.net/extend/docs/book/tcpip/vol1/17/">第17章·TCP：传输控制协议</a>》<br>《<a href="http://www.52im.net/topic-tcpipvol1.html">TCP&#x2F;IP详解</a> - <a href="http://docs.52im.net/extend/docs/book/tcpip/vol1/18/">第18章·TCP连接的建立与终止</a>》<br>《<a href="http://www.52im.net/topic-tcpipvol1.html">TCP&#x2F;IP详解</a> - <a href="http://docs.52im.net/extend/docs/book/tcpip/vol1/21/">第21章·TCP的超时与重传</a>》<br>《<a href="http://www.52im.net/thread-513-1-1.html">通俗易懂-深入理解TCP协议（上）：理论基础</a>》<br>《<a href="http://www.52im.net/thread-515-1-1.html">通俗易懂-深入理解TCP协议（下）：RTT、滑动窗口、拥塞处理</a>》<br>《<a href="http://www.52im.net/thread-258-1-1.html">理论经典：TCP协议的3次握手与4次挥手过程详解</a>》<br>《<a href="http://www.52im.net/thread-275-1-1.html">理论联系实际：Wireshark抓包分析TCP 3次握手、4次挥手过程</a>》<br>《<a href="http://www.52im.net/thread-180-1-1.html">计算机网络通讯协议关系图（中文珍藏版）</a>》<br>《<a href="http://www.52im.net/thread-561-1-1.html">高性能网络编程(一)：单台服务器并发TCP连接数到底可以有多少</a>》<br>《<a href="http://www.52im.net/thread-566-1-1.html">高性能网络编程(二)：上一个10年，著名的C10K并发连接问题</a>》<br>《<a href="http://www.52im.net/thread-568-1-1.html">高性能网络编程(三)：下一个10年，是时候考虑C10M并发问题了</a>》<br>《<a href="http://www.52im.net/thread-578-1-1.html">高性能网络编程(四)：从C10K到C10M高性能网络应用的理论探索</a>》<br>《<a href="http://www.52im.net/thread-580-1-1.html">简述传输层协议TCP和UDP的区别</a>》<br>《<a href="http://www.52im.net/thread-279-1-1.html">为什么QQ用的是UDP协议而不是TCP协议？</a>》<br>《<a href="http://www.52im.net/thread-33-1-1.html">移动端即时通讯协议选择：UDP还是TCP？</a>》<br>《<a href="http://www.52im.net/thread-520-1-1.html">技术往事：改变世界的TCP&#x2F;IP协议（珍贵多图、手机慎点）</a>》<br>《<a href="http://www.52im.net/thread-29-1-1.html">UDP中一个包的大小最大能多大？</a>》<br>《<a href="http://www.52im.net/thread-306-1-1.html">Java新一代网络编程模型AIO原理及Linux系统AIO介绍</a>》<br>《<a href="http://www.52im.net/thread-367-1-1.html">NIO框架入门(一)：服务端基于Netty4的UDP双向通信Demo演示</a>》<br>《<a href="http://www.52im.net/thread-373-1-1.html">NIO框架入门(二)：服务端基于MINA2的UDP双向通信Demo演示</a>》<br>《<a href="http://www.52im.net/thread-378-1-1.html">NIO框架入门(三)：iOS与MINA2、Netty4的跨平台UDP双向通信实战</a>》<br>《<a href="http://www.52im.net/thread-388-1-1.html">NIO框架入门(四)：Android与MINA2、Netty4的跨平台UDP双向通信实战</a>》<br>《<a href="http://www.52im.net/thread-50-1-1.html">P2P技术详解(一)：NAT详解——详细原理、P2P简介</a>》<br>《<a href="http://www.52im.net/thread-542-1-1.html">P2P技术详解(二)：P2P中的NAT穿越(打洞)方案详解</a>》<br>《<a href="http://www.52im.net/thread-557-1-1.html">P2P技术详解(三)：P2P技术之STUN、TURN、ICE详解</a>》<br>《<a href="http://www.52im.net/thread-1055-1-1.html">通俗易懂：快速理解P2P技术中的NAT穿透原理</a>》</p><p>原文地址：<a href="http://www.52im.net/thread-1729-1-1.html">http://www.52im.net/thread-1729-1-1.html</a></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DockerHub相关</title>
    <link href="/2024/01/31/hub-docker/"/>
    <url>/2024/01/31/hub-docker/</url>
    
    <content type="html"><![CDATA[<h1 id="hub-docker不能访问"><a href="#hub-docker不能访问" class="headerlink" title="hub.docker不能访问"></a>hub.docker不能访问</h1><h3 id="1、https-dockerproxy-com"><a href="#1、https-dockerproxy-com" class="headerlink" title="1、https://dockerproxy.com/"></a>1、<a href="https://dockerproxy.com/">https://dockerproxy.com/</a></h3><p><strong>第一步：</strong>输入原始镜像地址获取命令.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">stilleshan/frpc:latest<br></code></pre></td></tr></table></figure><p><strong>第二步：</strong>代理拉取镜像</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker pull dockerproxy.com<span class="hljs-regexp">/stilleshan/</span>frpc:latest<br></code></pre></td></tr></table></figure><p><strong>第三步：</strong>重命名镜像</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker <span class="hljs-keyword">tag</span> <span class="hljs-title">dockerproxy</span>.com/stilleshan/frpc:latest stilleshan/frpc:latest<br></code></pre></td></tr></table></figure><p><strong>第四步：</strong>删除代理镜像</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker rmi dockerproxy.com<span class="hljs-regexp">/stilleshan/</span>frpc:latest<br></code></pre></td></tr></table></figure><h3 id="hub-docker-com打不开，怎么解决？"><a href="#hub-docker-com打不开，怎么解决？" class="headerlink" title="hub.docker.com打不开，怎么解决？"></a><a href="https://segmentfault.com/q/1010000043880660">hub.docker.com打不开，怎么解决？</a></h3><h3 id="Docker-Hub-无法正常访问"><a href="#Docker-Hub-无法正常访问" class="headerlink" title="Docker Hub 无法正常访问"></a><a href="https://www.oschina.net/news/241627/docker-hub-connection-timed-out">Docker Hub 无法正常访问</a></h3>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>镜像</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins持续集成入门到精通</title>
    <link href="/2024/01/31/jenkins-cicd/"/>
    <url>/2024/01/31/jenkins-cicd/</url>
    
    <content type="html"><![CDATA[<h1 id="Jenkins持续集成入门到精通"><a href="#Jenkins持续集成入门到精通" class="headerlink" title="Jenkins持续集成入门到精通"></a>Jenkins持续集成入门到精通</h1><h2 id="1、持续集成及Jenkins介绍"><a href="#1、持续集成及Jenkins介绍" class="headerlink" title="1、持续集成及Jenkins介绍"></a>1、持续集成及<strong>Jenkins</strong>介绍</h2><p>软件开发生命周期</p><p>软件开发生命周期又叫做<strong>SDLC</strong>（Software Development Life Cycle），它是集合了计划、开发、测试和部署过程的集合。如下图所示 ：</p> <img src="/2024/01/31/jenkins-cicd/image-20240128162257533.png" class="" title="image-20240128162257533"><ul><li>需求分析</li></ul><p>这是生命周期的第一阶段，根据项目需求，团队执行一个可行性计划的分析。项目需求可能是公司内部或者客户提出的。这阶段主要是对信息的收集，也有可能是对现有项目的改善和重新做一个新的项目。还要分析项目的预算多长，可以从哪方面受益及布局，这也是项目创建的目标。</p><ul><li>设计</li></ul><p>第二阶段就是设计阶段，系统架构和满意状态（就是要做成什么样子，有什么功能），和创建一个项目计划。计划可以使用图表，布局设计或者文者的方式呈现。</p><ul><li>实现</li></ul><p>第三阶段就是实现阶段，项目经理创建和分配工作给开者，开发者根据任务和在设计阶段定义的目标进行开发代码。依据项目的大小和复杂程度，可以需要数月或更长时间才能完成。</p><ul><li>测试</li></ul><p>测试人员进行代码测试 ，包括功能测试、代码测试、压力测试等。</p><ul><li>进化</li></ul><p>最后进阶段就是对产品不断的进化改进和维护阶段，根据用户的使用情况，可能需要对某功能进行修改，bug修复，功能增加等。</p><h3 id="软件开发瀑布模型"><a href="#软件开发瀑布模型" class="headerlink" title="软件开发瀑布模型"></a>软件开发瀑布模型</h3><p>瀑布模型是最著名和最常使用的软件开发模型。瀑布模型就是一系列的软件开发过程。它是由制造业繁衍出来的。一个高度化的结构流程在一个方向上流动，有点像生产线一样。在瀑布模型创建之初，没有其它开发的模型，有很多东西全靠开发人员去猜测，去开发。这样的模型仅适用于那些简单的软件开 发， 但是已经不适合现在的开发了。</p><p>下图对软件开发模型的一个阐述。</p><img src="/2024/01/31/jenkins-cicd/image-20240128162617664.png" class="" title="image-20240128162617664"><table><thead><tr><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>简单易用和理解</td><td>各个阶段的划分完全固定，阶段之间产生大量的文档，极大地增加了工作量。</td></tr><tr><td>当前一阶段完成后，您只需要去关注后续阶段。</td><td>由于开发模型是线性的，用户只有等到整个过程的末期才能见到开发成果，从而增加了开发风险。</td></tr><tr><td>为项目提供了按阶段划分的检查节点</td><td>瀑布模型的突出缺点是不适应用户需求的变化。</td></tr></tbody></table><h3 id="软件的敏捷开发"><a href="#软件的敏捷开发" class="headerlink" title="软件的敏捷开发"></a>软件的敏捷开发</h3><h4 id="什么是敏捷开发？"><a href="#什么是敏捷开发？" class="headerlink" title="什么是敏捷开发？"></a>什么是敏捷开发？</h4><p>敏捷开发（Agile Development） 的核心是迭代开发（Iterative Development） 与 增量开发</p><p>（Incremental Development） 。</p><ul><li><strong>何为迭代开发？</strong></li></ul><p>对于大型软件项目，传统的开发方式是采用一个大周期（比如一年）进行开发，整个过程就是一次”大开发”；迭代开发的方式则不一样，它将开发过程拆分成多个小周期，即一次”大开发”变成多次”小开发”，每次小开发都是同样的流程，所以看上去就好像重复在做同样的步骤。</p><p>举例来说，SpaceX 公司想造一个大推力火箭，将人类送到火星。但是，它不是一开始就造大火箭，而是先造一个最简陋的小火箭 Falcon 1。结果，第一次发射就爆炸了，直到第四次发射，才成功进入轨道。然后，开发了中型火箭 Falcon 9，九年中发射了70次。最后，才开发 Falcon 重型火箭。如果 SpaceX 不采用迭代开发，它可能直到现在还无法上天。</p><ul><li><strong>何为增量开发？</strong></li></ul><p>软件的每个版本，都会新增一个用户可以感知的完整功能。也就是说，按照新增功能来划分迭代。</p><p>举例来说，房产公司开发一个10栋楼的小区。如果采用增量开发的模式，该公司第一个迭代就是交付一号楼，第二个迭代交付二号楼 每个迭代都是完成一栋完整的楼。而不是第一个迭代挖好10栋楼的地</p><p>基，第二个迭代建好每栋楼的骨架，第三个迭代架设屋顶……</p><h4 id="敏捷开发如何迭代？"><a href="#敏捷开发如何迭代？" class="headerlink" title="敏捷开发如何迭代？"></a>敏捷开发如何迭代？</h4><p>虽然敏捷开发将软件开发分成多个迭代，但是也要求，每次迭代都是一个完整的软件开发周期，必须按照软件工程的方法论，进行正规的流程管理。</p><img src="/2024/01/31/jenkins-cicd/image-20240128162738311.png" class="" title="image-20240128162738311"><h4 id="敏捷开发有什么好处？"><a href="#敏捷开发有什么好处？" class="headerlink" title="敏捷开发有什么好处？"></a>敏捷开发有什么好处？</h4><ul><li><strong>早期交付</strong></li></ul><p>敏捷开发的第一个好处，就是早期交付，从而大大降低成本。 还是以上一节的房产公司为例，如果按照传统的”瀑布开发模式”，先挖10栋楼的地基、再盖骨架、然后架设屋顶，每个阶段都等到前一个阶段完成后开始，可能需要两年才能一次性交付10栋楼。也就是说，如果不考虑预售，该项目必须等到两年后才能回款。 敏捷开发是六个月后交付一号楼，后面每两个月交付一栋楼。因此，半年就能回款10%，后面每个月都会有现金流，资金压力就大大减轻了。</p><ul><li><strong>降低风险</strong></li></ul><p>敏捷开发的第二个好处是，及时了解市场需求，降低产品不适用的风险。 请想一想，哪一种情况损失比较小：10栋楼都造好以后，才发现卖不出去，还是造好第一栋楼，就发现卖不出去，从而改进或停建后面9栋楼？</p><h3 id="什么是持续集成"><a href="#什么是持续集成" class="headerlink" title="什么是持续集成"></a>什么是持续集成</h3><p>持续集成（ Continuous integration ， 简称 CI ）指的是，频繁地（一天多次）将代码集成到主干。</p><p>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p><p>通过持续集成， 团队可以快速的从一个功能到另一个功能，简而言之，敏捷软件开发很大一部分都要归功于持续集成。</p><ul><li><strong>持续集成的流程</strong></li></ul><img src="/2024/01/31/jenkins-cicd/image-20240128162839909.png" class="" title="image-20240128162839909"><p>根据持续集成的设计，代码从提交到生产，整个过程有以下几步。</p><ul><li>提交</li></ul><p>流程的第一步，是开发者向代码仓库提交代码。所有后面的步骤都始于本地代码的一次提交（commit）。</p><ul><li>测试（第一轮）</li></ul><p>代码仓库对commit操作配置了钩子（hook），只要提交代码或者合并进主干，就会跑自动化测试。</p><ul><li>构建</li></ul><p>通过第一轮测试，代码就可以合并进主干，就算可以交付了。</p><p>交付后，就先进行构建（build），再进入第二轮测试。所谓构建，指的是将源码转换为可以运行的实际代码，比如安装依赖，配置各种资源（样式表、JS脚本、图片）等等。</p><ul><li>测试（第二轮）</li></ul><p>构建完成，就要进行第二轮测试。如果第一轮已经涵盖了所有测试内容，第二轮可以省略，当然，这时构建步骤也要移到第一轮测试前面。</p><ul><li>部署</li></ul><p>过了第二轮测试，当前代码就是一个可以直接部署的版本（artifact）。将这个版本的所有文件打包（tar ﬁlename.tar * ）存档，发到生产服务器。</p><ul><li>回滚</li></ul><p>一旦当前版本发生问题，就要回滚到上一个版本的构建结果。最简单的做法就是修改一下符号链接，指向上一个版本的目录。</p><h3 id="持续集成的组成要素"><a href="#持续集成的组成要素" class="headerlink" title="持续集成的组成要素"></a>持续集成的组成要素</h3><ul><li>一个自动构建过程， 从检出代码、 编译构建、 运行测试、 结果记录、 测试统计等都是自动完成的， 无需人工干预。</li><li>一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，一般使用SVN或Git。</li><li>一个持续集成服务器， Jenkins 就是一个配置简单和使用方便的持续集成服务器。</li></ul><img src="/2024/01/31/jenkins-cicd/image-20240128163046909.png" class="" title="image-20240128163046909"><p>持续集成的好处</p><p>1、降低风险，由于持续集成不断去构建，编译和测试，可以很早期发现问题，所以修复的代价就少；</p><p>2、对系统健康持续检查，减少发布风险带来的问题；</p><p>3、减少重复性工作；</p><p>4、持续部署，提供可部署单元包；</p><p>5、持续交付可供使用的版本；</p><p>6、增强团队信心；</p><h3 id="Jenkins介绍"><a href="#Jenkins介绍" class="headerlink" title="Jenkins介绍"></a>Jenkins<strong>介绍</strong></h3> <img src="/2024/01/31/jenkins-cicd/image-20240128163113614.png" class="" title="image-20240128163113614"><p>Jenkins 是一款流行的开源持续集成（Continuous Integration）工具，广泛用于项目开发，具有自动化构建、测试和部署等功能。官网： <a href="http://jenkins-ci.org/">http://jenkins-ci.org/</a>。</p><p>Jenkins的特征：</p><ul><li>开源的Java语言开发持续集成工具，支持持续集成，持续部署。</li><li>易于安装部署配置：可通过yum安装,或下载war包以及通过docker容器等快速实现安装部署，可方便web界面配置管理。</li><li>消息通知及测试报告：集成RSS&#x2F;E-mail通过RSS发布构建结果或当构建完成时通过e-mail通知，生成JUnit&#x2F;TestNG测试报告。</li><li>分布式构建：支持Jenkins能够让多台计算机一起构建&#x2F;测试。</li><li>文件识别：Jenkins能够跟踪哪次构建生成哪些jar，哪次构建使用哪个版本的jar等。</li><li>丰富的插件支持：支持扩展插件，你可以开发适合自己团队使用的工具，如git，svn，maven，docker等。</li></ul><h2 id="2、Jenkins安装和持续集成环境配置"><a href="#2、Jenkins安装和持续集成环境配置" class="headerlink" title="2、Jenkins安装和持续集成环境配置"></a>2<strong>、</strong>Jenkins<strong>安装和持续集成环境配置</strong></h2><h3 id="2-1-持续集成流程说明"><a href="#2-1-持续集成流程说明" class="headerlink" title="2.1 持续集成流程说明"></a>2.1 持续集成流程说明</h3><img src="/2024/01/31/jenkins-cicd/image-20240128163332042.png" class="" title="image-20240128163332042"><ol><li><p>首先，开发人员每天进行代码提交，提交到Git仓库</p></li><li><p>然后，Jenkins作为持续集成工具，使用Git工具到Git仓库拉取代码到集成服务器，再配合JDK， Maven等软件完成代码编译，代码测试与审查，测试，打包等工作，在这个过程中每一步出错，都重新再执行一次整个流程。</p></li><li><p>最后，Jenkins把生成的jar或war包分发到测试服务器或者生产服务器，测试人员或用户就可以访问应用。</p></li></ol><p><strong>服务器列表</strong></p><p>本课程虚拟机统一采用CentOS7。</p><table><thead><tr><th>名称</th><th>IP<strong>地址</strong></th><th>安装的软件</th></tr></thead><tbody><tr><td>代码托管服务器</td><td>192.168.66.100</td><td>Gitlab-12.4.2</td></tr><tr><td>持续集成服务器</td><td>192.168.66.101</td><td>Jenkins-2.190.3，JDK1.8，Maven3.6.2，Git， SonarQube</td></tr><tr><td>应用测试服务器</td><td>192.168.66.102</td><td>JDK1.8，Tomcat8.5</td></tr></tbody></table><h3 id="2-2-Gitlab代码托管服务器安装"><a href="#2-2-Gitlab代码托管服务器安装" class="headerlink" title="2.2 Gitlab代码托管服务器安装"></a>2.2 Gitlab<strong>代码托管服务器安装</strong></h3><h4 id="2-2-1-Gitlab简介"><a href="#2-2-1-Gitlab简介" class="headerlink" title="2.2.1 Gitlab简介"></a>2.2.1 Gitlab<strong>简介</strong></h4> <img src="/2024/01/31/jenkins-cicd/image-20240128163551876.png" class="" title="image-20240128163551876"><p>官网：<a href="https://about.gitlab.com/">https://about.gitlab.com/</a></p><p>GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。</p><p>GitLab和GitHub一样属于第三方基于Git开发的作品，免费且开源（基于MIT协议），与Github类似，可以注册用户，任意提交你的代码，添加SSHKey等等。不同的是，<strong>GitLab****是可以部署到自己的服务器上，数据库等一切信息都掌握在自己手上，适合团队内部协作开发</strong>，你总不可能把团队内部的智慧总放在别人的服务器上吧？简单来说可把GitLab看作个人版的GitHub。</p><h4 id="2-2-2-Gitlab安装"><a href="#2-2-2-Gitlab安装" class="headerlink" title="2.2.2 Gitlab安装"></a>2.2.2 Gitlab<strong>安装</strong></h4><ol><li><p>安装相关依赖</p> <figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">yum -y install policycoreutils openssh-<span class="hljs-keyword">server</span> openssh-clients postﬁx<br></code></pre></td></tr></table></figure></li><li><p>启动ssh服务&amp;设置为开机启动</p> <figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl enable sshd &amp;&amp; sudo <span class="hljs-params">system</span>ctl start sshd<br></code></pre></td></tr></table></figure></li><li><p>设置postﬁx开机自启，并启动，postﬁx支持gitlab发信功能</p> <figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">systemctl enable postﬁ<span class="hljs-keyword">x</span> &amp;&amp; systemctl start postﬁ<span class="hljs-keyword">x</span><br></code></pre></td></tr></table></figure></li><li><p>开放ssh以及http服务，然后重新加载防火墙列表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">ﬁrewall-cmd --add-service=ssh --permanent <br>ﬁrewall-cmd --add-service=http --permanent <br>ﬁrewall-cmd --reload<br><br></code></pre></td></tr></table></figure><p>如果关闭防火墙就不需要做以上配置</p></li><li><p>下载gitlab包，并且安装在线下载安装包：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">wget https://mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/gitlab-<span class="hljs-keyword">ce</span>/yum/el6/gitlab-<span class="hljs-keyword">ce</span>-<span class="hljs-number">12.4</span>.<span class="hljs-number">2</span>-<span class="hljs-keyword">ce</span>.<span class="hljs-number">0</span>.el6.x86_64.rpm<br><br>安装：<br>rpm -i gitlab-<span class="hljs-keyword">ce</span>-<span class="hljs-number">12.4</span>.<span class="hljs-number">2</span>-<span class="hljs-keyword">ce</span>.<span class="hljs-number">0</span>.el6.x86_64.rpm<br></code></pre></td></tr></table></figure></li><li><p>修改gitlab配置</p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/gi</span>tlab/gitlab.rb<br></code></pre></td></tr></table></figure><p>修改gitlab访问地址和端口，默认为80，我们改为82</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">external_url</span> <span class="hljs-string">&#x27;http://192.168.66.100:82&#x27;</span><br>nginx[<span class="hljs-string">&#x27;listen_port&#x27;</span>] = <span class="hljs-number">82</span><br></code></pre></td></tr></table></figure></li><li><p>重载配置及启动gitlab gitlab-ctl reconﬁgure gitlab-ctl restart</p></li><li><p>把端口添加到防火墙</p></li></ol>   <figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">ﬁrewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">zone=public</span> <span class="hljs-literal">--</span><span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=82/tcp</span> <span class="hljs-literal">--</span><span class="hljs-comment">permanent</span> <br><span class="hljs-comment">ﬁrewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">reload</span><br></code></pre></td></tr></table></figure><p>启动成功后，看到以下修改管理员root密码的页面，修改密码后，然后登录即可</p><img src="/2024/01/31/jenkins-cicd/image-20240128164107873.png" class="" title="image-20240128164107873"><h4 id="2-2-3-Gitlab添加组、创建用户、创建项目"><a href="#2-2-3-Gitlab添加组、创建用户、创建项目" class="headerlink" title="2.2.3 Gitlab添加组、创建用户、创建项目"></a>2.2.3 Gitlab<strong>添加组、创建用户、创建项目</strong></h4><p>1）创建组</p><p>使用管理员 root 创建组，一个组里面可以有多个项目分支，可以将开发添加到组里面进行设置权限，不同的组就是公司不同的开发项目或者服务模块，不同的组添加不同的开发即可实现对开发设置权限的管理</p> <img src="/2024/01/31/jenkins-cicd/image-20240128164157994.png" class="" title="image-20240128164157994"> <img src="/2024/01/31/jenkins-cicd/image-20240128164224122.png" class="" title="image-20240128164224122"><p>2）创建用户</p><p>创建用户的时候，可以选择Regular或Admin类型。</p><img src="/2024/01/31/jenkins-cicd/image-20240128164249515.png" class="" title="image-20240128164249515"><p>创建完用户后，立即修改密码</p><img src="/2024/01/31/jenkins-cicd/image-20240128164309630.png" class="" title="image-20240128164309630"><p>3）将用户添加到组中</p><p>选择某个用户组，进行Members管理组的成员</p><img src="/2024/01/31/jenkins-cicd/image-20240128164322370.png" class="" title="image-20240128164322370"><img src="/2024/01/31/jenkins-cicd/image-20240128164330998.png" class="" title="image-20240128164330998"><img src="/2024/01/31/jenkins-cicd/image-20240128164339785.png" class="" title="image-20240128164339785"><p>Gitlab用户在组里面有5种不同权限：</p><p>Guest：可以创建issue、发表评论，不能读写版本库 </p><p>Reporter：可以克隆代码，不能提交，QA、PM可以赋予这个权限 </p><p>Developer：可以克隆代码、开发、提交、push，普通开发可以赋予这个权限 </p><p>Maintainer：可以创建项目、添加tag、保护分支、添加项目成员、编辑项目，核心开发可以赋予这个权限 </p><p>Owner：可以设置项目访问权限 - Visibility Level、删除项目、迁移项目、管理组成员，开发组组长可以赋予这个权限</p><p>4）在用户组中创建项目</p><p>以刚才创建的新用户身份登录到Gitlab，然后在用户组中创建新的项目</p><img src="/2024/01/31/jenkins-cicd/image-20240128164501359.png" class="" title="image-20240128164501359"><img src="/2024/01/31/jenkins-cicd/image-20240128164508368.png" class="" title="image-20240128164508368"><h3 id="2-3-源码上传到Gitlab仓库"><a href="#2-3-源码上传到Gitlab仓库" class="headerlink" title="2.3 源码上传到Gitlab仓库"></a>2.3 源码上传到<strong>Gitlab</strong>仓库</h3><p>下面来到IDEA开发工具，我们已经准备好一个简单的Web应用准备到集成部署。我们要把源码上传到Gitlab的项目仓库中。</p><p>1）项目结构说明</p><img src="/2024/01/31/jenkins-cicd/image-20240128164548382.png" class="" title="image-20240128164548382"><p> 我们建立了一个非常简单的web应用，只有一个index.jsp页面，如果部署好，可以访问该页面就成功啦！</p><p>2）开启版本控制</p><img src="/2024/01/31/jenkins-cicd/image-20240128164652302.png" class="" title="image-20240128164652302"><img src="/2024/01/31/jenkins-cicd/image-20240128164702233.png" class="" title="image-20240128164702233"><p>3）提交代码到本地仓库</p><ul><li>先Add到缓存区</li></ul><img src="/2024/01/31/jenkins-cicd/image-20240128164751633.png" class="" title="image-20240128164751633"><ul><li><p>再Commit到本地仓库</p><img src="/2024/01/31/jenkins-cicd/image-20240128164816549.png" class="" title="image-20240128164816549"></li></ul> <img src="/2024/01/31/jenkins-cicd/image-20240128164829105.png" class="" title="image-20240128164829105"><p>4）推送到Gitlab项目仓库中</p><img src="/2024/01/31/jenkins-cicd/image-20240128164858106.png" class="" title="image-20240128164858106"> <img src="/2024/01/31/jenkins-cicd/image-20240128164907470.png" class="" title="image-20240128164907470"><p>这时都Gitlab的项目中拷贝url地址</p><img src="/2024/01/31/jenkins-cicd/image-20240128164938278.png" class="" title="image-20240128164938278"> <img src="/2024/01/31/jenkins-cicd/image-20240128164947125.png" class="" title="image-20240128164947125"><p>输入gitlab的用户名和密码，然后就可以把代码推送到远程仓库啦</p><img src="/2024/01/31/jenkins-cicd/image-20240128165001477.png" class="" title="image-20240128165001477"><p>刷新gitlab项目</p><img src="/2024/01/31/jenkins-cicd/image-20240128165013875.png" class="" title="image-20240128165013875"><h3 id="2-4-持续集成环境"><a href="#2-4-持续集成环境" class="headerlink" title="2.4 持续集成环境"></a>2.4 持续集成环境</h3><h4 id="2-4-1-1-Jenkins安装"><a href="#2-4-1-1-Jenkins安装" class="headerlink" title="2.4.1 (1)-Jenkins安装"></a>2.4.1 <strong>(1)-Jenkins</strong>安装</h4><p>1）安装JDK</p><p>Jenkins需要依赖JDK，所以先安装JDK1.8 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> install java-<span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>-openjdk* -y<br></code></pre></td></tr></table></figure><p> 安装目录为：&#x2F;usr&#x2F;lib&#x2F;jvm</p><p>2）获取jenkins安装包</p><p>下载页面：<a href="https://jenkins.io/zh/download/">https://jenkins.io/zh/download/</a></p><p>安装文件：jenkins-2.190.3-1.1.noarch.rpm</p><p>3）把安装包上传到192.168.66.101服务器，进行安装  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -ivh jenkins-<span class="hljs-number">2</span>.<span class="hljs-number">190</span>.<span class="hljs-number">3</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.noarch.rpm<br></code></pre></td></tr></table></figure><p>4）修改Jenkins配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/syscoﬁg/jenkins<br></code></pre></td></tr></table></figure><p>修改内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">JENKINS_USER</span>=<span class="hljs-string">&quot;root&quot;</span><br><span class="hljs-attr">JENKINS_PORT</span>=<span class="hljs-string">&quot;8888&quot;</span><br></code></pre></td></tr></table></figure><p>5）启动Jenkins</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> jenkins <br></code></pre></td></tr></table></figure><p>6）打开浏览器访问 </p><p><a href="http://192.168.66.101:8888/">http://192.168.66.101:8888</a></p><p>注意：本服务器把防火墙关闭了，如果开启防火墙，需要在防火墙添加端口</p><p>7）获取并输入admin账户密码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/jenkins/</span>secrets/initialAdminPassword<br></code></pre></td></tr></table></figure><p>8）跳过插件安装</p><p>因为Jenkins插件需要连接默认官网下载，速度非常慢，而且经过会失败，所以我们暂时先跳过插件安装</p><img src="/2024/01/31/jenkins-cicd/image-20240128165624701.png" class="" title="image-20240128165624701"><img src="/2024/01/31/jenkins-cicd/image-20240128165642921.png" class="" title="image-20240128165642921"><p>9）添加一个管理员账户，并进入Jenkins后台</p><img src="/2024/01/31/jenkins-cicd/image-20240128165657325.png" class="" title="image-20240128165657325"><p>保存并完成</p><img src="/2024/01/31/jenkins-cicd/image-20240128165711040.png" class="" title="image-20240128165711040"><p>开始使用Jenkins</p><img src="/2024/01/31/jenkins-cicd/image-20240128165725865.png" class="" title="image-20240128165725865"><img src="/2024/01/31/jenkins-cicd/image-20240128165732794.png" class="" title="image-20240128165732794"><h4 id="2-4-2-2-Jenkins插件管理"><a href="#2-4-2-2-Jenkins插件管理" class="headerlink" title="2.4.2 (2)-Jenkins插件管理"></a>2.4.2 <strong>(2)-Jenkins</strong>插件管理</h4><p>Jenkins本身不提供很多功能，我们可以通过使用插件来满足我们的使用。例如从Gitlab拉取代码，使用 Maven构建项目等功能需要依靠插件完成。接下来演示如何下载插件。</p><h5 id="修改Jenkins插件下载地址"><a href="#修改Jenkins插件下载地址" class="headerlink" title="修改Jenkins插件下载地址"></a>修改<strong>Jenkins</strong>插件下载地址</h5><p>Jenkins国外官方插件地址下载速度非常慢，所以可以修改为国内插件地址： Jenkins-&gt;Manage Jenkins-&gt;Manage Plugins，点击Available</p><img src="/2024/01/31/jenkins-cicd/image-20240128165923879.png" class="" title="image-20240128165923879"><p>这样做是为了把Jenkins官方的插件列表下载到本地，接着修改地址文件，替换为国内插件地址</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift">cd <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/jenkins/</span>updates<br><br>sed <span class="hljs-operator">-</span>i &#x27;s<span class="hljs-regexp">/http:\/\/updates.jenkins-ci.org\/download/</span>https:\<span class="hljs-regexp">/\/</span>mirrors.tuna.tsinghua.edu.cn\<span class="hljs-regexp">/jenkins/</span>g&#x27; <span class="hljs-keyword">default</span>.json <span class="hljs-operator">&amp;&amp;</span> sed <span class="hljs-operator">-</span>i &#x27;s<span class="hljs-regexp">/http:\/\/www.google.com/</span>https:\<span class="hljs-regexp">/\/</span>www.baidu.com<span class="hljs-operator">/</span>g&#x27; <span class="hljs-keyword">default</span>.json<br></code></pre></td></tr></table></figure><p>最后，Manage Plugins点击Advanced，把Update Site改为国内插件下载地址</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">https://mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/jenkins/updates/<span class="hljs-keyword">update</span>-<span class="hljs-keyword">center</span>.json<br></code></pre></td></tr></table></figure><img src="/2024/01/31/jenkins-cicd/image-20240128170154114.png" class="" title="image-20240128170154114"><p>Sumbit后，在浏览器输入： <a href="http://192.168.66.101:8888/restart">http://192.168.66.101:8888/restart</a> ，重启Jenkins。</p><h5 id="下载中文汉化插件"><a href="#下载中文汉化插件" class="headerlink" title="下载中文汉化插件"></a><strong>下载中文汉化插件</strong></h5><p>Jenkins-&gt;Manage Jenkins-&gt;Manage Plugins，点击Available，搜索”Chinese”</p><img src="/2024/01/31/jenkins-cicd/image-20240128170337462.png" class="" title="image-20240128170337462"><p>完成后如下图：</p> <img src="/2024/01/31/jenkins-cicd/image-20240128170353822.png" class="" title="image-20240128170353822"><p>重启Jenkins后，就看到Jenkins汉化了！（PS：但可能部分菜单汉化会失败）</p><img src="/2024/01/31/jenkins-cicd/image-20240128170346546.png" class="" title="image-20240128170346546"><h4 id="2-4-3-3-Jenkins用户权限管理"><a href="#2-4-3-3-Jenkins用户权限管理" class="headerlink" title="2.4.3 (3)-Jenkins用户权限管理"></a>2.4.3 <strong>(3)-Jenkins</strong>用户权限管理</h4><p>我们可以利用Role-based Authorization Strategy 插件来管理Jenkins用户权限</p><p><strong>安装</strong> <strong>Role-based Authorization Strategy插件</strong></p><img src="/2024/01/31/jenkins-cicd/image-20240202213927756.png" class="" title="image-20240202213927756"><p>开启权限全局安全配置</p><img src="/2024/01/31/jenkins-cicd/image-20240202213949878.png" class="" title="image-20240202213949878"><p>授权策略切换为”Role-Based Strategy”，保存</p><img src="/2024/01/31/jenkins-cicd/image-20240202214045443.png" class="" title="image-20240202214045443"><p>创建角色</p><p>在系统管理页面进入 Manage and Assign Roles</p> <img src="/2024/01/31/jenkins-cicd/image-20240202214111236.png" class="" title="image-20240202214111236"><p>点击”Manage Roles”</p><img src="/2024/01/31/jenkins-cicd/image-20240202214129412.png" class="" title="image-20240202214129412"><p>Global roles（全局角色）：管理员等高级用户可以创建基于全局的角色 Project roles（项目角色）：针对某个或者某些项目的角色 Slave roles（奴隶角色）：节点相关的权限</p><p>我们添加以下三个角色：</p><ul><li>baseRole：该角色为全局角色。这个角色需要绑定Overall下面的Read权限，是为了给所有用户绑定最基本的Jenkins访问权限。注意：如果不给后续用户绑定这个角色，会报错误：用户名 is missing the Overall&#x2F;Read permission </li><li>role1：该角色为项目角色。使用正则表达式绑定”itcast.*”，意思是只能操作itcast开头的项目。 </li><li>role2：该角色也为项目角色。绑定”itheima.*”，意思是只能操作itheima开头的项目。</li></ul><img src="/2024/01/31/jenkins-cicd/image-20240202214236867.png" class="" title="image-20240202214236867"><p>保存。</p><p><strong>创建用户</strong></p><p>在系统管理页面进入 Manage Users</p> <img src="/2024/01/31/jenkins-cicd/image-20240202214338134.png" class="" title="image-20240202214338134"><img src="/2024/01/31/jenkins-cicd/image-20240202214347327.png" class="" title="image-20240202214347327"> <img src="/2024/01/31/jenkins-cicd/image-20240202214353751.png" class="" title="image-20240202214353751"><p>分别创建两个用户：jack和eric</p><img src="/2024/01/31/jenkins-cicd/image-20240202214402590.png" class="" title="image-20240202214402590"><p><strong>给用户分配角色</strong></p><p>系统管理页面进入Manage and Assign Roles，点击Assign Roles</p><p>绑定规则如下：</p><ul><li>eric用户分别绑定baseRole和role1角色</li><li>jack用户分别绑定baseRole和role2角色</li></ul><img src="/2024/01/31/jenkins-cicd/image-20240202214429277.png" class="" title="image-20240202214429277"><p>保存。</p><p><strong>创建项目测试权限</strong></p><p>以itcast管理员账户创建两个项目，分别为itcast01和itheima01</p> <img src="/2024/01/31/jenkins-cicd/image-20240202214510091.png" class="" title="image-20240202214510091"><p>结果为：</p><ul><li>eric用户登录，只能看到itcast01项目</li><li>jack用户登录，只能看到itheima01项目</li></ul><h4 id="2-4-4-4-Jenkins凭证管理"><a href="#2-4-4-4-Jenkins凭证管理" class="headerlink" title="2.4.4 (4)-Jenkins凭证管理"></a>2.4.4 <strong>(4)-Jenkins</strong>凭证管理</h4><p>凭据可以用来存储需要密文保护的数据库密码、Gitlab密码信息、Docker私有仓库密码等，以便Jenkins可以和这些第三方的应用进行交互。</p><ul><li>安装<strong>Credentials Binding</strong>插件</li></ul><p>要在Jenkins使用凭证管理功能，需要安装Credentials Binding插件</p> <img src="/2024/01/31/jenkins-cicd/image-20240202214731252.png" class="" title="image-20240202214731252"><p>安装插件后，左边多了”凭证”菜单，在这里管理所有凭证</p><img src="/2024/01/31/jenkins-cicd/image-20240202214746933.png" class="" title="image-20240202214746933"><p>可以添加的凭证有5种：</p> <img src="/2024/01/31/jenkins-cicd/image-20240202214814419.png" class="" title="image-20240202214814419"><ul><li>Username with password：用户名和密码</li><li>SSH Username with private key： 使用SSH用户和密钥</li><li>Secret ﬁle：需要保密的文本文件，使用时Jenkins会将文件复制到一个临时目录中，再将文件路径设置到一个变量中，等构建结束后，所复制的Secret ﬁle就会被删除。</li><li>Secret text：需要保存的一个加密的文本串，如钉钉机器人或Github的api token</li><li>Certiﬁcate：通过上传证书文件的方式</li></ul><p>常用的凭证类型有：Username with password（用户密码）和SSH Username with private key（SSH密钥）</p><p>接下来以使用Git工具到Gitlab拉取项目源码为例，演示Jenkins的如何管理Gitlab的凭证。</p><ul><li><strong>安装****Git插件和Git工具</strong></li></ul><p>为了让Jenkins支持从Gitlab拉取源码，需要安装Git插件以及在CentOS7上安装Git工具。</p><p>Git插件安装：</p> <img src="/2024/01/31/jenkins-cicd/image-20240202214936314.png" class="" title="image-20240202214936314"><p>CentOS7上安装Git工具： </p><blockquote><p>yum install git -y 安装</p><p>git –version 安装后查看版本</p></blockquote><ul><li>用户密码类型</li></ul><ol><li><p>创建凭证</p><p>Jenkins-&gt;凭证-&gt;系统-&gt;全局凭证-&gt;添加凭证</p><img src="/2024/01/31/jenkins-cicd/image-20240202215029579.png" class="" title="image-20240202215029579"><img src="/2024/01/31/jenkins-cicd/image-20240202215046017.png" class="" title="image-20240202215046017"><p>选择”Username with password”，输入Gitlab的用户名和密码，点击”确定”。</p><img src="/2024/01/31/jenkins-cicd/image-20240202215110683.png" class="" title="image-20240202215110683"></li><li><p>测试凭证是否可用</p><p>创建一个FreeStyle项目：新建Item-&gt;FreeStyle Project-&gt;确定</p><img src="/2024/01/31/jenkins-cicd/image-20240202215121112.png" class="" title="image-20240202215121112"><p>找到”源码管理”-&gt;”Git”，在Repository URL复制Gitlab中的项目URL</p><img src="/2024/01/31/jenkins-cicd/image-20240202215222843.png" class="" title="image-20240202215222843"><img src="/2024/01/31/jenkins-cicd/image-20240202215241577.png" class="" title="image-20240202215241577"><p>这时会报错说无法连接仓库！在Credentials选择刚刚添加的凭证就不报错啦</p><img src="/2024/01/31/jenkins-cicd/image-20240202215256539.png" class="" title="image-20240202215256539"><p>保存配置后，点击构建”Build Now“ 开始构建项目</p><img src="/2024/01/31/jenkins-cicd/image-20240202215315582.png" class="" title="image-20240202215315582"><img src="/2024/01/31/jenkins-cicd/image-20240202215326768.png" class="" title="image-20240202215326768"><p>查看**&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;workspace&#x2F;**目录，发现已经从Gitlab成功拉取了代码到Jenkins中。</p> <img src="/2024/01/31/jenkins-cicd/image-20240202215350778.png" class="" title="image-20240202215350778"></li></ol><p>SSH<strong>密钥类型</strong></p><p>SSH免密登录示意图</p><img src="/2024/01/31/jenkins-cicd/image-20240202215553758.png" class="" title="image-20240202215553758"><ol><li><p>使用root用户生成公钥和私钥  </p><blockquote><p>ssh-keygen -t rsa</p></blockquote><p>在&#x2F;root&#x2F;.ssh&#x2F;目录保存了公钥和使用</p> <img src="/2024/01/31/jenkins-cicd/image-20240202215631226.png" class="" title="image-20240202215631226"><p>id_rsa：私钥文件</p><p>id_rsa.pub：公钥文件</p></li><li><p>把生成的公钥放在Gitlab中</p><p>以root账户登录-&gt;点击头像-&gt;Settings-&gt;SSH Keys</p><p>复制刚才id_rsa.pub文件的内容到这里，点击”Add Key”</p><img src="/2024/01/31/jenkins-cicd/image-20240202215656644.png" class="" title="image-20240202215656644"></li><li><p>在Jenkins中添加凭证，配置私钥</p><p>在Jenkins添加一个新的凭证，类型为”SSH Username with private key”，把刚才生成私有文件内容复制过来</p><img src="/2024/01/31/jenkins-cicd/image-20240202215716861.png" class="" title="image-20240202215716861"><img src="/2024/01/31/jenkins-cicd/image-20240202215733086.png" class="" title="image-20240202215733086"></li><li><p>测试凭证是否可用</p><p>新建”test02”项目-&gt;源码管理-&gt;Git，这次要使用Gitlab的SSH连接，并且选择SSH凭证</p><img src="/2024/01/31/jenkins-cicd/image-20240202215753674.png" class="" title="image-20240202215753674"><img src="/2024/01/31/jenkins-cicd/image-20240202215803593.png" class="" title="image-20240202215803593"><img src="/2024/01/31/jenkins-cicd/image-20240202215811626.png" class="" title="image-20240202215811626"><p>同样尝试构建项目，如果代码可以正常拉取，代表凭证配置成功！</p> <img src="/2024/01/31/jenkins-cicd/image-20240202215825514.png" class="" title="image-20240202215825514"></li></ol><h4 id="2-4-5-5-Maven安装和配置"><a href="#2-4-5-5-Maven安装和配置" class="headerlink" title="2.4.5 (5)-Maven安装和配置"></a>2.4.5 <strong>(5)-Maven</strong>安装和配置</h4><p>在Jenkins集成服务器上，我们需要安装Maven来编译和打包项目。</p><h5 id="安装-Maven"><a href="#安装-Maven" class="headerlink" title="安装 Maven"></a>安装 Maven</h5><p>先上传Maven软件到192.168.66.101</p><blockquote><p>tar -xzf apache-maven-3.6.2-bin.tar.gz 解压</p><p>mkdir -p &#x2F;opt&#x2F;maven 创建目录</p><p>mv apache-maven-3.6.2&#x2F;* &#x2F;opt&#x2F;maven 移动文件</p></blockquote><h5 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h5><blockquote><p>vi &#x2F;etc&#x2F;proﬁle</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">JAVA_HOME</span>=/usr/lib/jvm/java-1.8.0-openjdk <br><span class="hljs-built_in">export</span> <span class="hljs-attribute">MAVEN_HOME</span>=/opt/maven<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$JAVA_HOME/bin:$MAVEN_HOME/bin<br><br></code></pre></td></tr></table></figure><blockquote><p>source &#x2F;etc&#x2F;proﬁle 配置生效</p><p>mvn -v 查找Maven版本</p></blockquote><h5 id="全局工具配置关联JDK和Maven"><a href="#全局工具配置关联JDK和Maven" class="headerlink" title="全局工具配置关联JDK和Maven"></a>全局工具配置关联<strong>JDK</strong>和<strong>Maven</strong></h5><p>Jenkins-&gt;Global Tool Conﬁguration-&gt;JDK-&gt;新增JDK，配置如下：</p><img src="/2024/01/31/jenkins-cicd/image-20240202220537027.png" class="" title="image-20240202220537027"><p>Jenkins-&gt;Global Tool Conﬁguration-&gt;Maven-&gt;新增Maven，配置如下：</p><img src="/2024/01/31/jenkins-cicd/image-20240202220547241.png" class="" title="image-20240202220547241"><h5 id="添加Jenkins全局变量"><a href="#添加Jenkins全局变量" class="headerlink" title="添加Jenkins全局变量"></a>添加<strong>Jenkins</strong>全局变量</h5><p>Manage Jenkins-&gt;Conﬁgure System-&gt;Global Properties ，添加三个全局变量</p><p>JAVA_HOME、M2_HOME、PATH+EXTRA</p><img src="/2024/01/31/jenkins-cicd/image-20240202220611822.png" class="" title="image-20240202220611822"><h5 id="修改Maven的settings-xml"><a href="#修改Maven的settings-xml" class="headerlink" title="修改Maven的settings.xml"></a>修改<strong>Maven</strong>的<strong>settings.xml</strong></h5><blockquote><p>mkdir &#x2F;root&#x2F;repo 创建本地仓库目录</p><p>vi &#x2F;opt&#x2F;maven&#x2F;conf&#x2F;settings.xml</p></blockquote><p>本地仓库改为：&#x2F;root&#x2F;repo&#x2F;添加阿里云私服地址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//m</span>aven.aliyun.com<span class="hljs-regexp">/nexus/</span>content<span class="hljs-regexp">/groups/</span>public/central<br></code></pre></td></tr></table></figure><h5 id="测试Maven是否配置成功"><a href="#测试Maven是否配置成功" class="headerlink" title="测试Maven是否配置成功"></a>测试<strong>Maven</strong>是否配置成功</h5><p>使用之前的gitlab密码测试项目，修改配置</p><img src="/2024/01/31/jenkins-cicd/image-20240202220803342.png" class="" title="image-20240202220803342"><p>构建-&gt;增加构建步骤-&gt;Execute Shell</p> <img src="/2024/01/31/jenkins-cicd/image-20240202220817078.png" class="" title="image-20240202220817078"><p>输入</p><blockquote><p>mvn clean package</p></blockquote> <img src="/2024/01/31/jenkins-cicd/image-20240202220840573.png" class="" title="image-20240202220840573"><p>再次构建，如果可以把项目打成war包，代表maven环境配置成功啦！</p><img src="/2024/01/31/jenkins-cicd/image-20240202220855193.png" class="" title="image-20240202220855193"><h4 id="2-5-6-Tomcat安装和配置"><a href="#2-5-6-Tomcat安装和配置" class="headerlink" title="2.5 (6)-Tomcat安装和配置"></a>2.5 (6)-Tomcat安装和配置</h4><h5 id="2-5-1-安装-Tomcat8-5"><a href="#2-5-1-安装-Tomcat8-5" class="headerlink" title="2.5.1 安装 Tomcat8.5"></a>2.5.1 安装 Tomcat8.5</h5><p>把Tomcat压缩包上传到192.168.66.102服务器</p><blockquote><p>yum install java-1.8.0-openjdk* -y 安装JDK（已完成）</p><p>tar -xzf apache-tomcat-8.5.47.tar.gz 解压</p><p>mkdir -p &#x2F;opt&#x2F;tomcat 创建目录</p><p>mv &#x2F;root&#x2F;apache-tomcat-8.5.47&#x2F;* &#x2F;opt&#x2F;tomcat 移动文件</p><p>&#x2F;opt&#x2F;tomcat&#x2F;bin&#x2F;startup.sh 启动tomcat</p></blockquote><p>注意：服务器已经关闭了防火墙，所以可以直接访问Tomcat啦地址为：(<a href="http://192.168.66.102/8080">http://192.168.66.102/8080</a>)</p><img src="/2024/01/31/jenkins-cicd/image-20240202221124317.png" class="" title="image-20240202221124317"><h5 id="2-5-2-配置Tomcat用户角色权限"><a href="#2-5-2-配置Tomcat用户角色权限" class="headerlink" title="2.5.2  配置Tomcat用户角色权限"></a>2.5.2  配置<strong>Tomcat</strong>用户角色权限</h5><p>默认情况下Tomcat是没有配置用户角色权限的</p> <img src="/2024/01/31/jenkins-cicd/image-20240202221206915.png" class="" title="image-20240202221206915"><img src="/2024/01/31/jenkins-cicd/image-20240202221218507.png" class="" title="image-20240202221218507"><p>但是，后续Jenkins部署项目到Tomcat服务器，需要用到Tomcat的用户，所以修改tomcat以下配置，添加用户及权限</p><blockquote><p>vi &#x2F;opt&#x2F;tomcat&#x2F;conf&#x2F;tomcat-users.xml</p></blockquote><p>内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tomcat-users</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;tomcat&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;role1&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;manager-script&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;manager-gui&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;manager-status&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;admin-gui&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;admin-script&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">username</span>=<span class="hljs-string">&quot;tomcat&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;tomcat&quot;</span> <span class="hljs-attr">roles</span>=<span class="hljs-string">&quot;manager-gui,managerscript,</span></span><br><span class="hljs-string"><span class="hljs-tag">tomcat,admin-gui,admin-script&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tomcat-users</span>&gt;</span><br></code></pre></td></tr></table></figure><p>用户和密码都是：tomcat</p><p>注意：为了能够刚才配置的用户登录到Tomcat，还需要修改以下配置</p><blockquote><p>vi &#x2F;opt&#x2F;tomcat&#x2F;webapps&#x2F;manager&#x2F;META-INF&#x2F;context.xml</p></blockquote> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">&lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot;</span><br><span class="hljs-comment">allow=&quot;127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1&quot; /&gt;</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><p>把上面这行注释掉即可！重启<strong>Tomcat</strong>，访问测试</p><blockquote><p>&#x2F;opt&#x2F;tomcat&#x2F;bin&#x2F;shutdown.sh 停止</p><p>&#x2F;opt&#x2F;tomcat&#x2F;bin&#x2F;startup.sh 启动</p></blockquote><p>访问： <a href="http://192.168.66.102:8080/manager/html">http://192.168.66.102:8080/manager/html</a> ，输入tomcat和tomcat，看到以下页面代表成功啦</p><h2 id="3、Jenkins构建Maven项目"><a href="#3、Jenkins构建Maven项目" class="headerlink" title="3、Jenkins构建Maven项目"></a>3<strong>、</strong>Jenkins<strong>构建</strong>Maven<strong>项目</strong></h2><h3 id="3-1-1-Jenkins构建的项目类型介绍"><a href="#3-1-1-Jenkins构建的项目类型介绍" class="headerlink" title="3.1 (1)-Jenkins构建的项目类型介绍"></a>3.1 (1)-Jenkins<strong>构建的项目类型介绍</strong></h3><p>Jenkins中自动构建项目的类型有很多，常用的有以下三种：</p><ul><li>自由风格软件项目（FreeStyle Project）</li><li>Maven项目（Maven Project）</li><li>流水线项目（Pipeline Project）</li></ul><p>每种类型的构建其实都可以完成一样的构建过程与结果，只是在操作方式、灵活度等方面有所区别，在实际开发中可以根据自己的需求和习惯来选择。（PS：个人推荐使用流水线类型，因为灵活度非常高）</p><h3 id="3-2-2-自由风格项目构建"><a href="#3-2-2-自由风格项目构建" class="headerlink" title="3.2  (2)-自由风格项目构建"></a>3.2  (2)-自由风格项目构建</h3><p>下面演示创建一个自由风格项目来完成项目的集成过程：</p><blockquote><p>拉取代码-&gt;编译-&gt;打包-&gt;部署</p></blockquote><h4 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h4><ol><li><p>创建项目</p>  <img src="/2024/01/31/jenkins-cicd/image-20240202221713199.png" class="" title="image-20240202221713199"></li><li><p>配置源码管理，从gitlab拉取代码</p><img src="/2024/01/31/jenkins-cicd/image-20240202221732188.png" class="" title="image-20240202221732188"></li></ol><h4 id="编译打包"><a href="#编译打包" class="headerlink" title="编译打包"></a>编译打包</h4><p>构建-&gt;添加构建步骤-&gt;Executor Shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始编译和打包&quot;</span> <br>mvn clean package <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;编译和打包结束&quot;</span><br></code></pre></td></tr></table></figure><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>把项目部署到远程的Tomcat里面</p><ol><li><p>安装 Deploy to container插件<br>Jenkins本身无法实现远程部署到Tomcat的功能，需要安装Deploy to container插件实现</p> <img src="/2024/01/31/jenkins-cicd/image-20240202222211018.png" class="" title="image-20240202222211018"></li><li><p>添加Tomcat用户凭证</p><img src="/2024/01/31/jenkins-cicd/image-20240202222329541.png" class="" title="image-20240202222329541">      <ol start="3"><li><p>添加构建后操作</p> <img src="/2024/01/31/jenkins-cicd/image-20240202222510484.png" class="" title="image-20240202222510484">  <img src="/2024/01/31/jenkins-cicd/image-20240202222536486.png" class="" title="image-20240202222536486"> <img src="/2024/01/31/jenkins-cicd/image-20240202222550283.png" class="" title="image-20240202222550283"><p> 点击”Build Now”，开始构建过程</p> <img src="/2024/01/31/jenkins-cicd/image-20240202222609417.png" class="" title="image-20240202222609417"></li><li><p>部署成功后，访问项目</p></li></ol>   <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">192.168.66.102:8080</span>/web_demo-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT/<br></code></pre></td></tr></table></figure><pre><code class="hljs">&#123;% asset_img image-20240202222644903.png image-20240202222644903 %&#125;</code></pre></li></ol><h4 id="演示改动代码后的持续集成"><a href="#演示改动代码后的持续集成" class="headerlink" title="演示改动代码后的持续集成"></a>演示改动代码后的持续集成</h4><p>1）IDEA中源码修改并提交到gitlab<br>2）在Jenkins中项目重新构建<br>3）访问Tomcat</p><h3 id="3-3-3-Maven项目构建"><a href="#3-3-3-Maven项目构建" class="headerlink" title="3.3 (3)-Maven项目构建"></a>3.3 (3)-Maven项目构建</h3><ol><li><p>安装Maven Integration插件</p><img src="/2024/01/31/jenkins-cicd/image-20240202222933227.png" class="" title="image-20240202222933227">     </li><li><p>创建Maven项目</p><img src="/2024/01/31/jenkins-cicd/image-20240202223000388.png" class="" title="image-20240202223000388"></li><li><p>配置项目</p><p> 拉取代码和远程部署的过程和自由风格项目一样，只是”构建”部分不同</p><img src="/2024/01/31/jenkins-cicd/image-20240202223038318.png" class="" title="image-20240202223038318"></li></ol><h3 id="3-4-4-Pipeline流水线项目构建"><a href="#3-4-4-Pipeline流水线项目构建" class="headerlink" title="3.4 (4)-Pipeline流水线项目构建(*)"></a>3.4 (4)-Pipeline<strong>流水线项目构建</strong>(*)</h3><h4 id="3-4-1-Pipeline-简介"><a href="#3-4-1-Pipeline-简介" class="headerlink" title="3.4.1 Pipeline 简介"></a>3.4.1 Pipeline 简介</h4><ol><li><p>概念</p><p>Pipeline，简单来说，就是一套运行在 Jenkins 上的工作流框架，将原来独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排和可视化的工作。</p></li><li><p>使用Pipeline有以下好处（来自翻译自官方文档）：</p><p>代码：Pipeline以代码的形式实现，通常被检入源代码控制，使团队能够编辑，审查和迭代其传送流 程。 </p><p>持久：无论是计划内的还是计划外的服务器重启，Pipeline都是可恢复的。 </p><p>可停止：Pipeline可接收交互式输入，以确定是否继续执行Pipeline。 </p><p>多功能：Pipeline支持现实世界中复杂的持续交付要 求。它支持fork&#x2F;join、循环执行，并行执行任务的功能。 </p><p>可扩展：Pipeline插件支持其DSL的自定义扩展 ，以及与其他插件集成的多个选项。</p></li><li><p>如何创建 Jenkins Pipeline呢？</p><ul><li>Pipeline 脚本是由 <strong>Groovy</strong> 语言实现的，但是我们没必要单独去学习 Groovy </li><li>Pipeline 支持两种语法：<strong>Declarative</strong>(声明式)和 <strong>Scripted Pipeline</strong>(脚本式)语法</li><li>Pipeline 也有两种创建方法：可以直接在 Jenkins 的 Web UI 界面中输入脚本；也可以通过创建一个 Jenkinsﬁle 脚本文件放入项目源码库中（一般我们都推荐在 Jenkins 中直接从源代码控制(SCM)中直接载入 Jenkinsﬁle Pipeline 这种方法）。</li></ul></li></ol><h4 id="3-4-2-安装Pipeline插件"><a href="#3-4-2-安装Pipeline插件" class="headerlink" title="3.4.2 安装Pipeline插件"></a>3.4.2 安装<strong>Pipeline</strong>插件</h4><p>Manage Jenkins-&gt;Manage Plugins-&gt;可选插件</p><img src="/2024/01/31/jenkins-cicd/image-20240202223411581.png" class="" title="image-20240202223411581">   <p>安装插件后，创建项目的时候多了“流水线”类型</p><img src="/2024/01/31/jenkins-cicd/image-20240202223431773.png" class="" title="image-20240202223431773"><h4 id="3-4-3-Pipeline语法快速入门"><a href="#3-4-3-Pipeline语法快速入门" class="headerlink" title="3.4.3 Pipeline语法快速入门"></a>3.4.3 Pipeline<strong>语法快速入门</strong></h4><p>1）Declarative声明式-Pipeline</p><p>创建项目</p> <img src="/2024/01/31/jenkins-cicd/image-20240202223634918.png" class="" title="image-20240202223634918"><p>流水线-&gt;选择HelloWorld模板</p><img src="/2024/01/31/jenkins-cicd/image-20240202223856378.png" class="" title="image-20240202223856378"><p> 生成内容如下：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">pipeline &#123;<br>agent any<br>stages &#123;<br>stage(&#x27;Hello&#x27;) &#123;<br>steps &#123;<br>echo &#x27;Hello World&#x27;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>stages：代表整个流水线的所有执行阶段。通常stages只有1个，里面包含多个stage</p><p>stage：代表流水线中的某个阶段，可能出现n个。一般分为拉取代码，编译构建，部署等阶段。</p><p>steps：代表一个阶段内需要执行的逻辑。steps里面是shell脚本，git拉取代码，ssh远程发布等任意内容。</p><p>编写一个简单声明式Pipeline：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript">pipeline &#123;<br>agent <span class="hljs-built_in">any</span><br>stages &#123;<br><span class="hljs-title function_">stage</span>(<span class="hljs-params"><span class="hljs-string">&#x27;拉取代码&#x27;</span></span>) &#123;<br>steps &#123;<br>echo <span class="hljs-string">&#x27;拉取代码&#x27;</span><br>&#125;<br>&#125;<br><span class="hljs-title function_">stage</span>(<span class="hljs-params"><span class="hljs-string">&#x27;编译构建&#x27;</span></span>) &#123;<br>steps &#123;<br>echo <span class="hljs-string">&#x27;编译构建&#x27;</span><br>&#125;<br>&#125;<br><span class="hljs-title function_">stage</span>(<span class="hljs-params"><span class="hljs-string">&#x27;项目部署&#x27;</span></span>) &#123;<br>steps &#123;<br>echo <span class="hljs-string">&#x27;项目部署&#x27;</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>点击构建，可以看到整个构建过程</p><img src="/2024/01/31/jenkins-cicd/image-20240202224222930.png" class="" title="image-20240202224222930"><ol start="2"><li><h4 id="Scripted-Pipeline脚本式-Pipeline"><a href="#Scripted-Pipeline脚本式-Pipeline" class="headerlink" title="Scripted Pipeline脚本式-Pipeline"></a>Scripted Pipeline<strong>脚本式</strong>-Pipeline</h4></li></ol><p>创建项目</p> <img src="/2024/01/31/jenkins-cicd/image-20240202224538659.png" class="" title="image-20240202224538659"><p>这次选择”Scripted Pipeline”</p> <img src="/2024/01/31/jenkins-cicd/image-20240202224550466.png" class="" title="image-20240202224550466"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">node &#123;<br>def mvnHome<br><span class="hljs-title function_">stage</span>(<span class="hljs-params"><span class="hljs-string">&#x27;Preparation&#x27;</span></span>) &#123; <span class="hljs-comment">// for display purposes</span><br>&#125;<br><span class="hljs-title function_">stage</span>(<span class="hljs-params"><span class="hljs-string">&#x27;Build&#x27;</span></span>) &#123;<br>&#125;<br><span class="hljs-title function_">stage</span>(<span class="hljs-params"><span class="hljs-string">&#x27;Results&#x27;</span></span>) &#123;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Node：节点，一个 Node 就是一个 Jenkins 节点，Master 或者 Agent，是执行 Step 的具体运行环境，后续讲到Jenkins的Master-Slave架构的时候用到。</li><li>Stage：阶段，一个 Pipeline 可以划分为若干个 Stage，每个 Stage 代表一组操作，比如：Build、Test、Deploy，Stage 是一个逻辑分组的概念。</li><li>Step：步骤，Step 是最基本的操作单元，可以是打印一句话，也可以是构建一个 Docker 镜像，由各类 Jenkins 插件提供，比如命令：sh ‘make’，就相当于我们平时 shell 终端中执行 make 命令一样。</li></ul><p>编写一个简单的脚本式Pipeline</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">node &#123;<br>def mvnHome<br><span class="hljs-title function_">stage</span>(<span class="hljs-params"><span class="hljs-string">&#x27;拉取代码&#x27;</span></span>) &#123; <span class="hljs-comment">// for display purposes</span><br>echo <span class="hljs-string">&#x27;拉取代码&#x27;</span><br>&#125;<br><span class="hljs-title function_">stage</span>(<span class="hljs-params"><span class="hljs-string">&#x27;编译构建&#x27;</span></span>) &#123;<br>echo <span class="hljs-string">&#x27;编译构建&#x27;</span><br>&#125;<br><span class="hljs-title function_">stage</span>(<span class="hljs-params"><span class="hljs-string">&#x27;项目部署&#x27;</span></span>) &#123;<br>echo <span class="hljs-string">&#x27;项目部署&#x27;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>构建结果和声明式一样！</p><h4 id="3-4-4-拉取代码"><a href="#3-4-4-拉取代码" class="headerlink" title="3.4.4 拉取代码"></a>3.4.4 拉取代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php">pipeline &#123;<br>agent any<br>stages &#123;<br><span class="hljs-title function_ invoke__">stage</span>(<span class="hljs-string">&#x27;拉取代码&#x27;</span>) &#123;<br>steps &#123;<br><span class="hljs-title function_ invoke__">checkout</span>([<span class="hljs-variable">$class</span>: <span class="hljs-string">&#x27;GitSCM&#x27;</span>, <span class="hljs-attr">branches</span>: [[<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;*/master&#x27;</span>]],<br><span class="hljs-attr">doGenerateSubmoduleConfigurations</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">extensions</span>: [], <span class="hljs-attr">submoduleCfg</span>: [],<br><span class="hljs-attr">userRemoteConfigs</span>: [[<span class="hljs-attr">credentialsId</span>: <span class="hljs-string">&#x27;68f2087f-a034-4d39-a9ff-1f776dd3dfa8&#x27;</span>, <span class="hljs-attr">url</span>:<br><span class="hljs-string">&#x27;git@192.168.66.100:itheima_group/web_demo.git&#x27;</span>]]])<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4-5-编译打包"><a href="#3-4-5-编译打包" class="headerlink" title="3.4.5 编译打包"></a>3.4.5 编译打包</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php">pipeline &#123;<br>agent any<br>stages &#123;<br><span class="hljs-title function_ invoke__">stage</span>(<span class="hljs-string">&#x27;拉取代码&#x27;</span>) &#123;<br>steps &#123;<br><span class="hljs-title function_ invoke__">checkout</span>([<span class="hljs-variable">$class</span>: <span class="hljs-string">&#x27;GitSCM&#x27;</span>, <span class="hljs-attr">branches</span>: [[<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;*/master&#x27;</span>]],<br><span class="hljs-attr">doGenerateSubmoduleConfigurations</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">extensions</span>: [], <span class="hljs-attr">submoduleCfg</span>: [],<br><span class="hljs-attr">userRemoteConfigs</span>: [[<span class="hljs-attr">credentialsId</span>: <span class="hljs-string">&#x27;68f2087f-a034-4d39-a9ff-1f776dd3dfa8&#x27;</span>, <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;git@192.168.66.100:itheima_group/web_demo.git&#x27;</span>]]])<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4-6-部署"><a href="#3-4-6-部署" class="headerlink" title="3.4.6 部署"></a>3.4.6 部署</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php">pipeline &#123;<br>agent any<br><br>stages &#123;<br><span class="hljs-title function_ invoke__">stage</span>(<span class="hljs-string">&#x27;拉取代码&#x27;</span>) &#123;<br>steps &#123;<br><span class="hljs-title function_ invoke__">checkout</span>([<span class="hljs-variable">$class</span>: <span class="hljs-string">&#x27;GitSCM&#x27;</span>, <span class="hljs-attr">branches</span>: [[<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;*/master&#x27;</span>]],<br><span class="hljs-attr">doGenerateSubmoduleConfigurations</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">extensions</span>: [], <span class="hljs-attr">submoduleCfg</span>: [],<br><span class="hljs-attr">userRemoteConfigs</span>: [[<span class="hljs-attr">credentialsId</span>: <span class="hljs-string">&#x27;68f2087f-a034-4d39-a9ff-1f776dd3dfa8&#x27;</span>, <span class="hljs-attr">url</span>:<br><span class="hljs-string">&#x27;git@192.168.66.100:itheima_group/web_demo.git&#x27;</span>]]])<br>&#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">stage</span>(<span class="hljs-string">&#x27;编译构建&#x27;</span>) &#123;<br>steps &#123;<br>sh label: <span class="hljs-string">&#x27;&#x27;</span>, script: <span class="hljs-string">&#x27;mvn clean package&#x27;</span><br>&#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">stage</span>(<span class="hljs-string">&#x27;项目部署&#x27;</span>) &#123;<br>steps &#123;<br>deploy adapters: [<span class="hljs-title function_ invoke__">tomcat8</span>(<span class="hljs-attr">credentialsId</span>: <span class="hljs-string">&#x27;afc43e5e-4a4e-4de6-984fb1d5a254e434&#x27;</span>,<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://192.168.66.102:8080&#x27;</span>)], contextPath: <span class="hljs-literal">null</span>,<br>war: <span class="hljs-string">&#x27;target/*.war&#x27;</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4-7-Pipeline-Script-from-SCM"><a href="#3-4-7-Pipeline-Script-from-SCM" class="headerlink" title="3.4.7 Pipeline Script from SCM"></a>3.4.7 Pipeline Script from SCM</h4><p>刚才我们都是直接在Jenkins的UI界面编写Pipeline代码，这样不方便脚本维护，建议把Pipeline脚本放在项目中（一起进行版本控制）</p><ol><li><p>在项目根目录建立Jenkinsﬁle文件，把内容复制到该文件中</p><img src="/2024/01/31/jenkins-cicd/image-20240202225326123.png" class="" title="image-20240202225326123"><p>把Jenkinsﬁle上传到Gitlab</p></li><li><p>在项目中引用该文件</p><img src="/2024/01/31/jenkins-cicd/image-20240202225529150.png" class="" title="image-20240202225529150"></li></ol><h3 id="3-5-1-常用的构建触发器"><a href="#3-5-1-常用的构建触发器" class="headerlink" title="3.5 (1)-常用的构建触发器"></a>3.5 (1)-常用的构建触发器</h3><ul><li>Jenkins内置4种构建触发器：触发远程构建</li><li>其他工程构建后触发（Build after other projects are build）</li><li>定时构建（Build periodically）</li><li>轮询SCM（Poll SCM）</li></ul><h4 id="3-5-1-触发远程构建"><a href="#3-5-1-触发远程构建" class="headerlink" title="3.5.1 触发远程构建"></a>3.5.1 触发远程构建</h4><img src="/2024/01/31/jenkins-cicd/image-20240202225809145.png" class="" title="image-20240202225809145"><p>触发构建url：<a href="http://192.168.66.101:8888/job/web_demo_pipeline/build?token=6666">http://192.168.66.101:8888/job/web_demo_pipeline/build?token=6666</a></p><h4 id="3-5-2-其他工程构建后触发"><a href="#3-5-2-其他工程构建后触发" class="headerlink" title="3.5.2 其他工程构建后触发"></a>3.5.2 其他工程构建后触发</h4><ol><li><p>创建pre_job流水线工程</p>  <img src="/2024/01/31/jenkins-cicd/image-20240202225842003.png" class="" title="image-20240202225842003"></li><li><p>配置需要触发的工程</p>   <img src="/2024/01/31/jenkins-cicd/image-20240202225911863.png" class="" title="image-20240202225911863"></li></ol><h4 id="3-5-3-定时构建"><a href="#3-5-3-定时构建" class="headerlink" title="3.5.3 定时构建"></a>3.5.3 定时构建</h4><img src="/2024/01/31/jenkins-cicd/image-20240202230003335.png" class="" title="image-20240202230003335"><p>定时字符串从左往右分别为： 分 时 日 月 周</p><p>一些定时表达式的例子：</p><blockquote><p>每30分钟构建一次：H代表形参 H&#x2F;30 * * * * 10:02 10:32</p><p>每2个小时构建一次: H H&#x2F;2 * * *</p><p>每天的8点，12点，22点，一天构建3次： (多个时间点中间用逗号隔开) 0 8,12,22 * * *</p><p>每天中午12点定时构建一次 H 12 * * *</p><p>每天下午18点定时构建一次 H 18 * * *</p><p>在每个小时的前半个小时内的每10分钟 H(0-29)&#x2F;10 * * * *</p><p>每两小时一次，每个工作日上午9点到下午5点(也许是上午10:38，下午12:38，下午2:38，下午</p><p>4:38) H H(9-16)&#x2F;2 * * 1-5</p></blockquote><h4 id="3-5-4-轮询SCM"><a href="#3-5-4-轮询SCM" class="headerlink" title="3.5.4 轮询SCM"></a>3.5.4 轮询<strong>SCM</strong></h4><p>轮询SCM，是指定时扫描本地代码仓库的代码是否有变更，如果代码有变更就触发项目构建。</p><img src="/2024/01/31/jenkins-cicd/image-20240202230058362.png" class="" title="image-20240202230058362"><p>注意：这次构建触发器，Jenkins会定时扫描本地整个项目的代码，增大系统的开销，不建议使用。</p><h3 id="3-6-2-Git-hook自动触发构建"><a href="#3-6-2-Git-hook自动触发构建" class="headerlink" title="3.6 (2)-Git hook自动触发构建(*)"></a>3.6 (2)-Git hook<strong>自动触发构建</strong>(*)</h3><p>刚才我们看到在Jenkins的内置构建触发器中，轮询SCM可以实现Gitlab代码更新，项目自动构建，但是该方案的性能不佳。那有没有更好的方案呢？ 有的。就是利用Gitlab的webhook实现代码push到仓库，立即触发项目自动构建。 </p><img src="/2024/01/31/jenkins-cicd/image-20240202230143844.png" class="" title="image-20240202230143844"><h4 id="3-6-1-安装Gitlab-Hook插件"><a href="#3-6-1-安装Gitlab-Hook插件" class="headerlink" title="3.6.1 安装Gitlab Hook插件"></a>3.6.1 安装<strong>Gitlab Hook</strong>插件</h4><p>需要安装两个插件： Gitlab Hook和GitLab</p><img src="/2024/01/31/jenkins-cicd/image-20240202230233541.png" class="" title="image-20240202230233541"><img src="/2024/01/31/jenkins-cicd/image-20240202230241155.png" class="" title="image-20240202230241155"><h4 id="3-6-2-Jenkins设置自动构建"><a href="#3-6-2-Jenkins设置自动构建" class="headerlink" title="3.6.2 Jenkins设置自动构建"></a>3.6.2 Jenkins<strong>设置自动构建</strong></h4><img src="/2024/01/31/jenkins-cicd/image-20240202230319132.png" class="" title="image-20240202230319132"><p>等会需要把生成的webhook URL配置到Gitlab中。</p><h4 id="3-6-3-Gitlab配置webhook"><a href="#3-6-3-Gitlab配置webhook" class="headerlink" title="3.6.3 Gitlab配置webhook"></a>3.6.3 Gitlab<strong>配置</strong>webhook</h4><p>1）开启webhook功能</p><p>使用root账户登录到后台，点击Admin Area -&gt; Settings -&gt; Network</p><p>勾选”Allow requests to the local network from web hooks and services”</p><img src="/2024/01/31/jenkins-cicd/image-20240202230339441.png" class="" title="image-20240202230339441"><p>2）在项目添加webhook</p><p>点击项目-&gt;Settings-&gt;Integrations</p><img src="/2024/01/31/jenkins-cicd/image-20240202230356412.png" class="" title="image-20240202230356412"><p>注意：以下设置必须完成，否则会报错！</p><p>Manage Jenkins-&gt;Conﬁgure System</p><img src="/2024/01/31/jenkins-cicd/image-20240202230407677.png" class="" title="image-20240202230407677"><h3 id="3-7-3-Jenkins-的参数化构建"><a href="#3-7-3-Jenkins-的参数化构建" class="headerlink" title="3.7 (3)-Jenkins 的参数化构建"></a>3.7 (3)-Jenkins 的参数化构建</h3><p>有时在项目构建的过程中，我们需要根据用户的输入动态传入一些参数，从而影响整个构建结果，这时我们可以使用参数化构建。</p><p>Jenkins支持非常丰富的参数类型</p> <img src="/2024/01/31/jenkins-cicd/image-20240204192719513.png" class="" title="image-20240204192719513"><p>接下来演示通过输入gitlab项目的分支名称来部署不同分支项目。</p><h4 id="3-7-1-项目创建分支，并推送到Gitlab上"><a href="#3-7-1-项目创建分支，并推送到Gitlab上" class="headerlink" title="3.7.1 项目创建分支，并推送到Gitlab上"></a>3.7.1 项目创建分支，并推送到Gitlab上</h4> <img src="/2024/01/31/jenkins-cicd/image-20240204192830108.png" class="" title="image-20240204192830108"><p>新建分支：v1，代码稍微改动下，然后提交到gitlab上。这时看到gitlab上有一个两个分支：master和v1</p> <img src="/2024/01/31/jenkins-cicd/image-20240204192844180.png" class="" title="image-20240204192844180"><p>在<strong>Jenkins</strong>添加字符串类型参数</p> <img src="/2024/01/31/jenkins-cicd/image-20240204192858397.png" class="" title="image-20240204192858397"> <img src="/2024/01/31/jenkins-cicd/image-20240204192927199.png" class="" title="image-20240204192927199"><h4 id="3-7-2-改动pipeline流水线代码"><a href="#3-7-2-改动pipeline流水线代码" class="headerlink" title="3.7.2 改动pipeline流水线代码"></a>3.7.2 改动<strong>pipeline</strong>流水线代码</h4><img src="/2024/01/31/jenkins-cicd/image-20240204193005183.png" class="" title="image-20240204193005183"><h4 id="3-7-3-点击Build-with-Parameters"><a href="#3-7-3-点击Build-with-Parameters" class="headerlink" title="3.7.3 点击Build with Parameters"></a>3.7.3 点击<strong>Build with Parameters</strong></h4><img src="/2024/01/31/jenkins-cicd/image-20240204193029493.png" class="" title="image-20240204193029493"><p>输入分支名称，构建即可！构建完成后访问Tomcat查看结果</p><h3 id="3-8-4-配置邮箱服务器发送构建结果"><a href="#3-8-4-配置邮箱服务器发送构建结果" class="headerlink" title="3.8 (4)-配置邮箱服务器发送构建结果"></a>3.8 (4)-配置邮箱服务器发送构建结果</h3><h4 id="3-8-1-安装-Email-Extension-插件"><a href="#3-8-1-安装-Email-Extension-插件" class="headerlink" title="3.8.1 安装 Email Extension 插件"></a>3.8.1 安装 Email Extension 插件</h4><img src="/2024/01/31/jenkins-cicd/image-20240204193122057.png" class="" title="image-20240204193122057"><h4 id="3-8-2-Jenkins设置邮箱相关参数"><a href="#3-8-2-Jenkins设置邮箱相关参数" class="headerlink" title="3.8.2 Jenkins设置邮箱相关参数"></a>3.8.2 Jenkins<strong>设置邮箱相关参数</strong></h4><p>Manage Jenkins-&gt;Conﬁgure System</p><img src="/2024/01/31/jenkins-cicd/image-20240204193210753.png" class="" title="image-20240204193210753"><p>设置邮件参数</p><img src="/2024/01/31/jenkins-cicd/image-20240204193218713.png" class="" title="image-20240204193218713"><p>设置Jenkins默认邮箱信息</p><img src="/2024/01/31/jenkins-cicd/image-20240204193241737.png" class="" title="image-20240204193241737"><h4 id="3-8-3-准备邮件内容"><a href="#3-8-3-准备邮件内容" class="headerlink" title="3.8.3 准备邮件内容"></a>3.8.3 准备邮件内容</h4><p>在项目根目录编写email.html，并把文件推送到Gitlab，内容如下：</p> <img src="/2024/01/31/jenkins-cicd/image-20240204193310704.png" class="" title="image-20240204193310704"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>$&#123;ENV, var=&quot;JOB_NAME&quot;&#125;-第$&#123;BUILD_NUMBER&#125;次构建日志<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">leftmargin</span>=<span class="hljs-string">&quot;8&quot;</span> <span class="hljs-attr">marginwidth</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">topmargin</span>=<span class="hljs-string">&quot;8&quot;</span> <span class="hljs-attr">marginheight</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">offset</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;95%&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sansserif&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>(本邮件是程序自动下发的，请勿回复！)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#0000FF&quot;</span>&gt;</span>构建结果 - $&#123;BUILD_STATUS&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#0B610B&quot;</span>&gt;</span>构建信息<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>项目名称<span class="hljs-symbol">&amp;nbsp;</span>：<span class="hljs-symbol">&amp;nbsp;</span>$&#123;PROJECT_NAME&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>构建编号<span class="hljs-symbol">&amp;nbsp;</span>：<span class="hljs-symbol">&amp;nbsp;</span>第$&#123;BUILD_NUMBER&#125;次构建<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>触发原因：<span class="hljs-symbol">&amp;nbsp;</span>$&#123;CAUSE&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>构建日志：<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$&#123;BUILD_URL&#125;console&quot;</span>&gt;</span>$&#123;BUILD_URL&#125;console<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>构建<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>Url<span class="hljs-symbol">&amp;nbsp;</span>：<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$&#123;BUILD_URL&#125;&quot;</span>&gt;</span>$&#123;BUILD_URL&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>工作目录<span class="hljs-symbol">&amp;nbsp;</span>：<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$&#123;PROJECT_URL&#125;ws&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;ws<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>项目<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>Url<span class="hljs-symbol">&amp;nbsp;</span>：<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$&#123;PROJECT_URL&#125;&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#0B610B&quot;</span>&gt;</span>Changes Since Last Successful Build:<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>历史变更记录 : <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$&#123;PROJECT_URL&#125;changes&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;changes<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span> $&#123;CHANGES_SINCE_LAST_SUCCESS,reverse=true, format=&quot;Changes for<br>                Build #%n:<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>%c<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>&quot;,showPaths=true,changesFormat=&quot;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>[%a]<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>%m<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span>&quot;,pathFormat=&quot;<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>%p&quot;&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Failed Test Results<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">pre</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica,sans-serif&quot;</span>&gt;</span>$FAILED_TESTS<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#0B610B&quot;</span>&gt;</span>构建日志 (最后 100行):<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;80&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">readonly</span>=<span class="hljs-string">&quot;readonly&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-family: Courier New&quot;</span>&gt;</span>$&#123;BUILD_LOG,maxLines=100&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-8-4-编写Jenkinsﬁle添加构建后发送邮件"><a href="#3-8-4-编写Jenkinsﬁle添加构建后发送邮件" class="headerlink" title="3.8.4 编写Jenkinsﬁle添加构建后发送邮件"></a>3.8.4 编写<strong>Jenkinsﬁle</strong>添加构建后发送邮件</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php">pipeline &#123;<br>agent any<br><br>stages &#123;<br><span class="hljs-title function_ invoke__">stage</span>(<span class="hljs-string">&#x27;拉取代码&#x27;</span>) &#123;<br>steps &#123;<br><span class="hljs-title function_ invoke__">checkout</span>([<span class="hljs-variable">$class</span>: <span class="hljs-string">&#x27;GitSCM&#x27;</span>, <span class="hljs-attr">branches</span>: [[<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;*/master&#x27;</span>]],<br><span class="hljs-attr">doGenerateSubmoduleConfigurations</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">extensions</span>: [], <span class="hljs-attr">submoduleCfg</span>: [],<br><span class="hljs-attr">userRemoteConfigs</span>: [[<span class="hljs-attr">credentialsId</span>: <span class="hljs-string">&#x27;68f2087f-a034-4d39-a9ff-1f776dd3dfa8&#x27;</span>, <br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;git@192.168.66.100:itheima_group/web_demo.git&#x27;</span>]]])<br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">stage</span>(<span class="hljs-string">&#x27;编译构建&#x27;</span>) &#123;<br>steps &#123;<br>sh label: <span class="hljs-string">&#x27;&#x27;</span>, script: <span class="hljs-string">&#x27;mvn clean package&#x27;</span><br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">stage</span>(<span class="hljs-string">&#x27;项目部署&#x27;</span>) &#123;<br>steps &#123;<br>deploy adapters: [<span class="hljs-title function_ invoke__">tomcat8</span>(<span class="hljs-attr">credentialsId</span>: <span class="hljs-string">&#x27;afc43e5e-4a4e-4de6-984fb1d5a254e434&#x27;</span>,<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://192.168.66.102:8080&#x27;</span>)], contextPath: <span class="hljs-literal">null</span>,<br>war: <span class="hljs-string">&#x27;target/*.war&#x27;</span><br>&#125;<br>&#125;<br>&#125;<br><br>post &#123;<br>always &#123;<br><span class="hljs-title function_ invoke__">emailext</span>(<br><span class="hljs-attr">subject</span>: <span class="hljs-string">&#x27;构建通知：$&#123;PROJECT_NAME&#125; - Build # $&#123;BUILD_NUMBER&#125; -</span><br><span class="hljs-string">$&#123;BUILD_STATUS&#125;!&#x27;</span>,<br><span class="hljs-attr">body</span>: <span class="hljs-string">&#x27;$&#123;FILE,path=&quot;email.html&quot;&#125;&#x27;</span>,<br><span class="hljs-attr">to</span>: <span class="hljs-string">&#x27;xxx@qq.com&#x27;</span><br>)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-8-5-测试"><a href="#3-8-5-测试" class="headerlink" title="3.8.5 测试"></a>3.8.5 测试</h4><img src="/2024/01/31/jenkins-cicd/image-20240204194157779.png" class="" title="image-20240204194157779"><p>PS：邮件相关全局参数参考列表：</p><p>系统设置-&gt;Extended E-mail Notiﬁcation-&gt;Content Token Reference，点击旁边的?号</p><img src="/2024/01/31/jenkins-cicd/image-20240204194209578.png" class="" title="image-20240204194209578"><h3 id="3-9-Jenkins-SonarQube代码审查-1-安装SonarQube"><a href="#3-9-Jenkins-SonarQube代码审查-1-安装SonarQube" class="headerlink" title="3.9 Jenkins+SonarQube代码审查(1) - 安装SonarQube"></a>3.9 Jenkins+SonarQube<strong>代码审查</strong>(1) - <strong>安装</strong>SonarQube</h3><h4 id="3-9-1-SonaQube-简介"><a href="#3-9-1-SonaQube-简介" class="headerlink" title="3.9.1  SonaQube 简介"></a>3.9.1  SonaQube 简介</h4> <img src="/2024/01/31/jenkins-cicd/image-20240204194301881.png" class="" title="image-20240204194301881"><p>SonarQube是一个用于管理代码质量的开放平台，可以快速的定位代码中潜在的或者明显的错误。目前支持java,C#,C&#x2F;C++,Python,PL&#x2F;SQL,Cobol,JavaScrip,Groovy等二十几种编程语言的代码质量管理与检测。</p><blockquote><p>官网：<a href="https://www.sonarqube.org/">https://www.sonarqube.org/</a></p></blockquote><h4 id="3-9-2-环境要求"><a href="#3-9-2-环境要求" class="headerlink" title="3.9.2 环境要求"></a>3.9.2 环境要求</h4><table><thead><tr><th>软件</th><th>服务器</th><th>版本</th></tr></thead><tbody><tr><td>JDK</td><td>192.168.66.101</td><td>1.8</td></tr><tr><td>MySQL</td><td>192.168.66.101</td><td>5.7</td></tr><tr><td>SonarQube</td><td>192.168.66.101</td><td>6.7.4</td></tr></tbody></table><h4 id="3-9-3-安装SonarQube"><a href="#3-9-3-安装SonarQube" class="headerlink" title="3.9.3 安装SonarQube"></a>3.9.3 安装SonarQube</h4><p>1）安装MySQL（已完成） </p><p>2）安装SonarQube</p><p>在MySQL创建sonar数据库</p> <img src="/2024/01/31/jenkins-cicd/image-20240204194500759.png" class="" title="image-20240204194500759"><p>下载sonar压缩包： <a href="https://www.sonarqube.org/downloads/">https://www.sonarqube.org/downloads/</a></p><p>解压sonar，并设置权限</p><blockquote><p>yum install unzip</p><p>unzip sonarqube-6.7.4.zip 解压</p><p>mkdir &#x2F;opt&#x2F;sonar 创建目录</p><p>mv sonarqube-6.7.4&#x2F;* &#x2F;opt&#x2F;sonar 移动文件</p><p>useradd sonar 创建sonar用户，必须sonar用于启动，否则报错</p><p>chown -R sonar. &#x2F;opt&#x2F;sonar 更改sonar目录及文件权限</p></blockquote><p>修改sonar配置文件</p><blockquote><p>vi &#x2F;opt&#x2F;sonarqube-6.7.4&#x2F;conf&#x2F;sonar.properties</p><p>内容如下：</p><p>sonar.jdbc.username&#x3D;root sonar.jdbc.password&#x3D;Root@123</p><p>sonar.jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;sonar? useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;rewriteBatchedStatements&#x3D;true&amp;useConﬁgs&#x3D; maxPerformance&amp;useSSL&#x3D;false</p></blockquote><p>注意：sonar默认监听9000端口，如果9000端口被占用，需要更改。</p><p>启动sonar</p><blockquote><p>cd &#x2F;opt&#x2F;sonarqube-6.7.4</p><p>su sonar .&#x2F;bin&#x2F;linux-x86-64&#x2F;sonar.sh start 启动</p><p>su sonar .&#x2F;bin&#x2F;linux-x86-64&#x2F;sonar.sh status 查看状态</p><p>su sonar .&#x2F;bin&#x2F;linux-x86-64&#x2F;sonar.sh stop 停止</p><p>tail -f logs&#x2F;sonar.logs 查看日志</p></blockquote><p>访问sonar <a href="http://192.168.66.101:9000/">http://192.168.66.101:9000</a></p><img src="/2024/01/31/jenkins-cicd/image-20240204194657151.png" class="" title="image-20240204194657151"><p>默认账户：admin&#x2F;admin</p><p>创建token</p><img src="/2024/01/31/jenkins-cicd/image-20240204194743017.png" class="" title="image-20240204194743017"><blockquote><p>bb8b6c53d9d921e101343cef0395243e6c1dc8a3</p></blockquote><p>token要记下来后面要使用 <strong>0151ae8c548a143eda9253e4334ad030b56047ee</strong></p><h3 id="3-10-Jenkins-SonarQube代码审查-2-实现代码审查"><a href="#3-10-Jenkins-SonarQube代码审查-2-实现代码审查" class="headerlink" title="3.10 Jenkins+SonarQube代码审查(2) - 实现代码审查"></a>3.10 Jenkins+SonarQube<strong>代码审查</strong>(2) - 实现代码审查</h3><img src="/2024/01/31/jenkins-cicd/image-20240204194849234.png" class="" title="image-20240204194849234"><h4 id="3-10-1-安装SonarQube-Scanner插件"><a href="#3-10-1-安装SonarQube-Scanner插件" class="headerlink" title="3.10.1 安装SonarQube Scanner插件"></a>3.10.1 安装<strong>SonarQube Scanner</strong>插件</h4><img src="/2024/01/31/jenkins-cicd/image-20240204194907552.png" class="" title="image-20240204194907552"><h4 id="3-10-2-添加SonarQube凭证"><a href="#3-10-2-添加SonarQube凭证" class="headerlink" title="3.10.2 添加SonarQube凭证"></a>3.10.2 添加<strong>SonarQube</strong>凭证</h4><img src="/2024/01/31/jenkins-cicd/image-20240204194950234.png" class="" title="image-20240204194950234"><img src="/2024/01/31/jenkins-cicd/image-20240204194955589.png" class="" title="image-20240204194955589"><h4 id="3-10-3-Jenkins进行SonarQube配置"><a href="#3-10-3-Jenkins进行SonarQube配置" class="headerlink" title="3.10.3 Jenkins进行SonarQube配置"></a>3.10.3 Jenkins<strong>进行</strong>SonarQube<strong>配置</strong></h4><p>Manage Jenkins-&gt;Conﬁgure System-&gt;SonarQube servers</p><img src="/2024/01/31/jenkins-cicd/image-20240204195017507.png" class="" title="image-20240204195017507"><p>Manage Jenkins-&gt;Global Tool Conﬁguration</p><img src="/2024/01/31/jenkins-cicd/image-20240204195027308.png" class="" title="image-20240204195027308"><h4 id="3-10-4-SonaQube关闭审查结果上传到SCM功能"><a href="#3-10-4-SonaQube关闭审查结果上传到SCM功能" class="headerlink" title="3.10.4 SonaQube关闭审查结果上传到SCM功能"></a>3.10.4 SonaQube<strong>关闭审查结果上传到</strong>SCM<strong>功能</strong></h4><img src="/2024/01/31/jenkins-cicd/image-20240204195047325.png" class="" title="image-20240204195047325"><h4 id="3-10-5-在项目添加SonaQube代码审查（非流水线项目）"><a href="#3-10-5-在项目添加SonaQube代码审查（非流水线项目）" class="headerlink" title="3.10.5 在项目添加SonaQube代码审查（非流水线项目）"></a>3.10.5 在项目添加<strong>SonaQube</strong>代码审查（非流水线项目）</h4><p>添加构建步骤：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># must be unique in a given SonarQube instance</span><br><span class="hljs-attr">sonar.projectKey</span>=<span class="hljs-string">web_demo</span><br><span class="hljs-comment"># this is the name and version displayed in the SonarQube UI. Was mandatory</span><br><span class="hljs-attr">prior</span> <span class="hljs-string">to SonarQube 6.1.</span><br><span class="hljs-attr">sonar.projectName</span>=<span class="hljs-string">web_demo</span><br><span class="hljs-attr">sonar.projectVersion</span>=<span class="hljs-string">1.0</span><br><span class="hljs-comment"># Path is relative to the sonar-project.properties file. Replace &quot;\&quot; by &quot;/&quot; on</span><br><span class="hljs-attr">Windows.</span><br><span class="hljs-comment"># This property is optional if sonar.modules is set.</span><br><span class="hljs-attr">sonar.sources</span>=<span class="hljs-string">.</span><br><span class="hljs-attr">sonar.exclusions</span>=<span class="hljs-string">**/test/**,**/target/**</span><br><span class="hljs-attr">sonar.java.source</span>=<span class="hljs-string">1.8</span><br><span class="hljs-attr">sonar.java.target</span>=<span class="hljs-string">1.8</span><br><span class="hljs-comment"># Encoding of the source code. Default is default system encoding</span><br><span class="hljs-attr">sonar.sourceEncoding</span>=<span class="hljs-string">UTF-8</span><br></code></pre></td></tr></table></figure><h4 id="3-10-6-在项目添加SonaQube代码审查（流水线项目）"><a href="#3-10-6-在项目添加SonaQube代码审查（流水线项目）" class="headerlink" title="3.10.6 在项目添加SonaQube代码审查（流水线项目）"></a>3.10.6 在项目添加<strong>SonaQube</strong>代码审查（流水线项目）</h4><ol><li><p>项目根目录下，创建sonar-project.properties文件</p> <img src="/2024/01/31/jenkins-cicd/image-20240204195222202.png" class="" title="image-20240204195222202"> <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># must be unique in a given SonarQube instance</span><br><span class="hljs-attr">sonar.projectKey</span>=<span class="hljs-string">web_demo</span><br><span class="hljs-comment"># this is the name and version displayed in the SonarQube UI. Was mandatory</span><br><span class="hljs-attr">prior</span> <span class="hljs-string">to SonarQube 6.1.</span><br><span class="hljs-attr">sonar.projectName</span>=<span class="hljs-string">web_demo</span><br><span class="hljs-attr">sonar.projectVersion</span>=<span class="hljs-string">1.0</span><br><span class="hljs-comment"># Path is relative to the sonar-project.properties file. Replace &quot;\&quot; by &quot;/&quot; on</span><br><span class="hljs-attr">Windows.</span><br><span class="hljs-comment"># This property is optional if sonar.modules is set.</span><br><span class="hljs-attr">sonar.sources</span>=<span class="hljs-string">.</span><br><span class="hljs-attr">sonar.exclusions</span>=<span class="hljs-string">**/test/**,**/target/**</span><br><span class="hljs-attr">sonar.java.source</span>=<span class="hljs-string">1.8</span><br><span class="hljs-attr">sonar.java.target</span>=<span class="hljs-string">1.8</span><br><span class="hljs-comment"># Encoding of the source code. Default is default system encoding</span><br><span class="hljs-attr">sonar.sourceEncoding</span>=<span class="hljs-string">UTF-8</span><br></code></pre></td></tr></table></figure></li><li><p>修改Jenkinsﬁle，加入SonarQube代码审查阶段</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php">pipeline &#123;<br>agent any<br><br>stages &#123;<br><span class="hljs-title function_ invoke__">stage</span>(<span class="hljs-string">&#x27;拉取代码&#x27;</span>) &#123;<br>steps &#123;<br><span class="hljs-title function_ invoke__">checkout</span>([<span class="hljs-variable">$class</span>: <span class="hljs-string">&#x27;GitSCM&#x27;</span>, <span class="hljs-attr">branches</span>: [[<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;*/master&#x27;</span>]],<br><span class="hljs-attr">doGenerateSubmoduleConfigurations</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">extensions</span>: [], <span class="hljs-attr">submoduleCfg</span>: [],<br><span class="hljs-attr">userRemoteConfigs</span>: [[<span class="hljs-attr">credentialsId</span>: <span class="hljs-string">&#x27;68f2087f-a034-4d39-a9ff-1f776dd3dfa8&#x27;</span>, <br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;git@192.168.66.100:itheima_group/web_demo.git&#x27;</span>]]])<br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">stage</span>(<span class="hljs-string">&#x27;编译构建&#x27;</span>) &#123;<br>steps &#123;<br>sh label: <span class="hljs-string">&#x27;&#x27;</span>, script: <span class="hljs-string">&#x27;mvn clean package&#x27;</span><br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">stage</span>(<span class="hljs-string">&#x27;SonarQube代码审查&#x27;</span>) &#123;<br>steps&#123;<br>script &#123;<br>scannerHome = tool <span class="hljs-string">&#x27;sonarqube-scanner&#x27;</span><br>&#125;<br><span class="hljs-title function_ invoke__">withSonarQubeEnv</span>(<span class="hljs-string">&#x27;sonarqube6.7.4&#x27;</span>) &#123;<br>sh <span class="hljs-string">&quot;$&#123;scannerHome&#125;/bin/sonar-scanner&quot;</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">stage</span>(<span class="hljs-string">&#x27;项目部署&#x27;</span>) &#123;<br>steps &#123;<br>deploy adapters: [<span class="hljs-title function_ invoke__">tomcat8</span>(<span class="hljs-attr">credentialsId</span>: <span class="hljs-string">&#x27;afc43e5e-4a4e-4de6-984fb1d5a254e434&#x27;</span>,<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://192.168.66.102:8080&#x27;</span>)], contextPath: <span class="hljs-literal">null</span>,<br>war: <span class="hljs-string">&#x27;target/*.war&#x27;</span><br>&#125;<br>&#125;<br>&#125;<br><br>post &#123;<br>always &#123;<br><span class="hljs-title function_ invoke__">emailext</span>(<br><span class="hljs-attr">subject</span>: <span class="hljs-string">&#x27;构建通知：$&#123;PROJECT_NAME&#125; - Build # $&#123;BUILD_NUMBER&#125; -</span><br><span class="hljs-string">$&#123;BUILD_STATUS&#125;!&#x27;</span>,<br><span class="hljs-attr">body</span>: <span class="hljs-string">&#x27;$&#123;FILE,path=&quot;email.html&quot;&#125;&#x27;</span>,<br><span class="hljs-attr">to</span>: <span class="hljs-string">&#x27;1014671449@qq.com&#x27;</span><br>)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>到SonarQube的UI界面查看审查结果</p> <img src="/2024/01/31/jenkins-cicd/image-20240204195547456.png" class="" title="image-20240204195547456"></li></ol><h2 id="4、Jenkins-Docker-SpringCloud微服务持续集成-上"><a href="#4、Jenkins-Docker-SpringCloud微服务持续集成-上" class="headerlink" title="4、Jenkins+Docker+SpringCloud微服务持续集成(上)"></a>4<strong>、</strong>Jenkins+Docker+SpringCloud<strong>微服务持续集成</strong>(<strong>上</strong>)</h2><h3 id="4-1-Jenkins-Docker-SpringCloud持续集成流程说明"><a href="#4-1-Jenkins-Docker-SpringCloud持续集成流程说明" class="headerlink" title="4.1 Jenkins+Docker+SpringCloud持续集成流程说明"></a>4.1 Jenkins+Docker+SpringCloud<strong>持续集成流程说明</strong></h3><img src="/2024/01/31/jenkins-cicd/image-20240204195630672.png" class="" title="image-20240204195630672"><p>大致流程说明：</p><ol><li>开发人员每天把代码提交到Gitlab代码仓库</li><li>Jenkins从Gitlab中拉取项目源码，编译并打成jar包，然后构建成Docker镜像，将镜像上传到 Harbor私有仓库。</li><li>Jenkins发送SSH远程命令，让生产部署服务器到Harbor私有仓库拉取镜像到本地，然后创建容器。</li><li>最后，用户可以访问到容器</li></ol><p><strong>服务列表</strong>(红色的软件为需要安装的软件，黑色代表已经安装)</p><table><thead><tr><th>服务器名称</th><th>IP<strong>地址</strong></th><th>安装的软件</th></tr></thead><tbody><tr><td>代码托管服务器</td><td>192.168.66.100</td><td>Gitlab</td></tr><tr><td>持续集成服务器</td><td>192.168.66.101</td><td>Jenkins，Maven，Docker18.06.1-ce</td></tr><tr><td>Docker仓库服务器</td><td>192.168.66.102</td><td>Docker18.06.1-ce，Harbor1.9.2</td></tr><tr><td>生产部署服务器</td><td>192.168.66.103</td><td>Docker18.06.1-ce</td></tr></tbody></table><h3 id="4-2-SpringCloud微服务源码概述"><a href="#4-2-SpringCloud微服务源码概述" class="headerlink" title="4.2 SpringCloud微服务源码概述"></a>4.2 SpringCloud<strong>微服务源码概述</strong></h3><p>项目架构：前后端分离</p><p>后端技术栈：SpringBoot+SpringCloud+SpringDataJpa（Spring全家桶）微服务项目结构：</p> <img src="/2024/01/31/jenkins-cicd/image-20240204195957962.png" class="" title="image-20240204195957962"><ul><li>tensquare_parent：父工程，存放基础配置 </li><li>tensquare_common：通用工程，存放工具类 </li><li>tensquare_eureka_server：SpringCloud的Eureka注册中心 </li><li>tensquare_zuul：SpringCloud的网关服务 </li><li>tensquare_admin_service：基础权限认证中心，负责用户认证（使用JWT认证） </li><li>tensquare_gathering：一个简单的业务模块，活动微服务相关逻辑</li></ul><p>数据库结构：</p> <img src="/2024/01/31/jenkins-cicd/image-20240204200032959.png" class="" title="image-20240204200032959"><ul><li>tensquare_user：用户认证数据库，存放用户账户数据。对应tensquare_admin_service微服务 </li><li>tensquare_gathering：活动微服务数据库。对应tensquare_gathering微服务</li></ul><p>微服务配置分析：</p><ul><li>tensquare_eureka </li><li>tensquare_zuul </li><li>tensquare_admin_service </li><li>tensquare_gathering</li></ul><h3 id="4-3-本地部署-1-SpringCloud-微服务部署"><a href="#4-3-本地部署-1-SpringCloud-微服务部署" class="headerlink" title="4.3 本地部署**(1)-SpringCloud**微服务部署"></a>4.3 本地部署**(1)-SpringCloud**微服务部署</h3><h4 id="4-3-1-本地运行微服务"><a href="#4-3-1-本地运行微服务" class="headerlink" title="4.3.1 本地运行微服务"></a>4.3.1 本地运行微服务</h4><p>1）逐一启动微服务 </p><p>2）使用postman测试功能是否可用</p><h4 id="4-3-2-本地部署微服务"><a href="#4-3-2-本地部署微服务" class="headerlink" title="4.3.2 本地部署微服务"></a>4.3.2 本地部署微服务</h4><p> 1）SpringBoot微服务项目打包</p><p>必须导入该插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打包后在target下产生jar包 </p><p>2）本地运行微服务的jar包  </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>xxx.<span class="hljs-keyword">jar </span><br></code></pre></td></tr></table></figure><p>3）查看效果</p><h4 id="4-3-4-本地部署-2-前端静态web网站"><a href="#4-3-4-本地部署-2-前端静态web网站" class="headerlink" title="4.3.4 本地部署(2)-前端静态web网站"></a>4.3.4 本地部署(2)-前端静态web网站</h4><p>前端技术栈：NodeJS+VueJS+ElementUI</p><p>使用Visual Studio Code打开源码 </p><p>1）本地运行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> dev <br></code></pre></td></tr></table></figure><p>2）打包静态web网站  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> build<br></code></pre></td></tr></table></figure><p>打包后，产生dist目录的静态文件</p><p>3）部署到nginx服务器</p><p>把dist目录的静态文件拷贝到nginx的html目录，启动nginx </p><p>4）启动nginx，并访问</p><p><a href="http://localhost:82/">http://localhost:82</a></p><h4 id="4-3-4-环境准备-1-Docker-快速入门"><a href="#4-3-4-环境准备-1-Docker-快速入门" class="headerlink" title="4.3.4 环境准备**(1)-Docker**快速入门"></a>4.3.4 环境准备**(1)-Docker**快速入门</h4><h5 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h5> <img src="/2024/01/31/jenkins-cicd/image-20240204200627434.png" class="" title="image-20240204200627434"><p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。</p><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><p>Docker容器技术 vs 传统虚拟机技术</p><img src="/2024/01/31/jenkins-cicd/image-20240204200644816.png" class="" title="image-20240204200644816"><table><thead><tr><th></th><th>虚拟机</th><th>容器</th></tr></thead><tbody><tr><td>占用磁盘空间</td><td>非常大，GB级</td><td>小，MB甚至KB级</td></tr><tr><td>启动速度</td><td>慢，分钟级</td><td>快，秒级</td></tr><tr><td>运行形态</td><td>运行于Hypervisor上</td><td>直接运行在宿主机内核上</td></tr><tr><td>并发性</td><td>一台宿主机上十几个，最多几十个</td><td>上百个，甚至数百上千个</td></tr><tr><td>性能</td><td>逊于宿主机</td><td>接近宿主机本地进程</td></tr><tr><td>资源利用率</td><td>低</td><td>高</td></tr></tbody></table><p>简单一句话总结：<strong>Docker技术就是让我们更加高效轻松地将任何应用在</strong>Linux<strong>服务器部署和使用</strong>。</p><h4 id="Docker安装-1）卸载旧版本"><a href="#Docker安装-1）卸载旧版本" class="headerlink" title="Docker安装 1）卸载旧版本"></a>Docker<strong>安装</strong> 1）卸载旧版本</h4><p> 272.png)</p><p>yum list installed | grep docker 列出当前所有docker的包</p><p>yum -y remove docker的包名称 卸载docker包</p><p> 273.png) rm -rf &#x2F;var&#x2F;lib&#x2F;docker 删除docker的所有镜像和容器</p><p>2）安装必要的软件包</p><p> 274.png)</p><p> 275.png) sudo yum install -y yum-utils \ device-mapper-persistent-data \ lvm2 3）设置下载的镜像仓库</p><p><a href="https://download.docker.com/linux/centos/docker-ce.repo">sudo yum-conﬁg-manager \ –add-repo \ </a><a href="https://download.docker.com/linux/centos/docker-ce.repo">https://download.docker.com/linux/centos/docker-</a><a href="https://download.docker.com/linux/centos/docker-ce.repo"> </a><a href="https://download.docker.com/linux/centos/docker-ce.repo">ce.repo</a></p><ol><li><p>列出需要安装的版本列表</p><p> 276.png)</p><p> 277.png) yum list docker-ce –showduplicates | sort -r</p><table><thead><tr><th>docker-ce.x86_64</th><th>3:18.09.1-3.el7</th><th>docker-ce-stable</th></tr></thead><tbody><tr><td>docker-ce.x86_64</td><td>3:18.09.0-3.el7</td><td>docker-ce-stable</td></tr><tr><td>docker-ce.x86_64</td><td>18.06.1.ce-3.el7</td><td>docker-ce-stable</td></tr><tr><td>docker-ce.x86_64</td><td>18.06.0.ce-3.el7</td><td>docker-ce-stable</td></tr><tr><td>……</td><td></td><td></td></tr></tbody></table></li><li><p>安装指定版本（这里使用18.0.1版本）  278.png) sudo yum install docker-ce-18.06.1.ce 6）查看版本</p></li></ol><p> 279.png)</p><p> 280.png) docker -v 7）启动Docker</p><p>sudo systemctl start docker 启动</p><p>sudo systemctl enable docker 设置开机启动</p><ol><li><p>添加阿里云镜像下载地址</p><p> 281.png) vi &#x2F;etc&#x2F;docker&#x2F;daemon.json</p><p> 282.png)</p><p>{</p><p>“registry-mirrors”: [“<a href="https://zydiol88.mirror.aliyuncs.com"]">https://zydiol88.mirror.aliyuncs.com&quot;]</a></p><p>}</p><p>内容如下：</p></li><li><p>重启Docker</p></li></ol><p> 283.png) sudo systemctl restart docker</p><h4 id="Docker基本命令快速入门-1）镜像命令"><a href="#Docker基本命令快速入门-1）镜像命令" class="headerlink" title="Docker基本命令快速入门 1）镜像命令"></a>Docker<strong>基本命令快速入门</strong> 1）镜像命令</h4><p>镜像：相当于应用的安装包，在Docker部署的任何应用都需要先构建成为镜像</p><p> 284.png)</p><p>docker search 镜像名称 搜索镜像 docker pull 镜像名称 拉取镜像 docker images 查看本地所有镜像</p><p> 285.png) docker rmi -f 镜像名称 删除镜像</p><p> 286.png)</p><p>docker pull openjdk:8-jdk-alpine</p><ol><li><p>容器命令</p><p>容器：容器是由镜像创建而来。容器是Docker运行应用的载体，每个应用都分别运行在Docker的每个容器中。</p><p> 287.png)</p><p>docker run -i 镜像名称:标签 运行容器（默认是前台运行）</p><p>docker ps 查看运行的容器</p><p>docker ps -a 查询所有容器常用的参数：</p><p>-i：运行容器</p><p>-d：后台守方式运行（守护式）</p><p>–name：给容器添加名称</p><p>-p：公开容器端口给当前宿主机</p><p>-v：挂载目录</p><p> 288.png)</p><p>docker exec -it 容器ID&#x2F;容器名称 &#x2F;bin&#x2F;bash 进入容器内部 docker start&#x2F;stop&#x2F;restart 容器名称&#x2F;ID 启动&#x2F;停止&#x2F;重启容器 docker rm -f 容器名称&#x2F;ID 删除容器</p><p>环境准备**(2)-Dockerﬁle**镜像脚本快速入门</p><h4 id="Dockerﬁle简介"><a href="#Dockerﬁle简介" class="headerlink" title="Dockerﬁle简介"></a>Dockerﬁle<strong>简介</strong></h4><p>Dockerﬁle其实就是我们用来构建Docker镜像的源码，当然这不是所谓的编程源码，而是一些命令的组合，只要理解它的逻辑和语法格式，就可以编写Dockerﬁle了。</p><p>简单点说，Dockerﬁle的作用：它可以让用户个性化定制Docker镜像。因为工作环境中的需求各式各样，网络上的镜像很难满足实际的需求。</p><h4 id="Dockerﬁle常见命令"><a href="#Dockerﬁle常见命令" class="headerlink" title="Dockerﬁle常见命令"></a>Dockerﬁle<strong>常见命令</strong></h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>FROM image_name:tag</td><td></td></tr><tr><td>MAINTAINER user_name</td><td>声明镜像的作者</td></tr><tr><td>ENV key value</td><td>设置环境变量 (可以写多条)</td></tr><tr><td>RUN command</td><td>编译镜像时运行的脚本(可以写多条)</td></tr><tr><td>CMD</td><td>设置容器的启动命令</td></tr><tr><td>ENTRYPOINT</td><td>设置容器的入口程序</td></tr><tr><td>ADD source_dir&#x2F;ﬁle dest_dir&#x2F;ﬁle</td><td>将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压</td></tr><tr><td>COPY source_dir&#x2F;ﬁle dest_dir&#x2F;ﬁle</td><td>和ADD相似，但是如果有压缩文件并不能解压</td></tr><tr><td>WORKDIR path_dir</td><td>设置工作目录</td></tr><tr><td>ARG</td><td>设置编译镜像时加入的参数</td></tr><tr><td>VOLUMN</td><td>设置容器的挂载卷</td></tr></tbody></table><p>镜像构建示意图：</p><p> 289.jpg)</p><p>可以看到，新镜像是从基础镜像一层一层叠加生成的。每安装一个软件，就在现有镜像的基础上增加一层</p><p> 290.png)</p><p>RUN、CMD、ENTRYPOINT的区别？</p><p>RUN：用于指定 docker build 过程中要运行的命令，即是创建 Docker 镜像（image）的步骤</p><p>CMD：设置容器的启动命令， Dockerﬁle 中只能有一条 CMD 命令，如果写了多条则最后一条生效，</p><p>CMD不支持接收docker run的参数。</p><p>ENTRYPOINT：入口程序是容器启动时执行的程序， docker run 中最后的命令将作为参数传递给入口程序 ，ENTRYPOINY类似于 CMD 指令，但可以接收docker run的参数 。</p><p> 291.png)</p><p>FROM oraclelinux:7-slim</p><p>ARG MYSQL_SERVER_PACKAGE&#x3D;mysql-community-server-minimal-5.7.28 ARG MYSQL_SHELL_PACKAGE&#x3D;mysql-shell-8.0.18</p><p>以下是mysql官方镜像的Dockerﬁle示例：</p><p> 292.png)</p><p># Install server</p><p>RUN yum install -y <a href="https://repo.mysql.com/mysql-community-minimal-release-">https://repo.mysql.com/mysql-community-minimal-release-</a> el7.rpm \</p><p><a href="https://repo.mysql.com/mysql-community-release-el7.rpm">https://repo.mysql.com/mysql-community-release-el7.rpm</a> \ &amp;&amp; yum-config-manager –enable mysql57-server-minimal \</p><p>&amp;&amp; yum install -y \</p><p>$MYSQL_SERVER_PACKAGE \</p><p>$MYSQL_SHELL_PACKAGE \</p><p>libpwquality \ &amp;&amp; yum clean all \</p><p>&amp;&amp; mkdir &#x2F;docker-entrypoint-initdb.d</p><p>VOLUME &#x2F;var&#x2F;lib&#x2F;mysql</p><p>COPY docker-entrypoint.sh &#x2F;entrypoint.sh COPY healthcheck.sh &#x2F;healthcheck.sh ENTRYPOINT [“&#x2F;entrypoint.sh”] HEALTHCHECK CMD &#x2F;healthcheck.sh</p><p>EXPOSE 3306 33060</p><p>CMD [“mysqld”]</p><p>使用<strong>Dockerﬁle</strong>制作微服务镜像</p><p> 293.png)</p><p>FROM openjdk:8-jdk-alpine ARG JAR_FILE</p><p>COPY ${JAR_FILE} app.jar EXPOSE 10086</p><p>ENTRYPOINT [“java”,”-jar”,”&#x2F;app.jar”]</p><p>我们利用Dockerﬁle制作一个Eureka注册中心的镜像 1）上传Eureka的微服务jar包到linux 2）编写Dockerﬁle</p></li><li><p>构建镜像</p></li></ol><p> 294.png) docker build –build-arg JAR_FILE&#x3D;tensquare_eureka_server-1.0-SNAPSHOT.jar -t eureka:v1 . 4）查看镜像是否创建成功</p><p> 295.png) docker images</p><ol><li><p>创建容器</p><p> 296.png) docker run -i –name&#x3D;eureka -p 10086:10086 eureka:v1 6）访问容器</p><p><a href="http://192.168.66.101:10086/">http://192.168.66.101:10086</a></p><p>环境准备**(3)-Harbor**镜像仓库安装及使用</p><h4 id="Harbor简介"><a href="#Harbor简介" class="headerlink" title="Harbor简介"></a>Harbor<strong>简介</strong></h4><p> 297.jpg)</p><p>Harbor（港口，港湾）是一个用于存储和分发Docker镜像的企业级Registry服务器。</p><p>除了Harbor这个私有镜像仓库之外，还有Docker官方提供的Registry。相对Registry，Harbor具有很多优势：</p><ol><li>提供分层传输机制，优化网络传输 Docker镜像是是分层的，而如果每次传输都使用全量文件(所以用FTP的方式并不适合)，显然不经济。必须提供识别分层传输的机制，以层的UUID为标识，确定传输的对象。</li><li>提供WEB界面，优化用户体验 只用镜像的名字来进行上传下载显然很不方便，需要有一个用户界面可以支持登陆、搜索功能，包括区分公有、私有镜像。</li><li>支持水平扩展集群 当有用户对镜像的上传下载操作集中在某服务器，需要对相应的访问压力作分解。</li><li>良好的安全机制 企业中的开发团队有很多不同的职位，对于不同的职位人员，分配不同的权限，具有更好的安全性。</li></ol></li></ol><h4 id="Harbor安装"><a href="#Harbor安装" class="headerlink" title="Harbor安装"></a>Harbor<strong>安装</strong></h4><p>Harbor需要安装在192.168.66.102上面 </p><p>1）先安装Docker并启动Docker（已完成）</p><p>参考之前的安装过程</p><p>2）先安装docker-compose</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo curl -L https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/docker/</span>compose<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/1.21.2/</span>docker-compose-$(uname -s)-$(uname -m) -o <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br><br></code></pre></td></tr></table></figure><p>3）给docker-compose添加执行权限</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose <br></code></pre></td></tr></table></figure><p>4）查看docker-compose是否安装成功</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker-compose -<span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>5）下载Harbor的压缩包（本课程版本为：v1.9.2<a href="https://github.com/goharbor/harbor/releases">） </a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/goharbor/</span>harbor/releases<br></code></pre></td></tr></table></figure><p>6）上传压缩包到linux，并解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xzf harbor-oﬄine-installer-v1.9.2.tgz<br><span class="hljs-built_in">mkdir</span> /opt/harbor<br><span class="hljs-built_in">mv</span> harbor/* /opt/harbor <br><span class="hljs-built_in">cd</span> /opt/harbor<br><br></code></pre></td></tr></table></figure><p>7）修改Harbor的配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">vi</span> harbor.yml<br></code></pre></td></tr></table></figure><p>修改hostname和port </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hostname</span>: <span class="hljs-number">192.168.66.102</span><br><span class="hljs-attribute">port</span>: <span class="hljs-number">85</span><br><br></code></pre></td></tr></table></figure><p>8）安装Harbor</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./prepare<br>./install.sh<br><br></code></pre></td></tr></table></figure><p> 9）启动Harbor</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#启动</span><br>docker-compose up -d  <br><span class="hljs-comment">#停止</span><br>docker-compose <span class="hljs-literal">stop</span>  <br><span class="hljs-comment">#重新启动</span><br>docker-compose restart <br><br></code></pre></td></tr></table></figure><p>10）访问Harbor <a href="http://192.168.66.102:85/">http://192.168.66.102:85</a></p><p>默认账户密码：admin&#x2F;Harbor12345</p><img src="/2024/01/31/jenkins-cicd/image-20240128132850493.png" class="" title="image-20240128132850493"><p>在<strong>Harbor</strong>创建用户和项目</p><ol><li><p>创建项目</p><p>Harbor的项目分为公开和私有的：</p><p>公开项目：所有用户都可以访问，通常存放公共的镜像，默认有一个library公开项目。私有项目：只有授权用户才可以访问，通常存放项目本身的镜像。</p><p>我们可以为微服务项目创建一个新的项目：</p><p> 307.jpg)</p><p> 308.jpg)</p></li><li><p>创建用户</p><p> 309.jpg)</p><p> 310.jpg)</p><p>创建的用户为： itcast&#x2F;Itcast123</p></li><li><p>给私有项目分配用户 进入tensquare项目-&gt;成员</p><p> 311.jpg)</p></li></ol><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">312</span>.<span class="hljs-keyword">jpg)</span><br><span class="hljs-keyword"></span><br><span class="hljs-number">313</span>.<span class="hljs-keyword">jpg)</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>角色</th><th>权限说明</th></tr></thead><tbody><tr><td>访客</td><td>对于指定项目拥有只读权限</td></tr><tr><td>开发人员</td><td>对于指定项目拥有读写权限</td></tr><tr><td>维护人员</td><td>对于指定项目拥有读写权限，创建 Webhooks</td></tr><tr><td>项目管理员</td><td>除了读写权限，同时拥有用户管理&#x2F;镜像扫描等管理权限</td></tr></tbody></table><ol start="4"><li><p>以新用户登录Harbor</p><p> 314.jpg)</p><p>把镜像上传到<strong>Harbor</strong> 1）给镜像打上标签</p></li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-number">315</span>.png) docker <span class="hljs-keyword">tag</span> <span class="hljs-title">eureka</span>:v1 <span class="hljs-number">192.168</span>.<span class="hljs-number">66.102</span>:<span class="hljs-number">85</span>/tensquare/eureka:v1 <span class="hljs-number">2</span>）推送镜像<br></code></pre></td></tr></table></figure><p>   docker push 192.168.66.102:85&#x2F;tensquare&#x2F;eureka:v1</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">316.png)<br></code></pre></td></tr></table></figure><p>   The push refers to repository [192.168.66.102:85&#x2F;tensquare&#x2F;eureka]</p><p>   Get <a href="https://192.168.66.102:85/v2/">https://192.168.66.102:85/v2/</a>: http: server gave HTTP response to HTTPS client</p><p>   这时会出现以上报错，是因为Docker没有把Harbor加入信任列表中</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">317.png)<br></code></pre></td></tr></table></figure><p>   3）把Harbor地址加入到Docker信任列表 vi &#x2F;etc&#x2F;docker&#x2F;daemon.json</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">318.png)<br></code></pre></td></tr></table></figure><p>   {</p><p>   “registry-mirrors”: [“<a href="https://zydiol88.mirror.aliyuncs.com"]">https://zydiol88.mirror.aliyuncs.com&quot;]</a>, “insecure-registries”: [“192.168.66.102:85”]</p><p>   }</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">319.png)<br></code></pre></td></tr></table></figure><p>   denied: requested access to the resource is denied</p><p>   需要重启Docker 4）再次执行推送命令，会提示权限不足</p><p>   需要先登录Harbor，再推送镜像</p><ol start="5"><li>登录Harbor</li></ol><p> 320.png)</p><p>WARNING! Using –password via the CLI is insecure. Use –password-stdin. WARNING! Your password will be stored unencrypted in &#x2F;root&#x2F;.docker&#x2F;config.json. Configure a credential helper to remove this warning. See <a href="https://docs.docker.com/engine/reference/commandline/login/#credentials-store">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</a></p><p>Login Succeeded</p><p> 321.png) docker login -u 用户名 -p 密码 192.168.66.102:85</p><p> 322.jpg)</p><p>从<strong>Harbor</strong>下载镜像</p><p>需求：在192.168.66.103服务器完成从Harbor下载镜像 1）安装Docker，并启动Docker（已经完成） 2）修改Docker配置</p><p> 323.png)</p><p>{</p><p>“registry-mirrors”: [“<a href="https://zydiol88.mirror.aliyuncs.com"]">https://zydiol88.mirror.aliyuncs.com&quot;]</a>, “insecure-registries”: [“192.168.66.102:85”]</p><p>}</p><p> 324.png) vi &#x2F;etc&#x2F;docker&#x2F;daemon.json</p><p>重启docker 3）先登录，再从Harbor下载镜像</p><p> 325.png)</p><p>docker login -u 用户名 -p 密码 192.168.66.102:85</p><p> 326.png)</p><p>docker pull 192.168.66.102:85&#x2F;tensquare&#x2F;eureka:v1</p><p>微服务持续集成**(1)-<strong>项目代码上传到</strong>Gitlab**</p><p>在IDEA操作即可，参考之前的步骤。包括后台微服务和前端web网站代码</p><p> 327.jpg)</p><p>微服务持续集成**(2)-<strong>从</strong>Gitlab**拉取项目源码</p><ol><li><p>创建Jenkinsﬁle文件</p><p> 328.jpg)</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">329.png)<br></code></pre></td></tr></table></figure><p>   &#x2F;&#x2F;gitlab的凭证</p><p>   def git_auth &#x3D; “68f2087f-a034-4d39-a9ff-1f776dd3dfa8”</p><p>   node {</p><p>   stage(‘拉取代码’) {</p><p>   checkout([$class: ‘GitSCM’, branches: [[name: ‘*&#x2F;${branch}’]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: “${git_auth}”, url: ‘<a href="mailto:&#x67;&#105;&#x74;&#64;&#x31;&#57;&#x32;&#x2e;&#x31;&#x36;&#x38;&#46;&#54;&#x36;&#x2e;&#49;&#x30;&#48;">&#x67;&#105;&#x74;&#64;&#x31;&#57;&#x32;&#x2e;&#x31;&#x36;&#x38;&#46;&#54;&#x36;&#x2e;&#49;&#x30;&#48;</a>:itheima_group&#x2F;tensquare_back.git’]]])</p><p>   }</p><p>   }</p><ol start="2"><li>拉取Jenkinsﬁle文件</li></ol><p> 330.jpg)</p><p>微服务持续集成**(3)-<strong>提交到</strong>SonarQube**代码审查</p><ol><li><p>创建项目，并设置参数</p><p>创建tensquare_back项目，添加两个参数</p><p> 331.jpg)</p></li><li><p>每个项目的根目录下添加sonar-project.properties</p></li></ol><p> 332.png)</p><p> 333.png)</p><p># must be unique in a given SonarQube instance sonar.projectKey&#x3D;tensquare_zuul</p><p># this is the name and version displayed in the SonarQube UI. Was mandatory prior to SonarQube 6.1.</p><p>sonar.projectName&#x3D;tensquare_zuul sonar.projectVersion&#x3D;1.0</p><p># Path is relative to the sonar-project.properties file. Replace “&quot; by “&#x2F;“ on Windows.</p><p># This property is optional if sonar.modules is set. sonar.sources&#x3D;. sonar.exclusions&#x3D;<strong>&#x2F;test&#x2F;</strong>,<strong>&#x2F;target&#x2F;</strong> sonar.java.binaries&#x3D;.</p><p>sonar.java.source&#x3D;1.8 sonar.java.target&#x3D;1.8 sonar.java.libraries&#x3D;<strong>&#x2F;target&#x2F;classes&#x2F;</strong></p><p># Encoding of the source code. Default is default system encoding sonar.sourceEncoding&#x3D;UTF-8</p><p> 334.png)</p><p>&#x2F;&#x2F;gitlab的凭证</p><p>def git_auth &#x3D; “68f2087f-a034-4d39-a9ff-1f776dd3dfa8”</p><p>&#x2F;&#x2F;构建版本的名称</p><p>def tag &#x3D; “latest”</p><p>node {</p><p>stage(‘拉取代码’) {</p><p>checkout([$class: ‘GitSCM’, branches: [[name: ‘*&#x2F;${branch}’]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: “${git_auth}”, url: ‘<a href="mailto:&#x67;&#x69;&#116;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#x36;&#54;&#x2e;&#49;&#x30;&#48;">&#x67;&#x69;&#116;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#x36;&#54;&#x2e;&#49;&#x30;&#48;</a>:itheima_group&#x2F;tensquare_back.git’]]])</p><p>}</p><p>stage(‘代码审查’) {</p><p>def scannerHome &#x3D; tool ‘sonarqube-scanner’ withSonarQubeEnv(‘sonarqube6.7.4’) {</p><p>sh “””</p><p>cd ${project_name}</p><p>${scannerHome}&#x2F;bin&#x2F;sonar-scanner</p><p>“””</p><p>}</p><p>}</p><p>}</p><p>注意：修改sonar.projectKey和sonar.projectName 3）修改Jenkinsﬁle构建脚本</p><p>微服务持续集成**(4)-<strong>使用</strong>Dockerﬁle**编译、生成镜像</p><p>利用dockerﬁle-maven-plugin插件构建Docker镜像</p><ol><li><p>在每个微服务项目的pom.xml加入dockerﬁle-maven-plugin插件</p><p> 335.png)</p><plugin><p><groupId>com.spotify</groupId></p><p><artifactId>dockerfile-maven-plugin</artifactId></p><p><version>1.3.6</version></p><configuration><p><repository>${project.artifactId}</repository></p><buildArgs><p><JAR_FILE>target&#x2F;${project.build.finalName}.jar</JAR_FILE></p></buildArgs></configuration></plugin><p> 336.png)</p><p>#FROM java:8</p><p>FROM openjdk:8-jdk-alpine ARG JAR_FILE</p><p>COPY ${JAR_FILE} app.jar EXPOSE 10086</p><p>ENTRYPOINT [“java”,”-jar”,”&#x2F;app.jar”]</p></li><li><p>在每个微服务项目根目录下建立Dockerﬁle文件</p><p>注意：每个项目公开的端口不一样</p><p> 337.png)</p><p>&#x2F;&#x2F;gitlab的凭证</p><p>def git_auth &#x3D; “68f2087f-a034-4d39-a9ff-1f776dd3dfa8”</p><p>&#x2F;&#x2F;构建版本的名称</p><p>def tag &#x3D; “latest”</p><p>&#x2F;&#x2F;Harbor私服地址</p><p>def harbor_url &#x3D; “192.168.66.102:85&#x2F;tensquare&#x2F;“</p><p>node {</p><p>stage(‘拉取代码’) {</p><p>checkout([$class: ‘GitSCM’, branches: [[name: ‘*&#x2F;${branch}’]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: “${git_auth}”, url: ‘<a href="mailto:&#x67;&#x69;&#x74;&#64;&#x31;&#x39;&#x32;&#46;&#49;&#54;&#x38;&#x2e;&#x36;&#54;&#x2e;&#x31;&#48;&#x30;">&#x67;&#x69;&#x74;&#64;&#x31;&#x39;&#x32;&#46;&#49;&#54;&#x38;&#x2e;&#x36;&#54;&#x2e;&#x31;&#48;&#x30;</a>:itheima_group&#x2F;tensquare_back.git’]]])</p><p>}</p><p>stage(‘代码审查’) {</p><p>def scannerHome &#x3D; tool ‘sonarqube-scanner’ withSonarQubeEnv(‘sonarqube6.7.4’) {</p><p>sh “””</p><p>cd ${project_name}</p><p>${scannerHome}&#x2F;bin&#x2F;sonar-scanner</p><p>“””</p><p>}</p><p>}</p><p>stage(‘编译，构建镜像’) {</p><p>&#x2F;&#x2F;定义镜像名称</p><p>def imageName &#x3D; “${project_name}:${tag}”</p><p>&#x2F;&#x2F;编译，安装公共工程</p></li><li><p>修改Jenkinsﬁle构建脚本</p></li></ol><p> 338.png)</p><p>sh “mvn -f tensquare_common clean install”</p><p>&#x2F;&#x2F;编译，构建本地镜像</p><p>sh “mvn -f ${project_name} clean package dockerfile:build”</p><p>}</p><p>}</p><p>注意：如果出现找不到父工程依赖，需要手动把父工程的依赖上传到仓库中</p><p>微服务持续集成**(5)-<strong>上传到</strong>Harbor**镜像仓库</p><p> 339.png)</p><p>&#x2F;&#x2F;gitlab的凭证</p><p>def git_auth &#x3D; “68f2087f-a034-4d39-a9ff-1f776dd3dfa8”</p><p>&#x2F;&#x2F;构建版本的名称</p><p>def tag &#x3D; “latest”</p><p>&#x2F;&#x2F;Harbor私服地址</p><p>def harbor_url &#x3D; “192.168.66.102:85”</p><p>&#x2F;&#x2F;Harbor的项目名称</p><p>def harbor_project_name &#x3D; “tensquare”</p><p>&#x2F;&#x2F;Harbor的凭证</p><p>def harbor_auth &#x3D; “ef499f29-f138-44dd-975e-ff1ca1d8c933”</p><p>node {</p><p>stage(‘拉取代码’) {</p><p>checkout([$class: ‘GitSCM’, branches: [[name: ‘*&#x2F;${branch}’]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: “${git_auth}”, url: ‘<a href="mailto:&#103;&#x69;&#x74;&#x40;&#49;&#x39;&#50;&#46;&#x31;&#54;&#56;&#x2e;&#54;&#54;&#46;&#49;&#48;&#48;">&#103;&#x69;&#x74;&#x40;&#49;&#x39;&#50;&#46;&#x31;&#54;&#56;&#x2e;&#54;&#54;&#46;&#49;&#48;&#48;</a>:itheima_group&#x2F;tensquare_back.git’]]])</p><p>}</p><p>stage(‘代码审查’) {</p><p>def scannerHome &#x3D; tool ‘sonarqube-scanner’ withSonarQubeEnv(‘sonarqube6.7.4’) {</p><p>sh “””</p><p>cd ${project_name}</p><p>${scannerHome}&#x2F;bin&#x2F;sonar-scanner</p><p>“””</p><p>}</p><p>}</p><p>stage(‘编译，构建镜像’) {</p><p>&#x2F;&#x2F;定义镜像名称</p><p>def imageName &#x3D; “${project_name}:${tag}”</p><p>&#x2F;&#x2F;编译，安装公共工程</p><p>sh “mvn -f tensquare_common clean install”</p><p>&#x2F;&#x2F;编译，构建本地镜像</p><p>sh “mvn -f ${project_name} clean package dockerfile:build”</p><p>&#x2F;&#x2F;给镜像打标签</p><p>sh “docker tag ${imageName}</p><p>${harbor_url}&#x2F;${harbor_project_name}&#x2F;${imageName}”</p><ol><li><p>修改Jenkinsﬁle构建脚本</p><p> 340.png)</p><p>&#x2F;&#x2F;登录Harbor，并上传镜像 withCredentials([usernamePassword(credentialsId: “${harbor_auth}”,</p><p>passwordVariable: ‘password’, usernameVariable: ‘username’)]) {</p><p>&#x2F;&#x2F;登录</p><p>sh “docker login -u ${username} -p ${password} ${harbor_url}”</p><p>&#x2F;&#x2F;上传镜像</p><p>sh “docker push ${harbor_url}&#x2F;${harbor_project_name}&#x2F;${imageName}”</p><p>}</p><p>&#x2F;&#x2F;删除本地镜像</p><p>sh “docker rmi -f ${imageName}”</p><p>sh “docker rmi -f ${harbor_url}&#x2F;${harbor_project_name}&#x2F;${imageName}”</p><p>}</p><p>}</p></li><li><p>使用凭证管理Harbor私服账户和密码</p></li></ol><p>先在凭证建立Harbor的凭证，在生成凭证脚本代码</p><p> 341.jpg)</p><p>微服务持续集成**(6)-**拉取镜像和发布应用</p><p> 342.jpg)</p><p>注意：192.168.66.103服务已经安装Docker并启动<strong>安装</strong> <strong>Publish Over SSH</strong> <strong>插件</strong></p><p>安装以下插件，可以实现远程发送Shell命令</p><p> 343.jpg)</p><p>配置远程部署服务器</p><ol><li><p>拷贝公钥到远程服务器</p><p> 344.png) ssh-copy-id 192.168.66.103 2）系统配置-&gt;添加远程服务器</p><p> 345.jpg)</p><p>修改<strong>Jenkinsﬁle</strong>构建脚本生成远程调用模板代码</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">346.jpg)<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">347.png)<br></code></pre></td></tr></table></figure><p>   &#x2F;&#x2F;gitlab的凭证</p><p>   def git_auth &#x3D; “68f2087f-a034-4d39-a9ff-1f776dd3dfa8”</p><p>   &#x2F;&#x2F;构建版本的名称</p><p>   def tag &#x3D; “latest”</p><p>   添加一个port参数</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">348.jpg)<br></code></pre></td></tr></table></figure><p>   &#x2F;&#x2F;Harbor私服地址</p><p>   def harbor_url &#x3D; “192.168.66.102:85”</p><p>   &#x2F;&#x2F;Harbor的项目名称</p><p>   def harbor_project_name &#x3D; “tensquare”</p><p>   &#x2F;&#x2F;Harbor的凭证</p><p>   def harbor_auth &#x3D; “ef499f29-f138-44dd-975e-ff1ca1d8c933”</p><p>   node {</p><p>   stage(‘拉取代码’) {</p><p>   checkout([$class: ‘GitSCM’, branches: [[name: ‘*&#x2F;${branch}’]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: “${git_auth}”, url: ‘<a href="mailto:&#103;&#x69;&#x74;&#64;&#49;&#x39;&#50;&#x2e;&#x31;&#54;&#56;&#46;&#54;&#54;&#x2e;&#x31;&#48;&#x30;">&#103;&#x69;&#x74;&#64;&#49;&#x39;&#50;&#x2e;&#x31;&#54;&#56;&#46;&#54;&#54;&#x2e;&#x31;&#48;&#x30;</a>:itheima_group&#x2F;tensquare_back.git’]]])</p><p>   }</p><p>   stage(‘代码审查’) {</p><p>   def scannerHome &#x3D; tool ‘sonarqube-scanner’ withSonarQubeEnv(‘sonarqube6.7.4’) {</p><p>   sh “””</p><p>   cd ${project_name}</p><p>   ${scannerHome}&#x2F;bin&#x2F;sonar-scanner</p><p>   “””</p><p>   }</p><p>   }</p><p>   stage(‘编译，构建镜像，部署服务’) {</p><p>   &#x2F;&#x2F;定义镜像名称</p><p>   def imageName &#x3D; “${project_name}:${tag}”</p><p>   &#x2F;&#x2F;编译并安装公共工程</p><p>   sh “mvn -f tensquare_common clean install”</p><p>   &#x2F;&#x2F;编译，构建本地镜像</p><p>   sh “mvn -f ${project_name} clean package dockerfile:build”</p><p>   &#x2F;&#x2F;给镜像打标签</p><p>   sh “docker tag ${imageName}</p><p>   ${harbor_url}&#x2F;${harbor_project_name}&#x2F;${imageName}”</p><p>   &#x2F;&#x2F;登录Harbor，并上传镜像 withCredentials([usernamePassword(credentialsId: “${harbor_auth}”,</p><p>   passwordVariable: ‘password’, usernameVariable: ‘username’)]) {</p><p>   &#x2F;&#x2F;登录</p><p>   sh “docker login -u ${username} -p ${password} ${harbor_url}”</p><p>   &#x2F;&#x2F;上传镜像</p><p>   sh “docker push ${harbor_url}&#x2F;${harbor_project_name}&#x2F;${imageName}”</p><p>   }</p><p>   &#x2F;&#x2F;删除本地镜像</p><p>   sh “docker rmi -f ${imageName}”</p><p>   sh “docker rmi -f ${harbor_url}&#x2F;${harbor_project_name}&#x2F;${imageName}”</p><p>   &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;以下为远程调用进行项目部署&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">349.png)<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">350.png)<br></code></pre></td></tr></table></figure><p>   sshPublisher(publishers: [sshPublisherDesc(configName: ‘master_server’, transfers: [sshTransfer(cleanRemote: false, excludes: ‘’, execCommand: “&#x2F;opt&#x2F;jenkins_shell&#x2F;deploy.sh $harbor_url $harbor_project_name $project_name</p><p>   $tag $port”, execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: ‘[, ]+’, remoteDirectory: ‘’, remoteDirectorySDF: false, removePrefix: ‘’, sourceFiles: ‘’)], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])</p><p>   }</p><p>   }</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">351.png)<br></code></pre></td></tr></table></figure><p>   编写<strong>deploy.sh</strong>部署脚本</p><p>   #! &#x2F;bin&#x2F;sh #接收外部参数</p><p>   harbor_url&#x3D;$1 harbor_project_name&#x3D;$2 project_name&#x3D;$3</p><p>   tag&#x3D;$4 port&#x3D;$5</p><p>   imageName&#x3D;$harbor_url&#x2F;$harbor_project_name&#x2F;$project_name:$tag</p><p>   echo “$imageName”</p><p>   #查询容器是否存在，存在则删除</p><p>   containerId&#x3D;<code>docker ps -a | grep -w $&#123;project_name&#125;:$&#123;tag&#125; | awk &#39;&#123;print $1&#125;&#39;</code> if [ “$containerId” !&#x3D; “” ] ; then</p><p>   #停掉容器</p><p>   docker stop $containerId</p><p>   #删除容器</p><p>   docker rm $containerId</p><p>   echo “成功删除容器”</p><p>   fi</p><p>   #查询镜像是否存在，存在则删除</p><p>   imageId&#x3D;<code>docker images | grep -w $project_name | awk &#39;&#123;print $3&#125;&#39;</code></p><p>   if [ “$imageId” !&#x3D; “” ] ; then #删除镜像</p><p>   docker rmi -f $imageId</p><p>   echo “成功删除镜像”</p><p>   fi</p><p>   # 登录Harbor私服</p><p>   docker login -u itcast -p Itcast123 $harbor_url</p><p>   # 下载镜像</p><p>   docker pull $imageName</p><p>   # 启动容器</p><p>   docker run -di -p $port:$port $imageName</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">352.png)<br></code></pre></td></tr></table></figure><p>   echo “容器启动成功”</p><p>   上传deploy.sh文件到&#x2F;opt&#x2F;jenkins_shell目录下，且文件至少有执行权限！</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">353</span>.<span class="hljs-keyword">jpg)</span><br><span class="hljs-keyword"></span><br><span class="hljs-number">354</span>.png) chmod +x deploy.<span class="hljs-keyword">sh </span>添加执行权限**导入数据，测试微服务**<br></code></pre></td></tr></table></figure><p>   微服务持续集成**(7)-<strong>部署前端静态</strong>web**网站</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">355.jpg)<br></code></pre></td></tr></table></figure><p>   安装<strong>Nginx</strong>服务器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">356.png)<br></code></pre></td></tr></table></figure><p>   yum install epel-release yum -y install nginx 安装</p><p>   修改nginx的端口，默认80，改为9090：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">357.png)<br></code></pre></td></tr></table></figure><p>   server {</p><p>   listen 9090 default_server;</p><p>   listen [::]:9090 default_server; server_name _;</p><p>   root &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-number">358</span>.png) <span class="hljs-keyword">vi</span> /etc/nginx/nginx.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">359.png)<br></code></pre></td></tr></table></figure><p>   还需要关闭selinux，将SELINUX&#x3D;disabled setenforce 0 先临时关闭</p><p>   vi &#x2F;etc&#x2F;selinux&#x2F;conﬁg 编辑文件，永久关闭 SELINUX&#x3D;disabled</p><p>   启动Nginx</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">360.png)<br></code></pre></td></tr></table></figure><p>   systemctl enable nginx 设置开机启动</p><p>   systemctl start nginx 启动 systemctl stop nginx 停止 systemctl restart nginx 重启</p><p>   访问：<a href="http://192.168.66.103:9090/">http://192.168.66.103:9090/</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">361.jpg)<br></code></pre></td></tr></table></figure><p>   安装<strong>NodeJS</strong>插件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">362.jpg)<br></code></pre></td></tr></table></figure><h4 id="Jenkins配置Nginx服务器"><a href="#Jenkins配置Nginx服务器" class="headerlink" title="Jenkins配置Nginx服务器"></a>Jenkins<strong>配置</strong>Nginx<strong>服务器</strong></h4><p>   Manage Jenkins-&gt;Global Tool Conﬁguration</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">363.jpg)<br></code></pre></td></tr></table></figure><p>   创建前端流水线项目</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">364.jpg)<br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">365</span>.<span class="hljs-keyword">jpg)</span><br><span class="hljs-keyword"></span><br><span class="hljs-number">366</span>.<span class="hljs-keyword">jpg)</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">367.png)<br></code></pre></td></tr></table></figure><p>   &#x2F;&#x2F;gitlab的凭证</p><p>   def git_auth &#x3D; “68f2087f-a034-4d39-a9ff-1f776dd3dfa8”</p><p>   node {</p><p>   stage(‘拉取代码’) {</p><p>   checkout([$class: ‘GitSCM’, branches: [[name: ‘*&#x2F;${branch}’]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: “${git_auth}”, url: ‘<a href="mailto:&#x67;&#105;&#x74;&#x40;&#x31;&#x39;&#x32;&#x2e;&#x31;&#54;&#56;&#x2e;&#x36;&#x36;&#x2e;&#49;&#48;&#48;">&#x67;&#105;&#x74;&#x40;&#x31;&#x39;&#x32;&#x2e;&#x31;&#54;&#56;&#x2e;&#x36;&#x36;&#x2e;&#49;&#48;&#48;</a>:itheima_group&#x2F;tensquare_front.git’]]])</p><p>   }</p><p>   stage(‘打包，部署网站’) {</p><p>   &#x2F;&#x2F;使用NodeJS的npm进行打包 nodejs(‘nodejs12’){</p><p>   sh ‘’’</p><p>   npm install npm run build</p><p>   ‘’’</p><p>   }</p><p>   &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;以下为远程调用进行项目部署&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>   sshPublisher(publishers: [sshPublisherDesc(configName: ‘master_server’, transfers: [sshTransfer(cleanRemote: false, excludes: ‘’, execCommand: ‘’, execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: ‘[, ]+’, remoteDirectory: ‘&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html’, remoteDirectorySDF: false, removePrefix: ‘dist’, sourceFiles: ‘dist&#x2F;**’)], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])</p><p>   }</p><p>   }</p><p>   建立<strong>Jenkinsﬁle</strong>构建脚本</p><p>   完成后，访问：<a href="http://192.168.66.103:9090/">http://192.168.66.103:9090</a> 进行测试。</p><h2 id="5、Jenkins-Docker-SpringCloud微服务持续集成-下"><a href="#5、Jenkins-Docker-SpringCloud微服务持续集成-下" class="headerlink" title="5、Jenkins+Docker+SpringCloud微服务持续集成(下)"></a>5<strong>、</strong>Jenkins+Docker+SpringCloud<strong>微服务持续集成</strong>(<strong>下</strong>)</h2><h3 id="Jenkins-Docker-SpringCloud部署方案优化"><a href="#Jenkins-Docker-SpringCloud部署方案优化" class="headerlink" title="Jenkins+Docker+SpringCloud部署方案优化"></a>Jenkins+Docker+SpringCloud<strong>部署方案优化</strong></h3><p>   上面部署方案存在的问题：</p><ol><li>一次只能选择一个微服务部署</li><li>只有一台生产者部署服务器</li><li>每个微服务只有一个实例，容错率低</li></ol><p>   优化方案：</p><ol><li>在一个Jenkins工程中可以选择多个微服务同时发布</li><li>在一个Jenkins工程中可以选择多台生产服务器同时部署</li><li>每个微服务都是以<strong>集群高可用</strong>形式部署</li></ol><h3 id="Jenkins-Docker-SpringCloud集群部署流程说明"><a href="#Jenkins-Docker-SpringCloud集群部署流程说明" class="headerlink" title="Jenkins+Docker+SpringCloud集群部署流程说明"></a>Jenkins+Docker+SpringCloud<strong>集群部署流程说明</strong></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">368.jpg)<br></code></pre></td></tr></table></figure><p>   修改所有微服务配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">369.png)<br></code></pre></td></tr></table></figure><p>   # 集群版</p><p>   spring: application:</p><p>   name: EUREKA-HA</p><p>   -–</p><p>   server: port: 10086</p><p>   spring:</p><p>   # 指定profile&#x3D;eureka-server1 profiles: eureka-server1</p><p>   eureka: instance:</p><p>   # 指定当profile&#x3D;eureka-server1时，主机名是eureka-server1</p><p>   hostname: 192.168.66.103 client:</p><p>   注册中心配置**(*)**</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">370.png)<br></code></pre></td></tr></table></figure><p>   service-url:</p><p>   # 将自己注册到eureka-server1、eureka-server2这个Eureka上面去</p><p>   defaultZone: <a href="http://192.168.66.103:10086/eureka/,http://192.168.66.104:10086/eureka/">http://192.168.66.103:10086/eureka/,http://192.168.66.104:10086/eureka/</a></p><p>   -–</p><p>   server: port: 10086</p><p>   spring:</p><p>   profiles: eureka-server2 eureka:</p><p>   instance:</p><p>   hostname: 192.168.66.104 client:</p><p>   service-url: defaultZone:</p><p>   <a href="http://192.168.66.103:10086/eureka/,http://192.168.66.104:10086/eureka/">http://192.168.66.103:10086/eureka/,http://192.168.66.104:10086/eureka/</a></p><p>   在启动微服务的时候，加入参数: <strong>spring.proﬁles.active</strong> 来读取对应的配置</p><p>   其他微服务配置</p><p>   除了Eureka注册中心以外，其他微服务配置都需要加入所有Eureka服务</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">371.png)<br></code></pre></td></tr></table></figure><p>   # Eureka配置 eureka:</p><p>   client: service-url:</p><p>   defaultZone: <a href="http://192.168.66.103:10086/eureka,http://192.168.66.104:10086/eureka">http://192.168.66.103:10086/eureka,http://192.168.66.104:10086/eureka</a> # Eureka访问地址</p><p>   instance:</p><p>   prefer-ip-address: true</p><p>   把代码提交到Gitlab中</p><p>   设计<strong>Jenkins</strong>集群项目的构建参数 1）安装Extended Choice Parameter插件支持多选框</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">372.jpg)<br></code></pre></td></tr></table></figure><ol start="2"><li><p>创建流水线项目</p><p> 373.jpg)</p></li><li><p>添加参数</p></li></ol><p>字符串参数：分支名称</p><p> 374.jpg)</p><p>多选框：项目名称</p><p> 375.jpg)</p><p> 376.jpg)</p><p> 377.jpg)</p><p> 378.jpg)</p><p> 379.png)</p><p>tensquare_eureka_server@10086,tensquare_zuul@10020,tensquare_admin_service@9001, tensquare_gathering@9002</p><p>最后效果：</p><p> 380.jpg)</p><p> 381.png)</p><p>&#x2F;&#x2F;gitlab的凭证</p><p>def git_auth &#x3D; “68f2087f-a034-4d39-a9ff-1f776dd3dfa8”</p><p>完成微服务构建镜像，上传私服</p><p>&#x2F;&#x2F;构建版本的名称</p><p>def tag &#x3D; “latest”</p><p>&#x2F;&#x2F;Harbor私服地址</p><p>def harbor_url &#x3D; “192.168.66.102:85”</p><p>&#x2F;&#x2F;Harbor的项目名称</p><p>def harbor_project_name &#x3D; “tensquare”</p><p>&#x2F;&#x2F;Harbor的凭证</p><p>def harbor_auth &#x3D; “ef499f29-f138-44dd-975e-ff1ca1d8c933”</p><p>node {</p><p>&#x2F;&#x2F;把选择的项目信息转为数组</p><p>def selectedProjects &#x3D; “${project_name}”.split(‘,’)</p><p>stage(‘拉取代码’) {</p><p>checkout([$class: ‘GitSCM’, branches: [[name: ‘*&#x2F;${branch}’]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: ‘${git_auth}’, url: ‘<a href="mailto:&#103;&#105;&#116;&#64;&#49;&#57;&#x32;&#46;&#49;&#x36;&#56;&#46;&#x36;&#54;&#x2e;&#49;&#48;&#x30;">&#103;&#105;&#116;&#64;&#49;&#57;&#x32;&#46;&#49;&#x36;&#56;&#46;&#x36;&#54;&#x2e;&#49;&#48;&#x30;</a>:itheima_group&#x2F;tensquare_back_cluster.git’]]])</p><p>}</p><p>stage(‘代码审查’) {</p><p>def scannerHome &#x3D; tool ‘sonarqube-scanner’ withSonarQubeEnv(‘sonarqube6.7.4’) {</p><p>for(int i&#x3D;0;i&lt;selectedProjects.size();i++){</p><p>&#x2F;&#x2F;取出每个项目的名称和端口</p><p>def currentProject &#x3D; selectedProjects[i];</p><p>&#x2F;&#x2F;项目名称</p><p>def currentProjectName &#x3D; currentProject.split(‘@’)[0]</p><p>&#x2F;&#x2F;项目启动端口</p><p>def currentProjectPort &#x3D; currentProject.split(‘@’)[1]</p><p>sh “””</p><p>“””</p><p>cd ${currentProjectName}</p><p>${scannerHome}&#x2F;bin&#x2F;sonar-scanner</p><p>echo “${currentProjectName}完成代码审查”</p><p>}</p><p>}</p><p>}</p><p>stage(‘编译，构建镜像，部署服务’) {</p><p>&#x2F;&#x2F;编译并安装公共工程</p><p>sh “mvn -f tensquare_common clean install”</p><p>for(int i&#x3D;0;i&lt;selectedProjects.size();i++){</p><p>&#x2F;&#x2F;取出每个项目的名称和端口</p><p>def currentProject &#x3D; selectedProjects[i];</p><p>&#x2F;&#x2F;项目名称</p><p>def currentProjectName &#x3D; currentProject.split(‘@’)[0]</p><p>&#x2F;&#x2F;项目启动端口</p><p>def currentProjectPort &#x3D; currentProject.split(‘@’)[1]</p><p>&#x2F;&#x2F;定义镜像名称</p><p>def imageName &#x3D; “${currentProjectName}:${tag}”</p><p>&#x2F;&#x2F;编译，构建本地镜像</p><p> 382.png)</p><p> 383.png)</p><p>sh “mvn -f ${currentProjectName} clean package</p><p>dockerfile:build”</p><p>&#x2F;&#x2F;给镜像打标签</p><p>sh “docker tag ${imageName}</p><p>${harbor_url}&#x2F;${harbor_project_name}&#x2F;${imageName}”</p><p>&#x2F;&#x2F;登录Harbor，并上传镜像 withCredentials([usernamePassword(credentialsId:</p><p>“${harbor_auth}”, passwordVariable: ‘password’, usernameVariable: ‘username’)])</p><p>{</p><p>&#x2F;&#x2F;登录</p><p>sh “docker login -u ${username} -p ${password}</p><p>${harbor_url}”</p><p>&#x2F;&#x2F;上传镜像</p><p>sh “docker push</p><p>${harbor_url}&#x2F;${harbor_project_name}&#x2F;${imageName}”</p><p>}</p><p>&#x2F;&#x2F;删除本地镜像</p><p>sh “docker rmi -f ${imageName}” sh “docker rmi -f</p><p>${harbor_url}&#x2F;${harbor_project_name}&#x2F;${imageName}”</p><p>&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;以下为远程调用进行项目部署&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>&#x2F;&#x2F;sshPublisher(publishers: [sshPublisherDesc(configName: ‘master_server’, transfers: [sshTransfer(cleanRemote: false, excludes: ‘’, execCommand: “&#x2F;opt&#x2F;jenkins_shell&#x2F;deployCluster.sh $harbor_url</p><p>$harbor_project_name $currentProjectName $tag $currentProjectPort”, execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: ‘[, ]+’, remoteDirectory: ‘’, remoteDirectorySDF: false, removePrefix: ‘’, sourceFiles: ‘’)], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])</p><p>echo “${currentProjectName}完成编译，构建镜像”</p><p>}</p><p>}</p><p>}</p><p>完成微服务多服务器远程发布</p><ol><li><p>配置远程部署服务器</p><p> 384.png)</p><p>拷贝公钥到远程服务器</p><p> 385.png) ssh-copy-id 192.168.66.104</p><p> 386.png)</p><p>系统配置-&gt;添加远程服务器</p><p> 387.jpg)</p></li><li><p>修改Docker配置信任Harbor私服地址</p><p> 388.png)</p><p>{</p><p>“registry-mirrors”: [“<a href="https://zydiol88.mirror.aliyuncs.com"]">https://zydiol88.mirror.aliyuncs.com&quot;]</a>, “insecure-registries”: [“192.168.66.102:85”]</p><p>}</p><p>重启Docker</p></li><li><p>添加参数</p><p>多选框：部署服务器</p><p> 389.jpg)</p><p> 390.jpg)</p><p> 391.jpg)</p><p> 392.jpg)</p><p>最终效果：</p><p> 393.jpg)</p><p> 394.png)</p><p>&#x2F;&#x2F;gitlab的凭证</p><p>def git_auth &#x3D; “68f2087f-a034-4d39-a9ff-1f776dd3dfa8”</p><p>&#x2F;&#x2F;构建版本的名称</p><p>def tag &#x3D; “latest”</p><p>&#x2F;&#x2F;Harbor私服地址</p><p>def harbor_url &#x3D; “192.168.66.102:85”</p><p>&#x2F;&#x2F;Harbor的项目名称</p><p>def harbor_project_name &#x3D; “tensquare”</p><p>&#x2F;&#x2F;Harbor的凭证</p><p>def harbor_auth &#x3D; “ef499f29-f138-44dd-975e-ff1ca1d8c933”</p><p>node {</p><p>&#x2F;&#x2F;把选择的项目信息转为数组</p><p>def selectedProjects &#x3D; “${project_name}”.split(‘,’)</p><p>&#x2F;&#x2F;把选择的服务区信息转为数组</p><p>def selectedServers &#x3D; “${publish_server}”.split(‘,’)</p><p>stage(‘拉取代码’) {</p><p>checkout([$class: ‘GitSCM’, branches: [[name: ‘*&#x2F;${branch}’]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: ‘${git_auth}’, url: ‘<a href="mailto:&#103;&#105;&#116;&#x40;&#49;&#x39;&#x32;&#x2e;&#x31;&#54;&#56;&#x2e;&#54;&#x36;&#46;&#49;&#48;&#48;">&#103;&#105;&#116;&#x40;&#49;&#x39;&#x32;&#x2e;&#x31;&#54;&#56;&#x2e;&#54;&#x36;&#46;&#49;&#48;&#48;</a>:itheima_group&#x2F;tensquare_back_cluster.git’]]])</p><p>}</p></li><li><p>修改Jenkinsﬁle构建脚本</p><p>stage(‘代码审查’) {</p><p>def scannerHome &#x3D; tool ‘sonarqube-scanner’ withSonarQubeEnv(‘sonarqube6.7.4’) {</p><p>for(int i&#x3D;0;i&lt;selectedProjects.size();i++){</p><p>&#x2F;&#x2F;取出每个项目的名称和端口</p><p>def currentProject &#x3D; selectedProjects[i];</p><p>&#x2F;&#x2F;项目名称</p><p>def currentProjectName &#x3D; currentProject.split(‘@’)[0]</p><p>&#x2F;&#x2F;项目启动端口</p><p>def currentProjectPort &#x3D; currentProject.split(‘@’)[1]</p><p>sh “””</p><p>“””</p><p>cd ${currentProjectName}</p><p>${scannerHome}&#x2F;bin&#x2F;sonar-scanner</p><p>echo “${currentProjectName}完成代码审查”</p><p>}</p><p>}</p><p>}</p><p>stage(‘编译，构建镜像，部署服务’) {</p><p>&#x2F;&#x2F;编译并安装公共工程</p><p>sh “mvn -f tensquare_common clean install”</p><p>for(int i&#x3D;0;i&lt;selectedProjects.size();i++){</p><p>&#x2F;&#x2F;取出每个项目的名称和端口</p><p>def currentProject &#x3D; selectedProjects[i];</p><p>&#x2F;&#x2F;项目名称</p><p>def currentProjectName &#x3D; currentProject.split(‘@’)[0]</p><p>&#x2F;&#x2F;项目启动端口</p><p>def currentProjectPort &#x3D; currentProject.split(‘@’)[1]</p><p>&#x2F;&#x2F;定义镜像名称</p><p>def imageName &#x3D; “${currentProjectName}:${tag}”</p><p>&#x2F;&#x2F;编译，构建本地镜像</p><p>sh “mvn -f ${currentProjectName} clean package</p><p>dockerfile:build”</p><p>&#x2F;&#x2F;给镜像打标签</p><p>sh “docker tag ${imageName}</p><p>${harbor_url}&#x2F;${harbor_project_name}&#x2F;${imageName}”</p><p>&#x2F;&#x2F;登录Harbor，并上传镜像 withCredentials([usernamePassword(credentialsId:</p><p>“${harbor_auth}”, passwordVariable: ‘password’, usernameVariable: ‘username’)])</p><p>{</p><p>${harbor_url}”</p><p>&#x2F;&#x2F;登录</p><p>sh “docker login -u ${username} -p ${password}</p><p>&#x2F;&#x2F;上传镜像</p><p>sh “docker push</p><p>${harbor_url}&#x2F;${harbor_project_name}&#x2F;${imageName}”</p><p>}</p><p> 395.png)</p><p> 396.png)</p><p>&#x2F;&#x2F;删除本地镜像</p><p>sh “docker rmi -f ${imageName}” sh “docker rmi -f</p><p>${harbor_url}&#x2F;${harbor_project_name}&#x2F;${imageName}”</p><p>&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;以下为远程调用进行项目部署&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; for(int j&#x3D;0;j&lt;selectedServers.size();j++){</p><p>&#x2F;&#x2F;每个服务名称</p><p>def currentServer &#x3D; selectedServers[j]</p><p>&#x2F;&#x2F;添加微服务运行时的参数：spring.profiles.active def activeProfile &#x3D; “–spring.profiles.active&#x3D;”</p><p>if(currentServer&#x3D;&#x3D;”master_server”){</p><p>activeProfile &#x3D; activeProfile+”eureka-server1”</p><p>}else if(currentServer&#x3D;&#x3D;”slave_server1”){ activeProfile &#x3D; activeProfile+”eureka-server2”</p><p>}</p><p>sshPublisher(publishers: [sshPublisherDesc(configName: “${currentServer}”, transfers: [sshTransfer(cleanRemote: false, excludes: ‘’, execCommand: “&#x2F;opt&#x2F;jenkins_shell&#x2F;deployCluster.sh $harbor_url</p><p>$harbor_project_name $currentProjectName $tag $currentProjectPort</p><p>$activeProfile”, execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: ‘[, ]+’, remoteDirectory: ‘’, remoteDirectorySDF: false, removePrefix: ‘’, sourceFiles: ‘’)], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])</p><p>}</p><p>echo “${currentProjectName}完成编译，构建镜像”</p><p>}</p><p>}</p><p>}</p><p> 397.png)</p><p>#! &#x2F;bin&#x2F;sh #接收外部参数</p><p>harbor_url&#x3D;$1 harbor_project_name&#x3D;$2 project_name&#x3D;$3</p><p>tag&#x3D;$4 port&#x3D;$5 profile&#x3D;$6</p><p>imageName&#x3D;$harbor_url&#x2F;$harbor_project_name&#x2F;$project_name:$tag</p><p>echo “$imageName”</p><p>#查询容器是否存在，存在则删除</p><p>containerId&#x3D;<code>docker ps -a | grep -w $&#123;project_name&#125;:$&#123;tag&#125; | awk &#39;&#123;print $1&#125;&#39;</code> if [ “$containerId” !&#x3D; “” ] ; then</p><p>#停掉容器</p></li><li><p>编写deployCluster.sh部署脚本</p><p> 398.png)</p><p>docker stop $containerId</p><p>#删除容器</p><p>docker rm $containerId</p><p>echo “成功删除容器”</p><p>fi</p><p>#查询镜像是否存在，存在则删除</p><p>imageId&#x3D;<code>docker images | grep -w $project_name | awk &#39;&#123;print $3&#125;&#39;</code></p><p>if [ “$imageId” !&#x3D; “” ] ; then #删除镜像</p><p>docker rmi -f $imageId</p><p>echo “成功删除镜像”</p><p>fi</p><p># 登录Harbor私服</p><p>docker login -u itcast -p Itcast123 $harbor_url</p><p># 下载镜像</p><p>docker pull $imageName</p><p># 启动容器</p><p>docker run -di -p $port:$port $imageName $profile</p><p>echo “容器启动成功”</p></li><li><p>集群效果</p></li></ol><h3 id="Nginx-Zuul集群实现高可用网关"><a href="#Nginx-Zuul集群实现高可用网关" class="headerlink" title="Nginx+Zuul集群实现高可用网关"></a>Nginx+Zuul<strong>集群实现高可用网关</strong></h3><p> 399.jpg)</p><ol><li>安装Nginx（已完成） 2）修改Nginx配置</li></ol><p> 400.png) vi &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</p><p> 401.png)</p><p>upstream zuulServer{</p><p>内容如下：</p><p> 402.png)</p><p>server 192.168.66.103:10020 weight&#x3D;1;</p><p>server 192.168.66.104:10020 weight&#x3D;1;</p><p>}</p><p>server {</p><p>listen 85 default_server;</p><p>listen [::]:85 default_server; server_name _;</p><p>root &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</p><p># Load configuration files for the default server block. include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;</p><p>location &#x2F; {</p><p>### 指定服务器负载均衡服务器</p><p><a href="http://zuulserver/%3B">proxy_pass http</a><a href="http://zuulserver/%3B">:</a><a href="http://zuulserver/%3B">&#x2F;&#x2F;zuulServer&#x2F;;</a></p><p>}</p><p>3）重启Nginx： systemctl restart nginx 4）修改前端Nginx的访问地址</p><p> 403.jpg)</p><h2 id="6、基于Kubernetes-K8S构建Jenkins持续集成平台-上"><a href="#6、基于Kubernetes-K8S构建Jenkins持续集成平台-上" class="headerlink" title="6、基于Kubernetes&#x2F;K8S构建Jenkins持续集成平台(上)"></a>6<strong>、基于</strong>Kubernetes&#x2F;K8S<strong>构建</strong>Jenkins<strong>持续集成平台</strong>(<strong>上</strong>)</h2><h3 id="Jenkins的Master-Slave分布式构建"><a href="#Jenkins的Master-Slave分布式构建" class="headerlink" title="Jenkins的Master-Slave分布式构建"></a>Jenkins<strong>的</strong>Master-Slave<strong>分布式构建</strong></h3><p>什么是<strong>Master-Slave</strong>分布式构建</p><p> 404.jpg)</p><p>Jenkins的Master-Slave分布式构建，就是通过将构建过程分配到从属Slave节点上，从而减轻Master节点的压力，而且可以同时构建多个，有点类似负载均衡的概念。</p><p>如何实现<strong>Master-Slave</strong>分布式构建</p><ol><li><p>开启代理程序的TCP端口</p><p>Manage Jenkins -&gt; Conﬁgure Global Security</p><p> 405.jpg)</p></li><li><p>新建节点</p></li></ol><p>Manage Jenkins—Manage Nodes—新建节点</p><p> 406.jpg)</p><p> 407.jpg)</p><p> 408.jpg)</p><p>有两种在Slave节点连接Master节点的方法</p><p> 409.jpg)</p><p>我们选择第二种：</p><ol><li><p>安装和配置节点</p><p>下载agent.jar，并上传到Slave节点，然后执行页面提示的命令：</p><p> 410.png)</p><p>java -jar agent.jar -jnlpUrl <a href="http://192.168.66.101:8888/computer/slave1/slave-">http://192.168.66.101:8888/computer/slave1/slave-</a> agent.jnlp -secret f2ecbb99e0c81331e8b7a7917a94d478f39cb9763fc6c66d9a9741c61f9ae6d6 -workDir “&#x2F;root&#x2F;jenkins”</p><p>刷新页面</p><p> 411.jpg)</p></li><li><p>测试节点是否可用</p></li></ol><p>自由风格和Maven风格的项目：</p><p> 412.jpg)</p><p> 413.png)</p><p>node(‘slave1’) {</p><p>stage(‘check out’) {</p><p>checkout([$class: ‘GitSCM’, branches: [[name: ‘*&#x2F;master’]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: ‘68f2087f-a034-4d39-a9ff-1f776dd3dfa8’, url: ‘<a href="mailto:&#103;&#x69;&#x74;&#64;&#x31;&#x39;&#x32;&#x2e;&#49;&#54;&#56;&#x2e;&#54;&#x36;&#46;&#49;&#x30;&#x30;">&#103;&#x69;&#x74;&#64;&#x31;&#x39;&#x32;&#x2e;&#49;&#54;&#56;&#x2e;&#54;&#x36;&#46;&#49;&#x30;&#x30;</a>:itheima_group&#x2F;tensquare_back_cluster.git’]]])</p><p>}</p><p>}</p><p>流水线风格的项目：</p><h3 id="Kubernetes实现Master-Slave分布式构建方案"><a href="#Kubernetes实现Master-Slave分布式构建方案" class="headerlink" title="Kubernetes实现Master-Slave分布式构建方案"></a>Kubernetes<strong>实现</strong>Master-Slave<strong>分布式构建方案</strong></h3><p>传统<strong>Jenkins</strong>的<strong>Master-Slave</strong>方案的缺陷</p><p> 414.png)</p><p>Master节点发生单点故障时，整个流程都不可用了</p><p> 415.png)</p><p>每个 Slave节点的配置环境不一样，来完成不同语言的编译打包等操作，但是这些差异化的配置导致管理起来非常不方便，维护起来也是比较费劲</p><p> 416.png)</p><p>资源分配不均衡，有的 Slave节点要运行的job出现排队等待，而有的Slave节点处于空闲状态</p><p> 417.png)</p><p>资源浪费，每台 Slave节点可能是实体机或者VM，当Slave节点处于空闲状态时，也不会完全释放掉资源</p><p>以上种种问题，我们可以引入Kubernates来解决！</p><h4 id="Kubernates简介"><a href="#Kubernates简介" class="headerlink" title="Kubernates简介"></a>Kubernates<strong>简介</strong></h4><p>Kubernetes（简称，K8S）是Google开源的容器集群管理系统，在Docker技术的基础上，为容器化的应用提供部署运行、资源调度、服务发现和动态伸缩等一系列完整功能，提高了大规模容器集群管理的便捷性。 其主要功能如下：</p><p> 418.png)</p><p>使用Docker对应用程序包装(package)、实例化(instantiate)、运行(run)。</p><p> 419.png)</p><p> 420.png)</p><p> 421.png)</p><p>以集群的方式运行、管理跨机器的容器。以集群的方式运行、管理跨机器的容器。解决Docker跨机器容器之间的通讯问题。解决Docker跨机器容器之间的通讯问题。 Kubernetes的自我修复机制使得容器集群总是运行在用户期望的状态。</p><h4 id="Kubernates-Docker-Jenkins持续集成架构图"><a href="#Kubernates-Docker-Jenkins持续集成架构图" class="headerlink" title="Kubernates+Docker+Jenkins持续集成架构图"></a>Kubernates+Docker+Jenkins<strong>持续集成架构图</strong></h4><p> 422.jpg)</p><p> 423.jpg)</p><p>大致工作流程：手动&#x2F;自动构建 -&gt; Jenkins 调度 K8S API -＞动态生成 Jenkins Slave pod -＞ Slave pod拉取 Git 代码／编译／打包镜像 -＞推送到镜像仓库 Harbor -＞ Slave 工作完成，Pod 自动销毁 -＞部署到测试或生产 Kubernetes平台。（完全自动化，无需人工干预）</p><h4 id="Kubernates-Docker-Jenkins持续集成方案好处"><a href="#Kubernates-Docker-Jenkins持续集成方案好处" class="headerlink" title="Kubernates+Docker+Jenkins持续集成方案好处"></a>Kubernates+Docker+Jenkins<strong>持续集成方案好处</strong></h4><p> 424.png)</p><p>服务高可用：当 Jenkins Master 出现故障时，Kubernetes 会自动创建一个新的 Jenkins Master</p><p>容器，并且将 Volume 分配给新创建的容器，保证数据不丢失，从而达到集群服务高可用。</p><p> 425.png)</p><p>动态伸缩，合理使用资源：每次运行 Job 时，会自动创建一个 Jenkins Slave，Job 完成后，Slave自动注销并删除容器，资源自动释放，而且 Kubernetes 会根据每个资源的使用情况，动态分配 Slave 到空闲的节点上创建，降低出现因某节点资源利用率高，还排队等待在该节点的情况。</p><p> 426.png)</p><p>扩展性好：当 Kubernetes 集群的资源严重不足而导致 Job 排队等待时，可以很容易的添加一个</p><p>Kubernetes Node 到集群中，从而实现扩展。</p><h3 id="Kubeadm安装Kubernetes"><a href="#Kubeadm安装Kubernetes" class="headerlink" title="Kubeadm安装Kubernetes"></a>Kubeadm<strong>安装</strong>Kubernetes</h3><h4 id="Kubernetes的架构"><a href="#Kubernetes的架构" class="headerlink" title="Kubernetes的架构"></a>Kubernetes<strong>的架构</strong></h4><p> 427.jpg)</p><p>API Server：用于暴露Kubernetes API，任何资源的请求的调用操作都是通过kube-apiserver提供的接口进行的。</p><p>Etcd：是Kubernetes提供默认的存储系统，保存所有集群数据，使用时需要为etcd数据提供备份计划。</p><p>Controller-Manager：作为集群内部的管理控制中心，负责集群内的Node、Pod副本、服务端点</p><p>（Endpoint）、命名空间（Namespace）、服务账号（ServiceAccount）、资源定额</p><p>（ResourceQuota）的管理，当某个Node意外宕机时，Controller Manager会及时发现并执行自动化修复流程，确保集群始终处于预期的工作状态。</p><p>Scheduler：监视新创建没有分配到Node的Pod，为Pod选择一个Node。</p><p>Kubelet：负责维护容器的生命周期，同时负责Volume和网络的管理</p><p>Kube proxy：是Kubernetes的核心组件，部署在每个Node节点上，它是实现Kubernetes Service的通信与负载均衡机制的重要组件。</p><p>安装环境说明</p><table><thead><tr><th>主机名称</th><th>IP<strong>地址</strong></th><th>安装的软件</th></tr></thead><tbody><tr><td>代码托管服务器</td><td>192.168.66.100</td><td>Gitlab-12.4.2</td></tr><tr><td>Docker仓库服务器</td><td>192.168.66.102</td><td>Harbor1.9.2</td></tr><tr><td>k8s-master</td><td>192.168.66.101</td><td>kube-apiserver、kube-controller-manager、kube- scheduler、docker、etcd、calico，NFS</td></tr><tr><td>k8s-node1</td><td>192.168.66.103</td><td>kubelet、kubeproxy、Docker18.06.1-ce</td></tr><tr><td>k8s-node2</td><td>192.168.66.104</td><td>kubelet、kubeproxy、Docker18.06.1-ce</td></tr></tbody></table><p>三台机器都需要完成</p><p>修改三台机器的<strong>hostname</strong>及<strong>hosts</strong>文件</p><p> 428.png)</p><p>hostnamectl set-hostname k8s-master</p><p>hostnamectl set-hostname k8s-node1 hostnamectl set-hostname k8s-node2</p><p> 429.png)</p><p>cat &gt;&gt;&#x2F;etc&#x2F;hosts&lt;&lt;EOF 192.168.66.101 k8s-master 192.168.66.103 k8s-node1</p><p>192.168.66.104 k8s-node2 EOF</p><p>关闭防火墙和关闭<strong>SELinux</strong></p><p> 430.png)</p><p>systemctl stop ﬁrewalld systemctl disable ﬁrewalld</p><p>setenforce 0 临时关闭</p><p>vi &#x2F;etc&#x2F;sysconﬁg&#x2F;selinux 永久关闭改为SELINUX&#x3D;disabled</p><p>设置系统参数</p><p>设置允许路由转发，不对bridge的数据进行处理创建文件</p><p> 431.png)</p><p>vi &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf</p><p>内容如下：</p><p>net.bridge.bridge-nf-call-ip6tables &#x3D; 1 net.bridge.bridge-nf-call-iptables &#x3D; 1</p><p>net.ipv4.ip_forward &#x3D; 1 vm.swappiness &#x3D; 0</p><p>执行文件</p><p> 432.png)</p><p>sysctl -p &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf</p><p> 433.png)</p><p>cat &gt; &#x2F;etc&#x2F;sysconfig&#x2F;modules&#x2F;ipvs.modules &lt;&lt;EOF #!&#x2F;bin&#x2F;bash</p><p>modprobe – ip_vs modprobe – ip_vs_rr modprobe – ip_vs_wrr modprobe – ip_vs_sh</p><p>modprobe – nf_conntrack_ipv4 EOF</p><p>chmod 755 &#x2F;etc&#x2F;sysconfig&#x2F;modules&#x2F;ipvs.modules &amp;&amp; bash</p><p>&#x2F;etc&#x2F;sysconfig&#x2F;modules&#x2F;ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</p><p>kube-proxy<strong>开启</strong>ipvs<strong>的前置条件</strong></p><p> 434.png)</p><p><strong>所有节点关闭****swap</strong> swapoﬀ -a 临时关闭 vi &#x2F;etc&#x2F;fstab 永久关闭注释掉以下字段</p><p>&#x2F;dev&#x2F;mapper&#x2F;cl-swap swap swap defaults 0 0</p><p> 435.png)</p><p>安装<strong>kubelet</strong>、<strong>kubeadm</strong>、<strong>kubectl</strong> kubeadm: 用来初始化集群的指令。</p><p> 436.png)</p><p>kubelet: 在集群中的每个节点上用来启动 pod 和 container 等。</p><p> 437.png)</p><p>kubectl: 用来与集群通信的命令行工具。</p><p>清空yum缓存</p><p> 438.png)</p><p>yum clean all</p><p>设置yum安装源</p><p> 439.png)</p><p>cat &lt;<EOF > &#x2F;etc&#x2F;yum.repos.d&#x2F;kubernetes.repo [kubernetes]</p><p>name&#x3D;Kubernetes baseurl&#x3D;<a href="https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/">https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</a> enabled&#x3D;1</p><p>gpgcheck&#x3D;0 repo_gpgcheck&#x3D;0</p><p>gpgkey&#x3D;<a href="https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg">https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</a> <a href="https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg">https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</a> EOF</p><p>安装：</p><p> 440.png)</p><p>yum install -y kubelet kubeadm kubectl</p><p>kubelet设置开机启动（注意：先不启动，现在启动的话会报错）</p><p> 441.png)</p><p>systemctl enable kubelet</p><p> 442.png)</p><p>kubelet –version</p><p>查看版本</p><p>安装的是最新版本：Kubernetes v1.16.3（可能会变化）</p><p> 443.png)</p><p>kubeadm init –kubernetes-version&#x3D;1.17.0 \</p><p>–apiserver-advertise-address&#x3D;192.168.66.101 \</p><p>–image-repository registry.aliyuncs.com&#x2F;google_containers \</p><p>–service-cidr&#x3D;10.1.0.0&#x2F;16 \</p><p>–pod-network-cidr&#x3D;10.244.0.0&#x2F;16</p><h4 id="Master节点需要完成-1）运行初始化命令"><a href="#Master节点需要完成-1）运行初始化命令" class="headerlink" title="Master节点需要完成 1）运行初始化命令"></a>Master<strong>节点需要完成</strong> 1）运行初始化命令</h4><p>注意：apiserver-advertise-address这个地址必须是master机器的IP常用错误：</p><p>错误一：[WARNING IsDockerSystemdCheck]: detected “cgroupfs” as the Docker cgroup driver</p><p>作为Docker cgroup驱动程序。，Kubernetes推荐的Docker驱动程序是“systemd”</p><p>解决方案：修改Docker的配置: vi &#x2F;etc&#x2F;docker&#x2F;daemon.json，加入</p><p> 444.png)</p><p>{</p><p>“exec-opts”:[“native.cgroupdriver&#x3D;systemd”]</p><p>}</p><p>然后重启Docker</p><p>错误二：[ERROR NumCPU]: the number of available CPUs 1 is less than the required 2</p><p>解决方案：修改虚拟机的CPU的个数，至少为2个</p><p> 445.jpg)</p><p>安装过程日志：</p><p> 446.jpg)</p><p> 447.png)</p><p>kubeadm join 192.168.66.101:6443 –token 754snw.9xq9cotze1ybwnti \</p><p>–discovery-token-ca-cert-hash sha256:3372ff6717ea5997121213e2c9d63fa7c8cdfb031527e17f2e20254f382ea03a</p><p>最后，会提示节点安装的命令，必须记下来</p><p> 448.png)</p><p>systemctl restart kubelet</p><ol><li><p>启动kubelet</p><p> 449.jpg)</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">450.png)<br></code></pre></td></tr></table></figure><p>   mkdir -p $HOME&#x2F;.kube</p><p>   sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</p><ol start="2"><li><p>配置kubectl工具</p></li><li><p>安装Calico</p><p> 451.png)</p><p>mkdir k8s cd k8s</p><p>wget <a href="https://docs.projectcalico.org/v3.10/getting-">https://docs.projectcalico.org/v3.10/getting-</a> started&#x2F;kubernetes&#x2F;installation&#x2F;hosted&#x2F;kubernetes-datastore&#x2F;calico- networking&#x2F;1.7&#x2F;calico.yaml</p><p>sed -i ‘s&#x2F;192.168.0.0&#x2F;10.244.0.0&#x2F;g’ calico.yaml</p><p>kubectl apply -f calico.yaml</p><p> 452.png)</p><p>kubectl get pod –all-namespaces -o wide</p></li><li><p>等待几分钟，查看所有Pod的状态，确保所有Pod都是Running状态</p></li></ol><p> 453.jpg)</p><h4 id="Slave节点需要完成-1）让所有节点让集群环境"><a href="#Slave节点需要完成-1）让所有节点让集群环境" class="headerlink" title="Slave节点需要完成 1）让所有节点让集群环境"></a>Slave<strong>节点需要完成</strong> 1）让所有节点让集群环境</h4><p>使用之前Master节点产生的命令加入集群</p><p> 454.png)</p><p>kubeadm join 192.168.66.101:6443 –token 754snw.9xq9cotze1ybwnti \</p><p>–discovery-token-ca-cert-hash sha256:3372ff6717ea5997121213e2c9d63fa7c8cdfb031527e17f2e20254f382ea03a</p><p> 455.png)</p><p>systemctl start kubelet</p><ol><li><p>启动kubelet</p><p> 456.jpg)</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">457.png)<br></code></pre></td></tr></table></figure><p>   kubectl get nodes</p><ol start="2"><li>回到Master节点查看，如果Status全部为Ready，代表集群环境搭建成功！！！</li></ol><p> 458.jpg)</p><p> 459.png)</p><p>kubectl get nodes 查看所有主从节点的状态</p><p>kubectl get ns 获取所有namespace资源</p><p>kubectl get pods -n {$nameSpace} 获取指定namespace的pod</p><p>kubectl describe pod的名称 -n {$nameSpace} 查看某个pod的执行过程</p><p>kubectl logs –tail&#x3D;1000 pod的名称 | less 查看日志 kubectl create -f xxx.yml 通过配置文件创建一个集群资源对象 kubectl delete -f xxx.yml 通过配置文件删除一个集群资源对象</p><p>kubectl delete pod名称 -n {$nameSpace} 通过pod删除集群资源</p><p>kubectl get service -n {$nameSpace} 查看pod的service情况</p><h4 id="kubectl常用命令"><a href="#kubectl常用命令" class="headerlink" title="kubectl常用命令"></a>kubectl<strong>常用命令</strong></h4><h2 id="7、基于Kubernetes-K8S构建Jenkins持续集成平台-下"><a href="#7、基于Kubernetes-K8S构建Jenkins持续集成平台-下" class="headerlink" title="7、基于Kubernetes&#x2F;K8S构建Jenkins持续集成平台(下)"></a>7<strong>、基于</strong>Kubernetes&#x2F;K8S<strong>构建</strong>Jenkins<strong>持续集成平台</strong>(<strong>下</strong>)</h2><p>Jenkins-Master-Slave架构图回顾：</p><p> 460.jpg)</p><p>安装和配置<strong>NFS</strong></p><h4 id="NFS简介"><a href="#NFS简介" class="headerlink" title="NFS简介"></a>NFS<strong>简介</strong></h4><p>NFS（Network File System），它最大的功能就是可以通过网络，让不同的机器、不同的操作系统可以共享彼此的文件。我们可以利用NFS共享Jenkins运行的配置文件、Maven的仓库依赖文件等</p><h4 id="NFS安装"><a href="#NFS安装" class="headerlink" title="NFS安装"></a>NFS<strong>安装</strong></h4><p>我们把NFS服务器安装在192.168.66.101机器上</p><ol><li><p>安装NFS服务（在所有K8S的节点都需要安装）</p><p> 461.png)</p><p>yum install -y nfs-utils</p></li><li><p>创建共享目录</p><table><thead><tr><th>mkdir -p &#x2F;opt&#x2F;nfs&#x2F;jenkins</th><th></th><th></th></tr></thead><tbody><tr><td>vi &#x2F;etc&#x2F;exports</td><td>编写NFS的共享配置</td><td></td></tr><tr><td>内容如下:</td><td></td><td></td></tr><tr><td>&#x2F;opt&#x2F;nfs&#x2F;jenkins</td><td>*(rw,no_root_squash)</td><td>*代表对所有IP都开放此目录，rw是读写</td></tr></tbody></table><p> 462.png)</p><p>systemctl enable nfs 开机启动</p><p>systemctl start nfs 启动</p></li><li><p>启动服务</p><p> 463.png)</p><p>showmount -e 192.168.66.101</p></li><li><p>查看NFS共享目录</p></li></ol><p>在<strong>Kubernetes</strong>安装<strong>Jenkins-Master</strong></p><p>创建<strong>NFS client provisioner</strong></p><p>nfs-client-provisioner 是一个Kubernetes的简易NFS的外部provisioner，本身不提供NFS，需要现有的NFS服务器提供存储。</p><ol><li><p>上传nfs-client-provisioner构建文件</p><p> 464.jpg)</p><p>其中注意修改deployment.yaml，使用之前配置NFS服务器和目录</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">465.jpg)<br></code></pre></td></tr></table></figure><ol start="2"><li><p>构建nfs-client-provisioner的pod资源</p><p> 466.png)</p><p>cd nfs-client kubectl create -f .</p></li><li><p>查看pod是否创建成功</p></li></ol><p> 467.jpg)</p><p><strong>安装****Jenkins-Master</strong> 1）上传Jenkins-Master构建文件</p><p> 468.jpg)</p><p>其中有两点注意：</p><p>第一、在StatefulSet.yaml文件，声明了利用nfs-client-provisioner进行Jenkins-Master文件存储</p><p> 469.jpg)</p><p>第二、Service发布方法采用NodePort，会随机产生节点访问端口</p><p> 470.jpg)</p><ol><li><p>创建kube-ops的namespace</p><p> 471.png)</p><p>kubectl create namespace kube-ops</p><p>因为我们把Jenkins-Master的pod放到kube-ops下</p><p> 472.png)</p><p>cd jenkins-master kubectl create -f .</p></li><li><p>构建Jenkins-Master的pod资源</p><p> 473.png)</p><p>kubectl get pods -n kube-ops</p></li><li><p>查看pod是否创建成功</p></li><li><p>查看信息，并访问</p><p> 474.png)</p><p>kubectl describe pods -n kube-ops</p><p>查看Pod运行在那个Node上</p></li></ol><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">475</span>.<span class="hljs-keyword">jpg)</span><br><span class="hljs-keyword"></span><br><span class="hljs-number">476</span>.png)<br></code></pre></td></tr></table></figure><p>   kubectl get service -n kube-ops</p><p>   查看分配的端口</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">477.jpg)<br></code></pre></td></tr></table></figure><p>   最终访问地址为：<a href="http://192.168.66.103:30136/">http://192.168.66.103:30136</a> （192.168.66.103为k8s-node1的IP）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">478.jpg)<br></code></pre></td></tr></table></figure><p>   安装过程跟之前是一样的！</p><ol start="5"><li>先安装基本的插件</li></ol><p> 479.png)</p><p> 480.png)</p><p>Localization:Chinese Git</p><p> 481.png)</p><p>Pipeline</p><p> 482.png)</p><p>Extended Choice Parameter</p><h3 id="Jenkins与Kubernetes整合"><a href="#Jenkins与Kubernetes整合" class="headerlink" title="Jenkins与Kubernetes整合"></a>Jenkins<strong>与</strong>Kubernetes<strong>整合</strong></h3><p>安装<strong>Kubernetes</strong>插件</p><p>系统管理-&gt;插件管理-&gt;可选插件</p><p> 483.jpg)</p><p>实现<strong>Jenkins</strong>与<strong>Kubernetes</strong>整合</p><p>系统管理-&gt;系统配置-&gt;云-&gt;新建云-&gt;Kubernetes</p><p> 484.jpg)</p><p> 485.png)</p><p> 486.png)</p><p>kubernetes地址采用了kube<a href="https://kubernetes.default.svc.cluster.local/">的服务器发现：</a><a href="https://kubernetes.default.svc.cluster.local/">https://kubernetes.default.svc.cluster.local</a> namespace填kube-ops，然后点击Test Connection，如果出现 Connection test successful 的提示信息证明 Jenkins 已经可以和 Kubernetes 系统正常通信</p><p> 487.png)</p><p>Jenkins URL 地址：<a href="http://jenkins.kube-ops.svc.cluster.local:8080/">http://jenkins.kube-ops.svc.cluster.local:8080</a></p><p>构建<strong>Jenkins-Slave</strong>自定义镜像</p><p>Jenkins-Master在构建Job的时候，Kubernetes会创建Jenkins-Slave的Pod来完成Job的构建。我们选择运行Jenkins-Slave的镜像为官方推荐镜像：jenkins&#x2F;jnlp-slave:latest，但是这个镜像里面并没有Maven环境，为了方便使用，我们需要自定义一个新的镜像：</p><p>准备材料：</p><p> 488.jpg)</p><p> 489.png)</p><p>FROM jenkins&#x2F;jnlp-slave:latest</p><p>MAINTAINER itcast</p><p># 切换到 root 账户进行操作</p><p>USER root</p><p># 安装 maven</p><p>COPY apache-maven-3.6.2-bin.tar.gz .</p><p>RUN tar -zxf apache-maven-3.6.2-bin.tar.gz &amp;&amp; \ mv apache-maven-3.6.2 &#x2F;usr&#x2F;local &amp;&amp; \</p><p>rm -f apache-maven-3.6.2-bin.tar.gz &amp;&amp; \</p><p>ln -s &#x2F;usr&#x2F;local&#x2F;apache-maven-3.6.2&#x2F;bin&#x2F;mvn &#x2F;usr&#x2F;bin&#x2F;mvn &amp;&amp; \</p><p>Dockerﬁle文件内容如下：</p><p> 490.png)</p><p>ln -s &#x2F;usr&#x2F;local&#x2F;apache-maven-3.6.2 &#x2F;usr&#x2F;local&#x2F;apache-maven &amp;&amp; \ mkdir -p &#x2F;usr&#x2F;local&#x2F;apache-maven&#x2F;repo</p><p>COPY settings.xml &#x2F;usr&#x2F;local&#x2F;apache-maven&#x2F;conf&#x2F;settings.xml</p><p>USER jenkins</p><p> 491.png)</p><p>docker tag jenkins-slave-maven:latest 192.168.66.102:85&#x2F;library&#x2F;jenkins-slave- maven:latest</p><p>docker push 192.168.66.102:85&#x2F;library&#x2F;jenkins-slave-maven:latest</p><p>构建出一个新镜像：jenkins-slave-maven:latest然把镜像上传到Harbor的公共库library中</p><p>测试<strong>Jenkins-Slave</strong>是否可以创建</p><ol><li><p>创建一个Jenkins流水线项目</p><p> 492.jpg)</p><p> 493.png)</p><p>def git_address &#x3D; “<a href="http://192.168.66.100:82/itheima_group/tensquare_back_cluster.git">http://192.168.66.100:82/itheima_group/tensquare_back_cluster.git</a>“ def git_auth &#x3D; “9d9a2707-eab7-4dc9-b106-e52f329cbc95”</p><p>&#x2F;&#x2F;创建一个Pod的模板，label为jenkins-slave</p><p>podTemplate(label: ‘jenkins-slave’, cloud: ‘kubernetes’, containers: [ containerTemplate(</p><p>name: ‘jnlp’,</p><p>image: “192.168.66.102:85&#x2F;library&#x2F;jenkins-slave-maven:latest”</p><p>)</p><p>]</p><p>)</p><p>{</p><p>&#x2F;&#x2F;引用jenkins-slave的pod模块来构建Jenkins-Slave的pod node(“jenkins-slave”){</p><p>&#x2F;&#x2F; 第一步</p><p>stage(‘拉取代码’){</p><p>checkout([$class: ‘GitSCM’, branches: [[name: ‘master’]], userRemoteConfigs: [[credentialsId: “${git_auth}”, url: “${git_address}”]]])</p><p>}</p><p>}</p></li><li><p>编写Pipeline，从GItlab拉取代码</p><p> 494.png)</p><p>}</p></li><li><p>查看构建日志</p></li></ol><p> 495.jpg)</p><h3 id="Jenkins-Kubernetes-Docker完成微服务持续集成"><a href="#Jenkins-Kubernetes-Docker完成微服务持续集成" class="headerlink" title="Jenkins+Kubernetes+Docker完成微服务持续集成"></a>Jenkins+Kubernetes+Docker<strong>完成微服务持续集成</strong></h3><p>拉取代码，构建镜像</p><ol><li><p>创建NFS共享目录</p><p> 496.png)</p><p>vi &#x2F;etc&#x2F;exports</p><p>添加内容：</p><p>&#x2F;opt&#x2F;nfs&#x2F;jenkins</p><p>&#x2F;opt&#x2F;nfs&#x2F;maven</p><p>*(rw,no_root_squash)</p><p>*(rw,no_root_squash)</p><p>systemctl restart nfs 重启NFS</p><p>让所有Jenkins-Slave构建指向NFS的Maven的共享仓库目录</p></li><li><p>创建项目，编写构建Pipeline</p></li></ol><p> 497.png)</p><p>def git_address &#x3D; “<a href="http://192.168.66.100:82/itheima_group/tensquare_back_cluster.git">http://192.168.66.100:82/itheima_group/tensquare_back_cluster.git</a>“ def git_auth &#x3D; “9d9a2707-eab7-4dc9-b106-e52f329cbc95”</p><p>&#x2F;&#x2F;构建版本的名称</p><p>def tag &#x3D; “latest”</p><p>&#x2F;&#x2F;Harbor私服地址</p><p>def harbor_url &#x3D; “192.168.66.102:85”</p><p>&#x2F;&#x2F;Harbor的项目名称</p><p>def harbor_project_name &#x3D; “tensquare”</p><p>&#x2F;&#x2F;Harbor的凭证</p><p>def harbor_auth &#x3D; “71eff071-ec17-4219-bae1-5d0093e3d060”</p><p>podTemplate(label: ‘jenkins-slave’, cloud: ‘kubernetes’, containers: [ containerTemplate(</p><p>name: ‘jnlp’,</p><p>image: “192.168.66.102:85&#x2F;library&#x2F;jenkins-slave-maven:latest”</p><p>),</p><p>containerTemplate( name: ‘docker’,</p><p>image: “docker:stable”, ttyEnabled: true, command: ‘cat’</p><p>),</p><p>],</p><p>volumes: [</p><p>hostPathVolume(mountPath: ‘&#x2F;var&#x2F;run&#x2F;docker.sock’, hostPath: ‘&#x2F;var&#x2F;run&#x2F;docker.sock’),</p><p>nfsVolume(mountPath: ‘&#x2F;usr&#x2F;local&#x2F;apache-maven&#x2F;repo’, serverAddress: ‘192.168.66.101’ , serverPath: ‘&#x2F;opt&#x2F;nfs&#x2F;maven’),</p><p>],</p><p>)</p><p>{</p><p>node(“jenkins-slave”){</p><p>&#x2F;&#x2F; 第一步</p><p>stage(‘拉取代码’){</p><p>checkout([$class: ‘GitSCM’, branches: [[name: ‘${branch}’]],</p><p>userRemoteConfigs: [[credentialsId: “${git_auth}”, url: “${git_address}”]]])</p><p>}</p><p>&#x2F;&#x2F; 第二步</p><p>stage(‘代码编译’){</p><p>&#x2F;&#x2F;编译并安装公共工程</p><p>sh “mvn -f tensquare_common clean install”</p><p>}</p><p>&#x2F;&#x2F; 第三步</p><p>stage(‘构建镜像，部署项目’){</p><p>&#x2F;&#x2F;把选择的项目信息转为数组</p><p>def selectedProjects &#x3D; “${project_name}”.split(‘,’)</p><p>for(int i&#x3D;0;i&lt;selectedProjects.size();i++){</p><p>&#x2F;&#x2F;取出每个项目的名称和端口</p><p>def currentProject &#x3D; selectedProjects[i];</p><p>&#x2F;&#x2F;项目名称</p><p>def currentProjectName &#x3D; currentProject.split(‘@’)[0]</p><p>&#x2F;&#x2F;项目启动端口</p><p>def currentProjectPort &#x3D; currentProject.split(‘@’)[1]</p><p>&#x2F;&#x2F;定义镜像名称</p><p> 498.png)</p><p> 499.png)</p><p>def imageName &#x3D; “${currentProjectName}:${tag}”</p><p>&#x2F;&#x2F;编译，构建本地镜像</p><p>sh “mvn -f ${currentProjectName} clean package dockerfile:build”</p><p>container(‘docker’) {</p><p>&#x2F;&#x2F;给镜像打标签</p><p>sh “docker tag ${imageName}</p><p>${harbor_url}&#x2F;${harbor_project_name}&#x2F;${imageName}”</p><p>&#x2F;&#x2F;登录Harbor，并上传镜像 withCredentials([usernamePassword(credentialsId:</p><p>“${harbor_auth}”, passwordVariable: ‘password’, usernameVariable: ‘username’)])</p><p>{</p><p>&#x2F;&#x2F;登录</p><p>sh “docker login -u ${username} -p ${password}</p><p>${harbor_url}”</p><p>&#x2F;&#x2F;上传镜像</p><p>sh “docker push</p><p>${harbor_url}&#x2F;${harbor_project_name}&#x2F;${imageName}”</p><p>}</p><p>&#x2F;&#x2F;删除本地镜像</p><p>sh “docker rmi -f ${imageName}” sh “docker rmi -f</p><p>${harbor_url}&#x2F;${harbor_project_name}&#x2F;${imageName}”</p><p>}</p><p>}</p><p>}</p><p>}</p><p>}</p><p> 500.png)</p><p>chown -R jenkins:jenkins &#x2F;opt&#x2F;nfs&#x2F;maven chmod -R 777 &#x2F;opt&#x2F;nfs&#x2F;maven</p><p>注意：在构建过程会发现无法创建仓库目录，是因为NFS共享目录权限不足，需更改权限</p><p>还有Docker命令执行权限问题</p><p> 501.png)</p><p>chmod 777 &#x2F;var&#x2F;run&#x2F;docker.sock</p><p>需要手动上传父工程依赖到NFS的Maven共享仓库目录中</p><p> 502.jpg)</p><p>微服务部署到<strong>K8S</strong></p><p> 503.png)</p><p>server:</p><p>port: ${PORT:10086}</p><p>spring: application:</p><p>name: eureka</p><p>eureka: server:</p><p># 续期时间，即扫描失效服务的间隔时间（缺省为60*1000ms）</p><p>eviction-interval-timer-in-ms: 5000 enable-self-preservation: false use-read-only-response-cache: false</p><p>client:</p><p># eureka client间隔多久去拉取服务注册信息 默认30s registry-fetch-interval-seconds: 5 serviceUrl:</p><p>defaultZone: ${EUREKA_SERVER:<a href="http://127.0.0.1:${server.port}/eureka/}">http://127.0.0.1:${server.port}/eureka/}</a> instance:</p><p># 心跳间隔时间，即发送一次心跳之后，多久在发起下一次（缺省为30s）</p><p>lease-renewal-interval-in-seconds: 5</p><p># 在收到一次心跳之后，等待下一次心跳的空档时间，大于心跳间隔即可，即服务续约到期时间（缺省为90s）</p><p>lease-expiration-duration-in-seconds: 10 instance-id:</p><p>${EUREKA_INSTANCE_HOSTNAME:${spring.application.name}}:${server.port}@${random.l ong(1000000,9999999)}</p><p>hostname: ${EUREKA_INSTANCE_HOSTNAME:${spring.application.name}}</p><p>修改每个微服务的application.yml Eureka</p><p> 504.png)</p><p># Eureka配置 eureka:</p><p>client: serviceUrl:</p><p>defaultZone: <a href="http://eureka-0.eureka:[10086/eureka/](http://eureka-/),http[:](http://eureka-/)//eureka-">http://eureka-0.eureka:[10086/eureka/](http://eureka-/),http[:](http://eureka-/)//eureka-</a> 1.eureka:10086&#x2F;eureka&#x2F; # Eureka访问地址</p><p>instance: preferIpAddress: true</p><p>其他微服务需要注册到所有Eureka中</p><ol><li><p>安装Kubernetes Continuous Deploy插件</p><p> 505.jpg)</p></li><li><p>修改后的流水线脚本</p><p> 506.png)</p><p>def deploy_image_name &#x3D; “${harbor_url}&#x2F;${harbor_project_name}&#x2F;${imageName}”</p><p>&#x2F;&#x2F;部署到K8S sh “””</p><p>sed -i ‘s#$IMAGE_NAME#${deploy_image_name}#’</p><p>${currentProjectName}&#x2F;deploy.yml</p><p>sed -i ‘s#$SECRET_NAME#${secret_name}#’</p><p>${currentProjectName}&#x2F;deploy.yml</p><p>“””</p><p>kubernetesDeploy configs: “${currentProjectName}&#x2F;deploy.yml”, kubeconfigId: “${k8s_auth}”</p></li><li><p>建立k8s认证凭证</p></li></ol><p> 507.jpg)</p><p> 508.png)</p><p>cat &#x2F;root&#x2F;.kube&#x2F;config</p><p>kubeconﬁg到k8s的Master节点复制</p><ol><li><p>生成Docker凭证</p><p> 509.png)</p><p>docker login -u itcast -p Itcast123 192.168.66.102:85 登录Harbor</p><p>kubectl create secret docker-registry registry-auth-secret –docker- server&#x3D;192.168.66.102:85 –docker-username&#x3D;itcast –docker-password&#x3D;Itcast123 <a href="mailto:docker-email=itcast@itcast.cn">– docker-email</a><a href="mailto:docker-email=itcast@itcast.cn">&#x3D;</a><a href="mailto:&#105;&#x74;&#x63;&#x61;&#115;&#116;&#x40;&#x69;&#116;&#x63;&#x61;&#x73;&#116;&#x2e;&#99;&#x6e;">&#105;&#x74;&#x63;&#x61;&#115;&#116;&#x40;&#x69;&#116;&#x63;&#x61;&#x73;&#116;&#x2e;&#99;&#x6e;</a> 生成</p><p>kubectl get secret 查看密钥</p><p>Docker凭证，用于Kubernetes到Docker私服拉取镜像</p></li><li><p>在每个项目下建立deploy.xml Eureka的deply.yml</p><p> 510.png)</p><p> 511.png)</p><p>-–</p><p>apiVersion: v1 kind: Service metadata:</p><p>name: eureka labels:</p><p>app: eureka spec:</p><p>type: NodePort ports:</p><p>- port: 10086 name: eureka targetPort: 10086</p><p>selector: app: eureka</p><p>-–</p><p>apiVersion: apps&#x2F;v1 kind: StatefulSet metadata:</p><p>name: eureka spec:</p><p>serviceName: “eureka” replicas: 2</p><p>selector: matchLabels:</p><p>app: eureka template:</p><p>metadata: labels:</p><p>app: eureka spec:</p><p>imagePullSecrets:</p><ul><li><p>name: $SECRET_NAME containers:</p></li><li><p>name: eureka image: $IMAGE_NAME ports:</p><ul><li><p>containerPort: 10086 env:</p></li><li><p>name: MY_POD_NAME valueFrom:</p><p>fieldRef:</p><p>fieldPath: metadata.name</p></li><li><p>name: EUREKA_SERVER</p><p>value: <a href="http://eureka-/">“http://eureka-0.eureka:10086/eureka/,</a><a href="http://eureka-/">http://eureka-</a> 1.eureka:10086&#x2F;eureka&#x2F;“</p></li><li><p>name: EUREKA_INSTANCE_HOSTNAME</p></li></ul></li></ul><p>value: ${MY_POD_NAME}.eureka podManagementPolicy: “Parallel”</p><p> 512.png)</p><p>-–</p><p>apiVersion: v1 kind: Service metadata:</p><p>其他项目的deploy.yml主要把名字和端口修改：</p><p> 513.png)</p><p>name: zuul labels:</p><p>app: zuul spec:</p><p>type: NodePort ports:</p><p>- port: 10020 name: zuul targetPort: 10020</p><p>selector: app: zuul</p><p>-–</p><p>apiVersion: apps&#x2F;v1 kind: StatefulSet metadata:</p><p>name: zuul spec:</p><p>serviceName: “zuul” replicas: 2 selector:</p><p>matchLabels: app: zuul</p><p>template: metadata:</p><p>labels: app: zuul</p><p>spec:</p><p>imagePullSecrets:</p><ul><li>name: $SECRET_NAME containers:</li><li>name: zuul</li></ul><p>image: $IMAGE_NAME ports:</p><p>- containerPort: 10020 podManagementPolicy: “Parallel”</p><p> 514.png)</p><p>kubectl get pods -owide kubectl get service</p></li><li><p>项目构建后，查看服务创建情况</p></li></ol><p>效果如下：</p><p> 515.jpg)</p><p> 516.jpg)</p>]]></content>
    
    
    <categories>
      
      <category>持续集成</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
      <tag>CICD - Docker - k8s - SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装nvm，并使用nvm安装nodejs及配置环境变量</title>
    <link href="/2024/01/31/nvm-nodejs/"/>
    <url>/2024/01/31/nvm-nodejs/</url>
    
    <content type="html"><![CDATA[<h1 id="安装nvm，并使用nvm安装nodejs及配置环境变量"><a href="#安装nvm，并使用nvm安装nodejs及配置环境变量" class="headerlink" title="安装nvm，并使用nvm安装nodejs及配置环境变量"></a>安装nvm，并使用nvm安装nodejs及配置环境变量</h1><h2 id="一、安装nvm"><a href="#一、安装nvm" class="headerlink" title="一、安装nvm"></a>一、安装nvm</h2><h3 id="1、下载nvm"><a href="#1、下载nvm" class="headerlink" title="1、下载nvm"></a>1、下载nvm</h3><img src="/2024/01/31/nvm-nodejs/1d674a60a97e49f8afe1e51226eb0c69.png" class="" title="img"><p> 解压后点击exe文件进行安装：</p> <img src="/2024/01/31/nvm-nodejs/81ed644cb6064da0a115defe9bf5ec80.png" class="" title="img"><h3 id="2、点击下一步安装到-D-NVM-下"><a href="#2、点击下一步安装到-D-NVM-下" class="headerlink" title="2、点击下一步安装到 D:\NVM 下"></a>2、点击下一步安装到 D:\NVM 下</h3> <img src="/2024/01/31/nvm-nodejs/06732ac76b13448cab2d000d5b0ac07d.png" class="" title="img"><h3 id="3、指定安装文件夹"><a href="#3、指定安装文件夹" class="headerlink" title="3、指定安装文件夹"></a>3、指定安装文件夹</h3><p>先在D:\NVM 下创建nodejs文件夹，然后将路径设置如下：</p> <img src="/2024/01/31/nvm-nodejs/59338e22cf524d819170fe6d3cdad088.png" class="" title="img"><h3 id="4、点击next-一直点击-完成安装；"><a href="#4、点击next-一直点击-完成安装；" class="headerlink" title="4、点击next 一直点击 完成安装；"></a>4、点击next 一直点击 完成安装；</h3><h3 id="5、找到指定nvm打开后："><a href="#5、找到指定nvm打开后：" class="headerlink" title="5、找到指定nvm打开后："></a>5、找到指定nvm打开后：</h3><p>给该文件添加这两行命令:</p><blockquote><p>node_mirror: <a href="https://npm.taobao.org/mirrors/node/">https://npm.taobao.org/mirrors/node/</a></p><p>npm_mirror: <a href="https://npm.taobao.org/mirrors/npm/">https://npm.taobao.org/mirrors/npm/</a></p></blockquote><h3 id="6、环境变量配置："><a href="#6、环境变量配置：" class="headerlink" title="6、环境变量配置："></a>6、环境变量配置：</h3><p> 点击计算机<br> 右击点击属性<br>选择高级系统设置</p> <img src="/2024/01/31/nvm-nodejs/391470705e6c4d38b5fe92c08e1d7515.png" class="" title="img"><p> 4.点击环境变量</p><p> 5.查看环境变量是否配置（默认nvm安装成功后，自动生成）： </p><p>与如下配置（保持一致）： </p><img src="/2024/01/31/nvm-nodejs/75cfaa196a3d46ee9d7f27aee14f1acf.png" class="" title="img"><p> 验证nvm安装：<br>打开cmd，输入nvm -v</p><img src="/2024/01/31/nvm-nodejs/3cde6756ece347bd909039d587c6a2bb.png" class="" title="img"><p>返回版本号，说明成功。 </p><h2 id="二、安装node"><a href="#二、安装node" class="headerlink" title="二、安装node"></a>二、安装node</h2><h3 id="1、通过nvm安装node"><a href="#1、通过nvm安装node" class="headerlink" title="1、通过nvm安装node"></a>1、通过nvm安装node</h3><p>重新打开cmd，输入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell">nvm install node版本号  // 安装对应版本的node<br>nvm <span class="hljs-built_in">ls</span>                 // 用于查看已安装的node版本列表<br>nvm use node版本号     // 切换到对应版本的nodejs<br><br><br>如：<br>nvm install <span class="hljs-number">16.0</span>.<span class="hljs-number">0</span>  // 安装<span class="hljs-number">16.0</span>.<span class="hljs-number">0</span>版本的nodejs<br>nvm use <span class="hljs-number">16.0</span>.<span class="hljs-number">0</span>   // 使用<span class="hljs-number">16.0</span>.<span class="hljs-number">0</span>版本的nodejs<br> 查看node版本号的网址：https://nodejs.org/en/download/releases/<br></code></pre></td></tr></table></figure><h3 id="2、node环境变量配置"><a href="#2、node环境变量配置" class="headerlink" title="2、node环境变量配置"></a>2、node环境变量配置</h3><ul><li>1.首先在NVM的安装目录新建两个文件夹node_global和node_cache</li></ul><img src="/2024/01/31/nvm-nodejs/d3a452833a1a411a8c78685699466013.png" class="" title="img"><ul><li>2.创建完两个文件夹后</li></ul><p>在cmd窗口中输入以下命令（两个路径即是两个文件夹的路径）：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-built_in">set</span><span class="hljs-built_in"> prefix </span><span class="hljs-string">&quot;D:\NVM\node_global&quot;</span><br>npm<span class="hljs-built_in"> config </span><span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;D:\NVM\node_cache&quot;</span><br></code></pre></td></tr></table></figure><ul><li><p>3.接下来设置电脑环境变量</p><p>右键“我的电脑”&#x3D;》属性&#x3D;》高级系统设置&#x3D;》环境变量 进入以下环境变量对话框。</p><p>（1）先设置用户变量 </p><img src="/2024/01/31/nvm-nodejs/637ce92c68564b3b9b83f708ba41aece.png" class="" title="img"><p>注意：【用户变量】中的path变量，%NVM_HOME%  和  %NVM_SYMLINK% 理论上是nvm安装成功后自动生成的。</p><p>如果有C:UsershuaAppDataRoaming npm，则将其修改为D:\NVM\node_global，如果没有就自己新建D:\NVM\node_global，总之保证有以上内容。</p><p>（2）再设置系统变量 — Path变量的设置和用户变量中一致</p><img src="/2024/01/31/nvm-nodejs/8ac957b9607a445e83f6ad595777df08.png" class="" title="img"></li><li><p>4.在【系统变量】新建环境变量 NODE_PATH</p><p>值为D:\NVM\node_global\node_modules，其中D:\NVM\node_global\node_modules是上述创建的全局模块安装路径文件夹</p><img src="/2024/01/31/nvm-nodejs/ed0c53e1e97a4d77bbd6ae3f5220230a.png" class="" title="img"></li><li><p>5.所有设置完点击确定，即配置完成。</p></li></ul><h2 id="三、安装Vue"><a href="#三、安装Vue" class="headerlink" title="三、安装Vue"></a>三、安装Vue</h2><h3 id="1、切换镜像源"><a href="#1、切换镜像源" class="headerlink" title="1、切换镜像源"></a>1、切换镜像源</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config set registry=https:<span class="hljs-comment">//registry.npm.taobao.org/</span><br><br>npm config set registry http:<span class="hljs-comment">//mirrors.cloud.tencent.com/npm/</span><br></code></pre></td></tr></table></figure><h3 id="2、查看当前镜像下包源"><a href="#2、查看当前镜像下包源" class="headerlink" title="2、查看当前镜像下包源"></a>2、查看当前镜像下包源</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-built_in">get</span> registry <br></code></pre></td></tr></table></figure> <img src="/2024/01/31/nvm-nodejs/ea2602bdadec44daa24688d13d22ec32.png" class="" title="img"><h3 id="3、安装vue、vue-cli、webpack"><a href="#3、安装vue、vue-cli、webpack" class="headerlink" title="3、安装vue、vue-cli、webpack"></a>3、安装vue、vue-cli、webpack</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> vue -g<br>npm <span class="hljs-keyword">install</span> vue-cli -g<br>npm <span class="hljs-keyword">install</span> webpack -g<br></code></pre></td></tr></table></figure><p>检查Vue是否安装成功<br>返回版本号则说明安装成功，注意V是大写，小写不成功</p><p>注意：我安装以上包的时候，使用的nodejs版本是16.0.0，因为开始使用18.0.0时由于版本过高，无法成功安装vue。</p><pre><code class="hljs"> 版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。 原文链接：https://blog.csdn.net/JJ_Smilewang/article/details/127823953</code></pre><h2 id="四、本机测试"><a href="#四、本机测试" class="headerlink" title="四、本机测试"></a>四、本机测试</h2><h3 id="1、先查看版本列表"><a href="#1、先查看版本列表" class="headerlink" title="1、先查看版本列表"></a>1、先查看版本列表</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nvm list</span><br></code></pre></td></tr></table></figure><h3 id="2、再安装版本20-11-0"><a href="#2、再安装版本20-11-0" class="headerlink" title="2、再安装版本20.11.0"></a>2、再安装版本20.11.0</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvm</span> install v20.<span class="hljs-number">11</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="3、使用新版本"><a href="#3、使用新版本" class="headerlink" title="3、使用新版本"></a>3、使用新版本</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvm</span> use <span class="hljs-number">20</span>.<span class="hljs-number">11</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="4、查看node新版本"><a href="#4、查看node新版本" class="headerlink" title="4、查看node新版本"></a>4、查看node新版本</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br></code></pre></td></tr></table></figure><h3 id="5、完整日志"><a href="#5、完整日志" class="headerlink" title="5、完整日志"></a>5、完整日志</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-literal">INF</span>O  Hexo is running at http://localhost:<span class="hljs-number">4000</span>/ . Press Ctrl+C to <span class="hljs-literal">stop</span>.<br>(<span class="hljs-keyword">node</span><span class="hljs-title">:20048</span>) [DEP0066] DeprecationWarning: OutgoingMessage.prototype._headers is deprecated<br>(Use `<span class="hljs-keyword">node</span> <span class="hljs-title">--trace-deprecation</span> ...` to show where the warning was created)<br>Hexo pro 插件正在运行...<br><span class="hljs-literal">INF</span>O  Bye!<br>PS D:\<span class="hljs-number">04</span>_GitHub\hexo-project\Hexo-BlueLake-Blog&gt; nvm install v20.<span class="hljs-number">11.0</span><br>Downloading node.js <span class="hljs-keyword">version</span> <span class="hljs-number">20.11</span>.<span class="hljs-number">0</span> (<span class="hljs-number">64</span>-bit)... <br>Extracting <span class="hljs-keyword">node</span> <span class="hljs-title">and</span> npm...<br>Complete<br>npm v10.<span class="hljs-number">2.4</span> installed successfully.<br><br><br>Installation complete. If you want to use this <span class="hljs-keyword">version</span>, <span class="hljs-keyword">type</span><br><br>nvm use <span class="hljs-number">20.11</span>.<span class="hljs-number">0</span><br>PS D:\<span class="hljs-number">04</span>_GitHub\hexo-project\Hexo-BlueLake-Blog&gt; nvm list<br><br>    <span class="hljs-number">20.11</span>.<span class="hljs-number">0</span><br>  * <span class="hljs-number">19.5</span>.<span class="hljs-number">0</span> (Currently using <span class="hljs-number">64</span>-bit executable)<br>    <span class="hljs-number">14.20</span>.<span class="hljs-number">1</span><br>    <span class="hljs-number">14.18</span>.<span class="hljs-number">2</span><br>    <span class="hljs-number">12.22</span>.<span class="hljs-number">12</span><br>    <span class="hljs-number">12.13</span>.<span class="hljs-number">0</span><br>    <span class="hljs-number">11.6</span>.<span class="hljs-number">0</span><br>    <span class="hljs-number">9.11</span>.<span class="hljs-number">2</span><br>PS D:\<span class="hljs-number">04</span>_GitHub\hexo-project\Hexo-BlueLake-Blog&gt; nvm use <span class="hljs-number">20.11</span>.<span class="hljs-number">0</span><br>Now using <span class="hljs-keyword">node</span> <span class="hljs-title">v20</span>.<span class="hljs-number">11.0</span> (<span class="hljs-number">64</span>-bit)<br>PS D:\<span class="hljs-number">04</span>_GitHub\hexo-project\Hexo-BlueLake-Blog&gt; <span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>v20.<span class="hljs-number">11.0</span><br>PS D:\<span class="hljs-number">04</span>_GitHub\hexo-project\Hexo-BlueLake-Blog&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>经验点滴</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nvm - nodejs</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/01/31/Promise/"/>
    <url>/2024/01/31/Promise/</url>
    
    <content type="html"><![CDATA[<p>差不多 <a href="https://www.jianshu.com/u/111497859846">https://www.jianshu.com/u/111497859846</a> 最新回答 &#x2F; 不朽的战斗机</p><p>回调的四个问题</p><p>Promise 详解<br>new Promise(<br>    &#x2F;* 执行器 executor *&#x2F;<br>    function (resolve, reject){<br>        resolve() &#x2F;&#x2F; 数据处理完成</p><pre><code class="hljs">    reject() // 数据处理出错&#125;</code></pre><p>).then(function A() {<br>        &#x2F;&#x2F; 成功，下一步<br>    }, function B() {<br>        &#x2F;&#x2F; 失败，做相应处理<br>    }<br>);</p><p>Promise 是一个代理对象，他和原先要进行的操作并无关系<br>它通过引入一个回调，避免更多的回调</p><h3 id="Promise-的3种状态："><a href="#Promise-的3种状态：" class="headerlink" title="Promise 的3种状态："></a>Promise 的3种状态：</h3><table><thead><tr><th align="left">英文</th><th align="center">中文</th><th align="right">说明</th></tr></thead><tbody><tr><td align="left">pending</td><td align="center">[待定]</td><td align="right">初始状态</td></tr><tr><td align="left">fulfilled</td><td align="center">[实现]</td><td align="right">操作成功</td></tr><tr><td align="left">rejected</td><td align="center">[被否决]</td><td align="right">操作失败</td></tr></tbody></table><p>Promise 状态发生改变，就会触发 .then() 里的响应函数处理后续步骤。<br>Promise 状态一经改变，不会再变。</p><h3 id="Promise-实例一经创建，执行器立即执行。"><a href="#Promise-实例一经创建，执行器立即执行。" class="headerlink" title="Promise 实例一经创建，执行器立即执行。"></a>Promise 实例一经创建，执行器立即执行。</h3><p><img src="/Promise%5CPromise_01.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo + Typora + 开发Hexo插件 解决图片路径不一致</title>
    <link href="/2024/01/31/hexo-typora/"/>
    <url>/2024/01/31/hexo-typora/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Typora-开发Hexo插件-解决图片路径不一致"><a href="#Hexo-Typora-开发Hexo插件-解决图片路径不一致" class="headerlink" title="Hexo + Typora + 开发Hexo插件 解决图片路径不一致"></a>Hexo + Typora + 开发Hexo插件 解决图片路径不一致</h1><blockquote><p>一直用 VSCode 编辑 markdown，图片只能分成两边窗口预览，体验实在不好，更麻烦的是，发布时需要更改图片路径，一更改，Hexo图片显示出来了，本地又无法预览了，本文将 介绍</p><ul><li>使用Typora实时预览markdown</li><li>配置图片路径</li><li>开发 Hexo 插件解决 图片本地预览 与 发布时图片路径 不一致 问题</li></ul></blockquote><h2 id="1-下载安装-Typora"><a href="#1-下载安装-Typora" class="headerlink" title="1. 下载安装 Typora"></a>1. 下载安装 Typora</h2><p><a href="https://typora.io/">https://typora.io/</a></p><h2 id="2-配置-Typora-图片路径"><a href="#2-配置-Typora-图片路径" class="headerlink" title="2. 配置 Typora 图片路径"></a>2. 配置 Typora 图片路径</h2> <img src="/2024/01/31/hexo-typora/image-5f4b358d49ecff6196bdedac1b022c2a-17066655623931.png" class="" title="img"> <img src="/2024/01/31/hexo-typora/image-c3df7eb6e26d520ff42b722a2c83f2bb-17066656091553.png" class="" title="img"><p>图片文件保存路径: <code>./$&#123;filename&#125;</code> 即保存到与 当前正在编辑的文件名 相同的同级文件夹下</p><p>下面三项依次为</p><ul><li><p>对本地位置的图片应用上述规则</p></li><li><p>对网络位置的图片应用上述规则</p></li><li><p>优先使用相对路径</p><p>建议都勾选上，至少要勾选上第一项</p></li></ul><blockquote><p>PS：使用 <code>Ctrl+V</code> 粘贴 即可复制图片到Typora图片文件夹</p></blockquote><h2 id="3-配置-Hexo-图片文件夹"><a href="#3-配置-Hexo-图片文件夹" class="headerlink" title="3. 配置 Hexo 图片文件夹"></a>3. 配置 Hexo 图片文件夹</h2><img src="/2024/01/31/hexo-typora/image-4fefcdb6876c6f7ec8e002cdcddde463-17066656444805.png" class="" title="img"><p>在 Hexo 根目录打开配置文件 <code>_config.yml</code></p><p>搜索 <code>post_asset_folder</code>，<code>false</code> 改为 <code>true</code></p><img src="/2024/01/31/hexo-typora/image-b288223fe2dd6816890d13f9e580be35-17066657201499.png" class="" title="img"><p>这样修改后，每次 ‘hexo new page’ 生成新文章，都会在文章文件同级目录创建一个与文章文件名同名的文件夹，我们就在这里存放此文章的图片。</p><img src="/2024/01/31/hexo-typora/image-303f4cfea59a8aa80059fc9b56e96cc0-170666573765311.png" class="" title="img"><blockquote><p>PS: 这被称为 <code>文章资源文件夹</code>, 参考官方文档： <a href="https://hexo.io/zh-cn/docs/asset-folders">https://hexo.io/zh-cn/docs/asset-folders</a></p></blockquote><h2 id="4-开发-Hexo-转换图片路径-插件"><a href="#4-开发-Hexo-转换图片路径-插件" class="headerlink" title="4. 开发 Hexo 转换图片路径 插件"></a>4. 开发 Hexo 转换图片路径 插件</h2><p>现在，我们在 <code>Typora</code>下使用 <code>![example](postname/example.jpg)</code>引用图片，享受实时预览，但需发布到 <code>Hexo</code>，使之发布后能正确加载我们的图片，还需要做以下转换:</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">![<span class="hljs-built_in">example</span>](postname/<span class="hljs-built_in">example</span>.jpg) --&gt; &#123;<span class="hljs-symbol">%</span> asset_img <span class="hljs-built_in">example</span>.jpg <span class="hljs-built_in">example</span> <span class="hljs-symbol">%</span>&#125;<br></code></pre></td></tr></table></figure><p>而这个转换我们需要在文章编译为html之前，在编译过程中转换为 这样的标签<code>&#123;% asset_img example.jpg example %&#125;</code></p><blockquote><p>PS: <a href="https://hexo.io/zh-cn/docs/asset-folders#%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%BC%95%E7%94%A8%E7%9A%84%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6">Hexo官方文档 - 相对路径引用的标签插件</a></p></blockquote><h3 id="4-1-创建文件夹-hexo-asset-img，初始化npm包"><a href="#4-1-创建文件夹-hexo-asset-img，初始化npm包" class="headerlink" title="4.1 创建文件夹 hexo-asset-img，初始化npm包"></a>4.1 创建文件夹 <code>hexo-asset-img</code>，初始化npm包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> hexo-asset-img<br><span class="hljs-built_in">cd</span> hexo-asset-img<br>npm init<br></code></pre></td></tr></table></figure><img src="/2024/01/31/hexo-typora/image-2c872375cf8af43072ef10ed213b13d6-170666584365819.png" class="" title="img"><h3 id="4-2-编写插件-index-js"><a href="#4-2-编写插件-index-js" class="headerlink" title="4.2 编写插件 index.js"></a>4.2 编写插件 <code>index.js</code></h3><p>创建 <code>index.js</code>，编写代码如下</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const <span class="hljs-built_in">log</span> = require(<span class="hljs-string">&#x27;hexo-log&#x27;</span>)(&#123; <span class="hljs-string">&#x27;debug&#x27;</span>: <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;slient&#x27;</span>: <span class="hljs-literal">false</span> &#125;);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * md文件返回 true</span><br><span class="hljs-comment"> * @param &#123;*&#125; data </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ignore</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 好奇怪，试了一下, md返回true, 但却需要忽略 取反!</span><br>    <span class="hljs-keyword">var</span> source = data.source;<br>    <span class="hljs-keyword">var</span> ext = source.substring(source.lastIndexOf(<span class="hljs-string">&#x27;.&#x27;</span>)).toLowerCase();<br>    <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;md&#x27;</span>,].<span class="hljs-built_in">indexOf</span>(ext) &gt; <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-keyword">var</span> reverseSource = data.source.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-built_in">reverse</span>().join(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">var</span> fileName = reverseSource.substring(<span class="hljs-number">3</span>, reverseSource.<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&quot;/&quot;</span>)).<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-built_in">reverse</span>().join(<span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-comment">// ![example](postname/example.jpg)  --&gt;  &#123;% asset_img example.jpg example %&#125;</span><br>    <span class="hljs-keyword">var</span> regExp = RegExp(<span class="hljs-string">&quot;!\\[(.*?)\\]\\(&quot;</span> + fileName + <span class="hljs-string">&#x27;/(.+?)\\)&#x27;</span>, <span class="hljs-string">&quot;g&quot;</span>);<br>    <span class="hljs-comment">// hexo g</span><br>    data.content = data.content.<span class="hljs-built_in">replace</span>(regExp, <span class="hljs-string">&quot;&#123;% asset_img $2 $1 %&#125;&quot;</span>,<span class="hljs-string">&quot;g&quot;</span>);<br><br>    <span class="hljs-comment">// log.info(`hexo-asset-img: filename: $&#123;fileName&#125;, title: $&#123;data.title.trim()&#125;`);</span><br>    <br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br><br>hexo.extend.<span class="hljs-built_in">filter</span>.register(<span class="hljs-string">&#x27;before_post_render&#x27;</span>,(data)=&gt;&#123;<br>    <span class="hljs-keyword">if</span>(!ignore(data))&#123;<br>        action(data)<br>    &#125;<br>&#125;, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h3 id="4-3-本地测试插件"><a href="#4-3-本地测试插件" class="headerlink" title="4.3 本地测试插件"></a>4.3 本地测试插件</h3><ol><li><code>Hexo</code>根目录下 <code>package.json</code> 中 <code>dependencies</code>添加一行 <code>&quot;hexo-asset-img&quot;: &quot;^1.0.0&quot;,</code></li><li>将 <code>hexo-asset-img</code>文件夹复制到 <code>Hexo</code>根目录下 <code>node_modules</code>文件夹下</li></ol><blockquote><p>注意：二者缺一不可，笔者试过不修改 <code>package.json</code> ，但没成功加载插件</p></blockquote><p>重新生成文章</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> clean<br>hexo g<br>hexo s <span class="hljs-comment"># 本地预览</span><br></code></pre></td></tr></table></figure><blockquote><p>PS：当然之后你还需要修正以前文章的图片路径</p></blockquote><p><code>public/posts</code> 生成结果如下图所示，成功</p><img src="/2024/01/31/hexo-typora/image-49faf02cc39fc79b7d41181b34026384-170666580369415.png" class="" title="img"><p>图片路径被转换成功</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;/posts/hexo-typora/image-2c872375cf8af43072ef10ed213b13d6.png&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;image-20201128103300470&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="4-4-发布插件"><a href="#4-4-发布插件" class="headerlink" title="4.4 发布插件"></a>4.4 发布插件</h3><blockquote><p>注意: 你需要先登录 <code>npm login</code></p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">npm publish <span class="hljs-params">--registry</span> https:<span class="hljs-string">//registry.npmjs.org</span><br></code></pre></td></tr></table></figure><img src="/2024/01/31/hexo-typora/image-b0e539a443bb2dcc1aca24229a412d5b-170666581834717.png" class="" title="img"><h2 id="5-使用插件"><a href="#5-使用插件" class="headerlink" title="5. 使用插件"></a>5. 使用插件</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm install hexo-asset-<span class="hljs-selector-tag">img</span> <span class="hljs-attr">--save</span><br></code></pre></td></tr></table></figure><blockquote><p>关联 GitHub</p><p><a href="https://github.com/yiyungent/hexo-asset-img">yiyungent&#x2F;hexo-asset-img: Hexo插件: 转换 图片相对路径 为 asset_img</a></p><p><a href="https://github.com/yiyungent/hexo-asset-img">https://github.com/yiyungent/hexo-asset-img</a></p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>感谢帮助！</p><ul><li><p><a href="https://www.cnblogs.com/guide2it/p/11111715.html">Hexo+NexT（六）：手把手教你编写一个Hexo过滤器插件</a></p></li><li><p><strong>本文作者：</strong> yiyun</p></li><li><p><strong>本文链接：</strong> <a href="https://moeci.com/posts/hexo-typora/">https://moeci.com/posts/hexo-typora/</a></p></li><li><p><strong>版权声明：</strong> 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">BY-NC-SA</a> 许可协议。转载请注明出处！</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>经验点滴</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用腾讯云镜像源加速npm</title>
    <link href="/2024/01/30/%E4%BD%BF%E7%94%A8%E8%85%BE%E8%AE%AF%E4%BA%91%E9%95%9C%E5%83%8F%E6%BA%90%E5%8A%A0%E9%80%9Fnpm/"/>
    <url>/2024/01/30/%E4%BD%BF%E7%94%A8%E8%85%BE%E8%AE%AF%E4%BA%91%E9%95%9C%E5%83%8F%E6%BA%90%E5%8A%A0%E9%80%9Fnpm/</url>
    
    <content type="html"><![CDATA[<p>使用前请确保您已安装Node.js及npm<br>设置方法<br>运行以下命令：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">npm config <span class="hljs-keyword">set</span> registry <span class="hljs-comment">http:</span>//<span class="hljs-comment">mirrors.cloud.tencent.com</span>/npm/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CentOS设置node环境变量</title>
    <link href="/2024/01/30/CentOS%E8%AE%BE%E7%BD%AEnode%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <url>/2024/01/30/CentOS%E8%AE%BE%E7%BD%AEnode%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<ul><li><p>1.查询是否有node</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">echo</span> $PATH     <span class="hljs-string">//</span>查看是否有<span class="hljs-string">/usr/local/bin</span>。<br><span class="hljs-keyword">ls</span> -l <span class="hljs-string">/usr/local/bin</span> | grep node     <span class="hljs-string">//</span>看看node是否确实存在。<br><span class="hljs-keyword">ls</span> -l <span class="hljs-string">/usr/local/bin/node</span>            <span class="hljs-string">//</span>同上<br></code></pre></td></tr></table></figure></li><li><p>2.进入管理员权限</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">su</span> root / sudo <span class="hljs-keyword">su</span><br></code></pre></td></tr></table></figure></li><li><p>3.profile文件更改</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">//如果<span class="hljs-keyword">profile</span>文件不存在<br>touch  /etc/<span class="hljs-keyword">profile</span><br><span class="hljs-keyword">vi</span> /etc/<span class="hljs-keyword">profile</span><br></code></pre></td></tr></table></figure><blockquote><p>然后输入下列代码,并保存</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">NODE_HOME</span>=<span class="hljs-string">&quot;/usr/local&quot;</span><br><span class="hljs-built_in">export</span> NODE_HOME<br><span class="hljs-attribute">CLASS_PATH</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$NODE_HOME</span>&quot;</span><br><span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;.<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$NODE_HOME</span>/bin/&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>4.profile激活</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>1、持续集成及Jenkins介绍</title>
    <link href="/2024/01/30/1%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%8F%8AJenkins%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/01/30/1%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%8F%8AJenkins%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="1、持续集成及Jenkins介绍"><a href="#1、持续集成及Jenkins介绍" class="headerlink" title="1、持续集成及Jenkins介绍"></a>1<strong>、持续集成及</strong>Jenkins<strong>介绍</strong></h2><p>软件开发生命周期</p><p>软件开发生命周期又叫做<strong>SDLC</strong>（Software Development Life Cycle），它是集合了计划、开发、测试和部署过程的集合。如下图所示 ：</p><p><img src="/images/pasted-1706590229965.png" alt="upload successful"></p><ul><li>需求分析</li></ul><p>这是生命周期的第一阶段，根据项目需求，团队执行一个可行性计划的分析。项目需求可能是公司内部或者客户提出的。这阶段主要是对信息的收集，也有可能是对现有项目的改善和重新做一个新的项目。还要分析项目的预算多长，可以从哪方面受益及布局，这也是项目创建的目标。</p><ul><li>设计</li></ul><p>第二阶段就是设计阶段，系统架构和满意状态（就是要做成什么样子，有什么功能），和创建一个项目计划。计划可以使用图表，布局设计或者文者的方式呈现。</p><ul><li>实现</li></ul><p>第三阶段就是实现阶段，项目经理创建和分配工作给开者，开发者根据任务和在设计阶段定义的目标进行开发代码。依据项目的大小和复杂程度，可以需要数月或更长时间才能完成。</p><ul><li>测试</li></ul><p>测试人员进行代码测试 ，包括功能测试、代码测试、压力测试等。</p><ul><li>进化</li></ul><p>最后进阶段就是对产品不断的进化改进和维护阶段，根据用户的使用情况，可能需要对某功能进行修改，bug修复，功能增加等。</p><h3 id="软件开发瀑布模型"><a href="#软件开发瀑布模型" class="headerlink" title="软件开发瀑布模型"></a>软件开发瀑布模型</h3><p>瀑布模型是最著名和最常使用的软件开发模型。瀑布模型就是一系列的软件开发过程。它是由制造业繁衍出来的。一个高度化的结构流程在一个方向上流动，有点像生产线一样。在瀑布模型创建之初，没有其它开发的模型，有很多东西全靠开发人员去猜测，去开发。这样的模型仅适用于那些简单的软件开 发， 但是已经不适合现在的开发了。</p><p>下图对软件开发模型的一个阐述。</p><p><img src="/images/pasted-1706596581852.png" alt="upload successful"></p><table><thead><tr><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>简单易用和理解</td><td>各个阶段的划分完全固定，阶段之间产生大量的文档，极大地增加了工作量。</td></tr><tr><td>当前一阶段完成后，您只需要去关注后续阶段。</td><td>由于开发模型是线性的，用户只有等到整个过程的末期才能见到开发成果，从而增加了开发风险。</td></tr><tr><td>为项目提供了按阶段划分的检查节点</td><td>瀑布模型的突出缺点是不适应用户需求的变化。</td></tr></tbody></table><h3 id="软件的敏捷开发"><a href="#软件的敏捷开发" class="headerlink" title="软件的敏捷开发"></a>软件的敏捷开发</h3><h4 id="什么是敏捷开发？"><a href="#什么是敏捷开发？" class="headerlink" title="什么是敏捷开发？"></a>什么是敏捷开发？</h4><p>敏捷开发（Agile Development） 的核心是迭代开发（Iterative Development） 与 增量开发</p><p>（Incremental Development） 。</p><ul><li><strong>何为迭代开发？</strong></li></ul><p>对于大型软件项目，传统的开发方式是采用一个大周期（比如一年）进行开发，整个过程就是一次”大开发”；迭代开发的方式则不一样，它将开发过程拆分成多个小周期，即一次”大开发”变成多次”小开发”，每次小开发都是同样的流程，所以看上去就好像重复在做同样的步骤。</p><p>举例来说，SpaceX 公司想造一个大推力火箭，将人类送到火星。但是，它不是一开始就造大火箭，而是先造一个最简陋的小火箭 Falcon 1。结果，第一次发射就爆炸了，直到第四次发射，才成功进入轨道。然后，开发了中型火箭 Falcon 9，九年中发射了70次。最后，才开发 Falcon 重型火箭。如果 SpaceX 不采用迭代开发，它可能直到现在还无法上天。</p><ul><li><strong>何为增量开发？</strong></li></ul><p>软件的每个版本，都会新增一个用户可以感知的完整功能。也就是说，按照新增功能来划分迭代。</p><p>举例来说，房产公司开发一个10栋楼的小区。如果采用增量开发的模式，该公司第一个迭代就是交付一号楼，第二个迭代交付二号楼 每个迭代都是完成一栋完整的楼。而不是第一个迭代挖好10栋楼的地基，第二个迭代建好每栋楼的骨架，第三个迭代架设屋顶……</p><h4 id="敏捷开发如何迭代？"><a href="#敏捷开发如何迭代？" class="headerlink" title="敏捷开发如何迭代？"></a>敏捷开发如何迭代？</h4><p>虽然敏捷开发将软件开发分成多个迭代，但是也要求，每次迭代都是一个完整的软件开发周期，必须按照软件工程的方法论，进行正规的流程管理。</p><p><img src="/images/pasted-1706596609959.png" alt="upload successful"></p><h4 id="敏捷开发有什么好处？"><a href="#敏捷开发有什么好处？" class="headerlink" title="敏捷开发有什么好处？"></a>敏捷开发有什么好处？</h4><ul><li><strong>早期交付</strong></li></ul><p>敏捷开发的第一个好处，就是早期交付，从而大大降低成本。 还是以上一节的房产公司为例，如果按照传统的”瀑布开发模式”，先挖10栋楼的地基、再盖骨架、然后架设屋顶，每个阶段都等到前一个阶段完成后开始，可能需要两年才能一次性交付10栋楼。也就是说，如果不考虑预售，该项目必须等到两年后才能回款。 敏捷开发是六个月后交付一号楼，后面每两个月交付一栋楼。因此，半年就能回款10%，后面每个月都会有现金流，资金压力就大大减轻了。</p><ul><li><strong>降低风险</strong></li></ul><p>敏捷开发的第二个好处是，及时了解市场需求，降低产品不适用的风险。 请想一想，哪一种情况损失比较小：10栋楼都造好以后，才发现卖不出去，还是造好第一栋楼，就发现卖不出去，从而改进或停建后面9栋楼？</p><h3 id="什么是持续集成"><a href="#什么是持续集成" class="headerlink" title="什么是持续集成"></a>什么是持续集成</h3><p>持续集成（ Continuous integration ， 简称 CI ）指的是，频繁地（一天多次）将代码集成到主干。</p><p>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p><p>通过持续集成， 团队可以快速的从一个功能到另一个功能，简而言之，敏捷软件开发很大一部分都要归功于持续集成。</p><ul><li><strong>持续集成的流程</strong></li></ul><p><img src="/images/pasted-1706596633827.png" alt="upload successful"></p><p>根据持续集成的设计，代码从提交到生产，整个过程有以下几步。</p><ul><li>提交</li></ul><p>流程的第一步，是开发者向代码仓库提交代码。所有后面的步骤都始于本地代码的一次提交（commit）。</p><ul><li>测试（第一轮）</li></ul><p>代码仓库对commit操作配置了钩子（hook），只要提交代码或者合并进主干，就会跑自动化测试。</p><ul><li>构建</li></ul><p>通过第一轮测试，代码就可以合并进主干，就算可以交付了。</p><p>交付后，就先进行构建（build），再进入第二轮测试。所谓构建，指的是将源码转换为可以运行的实际代码，比如安装依赖，配置各种资源（样式表、JS脚本、图片）等等。</p><ul><li>测试（第二轮）</li></ul><p>构建完成，就要进行第二轮测试。如果第一轮已经涵盖了所有测试内容，第二轮可以省略，当然，这时构建步骤也要移到第一轮测试前面。</p><ul><li>部署</li></ul><p>过了第二轮测试，当前代码就是一个可以直接部署的版本（artifact）。将这个版本的所有文件打包（tar ﬁlename.tar * ）存档，发到生产服务器。</p><ul><li>回滚</li></ul><p>一旦当前版本发生问题，就要回滚到上一个版本的构建结果。最简单的做法就是修改一下符号链接，指向上一个版本的目录。</p><h3 id="持续集成的组成要素"><a href="#持续集成的组成要素" class="headerlink" title="持续集成的组成要素"></a>持续集成的组成要素</h3><ul><li>一个自动构建过程， 从检出代码、 编译构建、 运行测试、 结果记录、 测试统计等都是自动完成的， 无需人工干预。</li><li>一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，一般使用SVN或Git。</li><li>一个持续集成服务器， Jenkins 就是一个配置简单和使用方便的持续集成服务器。</li></ul><p><img src="/images/pasted-1706596661856.png" alt="upload successful"></p><p>持续集成的好处</p><p>1、降低风险，由于持续集成不断去构建，编译和测试，可以很早期发现问题，所以修复的代价就少；</p><p>2、对系统健康持续检查，减少发布风险带来的问题；</p><p>3、减少重复性工作；</p><p>4、持续部署，提供可部署单元包；</p><p>5、持续交付可供使用的版本；</p><p>6、增强团队信心；</p><h3 id="Jenkins介绍"><a href="#Jenkins介绍" class="headerlink" title="Jenkins介绍"></a>Jenkins<strong>介绍</strong></h3><p>Jenkins 是一款流行的开源持续集成（Continuous Integration）工具，广泛用于项目开发，具有自动化构建、测试和部署等功能。官网： <a href="http://jenkins-ci.org/">http://jenkins-ci.org/</a>。</p><p>Jenkins的特征：</p><ul><li>开源的Java语言开发持续集成工具，支持持续集成，持续部署。</li><li>易于安装部署配置：可通过yum安装,或下载war包以及通过docker容器等快速实现安装部署，可方便web界面配置管理。</li><li>消息通知及测试报告：集成RSS&#x2F;E-mail通过RSS发布构建结果或当构建完成时通过e-mail通知，生成JUnit&#x2F;TestNG测试报告。</li><li>分布式构建：支持Jenkins能够让多台计算机一起构建&#x2F;测试。</li><li>文件识别：Jenkins能够跟踪哪次构建生成哪些jar，哪次构建使用哪个版本的jar等。</li><li>丰富的插件支持：支持扩展插件，你可以开发适合自己团队使用的工具，如git，svn，maven，docker等。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>部署 Hexo 到 GitHub Pages</title>
    <link href="/2024/01/30/%E9%83%A8%E7%BD%B2%20Hexo%20%E5%88%B0%20GitHub%20Pages/"/>
    <url>/2024/01/30/%E9%83%A8%E7%BD%B2%20Hexo%20%E5%88%B0%20GitHub%20Pages/</url>
    
    <content type="html"><![CDATA[<p>部署 Hexo 到 GitHub Pages</p><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p><p>首先安装 hexo-deployer-git：</p><p>npm install hexo-deployer-git –save<br>然后修改 _config.yml 文件末尾的 Deployment 部分，修改成如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@github.com:用户名/用户名.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>完成后运行 hexo d 将网站上传部署到 GitHub Pages。</p><p>完成！这时访问我们的 GitHub 域名 https:&#x2F;&#x2F;用户名.github.io 就可以看到 Hexo 网站了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2022年第31周</title>
    <link href="/2022/07/25/Year2022Week31/"/>
    <url>/2022/07/25/Year2022Week31/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2022年第31周（2022-07-25-2022-07-31）"><a href="#2022年第31周（2022-07-25-2022-07-31）" class="headerlink" title="2022年第31周（2022&#x2F;07&#x2F;25~2022&#x2F;07&#x2F;31）"></a>2022年第31周（2022&#x2F;07&#x2F;25~2022&#x2F;07&#x2F;31）</h2><ol><li><a href="https://www.jianshu.com/p/13c0b3ca7c71">nvm安装（Windows篇）</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>nodejs14</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS 7</title>
    <link href="/2020/01/15/CentOS/"/>
    <url>/2020/01/15/CentOS/</url>
    
    <content type="html"><![CDATA[<h2 id="CentOS-7-重启网络服务命令"><a href="#CentOS-7-重启网络服务命令" class="headerlink" title="CentOS 7 重启网络服务命令"></a>CentOS 7 重启网络服务命令</h2><p>重新启动网络：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> network.service<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service network restart</span><br></code></pre></td></tr></table></figure><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>RSS</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020年第03周</title>
    <link href="/2020/01/14/Year2020Week03/"/>
    <url>/2020/01/14/Year2020Week03/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2020年第03周（2020-01-13-2020-01-19）"><a href="#2020年第03周（2020-01-13-2020-01-19）" class="headerlink" title="2020年第03周（2020&#x2F;01&#x2F;13~2020&#x2F;01&#x2F;19）"></a>2020年第03周（2020&#x2F;01&#x2F;13~2020&#x2F;01&#x2F;19）</h2><ol><li><a href="https://www.jianshu.com/p/aa5cb2ec0e73">PDF文件如何转成markdown格式</a></li></ol><h2 id="导出-pdf-文件中的图片"><a href="#导出-pdf-文件中的图片" class="headerlink" title="导出 pdf 文件中的图片"></a>导出 pdf 文件中的图片</h2><ol><li><p>Acrobat 版本：<br><img src="/2020Week03/01.png"></p></li><li><p>导出为图像，jpg，勾选【导出所有图像】：<br><img src="/2020Week03/02.png"></p></li><li><p>设置格式：<br> <img src="/2020Week03/03.png">：</p></li><li><p>导出结果：<br><img src="/2020Week03/04.png"></p></li><li><p>最后用 rename 重命名：<br><img src="/2020Week03/05.png"></p></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pdf</tag>
      
      <tag>jpg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSS Reader实例开发之存储本地数据</title>
    <link href="/2020/01/10/RSS_Data_Sava2Local/"/>
    <url>/2020/01/10/RSS_Data_Sava2Local/</url>
    
    <content type="html"><![CDATA[<h2 id="存储本地数据"><a href="#存储本地数据" class="headerlink" title="存储本地数据"></a>存储本地数据</h2><p>iPhone系统为应用程序提供了多种存储本地数据的方式，包括文件和数据库。为了保证安全，每个应用程序都有自己独立的存储区，其他应用程序无法直接访问。此外，大数据还可以存储在手机的SD卡内，存储在SD卡的数据可以被所有应用程序读写。</p><p>受到无线网络的速度限制，RSS Reader需要把抓取的内容存储到本地，以便快速显示给用户，这个功能利用数据库存储最容易实现。此外，RSS Reader还需要保存用户的设置。下面，我们分别来编写这两个功能。</p><h2 id="使用SQLite数据库"><a href="#使用SQLite数据库" class="headerlink" title="使用SQLite数据库"></a>使用SQLite数据库</h2><p>和其他智能手机平台相比，iPhone平台提供了一个非常完善的数据库存储机制。iPhone系统使用SQLite作为内置的数据库引擎，应用程序可以非常方便地使用数据库来存储数据，并使用标准的SQL语言来查询和修改数据，极大地增强了应用程序的能力和灵活性。</p><p>SQLite是用C语言编写的微型数据库引擎，特点是小巧，速度快，以单一文件存储数据库数据，非常适合移动平台。iPhone系统已经对SQLite进行了封装，提供了简单的Java接口。</p><p>在使用SQLite时，我们还需要注意：</p><ol><li>SQLite不支持外键，因此，一对多关系需要由应用程序自身维护；</li><li>SQLite不支持JDBC接口，需要熟悉iPhone提供的API，好消息是API接口相当简单；</li><li>SQLite仅支持几种数据类型：INTEGER，REAL，TEXT和BLOB等；</li><li>SQLite不严格区分数据的类型，例如存储的是INTEGER照样可以用getString()读出来。</li></ol><p>RSS Reader需要处理两种类型的数据：RSS订阅源和RSS的Item，因此，我们建立Subscription和Item这两种类型的JavaBean，并创建对应的表结构。</p><p>Subscription对应的表subs：</p><table><thead><tr><th align="left">列名</th><th align="center">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">_id</td><td align="center">long</td><td align="left">自增主键</td></tr><tr><td align="left">url</td><td align="center">text</td><td align="left">RSS的URL地址</td></tr><tr><td align="left">title</td><td align="center">text</td><td align="left">RSS的标题</td></tr><tr><td align="left">description</td><td align="center">text</td><td align="left">RSS的描述</td></tr><tr><td align="left">last_updated</td><td align="center">long</td><td align="left">最后更新时间</td></tr><tr><td align="left">frequency</td><td align="center">long</td><td align="left">抓取频率</td></tr></tbody></table><pre><code class="hljs">                                    |</code></pre><h3 id="Item对应的表item："><a href="#Item对应的表item：" class="headerlink" title="Item对应的表item："></a>Item对应的表item：</h3><table><thead><tr><th align="left">列名</th><th align="center">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">_id</td><td align="center">long</td><td align="left">自增主键</td></tr><tr><td align="left">subs_id</td><td align="center">long</td><td align="left">模拟外键，关联Subscription</td></tr><tr><td align="left">unread</td><td align="center">long</td><td align="left">是否未读，1&#x3D;未读，0&#x3D;已读</td></tr><tr><td align="left">url</td><td align="center">text</td><td align="left">Item的URL地址</td></tr><tr><td align="left">title</td><td align="center">text</td><td align="left">Item的标题</td></tr><tr><td align="left">author</td><td align="center">text</td><td align="left">Item的作者</td></tr><tr><td align="left">published</td><td align="center">text</td><td align="left">Item的发布时间</td></tr><tr><td align="left">content</td><td align="center">text</td><td align="left">Item的内容</td></tr></tbody></table><p>SQLite支持long类型的自增主键，且iPhone的系统应用程序均默认使用该类型主键。为了与iPhone的系统应用程序和其他应用程序保持一致的主键规则，应当首先考虑使用这种类型的主键。此外，iPhone系统默认的主键名称是“_id”，该常量定义在android.provider.BaseColumns._ID，根据一致性原则，我们自定义的SubscriptionColumns和ItemColumns应当从BaseColumns派生，并直接使用常量_ID作为主键名称。</p><h3 id="SubscriptionColumns定义如下："><a href="#SubscriptionColumns定义如下：" class="headerlink" title="SubscriptionColumns定义如下："></a>SubscriptionColumns定义如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SubscriptionColumns</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseColumns</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TABLE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;subs&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;url&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TITLE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;title&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DESCRIPTION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;description&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LAST_UPDATED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;last_updated&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FREQUENCY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;frequency&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] ALL_COLUMNS = &#123; _ID, URL, TITLE, DESCRIPTION, LAST_UPDATED, FREQUENCY &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ItemColumns定义如下："><a href="#ItemColumns定义如下：" class="headerlink" title="ItemColumns定义如下："></a>ItemColumns定义如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ItemColumns</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseColumns</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TABLE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;item&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SUBS_ID</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;subs_id&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">UNREAD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;unread&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;url&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TITLE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;title&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">AUTHOR</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;author&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PUBLISHED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;published&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONTENT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;content&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] ALL_COLUMNS = &#123; _ID, SUBS_ID, UNREAD, URL, TITLE, AUTHOR, PUBLISHED, CONTENT &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>SQLite数据库API的主要接口就是SQLiteDatabase对象，提供了创建和删除数据库、创建和删除表以及最常用的增删改查的全部功能。要使用SQLite数据库，可以直接创建SQLiteDatabase对象，还可以利用iPhone系统提供的SQLiteOpenHelper对象更方便地操作SQLite数据库。</p><p>使用SQLiteOpenHelper时，我们需要从SQLiteOpenHelper派生一个子类，并提供一个显示的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadingOpenHelper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SQLiteOpenHelper</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReadingOpenHelper</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, <span class="hljs-string">&quot;reader.db&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><p>在构造方法中，需要传入数据库文件名“reader.db”，该文件由于放在RSS Reader应用程序的私有目录下，并且只能被RSS Reader应用程序访问，所以不存在文件名冲突。最后一个参数1表示版本号。</p><p>当第一次运行RSS Reader时，数据库并不存在，此时，SQLiteOpenHelper会自动为我们创建数据库，然后，onCreate()方法将被调用，我们需要覆写该方法，创建所有的表和索引，并插入初始数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(SQLiteDatabase db)</span> &#123;<br>    db.execSQL(<span class="hljs-string">&quot;CREATE TABLE subs ...&quot;</span>);<br>    db.execSQL(<span class="hljs-string">&quot;CREATE TABLE item ...&quot;</span>);<br>    db.execSQL(<span class="hljs-string">&quot;INSERT INTO subs ...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>当RSS Reader升级后，例如，从版本1升级到版本2时，SQLiteOpenHelper检查到已存在的数据库版本和升级版本不同，就会调用onUpgrade()方法，让应用程序自己更新旧版本的数据。我们需要覆写该方法，并编写升级数据的逻辑。在RSS Reader中，我们用最简单的方法，即删除旧的表，然后再创建新表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span>  <br>publid <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>升级数据库的逻辑仅在新版本和旧版本使用了不同的数据库表结构时才需要。  </p><p>有了ReadingOpenHelper，创建和升级数据库的功能就实现了。下一步，我们编写一个ReadingOperator类，它持有一个ReadingOpenHelper和一个SQLiteDatabase对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadingOperator</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">SQLiteDatabase</span> <span class="hljs-variable">db</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ReadingOpenHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReadingOperator</span><span class="hljs-params">(Context context)</span> &#123;<br>        helper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReadingOpenHelper</span>(context);<br>        db = helper.getWritableDatabase();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        db.close();<br>        helper.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> SQLiteDatabase <span class="hljs-title function_">getCurrentDb</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> db;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>注意到SQLiteDatabase是通过ReadingOpenHelper的getWritableDatabase()获取的，表示该SQLiteDatabase可读写。如果你只需要读取而不需要写入数据库，可以用getReadableDatabase()获取。SQLiteDatabase对象不需要反复打开和关闭，通常我们在应用程序启动时打开，在应用程序结束时关闭，在应用程序的生命周期内，可以随时通过getCurrentDb()方法获取SQLiteDatabase对象。</p><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>除了可以直接构造SQL语句查询外，更简单常用的是使用SQLiteDatabase提供的query()方法，该方法定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Subscription <span class="hljs-title function_">queryById</span><span class="hljs-params">(String id)</span> &#123;<br>    <span class="hljs-type">Cursor</span> <span class="hljs-variable">cursor</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        cursor = db.query(<span class="hljs-string">&quot;subs&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;_id=?&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; id &#125;, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-keyword">if</span> (cursor.moveToFirst()) &#123;<br>            <span class="hljs-keyword">return</span> mappingToSubs(cursor);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        close(cursor);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要循环Cursor获得所有的行数据，使用如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cursor</span> <span class="hljs-variable">cursor</span> <span class="hljs-operator">=</span> db.query(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> cursor.getCount();<br><span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> Collections.emptyList();<br>&#125;<br>cursor.moveToFirst();<br><span class="hljs-keyword">while</span> (!cursor.isAfterLast()) &#123;<br>    cursor.getString(<span class="hljs-string">&quot;&quot;</span>);<br>    cursor.moveToNext();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>插入数据需要使用SQLiteDatabase提供的insert()方法，例如，插入一个Subscription的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">insertItem</span><span class="hljs-params">(<span class="hljs-type">long</span> subs_id, String url, <span class="hljs-type">long</span> published, String title, String author, String content)</span> &#123;<br>    <span class="hljs-type">ContentValues</span> <span class="hljs-variable">cv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentValues</span>();<br>    cv.put(ItemColumns.SUBS_ID, subs_id);<br>    cv.put(ItemColumns.URL, url);<br>    cv.put(ItemColumns.PUBLISHED, published);<br>    cv.put(ItemColumns.UNREAD, <span class="hljs-number">1</span>);<br>    cv.put(ItemColumns.TITLE, title);<br>    cv.put(ItemColumns.AUTHOR, author);<br>    cv.put(ItemColumns.CONTENT, content);<br>    <span class="hljs-keyword">return</span> db.insert(ItemColumns.TABLE_NAME, <span class="hljs-literal">null</span>, cv);<br>&#125;<br></code></pre></td></tr></table></figure><p>insert()方法需要传入一个ContentValues对象，SQLiteDatabase会根据ContentValues对象构造出“INSERT table (column list) VALUES( value list)”语句。</p><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p>更新数据和插入数据类似，把需要更新的字段放入ContentValues中，然后调用SQLiteDatabase的update()方法，并传入where语句和可选的参数即可。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ContentValues</span> <span class="hljs-variable">cv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentValues</span>(); <br>cv.put(ItemColumns.UNREAD, <span class="hljs-number">1</span>); <br>db.update(ItemColumns.TABLE_NAME, cv, <span class="hljs-string">&quot;_id=?&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; id &#125;);  <br></code></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>删除数据需要使用SQLiteDatabase的delete()方法，需要传入table名称和可选的where条件及参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">database.delete(<span class="hljs-string">&quot;subs&quot;</span>, <span class="hljs-string">&quot;_id=?&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; id &#125;);  <br></code></pre></td></tr></table></figure><p>通过SQLiteDatabase，我们就可以完成所有的增删改查操作。</p><h2 id="使用SharedPreferences存储应用程序设置"><a href="#使用SharedPreferences存储应用程序设置" class="headerlink" title="使用SharedPreferences存储应用程序设置"></a>使用SharedPreferences存储应用程序设置</h2><p>当我们需要在应用程序中保存用户的一些设置时，由于这些数据基本上是以key-value形式表示的，用SQLite数据库就显得大材小用了，而且，查询起来比较麻烦。实际上，iPhone系统已经为我们提供了SharedPreferences来存储应用程序的设置。</p><p>使用SharedPrefernces非常容易。在Activity中，直接调用getSharedPreferences()方法就可以获得SharedPrefernces的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SharedPreferences</span> <span class="hljs-variable">pref</span> <span class="hljs-operator">=</span> getSharedPreferences(<span class="hljs-string">&quot;app_pref&quot;</span>, MODE_PRIVATE);  <br></code></pre></td></tr></table></figure><p>getSharedPreferences()方法需要两个参数：SharedPrefernces的名称和打开模式。默认的MODE_PRIVATE表示该SharedPrefernces仅仅能够被这个应用程序访问（包含该应用程序所有的组件），其他应用程序均无法访问。MODE_WORLD_READABLE和MODE_WORLD_WRITEABLE模式则表示允许其他应用程序以只读方式和可读写方式访问SharedPrefernces。</p><p>然后，我们就可以通过SharedPreferences的getInt()，getBoolean()等方法获得对应的值，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> pref.getInt(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-number">3</span>);  <br></code></pre></td></tr></table></figure><p>两个参数分别是key和默认值。当SharedPrefernces不存在该key时，将返回默认值。<br>需要保存一个设置时，通过SharedPreferences的edit()方法获得一个SharedPreferences.Editor的实例，然后，调用put方法设置key和对应的value，最后，不要忘记通过commit()方法将更改写入文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">SharedPreferences.<span class="hljs-type">Editor</span> <span class="hljs-variable">editor</span> <span class="hljs-operator">=</span> pref.edit();<br>editor.putBoolean(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-literal">true</span>);<br>editor.putInt(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-number">123</span>);<br>editor.commit(); <br></code></pre></td></tr></table></figure><p>RSS Reader使用SharedPrefernces保存用户的3个设置：</p><table><thead><tr><th align="left">描述</th><th align="center">Key</th><th align="center">类型</th><th align="center">缺省值</th></tr></thead><tbody><tr><td align="left">是否仅显示未读项</td><td align="center">UnreadOnly</td><td align="center">boolean</td><td align="center">true</td></tr><tr><td align="left">刷新频率（分钟）</td><td align="center">Freq</td><td align="center">int</td><td align="center">3</td></tr><tr><td align="left">删除过期项（周）</td><td align="center">Expires</td><td align="center">int</td><td align="center">3</td></tr></tbody></table><p>除了使用SharedPrefernces外，对于一个单独的Activity，还可以通过Bundle保存或读取Activity的一些状态，Bundle实例是通过Activity的onCreate()方法参数传递给Activity的，用Bundle保存的数据只能被这个Activity访问，适合保存Activity自身的状态。</p><h2 id="使用ContentProvider"><a href="#使用ContentProvider" class="headerlink" title="使用ContentProvider"></a>使用ContentProvider</h2><p>我们已经知道，每个iPhone应用程序都有自己独立的存储区，如果应用程序A需要访问应用程序B的数据时，就需要应用程序B提供对外的数据接口。在iPhone平台中，任何应用程序都可以通过ContentProvider对外提供数据访问接口。</p><p>ContentProvider为iPhone应用程序定义了一套统一的数据访问接口，通过URI进行数据操作。例如，iPhone系统的Contacts系统应用程序就提供了访问联系人的ContentProvider。要列出所有联系人，使用的URI为“content:&#x2F;&#x2F;contacts&#x2F;people”，要获得ID为1的某个联系人，使用的URI为“content:&#x2F;&#x2F;contacts&#x2F;people&#x2F;1”。所有的查询和修改操作都可以通过ContentResolver完成。</p><p>通过ContentProvider机制访问第三方应用程序数据的好处在于，无需了解数据是由谁提供的，以及数据的存储方式，所有应用程序都使用统一的接口访问其他应用程序的数据，应用程序之间的耦合度极低。</p><p>以iPhone系统自带的Contacts应用程序为例，我们来通过ContentProvider读取手机联系人信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ContentResolver</span> <span class="hljs-variable">cr</span> <span class="hljs-operator">=</span> getContentResolver();<br><span class="hljs-type">Cursor</span> <span class="hljs-variable">cursor</span> <span class="hljs-operator">=</span> cr.query(People.CONTENT_URI, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>List&lt;String&gt; contacts_names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><span class="hljs-keyword">if</span>(cursor.moveToFirst()) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">column</span> <span class="hljs-operator">=</span> cursor.getColumnIndex(People.NAME);<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> cursor.getString(column);<br>        contacts_names.add(name);<br>    &#125; <span class="hljs-keyword">while</span> (cursor.moveToNext());<br>&#125;<br>cursor.close();<br></code></pre></td></tr></table></figure><p>ContentResolver通过Activity的getContentResolver()获得，然后，根据联系人的URI查询，该URI常量定义在android.provider.Contacts.People.CONTENT_URI中，得到游标对象Cursor，类似JDBC的ResultSet。循环Cursor就可以读取所有的联系人信息。</p><p>ContentResolver还提供insert()、update()和delete()方法，可以完整地实现数据的增删改查操作。<br>封装ContentProvider</p><p>RSS Reader也可以通过ContentProvider对外暴露数据访问接口，这样，其他应用程序就可以访问到Subscription和Item这两种数据。<br>要实现ContentProvider，我们首先要定义URI。在iPhone系统中，URI格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">content:<span class="hljs-comment">//authority/entity/id  </span><br></code></pre></td></tr></table></figure><p>其中，“content:&#x2F;&#x2F;”是iPhone系统定义的schema，无法改变，authority用于区分不同的ContentProvider，由小写字母和“.”构成，在系统中必须唯一，通常由域名和应用程序名构成（注意：iPhone系统应用程序的authority是简单的单词，例如contacts，但是第三方应用要避免简单单词形式的authority），entity是数据类型，若要查询某个ID的entity，则可以附加上“&#x2F;id”。</p><p>下面，我们开始为RSS Reader定义一个ContentProvider，供第三方应用程序使用。</p><p>首先，从android.content.ContentProvider派生一个ReadingProvider：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.expressme.wireless.reader.provider; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadingProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ContentProvider</span> &#123; <br>    <span class="hljs-comment">//... </span><br>&#125; <br></code></pre></td></tr></table></figure><p>其次，我们需要定义一个唯一的authority，可以通过ReadingProvider的完整类名获得：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">AUTHORITY</span> <span class="hljs-operator">=</span> ReadingProvider.class.getName().toLowerCase();  <br></code></pre></td></tr></table></figure><p>我们需要暴露Subscription和Item这两种数据类型。根据ContentProvider的惯例，定义URI如下：</p><p>| 数据类型  | URI  |<br>|:————- |: ————-:|<br>|全部Subscription|content:&#x2F;&#x2F; org.expressme.wireless.reader.provider.readingprovider&#x2F;subscriptions|<br>|某个ID的Subscription|content:&#x2F;&#x2F; org.expressme.wireless.reader.provider.readingprovider&#x2F;subscriptions&#x2F;#|<br>|全部Item|content:&#x2F;&#x2F; org.expressme.wireless.reader.provider.readingprovider&#x2F;items|<br>|某个ID的Item|content:&#x2F;&#x2F; org.expressme.wireless.reader.provider.readingprovider&#x2F;items&#x2F;#|</p><p>当第三方应用程序通过URI对我们的数据进行增删改查操作时，相应的insert()、delete()、update()和query()方法就会执行。我们需要实现这4个方法，并且，根据不同的URI做不同的操作。</p><p>我们不需要编写解析URI的代码，iPhone系统已经为我们提供了UriMatcher来匹配URI。只需要为以上4种URI定义好常量，添加匹配规则即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_ALL_SUBSCRIPTIONS</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_SINGLE_SUBSCRIPTION</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_ALL_ITEMS</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_SINGLE_ITEM</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">UriMatcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UriMatcher</span>(UriMatcher.NO_MATCH);<br><span class="hljs-keyword">static</span> &#123;<br>    matcher.addURI(AUTHORITY, <span class="hljs-string">&quot;subscriptions&quot;</span>, TYPE_ALL_SUBSCRIPTIONS);<br>    matcher.addURI(AUTHORITY, <span class="hljs-string">&quot;subscriptions/#&quot;</span>, TYPE_SINGLE_SUBSCRIPTION);<br>    matcher.addURI(AUTHORITY, <span class="hljs-string">&quot;items&quot;</span>, TYPE_ALL_ITEMS);<br>    matcher.addURI(AUTHORITY, <span class="hljs-string">&quot;items/#&quot;</span>, TYPE_SINGLE_ITEM);<br>&#125;<br></code></pre></td></tr></table></figure><p>以query()为例，根据传入的Uri，分别查询所有的Subscription，某个ID的Subscription，所有的Item和某个ID的Item：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Cursor <span class="hljs-title function_">query</span><span class="hljs-params">(Uri uri, String[] projection, String selection, String[] selectionArgs, String sort)</span> &#123;<br>    <span class="hljs-keyword">switch</span> (matcher.match(uri)) &#123;<br>    <span class="hljs-keyword">case</span> TYPE_ALL_SUBSCRIPTIONS:<br>        <span class="hljs-keyword">return</span> operator.getCurrentDb().query(SubscriptionColumns.TABLE_NAME, projection, selection, selectionArgs,<br>                <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, sort);<br>    <span class="hljs-keyword">case</span> TYPE_SINGLE_SUBSCRIPTION:<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s_id</span> <span class="hljs-operator">=</span> uri.getPathSegments().get(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> operator.getCurrentDb().query(SubscriptionColumns.TABLE_NAME, projection,<br>                SubscriptionColumns._ID + <span class="hljs-string">&quot;=&quot;</span> + s_id, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">case</span> TYPE_ALL_ITEMS:<br>        <span class="hljs-keyword">return</span> operator.getCurrentDb().query(ItemColumns.TABLE_NAME, projection, selection, selectionArgs, <span class="hljs-literal">null</span>,<br>                <span class="hljs-literal">null</span>, sort);<br>    <span class="hljs-keyword">case</span> TYPE_SINGLE_ITEM:<br>        <span class="hljs-type">String</span> <span class="hljs-variable">i_id</span> <span class="hljs-operator">=</span> uri.getPathSegments().get(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> operator.getCurrentDb().query(ItemColumns.TABLE_NAME, projection, ItemColumns._ID + <span class="hljs-string">&quot;=&quot;</span> + i_id, <span class="hljs-literal">null</span>,<br>                <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Uri: &quot;</span> + uri.toString());<br>&#125;<br><br></code></pre></td></tr></table></figure><p>insert()和query()类似，但是，仅允许TYPE_ALL_SUBSCRIPTIONS和TYPE_ALL_ITEMS这两种类型，insert()和query()类似，但是，仅允许TYPE_ALL_SUBSCRIPTIONS和TYPE_ALL_ITEMS这两种类型，并且，需要返回新插入数据的Uri，因为需要向客户端返回包含ID的URI。使用静态方法ContentUris.withAppendedId就可以构造一个含ID的Uri对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Uri <span class="hljs-title function_">insert</span><span class="hljs-params">(Uri uri, ContentValues initialValues)</span> &#123; <br>    <span class="hljs-type">long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>; <br>    <span class="hljs-keyword">switch</span> (matcher.match(uri)) &#123; <br>        <span class="hljs-keyword">case</span> TYPE_ALL_SUBSCRIPTIONS: <br>            id = operator.getCurrentDb().insertOrThrow(SubscriptionColumns.TABLE_NAME, <span class="hljs-literal">null</span>, initialValues); <br>            <span class="hljs-keyword">return</span> ContentUris.withAppendedId(SubscriptionColumns.URI, <span class="hljs-number">0L</span>); <br>        <span class="hljs-keyword">case</span> TYPE_ALL_ITEMS: <br>            id = operator.getCurrentDb().insertOrThrow(ItemColumns.TABLE_NAME, <span class="hljs-literal">null</span>, initialValues); <br>            <span class="hljs-keyword">return</span> ContentUris.withAppendedId(ItemColumns.URI, id); <br>    &#125; <br>    <br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Uri: &quot;</span> + uri.toString()); <br>&#125;<br></code></pre></td></tr></table></figure><p>当第三方应用程序使用我们的ContentProvider时，还需要知道URI、字段名称等信息，这些常量定义在SubscriptionColumns和ItemColumns中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SubscriptionColumns</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseColumns</span> &#123;   <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Uri</span> <span class="hljs-variable">URI</span> <span class="hljs-operator">=</span> Uri.parse(<span class="hljs-string">&quot;content://&quot;</span> + ReadingProvider.AUTHORITY + <span class="hljs-string">&quot;/subscriptions&quot;</span>);   <br>  <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TABLE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;subs&quot;</span>;   <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;url&quot;</span>;   <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TITLE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;title&quot;</span>;   <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DESCRIPTION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;description&quot;</span>;   <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LAST_VISITED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;last_visited&quot;</span>;   <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FREQUENCY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;frequency&quot;</span>;   <br>  <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] ALL_COLUMNS = &#123; _ID, URL, TITLE, DESCRIPTION, LAST_VISITED, FREQUENCY &#125;;   <br>&#125; <br></code></pre></td></tr></table></figure><p>现在，我们已经实现了一个完整的ContentProvider，可以对外提供两种类型的数据访问接口。对于RSS Reader自身的Activity来说，需要做的代码重构就是使用ContentProvider来代替直接操作数据库的ReadingOperator，这样，就使得应用程序各组件之间的耦合程度更低了，此外，第三方应用程序也可以通过ContentProvider读取RSS Reader应用的数据，而无需知道数据的提供者和存储方式。</p>]]></content>
    
    
    <categories>
      
      <category>RSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目开发之 LiteRSS</title>
    <link href="/2020/01/08/LiteRSS/"/>
    <url>/2020/01/08/LiteRSS/</url>
    
    <content type="html"><![CDATA[<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://www.jianshu.com/p/bd4bcc717503">Swift4.x 截取字符串、从字符串中查找子串位置</a></li><li><a href="https://www.jianshu.com/p/7c2e456c6734">Node.js实现简易版”RSSReader”</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>RSS</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020年第02周</title>
    <link href="/2020/01/08/Year2020Week02/"/>
    <url>/2020/01/08/Year2020Week02/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2020年第02周（2020-01-06-2020-01-12）"><a href="#2020年第02周（2020-01-06-2020-01-12）" class="headerlink" title="2020年第02周（2020&#x2F;01&#x2F;06~2020&#x2F;01&#x2F;12）"></a>2020年第02周（2020&#x2F;01&#x2F;06~2020&#x2F;01&#x2F;12）</h2><ol><li><a href="https://blog.csdn.net/qianbin3200896/article/details/90180980">VSCode 中 Python 代码自动格式化方法</a></li><li><a href="https://www.cnblogs.com/xiaojwang/p/11331202.html">用 VSCode 配置 Python 开发环境</a></li><li><a href="https://blog.csdn.net/BNK_along/article/details/84000953">VSCode 写 Python 时的代码错误提醒和自动格式化</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>VSCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020年第01周</title>
    <link href="/2020/01/03/Year2020Week01/"/>
    <url>/2020/01/03/Year2020Week01/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2020年第01周（2019-12-30-2020-01-05）"><a href="#2020年第01周（2019-12-30-2020-01-05）" class="headerlink" title="2020年第01周（2019&#x2F;12&#x2F;30~2020&#x2F;01&#x2F;05）"></a>2020年第01周（2019&#x2F;12&#x2F;30~2020&#x2F;01&#x2F;05）</h2><ol><li><a href="https://www.cnblogs.com/zp900704/p/11688041.html">使用nodejs操作mongodb的正确姿势</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nodejs</tag>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>verdaccio</title>
    <link href="/2019/12/26/verdaccio/"/>
    <url>/2019/12/26/verdaccio/</url>
    
    <content type="html"><![CDATA[<h1 id="Verdaccio-安装"><a href="#Verdaccio-安装" class="headerlink" title="Verdaccio 安装"></a>Verdaccio 安装</h1><ul><li>安装Verdaccio</li></ul><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">npm install</span> <span class="hljs-literal">-</span><span class="hljs-comment">g verdaccio</span> <span class="hljs-literal">--</span><span class="hljs-comment">unsafe</span><span class="hljs-literal">-</span><span class="hljs-comment">perm=true</span> <span class="hljs-literal">--</span><span class="hljs-comment">allow</span><span class="hljs-literal">-</span><span class="hljs-comment">root</span><br></code></pre></td></tr></table></figure><ul><li>启动前配置verdaccio文件<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">vim /root/.config/verdaccio/config.yaml<br></code></pre></td></tr></table></figure></li></ul><p>&#x3D; 在末尾添加：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">listen</span>:<br>  <span class="hljs-attribute">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">4873</span><br></code></pre></td></tr></table></figure><ul><li>完整配置文件：  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#</span><br><span class="hljs-comment"># This is the default config file. It allows all users to do anything,</span><br><span class="hljs-comment"># so don&#x27;t use it on production systems.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Look here for more config file examples:</span><br><span class="hljs-comment"># https://github.com/verdaccio/verdaccio/tree/master/conf</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment"># path to a directory with all packages</span><br><span class="hljs-attr">storage:</span> <span class="hljs-string">/data/verdacciodata/storage</span><br><span class="hljs-comment"># path to a directory with plugins to include</span><br><span class="hljs-attr">plugins:</span> <span class="hljs-string">./plugins</span><br><br><span class="hljs-attr">web:</span><br>  <span class="hljs-attr">title:</span> <span class="hljs-string">Verdaccio</span><br>  <span class="hljs-comment"># comment out to disable gravatar support</span><br>  <span class="hljs-comment"># gravatar: false</span><br>  <span class="hljs-comment"># by default packages are ordercer ascendant (asc|desc)</span><br>  <span class="hljs-comment"># sort_packages: asc</span><br><br><span class="hljs-attr">auth:</span><br>  <span class="hljs-attr">htpasswd:</span><br>    <span class="hljs-attr">file:</span> <span class="hljs-string">./htpasswd</span><br>    <span class="hljs-comment"># Maximum amount of users allowed to register, defaults to &quot;+inf&quot;.</span><br>    <span class="hljs-comment"># You can set this to -1 to disable registration.</span><br>    <span class="hljs-comment"># max_users: 1000</span><br><br><span class="hljs-comment"># a list of other known repositories we can talk to</span><br><span class="hljs-attr">uplinks:</span><br>  <span class="hljs-attr">npmjs:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">https://registry.npmjs.org/</span><br><br><span class="hljs-attr">packages:</span><br>  <span class="hljs-string">&#x27;@*/*&#x27;</span><span class="hljs-string">:</span><br>    <span class="hljs-comment"># scoped packages</span><br>    <span class="hljs-attr">access:</span> <span class="hljs-string">$all</span><br>    <span class="hljs-attr">publish:</span> <span class="hljs-string">$authenticated</span><br>    <span class="hljs-attr">unpublish:</span> <span class="hljs-string">$authenticated</span><br>    <span class="hljs-attr">proxy:</span> <span class="hljs-string">npmjs</span><br><br>  <span class="hljs-string">&#x27;**&#x27;</span><span class="hljs-string">:</span><br>    <span class="hljs-comment"># allow all users (including non-authenticated users) to read and</span><br>    <span class="hljs-comment"># publish all packages</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># you can specify usernames/groupnames (depending on your auth plugin)</span><br>    <span class="hljs-comment"># and three keywords: &quot;$all&quot;, &quot;$anonymous&quot;, &quot;$authenticated&quot;</span><br>    <span class="hljs-attr">access:</span> <span class="hljs-string">$all</span><br><br>    <span class="hljs-comment"># allow all known users to publish/publish packages</span><br>    <span class="hljs-comment"># (anyone can register by default, remember?)</span><br>    <span class="hljs-attr">publish:</span> <span class="hljs-string">$authenticated</span><br>    <span class="hljs-attr">unpublish:</span> <span class="hljs-string">$authenticated</span><br><br>    <span class="hljs-comment"># if package is not available locally, proxy requests to &#x27;npmjs&#x27; registry</span><br>    <span class="hljs-attr">proxy:</span> <span class="hljs-string">npmjs</span><br><br><span class="hljs-comment"># You can specify HTTP/1.1 server keep alive timeout in seconds for incoming connections.</span><br><span class="hljs-comment"># A value of 0 makes the http server behave similarly to Node.js versions prior to 8.0.0, which did not have a keep-alive timeout.</span><br><span class="hljs-comment"># WORKAROUND: Through given configuration you can workaround following issue https://github.com/verdaccio/verdaccio/issues/301. Set to 0 in case 60 is not enough.</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">keepAliveTimeout:</span> <span class="hljs-number">60</span><br><br><span class="hljs-attr">middlewares:</span><br>  <span class="hljs-attr">audit:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># log settings</span><br><span class="hljs-attr">logs:</span><br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">type:</span> <span class="hljs-string">stdout</span>, <span class="hljs-attr">format:</span> <span class="hljs-string">pretty</span>, <span class="hljs-attr">level:</span> <span class="hljs-string">http</span> &#125;<br>  <span class="hljs-comment">#- &#123;type: file, path: verdaccio.log, level: info&#125;</span><br><span class="hljs-comment">#experiments:</span><br><span class="hljs-comment">#  # support for npm token command</span><br><span class="hljs-comment">#  token: false</span><br><br><span class="hljs-attr">listen:</span><br>  <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:4873</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="打开-4873-端口的防火墙："><a href="#打开-4873-端口的防火墙：" class="headerlink" title="打开 4873 端口的防火墙："></a>打开 4873 端口的防火墙：</h2><ol><li><p>查看firewall服务状态</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status firewalld</span><br></code></pre></td></tr></table></figure></li><li><p>查看firewall的状态</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--state</span><br></code></pre></td></tr></table></figure></li><li><p>开启、重启、关闭、firewalld.service服务</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 开启</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>firewalld start<br><span class="hljs-comment"># 重启</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>firewalld restart<br><span class="hljs-comment"># 关闭</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>firewalld stop<br>```  <br><br>4. 查看防火墙规则<br></code></pre></td></tr></table></figure><p>firewall-cmd –list-all </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs"><br>5、查询、开放、关闭端口  <br></code></pre></td></tr></table></figure></li></ol><h1 id="查询端口是否开放"><a href="#查询端口是否开放" class="headerlink" title="查询端口是否开放"></a>查询端口是否开放</h1><p>firewall-cmd –query-port&#x3D;4873&#x2F;tcp</p><h1 id="开放4873端口"><a href="#开放4873端口" class="headerlink" title="开放4873端口"></a>开放4873端口</h1><p>firewall-cmd –permanent –add-port&#x3D;4873&#x2F;tcp</p><h1 id="移除端口"><a href="#移除端口" class="headerlink" title="移除端口"></a>移除端口</h1><p>firewall-cmd –permanent –remove-port&#x3D;4873&#x2F;tcp<br>#重启防火墙(修改配置后要重启防火墙)<br>firewall-cmd –reload</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 参数解释</span><br><span class="hljs-bullet">1.</span> firwall-cmd：是Linux提供的操作firewall的一个工具；<br><span class="hljs-bullet">2.</span> --permanent：表示设置为持久；<br><span class="hljs-bullet">3.</span> --add-port：标识添加的端口；<br><br><span class="hljs-section"># 设置 npm 源</span><br><span class="hljs-bullet">-</span> 添加源<br></code></pre></td></tr></table></figure><p>npm add S229 <a href="http://10.100.254.229:4873/">http://10.100.254.229:4873</a></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-bullet">- </span>修改源<br></code></pre></td></tr></table></figure><p>nrm use S229</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-bullet">- </span>添加用户<br></code></pre></td></tr></table></figure><p>npm adduser –registry <a href="http://10.100.254.229:4873/">http://10.100.254.229:4873</a></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-bullet">- </span>登陆<br></code></pre></td></tr></table></figure><p>npm login</p><pre><code class="hljs">输入添加用户时的用户名密码然后就可以本机往源上发布应用了。## 参考文档1. [CentOS 7.3防火墙配置](https://www.cnblogs.com/xxoome/p/7115614.html)2. [CentOS 7 搭建verdaccio](https://blog.csdn.net/xujiamin0022016/article/details/94585366)3. [CentOS 系统使用verdaccio搭建npm私库](https://www.cnblogs.com/sghy/p/9759010.html)</code></pre>]]></content>
    
    
    <categories>
      
      <category>NodeJS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>verdaccio</tag>
      
      <tag>firewall</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第51周</title>
    <link href="/2019/12/19/Year2019Week51/"/>
    <url>/2019/12/19/Year2019Week51/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第51周（2019-12-16-2019-12-22）"><a href="#2019年第51周（2019-12-16-2019-12-22）" class="headerlink" title="2019年第51周（2019&#x2F;12&#x2F;16~2019&#x2F;12&#x2F;22）"></a>2019年第51周（2019&#x2F;12&#x2F;16~2019&#x2F;12&#x2F;22）</h2><ol><li><a href="https://www.cnblogs.com/gme5/p/11765151.html">CentOS 7 安装 MongoDB</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB</title>
    <link href="/2019/12/19/MongoDB/"/>
    <url>/2019/12/19/MongoDB/</url>
    
    <content type="html"><![CDATA[<h2 id="1-配置存储库"><a href="#1-配置存储库" class="headerlink" title="1. 配置存储库"></a>1. 配置存储库</h2><p>创建一个&#x2F;etc&#x2F;yum.repos.d&#x2F;mongodb-enterprise.repo文件，以便可以使用以下yum命令直接安装MongoDB Enterprise。内容如下 ：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mongodb-enterprise]</span><br><span class="hljs-attr">name</span>=MongoDB Enterprise Repository<br><span class="hljs-attr">baseurl</span>=https://repo.mongodb.com/yum/redhat/<span class="hljs-variable">$releasever</span>/mongodb-enterprise/<span class="hljs-number">4.2</span>/<span class="hljs-variable">$basearch</span>/<br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgkey</span>=https://www.mongodb.org/static/pgp/server-<span class="hljs-number">4.2</span>.asc<br></code></pre></td></tr></table></figure><h2 id="2-执行命令安装"><a href="#2-执行命令安装" class="headerlink" title="2. 执行命令安装"></a>2. 执行命令安装</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> -y mongodb-enterprise<br></code></pre></td></tr></table></figure><h2 id="3-禁止yum自动升级MongoDB，在-etc-yum-conf中加入以下内容排除："><a href="#3-禁止yum自动升级MongoDB，在-etc-yum-conf中加入以下内容排除：" class="headerlink" title="3. 禁止yum自动升级MongoDB，在&#x2F;etc&#x2F;yum.conf中加入以下内容排除："></a>3. 禁止yum自动升级MongoDB，在&#x2F;etc&#x2F;yum.conf中加入以下内容排除：</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">exclude</span>=mongodb-enterprise,mongodb-enterprise-server,mongodb-enterprise-shell,mongodb-enterprise-mongos,mongodb-enterprise-tools<br></code></pre></td></tr></table></figure><h2 id="4-启动MongoDB服务"><a href="#4-启动MongoDB服务" class="headerlink" title="4. 启动MongoDB服务"></a>4. 启动MongoDB服务</h2><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl start mongod<br><span class="hljs-comment">#设置开机启动</span><br><span class="hljs-params">system</span>ctl enable mongod<br></code></pre></td></tr></table></figure><h2 id="5-开启允许远程登录"><a href="#5-开启允许远程登录" class="headerlink" title="5. 开启允许远程登录"></a>5. 开启允许远程登录</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vi</span> /etc/mongod.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><p>找到net:项，修改如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">net:</span><br><span class="hljs-symbol">  port:</span> <span class="hljs-number">27017</span><br><span class="hljs-symbol">  bindIp:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> <span class="hljs-meta">#允许任意IP连接</span><br></code></pre></td></tr></table></figure><h2 id="6-然后重启mongo"><a href="#6-然后重启mongo" class="headerlink" title="6. 然后重启mongo"></a>6. 然后重启mongo</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart mongod</span><br></code></pre></td></tr></table></figure><h2 id="7-开放MongoDB访问端口：27017"><a href="#7-开放MongoDB访问端口：27017" class="headerlink" title="7. 开放MongoDB访问端口：27017"></a>7. 开放MongoDB访问端口：27017</h2><ul><li>查看27017端口是否开启<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --query-port=27017/tcp</span><br></code></pre></td></tr></table></figure></li><li>开启27017端口<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=27017/tcp --permanent<br></code></pre></td></tr></table></figure></li><li>重启防火墙<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--reload</span><br></code></pre></td></tr></table></figure></li><li>再次查看27017端口是否开启<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --query-port=27017/tcp</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="8-测试远程访问"><a href="#8-测试远程访问" class="headerlink" title="8. 测试远程访问"></a>8. 测试远程访问</h2><p>最后就可以远程用 NoSQLBooster for MongoDB 客户端访问了</p><p>参考文档：<a href="https://www.cnblogs.com/gme5/p/11765151.html">CentOS 7 安装 MongoDB</a></p>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL</title>
    <link href="/2019/12/19/MySQL/"/>
    <url>/2019/12/19/MySQL/</url>
    
    <content type="html"><![CDATA[<h1 id="在-CentOS-下安装"><a href="#在-CentOS-下安装" class="headerlink" title="在 CentOS 下安装"></a>在 CentOS 下安装</h1><h2 id="一、安装YUM-Repo"><a href="#一、安装YUM-Repo" class="headerlink" title="一、安装YUM Repo"></a>一、安装YUM Repo</h2><ol><li>由于CentOS 的yum源中没有mysql，需要到mysql的官网下载yum repo配置文件。<br>下载命令：<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>dev.mysql.com<span class="hljs-regexp">/get/my</span>sql57-community-release-el7-<span class="hljs-number">9</span>.noarch.rpm<br></code></pre></td></tr></table></figure></li><li>然后进行repo的安装：<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -ivh mysql57-community-release-el7-<span class="hljs-number">9</span>.noarch.rpm<br></code></pre></td></tr></table></figure></li></ol><p>执行完成后会在&#x2F;etc&#x2F;yum.repos.d&#x2F;目录下生成两个repo文件mysql-community.repo mysql-community-source.repo</p><h2 id="二、使用yum命令即可完成安装"><a href="#二、使用yum命令即可完成安装" class="headerlink" title="二、使用yum命令即可完成安装"></a>二、使用yum命令即可完成安装</h2><p>注意：必须进入到 &#x2F;etc&#x2F;yum.repos.d&#x2F;目录后再执行以下脚本</p><p>1、安装命令：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">yum install mysql-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>2、启动msyql：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> mysqld <span class="hljs-comment">#启动MySQL</span><br></code></pre></td></tr></table></figure><p>3、获取安装时的临时密码（在第一次登录时就是用这个密码）：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">grep <span class="hljs-string">&#x27;temporary password&#x27;</span> /<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/mysqld.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><h2 id="三、登录："><a href="#三、登录：" class="headerlink" title="三、登录："></a>三、登录：</h2><p>1、方式一（已验证）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -u root -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><p>然后输入密码（刚刚获取的临时密码）</p><h2 id="四、登录成功后修改密码"><a href="#四、登录成功后修改密码" class="headerlink" title="四、登录成功后修改密码"></a>四、登录成功后修改密码</h2><ol><li><p>首先需要设置密码的验证强度等级，设置 validate_password_policy 的全局参数为 LOW 即可，输入设值语句</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> global <span class="hljs-attribute">validate_password_policy</span>=LOW;<br></code></pre></td></tr></table></figure><p>进行设值，</p></li><li><p>当前密码长度为 8 ，如果不介意的话就不用修改了，按照通用的来讲，设置为 6 位的密码，设置 validate_password_length 的全局参数为 6 即可，输入设值语句</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> global <span class="hljs-attribute">validate_password_length</span>=6;<br></code></pre></td></tr></table></figure><p>进行设值</p></li><li><p>现在可以为 mysql 设置简单密码了，只要满足六位的长度即可，输入修改语句</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br></code></pre></td></tr></table></figure><p>可以看到修改成功，表示密码策略修改成功了！！！</p></li></ol><h2 id="打开防火墙3306端口"><a href="#打开防火墙3306端口" class="headerlink" title="打开防火墙3306端口"></a>打开防火墙3306端口</h2><ul><li><p>添加指定需要开放的端口：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=3306/tcp</span> <span class="hljs-literal">--</span><span class="hljs-comment">permanent</span><br></code></pre></td></tr></table></figure></li><li><p>重载入添加的端口：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--reload</span><br></code></pre></td></tr></table></figure></li><li><p>查询指定端口是否开启成功：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --query-port=3306/tcp</span><br></code></pre></td></tr></table></figure></li></ul><p>最后就可以远程用 Navicat 客户端访问了</p><p>参考文档：<a href="https://blog.csdn.net/wohiusdashi/article/details/89358071">CentOS7下安装mysql5.7</a></p>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第49周</title>
    <link href="/2019/12/02/Year2019Week49/"/>
    <url>/2019/12/02/Year2019Week49/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第49周（2019-12-02-2019-12-08）"><a href="#2019年第49周（2019-12-02-2019-12-08）" class="headerlink" title="2019年第49周（2019&#x2F;12&#x2F;02~2019&#x2F;12&#x2F;08）"></a>2019年第49周（2019&#x2F;12&#x2F;02~2019&#x2F;12&#x2F;08）</h2><ol><li><a href="http://baijiahao.baidu.com/s?id=1597912220585159305">谷歌网盘快速下载大文件方法</a></li><li><a href="https://www.52pojie.cn/thread-819833-1-1.html">推荐另一个映射One Drive的软件。支持XP，和Windows server系统</a></li><li><a href="https://www.cnblogs.com/52fhy/p/5991344.html">Docker之Compose服务编排</a></li><li><a href="https://juejin.im/post/5d3955f851882551c37fbeef">Docker零基础到实战 三剑客之 Compose</a></li><li><a href="https://juejin.im/post/5dde46b2e51d4554350715f5">node 项目从构建到使用 jenkins + docker + nginx + mysql + redis 自动化部署</a></li><li><a href="https://juejin.im/post/5d369d6e5188253a2e1b93ff">jenkins+docker+vue项目的自动部署环境(案例)</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>谷歌网盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第48周</title>
    <link href="/2019/11/26/Year2019Week48/"/>
    <url>/2019/11/26/Year2019Week48/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第48周（2019-11-25-2019-12-01）"><a href="#2019年第48周（2019-11-25-2019-12-01）" class="headerlink" title="2019年第48周（2019&#x2F;11&#x2F;25~2019&#x2F;12&#x2F;01）"></a>2019年第48周（2019&#x2F;11&#x2F;25~2019&#x2F;12&#x2F;01）</h2><ol><li><a href="https://www.cnblogs.com/eczhou/p/7860616.html">NodeJs中类定义及类使用</a></li><li><a href="https://coderdream.github.io/2019/11/14/mocha/">mocha 教程</a></li><li><a href="https://www.jianshu.com/p/47575895bc54">使用mocha进行单元测试(同步与异步)</a></li><li><a href="https://www.jianshu.com/p/c2ff916fadc5">nodejs中的 Promise 基本操作</a></li><li><a href="https://www.cnblogs.com/wwjchina/p/10949806.html">ubuntu 下 mysql 数据库存储路径修改</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mocha</tag>
      
      <tag>nodejs</tag>
      
      <tag>mongodb</tag>
      
      <tag>Promise</tag>
      
      <tag>mysql</tag>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第47周</title>
    <link href="/2019/11/20/Year2019Week47/"/>
    <url>/2019/11/20/Year2019Week47/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第47周（2019-11-18-2019-11-24）"><a href="#2019年第47周（2019-11-18-2019-11-24）" class="headerlink" title="2019年第47周（2019&#x2F;11&#x2F;18~2019&#x2F;11&#x2F;24）"></a>2019年第47周（2019&#x2F;11&#x2F;18~2019&#x2F;11&#x2F;24）</h2><ol><li><a href="http://tieba.baidu.com/p/6269570072">vmware 15.5 pro unlocker 安装出现问题，怎么解决</a></li><li><a href="https://blog.csdn.net/zhaoxiang66/article/details/79894209">利用nodejs对本地json文件进行增删改查</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JSON</tag>
      
      <tag>VMWare</tag>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mocha</title>
    <link href="/2019/11/14/mocha/"/>
    <url>/2019/11/14/mocha/</url>
    
    <content type="html"><![CDATA[<h2 id="应用开发"><a href="#应用开发" class="headerlink" title="应用开发"></a>应用开发</h2><ul><li><p>package.json  </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&#123;<br>  <span class="hljs-string">...</span><br>  <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;    <br>    <span class="hljs-string">&quot;request&quot;</span>: <span class="hljs-string">&quot;^2.88.0&quot;</span>,<br>    <span class="hljs-string">&quot;chai&quot;</span>: <span class="hljs-string">&quot;^4.2.0&quot;</span>,<br>    <span class="hljs-string">&quot;mocha&quot;</span>: <span class="hljs-string">&quot;^6.2.0&quot;</span>,<br>    <span class="hljs-string">&quot;mochawesome&quot;</span>: <span class="hljs-string">&quot;^4.1.0&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>join_quant_test.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-comment">//let expect = require(&#x27;chai&#x27;).expect;</span><br><span class="hljs-keyword">const</span> &#123;describe&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mocha&quot;</span>);<br><span class="hljs-keyword">let</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;request&#x27;</span>);<br><br><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;Join Quant 聚宽的 API 的测试&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> url, token;<br>    <span class="hljs-comment">// 在本区块所有测试用例执行之前执行 （执行异步方法）</span><br>    <span class="hljs-title function_">before</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27; # before # &#x27;</span>);<br>        url = <span class="hljs-string">&quot;https://dataapi.joinquant.com/apis&quot;</span>;<br>        <span class="hljs-keyword">const</span> requestData = &#123;<br>            <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;get_token&quot;</span>,<br>            <span class="hljs-string">&quot;mob&quot;</span>: <span class="hljs-string">&quot;13995526589&quot;</span>,<br>            <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;Cq.123456&quot;</span><br>        &#125;;<br>        <span class="hljs-title function_">request</span>(&#123;<br>            <span class="hljs-attr">url</span>: url,<br>            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>            <span class="hljs-attr">body</span>:<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(requestData)<br>        &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">error, response, _token</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(_token);<br>            token = _token;<br>            <span class="hljs-title function_">done</span>();<br>        &#125;);<br>    &#125;);<br><br>    <span class="hljs-comment">// 在本区块所有测试用例执行之后执行</span><br>    <span class="hljs-title function_">after</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27; # after # &#x27;</span>);<br>    &#125;);<br><br>    <span class="hljs-comment">// 在本区块每个测试用例之前执行</span><br>    <span class="hljs-title function_">beforeEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27; # beforeEach # &#x27;</span>);<br>    &#125;);<br><br>    <span class="hljs-comment">// 在本区块每个测试用例之后执行</span><br>    <span class="hljs-title function_">afterEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27; # afterEach # &#x27;</span>);<br>    &#125;);<br><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;get_security_info&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;## &#x27;</span> + token);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;## &#x27;</span> + url);<br>        <span class="hljs-keyword">const</span> requestData = &#123;<br>            <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;get_security_info&quot;</span>,<br>            <span class="hljs-string">&quot;token&quot;</span>: token,<br>            <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;502050.XSHG&quot;</span><br>        &#125;;<br>        <span class="hljs-title function_">request</span>(&#123;<br>            <span class="hljs-attr">url</span>: url,<br>            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>            <span class="hljs-attr">body</span>:<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(requestData)<br>        &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">error, response, body</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(body)<br>        &#125;);<br><br>        <span class="hljs-comment">// const result = await performanceResultService.findPgWorkIds(body, ctx);</span><br>        <span class="hljs-comment">// console.log(&#x27;###########&#x27;);</span><br>        <span class="hljs-comment">// console.log(result);</span><br>        <span class="hljs-comment">// expect(10).to.be.equal(result.length);</span><br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>Console  </p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean"> # before # <br><span class="hljs-number">5</span>b6a9ba5b1f07ab76c2b7b2e04ca09bba42cc0 # beforeEach # <br>## <span class="hljs-number">5</span>b6a9ba5b1f07ab76c2b7b2e04ca09bba42cc0<br>## https:<span class="hljs-comment">//dataapi.joinquant.com/apis</span><br> # afterEach # <br> # after # <span class="hljs-keyword">code</span>,display_name,name,start_date,end_date,type,parent<br><span class="hljs-number">502050.</span>XSHG,上证<span class="hljs-number">50</span>B,SZ50B,<span class="hljs-number">2015</span><span class="hljs-number">-04</span><span class="hljs-number">-27</span>,<span class="hljs-number">2200</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span>,fjb,<span class="hljs-number">502048.</span>XSHG<br></code></pre></td></tr></table></figure></li></ul><h2 id="命令行方式执行mocha"><a href="#命令行方式执行mocha" class="headerlink" title="命令行方式执行mocha"></a>命令行方式执行mocha</h2><ul><li><p>npm 允许在package.json文件里面，使用scripts字段定义脚本命令。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&#123;<br>  <span class="hljs-string">//</span> <span class="hljs-string">...</span><br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;node build.js&quot;</span>,<br><span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;mocha&quot;</span>,<br><span class="hljs-string">&quot;test:mocha&quot;</span>: <span class="hljs-string">&quot;nyc -a --reporter=html mocha --recursive test/mapstorage_test.js&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>命令行下使用npm run命令，就可以执行这段脚本。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ npm run build <br><span class="hljs-comment"># 等同于执行</span><br>$ <span class="hljs-keyword">node</span> <span class="hljs-title">build</span>.js<br></code></pre></td></tr></table></figure></li><li><p>说明：</p></li></ul><ol><li>npm run test，执行所有的test文件；</li><li>npm run test:mocha，执行特定的文件test&#x2F;mapstorage_test.js；</li><li>nyc -a –reporter&#x3D;html，生成覆盖率报告。</li></ol><h2 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h2><ol><li><a href="https://www.jianshu.com/p/47575895bc54">使用mocha进行单元测试</a></li><li><a href="https://cloud.tencent.com/developer/ask/116244">mocha before() 中的异步函数在it() spec之前完成了吗？</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html">npm scripts 使用指南</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>mocha</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mocha</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第46周</title>
    <link href="/2019/11/13/Year2019Week46/"/>
    <url>/2019/11/13/Year2019Week46/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第46周（2019-11-11-2019-11-17）"><a href="#2019年第46周（2019-11-11-2019-11-17）" class="headerlink" title="2019年第46周（2019&#x2F;11&#x2F;11~2019&#x2F;11&#x2F;17）"></a>2019年第46周（2019&#x2F;11&#x2F;11~2019&#x2F;11&#x2F;17）</h2><ol><li><a href="https://blog.csdn.net/caonuoqi/article/details/51699865">Microsoft Office 2016(ProPlus&#x2F;Visio&#x2F;Project) VOL 简体中文版</a></li><li>&nbsp;<br><escape><span id="more"></span></escape></li></ol>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Office</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第45周</title>
    <link href="/2019/11/08/Year2019Week45/"/>
    <url>/2019/11/08/Year2019Week45/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第45周（2019-11-04-2019-11-10）"><a href="#2019年第45周（2019-11-04-2019-11-10）" class="headerlink" title="2019年第45周（2019&#x2F;11&#x2F;04~2019&#x2F;11&#x2F;10）"></a>2019年第45周（2019&#x2F;11&#x2F;04~2019&#x2F;11&#x2F;10）</h2><ol><li><a href="https://www.cnblogs.com/hujunzheng/p/10508044.html">使用pdfBox实现pdf转图片，解决中文方块乱码等问题</a></li><li><a href="http://www.xwood.net/_site_domain_/_root/5870/5874/t_c279299.html">通过apache的pdfbox、poi定义PdfToImg工具类将pdf转图片格式、多图片进行合并一张等逻辑处理</a></li><li><a href="https://www.jianshu.com/p/7222874ce005">pdf转图片程序(java pdfbox实现)</a></li><li><a href="https://www.jb51.net/article/144380.htm">Java实现PDF转图片的方法(可用)</a> </li><li><a href="https://zhidao.baidu.com/question/54064551.html">Java中怎样获得一个文件夹中的所有文件名</a></li><li><a href="https://blog.csdn.net/u014155085/article/details/86077614">使用pdfBox实现pdf转图片，解决中文方块乱码等问题</a></li><li><a href="https://blog.csdn.net/xqnode/article/details/80525995">Java pdf和jpg互转</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Acrobat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第44周</title>
    <link href="/2019/10/31/Year2019Week44/"/>
    <url>/2019/10/31/Year2019Week44/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第44周（2019-10-28-2019-11-03）"><a href="#2019年第44周（2019-10-28-2019-11-03）" class="headerlink" title="2019年第44周（2019&#x2F;10&#x2F;28~2019&#x2F;11&#x2F;03）"></a>2019年第44周（2019&#x2F;10&#x2F;28~2019&#x2F;11&#x2F;03）</h2><ol><li><p><a href="https://www.52pojie.cn/thread-1033848-1-1.html">Adobe Acrobat DC 解决打开强制登录</a></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">Adobe Acrobat DC 使用注册机激活，弹出试用期到期，或者必须使用账号登录才能使用。<br><br>可以通过以下方法尝试解决：<br><span class="hljs-number">1.</span>打开注册表（运行 regedit），依次找到<br>HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Adobe\Adobe Acrobat\DC\Activation<br><span class="hljs-number">2.</span>在右边新建一个 DWORD32类型的值，命名为“IsAMTEnforced”，修改数值为<span class="hljs-number">1</span><br><span class="hljs-number">3.</span>使用注册机重新激活。<br><br>Adobe Acrobat DC 安装包是官方下载，使用注册机可以激活。<br></code></pre></td></tr></table></figure></li><li></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Acrobat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python3</title>
    <link href="/2019/10/25/Python3/"/>
    <url>/2019/10/25/Python3/</url>
    
    <content type="html"><![CDATA[<h2 id="PyCharm中Python代码提示：Shadows-name-from-outer-scope"><a href="#PyCharm中Python代码提示：Shadows-name-from-outer-scope" class="headerlink" title="PyCharm中Python代码提示：Shadows name from outer scope"></a>PyCharm中Python代码提示：Shadows name from outer scope</h2><p>确保函数内部和外部的变量名不要重复，这样就不会导致可能由此导致的错误了。</p><ul><li>错误示例<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">arg1=<span class="hljs-string">&#x27;test&#x27;</span></span>):<br>arg1 = arg1   <span class="hljs-comment"># 错误，内部变量名字最后不要和外部变量名字一致</span><br><br>arg1=<span class="hljs-string">&#x27;test2&#x27;</span>  <span class="hljs-comment"># 错误，这里最后不要和调用的函数变量名字一致</span><br>func1(arg1=arg1)<br></code></pre></td></tr></table></figure></li></ul><h2 id="Simplify-Chained-Comparison"><a href="#Simplify-Chained-Comparison" class="headerlink" title="Simplify Chained Comparison"></a>Simplify Chained Comparison</h2><ul><li>issue:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> x &gt;= start <span class="hljs-keyword">and</span> x &lt;= end:<br>    <span class="hljs-comment"># do stuff</span><br></code></pre></td></tr></table></figure></li><li>fixed<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">if</span> <span class="hljs-built_in">start</span> &lt;= x &lt;= <span class="hljs-keyword">end</span>:<br>    <span class="hljs-comment"># do stuff</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.cnblogs.com/EmptyRabbit/p/7679093.html">Python命名规范</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Pycharm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第43周</title>
    <link href="/2019/10/23/Year2019Week43/"/>
    <url>/2019/10/23/Year2019Week43/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第43周（2019-10-21-2019-10-27）"><a href="#2019年第43周（2019-10-21-2019-10-27）" class="headerlink" title="2019年第43周（2019&#x2F;10&#x2F;21~2019&#x2F;10&#x2F;27）"></a>2019年第43周（2019&#x2F;10&#x2F;21~2019&#x2F;10&#x2F;27）</h2><ol><li><a href="https://www.cnblogs.com/zhuzhenwei918/p/6198821.html">正则表达式之数字验证</a></li><li><a href="https://blog.csdn.net/leaderwsh/article/details/80771178">解决bson.errors.InvalidDocument: Cannot encode object:错误的一种方法</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第42周</title>
    <link href="/2019/10/15/Year2019Week42/"/>
    <url>/2019/10/15/Year2019Week42/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第42周（2019-10-14-2019-10-20）"><a href="#2019年第42周（2019-10-14-2019-10-20）" class="headerlink" title="2019年第42周（2019&#x2F;10&#x2F;14~2019&#x2F;10&#x2F;20）"></a>2019年第42周（2019&#x2F;10&#x2F;14~2019&#x2F;10&#x2F;20）</h2><ol><li><a href="https://www.rt-thread.org/qa/forum.php?mod=viewthread&tid=11479">github加速解决方案，速度达到1Mib&#x2F;s以上</a></li><li><a href="https://blog.csdn.net/w958660278/article/details/81161224">加速国内Github访问</a></li><li><a href="https://www.cnblogs.com/jpfss/p/10214200.html">Sublime Text3配置SublimeREPL快捷键的方法（Python）</a></li><li><a href="https://www.cnblogs.com/JackyXu2018/p/8821482.html">SubLime Text 3 配置 SublimeREPL 来交互式调试程序</a></li><li><a href="https://blog.csdn.net/Shenpibaipao/article/details/80232307">打造一款好看又轻量的Python IDE-Sublime Text 3</a></li><li><a href="https://blog.csdn.net/qq_31443999/article/details/88750833">Windows 10更改pip源</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>Python</tag>
      
      <tag>Sublime</tag>
      
      <tag>SublimeREPL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>量化交易</title>
    <link href="/2019/10/11/Stock/"/>
    <url>/2019/10/11/Stock/</url>
    
    <content type="html"><![CDATA[<h2 id="设计文档"><a href="#设计文档" class="headerlink" title="设计文档"></a>设计文档</h2><ol><li>本Topic在什么时候执行（做什么事情 数据来源与流向）；</li><li>表结构及说明（JSON）（库名、集合名、输入表（网站URL、API）、输出表）</li><li>活动图（map reduce计算逻辑）</li><li>性能（input、batch、map、reduce、output、done）（说明什么时候使用done或oneDone、异步池和线程池【堆叠型或分身型】【池的大小】）</li></ol><h2 id="上证数据"><a href="#上证数据" class="headerlink" title="上证数据"></a>上证数据</h2><ol><li><a href="http://www.sse.com.cn/assortment/stock/list/info/price/index.shtml?COMPANY_CODE=600004">行情图表-广州白云国际机场股份有限公司600004</a></li></ol><h2 id="工具与教程"><a href="#工具与教程" class="headerlink" title="工具与教程"></a>工具与教程</h2><ol><li><a href="http://www.ddooo.com/softdown/149400.htm">Studio 3T(MongoDB数据库GUI连接工具) v2019.3.0破解版</a></li><li><a href="https://blog.csdn.net/lvtula/article/details/97623856">Robo3T使用小结</a></li><li><a href="https://blog.csdn.net/u010010606/article/details/79666382">mongo学习笔记二：用户授权和auth登录</a></li><li><a href="https://blog.csdn.net/xuxiannian/article/details/92614392">Mongo认证授权</a></li><li><a href="https://blog.csdn.net/u013388603/article/details/96479343">PyCharm专业最新版2019.1（含激活码）</a></li><li><a href="https://www.runoob.com/mongodb/mongodb-tutorial.html">MongoDB 教程</a></li><li><a href="https://blog.csdn.net/sinat_21591675/article/details/82770360">将pip源更换到国内镜像</a></li><li><a href="https://c.m.163.com/news/a/EKHVUP2O05444XTU.html">爬取90%的网页，只需学会这13行爬虫通用代码框架——Python版！</a></li><li><a href="https://www.cnblogs.com/wj-1314/p/9830950.html">深度学习之PyTorch实战（1）——基础学习及搭建环境</a></li><li><a href="http://www.361way.com/python-stock-tushare/4579.html">Python stock数据包tushare</a></li><li><a href="">股票数据分析（一）数据获取</a></li><li><a href="https://blog.csdn.net/qtlyx/article/details/88559876">tick数据研究</a></li><li><a href="https://www.cnblogs.com/dennis-liucd/p/7669161.html">Python爬虫抓取东方财富网股票数据并实现MySQL数据库存储</a></li><li><a href="https://blog.csdn.net/weixin_43738731/article/details/85274820">Node.js连接MongoDB数据库时出现DeprecationWarning: current URL string parser is deprecated</a></li><li><a href="https://blog.csdn.net/weixin_38421869/article/details/88976181">6小时爬完上交所和深交所的年报问询函</a></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">let</span> client = <span class="hljs-keyword">await</span> MongoClient.connect(mongoUrl,&#123; useUnifiedTopology: <span class="hljs-literal">true</span> &#125;);<br></code></pre></td></tr></table></figure><ol start="15"><li><a href="https://www.kancloud.cn/yunye/axios/234845">Axios 中文说明</a></li></ol><ul><li>设置代理<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">axios.get(dfUrl, &#123;<br>    responseType: <span class="hljs-string">&#x27;stream&#x27;</span>,<br>    proxy: &#123;<br>        host: <span class="hljs-string">&#x27;10.100.254.229&#x27;</span>,<br>        port: <span class="hljs-number">3128</span><br>    &#125;<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">(res)</span> =&gt;</span> &#123;<br>    res.data.<span class="hljs-literal">on</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-function"><span class="hljs-params">(a, b, c)</span> =&gt;</span> &#123;<br>        body += iconv.decode(a, <span class="hljs-string">&quot;gb2312&quot;</span>);<br>    &#125;);<br>    res.data.<span class="hljs-literal">on</span>(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-function"><span class="hljs-params">(a)</span> =&gt;</span> &#123;<br>        resolve(body);<br>    &#125;);<br>&#125;).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-params">(err)</span> =&gt;</span> &#123;<br>    reject(err);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ol><li><a href="http://www.pianshen.com/article/9798139749/">Python爬虫爬取东方财富网的股票信息</a></li><li><a href="https://cloud.tencent.com/developer/news/326580">Python爬虫（5）：比Selenium快100倍的方法爬东方财富网财务报表</a></li><li><a href="">爬虫笔记——东方财富科创板数据爬取（requests方法）</a></li><li><a href="https://blog.csdn.net/binosun/article/details/78697332">东方财富数据爬取</a></li><li><a href="https://www.jianshu.com/p/5ae89abe3d7b">Python爬虫入门：以东方财富网为例</a></li></ol><h2 id="量化研究"><a href="#量化研究" class="headerlink" title="量化研究"></a>量化研究</h2><ol><li><a href="https://github.com/maxmon/abu_ml">机器学习技术研究室</a></li><li><a href="https://github.com/bbfamily/abu">阿布量化交易系统</a></li><li><a href="https://github.com/francinexue/xuefu">基于pyalgotrade的回测框架</a></li><li><a href="https://mp.weixin.qq.com/s/zONzrvBSCom4SA-_RchEpQ">PyTorch 1.3重磅发布，TensorFlow有未来吗？</a></li></ol><h2 id="pymongo"><a href="#pymongo" class="headerlink" title="pymongo"></a>pymongo</h2><ol><li><a href="https://cloud.tencent.com/developer/ask/49413/answer/79739">如何将pymongo.cursor.Cursor转换为字典？</a></li></ol><h2 id="常用Linux-Ubuntu命令"><a href="#常用Linux-Ubuntu命令" class="headerlink" title="常用Linux&#x2F;Ubuntu命令"></a>常用Linux&#x2F;Ubuntu命令</h2><ul><li><p>查看文件（文件夹）路径</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">chenqing<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:/usr/bin</span><span class="hljs-variable">$ </span>which mongo<br>/usr/bin/mongo<br></code></pre></td></tr></table></figure></li><li><p>查看文件（文件夹）在哪个分区</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">chenqing<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:/usr/bin</span><span class="hljs-variable">$ </span>df -h /usr/bin<br><span class="hljs-title class_">Filesystem</span>      <span class="hljs-title class_">Size</span>  <span class="hljs-title class_">Used</span> <span class="hljs-title class_">Avail</span> <span class="hljs-title class_">Use</span>% <span class="hljs-title class_">Mounted</span> on<br>/dev/sda1        <span class="hljs-number">37</span>G   <span class="hljs-number">12</span>G   <span class="hljs-number">24</span>G  <span class="hljs-number">33</span>% /<br></code></pre></td></tr></table></figure></li><li><p>查看文件大小</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">root@ubuntu:/data/mongodata/data<span class="hljs-comment"># ls -hl</span><br>total 289M<br>drwxr-xr-x<span class="hljs-number"> 2 </span>mongodb mongodb 4.0K Oct<span class="hljs-number"> 14 </span>10:27 journal<br>-rw-------<span class="hljs-number"> 1 </span>mongodb mongodb  64M Oct<span class="hljs-number"> 14 </span>08:25 local.0<br>-rw-------<span class="hljs-number"> 1 </span>mongodb mongodb  16M Oct<span class="hljs-number"> 14 </span>08:25 local.ns<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>mongodb mongodb   <span class="hljs-number"> 5 </span>Oct<span class="hljs-number"> 14 </span>08:25 mongod.lock<br>-rw-------<span class="hljs-number"> 1 </span>mongodb nogroup  64M Oct<span class="hljs-number"> 14 </span>14:04 quant_01.0<br>-rw-------<span class="hljs-number"> 1 </span>mongodb nogroup 128M Oct<span class="hljs-number"> 14 </span>14:04 quant_01.1<br>-rw-------<span class="hljs-number"> 1 </span>mongodb nogroup  16M Oct<span class="hljs-number"> 14 </span>14:04 quant_01.ns<br>drwxr-xr-x<span class="hljs-number"> 2 </span>mongodb nogroup 4.0K Oct<span class="hljs-number"> 14 </span>11:33 _tmp<br></code></pre></td></tr></table></figure></li></ul><p>参考文档：<a href="https://www.linuxidc.com/Linux/2018-02/150995.htm">Linux或Ubuntu中查看磁盘空间大小的10个df命令</a></p><h2 id="安装django"><a href="#安装django" class="headerlink" title="安装django"></a>安装django</h2><p><a href="https://www.cnblogs.com/liuyuan216/p/3510594.html">vim模式下报错E37: No write since last change (add ! to override)</a></p><p>:w!</p><p>sudo 打开</p><p><a href="https://blog.csdn.net/sinat_21591675/article/details/82770360">将pip源更换到国内镜像</a></p><ul><li><p>先创建 ~&#x2F;.pip&#x2F; 文件夹，再创建 ~&#x2F;.pip&#x2F;pip.conf 文件，然后新增内容  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[<span class="hljs-keyword">global</span>]<br><span class="hljs-keyword">index</span>-url = https://pypi.tuna.tsinghua.edu.cn/simple<br>[install]<br><span class="hljs-keyword">trusted</span>-host = https://pypi.tuna.tsinghua.edu.cn<br></code></pre></td></tr></table></figure></li><li><p><a href="https://stackoverflow.com/questions/43398961/pip-module-has-no-attribute-main">PIP module has no attribute “main”</a>  </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">easy_install <span class="hljs-comment">--upgrade pip worked for me.</span><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> tushare<br>pip <span class="hljs-keyword">install</span> pandas<br>pip <span class="hljs-keyword">install</span> pymongo<br>pip <span class="hljs-keyword">install</span> matplotlib<br>pip <span class="hljs-keyword">install</span> bs4<br></code></pre></td></tr></table></figure><h2 id="东方财富网"><a href="#东方财富网" class="headerlink" title="东方财富网"></a>东方财富网</h2><ul><li>d</li></ul><h2 id="JSON-相关"><a href="#JSON-相关" class="headerlink" title="JSON 相关"></a>JSON 相关</h2><ul><li>生成JSON<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-keyword">let</span> params = &#123;&#125;;<br><span class="hljs-keyword">if</span> (url.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;?&#x27;</span>) !== -<span class="hljs-number">1</span>) &#123;<br>    params = url.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;?&quot;</span>);<br>    <span class="hljs-comment">// console.log(params);</span><br>    params = params[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> $i = <span class="hljs-number">0</span>; $i &lt; params.<span class="hljs-property">length</span>; $i++) &#123;<br>        <span class="hljs-keyword">let</span> myitem = params[$i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>);<br>        <span class="hljs-comment">//console.log(myitem[0] + &quot;===========&quot; + myitem[1] + &quot;\n&quot;);</span><br>        <span class="hljs-keyword">let</span> itemKey = myitem[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">let</span> itemValue = myitem[<span class="hljs-number">1</span>];<br>        param[myitem[<span class="hljs-number">0</span>]] = myitem[<span class="hljs-number">1</span>];<br>        <span class="hljs-comment">//param[itemKey] = itemValue;</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(param, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;\t&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ul><ol><li><a href="https://www.cnblogs.com/ningvsban/p/3660654.html">JSON.stringify 语法实例讲解</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>Stock</category>
      
      <category>Linux</category>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第39周</title>
    <link href="/2019/09/23/Year2019Week39/"/>
    <url>/2019/09/23/Year2019Week39/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第39周（2019-09-23-2019-09-29）"><a href="#2019年第39周（2019-09-23-2019-09-29）" class="headerlink" title="2019年第39周（2019&#x2F;09&#x2F;23~2019&#x2F;09&#x2F;29）"></a>2019年第39周（2019&#x2F;09&#x2F;23~2019&#x2F;09&#x2F;29）</h2><ol><li><a href="https://www.cnblogs.com/Molly0925/p/6062857.html">关于Linux系统使用遇到的问题-1：vi 打开只读(readonly)文件如何退出保存？</a></li><li><a href="https://blog.csdn.net/u010684585/article/details/78444006">在Ubuntu下如何压缩一个文件夹</a></li></ol><pre><code class="hljs">sudo tar zcvf work.tar.gz work/sudo tar jcvf work.tar.bz2 work/sudo tar cvf work.tar work记住了，要加sudo 顺便也写一下解压缩吧tar xzvf work.tar.gztar xjvf work.tar.bz2tar xvf work.tar</code></pre><ol start="3"><li><a href="https://www.cnblogs.com/chenlove/p/10186934.html">Ubuntu开启端口（持久化）</a></li><li><a href="https://blog.csdn.net/liyuejin/article/details/78410132">使用Docker安装部署Gitlab</a></li><li><a href="https://github.com/ElecRex/tianmao_spider">天猫商城爬虫实战练习</a></li><li><a href="https://github.com/zhangjinzhi/Summary">股票与爬虫</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>vi</tag>
      
      <tag>Docker</tag>
      
      <tag>Gitlab</tag>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第40周</title>
    <link href="/2019/09/23/Year2019Week40/"/>
    <url>/2019/09/23/Year2019Week40/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第40周（2019-09-23-2019-09-29）"><a href="#2019年第40周（2019-09-23-2019-09-29）" class="headerlink" title="2019年第40周（2019&#x2F;09&#x2F;23~2019&#x2F;09&#x2F;29）"></a>2019年第40周（2019&#x2F;09&#x2F;23~2019&#x2F;09&#x2F;29）</h2><ol><li><a href="https://www.cnblogs.com/Molly0925/p/6062857.html">bare</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>vi</tag>
      
      <tag>Docker</tag>
      
      <tag>Gitlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MacDown</title>
    <link href="/2019/09/20/MacDown_Help/"/>
    <url>/2019/09/20/MacDown_Help/</url>
    
    <content type="html"><![CDATA[<h1 id="MacDown"><a href="#MacDown" class="headerlink" title="MacDown"></a>MacDown</h1><p><img src="http://macdown.uranusjr.com/static/images/logo-160.png" alt="MacDown logo"></p><p>Hello there! I’m <strong>MacDown</strong>, the open source Markdown editor for OS X.</p><p>Let me introduce myself.</p><h2 id="Markdown-and-I"><a href="#Markdown-and-I" class="headerlink" title="Markdown and I"></a>Markdown and I</h2><p><strong>Markdown</strong> is a plain text formatting syntax created by John Gruber, aiming to provide a easy-to-read and feasible markup. The original Markdown syntax specification can be found <a href="http://daringfireball.net/projects/markdown/syntax">here</a>.</p><p><strong>MacDown</strong> is created as a simple-to-use editor for Markdown documents. I render your Markdown contents real-time into HTML, and display them in a preview panel.</p><p><img src="http://d.pr/i/10UGP+" alt="MacDown Screenshot"></p><p>I support all the original Markdown syntaxes. But I can do so much more! Various popular but non-standard syntaxes can be turned on&#x2F;off from the <a href="#markdown-pane"><strong>Markdown</strong> preference pane</a>.</p><p>You can specify extra HTML rendering options through the <a href="#rendering-pane"><strong>Rendering</strong> preference pane</a>.</p><p>You can customize the editor window to you liking in the <a href="#editor-pane"><strong>Editor</strong> preferences pane</a>:</p><p>You can configure various application (that’s me!) behaviors in the <a href="#general-pane"><strong>General</strong> preference pane</a>.</p><h2 id="The-Basics"><a href="#The-Basics" class="headerlink" title="The Basics"></a>The Basics</h2><p>Before I tell you about all the extra syntaxes and capabilities I have, I’ll introduce you to the basics of standard markdown. If you already know markdown, and want to jump straight to learning about the fancier things I can do, I suggest you skip to the <a href="#markdown-pane"><strong>Markdown</strong> preference pane</a>. Lets jump right in.  </p><h3 id="Line-Breaks"><a href="#Line-Breaks" class="headerlink" title="Line Breaks"></a>Line Breaks</h3><p>To force a line break, put two spaces and a newline (return) at the end of the line.</p><ul><li><p>This two-line bullet<br>won’t break</p></li><li><p>This two-line bullet<br>will break</p></li></ul><p>Here is the code:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust">* This two-line bul<span class="hljs-keyword">let</span> <br><span class="hljs-variable">won</span><span class="hljs-symbol">&#x27;t</span> <span class="hljs-keyword">break</span><br><br>* This two-line bul<span class="hljs-keyword">let</span>  <br><span class="hljs-variable">will</span> <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h3 id="Strong-and-Emphasize"><a href="#Strong-and-Emphasize" class="headerlink" title="Strong and Emphasize"></a>Strong and Emphasize</h3><p><strong>Strong</strong>: <code>**Strong**</code> or <code>__Strong__</code> (Command-B)<br><em>Emphasize</em>: <code>*Emphasize*</code> or <code>_Emphasize_</code>[^emphasize] (Command-I)</p><h3 id="Headers-like-this-one"><a href="#Headers-like-this-one" class="headerlink" title="Headers (like this one!)"></a>Headers (like this one!)</h3><pre><code class="hljs">Header 1========Header 2--------</code></pre><p>or</p><pre><code class="hljs"># Header 1## Header 2### Header 3#### Header 4##### Header 5###### Header 6</code></pre><h3 id="Links-and-Email"><a href="#Links-and-Email" class="headerlink" title="Links and Email"></a>Links and Email</h3><h4 id="Inline"><a href="#Inline" class="headerlink" title="Inline"></a>Inline</h4><p>Just put angle brackets around an email and it becomes clickable: <a href="mailto:&#x75;&#114;&#x61;&#x6e;&#117;&#115;&#106;&#x72;&#x40;&#103;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;">&#x75;&#114;&#x61;&#x6e;&#117;&#115;&#106;&#x72;&#x40;&#103;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;</a><br><code>&lt;uranusjr@gmail.com&gt;</code>  </p><p>Same thing with urls: <a href="http://macdown.uranusjr.com/">http://macdown.uranusjr.com</a><br><code> &lt;http://macdown.uranusjr.com&gt;</code>  </p><p>Perhaps you want to some link text like this: <a href="http://macdown.uranusjr.com/" title="Title">Macdown Website</a><br><code>[Macdown Website](http://macdown.uranusjr.com &quot;Title&quot;)</code> (The title is optional)  </p><h4 id="Reference-style"><a href="#Reference-style" class="headerlink" title="Reference style"></a>Reference style</h4><p>Sometimes it looks too messy to include big long urls inline, or you want to keep all your urls together.  </p><p>Make <a href="http://macdown.uranusjr.com/" title="Title">a link</a> <code>[a link][arbitrary_id]</code> then on it’s own line anywhere else in the file:<br><code>[arbitrary_id]: http://macdown.uranusjr.com &quot;Title&quot;</code></p><p>If the link text itself would make a good id, you can link <a href="http://macdown.uranusjr.com/">like this</a> <code>[like this][]</code>, then on it’s own line anywhere else in the file:<br><code>[like this]: http://macdown.uranusjr.com</code>  </p><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><h4 id="Inline-1"><a href="#Inline-1" class="headerlink" title="Inline"></a>Inline</h4><p><code>![Alt Image Text](path/or/url/to.jpg &quot;Optional Title&quot;)</code></p><h4 id="Reference-style-1"><a href="#Reference-style-1" class="headerlink" title="Reference style"></a>Reference style</h4><p><code>![Alt Image Text][image-id]</code><br>on it’s own line elsewhere:<br><code>[image-id]: path/or/url/to.jpg &quot;Optional Title&quot;</code></p><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><ul><li>Lists must be preceded by a blank line (or block element)</li><li>Unordered lists start each item with a <code>*</code></li></ul><ul><li><code>-</code> works too<ul><li>Indent a level to make a nested list<ol><li>Ordered lists are supported.</li><li>Start each item (number-period-space) like <code>1. </code></li><li>It doesn’t matter what number you use, I will render them sequentially</li><li>So you might want to start each line with <code>1.</code> and let me sort it out</li></ol></li></ul></li></ul><p>Here is the code:</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">* Lists must be preceded <span class="hljs-keyword">by</span> a blank line (<span class="hljs-built_in">or</span> block element)<br>* Unordered lists start <span class="hljs-keyword">each</span> item <span class="hljs-keyword">with</span> a `*`<br>- `-` works too<br>* Indent a level <span class="hljs-keyword">to</span> make a nested list<br><span class="hljs-number">1</span>. Ordered lists are supported.<br><span class="hljs-number">2</span>. Start <span class="hljs-keyword">each</span> item (number-period-space) <span class="hljs-built_in">like</span> `<span class="hljs-number">1</span>. `<br><span class="hljs-number">42</span>. It doesn<span class="hljs-comment">&#x27;t matter what number you use, I will render them sequentially</span><br><span class="hljs-number">1</span>. So you might want <span class="hljs-keyword">to</span> start <span class="hljs-keyword">each</span> line <span class="hljs-keyword">with</span> `<span class="hljs-number">1</span>.` <span class="hljs-built_in">and</span> <span class="hljs-keyword">let</span> <span class="hljs-keyword">me</span> sort it out<br></code></pre></td></tr></table></figure><h3 id="Block-Quote"><a href="#Block-Quote" class="headerlink" title="Block Quote"></a>Block Quote</h3><blockquote><p>Angle brackets <code>&gt;</code> are used for block quotes.<br>Technically not every line needs to start with a <code>&gt;</code> as long as<br>there are no empty lines between paragraphs.<br>Looks kinda ugly though.</p><blockquote><p>Block quotes can be nested.  </p><blockquote><p>Multiple Levels</p></blockquote></blockquote><p>Most markdown syntaxes work inside block quotes.</p><ul><li>Lists</li><li><a href="http://macdown.uranusjr.com/" title="Title">Links</a></li><li>Etc.</li></ul></blockquote><p>Here is the code:</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Angle</span> brackets <span class="hljs-string">`&gt;`</span> are used <span class="hljs-keyword">for</span> block quotes.  </span><br>Technically not every line needs to start with a `&gt;` as long as<br>there are no empty lines between paragraphs.  <br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Looks</span> kinda ugly though.</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&gt; <span class="hljs-title class_">Block</span> quotes can be nested.  </span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&gt; &gt; <span class="hljs-title class_">Multiple</span> <span class="hljs-title class_">Levels</span></span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Most</span> markdown syntaxes work inside block quotes.</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">* <span class="hljs-title class_">Lists</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">* [<span class="hljs-title class_">Links</span>][arbitrary_id]</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">* <span class="hljs-title class_">Etc</span>.</span><br></code></pre></td></tr></table></figure><h3 id="Inline-Code"><a href="#Inline-Code" class="headerlink" title="Inline Code"></a>Inline Code</h3><p><code>Inline code</code> is indicated by surrounding it with backticks:<br><code>`Inline code`</code></p><h2 id="If-your-code-has-backticks-that-need-to-be-displayed-you-can-use-double-backticks-print-‘Hello-world-’"><a href="#If-your-code-has-backticks-that-need-to-be-displayed-you-can-use-double-backticks-print-‘Hello-world-’" class="headerlink" title="If your code has `backticks`  that need to be displayed, you can use double backticks:print(‘Hello world!’)"></a>If your <code>code has `backticks` </code> that need to be displayed, you can use double backticks:<br><figure class="highlight plaintext"><figcaption><span>``Code with `backticks` `` ````  (mind the spaces preceding the final set of backticks)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs `"><br><br>### Block Code<br>If you indent at least four spaces or one tab, I&#x27;ll display a code block.<br><br>print(&#x27;This is a code block&#x27;)<br>print(&#x27;The block must be preceded by a blank line&#x27;)<br>print(&#x27;Then indent at least 4 spaces or 1 tab&#x27;)<br>print(&#x27;Nesting does nothing. Your code is displayed Literally&#x27;)<br><br>I also know how to do something called [Fenced Code Blocks](#fenced-code-block) which I will tell you about later.<br><br>### Horizontal Rules<br>If you type three asterisks `***` or three dashes `---` on a line, I&#x27;ll display a horizontal rule:<br><br>***<br><br><br>## &lt;a name=&quot;markdown-pane&quot;&gt;&lt;/a&gt;The Markdown Preference Pane<br>This is where I keep all preferences related to how I parse markdown into html.  <br>![Markdown preferences pane](http://d.pr/i/RQEi+)<br><br>### Document Formatting<br>The ***Smartypants*** extension automatically transforms straight quotes (`&quot;` and `&#x27;`) in your text into typographer’s quotes (`“`, `”`, `‘`, and `’`) according to the context. Very useful if you’re a typography freak like I am. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence.<br><br><br>### Block Formatting<br><br>#### Table<br><br>This is a table:<br><br>First Header  | Second Header<br>------------- | -------------<br>Content Cell  | Content Cell<br>Content Cell  | Content Cell<br><br>You can align cell contents with syntax like this:<br><br>| Left Aligned  | Center Aligned  | Right Aligned |<br>|:------------- |:---------------:| -------------:|<br>| col 3 is      | some wordy text |         $1600 |<br>| col 2 is      | centered        |           $12 |<br>| zebra stripes | are neat        |            $1 |<br><br>The left- and right-most pipes (`|`) are only aesthetic, and can be omitted. The spaces don’t matter, either. Alignment depends solely on `:` marks.<br><br>#### &lt;a name=&quot;fenced-code-block&quot;&gt;Fenced Code Block&lt;/a&gt;<br><br>This is a fenced code block:<br><br></code></pre></td></tr></table></figure><br>print(‘Hello world!’)<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><br>You can also use waves (`~`) instead of back ticks (`` ` ``):<br><br>~~~<br>print(&#x27;Hello world!&#x27;)<br>~~~<br><br><br>You can add an optional language ID at the end of the first line. The language ID will only be used to highlight the code inside if you tick the <span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>Enable highlighting in code blocks<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span> option. This is what happens if you enable it:<br><br>![Syntax highlighting example](http://d.pr/i/9HM6+)<br><br>I support many popular languages as well as some generic syntax descriptions that can be used if your language of choice is not supported. See [relevant sections on the official site](http://macdown.uranusjr.com/features/) for a full list of supported syntaxes.<br><br><br><span class="hljs-comment">### Inline Formatting</span><br><br>The following is a list of optional inline markups supported:<br><br>Option name         |<span class="hljs-string"> Markup           </span>|<span class="hljs-string"> Result if enabled     </span>|<br>--------------------|<span class="hljs-string">------------------</span>|<span class="hljs-string">-----------------------</span>|<br>Intra-word emphasis |<span class="hljs-string"> So A\*maz\*ing   </span>|<span class="hljs-string"> So A&lt;em&gt;maz&lt;/em&gt;ing   </span>|<br>Strikethrough       |<span class="hljs-string"> \~~Much wow\~~   </span>|<span class="hljs-string"> &lt;del&gt;Much wow&lt;/del&gt;   </span>|<br>Underline [^under]  |<span class="hljs-string"> \_So doge\_      </span>|<span class="hljs-string"> &lt;u&gt;So doge&lt;/u&gt;        </span>|<br>Quote [^quote]      |<span class="hljs-string"> \&quot;Such editor\&quot;  </span>|<span class="hljs-string"> &lt;q&gt;Such editor&lt;/q&gt;    </span>|<br>Highlight           |<span class="hljs-string"> \==So good\==    </span>|<span class="hljs-string"> &lt;mark&gt;So good&lt;/mark&gt;  </span>|<br>Superscript         |<span class="hljs-string"> hoge\^(fuga)     </span>|<span class="hljs-string"> hoge&lt;sup&gt;fuga&lt;/sup&gt;   </span>|<br>Autolink            |<span class="hljs-string"> http://t.co      </span>|<span class="hljs-string"> &lt;http://t.co&gt;         </span>|<br>Footnotes           |<span class="hljs-string"> [\^4] and [\^4]: </span>|<span class="hljs-string"> [^4] and footnote 4   </span>|<br><br>[^4]: You don&#x27;t have to use a number. Arbitrary things like `[^footy note4]` and `[^footy note4]:` will also work. <span class="hljs-keyword">But</span> they will <span class="hljs-symbol">*</span>render<span class="hljs-symbol">*</span> as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes. <br><br><br><br><br><span class="hljs-comment">## &lt;a name=&quot;rendering-pane&quot;&gt;&lt;/a&gt;The Rendering Preference Pane</span><br>This is where I keep preferences relating to how I render and style the parsed markdown in the preview window.  <br>![Rendering preferences pane](http://d.pr/i/rT4d+)<br><br><span class="hljs-comment">### CSS</span><br>You can choose different css files for me to use to render your html. You can even customize or add your own custom css files.<br><br><span class="hljs-comment">### Syntax Highlighting</span><br>You have already seen how I can syntax highlight your fenced code blocks. See the [Fenced Code Block](<span class="hljs-comment">#fenced-code-block) section if you haven’t! You can also choose different themes for syntax highlighting.</span><br><br><span class="hljs-comment">### TeX-like Math Syntax</span><br>I can also render TeX-like math syntaxes, if you allow me to.[^math] I can do inline math like this: \\( 1 + 1 \\) or this (in MathML): <span class="hljs-variable">&lt;math&gt;</span><span class="hljs-variable">&lt;mn&gt;</span>1<span class="hljs-variable">&lt;/mn&gt;</span><span class="hljs-variable">&lt;mo&gt;</span>+<span class="hljs-variable">&lt;/mo&gt;</span><span class="hljs-variable">&lt;mn&gt;</span>1<span class="hljs-variable">&lt;/mn&gt;</span><span class="hljs-variable">&lt;/math&gt;</span>, and block math:<br><br>\\[<br>    A^T_S = B<br>\\]<br><br>or (in MathML)<br><br><span class="hljs-variable">&lt;math display=&quot;block&quot;&gt;</span><br>    <span class="hljs-variable">&lt;msubsup&gt;</span><span class="hljs-variable">&lt;mi&gt;</span>A<span class="hljs-variable">&lt;/mi&gt;</span> <span class="hljs-variable">&lt;mi&gt;</span>S<span class="hljs-variable">&lt;/mi&gt;</span> <span class="hljs-variable">&lt;mi&gt;</span>T<span class="hljs-variable">&lt;/mi&gt;</span><span class="hljs-variable">&lt;/msubsup&gt;</span><br>    <span class="hljs-variable">&lt;mo&gt;</span>=<span class="hljs-variable">&lt;/mo&gt;</span><br>    <span class="hljs-variable">&lt;mi&gt;</span>B<span class="hljs-variable">&lt;/mi&gt;</span><br><span class="hljs-variable">&lt;/math&gt;</span><br><br><br><br><span class="hljs-comment">### Task List Syntax</span><br>1. [x] I can render checkbox list syntax<br><span class="hljs-symbol">*</span> [x] I support nesting<br><span class="hljs-symbol">*</span> [x] I support ordered <span class="hljs-symbol">*</span>and<span class="hljs-symbol">*</span> unordered lists<br>2. [ ] I don&#x27;t support clicking checkboxes directly in the html window<br><br><br><span class="hljs-comment">### Jekyll front-matter</span><br>If you like, I can display Jekyll front-matter in a nice table. Just make sure you put the front-matter at the very beginning of the file, and fence it with `---`. For example:<br><br></code></pre></td></tr></table></figure></h2><h2 id="title-“Macdown-is-my-friend”date-2014-06-06-20-00-00"><a href="#title-“Macdown-is-my-friend”date-2014-06-06-20-00-00" class="headerlink" title="title: “Macdown is my friend”date: 2014-06-06 20:00:00"></a>title: “Macdown is my friend”<br>date: 2014-06-06 20:00:00</h2><pre><code class="hljs">### Render newline literallyNormally I require you to put two spaces and a newline (aka return) at the end of a line in order to create a line break. If you like, I can render a newline any time you end a line with a newline. However, if you enable this, markdown that looks lovely when I render it might look pretty funky when you let some *other* program render it.## &lt;a name=&quot;general-pane&quot;&gt;&lt;/a&gt;The General Preferences PaneThis is where I keep preferences related to application behavior.  ![General preferences pane](http://d.pr/i/rvwu+)The General Preferences Pane allows you to tell me how you want me to behave. For example, do you want me to make sure there is a document open when I launch? You can also tell me if I should constantly update the preview window as you type, or wait for you to hit `command-R` instead. Maybe you prefer your editor window on the right? Or to see the word-count as you type. This is also the place to tell me if you are interested in pre-releases of me, or just want to stick to better-tested official releases.  ## &lt;a name=&quot;editor-pane&quot;&gt;&lt;/a&gt;The Editor Preference PaneThis is where I keep preferences related to the behavior and styling of the editing window.  ![Editor preferences pane](http://d.pr/i/6OL5+)### StylingMy editor provides syntax highlighting. You can edit the base font and the coloring/sizing theme. I provided some default themes (courtesy of [Mou](http://mouapp.com)’s creator, Chen Luo) if you don’t know where to start.You can also edit, or even add new themes if you want to! Just click the ***Reveal*** button, and start moving things around. Remember to use the correct file extension (`.styles`), though. I’m picky about that.I offer auto-completion and other functions to ease your editing experience. If you don’t like it, however, you can turn them off.## Hack OnThat’s about it. Thanks for listening. I’ll be quiet from now on (unless there’s an update about the app—I’ll remind you for that!).Happy writing![^emphasize]: If **Underlines** is turned on, `_this notation_` will render as underlined instead of emphasized [^under]: If **Underline** is disabled `_this_` will be rendered as *emphasized* instead of being underlined.[^quote]: **Quote** replaces literal `&quot;` characters with html `&lt;q&gt;` tags. **Quote** and **Smartypants** are syntactically incompatible. If both are enabled, **Quote** takes precedence. Note that **Quote** is different from *blockquote*, which is part of standard Markdown.[^math]: Internet connection required.</code></pre>]]></content>
    
    
    <categories>
      
      <category>MacDown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MacDown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第38周</title>
    <link href="/2019/09/16/Year2019Week38/"/>
    <url>/2019/09/16/Year2019Week38/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第38周（2019-09-16-2019-09-22）"><a href="#2019年第38周（2019-09-16-2019-09-22）" class="headerlink" title="2019年第38周（2019&#x2F;09&#x2F;16~2019&#x2F;09&#x2F;22）"></a>2019年第38周（2019&#x2F;09&#x2F;16~2019&#x2F;09&#x2F;22）</h2><ol><li><a href="https://my.oschina.net/u/263874/blog/1549465">sequelize update 原生sql 没有返回值(事务)</a></li><li><a href="https://jingyan.baidu.com/article/597a06431ae2cf312a524379.html">pdf文档怎么双面打印</a></li><li><a href="https://www.cnblogs.com/zhongyehai/p/10643624.html">解决linux下svn update 产生Node remains in conflict的问题</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sequelize</tag>
      
      <tag>事务</tag>
      
      <tag>pdf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins</title>
    <link href="/2019/09/10/Jenkins/"/>
    <url>/2019/09/10/Jenkins/</url>
    
    <content type="html"><![CDATA[<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol><li><a href="https://blog.csdn.net/iamniconico/article/details/82023173">Jenkins安装及自动部署Maven项目</a></li><li><a href="https://blog.csdn.net/m0_37444820/article/details/80865240">Jenkins+Maven+Git 自动化构建</a></li></ol><h1 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h1><p>下载相应的jdk软件包，然后解压安装，这里包名称为：jdk-8u221-linux-x64.tar.gz</p><ul><li><p>解压</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># tar -xzf jdk-8u221-linux-x64.tar.gz</span><br></code></pre></td></tr></table></figure></li><li><p>新建文件夹</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># mkdir -p /usr/java/</span><br></code></pre></td></tr></table></figure></li><li><p>拷贝jdk到新文件夹中</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># mv jdk1.8.0_221/ /usr/java/</span><br></code></pre></td></tr></table></figure></li></ul><p>然后配置环境变量，这样可以任何地方引用jdk，如下配置：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># vim /etc/profile </span><br></code></pre></td></tr></table></figure><p>最后面加入以下语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_221<br><span class="hljs-built_in">export</span> CLASSPATH=<span class="hljs-variable">$CLASSPATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/lib:<span class="hljs-variable">$JAVA_HOME</span>/jre/lib<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$JAVA_HOME</span>/jre/bin:<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$HOMR</span>/bin<br></code></pre></td></tr></table></figure><ul><li>使环境变量马上生效  <figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># source /etc/profile</span><br></code></pre></td></tr></table></figure></li><li>查看java版本，看到java version “1.8.0_221”版本即代表Java JDK安装成功(在centos7 当中操作指令集是不一样的 ，jdk1.7 查看版本号可以通过 java -Vand java –version 查看，而jdk1.8 就得通过 java -version来查看版本号了)。<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">[root@localhost ~]<span class="hljs-comment"># java -version</span><br><span class="hljs-keyword">java </span>version <span class="hljs-string">&quot;1.8.0_221&quot;</span><br><span class="hljs-keyword">Java(TM) </span>SE Runtime Environment (<span class="hljs-keyword">build </span><span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>_221-<span class="hljs-keyword">b11)</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">Java </span>HotSpot(TM) <span class="hljs-number">64</span>-<span class="hljs-keyword">Bit </span>Server VM (<span class="hljs-keyword">build </span><span class="hljs-number">25</span>.<span class="hljs-number">221</span>-<span class="hljs-keyword">b11, </span>mixed mode)<br></code></pre></td></tr></table></figure></li></ul><h1 id="安装-Tomcat"><a href="#安装-Tomcat" class="headerlink" title="安装 Tomcat"></a>安装 Tomcat</h1><p>下载相应的tomcat软件包，然后解压安装，这里包名称为：apache-tomcat-8.5.45.tar.gz</p><ul><li><p>解压</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># tar -xzf apache-tomcat-8.5.45.tar.gz</span><br></code></pre></td></tr></table></figure></li><li><p>新建文件夹</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># mkdir -p /usr/local/tomcat</span><br></code></pre></td></tr></table></figure></li><li><p>拷贝tomcat到新文件夹中</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># mv apache-tomcat-8.5.45/* /usr/local/tomcat/</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h2><ul><li><p>移动文件夹  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv .<span class="hljs-regexp">/WorkReport/</span>web.xml .<span class="hljs-regexp">/WorkReport/</span>WEB-INF/<br>注：移动<span class="hljs-regexp">/WorkReport/</span>web.xml文件到<span class="hljs-regexp">/WorkReport/</span>WEB-INF/<br><br>mv <span class="hljs-regexp">/data/</span>new <span class="hljs-regexp">/data/</span>old/<br>注：移动<span class="hljs-regexp">/data/</span>new 到<span class="hljs-regexp">/data/</span>old/文件夹下<br>注意点：移动文件夹的话就不要再加 / 了<br><br>如果是移动文件夹下的所有文件的话就可以文件夹后面跟上 /* <br><br><br>mv <span class="hljs-regexp">/data/</span>new<span class="hljs-regexp">/* /</span>data<span class="hljs-regexp">/old/</span><br></code></pre></td></tr></table></figure></li><li><p>删除文件夹</p></li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> tomcat]<span class="hljs-meta"># rm -rf apache-tomcat-8.5.45/</span><br></code></pre></td></tr></table></figure><h1 id="打开防火墙8080端口"><a href="#打开防火墙8080端口" class="headerlink" title="打开防火墙8080端口"></a>打开防火墙8080端口</h1><ul><li>打开端口并检查<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">添加指定需要开放的端口：<br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --add-port=8080/tcp --permanent</span><br>重载入添加的端口：<br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --reload</span><br>查询指定端口是否开启成功：<br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --query-port=8080/tcp</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h2><ul><li><p>把得到的war包直接扔到tomcat下webapps&#x2F;ROOT&#x2F;下，启动tomcat，Jenkins就安装完毕！</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@localhost</span> <span class="hljs-operator">~</span>]#cp jenkins.war <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>webapps<span class="hljs-regexp">/ROOT/</span><br></code></pre></td></tr></table></figure></li><li><p>启动tomcat</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@localhost ~]#<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>bin/startup.sh<br>Using CATALINA_BASE:   <span class="hljs-regexp">/usr/</span>local/tomcat<br>Using CATALINA_HOME:   <span class="hljs-regexp">/usr/</span>local/tomcat<br>Using CATALINA_TMPDIR: <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>temp<br>Using JRE_HOME:        <span class="hljs-regexp">/usr/</span>java/jdk1.<span class="hljs-number">8.0</span>_221<br>Using <span class="hljs-keyword">CLASSPATH</span>:       <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>bin<span class="hljs-regexp">/bootstrap.jar:/u</span>sr<span class="hljs-regexp">/local/</span>tomcat<span class="hljs-regexp">/bin/</span>tomcat-juli.jar<br>Tomcat started.<br></code></pre></td></tr></table></figure></li><li><p>停止tomcat</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta">#/usr/local/tomcat/bin/shutdown.sh</span><br></code></pre></td></tr></table></figure></li><li><p>查看日志</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@localhost</span> <span class="hljs-operator">~</span>]#tail <span class="hljs-operator">-</span>fn <span class="hljs-number">100</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>logs<span class="hljs-operator">/</span>catalina.out<br></code></pre></td></tr></table></figure></li><li><p>查看安装密码</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@localhost</span> <span class="hljs-operator">~</span>]# cat <span class="hljs-regexp">/root/</span>.jenkins<span class="hljs-regexp">/secrets/</span>initialAdminPassword<br>999065bef28b4e2f964699e3e78140f9<br></code></pre></td></tr></table></figure></li></ul><p><img src="/Jenkins%5Csnap0001.jpg"></p><p><img src="/Jenkins%5Csnap0002.jpg"></p><h2 id="Maven-安装"><a href="#Maven-安装" class="headerlink" title="Maven 安装"></a>Maven 安装</h2><ul><li><p>下载 Maven</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-<span class="hljs-number">3</span>/<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">2</span>/binaries/apache-maven-<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">2</span>-bin.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># tar -xzf apache-maven-3.6.2-bin.tar.gz</span><br></code></pre></td></tr></table></figure></li><li><p>新建文件夹</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># mkdir -p /usr/local/maven</span><br></code></pre></td></tr></table></figure></li><li><p>拷贝tomcat到新文件夹中</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># mv apache-maven-3.6.2/* /usr/local/maven/</span><br></code></pre></td></tr></table></figure></li><li><p>查看 mvn 帮助</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># cd /usr/local/maven/bin</span><br>[root<span class="hljs-symbol">@localhost</span> bin]<span class="hljs-meta"># ./mvn --help</span><br></code></pre></td></tr></table></figure><p>反向代理设置有误</p></li></ul><p><a href="http://10.100.254.229:8080/jenkins/configure"></a></p><ul><li><p>设置全局变量（系统设置-》全局工具配置）<br><img src="/Jenkins%5Csnap0003.jpg"></p></li><li><p>设置JDK<br><img src="/Jenkins%5Csnap0004.jpg"></p></li><li><p>设置Maven<br><img src="/Jenkins%5Csnap0005.jpg"></p></li><li><p>d</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure></li><li><p>d</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure></li><li><p>d</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第37周</title>
    <link href="/2019/09/09/Year2019Week37/"/>
    <url>/2019/09/09/Year2019Week37/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第37周（2019-09-09-x7e2019-09-15）"><a href="#2019年第37周（2019-09-09-x7e2019-09-15）" class="headerlink" title="2019年第37周（2019&#x2F;09&#x2F;09\x7e2019&#x2F;09&#x2F;15）"></a>2019年第37周（2019&#x2F;09&#x2F;09\x7e2019&#x2F;09&#x2F;15）</h2><ol><li><a href="https://www.cnblogs.com/yuzhongwusan/archive/2008/12/15/1355378.html">Array数组元素的添加和删除</a></li><li><a href="https://www.cnblogs.com/SapphireCastle/p/6395141.html">Centos 软连接和硬链接</a></li><li><a href="https://blog.csdn.net/sayWhat_sayHello/article/details/79924007">CentOS误删 &#x2F;etc&#x2F;profile 的内容（默认，初始配置）</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue 项目构建与开发入门</title>
    <link href="/2019/08/30/vue/"/>
    <url>/2019/08/30/vue/</url>
    
    <content type="html"><![CDATA[<h1 id="开篇：Vue-CLI-3-项目构建基础"><a href="#开篇：Vue-CLI-3-项目构建基础" class="headerlink" title="开篇：Vue CLI 3 项目构建基础"></a>开篇：Vue CLI 3 项目构建基础</h1><p>大家好，当你点进这个标题，开始阅读本章的时候，说明你对 <code>Vue.js</code> 是充满好奇心和求知欲的。我之前写过一篇文章，这样评价 Vue.js，称它是“简单却不失优雅，小巧而不乏大匠”的作品，正如其官网介绍的“易用，灵活和高效”那样。其实框架是 Vue.js 的本质，而真正了解它的人则会把它当成一件作品来欣赏。</p><p>Vue.js 作为一门轻量级、易上手的前端框架，从入门难度和学习曲线上相对其他框架来说算是占据优势的，越来越多的人开始投入 Vue.js 的怀抱，走进 Vue.js 的世界。那么接下来屏幕前的你不妨一起来和我从零开始构建一个 Vue 项目，体会一下 Vue.js 的精彩绝伦。</p><h2 id="依赖工具"><a href="#依赖工具" class="headerlink" title="依赖工具"></a>依赖工具</h2><p>在构建一个 Vue 项目前，我们先要确保你本地安装了 <code>Node</code> 环境以及包管理工具 <code>npm</code>，打开终端运行：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 查看 node 版本</span><br><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br><br><span class="hljs-comment"># 查看 npm 版本</span><br>npm -v<br><br></code></pre></td></tr></table></figure><p>如果成功打印出版本号，说明你本地具备了 node 的运行环境，我们可以使用 npm 来安装管理项目的依赖，而如果没有或报错，则你需要去 <a href="https://nodejs.org/en/">node 官网</a>进行 node 的下载及安装，如图：</p> <img src="/2019/08/30/vue/166c5eb2c6f04593.png" class=""><p>左边的版本是推荐安装的稳定版本，也就是目前已经被正式列入标准的版本，而右边的版本是当前最新的版本，该版本包含了一些新的特性，还未被完全列入标准，可能以后会有所变动。这里建议大家安装最新的 node 稳定版进行开发。</p><h2 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h2><p>当我们安装完 node 后便可以开始进行后续的构建工作了，那么这里我主要给大家介绍下最便捷的脚手架构建。</p><h3 id="1-什么是脚手架"><a href="#1-什么是脚手架" class="headerlink" title="1. 什么是脚手架"></a>1. 什么是脚手架</h3><p>很多人可能经常会听到“脚手架”三个字，无论是前端还是后台，其实它在生活中的含义是为了保证各施工过程顺利进行而搭设的工作平台。因此作为一个工作平台，前端的脚手架可以理解为能够帮助我们快速构建前端项目的一个工具或平台。</p><h3 id="2-vue-cli"><a href="#2-vue-cli" class="headerlink" title="2. vue-cli"></a>2. vue-cli</h3><p>其实说到脚手架，目前很多主流的前端框架都提供了各自官方的脚手架工具，以帮助开发者快速构建起自己的项目，比如 <code>Vue</code>、<code>React</code> 等，这里我们就来介绍下 Vue 的脚手架工具 <code>vue-cli</code>。</p><p>vue-cli 经历了几个版本的迭代，目前最新的版本是 3.x，也是本小册构建项目所使用的版本，我们一起来看下其人性化的构建流程：</p><h4 id="a-安装"><a href="#a-安装" class="headerlink" title="a. 安装"></a>a. 安装</h4><p>我们可以在终端通过以下命令全局安装 vue-cli：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-comment"># 安装 Vue CLI 3.x</span><br><span class="hljs-built_in">npm</span> i -g @vue/cli<br><br></code></pre></td></tr></table></figure><p>如果你习惯使用 <code>yarn</code>，你也可以：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 没有全局安装yarn需执行此命令</span><br>npm i -g yarn<br>yarn <span class="hljs-keyword">global</span> add <span class="hljs-symbol">@vue</span>/cli<br><br></code></pre></td></tr></table></figure><p>注意因为是全局安装，所以 vue-cli 是全局的包，它和我们所处的项目没有关系。同时我们这里介绍的 CLI 版本是最新的 3.x，它和 2.x 版本存在着很大的区别，具体的讲解会在后续章节中进行介绍。</p><h4 id="b-构建"><a href="#b-构建" class="headerlink" title="b. 构建"></a>b. 构建</h4><p>安装完 vue-cli 后，我们在你想要创建的项目目录地址下执行构建命令：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># my-project 是你的项目名称</span><br>vue create <span class="hljs-keyword">my</span>-project<br><br></code></pre></td></tr></table></figure><p>执行完上述命令后，会出现一系列的选择项，我们可以根据自己的需要进行选择，流程图如下：</p><img src="/2019/08/30/vue/16412343fab2e351.png" class=""><p>如果你只想构建一个基础的 Vue 项目，那么使用 <code>Babel</code>、<code>Router</code>、<code>Vuex</code>、<code>CSS Pre-processors</code> 就足够了，最后选择你喜欢的包管理工具 npm or yarn。</p><h4 id="c-启动"><a href="#c-启动" class="headerlink" title="c. 启动"></a>c. 启动</h4><p>等待构建完成后你便可以运行命令来启动你的 Vue 项目：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 打开项目目录</span><br>cd vue-project<br><br><span class="hljs-comment"># 启动项目</span><br>yarn serve<br><br><span class="hljs-comment"># or</span><br>npm <span class="hljs-built_in">run</span> serve<br><br></code></pre></td></tr></table></figure><p>需要注意的是如果启动的时候出现报错或者包丢失等情况，最好将 node 或者 yarn （如果使用）的版本更新到最新重新构建。</p><p>成功后打开浏览器地址：<a href="http://localhost:8080/">http://localhost:8080/</a> 可以看到如下界面：</p> <img src="/2019/08/30/vue/164125dcfb6fa7d5.png" class=""><h4 id="d-目录结构"><a href="#d-目录结构" class="headerlink" title="d. 目录结构"></a>d. 目录结构</h4><p>最后脚手架生成的目录结构如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">├── node_modules     <span class="hljs-comment"># 项目依赖包目录</span><br>├── public<br>│   ├── favicon.ico  <span class="hljs-comment"># ico图标</span><br>│   └── index.html   <span class="hljs-comment"># 首页模板</span><br>├── src <br>│   ├── assets       <span class="hljs-comment"># 样式图片目录</span><br>│   ├── components   <span class="hljs-comment"># 组件目录</span><br>│   ├── views        <span class="hljs-comment"># 页面目录</span><br>│   ├── App.vue      <span class="hljs-comment"># 父组件</span><br>│   ├── main.<span class="hljs-keyword">js </span>     <span class="hljs-comment"># 入口文件</span><br>│   ├── router.<span class="hljs-keyword">js </span>   <span class="hljs-comment"># 路由配置文件</span><br>│   └── store.<span class="hljs-keyword">js </span>    <span class="hljs-comment"># vuex状态管理文件</span><br>├── .gitignore       <span class="hljs-comment"># git忽略文件</span><br>├── .postcssrc.<span class="hljs-keyword">js </span>   <span class="hljs-comment"># postcss配置文件</span><br>├── <span class="hljs-keyword">babel.config.js </span> <span class="hljs-comment"># babel配置文件</span><br>├── package.<span class="hljs-keyword">json </span>    <span class="hljs-comment"># 包管理文件</span><br>└── yarn.lock        <span class="hljs-comment"># yarn依赖信息文件</span><br><br></code></pre></td></tr></table></figure><p>根据你安装时选择的依赖不同，最后生成的目录结构也会有所差异。</p><h3 id="3-可视化界面"><a href="#3-可视化界面" class="headerlink" title="3. 可视化界面"></a>3. 可视化界面</h3><p>当然，除了使用上述命令行构建外，<code>vue-cli 3.x</code> 还提供了可视化的操作界面，在项目目录下我们运行如下命令开启图形化界面：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">vue ui</span><br><br></code></pre></td></tr></table></figure><p>之后浏览器会自动打开本地 <code>8000</code> 端口，页面如下：</p><img src="/2019/08/30/vue/1643ca037f818a81.png" class=""><p>如果你还没有任何项目，那么可以点击创建或者直接导入现有的项目。创建项目和我们使用命令行的步骤基本相同，完全可视化操作，一定程度上降低了构建和使用的难度。项目创建或导入成功后你便可以进入项目进行可视化管理了。</p><img src="/2019/08/30/vue/1643ca8799bb4491.png" class=""><p>在整个管理界面中，我们可以为自己的项目安装 CLI 提供的插件，比如安装 <code>@vue/cli-plugin-babel</code> 插件，同时我们也可以配置相应插件的配置项，进行代码的编译、热更新、检查等。详细的操作大家可以自己进行手动尝试，相信你会发现意想不到的惊喜。</p><h2 id="你还需要了解什么"><a href="#你还需要了解什么" class="headerlink" title="你还需要了解什么"></a>你还需要了解什么</h2><p>上方我们用 vue-cli 成功生成了一个最基础的 Vue 项目，麻雀虽小，五脏俱全，但是想要让麻雀飞起来，我们还要不断的给它进行拓展训练，那么我们还需要了解什么呢？</p> <img src="/2019/08/30/vue/165f2c3a9c4f640c.png" class=""><p>以上这些内容（包含但不限于）将会在本小册的接下来几章进行详细的讲解，你准备好了吗？</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文主要讲述了使用 vue-cli 脚手架进行 Vue 项目构建的基本知识，从构建的流程中我们不难发现 Vue 提供给了我们一套非常灵活可配置的工具，其小巧而不乏大匠的魅力不言而喻。希望大家能够从构建开始，逐渐领略 Vue.js 的匠心，激发自己的对 Vue 的兴趣。</p><h1 id="构建基础篇-1：你需要了解的包管理工具与配置项"><a href="#构建基础篇-1：你需要了解的包管理工具与配置项" class="headerlink" title="构建基础篇 1：你需要了解的包管理工具与配置项"></a>构建基础篇 1：你需要了解的包管理工具与配置项</h1><p>任何一个项目的构建离不开工具和统一的管理标准，在项目开发和维护过程中，我们需要了解安装包的相应工具和配置文件，以此来有效的进行项目的迭代和版本的更新，为项目提供基本的运行环境。本文将详细介绍构建 Vue.js 项目相关的依赖包安装工具和相应的配置文件，为大家提供参考。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>相信大家对于包管理工具的使用一定不会陌生，毕竟它已经成为前端项目中必不可少的一部分，为了照顾部分零基础用户，这里我们做一个简单的介绍。</p><h3 id="1-npm-与-package-json"><a href="#1-npm-与-package-json" class="headerlink" title="1. npm 与 package.json"></a>1. npm 与 package.json</h3><p>npm 是 Node Package Manager 的简称，顾名思义，它是 node 的包管理工具，也是目前世界上最大的开源库生态系统。官方地址为：<a href="https://www.npmjs.com/">https://www.npmjs.com/</a>，你可以在里面找到数以万计的开源包。</p><p>使用 npm 包下载量统计工具，比如 <a href="https://npm-stat.com/">npm-start</a>，我们可以查看相应包在一定时间范围内的下载量数据，下面是 <code>vue-cli</code> 和 <code>@vue/cli</code> 的下载量趋势：</p><img src="/2019/08/30/vue/16441d9cefe89881.png" class=""><p>在上篇文章中我们介绍了使用 vue-cli 来构建自己的项目，并生成了相应的目录结构，而在最外层目录中，我们可以看到有 <code>package.json</code> 这一文件，该文件便是我们需要了解的包管理文件。</p><p>我们先来看一下该文件里面的内容：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;my-project&quot;</span>, <br>    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.1.0&quot;</span>, <br>    <span class="hljs-string">&quot;private&quot;</span>: true, <br>    <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;serve&quot;</span>: <span class="hljs-string">&quot;vue-cli-service serve&quot;</span>,<br>        <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;vue-cli-service build&quot;</span>,<br>        <span class="hljs-string">&quot;lint&quot;</span>: <span class="hljs-string">&quot;vue-cli-service lint&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;vue&quot;</span>: <span class="hljs-string">&quot;^2.5.16&quot;</span>,<br>        <span class="hljs-string">&quot;vue-router&quot;</span>: <span class="hljs-string">&quot;^3.0.1&quot;</span>,<br>        <span class="hljs-string">&quot;vuex&quot;</span>: <span class="hljs-string">&quot;^3.0.1&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;devDependencies&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;@vue/cli-plugin-babel&quot;</span>: <span class="hljs-string">&quot;^3.0.0-beta.15&quot;</span>,<br>        <span class="hljs-string">&quot;@vue/cli-service&quot;</span>: <span class="hljs-string">&quot;^3.0.0-beta.15&quot;</span>,<br>        <span class="hljs-string">&quot;less&quot;</span>: <span class="hljs-string">&quot;^3.0.4&quot;</span>,<br>        <span class="hljs-string">&quot;less-loader&quot;</span>: <span class="hljs-string">&quot;^4.1.0&quot;</span>,<br>        <span class="hljs-string">&quot;vue-template-compiler&quot;</span>: <span class="hljs-string">&quot;^2.5.16&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;browserslist&quot;</span>: [<br>        <span class="hljs-string">&quot;&gt; 1%&quot;,</span><br><span class="hljs-string">        &quot;</span><span class="hljs-keyword">last</span> <span class="hljs-number">2</span> versions<span class="hljs-string">&quot;,</span><br><span class="hljs-string">        &quot;</span><span class="hljs-keyword">not</span> ie &lt;= <span class="hljs-number">8</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>可以看到该文件是由一系列键值对构成的 JSON 对象，每一个键值对都有其相应的作用，比如 scripts 脚本命令的配置，我们在终端启动项目运行的 <code>npm run serve</code> 命令其实便是执行了 scripts 配置下的 serve 项命令 <code>vue-cli-service serve</code> ，我们可以在 scripts 下自己修改或添加相应的项目命令。</p><p>而 dependencies 和 devDependencies 分别为项目生产环境和开发环境的依赖包配置，也就是说像 <code>@vue/cli-service</code> 这样只用于项目开发时的包我们可以放在 devDependencies 下，但像 <code>vue-router</code> 这样结合在项目上线代码中的包应该放在 dependencies 下。</p><p>详细的package.json文件配置项介绍可以参考：<a href="https://docs.npmjs.com/files/package.json">package.json</a></p><h3 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h3><p>在简单的了解了 package.json 文件后，我们再来看下包管理工具的常用命令。一般在项目的构建和开发阶段，我们常用的 npm 命令有：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-comment"># 生成 package.json 文件（需要手动选择配置）</span><br><span class="hljs-built_in">npm</span> init<br><br><span class="hljs-comment"># 生成 package.json 文件（使用默认配置）</span><br><span class="hljs-built_in">npm</span> init -y<br><br><span class="hljs-comment"># 一键安装 package.json 下的依赖包</span><br><span class="hljs-built_in">npm</span> i<br><br><span class="hljs-comment"># 在项目中安装包名为 xxx 的依赖包（配置在 dependencies 下）</span><br><span class="hljs-built_in">npm</span> i xxx<br><br><span class="hljs-comment"># 在项目中安装包名为 xxx 的依赖包（配置在 dependencies 下）</span><br><span class="hljs-built_in">npm</span> i xxx --save<br><br><span class="hljs-comment"># 在项目中安装包名为 xxx 的依赖包（配置在 devDependencies 下）</span><br><span class="hljs-built_in">npm</span> i xxx --save-dev<br><br><span class="hljs-comment"># 全局安装包名为 xxx 的依赖包</span><br><span class="hljs-built_in">npm</span> i -g xxx<br><br><span class="hljs-comment"># 运行 package.json 中 scripts 下的命令</span><br><span class="hljs-built_in">npm</span> run xxx<br><br></code></pre></td></tr></table></figure><p>比较陌生但实用的有：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-comment"># 打开 xxx 包的主页</span><br><span class="hljs-built_in">npm</span> home xxx<br><br><span class="hljs-comment"># 打开 xxx 包的代码仓库</span><br><span class="hljs-built_in">npm</span> repo xxx<br><br><span class="hljs-comment"># 将当前模块发布到 npmjs.com，需要先登录</span><br><span class="hljs-built_in">npm</span> publish<br><br></code></pre></td></tr></table></figure><p>相比 npm，<a href="https://yarnpkg.com/zh-Hans/">yarn</a> 相信大家也不会陌生，它是由 facebook 推出并开源的包管理工具，具有速度快，安全性高，可靠性强等主要优势，它的常用命令如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 生成 package.json 文件（需要手动选择配置）</span><br>yarn <span class="hljs-keyword">init</span><br><br><span class="hljs-meta"># 生成 package.json 文件（使用默认配置）</span><br>yarn <span class="hljs-keyword">init</span> -y<br><br><span class="hljs-meta"># 一键安装 package.json 下的依赖包</span><br>yarn<br><br><span class="hljs-meta"># 在项目中安装包名为 xxx 的依赖包（配置在 dependencies 下）,同时 yarn.lock 也会被更新</span><br>yarn <span class="hljs-keyword">add</span> xxx<br><br><span class="hljs-meta"># 在项目中安装包名为 xxx 的依赖包（配置在配置在 devDependencies 下）,同时 yarn.lock 也会被更新</span><br>yarn <span class="hljs-keyword">add</span> xxx --dev<br><br><span class="hljs-meta"># 全局安装包名为 xxx 的依</span><br>yarn <span class="hljs-keyword">global</span> <span class="hljs-keyword">add</span> xxx<br><br><span class="hljs-meta"># 运行 package.json 中 scripts 下的命令</span><br>yarn xxx<br><br></code></pre></td></tr></table></figure><p>比较陌生但实用的有：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-comment"># 列出 xxx 包的版本信息</span><br>yarn outdated xxx<br><br><span class="hljs-comment"># 验证当前项目 package.json 里的依赖版本和 yarn 的 lock 文件是否匹配</span><br>yarn<span class="hljs-built_in"> check</span><br><span class="hljs-built_in"></span><br><span class="hljs-comment"># 将当前模块发布到 npmjs.com，需要先登录</span><br>yarn publish<br><br></code></pre></td></tr></table></figure><p>以上便是 npm 与 yarn 包管理工具的常用及实用命令，需要注意的是，本小册的讲解将会优先使用 yarn 命令进行包的管理和安装。</p><h3 id="3-第三方插件配置"><a href="#3-第三方插件配置" class="headerlink" title="3. 第三方插件配置"></a>3. 第三方插件配置</h3><p>在上方的 package.json 文件中我们可以看到有 browserslist 这一配置项，那么该配置项便是这里所说的第三方插件配置，该配置的主要作用是用于在不同的前端工具之间共享目标浏览器和 Node.js 的版本：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;browserslist&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;&gt; 1%&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 表示包含所有使用率 &gt; 1% 的浏览器</span><br>    <span class="hljs-string">&quot;last 2 versions&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 表示包含浏览器最新的两个版本</span><br>    <span class="hljs-string">&quot;not ie &lt;= 8&quot;</span> <span class="hljs-comment">// 表示不包含 ie8 及以下版本</span><br><span class="hljs-punctuation">]</span><br><br></code></pre></td></tr></table></figure><p>比如像 <a href="https://www.npmjs.com/package/autoprefixer">autoprefixer</a> 这样的插件需要把你写的 css 样式适配不同的浏览器，那么这里要针对哪些浏览器呢，就是上面配置中所包含的。</p><p>而如果写在 autoprefixer 的配置中，那么会存在一个问题，万一其他第三方插件也需要浏览器的包含范围用于实现其特定的功能，那么就又得在其配置中设置一遍，这样就无法得以共用。所以在 package.json 中配置 browserslist 的属性使得所有工具都会自动找到目标浏览器。</p><p>当然，你也可以单独写在 .browserslistrc 的文件中：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># Browsers that we support </span><br><br>&gt; <span class="hljs-number">1</span>%<br><span class="hljs-keyword">last</span> <span class="hljs-number">2</span> versions<br><span class="hljs-keyword">not</span> ie &lt;= <span class="hljs-number">8</span><br><br></code></pre></td></tr></table></figure><p>至于它是如何去衡量浏览器的使用率和版本的，数据都是来源于 <a href="https://caniuse.com/">Can I Use</a>。你也可以访问 <a href="http://browserl.ist/">http://browserl.ist/</a> 去搜索配置项所包含的浏览器列表，比如搜索 <code>last 2 versions</code> 会得到你想要的结果，或者在项目终端运行如下命令查看：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">npx browserslist</span><br><br></code></pre></td></tr></table></figure><p>除了上述插件的配置，项目中常用的插件还有：babel、postcss 等，有兴趣的同学可以访问其官网进行了解。</p><h3 id="4-vue-cli-包安装"><a href="#4-vue-cli-包安装" class="headerlink" title="4. vue-cli 包安装"></a>4. vue-cli 包安装</h3><p>在上述的教程中，我们使用 npm 或 yarn 进行了包的安装和配置，除了以上两种方法，vue-cli 3.x 还提供了其专属的 <code>vue add</code> 命令，但是需要注意的是该命令安装的包是以 @vue&#x2F;cli-plugin 或者 vue-cli-plugin 开头，即只能安装 Vue 集成的包。</p><p>比如运行：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">vue <span class="hljs-keyword">add </span><span class="hljs-keyword">jquery</span><br><span class="hljs-keyword"></span><br></code></pre></td></tr></table></figure><p>其会安装 <code>vue-cli-plugin-jquery</code>，很显然这个插件不存在便会安装失败。又或者你运行：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">vue <span class="hljs-keyword">add</span><span class="language-bash"> @vue/eslint</span><br><br></code></pre></td></tr></table></figure><p>其会解析为完整的包名 <code>@vue/cli-plugin-eslint</code>，因为该包存在所以会安装成功。</p><p>同时，不同于 npm 或 yarn 的安装， <code>vue add</code> 不仅会将包安装到你的项目中，其还会改变项目的代码或文件结构，所以安装前最好提交你的代码至仓库。</p><p>另外 vue add 中还有两个特例，如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 安装 vue-router</span><br>vue <span class="hljs-built_in">add</span> router<br><br><span class="hljs-comment"># 安装 vuex</span><br>vue <span class="hljs-built_in">add</span> vuex<br><br></code></pre></td></tr></table></figure><p>这两个命令会直接安装 vue-router 和 vuex 并改变你的代码结构，使你的项目集成这两个配置，并不会去安装添加 vue-cli-plugin 或 @vue&#x2F;cli-plugin 前缀的包。</p><h2 id="结语-1"><a href="#结语-1" class="headerlink" title="结语"></a>结语</h2><p>不积跬步无以至千里，不积小流无以成江海。本文主要介绍了在 Vue 项目构建前期需要了解的包管理工具与配置的知识点，只有了解了基本的工具使用才能熟练的对项目进行按需配置，希望大家在接下来的学习中能够学以致用，付诸实践。</p><h2 id="思考-作业"><a href="#思考-作业" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>文章中使用的一些 npm 包名为什么要用 <code>@</code> 开头？</p></li><li><p>除了文章中介绍的 <code>browserslist</code> 这样的配置项可以写在单独的文件中外，还有哪些常用的配置项可以这样操作？又是如何配置的？</p></li><li><p>Vue CLI 3 还集成了哪些包，可以通过 <code>vue add</code> 命令安装？</p></li></ul><h1 id="构建基础篇-2：webpack-在-CLI-3-中的应用"><a href="#构建基础篇-2：webpack-在-CLI-3-中的应用" class="headerlink" title="构建基础篇 2：webpack 在 CLI 3 中的应用"></a>构建基础篇 2：webpack 在 CLI 3 中的应用</h1><p>webpack 作为目前最流行的项目打包工具，被广泛使用于项目的构建和开发过程中，其实说它是打包工具有点大材小用了，我个人认为它是一个集前端自动化、模块化、组件化于一体的可拓展系统，你可以根据自己的需要来进行一系列的配置和安装，最终实现你需要的功能并进行打包输出。</p><p>而在 Vue 的项目中，webpack 同样充当着举足轻重的作用，比如打包压缩、异步加载、模块化管理等等。如果你了解 webpack 那么相信本文会让你更了解其在 Vue 中的使用，如果你是一个 webpack 小白，那么也没事，相信你会很容易的了解它在项目中的配置和功能。</p><h2 id="webpack-的使用"><a href="#webpack-的使用" class="headerlink" title="webpack 的使用"></a>webpack 的使用</h2><h3 id="1-与-vue-cli-2-x-的差异"><a href="#1-与-vue-cli-2-x-的差异" class="headerlink" title="1. 与 vue-cli 2.x 的差异"></a>1. 与 vue-cli 2.x 的差异</h3><p>如果你使用过 vue-cli 2.x，那么你应该了解其构建出的目录会包含相应的 webpack 配置文件，但是在 vue-cli 3.x 中你却见不到一份关于 webpack 的配置文件，难道 3.x 抛弃了 webpack？其实不然，3.x 提供了一种开箱即用的模式，即你无需配置 webpack 就可以运行项目，并且它提供了一个 vue.config.js 文件来满足开发者对其封装的 webpack 默认配置的修改。如图：</p><img src="/2019/08/30/vue/164c05d8ad965059.png" class=""><h3 id="2-vue-config-js-的配置"><a href="#2-vue-config-js-的配置" class="headerlink" title="2. vue.config.js 的配置"></a>2. vue.config.js 的配置</h3><p>通过上方新老版本的对比，我们可以清晰的看出 vue.config.js 的配置项结构，如果你构建的项目中没有该文件，那么你需要在根目录手动创建它。下面我们就来介绍一下其常用配置项的功能和用途：</p><h3 id="a-baseurl"><a href="#a-baseurl" class="headerlink" title="a. baseurl"></a>a. baseurl</h3><p>在第一节《Vue CLI 3 项目构建基础》中我们通过 vue-cli 3.x 成功构建并在浏览器中打开 <code>http://localhost:8080/</code> 展示了项目首页。如果现在你想要将项目地址加一个二级目录，比如：<code>http://localhost:8080/vue/</code>，那么我们需要在 vue.config.js 里配置 baseurl 这一项：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// vue.config.js</span><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>    ...<br>    <br>    baseUrl: <span class="hljs-string">&#x27;vue&#x27;</span>,<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>其改变的其实是 webpack 配置文件中 output 的 <code>publicPath</code> 项，这时候你重启终端再次打开页面的时候我们首页的 url 就会变成带二级目录的形式。</p><h3 id="b-outputDir"><a href="#b-outputDir" class="headerlink" title="b. outputDir"></a>b. outputDir</h3><p>如果你想将构建好的文件打包输出到 output 文件夹下（默认是 dist 文件夹），你可以配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// vue.config.js</span><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>    ...<br>    <br>    outputDir: <span class="hljs-string">&#x27;output&#x27;</span>,<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后运行命令 <code>yarn build</code> 进行打包输出，你会发现项目跟目录会创建 output 文件夹， 这其实改变了 webpack 配置中 output 下的 <code>path</code> 项，修改了文件的输出路径。</p><h3 id="c-productionSourceMap"><a href="#c-productionSourceMap" class="headerlink" title="c. productionSourceMap"></a>c. productionSourceMap</h3><p>该配置项用于设置是否为生产环境构建生成 source map，一般在生产环境下为了快速定位错误信息，我们都会开启 source map：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// vue.config.js</span><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>    ...<br>    <br>    productionSourceMap: <span class="hljs-literal">true</span>,<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>该配置会修改 webpack 中 <code>devtool</code> 项的值为 <code>source-map</code>。</p><p>开启 source map 后，我们打包输出的文件中会包含 js 对应的 .map 文件，其用途可以参考：<a href="http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html">JavaScript Source Map 详解</a></p><h3 id="d-chainWebpack"><a href="#d-chainWebpack" class="headerlink" title="d. chainWebpack"></a>d. chainWebpack</h3><p>chainWebpack 配置项允许我们更细粒度的控制 webpack 的内部配置，其集成的是 <a href="https://github.com/mozilla-neutrino/webpack-chain">webpack-chain</a> 这一插件，该插件可以让我们能够使用链式操作来修改配置，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 用于做相应的合并处理</span><br><span class="hljs-keyword">const</span> merge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-merge&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    ...<br>    <br>    <span class="hljs-comment">// config 参数为已经解析好的 webpack 配置</span><br>    <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        config.<span class="hljs-property">module</span><br>            .<span class="hljs-title function_">rule</span>(<span class="hljs-string">&#x27;images&#x27;</span>)<br>            .<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;url-loader&#x27;</span>)<br>            .<span class="hljs-title function_">tap</span>(<span class="hljs-function"><span class="hljs-params">options</span> =&gt;</span><br>                <span class="hljs-title function_">merge</span>(options, &#123;<br>                  <span class="hljs-attr">limit</span>: <span class="hljs-number">5120</span>,<br>                &#125;)<br>            )<br>    &#125;<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>以上操作我们可以成功修改 webpack 中 module 项里配置 rules 规则为图片下的 url-loader 值，将其 limit 限制改为 5M，修改后的 webpack 配置代码如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs lua">&#123;<br>    ...<br>    <br>    <span class="hljs-built_in">module</span>: &#123;<br>        rules: [<br>            &#123;   <br>                /* <span class="hljs-built_in">config</span>.<span class="hljs-built_in">module</span>.rule(<span class="hljs-string">&#x27;images&#x27;</span>) */<br>                test: /\.(png|jpe?g|gif|webp)(\?.*)?$/,<br>                use: [<br>                    /* <span class="hljs-built_in">config</span>.<span class="hljs-built_in">module</span>.rule(<span class="hljs-string">&#x27;images&#x27;</span>).use(<span class="hljs-string">&#x27;url-loader&#x27;</span>) */<br>                    &#123;<br>                        loader: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>                        options: &#123;<br>                            limit: <span class="hljs-number">5120</span>,<br>                            name: <span class="hljs-string">&#x27;img/[name].[hash:8].[ext]&#x27;</span><br>                        &#125;<br>                    &#125;<br>                ]<br>            &#125;<br>        ]<br>    &#125;<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里需要注意的是我们使用了 webpack-merge 这一插件，该插件用于做 webpack 配置的合并处理，这样 options 下面的其他值就不会被覆盖或改变。</p><p>关于 webpack-chain 的使用可以参考其 github 官方地址：<a href="https://github.com/mozilla-neutrino/webpack-chain">https://github.com/mozilla-neutrino/webpack-chain</a>，它提供了操作类似 JavaScript Set 和 Map 的方式，以及一系列速记方法。</p> <img src="/2019/08/30/vue/166c58e690ddb43d.png" class=""><h3 id="e-configureWebpack"><a href="#e-configureWebpack" class="headerlink" title="e. configureWebpack"></a>e. configureWebpack</h3><p>除了上述使用 chainWebpack 来改变 webpack 内部配置外，我们还可以使用 configureWebpack 来进行修改，两者的不同点在于 chainWebpack 是链式修改，而 configureWebpack 更倾向于整体替换和修改。示例代码如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// vue.config.js</span><br>module.exports = &#123;<br>    ...<br>    <br>    <span class="hljs-comment">// config 参数为已经解析好的 webpack 配置</span><br>    configureWebpack: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// config.plugins = []; // 这样会直接将 plugins 置空</span><br>        <br>        <span class="hljs-comment">// 使用 return 一个对象会通过 webpack-merge 进行合并，plugins 不会置空</span><br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">plugins</span>: []<br>        &#125;<br>    &#125;<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>configureWebpack 可以直接是一个对象，也可以是一个函数，如果是对象它会直接使用 webpack-merge 对其进行合并处理，如果是函数，你可以直接使用其 config 参数来修改 webpack 中的配置，或者返回一个对象来进行 merge 处理。</p><p>你可以在项目目录下运行 <code>vue inspect</code> 来查看你修改后的 webpack 完整配置，当然你也可以缩小审查范围，比如：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 只查看 plugins 的内容</span><br>vue <span class="hljs-keyword">inspect </span>plugins<br><br></code></pre></td></tr></table></figure><h3 id="f-devServer"><a href="#f-devServer" class="headerlink" title="f. devServer"></a>f. devServer</h3><p>vue.config.js 还提供了 devServer 项用于配置 webpack-dev-server 的行为，使得我们可以对本地服务器进行相应配置，我们在命令行中运行的 <code>yarn serve</code> 对应的命令 <code>vue-cli-service serve</code> 其实便是基于 webpack-dev-server 开启的一个本地服务器，其常用配置参数如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// vue.config.js</span><br>module.exports = &#123;<br>    ...<br>    <br>    devServer: &#123;<br>        <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否自动打开浏览器页面</span><br>        host: <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-comment">// 指定使用一个 host。默认是 localhost</span><br>        port: <span class="hljs-number">8080</span>, <span class="hljs-comment">// 端口地址</span><br>        https: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 使用https提供服务</span><br>        proxy: <span class="hljs-literal">null</span>, <span class="hljs-comment">// string | Object 代理设置</span><br>        <br>        <span class="hljs-comment">// 提供在服务器内部的其他中间件之前执行自定义中间件的能力</span><br>        before: <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;<br>          <span class="hljs-comment">// `app` 是一个 express 实例</span><br>        &#125;<br>    &#125;<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当然除了以上参数，其支持所有的 webpack-dev-server 中的选项，比如 <code>historyApiFallback</code> 用于重写路由（会在后续的多页应用配置中讲解）、progress 将运行进度输出到控制台等，具体可参考：<a href="https://www.webpackjs.com/configuration/dev-server/">devServer</a></p><p>以上讲解了 vue.config.js 中一些常用的配置项功能，具体的配置实现需要结合实际项目进行，完整的配置项可以查看：<a href="https://github.com/vuejs/vue-cli/blob/ce3e2d475d63895cbb40f62425bb6b3237469bcd/docs/zh/config/README.md">vue.config.js</a></p><h3 id="3-默认插件简介"><a href="#3-默认插件简介" class="headerlink" title="3. 默认插件简介"></a>3. 默认插件简介</h3><p>通过对 vue.config.js 的了解，我们知道了 vue-cli 3.x 为我们默认封装了项目运行的常用 webpack 配置，那么它给我们提供了哪些默认插件，每一个 plugin 又有着怎样的用途呢？除了使用 <code>vue inspect plugins</code> 我们还可以通过运行 <code>vue ui</code> 进入可视化页面查看，步骤如下：</p><ul><li>打开可视化页面，点击对应项目进入管理页面（如果没有对应项目，需要导入或新建）</li><li>点击侧边栏 Tasks 选项，再点击二级栏 inspect 选项</li><li>点击 Run task 按钮执行审查命令</li></ul><p>如图所示：</p><img src="/2019/08/30/vue/164c15d1f97432b5.png" class=""><p>最后我们从输出的内容中找到 plugins 数组，其包含了如下插件（配置项已经省略，增加了定义插件的代码）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// vue-loader是 webpack 的加载器，允许你以单文件组件的格式编写 Vue 组件</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VueLoaderPlugin</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;vue-loader/lib/plugin&#x27;</span>);<br><br><span class="hljs-comment">// webpack 内置插件，用于创建在编译时可以配置的全局常量</span><br><span class="hljs-keyword">const</span> &#123; DefinePlugin &#125; = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);<br><br><span class="hljs-comment">// 用于强制所有模块的完整路径必需与磁盘上实际路径的确切大小写相匹配</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CaseSensitivePathsPlugin</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;case-sensitive-paths-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">// 识别某些类型的 webpack 错误并整理，以提供开发人员更好的体验。</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">FriendlyErrorsPlugin</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;friendly-errors-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">// 将 CSS 提取到单独的文件中，为每个包含 CSS 的 JS 文件创建一个 CSS 文件</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MiniCssExtractPlugin</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&quot;mini-css-extract-plugin&quot;</span>);<br><br><span class="hljs-comment">// 用于在 webpack 构建期间优化、最小化 CSS文件</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">OptimizeCssnanoPlugin</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">// webpack 内置插件，用于根据模块的相对路径生成 hash 作为模块 id, 一般用于生产环境</span><br><span class="hljs-keyword">const</span> &#123; HashedModuleIdsPlugin &#125; = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);<br><br><span class="hljs-comment">// 用于根据模板或使用加载器生成 HTML 文件</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">HtmlWebpackPlugin</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">// 用于在使用 html-webpack-plugin 生成的 html 中添加 &lt;link rel =&#x27;preload&#x27;&gt; 或 &lt;link rel =&#x27;prefetch&#x27;&gt;，有助于异步加载</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PreloadPlugin</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;preload-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">// 用于将单个文件或整个目录复制到构建目录</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CopyWebpackPlugin</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;copy-webpack-plugin&#x27;</span>);<br><br>module.exports = &#123;<br>    plugins: [<br>        <span class="hljs-comment">/* config.plugin(&#x27;vue-loader&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueLoaderPlugin</span>(), <br>        <br>        <span class="hljs-comment">/* config.plugin(&#x27;define&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefinePlugin</span>(),<br>        <br>        <span class="hljs-comment">/* config.plugin(&#x27;case-sensitive-paths&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">CaseSensitivePathsPlugin</span>(),<br>        <br>        <span class="hljs-comment">/* config.plugin(&#x27;friendly-errors&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">FriendlyErrorsWebpackPlugin</span>(),<br>        <br>        <span class="hljs-comment">/* config.plugin(&#x27;extract-css&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>(),<br>        <br>        <span class="hljs-comment">/* config.plugin(&#x27;optimize-css&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">OptimizeCssnanoPlugin</span>(),<br>        <br>        <span class="hljs-comment">/* config.plugin(&#x27;hash-module-ids&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedModuleIdsPlugin</span>(),<br>        <br>        <span class="hljs-comment">/* config.plugin(&#x27;html&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(),<br>        <br>        <span class="hljs-comment">/* config.plugin(&#x27;preload&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">PreloadPlugin</span>(),<br>        <br>        <span class="hljs-comment">/* config.plugin(&#x27;copy&#x27;) */</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyWebpackPlugin</span>()<br>    ]<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们可以看到每个插件上方都添加了使用 chainWebpack 访问的方式，同时我也添加了每个插件相应的用途注释，需要注意的是要区分 webpack 内置插件和第三方插件的区别，如果是内置插件则无需安装下载，而外部插件大家可以直接访问：<a href="https://www.npmjs.com/">https://www.npmjs.com/</a> 搜索对应的插件，了解其详细的 api 设置。</p><h2 id="结语-2"><a href="#结语-2" class="headerlink" title="结语"></a>结语</h2><p>本文主要阐述了 vue-cli 3.x 下基于 vue.config.js 配置 webpack 的主要方法，同时也介绍了其默认的 webpack 插件与主要功能，相信大家在了解 webpack 的知识后能够更加轻松的开展后续内容的学习，为接下来项目的构建和开发奠定基础。</p><h2 id="思考-作业-1"><a href="#思考-作业-1" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>除了文章中介绍的配置项，<code>vue.config.js</code> 中还有哪些额外的配置？</p></li><li><p><code>webpack-merge</code> 的合并原理是怎样的？</p></li><li><p>使用 <code>chainWebpack</code> 获取到 webpack 中的某一插件后，如何修改其配置？</p></li></ul><h1 id="构建基础篇-3：env-文件与环境设置"><a href="#构建基础篇-3：env-文件与环境设置" class="headerlink" title="构建基础篇 3：env 文件与环境设置"></a>构建基础篇 3：env 文件与环境设置</h1><p>在实际项目的开发中，我们一般会经历项目的开发阶段、测试阶段和最终上线阶段，每一个阶段对于项目代码的要求可能都不尽相同，那么我们如何能够游刃有余的在不同阶段下使我们的项目呈现不同的效果，使用不同的功能呢？这里就需要引入<strong>环境</strong>的概念。</p><p>一般一个项目都会有以下 3 种环境：</p><ul><li>开发环境（开发阶段，本地开发版本，一般会使用一些调试工具或额外的辅助功能）</li><li>测试环境（测试阶段，上线前版本，除了一些 bug 的修复，基本不会和上线版本有很大差别）</li><li>生产环境（上线阶段，正式对外发布的版本，一般会进行优化，关掉错误报告）</li></ul><p>作为一名开发人员，我们可能需要针对每一种环境编写一些不同的代码并且保证这些代码运行在正确的环境中，那么我们应该如何在代码中判断项目所处的环境同时执行不同的代码呢？这就需要我们进行正确的环境配置和管理。</p><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><h3 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h3><p>正确的配置环境首先需要我们认识不同环境配置之间的关系，如图所示：</p> <img src="/2019/08/30/vue/16749778e85b5370.png" class=""><p>我们从上图中可以了解到每一个环境其实有其不同的配置，同时它们也存在着交集部分，交集便是它们都共有的配置项，那么在 Vue 中我们应该如何处理呢？</p><p>我们可以在根目录下创建以下形式的文件进行不同环境下变量的配置：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">.env</span>                <span class="hljs-comment"># 在所有的环境中被载入</span><br><span class="hljs-string">.env.local</span>          <span class="hljs-comment"># 在所有的环境中被载入，但会被 git 忽略</span><br><span class="hljs-string">.env.</span>[mode]         <span class="hljs-comment"># 只在指定的模式中被载入</span><br><span class="hljs-string">.env.</span>[mode]<span class="hljs-string">.local</span>   <span class="hljs-comment"># 只在指定的模式中被载入，但会被 git 忽略</span><br><br></code></pre></td></tr></table></figure><p>比如我们创建一个名为 .env.stage 的文件，该文件表明其只在 stage 环境下被加载，在这个文件中，我们可以配置如下键值对的变量：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">NODE_ENV</span>=stage<br><span class="hljs-attr">VUE_APP_TITLE</span>=stage mode<br><br></code></pre></td></tr></table></figure><p>这时候我们怎么在 vue.config.js 中访问这些变量呢？很简单，使用 <code>process.env.[name]</code> 进行访问就可以了，比如：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// vue.config.js</span><br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(process.env.NODE_ENV); <span class="hljs-comment">// development（在终端输出）</span><br><br></code></pre></td></tr></table></figure><p>当你运行 <code>yarn serve</code> 命令后会发现输出的是 development，因为 <code>vue-cli-service serve</code> 命令默认设置的环境是 development，你需要修改 package.json 中的 serve 脚本的命令为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;serve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service serve --mode stage&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p><code>--mode stage</code> 其实就是修改了 webpack 4 中的 mode 配置项为 stage，同时其会读取对应 .env.[model] 文件下的配置，如果没找到对应配置文件，其会使用默认环境 development，同样 <code>vue-cli-service build</code> 会使用默认环境 production。</p><p>这时候如果你再创建一个 .env 的文件，再次配置重复的变量，但是值不同，如：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">NODE_ENV</span>=staging<br><span class="hljs-attr">VUE_APP_TITLE</span>=staging mode<br><span class="hljs-attr">VUE_APP_NAME</span>=project<br><br></code></pre></td></tr></table></figure><p>因为 .env 文件会被所有环境加载，即公共配置，那么最终我们运行 <code>vue-cli-service serve</code> 打印出来的是哪个呢？答案是 <strong>stage</strong>，但是如果是 .env.stage.local 文件中配置成上方这样，答案便是 <strong>staging</strong>，所以 .env.[mode].local 会覆盖 .env.[mode] 下的相同配置。同理 .env.local 会覆盖 .env 下的相同配置。</p><p>由此可以得出结论，相同配置项的权重：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.env</span>.<span class="hljs-selector-attr">[mode]</span><span class="hljs-selector-class">.local</span> &gt; <span class="hljs-selector-class">.env</span>.<span class="hljs-selector-attr">[mode]</span> &gt; <span class="hljs-selector-class">.env</span><span class="hljs-selector-class">.local</span> &gt; <span class="hljs-selector-class">.env</span> <br><br></code></pre></td></tr></table></figure><p>但是需要注意的是，除了相同配置项权重大的覆盖小的，不同配置项它们会进行合并操作，类似于 Javascript 中的 Object.assign 的用法。</p><h3 id="2-环境注入"><a href="#2-环境注入" class="headerlink" title="2. 环境注入"></a>2. 环境注入</h3><p>通过上述配置文件的创建，我们成功使用命令行的形式对项目环境进行了设置并可以自由切换，但是需要注意的是我们在 Vue 的前端代码中打印出的 <code>process.env</code> 与 vue.config.js 中输出的可能是不一样的，这需要普及一个知识点：webpack 通过 DefinePlugin 内置插件将 process.env 注入到客户端代码中。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// webpack 配置</span><br>&#123;<br>    ...<br>    <br>    plugins: <span class="hljs-type"></span>[<br>        <span class="hljs-keyword">new</span> <span class="hljs-type">webpack</span>.DefinePlugin(&#123;<br>            <span class="hljs-string">&#x27;process.env&#x27;</span>: <span class="hljs-type"></span>&#123;<br>                NODE_ENV: <span class="hljs-type">JSON</span>.stringify(process.env.NODE_ENV)<br>            &#125;<br>        &#125;),<br>    ],<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>由于 vue-cli 3.x 封装的 webpack 配置中已经帮我们完成了这个功能，所以我们可以直接在客户端代码中打印出 process.env 的值，该对象可以包含多个键值对，也就是说可以注入多个值，但是经过 CLI 封装后仅支持注入环境配置文件中以 <code>VUE_APP_</code> 开头的变量，而 <code>NODE_ENV</code> 和 <code>BASE_URL</code> 这两个特殊变量除外。比如我们在权重最高的 .env.stage.local 文件中写入：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">NODE_ENV</span>=stage2<br><span class="hljs-attr">VUE_APP_TITLE</span>=stage mode2<br><span class="hljs-attr">NAME</span>=vue<br><br></code></pre></td></tr></table></figure><p>然后我们尝试在 vue.config.js 中打印 <code>process.env</code>，终端输出：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lasso">&#123;<br>    <span class="hljs-params">...</span><br>    <br>    npm_config_ignore_scripts: <span class="hljs-string">&#x27;&#x27;</span>,<br>    npm_config_version_git_sign: <span class="hljs-string">&#x27;&#x27;</span>,<br>    npm_config_ignore_optional: <span class="hljs-string">&#x27;&#x27;</span>,<br>    npm_config_init_version: <span class="hljs-string">&#x27;1.0.0&#x27;</span>,<br>    npm_package_dependencies_vue_router: <span class="hljs-string">&#x27;^3.0.1&#x27;</span>,<br>    npm_config_version_tag_prefix: <span class="hljs-string">&#x27;v&#x27;</span>,<br>    npm_node_execpath: <span class="hljs-string">&#x27;/usr/local/bin/node&#x27;</span>,<br>    NODE_ENV: <span class="hljs-string">&#x27;stage2&#x27;</span>,<br>    VUE_APP_TITLE: <span class="hljs-string">&#x27;stage mode2&#x27;</span>,<br>    NAME: <span class="hljs-string">&#x27;vue&#x27;</span>,<br>    BABEL_ENV: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <br>    <span class="hljs-params">...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到输出内容除了我们环境配置中的变量外还包含了很多 npm 的信息，但是我们在入口文件 main.js 中打印会发现输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;BASE_URL&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/vue/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;NODE_ENV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stage2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;VUE_APP_TITLE&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stage mode2&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>可见注入时过滤调了非 <code>VUE_APP_</code> 开头的变量，其中多出的 <code>BASE_URL</code> 为你在 vue.config.js 设置的值，默认为 &#x2F;，其在环境配置文件中设置无效。</p> <img src="/2019/08/30/vue/167497acd942516e.png" class=""><h3 id="3-额外配置"><a href="#3-额外配置" class="headerlink" title="3. 额外配置"></a>3. 额外配置</h3><p>以上我们通过新建配置文件的方式为项目不同环境配置不同的变量值，能够实现项目基本的环境管理，但是 .env 这样的配置文件中的参数目前只支持静态值，无法使用动态参数，在某些情况下无法实现特定需求，这时候我们可以在根目录下新建 config 文件夹用于存放一些额外的配置文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* 配置文件 index.js */</span><br><br><span class="hljs-comment">// 公共变量</span><br><span class="hljs-keyword">const</span> com = &#123;<br>    <span class="hljs-attr">IP</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>)<br>&#125;;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><br>    <span class="hljs-comment">// 开发环境变量</span><br>    <span class="hljs-attr">dev</span>: &#123;<br>    <span class="hljs-attr">env</span>: &#123;<br>            <span class="hljs-attr">TYPE</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-string">&#x27;dev&#x27;</span>),<br>            ...com<br>    &#125;<br>    &#125;,<br>    <br>    <span class="hljs-comment">// 生产环境变量</span><br>    <span class="hljs-attr">build</span>: &#123;<br>    <span class="hljs-attr">env</span>: &#123;<br>            <span class="hljs-attr">TYPE</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-string">&#x27;prod&#x27;</span>),<br>            ...com<br>    &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上方代码我们把环境变量分为了公共变量、开发环境变量和生产环境变量，当然这些变量可能是动态的，比如用户的 ip 等。现在我们要在 vue.config.js 里注入这些变量，我们可以使用 chainWebpack 修改 DefinePlugin 中的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* vue.config.js */</span><br><span class="hljs-keyword">const</span> configs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./config&#x27;</span>);<br><br><span class="hljs-comment">// 用于做相应的 merge 处理</span><br><span class="hljs-keyword">const</span> merge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-merge&#x27;</span>);<br><br><span class="hljs-comment">// 根据环境判断使用哪份配置</span><br><span class="hljs-keyword">const</span> cfg = process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span> ? configs.<span class="hljs-property">build</span>.<span class="hljs-property">env</span> : configs.<span class="hljs-property">dev</span>.<span class="hljs-property">env</span>;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    ...<br>    <br>    <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        config.<span class="hljs-title function_">plugin</span>(<span class="hljs-string">&#x27;define&#x27;</span>)<br>            .<span class="hljs-title function_">tap</span>(<span class="hljs-function"><span class="hljs-params">args</span> =&gt;</span> &#123;<br>                <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;process.env&#x27;</span>;<br>                <br>                <span class="hljs-comment">// 使用 merge 保证原始值不变</span><br>                args[<span class="hljs-number">0</span>][name] = <span class="hljs-title function_">merge</span>(args[<span class="hljs-number">0</span>][name], cfg);<br>    <br>                <span class="hljs-keyword">return</span> args<br>            &#125;)<br>    &#125;,<br><br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后我们可以在客户端成功打印出包含动态配置的对象：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;NODE_ENV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stage2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;VUE_APP_TITLE&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stage mode2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;BASE_URL&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/vue/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;TYPE&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dev&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;IP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxx&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h3 id="4-实际场景"><a href="#4-实际场景" class="headerlink" title="4. 实际场景"></a>4. 实际场景</h3><p>结合以上环境变量的配置，我们项目中一般会遇到一些实际场景： 比如在非线上环境我们可以给自己的移动端项目开启 <a href="https://github.com/Tencent/vConsole">vConsole</a> 调试，但是在线上环境肯定不需要开启这一功能，我们可以在入口文件中进行设置，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* main.js */</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-comment">// 如果是非线上环境，加载 VConsole</span><br><span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> !== <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">VConsole</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vconsole/dist/vconsole.min.js&#x27;</span>);<br>    <span class="hljs-keyword">var</span> vConsole = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VConsole</span>();<br>&#125;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  router,<br>  store,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br><br></code></pre></td></tr></table></figure><p>vConsole 是一款用于移动网页的轻量级，可扩展的前端开发工具，可以看作是移动端浏览器的控制台，如图：</p> <img src="/2019/08/30/vue/164d2204ddfd1384.png" class=""><p>另外我们还可以使用配置中的 BASE_URL 来设置路由的 base 参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* router.js */</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/Home.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/About.vue&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>)<br><br><span class="hljs-keyword">let</span> base = <span class="hljs-string">`<span class="hljs-subst">$&#123;process.env.BASE_URL&#125;</span>`</span>; <span class="hljs-comment">// 获取二级目录</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;history&#x27;</span>,<br>    <span class="hljs-attr">base</span>: base, <span class="hljs-comment">// 设置 base 值</span><br>    <span class="hljs-attr">routes</span>: [<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span><br>        &#125;<br>    ]<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>每一个环境变量你都可以用于项目的一些地方，它提供给了我们一种全局的可访问形式，也是基于 Node 开发的特性所在。</p><h2 id="结语-3"><a href="#结语-3" class="headerlink" title="结语"></a>结语</h2><p>环境的配置和管理对于项目的构建起到了至关重要的作用，通过给项目配置不同的环境不仅可以增加开发的灵活性、提高程序的拓展性，同时也有助于帮助我们去了解并分析项目在不同环境下的运行机制，建立全局观念。</p><h2 id="思考-作业-2"><a href="#思考-作业-2" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>webpack 通过 DefinePlugin 内置插件将 process.env 注入到客户端代码中时，<code>process.env.NODE_ENV</code> 为什么要进行 JSON.stringify 处理？</p></li><li><p><code>process.env</code> 中如何获取 package.json 中 name 的值？</p></li><li><p>如何在 package.json 中的 scripts 字段中定义一些自定义脚本来切换不同的环境？</p></li></ul><h1 id="构建实战篇-1：单页应用的基本配置"><a href="#构建实战篇-1：单页应用的基本配置" class="headerlink" title="构建实战篇 1：单页应用的基本配置"></a>构建实战篇 1：单页应用的基本配置</h1><p>前几篇文章我们介绍了 Vue 项目构建及运行的前期工作，包括 webpack 的配置、环境变量的使用等，在了解并掌握了这些前期准备工作后，那么接下来我们可以走进 Vue 项目的内部，一探其内部配置的基本构成。</p> <img src="/2019/08/30/vue/164d69c00ea9e1cc.png" class=""><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="1-路由配置"><a href="#1-路由配置" class="headerlink" title="1. 路由配置"></a>1. 路由配置</h3><p>由于 Vue 这类型的框架都是以一个或多个单页构成，在单页内部跳转并不会重新渲染 HTML 文件，其路由可以由前端进行控制，因此我们需要在项目内部编写相应的路由文件，Vue 会解析这些文件中的配置并进行对应的跳转渲染。</p><p>我们来看一下 CLI 给我们生成的 router.js 文件的配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* router.js */</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/Home.vue&#x27;</span> <span class="hljs-comment">// 引入 Home 组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/About.vue&#x27;</span> <span class="hljs-comment">// 引入 About 组件</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>) <span class="hljs-comment">// 注册路由</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>    <span class="hljs-attr">routes</span>: [&#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>    &#125;, &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span><br>    &#125;]<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>这份配置可以算是最基础的路由配置，有以下几点需要进行优化：</p><ul><li>如果路由存在二级目录，需要添加 base 属性，否则默认为 “&#x2F;“</li><li>默认路由模式是 hash 模式，会携带 # 标记，与真实 url 不符，可以改为 history 模式</li><li>页面组件没有进行按需加载，可以使用 <code>require.ensure()</code> 来进行优化</li></ul><p>下面是我们优化结束的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* router.js */</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-comment">// 引入 Home 组件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = resolve =&gt; &#123;<br>    <span class="hljs-built_in">require</span>.<span class="hljs-title function_">ensure</span>([<span class="hljs-string">&#x27;./views/Home.vue&#x27;</span>], <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./views/Home.vue&#x27;</span>))<br>    &#125;)<br>&#125;<br><br><span class="hljs-comment">// 引入 About 组件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">About</span> = resolve =&gt; &#123;<br>    <span class="hljs-built_in">require</span>.<span class="hljs-title function_">ensure</span>([<span class="hljs-string">&#x27;./views/About.vue&#x27;</span>], <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./views/About.vue&#x27;</span>))<br>    &#125;)<br>&#125;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>)<br><br><span class="hljs-keyword">let</span> base = <span class="hljs-string">`<span class="hljs-subst">$&#123;process.env.BASE_URL&#125;</span>`</span> <span class="hljs-comment">// 动态获取二级目录</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;history&#x27;</span>,<br>    <span class="hljs-attr">base</span>: base,<br>    <span class="hljs-attr">routes</span>: [&#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>    &#125;, &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span><br>    &#125;]<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>改为 history 后我们 url 的路径就变成了 <code>http://127.0.0.1:8080/vue/about</code>，而不是原来的 <code>http://127.0.0.1:8080/vue/#/about</code>，但是需要注意页面渲染 404 的问题，具体可查阅：<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html">HTML5 History 模式</a>。</p><p>而在异步加载的优化上，我们使用了 webpack 提供的 require.ensure() 进行了代码拆分，主要区别在于没有优化前，访问 Home 页面会一起加载 About 组件的资源，因为它们打包进了一个 app.js 中：</p><img src="/2019/08/30/vue/164d754590f2d34d.png" class=""><p>但是优化过后，它们分别被拆分成了 2.js 和 3.js：</p><img src="/2019/08/30/vue/164d7569cad0a655.png" class=""><img src="/2019/08/30/vue/164d7567ab535a4c.png" class=""><p>如此，只有当用户点击了某页面，才会加载对应页面的 js 文件，实现了按需加载的功能。</p><blockquote><p>webpack 在编译时，会静态地解析代码中的 require.ensure()，同时将模块添加到一个分开的 chunk 当中。这个新的 chunk 会被 webpack 通过 jsonp 来按需加载。</p></blockquote><p>关于 <code>require.ensure()</code> 的知识点可以参考官方文档：<a href="https://webpack.js.org/api/module-methods/#require-ensure">require.ensure</a>。</p><p>当然，除了使用 require.ensure 来拆分代码，<a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html#%E6%8A%8A%E7%BB%84%E4%BB%B6%E6%8C%89%E7%BB%84%E5%88%86%E5%9D%97">Vue Router</a> 官方文档还推荐使用动态 <code>import</code> 语法来进行代码分块，比如上述 require.ensure 代码可以修改为：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-regexp">//</span> 引入 Home 组件<br>const Home = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./views/Home.vue&#x27;</span>);<br><br><span class="hljs-regexp">//</span> 引入 About 组件<br>const About = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./views/About.vue&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p>其余代码可以保持不变，仍然可以实现同样的功能。如果你想给拆分出的文件命名，可以尝试一下 webpack 提供的 <code>Magic Comments</code>（魔法注释）：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">const</span> Home = () =&gt; <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName:&#x27;home&#x27;*/</span> <span class="hljs-string">&#x27;./views/Home.vue&#x27;</span>);<br><br></code></pre></td></tr></table></figure><h3 id="2-Vuex-配置"><a href="#2-Vuex-配置" class="headerlink" title="2. Vuex 配置"></a>2. Vuex 配置</h3><p>除了 vue-router，如果你的项目需要用到 <a href="https://vuex.vuejs.org/zh/">Vuex</a> ，那么你应该对它有一定的了解，Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。这里我们先来看一下使用 CLI 生成的配置文件 store.js 中的内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php">import Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br>import Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br>Vue.<span class="hljs-keyword">use</span>(Vuex)<br><br>export <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title function_ invoke__">Store</span>(&#123;<br>    <span class="hljs-attr">state</span>: &#123;<br><br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br><br>    &#125;,<br>    <span class="hljs-attr">actions</span>: &#123;<br><br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>该配置文件便是 Vuex 的配置文件，主要有 4 个核心点：state、mutations、actions 及 getter，详细的介绍大家可以参考官方文档：<a href="https://vuex.vuejs.org/zh/guide/state.html">核心概念</a>，这里我用一句话介绍它们之间的关系就是：<strong>我们可以通过 actions 异步提交 mutations 去 修改 state 的值并通过 getter 获取</strong>。</p><p>需要注意的是不是每一个项目都适合使用 Vuex，如果你的项目是中大型项目，那么使用 Vuex 来管理错综复杂的状态数据是很有帮助的，而为了后期的拓展性和可维护性，这里不建议使用 CLI 生成的一份配置文件来管理所有的状态操作，我们可以把它拆分为以下目录：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">└── store<br>    ├── index.<span class="hljs-keyword">js </span>         <span class="hljs-comment"># 我们组装模块并导出 store 的地方</span><br>    ├── actions.<span class="hljs-keyword">js </span>       <span class="hljs-comment"># 根级别的 action</span><br>    ├── mutations.<span class="hljs-keyword">js </span>     <span class="hljs-comment"># 根级别的 mutation</span><br>    └── modules<br>        ├── moduleA.<span class="hljs-keyword">js </span>   <span class="hljs-comment"># A模块</span><br>        └── moduleB.<span class="hljs-keyword">js </span>   <span class="hljs-comment"># B模块</span><br><br></code></pre></td></tr></table></figure><img src="/2019/08/30/vue/166c0985b8c2ae68.png" class=""><p>与单个 store.js 文件不同的是，我们按模块进行了划分，每个模块中都可以包含自己 4 个核心功能。比如模块 A 中：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs pf">/* moduleA.js */<br><br><span class="hljs-keyword">const</span> moduleA = &#123;<br>    <span class="hljs-keyword">state</span>: &#123; <br>        text: &#x27;hello&#x27;<br>    &#125;,<br>    mutations: &#123;<br>        addText (<span class="hljs-keyword">state</span>, txt) &#123;<br>            // 这里的 `<span class="hljs-keyword">state</span>` 对象是模块的局部状态<br>            <span class="hljs-keyword">state</span>.text += txt<br>        &#125;<br>    &#125;,<br>    <br>    actions: &#123;<br>        <span class="hljs-built_in">set</span>Text (&#123; commit &#125;) &#123;<br>            commit(&#x27;addText&#x27;, &#x27; world&#x27;)<br>        &#125;<br>    &#125;,<br><br>    getters: &#123;<br>        getText (<span class="hljs-keyword">state</span>) &#123;<br>            return <span class="hljs-keyword">state</span>.text + &#x27;!&#x27;<br>        &#125;<br>    &#125;<br>&#125;<br><br>export <span class="hljs-keyword">default</span> moduleA<br><br></code></pre></td></tr></table></figure><p>上方我们导出 A 模块，并在 index.js 中引入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* index.js */</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> moduleA <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/moduleA&#x27;</span><br><span class="hljs-keyword">import</span> moduleB <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/moduleB&#x27;</span><br><span class="hljs-keyword">import</span> &#123; mutations &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mutations&#x27;</span><br><span class="hljs-keyword">import</span> actions <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./actions&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">state</span>: &#123;<br>        <span class="hljs-attr">groups</span>: [<span class="hljs-number">1</span>]<br>    &#125;,<br>    <span class="hljs-attr">modules</span>: &#123;<br>        moduleA, <span class="hljs-comment">// 引入 A 模块</span><br>        moduleB, <span class="hljs-comment">// 引入 B 模块</span><br>    &#125;,<br>    actions, <span class="hljs-comment">// 根级别的 action</span><br>    mutations, <span class="hljs-comment">// 根级别的 mutations</span><br>    <br>    <span class="hljs-comment">// 根级别的 getters</span><br>    <span class="hljs-attr">getters</span>: &#123;<br>        getGroups (state) &#123;<br>            <span class="hljs-keyword">return</span> state.<span class="hljs-property">groups</span><br>        &#125;<br>    &#125;   <br>&#125;)<br><br></code></pre></td></tr></table></figure><p>这样项目中状态的模块划分就更加清晰，对应模块的状态我们只需要修改相应模块文件即可。详细的案例代码可参考文末 github 地址。</p><h3 id="3-接口配置"><a href="#3-接口配置" class="headerlink" title="3. 接口配置"></a>3. 接口配置</h3><p>在项目的开发过程中，我们也少不了与后台服务器进行数据的获取和交互，这一般都是通过接口完成的，那么我们如何进行合理的接口配置呢？我们可以在 src 目录下新建 services 文件夹用于存放接口文件：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">└── src<br>    └── services<br>        ├── http.<span class="hljs-keyword">js </span>     <span class="hljs-comment"># 接口封装</span><br>        ├── moduleA.<span class="hljs-keyword">js </span>   <span class="hljs-comment"># A模块接口</span><br>        └── moduleB.<span class="hljs-keyword">js </span>   <span class="hljs-comment"># B模块接口</span><br><br></code></pre></td></tr></table></figure><p>为了让接口便于管理，我们同样使用不同的文件来配置不同模块的接口，同时由于接口的调用 ajax 请求代码重复部分较多，我们可以对其进行简单的封装，比如在 http.js 中（fetch为例）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* http.js */</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;whatwg-fetch&#x27;</span><br><br><span class="hljs-comment">// HTTP 工具类</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Http</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">async</span> <span class="hljs-title function_">request</span>(<span class="hljs-params">method, url, data</span>) &#123;<br>        <span class="hljs-keyword">const</span> param = &#123;<br>            <span class="hljs-attr">method</span>: method,<br>            <span class="hljs-attr">headers</span>: &#123;<br>                <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>            url += <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">formatQuery</span>(data)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            param[<span class="hljs-string">&#x27;body&#x27;</span>] = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data)<br>        &#125;<br><br>        <span class="hljs-comment">// Tips.loading(); // 可调用 loading 组件</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetch</span>(url, param).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isSuccess</span>(response))<br>                .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>                    <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()<br>            &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">// 判断请求是否成功</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">isSuccess</span>(<span class="hljs-params">res</span>) &#123;<br>        <span class="hljs-keyword">if</span> (res.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; res.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;<br>            <span class="hljs-keyword">return</span> res<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">requestException</span>(res)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 处理异常</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">requestException</span>(<span class="hljs-params">res</span>) &#123;<br>        <span class="hljs-keyword">const</span> error = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(res.<span class="hljs-property">statusText</span>)<br><br>        error.<span class="hljs-property">response</span> = res<br><br>        <span class="hljs-keyword">throw</span> error<br>    &#125;<br>    <br>    <span class="hljs-comment">// url处理</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">formatQuery</span>(<span class="hljs-params">query</span>) &#123;<br>        <span class="hljs-keyword">let</span> params = [];<br><br>        <span class="hljs-keyword">if</span> (query) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">in</span> query) &#123;<br>                <span class="hljs-keyword">let</span> vals = query[item];<br>                <span class="hljs-keyword">if</span> (vals !== <span class="hljs-literal">undefined</span>) &#123;<br>                    params.<span class="hljs-title function_">push</span>(item + <span class="hljs-string">&#x27;=&#x27;</span> + query[item])<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> params.<span class="hljs-property">length</span> ? <span class="hljs-string">&#x27;?&#x27;</span> + params.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>) : <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 处理 get 请求</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">url, data</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, url, data)<br>    &#125;<br>    <br>    <span class="hljs-comment">// 处理 put 请求</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">url, data</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(<span class="hljs-string">&#x27;PUT&#x27;</span>, url, data)<br>    &#125;<br>    <br>    <span class="hljs-comment">// 处理 post 请求</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">url, data</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(<span class="hljs-string">&#x27;POST&#x27;</span>, url, data)<br>    &#125;<br>    <br>    <span class="hljs-comment">// 处理 patch 请求</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">patch</span>(<span class="hljs-params">url, data</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(<span class="hljs-string">&#x27;PATCH&#x27;</span>, url, data)<br>    &#125;<br>    <br>    <span class="hljs-comment">// 处理 delete 请求</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">url, data</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(<span class="hljs-string">&#x27;DELETE&#x27;</span>, url, data)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>封装完毕后我们在 moduleA.js 中配置一个 github 的开放接口：<code>https://api.github.com/repos/octokit/octokit.rb</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">/* moduleA.js */</span><br><span class="hljs-keyword">import</span> Http from <span class="hljs-string">&#x27;./http&#x27;</span><br><br><span class="hljs-comment">// 获取测试数据</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getTestData = () =&gt; &#123;<br>    <span class="hljs-keyword">return</span> Http.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;https://api.github.com/repos/octokit/octokit.rb&#x27;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后在项目页面中进行调用，会成功获取 github 返回的数据，但是一般我们在项目中配置接口的时候会直接省略项目 url 部分，比如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">/* moduleA.js */</span><br><span class="hljs-keyword">import</span> Http from <span class="hljs-string">&#x27;./http&#x27;</span><br><br><span class="hljs-comment">// 获取测试数据</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getTestData = () =&gt; &#123;<br>    <span class="hljs-keyword">return</span> Http.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;/repos/octokit/octokit.rb&#x27;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这时候我们再次调用接口的时候会发现其调用地址为本地地址：<code>http://127.0.0.1:8080/repos/octokit/octokit.rb</code>，那么为了让其指向 <code>https://api.github.com</code>，我们需要在 vue.config.js 中进行 devServer 的配置：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">/* vue.config.js */<br><br>module.exports = &#123;<br>    <span class="hljs-string">...</span><br>    <br>    devServer: &#123;<br>    <br>        <span class="hljs-string">//</span> string | Object 代理设置<br>        proxy: &#123;<br>        <br>            <span class="hljs-string">//</span> 接口是 &#x27;<span class="hljs-string">/repos</span>&#x27; 开头的才用代理<br>            &#x27;<span class="hljs-string">/repos</span>&#x27;: &#123;<br>                target: &#x27;https:<span class="hljs-string">//api.github.com</span>&#x27;, <span class="hljs-string">//</span> 目标地址<br>                changeOrigin: <span class="hljs-literal">true</span>, <span class="hljs-string">//</span> 是否改变源地址<br>                <span class="hljs-string">//</span> pathRewrite: &#123;&#x27;^<span class="hljs-string">/api</span>&#x27;: &#x27;&#x27;&#125;<br>            &#125;<br>        &#125;,<br>    &#125;<br>    <br>    <span class="hljs-string">...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 devServer 中 我们配置 proxy 进行接口的代理，将我们本地地址转换为真实的服务器地址，此时我们同样能顺利的获取到数据，不同点在于接口状态变成了 304（重定向）：</p><img src="/2019/08/30/vue/164e55db6ccb45cb.png" class=""><h3 id="4-公共设施配置"><a href="#4-公共设施配置" class="headerlink" title="4. 公共设施配置"></a>4. 公共设施配置</h3><p>最后我们项目开发中肯定需要对一些公共的方法进行封装使用，这里我把它称之为公共设施，那么我们可以在 src 目录下建一个 common 文件夹来存放其配置文件：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">└── src<br>    └── common<br>        ├── index.<span class="hljs-keyword">js </span>     <span class="hljs-comment"># 公共配置入口</span><br>        ├── validate.<span class="hljs-keyword">js </span>  <span class="hljs-comment"># 表单验证配置</span><br>        └── other.<span class="hljs-keyword">js </span>     <span class="hljs-comment"># 其他配置</span><br><br></code></pre></td></tr></table></figure><p>在入口文件中我们可以向外暴露其他功能配置的模块，比如：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/* index.js */</span><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">Validate</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./validate&#x27;</span><br><span class="hljs-keyword">import</span> Other <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./other&#x27;</span><br><br>export &#123;<br>    <span class="hljs-keyword">Validate</span>,<br>    Other,<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样我们在页面中只需要引入一个 index.js 即可。</p><h2 id="结语-4"><a href="#结语-4" class="headerlink" title="结语"></a>结语</h2><p>本文介绍了 Vue 单页应用的一些基本配置，从项目构建层面阐述了各文件的主要配置方式和注意点，由于本文并不是一篇文档类的配置说明，并不会详细介绍各配置文件的 API 功能，大家可以访问文中列出的官方文档进行查阅。</p><p>本案例代码地址：<a href="https://github.com/luozhihao/vue-project-code/tree/master/single-page-project">single-page-project</a></p><h2 id="思考-作业-3"><a href="#思考-作业-3" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>devServer 中 proxy 的 key 值代表什么？如果再添加一个 <code>/reposed</code> 的配置会产生什么隐患？</p></li><li><p>如何配置 webpack 使得 <code>require.ensure()</code> 拆分出的 js 文件具有自定义文件名？</p></li></ul><h1 id="构建实战篇-2：使用-pages-构建多页应用"><a href="#构建实战篇-2：使用-pages-构建多页应用" class="headerlink" title="构建实战篇 2：使用 pages 构建多页应用"></a>构建实战篇 2：使用 pages 构建多页应用</h1><p>经过对单页应用配置的了解，相信大家应该对如何构建一个 Vue 单页应用项目已经有所收获和体会，在大部分实际场景中，我们都可以构建单页应用来进行项目的开发和迭代，然而对于项目复杂度过高或者页面模块之间差异化较大的项目，我们可以选择构建多页应用来实现。那么什么是多页应用，如何构建一个多页应用便是本文所要阐述的内容。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>首先我们可以把多页应用理解为由多个单页构成的应用，而何谓多个单页呢？其实你可以把一个单页看成是一个 html 文件，那么多个单页便是多个 html 文件，多页应用便是由多个 html 组成的应用，如下图所示：</p></blockquote> <img src="/2019/08/30/vue/164eb40e7ae7fb85.png" class=""><p>既然多页应用拥有多个 html，那么同样其应该拥有多个独立的入口文件、组件、路由、vuex 等。没错，说简单一点就是<strong>多页应用的每个单页都可以拥有单页应用 src 目录下的文件及功能</strong>，我们来看一下一个基础多页应用的目录结构：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">├── node_modules               <span class="hljs-comment"># 项目依赖包目录</span><br>├── <span class="hljs-keyword">build </span>                     <span class="hljs-comment"># 项目 webpack 功能目录</span><br>├── <span class="hljs-built_in">config</span>                     <span class="hljs-comment"># 项目配置项文件夹</span><br>├── src                        <span class="hljs-comment"># 前端资源目录</span><br>│   ├── images                 <span class="hljs-comment"># 图片目录</span><br>│   ├── components             <span class="hljs-comment"># 公共组件目录</span><br>│   ├── pages                  <span class="hljs-comment"># 页面目录</span><br>│   │   ├── page1              <span class="hljs-comment"># page1 目录</span><br>│   │   │   ├── components     <span class="hljs-comment"># page1 组件目录</span><br>│   │   │   ├── router         <span class="hljs-comment"># page1 路由目录</span><br>│   │   │   ├── views          <span class="hljs-comment"># page1 页面目录</span><br>│   │   │   ├── page1.html     <span class="hljs-comment"># page1 html 模板</span><br>│   │   │   ├── page1.vue      <span class="hljs-comment"># page1 vue 配置文件</span><br>│   │   │   └── page1.<span class="hljs-keyword">js </span>      <span class="hljs-comment"># page1 入口文件</span><br>│   │   ├── page2              <span class="hljs-comment"># page2 目录</span><br>│   │   └── index              <span class="hljs-comment"># index 目录</span><br>│   ├── common                 <span class="hljs-comment"># 公共方法目录</span><br>│   └── store                  <span class="hljs-comment"># 状态管理 store 目录</span><br>├── .gitignore                 <span class="hljs-comment"># git 忽略文件</span><br>├── .env                       <span class="hljs-comment"># 全局环境配置文件</span><br>├── .env.dev                   <span class="hljs-comment"># 开发环境配置文件</span><br>├── .postcssrc.<span class="hljs-keyword">js </span>             <span class="hljs-comment"># postcss 配置文件</span><br>├── <span class="hljs-keyword">babel.config.js </span>           <span class="hljs-comment"># babel 配置文件</span><br>├── package.<span class="hljs-keyword">json </span>              <span class="hljs-comment"># 包管理文件</span><br>├── vue.config.<span class="hljs-keyword">js </span>             <span class="hljs-comment"># CLI 配置文件</span><br>└── yarn.lock                  <span class="hljs-comment"># yarn 依赖信息文件</span><br><br></code></pre></td></tr></table></figure><p>根据上方目录结构我们可以看出其实 pages 下的一个目录就是一个单页包含的功能，这里我们包含了 3 个目录就构成了多页应用。</p><p>除了目录结构的不同外，其实区别单页应用，多页应用在很多配置上都需要进行修改，比如单入口变为多入口、单模板变为多模板等，那么下面我们就来了解一下多页应用的具体实现。</p><h2 id="多入口"><a href="#多入口" class="headerlink" title="多入口"></a>多入口</h2><p>在单页应用中，我们的入口文件只有一个，CLI 默认配置的是 main.js，但是到了多页应用，我们的入口文件便包含了 page1.js、page2.js、index.js等，数量取决于 pages 文件夹下目录的个数，这时候为了项目的可拓展性，我们需要自动计算入口文件的数量并解析路径配置到 webpack 中的 entry 属性上，如：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift">module.exports <span class="hljs-operator">=</span> &#123;<br>    <span class="hljs-operator">...</span><br>    <br>    entry: &#123;<br>        page1: &#x27;<span class="hljs-regexp">/xxx/</span>pages<span class="hljs-regexp">/page1/</span>page1.js&#x27;,<br>        page2: &#x27;<span class="hljs-regexp">/xxx/</span>pages<span class="hljs-regexp">/page2/</span>page2.js&#x27;,<br>        index: &#x27;<span class="hljs-regexp">/xxx/</span>pages<span class="hljs-regexp">/index/</span>index.js&#x27;,<br>    &#125;,<br>    <br>    <span class="hljs-operator">...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>那么我们如何读取并解析这样的路径呢，这里就需要使用工具和函数来解决了。我们可以在根目录新建 build 文件夹存放 utils.js 这样共用的 webpack 功能性文件，并加入多入口读取解析方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* utils.js */</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-comment">// glob 是 webpack 安装时依赖的一个第三方模块，该模块允许你使用 * 等符号,</span><br><span class="hljs-comment">// 例如 lib/*.js 就是获取 lib 文件夹下的所有 js 后缀名的文件</span><br><span class="hljs-keyword">const</span> glob = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;glob&#x27;</span>);<br><br><span class="hljs-comment">// 取得相应的页面路径，因为之前的配置，所以是 src 文件夹下的 pages 文件夹</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PAGE_PATH</span> = path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;../src/pages&#x27;</span>);<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">* 多入口配置</span><br><span class="hljs-comment">* 通过 glob 模块读取 pages 文件夹下的所有对应文件夹下的 js * 后缀文件，如果该文件存在</span><br><span class="hljs-comment">* 那么就作为入口处理</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">getEntries</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> entryFiles = glob.<span class="hljs-title function_">sync</span>(<span class="hljs-variable constant_">PAGE_PATH</span> + <span class="hljs-string">&#x27;/*/*.js&#x27;</span>) <span class="hljs-comment">// 同步读取所有入口文件</span><br>    <span class="hljs-keyword">let</span> map = &#123;&#125;<br>    <br>    <span class="hljs-comment">// 遍历所有入口文件</span><br>    entryFiles.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">filePath</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// 获取文件名</span><br>        <span class="hljs-keyword">let</span> filename = filePath.<span class="hljs-title function_">substring</span>(filePath.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;\/&#x27;</span>) + <span class="hljs-number">1</span>, filePath.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;.&#x27;</span>))<br>        <br>        <span class="hljs-comment">// 以键值对的形式存储</span><br>        map[filename] = filePath <br>    &#125;)<br>    <br>    <span class="hljs-keyword">return</span> map<br>&#125;<br><br></code></pre></td></tr></table></figure> <img src="/2019/08/30/vue/166c0c419bc53201.png" class=""><p>上方我们使用了 <a href="https://github.com/isaacs/node-glob">glob</a> 这一第三方模块读取所有 pages 文件夹下的入口文件，其需要进行安装：<code>yarn add glob --dev</code></p><p>读取并存储完毕后，我们得到了一个入口文件的对象集合，这个对象我们便可以将其设置到 webpack 的 entry 属性上，这里我们需要修改 vue.config.js 的配置来间接修改 webpack 的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* vue.config.js */</span><br><br><span class="hljs-keyword">const</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./build/utils&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    ...<br>    <br>    <span class="hljs-attr">configureWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        config.<span class="hljs-property">entry</span> = utils.<span class="hljs-title function_">getEntries</span>()<br>    &#125;,<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样我们多入口的设置便完成了，当然这并不是 CLI 所希望的操作，后面我们会进行改进。</p><h2 id="多模板"><a href="#多模板" class="headerlink" title="多模板"></a>多模板</h2><p>相对于多入口来说，多模板的配置也是大同小异，这里所说的模板便是每个 page 下的 html 模板文件，而模板文件的作用主要用于 webpack 中 <code>html-webpack-plugin</code> 插件的配置，其会根据模板文件生产一个编译后的 html 文件并自动加入携带 hash 的脚本和样式，基本配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* webpack 配置文件 */</span><br><span class="hljs-type">const</span> <span class="hljs-variable">HtmlWebpackPlugin</span> <span class="hljs-operator">=</span> require(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>) <span class="hljs-comment">// 安装并引用插件</span><br><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>    ...<br>    <br>    plugins: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>            title: <span class="hljs-string">&#x27;My Page&#x27;</span>, <span class="hljs-comment">// 生成 html 中的 title</span><br>            filename: <span class="hljs-string">&#x27;demo.html&#x27;</span>, <span class="hljs-comment">// 生成 html 的文件名</span><br>            template: <span class="hljs-string">&#x27;xxx/xxx/demo.html&#x27;</span>, <span class="hljs-comment">// 模板路径</span><br>            chunks: [<span class="hljs-string">&#x27;manifest&#x27;</span>, <span class="hljs-string">&#x27;vendor&#x27;</span>, <span class="hljs-string">&#x27;demo&#x27;</span>], <span class="hljs-comment">// 所要包含的模块</span><br>            inject: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否注入资源</span><br>        &#125;)<br>    ]<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>以上是单模板的配置，那么如果是多模板只要继续往 plugins 数组中添加 HtmlWebpackPlugin 即可，但是为了和多入口一样能够灵活的获取 pages 目录下所有模板文件并进行配置，我们可以在 utils.js 中添加多模板的读取解析方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* utils.js */</span><br><br><span class="hljs-comment">// 多页面输出配置</span><br><span class="hljs-comment">// 与上面的多页面入口配置相同，读取 page 文件夹下的对应的 html 后缀文件，然后放入数组中</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">htmlPlugin</span> = <span class="hljs-function"><span class="hljs-params">configs</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> entryHtml = glob.<span class="hljs-title function_">sync</span>(<span class="hljs-variable constant_">PAGE_PATH</span> + <span class="hljs-string">&#x27;/*/*.html&#x27;</span>)<br>    <span class="hljs-keyword">let</span> arr = []<br>    <br>    entryHtml.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">filePath</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> filename = filePath.<span class="hljs-title function_">substring</span>(filePath.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;\/&#x27;</span>) + <span class="hljs-number">1</span>, filePath.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;.&#x27;</span>))<br>        <span class="hljs-keyword">let</span> conf = &#123;<br>            <span class="hljs-attr">template</span>: filePath, <span class="hljs-comment">// 模板路径</span><br>            <span class="hljs-attr">filename</span>: filename + <span class="hljs-string">&#x27;.html&#x27;</span>, <span class="hljs-comment">// 生成 html 的文件名</span><br>            <span class="hljs-attr">chunks</span>: [<span class="hljs-string">&#x27;manifest&#x27;</span>, <span class="hljs-string">&#x27;vendor&#x27;</span>,  filename],<br>            <span class="hljs-attr">inject</span>: <span class="hljs-literal">true</span>,<br>        &#125;<br>        <br>        <span class="hljs-comment">// 如果有自定义配置可以进行 merge</span><br>        <span class="hljs-keyword">if</span> (configs) &#123;<br>            conf = <span class="hljs-title function_">merge</span>(conf, configs)<br>        &#125;<br>        <br>        <span class="hljs-comment">// 针对生产环境配置</span><br>        <span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>            conf = <span class="hljs-title function_">merge</span>(conf, &#123;<br>                <span class="hljs-attr">minify</span>: &#123;<br>                    <span class="hljs-attr">removeComments</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 删除 html 中的注释代码</span><br>                    <span class="hljs-attr">collapseWhitespace</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 删除 html 中的空白符</span><br>                    <span class="hljs-comment">// removeAttributeQuotes: true // 删除 html 元素中属性的引号</span><br>                &#125;,<br>                <span class="hljs-attr">chunksSortMode</span>: <span class="hljs-string">&#x27;manual&#x27;</span> <span class="hljs-comment">// 按 manual 的顺序引入</span><br>            &#125;)<br>        &#125;<br>        <br>        arr.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(conf))<br>    &#125;)<br>    <br>    <span class="hljs-keyword">return</span> arr<br>&#125;<br><br></code></pre></td></tr></table></figure> <img src="/2019/08/30/vue/166c0c888939ac36.png" class=""><p>以上我们仍然是使用 glob 读取所有模板文件，然后将其遍历并设置每个模板的 config，同时针对一些自定义配置和生产环境的配置进行了 merge 处理，其中自定义配置的功能我会在下节进行介绍，这里介绍一下生产环境下 <code>minify</code> 配置的作用：<strong>将 html-minifier 的选项作为对象来缩小输出</strong>。</p><p><a href="https://github.com/kangax/html-minifier">html-minifier</a> 是一款用于缩小 html 文件大小的工具，其有很多配置项功能，包括上述所列举的常用的删除注释、空白、引号等。</p><p>当我们编写完了多模板的方法后，我们同样可以在 vue.config.js 中进行配置，与多入口不同的是我们在 configureWebpack 中不能直接替换 plugins 的值，因为它还包含了其他插件，这时候大家还记得第 3 节中讲到的使用 return 返回一个对象来进行 merge 操作吗？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* vue.config.js */</span><br><br><span class="hljs-keyword">const</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./build/utils&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    ...<br>    <br>    <span class="hljs-attr">configureWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        config.<span class="hljs-property">entry</span> = utils.<span class="hljs-title function_">getEntries</span>() <span class="hljs-comment">// 直接覆盖 entry 配置</span><br>        <br>        <span class="hljs-comment">// 使用 return 一个对象会通过 webpack-merge 进行合并，plugins 不会置空</span><br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">plugins</span>: [...utils.<span class="hljs-title function_">htmlPlugin</span>()]<br>        &#125;<br>    &#125;,<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如此我们多页应用的多入口和多模板的配置就完成了，这时候我们运行命令 <code>yarn build</code> 后你会发现 dist 目录下生成了 3 个 html 文件，分别是 index.html、page1.html 和 page2.html。</p><h2 id="使用-pages-配置"><a href="#使用-pages-配置" class="headerlink" title="使用 pages 配置"></a>使用 pages 配置</h2><p>其实，在 vue.config.js 中，我们还有一个配置没有使用，便是 pages。pages 对象允许我们为应用配置多个入口及模板，这就为我们的多页应用提供了开放的配置入口。官方示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* vue.config.js */</span><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>    pages: &#123;<br>        index: &#123;<br>            <span class="hljs-comment">// page 的入口</span><br>            entry: <span class="hljs-string">&#x27;src/index/main.js&#x27;</span>,<br>            <span class="hljs-comment">// 模板来源</span><br>            template: <span class="hljs-string">&#x27;public/index.html&#x27;</span>,<br>            <span class="hljs-comment">// 在 dist/index.html 的输出</span><br>            filename: <span class="hljs-string">&#x27;index.html&#x27;</span>,<br>            <span class="hljs-comment">// 当使用 title 选项时，</span><br>            <span class="hljs-comment">// template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br>            title: <span class="hljs-string">&#x27;Index Page&#x27;</span>,<br>            <span class="hljs-comment">// 在这个页面中包含的块，默认情况下会包含</span><br>            <span class="hljs-comment">// 提取出来的通用 chunk 和 vendor chunk。</span><br>            chunks: [<span class="hljs-string">&#x27;chunk-vendors&#x27;</span>, <span class="hljs-string">&#x27;chunk-common&#x27;</span>, <span class="hljs-string">&#x27;index&#x27;</span>]<br>        &#125;,<br>        <span class="hljs-comment">// 当使用只有入口的字符串格式时，</span><br>        <span class="hljs-comment">// 模板会被推导为 `public/subpage.html`</span><br>        <span class="hljs-comment">// 并且如果找不到的话，就回退到 `public/index.html`。</span><br>        <span class="hljs-comment">// 输出文件名会被推导为 `subpage.html`。</span><br>        subpage: <span class="hljs-string">&#x27;src/subpage/main.js&#x27;</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们不难发现，pages 对象中的 key 就是入口的别名，而其 value 对象其实是入口 entry 和模板属性的合并，这样我们上述介绍的获取多入口和多模板的方法就可以合并成一个函数来进行多页的处理，合并后的 setPages 方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// pages 多入口配置</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">setPages</span> = <span class="hljs-function"><span class="hljs-params">configs</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> entryFiles = glob.<span class="hljs-title function_">sync</span>(<span class="hljs-variable constant_">PAGE_PATH</span> + <span class="hljs-string">&#x27;/*/*.js&#x27;</span>)<br>    <span class="hljs-keyword">let</span> map = &#123;&#125;<br><br>    entryFiles.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">filePath</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> filename = filePath.<span class="hljs-title function_">substring</span>(filePath.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;\/&#x27;</span>) + <span class="hljs-number">1</span>, filePath.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;.&#x27;</span>))<br>        <span class="hljs-keyword">let</span> tmp = filePath.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, filePath.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;\/&#x27;</span>))<br><br>        <span class="hljs-keyword">let</span> conf = &#123;<br>            <span class="hljs-comment">// page 的入口</span><br>            <span class="hljs-attr">entry</span>: filePath, <br>            <span class="hljs-comment">// 模板来源</span><br>            <span class="hljs-attr">template</span>: tmp + <span class="hljs-string">&#x27;.html&#x27;</span>, <br>            <span class="hljs-comment">// 在 dist/index.html 的输出</span><br>            <span class="hljs-attr">filename</span>: filename + <span class="hljs-string">&#x27;.html&#x27;</span>, <br>            <span class="hljs-comment">// 页面模板需要加对应的js脚本，如果不加这行则每个页面都会引入所有的js脚本</span><br>            <span class="hljs-attr">chunks</span>: [<span class="hljs-string">&#x27;manifest&#x27;</span>, <span class="hljs-string">&#x27;vendor&#x27;</span>, filename], <br>            <span class="hljs-attr">inject</span>: <span class="hljs-literal">true</span>,<br>        &#125;;<br><br>        <span class="hljs-keyword">if</span> (configs) &#123;<br>            conf = <span class="hljs-title function_">merge</span>(conf, configs)<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>            conf = <span class="hljs-title function_">merge</span>(conf, &#123;<br>                <span class="hljs-attr">minify</span>: &#123;<br>                    <span class="hljs-attr">removeComments</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 删除 html 中的注释代码</span><br>                    <span class="hljs-attr">collapseWhitespace</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 删除 html 中的空白符</span><br>                    <span class="hljs-comment">// removeAttributeQuotes: true // 删除 html 元素中属性的引号</span><br>                &#125;,<br>                <span class="hljs-attr">chunksSortMode</span>: <span class="hljs-string">&#x27;manual&#x27;</span><span class="hljs-comment">// 按 manual 的顺序引入</span><br>            &#125;)<br>        &#125;<br><br>        map[filename] = conf<br>    &#125;)<br><br>    <span class="hljs-keyword">return</span> map<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上述代码我们 return 出的 map 对象就是 pages 所需要的配置项结构，我们只需在 vue.config.js 中引用即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* vue.config.js */</span><br><br><span class="hljs-type">const</span> <span class="hljs-variable">utils</span> <span class="hljs-operator">=</span> require(<span class="hljs-string">&#x27;./build/utils&#x27;</span>)<br><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>    ...<br>    <br>    pages: utils.setPages(),<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样我们多页应用基于 pages 配置的改进就大功告成了，当你运行打包命令来查看输出结果的时候，你会发现和之前的方式相比并没有什么变化，这就说明这两种方式都适用于多页的构建，但是这里还是推荐大家使用更便捷的 pages 配置。</p><h2 id="结语-5"><a href="#结语-5" class="headerlink" title="结语"></a>结语</h2><p>本文主要讲解了多页应用开发中多入口和多模板的实现方式，通过针对 webpack 配置的修改我们基本了解了多页模式与单页模式的差异性，下篇文章我们将以本文内容为基础进一步完善我们的多页应用配置，使其能够正常适应实际的开发与生产。</p><p>本案例代码地址：<a href="https://github.com/luozhihao/vue-project-code/tree/master/multi-page-project">multi-page-project</a></p><h2 id="思考-作业-4"><a href="#思考-作业-4" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>多页应用相比单页应用有哪些优点和缺点？</p></li><li><p><code>chunksSortMode</code> 除了文中介绍的 <code>manual</code> 手动排序外，还有哪些排序方式？</p></li><li><p>glob 中 <code>*</code> 和 <code>**</code> 的区别是什么？</p></li></ul><h1 id="构建实战篇-3：多页路由与模板解析"><a href="#构建实战篇-3：多页路由与模板解析" class="headerlink" title="构建实战篇 3：多页路由与模板解析"></a>构建实战篇 3：多页路由与模板解析</h1><p>上篇文章中我们成功打包并输出了多页文件，而构建一个多页应用能够让我们进一步了解项目配置的可拓展性，可以对学习 Vue 和 webpack 起到强化训练的效果，本文将在此基础上主要针对多页路由及模板的配置进行系列的介绍。</p><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><h3 id="1-跳转"><a href="#1-跳转" class="headerlink" title="1. 跳转"></a>1. 跳转</h3><p>在配置路由前，首先我们要明确一点就是，多页应用中的每个单页都是相互隔离的，即如果你想从 page1 下的路由跳到 page2 下的路由，你无法使用 vue-router 中的方法进行跳转，需要使用原生方法：<code>location.href</code> 或 <code>location.replace</code>。</p><p>此外为了能够清晰的分辨路由属于哪个单页，我们应该给每个单页路由添加前缀，比如：</p><ul><li>index 单页：&#x2F;vue&#x2F;</li><li>page1 单页：&#x2F;vue&#x2F;page1&#x2F;</li><li>page2 单页：&#x2F;vue&#x2F;page2&#x2F;</li></ul><p>其中 &#x2F;vue&#x2F; 为项目的二级目录，其后的目录代表路由属于哪个单页。因此我们每个单页的路由配置可以像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* page1 单页路由配置 */</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-comment">// 首页</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = (<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">require</span>.<span class="hljs-title function_">ensure</span>([<span class="hljs-string">&#x27;../views/home.vue&#x27;</span>], <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../views/home.vue&#x27;</span>))<br>    &#125;)<br>&#125;)<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>)<br><br><span class="hljs-keyword">let</span> base = <span class="hljs-string">`<span class="hljs-subst">$&#123;process.env.BASE_URL&#125;</span>`</span> + <span class="hljs-string">&#x27;page1&#x27;</span>; <span class="hljs-comment">// 添加单页前缀</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;history&#x27;</span>,<br>    <span class="hljs-attr">base</span>: base,<br>    <span class="hljs-attr">routes</span>: [<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>        &#125;,<br>    ]<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>我们通过设置路由的 base 值来为每个单页添加路由前缀，如果是 index 单页我们无需拼接路由前缀，直接跳转至二级目录即可。</p><p>那么在单页间跳转的地方，我们可以这样写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;goFn(&#x27;&#x27;)&quot;</span>&gt;</span>Index<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> |<br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;goFn(&#x27;page1&#x27;)&quot;</span>&gt;</span>Page1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> |<br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;goFn(&#x27;page2&#x27;)&quot;</span>&gt;</span>Page2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> |<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">goFn</span>(<span class="hljs-params">name</span>) &#123;</span><br><span class="language-javascript">            location.<span class="hljs-property">href</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;process.env.BASE_URL&#125;</span>`</span> + name</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>但是为了保持和 Vue 路由跳转同样的风格，我可以对单页之间的跳转做一下封装，实现一个 <code>Navigator</code> 类，类的代码可以查看本文最后的示例，封装完成后我们可以将跳转方法修改为：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xl">this.$openRouter(&#123;<br>    <span class="hljs-keyword">name</span>: <span class="hljs-keyword">name</span>, <span class="hljs-comment">// 跳转地址</span><br>    query: &#123;<br>        <span class="hljs-keyword">text</span>: <span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-comment">// 可以进行参数传递</span><br>    &#125;,<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>使用上述 <code>$openRouter</code> 方法我们还需要一个前提条件，便是将其绑定到 Vue 的原型链上，我们在所有单页的入口文件中添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Navigator</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../common&#x27;</span> <span class="hljs-comment">// 引入 Navigator</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$openRouter</span> = <span class="hljs-title class_">Navigator</span>.<span class="hljs-property">openRouter</span>; <span class="hljs-comment">// 添加至 Vue 原型链</span><br><br></code></pre></td></tr></table></figure><p>至此我们已经能够成功模仿 vue-router 进行单页间的跳转，但是需要注意的是因为其本质使用的是 location 跳转，所以必然会产生浏览器的刷新与重载。</p><h3 id="2-重定向"><a href="#2-重定向" class="headerlink" title="2. 重定向"></a>2. 重定向</h3><p>当我们完成上述路由跳转的功能后，可以在本地服务器上来进行一下测试，你会发现 Index 首页可以正常打开，但是跳转 Page1、Page2 却仍然处于 Index 父组件下，这是因为浏览器认为你所要跳转的页面还是在 Index 根路由下，同时又没有匹配到 Index 单页中对应的路由。这时候我们服务器需要做一次重定向，将下方路由指向对应的 html 文件即可：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/vue/</span>page1 -&gt; <span class="hljs-regexp">/vue/</span>page1.html<br><span class="hljs-regexp">/vue/</span>page2 -&gt; <span class="hljs-regexp">/vue/</span>page2.html<br><br></code></pre></td></tr></table></figure><p>在 vue.config.js 中，我们需要对 devServer 进行配置，添加 <code>historyApiFallback</code> 配置项，该配置项主要用于解决 HTML5 History API 产生的问题，比如其 rewrites 选项用于重写路由：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* vue.config.js */</span><br><br><span class="hljs-keyword">let</span> baseUrl = <span class="hljs-string">&#x27;/vue/&#x27;</span>;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    ...<br>    <br>    <span class="hljs-attr">devServer</span>: &#123;<br>        <span class="hljs-attr">historyApiFallback</span>: &#123;<br>            <span class="hljs-attr">rewrites</span>: [<br>                &#123; <span class="hljs-attr">from</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(baseUrl + <span class="hljs-string">&#x27;page1&#x27;</span>), <span class="hljs-attr">to</span>: baseUrl + <span class="hljs-string">&#x27;page1.html&#x27;</span> &#125;,<br>                &#123; <span class="hljs-attr">from</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(baseUrl + <span class="hljs-string">&#x27;page2&#x27;</span>), <span class="hljs-attr">to</span>: baseUrl + <span class="hljs-string">&#x27;page2.html&#x27;</span> &#125;,<br>            ]<br>        &#125;<br>    &#125;<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上方我们通过 rewrites 匹配正则表达式的方式将 <code>/vue/page1</code> 这样的路由替换为访问服务器下正确 html 文件的形式，如此不同单页间便可以进行正确跳转和访问了。最后需要注意的是如果你的应用发布到正式服务器上，你同样需要让服务器或者中间层作出合理解析，参考：<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90">HTML5 History 模式 # 后端配置例子</a></p><p>而更多关于 historyApiFallback 的信息可以访问：<a href="https://github.com/bripkens/connect-history-api-fallback">connect-history-api-fallback</a></p><h2 id="模板配置"><a href="#模板配置" class="headerlink" title="模板配置"></a>模板配置</h2><p>上篇文章我们已经介绍了关于多模板的读取和配置，在配置 html-webpack-plugin 的时候我们提到了自定义配置，这里我将结合模板渲染的功能来进行统一介绍。</p><h3 id="1-模板渲染"><a href="#1-模板渲染" class="headerlink" title="1. 模板渲染"></a>1. 模板渲染</h3><p>这里所说的模板渲染是在我们的 html 模板文件中使用 html-webpack-plugin 提供的 <a href="https://github.com/jaketrent/html-webpack-template/blob/86f285d5c790a6c15263f5cc50fd666d51f974fd/index.html">default template</a> 语法进行模板编写，比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>模板<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    &lt;% for (var chunk in htmlWebpackPlugin.files.css) &#123; %&gt;<br>        &lt;% if(htmlWebpackPlugin.files.css[chunk]) &#123;%&gt;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&lt;%= htmlWebpackPlugin.files.css[chunk] %&gt;&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><br>        &lt;%&#125;%&gt;<br>    &lt;% &#125; %&gt;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- built files will be auto injected --&gt;</span><br><br>    &lt;% for (var chunk in htmlWebpackPlugin.files.js) &#123; %&gt;<br>        &lt;% if(htmlWebpackPlugin.files.js[chunk]) &#123;%&gt;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&lt;%= htmlWebpackPlugin.files.js[chunk] %&gt;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        &lt;%&#125;%&gt;<br>    &lt;% &#125; %&gt;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>以上我们使用模板语法手动获取并遍历 htmlWebpackPlugin 打包后的文件并生成到模板中，其中的 <code>htmlWebpackPlugin</code> 变量是模板提供的可访问变量，其有以下特定数据：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-string">&quot;htmlWebpackPlugin&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;files&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;css&quot;</span>: [ <span class="hljs-string">&quot;main.css&quot;</span> ],<br>        <span class="hljs-string">&quot;js&quot;</span>: [ <span class="hljs-string">&quot;assets/head_bundle.js&quot;</span>, <span class="hljs-string">&quot;assets/main_bundle.js&quot;</span>],<br>        <span class="hljs-string">&quot;chunks&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;head&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;entry&quot;</span>: <span class="hljs-string">&quot;assets/head_bundle.js&quot;</span>,<br>                <span class="hljs-string">&quot;css&quot;</span>: [ <span class="hljs-string">&quot;main.css&quot;</span> ]<br>            &#125;,<br>            <span class="hljs-string">&quot;main&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;entry&quot;</span>: <span class="hljs-string">&quot;assets/main_bundle.js&quot;</span>,<br>                <span class="hljs-string">&quot;css&quot;</span>: []<br>            &#125;,<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们通过 <code>htmlWebpackPlugin.files</code> 可以获取打包输出的 js 及 css 文件路径，包括入口文件路径等。</p><p>需要注意的是如果你在模板中编写了插入对应 js 及 css 的语法，你需要设置 <code>inject</code> 的值为 false 来关闭资源的自动注入：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/* utils.js */</span><br>...<br><br><span class="hljs-keyword">let</span> conf = &#123;<br>    entry: filePath, <span class="hljs-comment">// page 的入口</span><br>    template: filePath, <span class="hljs-comment">// 模板路径</span><br>    filename: filename + <span class="hljs-string">&#x27;.html&#x27;</span>, <span class="hljs-comment">// 生成 html 的文件名</span><br>    chunks: [<span class="hljs-string">&#x27;manifest&#x27;</span>, <span class="hljs-string">&#x27;vendor&#x27;</span>,  filename],<br>    inject: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 关闭资源自动注入</span><br>&#125;<br><br>...<br><br></code></pre></td></tr></table></figure><p>否则在页面会引入两次资源，如下图所示：</p> <img src="/2019/08/30/vue/164fb7b172500b55.png" class=""><h3 id="2-自定义配置"><a href="#2-自定义配置" class="headerlink" title="2. 自定义配置"></a>2. 自定义配置</h3><p>在模板渲染中，我们只能够使用 htmlWebpackPlugin 内部的一些属性和方法来进行模板的定制化开发，那么如果遇到需要根据不同环境来引入不同资源，同时不同模板间的配置还可能不一样的需求情况的话，我们使用自定义配置会比较方便。比如我们需要在生产环境模板中引入第三方统计脚本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* vue.config.js */</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    ...<br>    <br>    <span class="hljs-attr">pages</span>: utils.<span class="hljs-title function_">setPages</span>(&#123;<br>        <span class="hljs-title function_">addScript</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">                    &lt;script src=&quot;https://s95.cnzz.com/z_stat.php?id=xxx&amp;web_id=xxx&quot; language=&quot;JavaScript&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">                `</span><br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>    &#125;),<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后在页面模板中通过 <code>htmlWebpackPlugin.options</code> 获取自定义配置对象并进行输出：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;% <span class="hljs-keyword">if</span>(htmlWebpackPlugin.options.addScript)&#123; %&gt;<br>    &lt;%= htmlWebpackPlugin.options.addScript() %&gt;<br>&lt;%&#125;%&gt;<br><br></code></pre></td></tr></table></figure><p>同时你也可以针对个别模板进行配置，比如我想只在 Index 单页中添加统计脚本，在 Page1 单页中添加其他脚本，那么你可以给 addScript 传入标识符来进行判断输出，比如：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;% <span class="hljs-keyword">if</span>(htmlWebpackPlugin.options.addScript)&#123; %&gt;<br>    &lt;%= htmlWebpackPlugin.options.addScript(<span class="hljs-string">&#x27;index&#x27;</span>) %&gt;<br>&lt;%&#125;%&gt;<br><br></code></pre></td></tr></table></figure><p>同时为 addScript 方法添加参数 from：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">addScript</span>(<span class="hljs-params"><span class="hljs-keyword">from</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>        <span class="hljs-keyword">let</span> url = <span class="hljs-string">&quot;https://xxx&quot;</span>;<br>    <br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">from</span> === <span class="hljs-string">&#x27;index&#x27;</span>) &#123;<br>            url = <span class="hljs-string">&quot;https://s95.cnzz.com/z_stat.php?id=xxx&amp;web_id=xxx&quot;</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">            &lt;script src=<span class="hljs-subst">$&#123;url&#125;</span> language=&quot;JavaScript&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">        `</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样我们就完成了自定义配置中的模板渲染功能。当然根据实际项目需求你的自定义配置项可能会更加复杂和灵活。</p><h2 id="结语-6"><a href="#结语-6" class="headerlink" title="结语"></a>结语</h2><p>通过 2 小节的学习，相信大家对 Vue 多页应用的构建已经有所了解。本文在第 1 节的基础上重点介绍了多页路由及模板的配置，阐述了其与单页应用的不同之处，同时针对模板自定义配置的使用场景给出了简单的实例，希望大家在了解的基础上将下方的实例代码作为参考，进行相应的实战。</p><p>本案例代码地址：<a href="https://github.com/luozhihao/vue-project-code/tree/master/multi-page-project">multi-page-project</a></p><h2 id="思考-作业-5"><a href="#思考-作业-5" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>多页应用中各自的 <code>Vuex Store</code> 信息能实现共享吗？</p></li><li><p>html-webpack-plugin 如何解析非 .html 的模板，比如 .hbs，应该如何配置？</p></li></ul><h1 id="构建实战篇-4：项目整合与优化"><a href="#构建实战篇-4：项目整合与优化" class="headerlink" title="构建实战篇 4：项目整合与优化"></a>构建实战篇 4：项目整合与优化</h1><p>前几小节，我们讲述了 Vue 项目构建的整体流程，从无到有的实现了单页和多页应用的功能配置，但在实现的过程中不乏一些可以整合的功能点及可行性的优化方案，就像大楼造完需要进行最后的项目验收改进一样，有待我们进一步的去完善。</p><h2 id="使用-alias-简化路径"><a href="#使用-alias-简化路径" class="headerlink" title="使用 alias 简化路径"></a>使用 alias 简化路径</h2><p>使用 webpack 构建过 Vue 项目的同学应该知道 <code>alias</code> 的作用，我们可以使用它将复杂的文件路径定义成一个变量来访问。在不使用 alias 的项目中，我们引入文件的时候通常会去计算被引入文件对于引入它的文件的相对路径，比如像这样：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> HelloWorld <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../../../HelloWorld.vue&#x27;</span><br><br></code></pre></td></tr></table></figure><p>一旦相对层次结构较深，我们就很难去定位所引入文件的具体位置，其实这并不是我们应该操心的地方，完全可以交给 webpack 来进行处理。在原生的 webpack 配置中我们可以定义 alias 来解决这一问题：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs stylus">const path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br>const resolve = dir =&gt; &#123;<br>    return path<span class="hljs-selector-class">.join</span>(__dirname, dir)<br>&#125;<br><br>module<span class="hljs-selector-class">.exports</span> = &#123;<br>    ...<br>    <br>    resolve: &#123;<br>        alias: &#123;<br>            <span class="hljs-string">&#x27;@&#x27;</span>: <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src&#x27;</span>), <span class="hljs-comment">// 定义 src 目录变量</span><br>            _lib: <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src/common&#x27;</span>), <span class="hljs-comment">// 定义 common 目录变量,</span><br>            _com: <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src/components&#x27;</span>), <span class="hljs-comment">// 定义 components 目录变量,</span><br>            _img: <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src/images&#x27;</span>), <span class="hljs-comment">// 定义 images 目录变量,</span><br>            _ser: <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src/services&#x27;</span>), <span class="hljs-comment">// 定义 services 目录变量,</span><br>        &#125;<br>    &#125;,<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上方我们在 webpack resolve（解析）对象下配置 alias 的值，将常用的一些路径赋值给了我们自定义的变量，这样我们便可以将第一个例子简化为：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> HelloWorld <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;_com/HelloWorld.vue&#x27;</span><br><br></code></pre></td></tr></table></figure><p>而在 CLI 3.x 中我们无法直接操作 webpack 的配置文件，我们需要通过 chainWebpack 来进行间接修改，代码如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">/* vue.config.js */</span><br>module<span class="hljs-selector-class">.exports</span> = &#123;<br>    ...<br>    <br>    chainWebpack: config =&gt; &#123;<br>        config<span class="hljs-selector-class">.resolve</span><span class="hljs-selector-class">.alias</span><br>            <span class="hljs-selector-class">.set</span>(<span class="hljs-string">&#x27;@&#x27;</span>, <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src&#x27;</span>))<br>            <span class="hljs-selector-class">.set</span>(<span class="hljs-string">&#x27;_lib&#x27;</span>, <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src/common&#x27;</span>))<br>            <span class="hljs-selector-class">.set</span>(<span class="hljs-string">&#x27;_com&#x27;</span>, <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src/components&#x27;</span>))<br>            <span class="hljs-selector-class">.set</span>(<span class="hljs-string">&#x27;_img&#x27;</span>, <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src/images&#x27;</span>))<br>            <span class="hljs-selector-class">.set</span>(<span class="hljs-string">&#x27;_ser&#x27;</span>, <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src/services&#x27;</span>))<br>    &#125;,<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样我们修改 webpack alias 来简化路径的优化就实现了。但是需要注意的是对于在样式及 html 模板中引用路径的简写时，前面需要加上 <code>～</code> 符，否则路径解析会失败，如：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">.img &#123;<br>    background: (~_img/home.png);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="整合功能模块"><a href="#整合功能模块" class="headerlink" title="整合功能模块"></a>整合功能模块</h2><p>在多页应用的构建中，由于存在多个入口文件，因此会出现重复书写相同入口配置的情况，这样对于后期的修改和维护都不是特别友好，需要修改所有入口文件的相同配置，比如在 index 单页的入口中我们引用了 VConsole 及 performance 的配置，同时在 Vue 实例上还添加了 $openRouter 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./index.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/store/&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Navigator</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../common&#x27;</span><br><br><span class="hljs-comment">// 如果是非线上环境，不加载 VConsole</span><br><span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> !== <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">VConsole</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vconsole/dist/vconsole.min.js&#x27;</span>);<br>    <span class="hljs-keyword">var</span> vConsole = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VConsole</span>();<br><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">performance</span> = <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">$openRouter</span> = <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$openRouter</span> = <span class="hljs-title class_">Navigator</span>.<span class="hljs-property">openRouter</span>;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  router,<br>  store,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>而在 page1 和 page2 的入口文件中也同样进行了上述配置，那我们该如何整合这些重复代码，使其能够实现一次修改多处生效的功能呢？最简单的方法便是封装成一个共用方法来进行调用，这里我们可以在 common 文件夹下新建 entryConfig 文件夹用于放置入口文件中公共配置的封装，封装代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Navigator</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../index&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (<span class="hljs-title class_">Vue</span>) =&gt; &#123;<br><br>    <span class="hljs-comment">// 如果是非线上环境，不加载 VConsole</span><br>    <span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> !== <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">VConsole</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vconsole/dist/vconsole.min.js&#x27;</span>);<br>        <span class="hljs-keyword">var</span> vConsole = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VConsole</span>();<br><br>        <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">performance</span> = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property">$openRouter</span> = <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$openRouter</span> = <span class="hljs-title class_">Navigator</span>.<span class="hljs-property">openRouter</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上述代码我们向外暴露了一个函数，在调用它的入口文件中传入 Vue 实例作为参数即可实现内部功能的共用，我们可以将原本的入口文件简化为:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./index.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/store/&#x27;</span><br><span class="hljs-keyword">import</span> entryConfig <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;_lib/entryConfig/&#x27;</span><br><br><span class="hljs-comment">// 调用公共方法加载配置</span><br><span class="hljs-title function_">entryConfig</span>(<span class="hljs-title class_">Vue</span>)<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  router,<br>  store,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>这样我们便完成了入口文件配置的整合，当然你还可以给该函数传入 router 实例及自定义参数用于其他共用配置的封装。</p><h2 id="开启-Gzip-压缩"><a href="#开启-Gzip-压缩" class="headerlink" title="开启 Gzip 压缩"></a>开启 Gzip 压缩</h2><p>在《webpack 在 CLI 3 中的应用》章节，我们介绍了 CLI 为我们内置的 webpack plugins，使用这些内置插件基本已经能够满足我们大多数项目的构建和优化，当然你仍然可以为项目添加自己想要的插件来实现一些差异化的功能，比如使用 <a href="https://www.npmjs.com/package/compression-webpack-plugin">compression-webpack-plugin</a> 来开启 Gzip 压缩。在 vue.config.js 配置文件中，我们通过 configureWebpack 中返回一个对象来实现 plugins 的合并：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* vue.config.js */</span><br><span class="hljs-keyword">const</span> isPro = process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    ...<br>    <br>    <span class="hljs-attr">configureWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (isPro) &#123;<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">plugins</span>: [<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompressionWebpackPlugin</span>(&#123;<br>                         <span class="hljs-comment">// 目标文件名称。[path] 被替换为原始文件的路径和 [query] 查询</span><br>                        <span class="hljs-attr">asset</span>: <span class="hljs-string">&#x27;[path].gz[query]&#x27;</span>,<br>                        <span class="hljs-comment">// 使用 gzip 压缩</span><br>                        <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;gzip&#x27;</span>, <br>                        <span class="hljs-comment">// 处理与此正则相匹配的所有文件</span><br>                        <span class="hljs-attr">test</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<br>                            <span class="hljs-string">&#x27;\\.(js|css)$&#x27;</span><br>                        ),<br>                        <span class="hljs-comment">// 只处理大于此大小的文件</span><br>                        <span class="hljs-attr">threshold</span>: <span class="hljs-number">10240</span>,<br>                        <span class="hljs-comment">// 最小压缩比达到 0.8 时才会被压缩</span><br>                        <span class="hljs-attr">minRatio</span>: <span class="hljs-number">0.8</span>，<br>                    &#125;)<br>                ]<br>            &#125;<br>        &#125;<br>    &#125;<br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上方我们通过在生产环境中增加 Gzip 压缩配置实现了打包后输出增加对应的 .gz 为后缀的文件，而由于我们配置项中配置的是只压缩大小超过 10240B（10kB）的 JS 及 CSS，因此不满足条件的文件不会进行 Gzip 压缩。</p><p>Gzip 压缩能在普通压缩的基础上再进行 50% 以上 的压缩，我们可以直接来看下控制台的输出对比图：</p> <img src="/2019/08/30/vue/1654de7a38472ab8.png" class=""><p>很明显，Gzip 压缩后的文件体积得到了很大程度的减小，这对于浏览器资源加载速度的提升起到了非常有效的帮助。但是需要注意的是访问 Gzip 压缩的文件需要服务端进行相应配置，以下是 Nginx Gzip 压缩的流程：</p><blockquote><p>Nginx 开启 Gzip 压缩配置后，其会根据配置情况对指定的类型文件进行压缩，主要针对 JS 与 CSS 。如果文件路径中存在与原文件同名（加了个 .gz），Nginx 会获取 gz 文件，如果找不到，会主动进行 Gzip 压缩。</p></blockquote><h2 id="结语-7"><a href="#结语-7" class="headerlink" title="结语"></a>结语</h2><p>至此，一路走来，我们成功完成了本小册 Vue 项目构建部分的教程，从 CLI 3.x 的使用到项目内外部环境的配置，再到最后多页应用的拓展，我们循序渐进、由浅入深的讲解了 Vue 项目构建的主要知识点及详细流程，希望大家能够在此基础上举一反三，结合实际代码，将理论知识转化为实际运用，配合自己的理解，一步步实现自己的项目构建，并为构建出的项目添砖加瓦，实现质的飞跃。</p><h2 id="思考-作业-6"><a href="#思考-作业-6" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>除了本文中介绍的项目优化方法，还有哪些常见的优化手段？如何通过 Vue CLI 3 配置实现？</p></li><li><p>总结并对比 Vue CLI 2.x，Vue CLI 3.x 在项目构建方面有哪些优势和不足？</p></li></ul><h1 id="开发指南篇-1：从编码技巧与规范开始"><a href="#开发指南篇-1：从编码技巧与规范开始" class="headerlink" title="开发指南篇 1：从编码技巧与规范开始"></a>开发指南篇 1：从编码技巧与规范开始</h1><p>当我们完成项目的构建，进入开发阶段的时候，除了你需要了解框架本身的知识点外，我们还需要提前掌握一些项目的编码技巧与规范，在根源上解决之后因编码缺陷而导致的项目维护困难、性能下降等常见问题，为项目多人开发提供编码的一致性。</p><p>本文将罗列项目中常用的一些编码技巧与规范来帮助大家提升代码质量，并会结合代码片段加强大家的理解与认知。当然不是所有实例都是针对 Vue.js 开发的，有些同样也适用于其他前端项目。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="1-使用对象代替-if-及-switch"><a href="#1-使用对象代替-if-及-switch" class="headerlink" title="1. 使用对象代替 if 及 switch"></a>1. 使用对象代替 if 及 switch</h3><p>在很多情况下，我们经常会遇到循环判断执行赋值操作的场景，一般我们都会使用 if 及 switch 的条件判断，如果符合则执行赋值，不符合则进入下个判断，比如：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sqf">let <span class="hljs-built_in">name</span> = <span class="hljs-string">&#x27;lisi&#x27;</span>;<br>let age = <span class="hljs-number">18</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">name</span> === <span class="hljs-string">&#x27;zhangsan&#x27;</span>) &#123;<br>    age = <span class="hljs-number">21</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">name</span> === <span class="hljs-string">&#x27;lisi&#x27;</span>) &#123;<br>    age = <span class="hljs-number">18</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">name</span> === <span class="hljs-string">&#x27;wangwu&#x27;</span>) &#123;<br>    age = <span class="hljs-number">12</span>;<br>&#125;<br><br><span class="hljs-comment">// 或者</span><br><span class="hljs-keyword">switch</span>(<span class="hljs-built_in">name</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;zhangsan&#x27;</span>:<br>        age = <span class="hljs-number">21</span>;<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;lisi&#x27;</span>:<br>        age = <span class="hljs-number">18</span>;<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;wangwu&#x27;</span>:<br>        age = <span class="hljs-number">12</span>;<br>        <span class="hljs-keyword">break</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样的写法不仅冗余，而且代码执行效率不高，我们可以使用对象的形式简写：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">let name</span> = <span class="hljs-string">&#x27;lisi&#x27;</span>;<br><span class="hljs-attribute">let obj</span> = &#123;<br>    zhangsan: 21,<br>    lisi: 18,<br>    wangwu: 12<br>&#125;;<br><br><span class="hljs-attribute">let age</span> = obj[name] || 18;<br><br></code></pre></td></tr></table></figure><p>以上这种技巧适用于循环判断一次赋值的情况，如果判断过后有较多处理逻辑的还需要使用 if 或 switch 等方法。</p><h3 id="2-使用-Array-from-快速生成数组"><a href="#2-使用-Array-from-快速生成数组" class="headerlink" title="2. 使用 Array.from 快速生成数组"></a>2. 使用 Array.from 快速生成数组</h3><p>一般我们生成一个有规律的数组会使用循环插入的方法，比如使用时间选择插件时，我们可能需要将小时数存放在数组中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">let</span> hours = [];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = 0; i &lt; 24; i++) &#123;<br>    hours.push(i + <span class="hljs-string">&#x27;时&#x27;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果使用 Array.from 我们可以简写为：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">let hours = <span class="hljs-built_in">Array</span>.<span class="hljs-keyword">from</span>(&#123; length: <span class="hljs-number">24</span> &#125;, <span class="hljs-function"><span class="hljs-params">(value, index)</span> =&gt;</span> index + <span class="hljs-string">&#x27;时&#x27;</span>);<br><br></code></pre></td></tr></table></figure><h3 id="3-使用-router-beforeEach-来处理跳转前逻辑"><a href="#3-使用-router-beforeEach-来处理跳转前逻辑" class="headerlink" title="3. 使用 router.beforeEach 来处理跳转前逻辑"></a>3. 使用 router.beforeEach 来处理跳转前逻辑</h3><p>在某些情况下，我们需要在路由跳转前处理一些特定的业务逻辑，比如修改路由跳转、设置 title 等，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>)<br><br><span class="hljs-comment">// 首页</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = (<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">require</span>.<span class="hljs-title function_">ensure</span>([<span class="hljs-string">&#x27;../views/home.vue&#x27;</span>], <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../views/home.vue&#x27;</span>))<br>    &#125;)<br>&#125;)<br><br><span class="hljs-keyword">let</span> base = <span class="hljs-string">`<span class="hljs-subst">$&#123;process.env.BASE_URL&#125;</span>`</span>;<br><br><span class="hljs-keyword">let</span> router =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;history&#x27;</span>,<br>    <span class="hljs-attr">base</span>: base,<br>    <span class="hljs-attr">routes</span>: [<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>,<br>            <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;首页&#x27;</span> &#125;<br>        &#125;,<br>    ]<br>&#125;)<br><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> title = to.<span class="hljs-property">meta</span> &amp;&amp; to.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span>;<br>    <br>    <span class="hljs-keyword">if</span> (title) &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = title; <span class="hljs-comment">// 设置页面 title</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (to.<span class="hljs-property">name</span> === <span class="hljs-string">&#x27;home&#x27;</span>) &#123;<br>    <br>        <span class="hljs-comment">// 拦截并跳转至 page2 单页，$openRouter 方法在第 5 节中封装</span><br>        <span class="hljs-title class_">Vue</span>.$openRouter(&#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;page2&#x27;</span><br>        &#125;);<br>    &#125;<br>    <br>    <span class="hljs-title function_">next</span>();<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br></code></pre></td></tr></table></figure><p>注意最后需要调用 <code>next()</code> 方法执行路由跳转。</p><h3 id="4-使用-v-if-来优化页面加载"><a href="#4-使用-v-if-来优化页面加载" class="headerlink" title="4. 使用 v-if 来优化页面加载"></a>4. 使用 v-if 来优化页面加载</h3><p>在 Vue 页面中，一些模块可能需要用户主动触发才会显示，比如弹框组件等这样的子组件，那么我们可以使用 <code>v-if</code> 来进行按需渲染，没必要一进页面就渲染所有模块。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showModuleB = true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module-b</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isShowModuleB&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">module-b</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> moduleB <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;components/moduleB&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">isShowModuleB</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">        &#125;  </span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">        moduleB</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>这样当 isShowModuleB 为 false 的时候便不会加载该模块下的代码，包括一些耗时的接口调用。当然 v-if 主要适用于代码量较多、用户点击不是很频繁的模块的显示隐藏，同时如果涉及到权限问题的代码都需要使用 v-if，而不是 v-show。</p><h3 id="5-路由跳转尽量使用-name-而不是-path"><a href="#5-路由跳转尽量使用-name-而不是-path" class="headerlink" title="5. 路由跳转尽量使用 name 而不是 path"></a>5. 路由跳转尽量使用 name 而不是 path</h3><p>我们前期配置的路由路径后期难免会进行修改，如果我们页面跳转的地方全是使用的 <code>path</code>，那么我们需要修改所有涉及该 path 的页面，这样不利于项目的维护。而相对于 path，name 使用起来就方便多了，因为其具有唯一性，即使我们修改了 path，还可以使用原来的 <code>name</code> 值进行跳转。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade">this.<span class="hljs-symbol">$router</span>.<span class="hljs-built_in">push</span>(&#123; <br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;page1&#x27;</span><br>&#125;);<br><br><span class="hljs-comment">// 而不是</span><br>this.<span class="hljs-symbol">$router</span>.<span class="hljs-built_in">push</span>(&#123; <br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;page1&#x27;</span><br>&#125;);<br><br></code></pre></td></tr></table></figure><h3 id="6-使用-key-来优化-v-for-循环"><a href="#6-使用-key-来优化-v-for-循环" class="headerlink" title="6. 使用 key 来优化 v-for 循环"></a>6. 使用 key 来优化 v-for 循环</h3><p><code>v-for</code> 是 Vue 提供的基于源数据多次渲染元素或模板块的指令。正因为是数据驱动，所以在修改列表数据的时候，Vue 内部会根据 key 值去判断某个值是否被修改，其会重新渲染修改后的值，否则复用之前的元素。</p><p>这里如果数据中存在唯一表示 id，则推荐使用 id 作为 key，如果没有则可以使用数组的下标 index 作为 key。因为如果在数组中间插入值，其之后的 index 会发生改变，即使数据没变 Vue 也会进行重新渲染，所以最好的办法是使用数组中不会变化且唯一的那一项作为 key 值。例如：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in arr&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item.data</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">arr</span>: [</span></span><br><span class="language-javascript"><span class="language-xml">                &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;a&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;b&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;c&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            ]</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h3 id="7-使用-computed-代替-watch"><a href="#7-使用-computed-代替-watch" class="headerlink" title="7. 使用 computed 代替 watch"></a>7. 使用 computed 代替 watch</h3><p>很多时候页面会出现 <code>watch</code> 的滥用而导致一系列问题的产生，而通常更好的办法是使用 <code>computed</code> 属性，首先需要区别它们有什么区别：</p><ul><li>watch：当监测的属性变化时会自动执行对应的回调函数</li><li>computed：计算的属性只有在它的相关依赖发生改变时才会重新求值</li></ul><p>其实它们在功能上还是有所区别的，但是有时候可以实现同样的效果，而 computed 会更胜一筹，比如：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;firstName&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">fullName</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">fullName2</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        reurn &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">fullName2</span>: <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    </span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 使用 computed</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">computed</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">fullName</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    </span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 使用 watch</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">watch</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">firstName</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">newVal, oldVal</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">fullName2</span> = newVal + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">lastName</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">newVal, oldVal</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">fullName2</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27; &#x27;</span> + newVal;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>上方我们通过对比可以看到，在处理多数据联动的情况下，使用 computed 会更加合理一点。</p> <img src="/2019/08/30/vue/166cafdda21ccc5b.png" class=""><p>computed 监测的是依赖值，依赖值不变的情况下其会直接读取缓存进行复用，变化的情况下才会重新计算；而 watch 监测的是属性值， 只要属性值发生变化，其都会触发执行回调函数来执行一系列操作。</p><h3 id="8-统一管理缓存变量"><a href="#8-统一管理缓存变量" class="headerlink" title="8. 统一管理缓存变量"></a>8. 统一管理缓存变量</h3><p>在项目中或多或少会使用浏览器缓存，比如 sessionStorage 和 localStorage，当一个项目中存在很多这样的缓存存取情况的时候就会变得难以维护和管理，因为其就像全局变量一样散落在项目的各个地方，这时候我们应该将这些变量统一管理起来，放到一个或多个文件中去，比如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">/* types.js */</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> USER_NAME = <span class="hljs-string">&#x27;userName&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> TOKEN = <span class="hljs-string">&#x27;token&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p>在需要存取的时候，直接引用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">USER_NAME</span>, <span class="hljs-variable constant_">TOKEN</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../types.js&#x27;</span><br><br><span class="hljs-variable language_">sessionStorage</span>[<span class="hljs-variable constant_">USER_NAME</span>] = <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-variable language_">localStorage</span>[<span class="hljs-variable constant_">TOKEN</span>] = <span class="hljs-string">&#x27;xxx&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p>使用这种方法的好处在于一旦我们需要修改变量名，直接修改管理文件中的值即可，无需修改使用它的页面，同时这也可以避免命名冲突等问题的出现，这类似于 vuex 中 mutations 变量的管理。</p><h3 id="9-使用-setTimeout-代替-setInterval"><a href="#9-使用-setTimeout-代替-setInterval" class="headerlink" title="9. 使用 setTimeout 代替 setInterval"></a>9. 使用 setTimeout 代替 setInterval</h3><p>一般情况下我们在项目里不建议使用 <code>setInterval</code>，因为其会存在代码的执行间隔比预期小以及 “丢帧” 的现象，原因在于其本身的实现逻辑。很多人会认为 setInterval 中第二个时间参数的作用是经过该毫秒数执行回调方法，其实不然，其真正的作用是<strong>经过该毫秒数将回调方法放置到队列中去</strong>，但是如果队列中存在正在执行的方法，其会等待之前的方法完毕再执行，如果存在还未执行的代码实例，其不会插入到队列中去，也就产生了 “丢帧”。</p><p>而 setTimeout 并不会出现这样的现象，因为每一次调用都会产生了一个新定时器，同时在前一个定时器代码执行完之前，不会向队列插入新的定时器代码。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-regexp">//</span> 该定时器实际会在 <span class="hljs-number">3</span>s 后立即触发下一次回调<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-regexp">//</span> 执行完这里的代码需要 <span class="hljs-number">2</span>s<br>&#125;, <span class="hljs-number">1000</span>);<br><br><span class="hljs-regexp">//</span> 使用 <span class="hljs-built_in">setTimeout</span> 改写，<span class="hljs-number">4</span>秒后触发下一次回调<br>let doSometing = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-regexp">//</span> 执行完这里的代码需要 <span class="hljs-number">2</span>s<br>    <br>    <span class="hljs-built_in">setTimeout</span>(doSometing, <span class="hljs-number">1000</span>);<br>&#125;<br><br>doSometing();<br><br></code></pre></td></tr></table></figure><p>延伸阅读：<a href="https://segmentfault.com/a/1190000011282175">对于“不用setInterval，用setTimeout”的理解</a></p><h3 id="10-不要使用-for-in-循环来遍历数组"><a href="#10-不要使用-for-in-循环来遍历数组" class="headerlink" title="10. 不要使用 for in 循环来遍历数组"></a>10. 不要使用 for in 循环来遍历数组</h3><p>大家应该都知道 <code>for in</code> 循环是用于遍历对象的，但它可以用来遍历数组吗？答案是可以的，因为数组在某种意义上也是对象，但是如果用其遍历数组会存在一些隐患：其会遍历数组原型链上的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> arr) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[key]); <span class="hljs-comment">// 会正常打印 1, 2</span><br>&#125;<br><br><span class="hljs-comment">// 但是如果在 Array 原型链上添加一个方法</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">test</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> arr) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[key]); <span class="hljs-comment">// 此时会打印 1, 2, ƒ () &#123;&#125;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>因为我们不能保证项目代码中不会对数组原型链进行操作，也不能保证引入的第三方库不对其进行操作，所以不要使用 for in 循环来遍历数组。</p><h2 id="结语-8"><a href="#结语-8" class="headerlink" title="结语"></a>结语</h2><p>本文罗列了 10 个项目开发中常见的编码技巧与规范，其实技巧和规范之间本身就是相辅相成的，所以没有分别进行罗列。当然实际的项目开发中存在着很多这样的例子需要大家自己去归纳和整理，比如使用 <code>name</code> 来命名你的组件等。如果你有不错的点子，也可以分享在下方的评论区域中供大家学习。</p><p>拓展阅读：<a href="https://github.com/ecomfe/spec">前端各类规范集合</a></p><h2 id="思考-作业-7"><a href="#思考-作业-7" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>可以使用哪些技巧来实现数组的循环遍历、去重等？</p></li><li><p>在 Vue 项目中如何使用 <code>ESLint</code> 来规范 JS 代码的编写？</p></li><li><p>.vue 单文件组件中如何进行代码的格式化？</p></li></ul><h1 id="开发指南篇-2：学会编写可复用性模块"><a href="#开发指南篇-2：学会编写可复用性模块" class="headerlink" title="开发指南篇 2：学会编写可复用性模块"></a>开发指南篇 2：学会编写可复用性模块</h1><p>在生活中，重复的机械劳动会消耗我们的时间和精力，提高生产成本，降低工作效率。同样，在代码世界中，编写重复的代码会导致代码的冗余，页面性能的下降以及后期维护成本的增加。由此可见将重复的事情复用起来是提高生产效率、降低维护成本的不二之选。</p><p>在 Vue 项目中，每一个页面都可以看作是由大大小小的模块构成的，即便是一行代码、一个函数、一个组件都可以看作是一个个自由的模块。那么提高代码的复用性的关键便在于编写可复用的模块，也就是编写可复用的代码、函数和组件等。</p><h2 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h2><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">let person = [];<br><br>for (let i = 0; i &lt; data.obj.items.length; i++) &#123;<br>    <span class="hljs-attribute">person.push(&#123;</span><br><span class="hljs-attribute">        name</span>: data<span class="hljs-variable">.obj</span><span class="hljs-variable">.items</span>[i]<span class="hljs-variable">.name</span>,<br>        age: data<span class="hljs-variable">.obj</span><span class="hljs-variable">.items</span>[i]<span class="hljs-variable">.age</span><br>    &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>不知道上方代码给你的第一印象是什么？总之给我的印象是糟糕的，因为出现了重复性的代码片段 <code>data.obj.items</code>，可能这样的代码在我们团队开发中随处可见，这也说明了重复编码现象其实无处不在。</p><p>面对自己编写的代码，我们应该保持一颗去重的心，发现重复的地方就相当于找到了可以复用的模块。在不复用的情况下，上述代码一旦需要修改变量 <code>items</code> 为 <code>lists</code>，那么我们就得修改 3 处地方，不知不觉就增加了维护成本。而到时候往往修改你代码的人并不是你自己，所以对自己好点，对他人也会好点。复用后的代码如下：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">let</span> person = [];<br><span class="hljs-built_in">let</span> <span class="hljs-built_in">values</span> = data.obj.items;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">values</span>.<span class="hljs-built_in">length</span>; i++) &#123;<br>    person.<span class="hljs-built_in">push</span>(&#123;<br>        name: <span class="hljs-built_in">values</span>[i].name,<br>        age: <span class="hljs-built_in">values</span>[i].age<br>    &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们通过将 data.obj.items 的值赋值给变量 values 来实现了复用，此时修改 <code>items</code> 为 <code>lists</code> 的话我们只需修改一处地方即可，不管是维护成本还是代码可读性上，复用的优势都显而易见。</p><h2 id="封装成一个函数"><a href="#封装成一个函数" class="headerlink" title="封装成一个函数"></a>封装成一个函数</h2><p>除了使用变量的赋值缓存使用来解决数据的重复读取外，我们在开发过程中重复性更多的也许是功能点的重复，比如：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tempalte</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;str1&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;str2&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">str1.slice</span>(<span class="hljs-name">1</span>).toUpperCase() &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">str2.slice</span>(<span class="hljs-name">1</span>).toUpperCase() &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>上述代码的重复功能点在于截取输入框中第二个字符开始到最后的值并把它们转化成大写字母，像这样很简单的操作虽然重复使用也不会出现太大的问题，但是如果是代码量较多的操作呢？重复书写相同功能的代码是一种不经过大脑思考的行为，我们需要对其进行优化，这里我们可以把功能点封装成一个函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-title function_">sliceUpperCase</span>(<span class="hljs-params">val</span>) &#123;<br>            <span class="hljs-keyword">return</span> val.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">toUpperCase</span>()<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如此我们只要在用到该方法的地方调用即可，将值传入其中并返回新值。当然像在双花括号插值和 v-bind 表达式中重复的功能点我们可以封装成过滤器比较合适：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 单文件组件注册过滤器</span><br>filters: &#123;<br>    sliceUpperCase(<span class="hljs-keyword">val</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">val</span>.slice(<span class="hljs-number">1</span>).toUpperCase()<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 全局注册过滤器</span><br>Vue.filter(<span class="hljs-string">&#x27;sliceUpperCase&#x27;</span>, function (<span class="hljs-keyword">val</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">val</span>.slice(<span class="hljs-number">1</span>).toUpperCase()<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>然后在 html 中使用“管道”符进行过滤：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">str1</span> | toUpperCase &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">str2</span> | toUpperCase &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>这样我们就把重复的功能性代码封装成了函数，而不管是过滤器还是正常的方法封装，其本质都是函数的封装。</p><h2 id="封装成一个组件"><a href="#封装成一个组件" class="headerlink" title="封装成一个组件"></a>封装成一个组件</h2><p>相比较于函数的封装，规模更大一点的便是组件的封装，组件包含了模板、脚本以及样式的代码，在实际开发中组件的使用频率也是非常大的，我们项目中的每一个页面其实都可以看作是一个父组件，其可以包含很多子组件，子组件通过接收父组件的值来渲染页面，父组件通过响应子组件的回调来触发事件。</p><p>封装一个组件主要包含两种方式，一种是最常见的整体封装，用户通过改变数据源来呈现不同的页面状态，代码结构不可定制化。例如：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span>&gt;<br>    &lt;<span class="hljs-keyword">my</span>-component data=<span class="hljs-string">&quot;我是父组件传入子组件的数据&quot;</span>&gt;&lt;/<span class="hljs-keyword">my</span>-component&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br><br></code></pre></td></tr></table></figure><p>另一种便是自定义封装，也就是插槽(slot)，我们可以开放一部分槽位给父组件，使其能够进行一定程度的定制化，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">my-component</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;我是父组件传入子组件的数据&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;customize&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这是定制化的数据<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>在 myComponent 组件中我们便可以接收对应的 slot：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">data</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;customize&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>这里我们通过定义 slot 标签的 name 值为 customize 来接收父组件在使用该组件时在 template 标签上定义的 slot&#x3D;”customize” 中的代码，不同父组件可以定制不同的 slot 代码来实现差异化的插槽。最终渲染出来的代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是父组件传入子组件的数据<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这是定制化的数据<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>这样我们就完成了一个小型组件的封装，将共用代码封装到组件中去，页面需要引入的时候直接使用 import 并进行相应注册即可，当然你也可以进行全局的引入：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> myComponent <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../myComponent.vue&#x27;</span><br><br><span class="hljs-comment">// 全局</span><br>Vue.component(<span class="hljs-string">&#x27;my-component&#x27;</span>, myComponent)<br><br></code></pre></td></tr></table></figure><h2 id="封装成一个插件"><a href="#封装成一个插件" class="headerlink" title="封装成一个插件"></a>封装成一个插件</h2><p>在某些情况下，我们封装的内容可能不需要使用者对其内部代码结构进行了解，其只需要熟悉我们提供出来的相应方法和 api 即可，这需要我们更系统性的将公用部分逻辑封装成插件，来为项目添加全局功能，比如常见的 loading 功能、弹框功能等。</p><p>Vue 提供给了我们一个 install 方法来编写插件，使用该方法中的第一个 Vue 构造器参数可以为项目添加全局方法、资源、选项等。比如我们可以给组件添加一个简单的全局调用方法来实现插件的编写：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">/* toast.js */</span><br>import ToastComponent from <span class="hljs-string">&#x27;./toast.vue&#x27;</span> <span class="hljs-comment">// 引入组件</span><br><br>let <span class="hljs-symbol">$vm</span><br><br>export default &#123;    <br>    install(Vue, options) &#123;<br>        <br>        <span class="hljs-comment">// 判断实例是否存在</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-symbol">$vm</span>) &#123;            <br>            const ToastPlugin = Vue.extend(ToastComponent); <span class="hljs-comment">// 创建一个“扩展实例构造器”</span><br>            <br>            <span class="hljs-comment">// 创建 $vm 实例</span><br>            <span class="hljs-symbol">$vm</span> = <span class="hljs-keyword">new</span> ToastPlugin(&#123;                <br>                <span class="hljs-attr">el</span>: document.createElement(<span class="hljs-string">&#x27;div&#x27;</span>)  <span class="hljs-comment">// 声明挂载元素          </span><br>            &#125;);            <br>            <br>            document.body.appendChild(<span class="hljs-symbol">$vm</span>.<span class="hljs-symbol">$el</span>); <span class="hljs-comment">// 把 toast 组件的 DOM 添加到 body 里</span><br>        &#125; <br>        <br>        <span class="hljs-comment">// 给 toast 设置自定义文案和时间</span><br>        let toast = <span class="hljs-function">(<span class="hljs-params"><span class="hljs-built_in">text</span>, duration</span>) =&gt;</span> &#123;<br>            <span class="hljs-symbol">$vm</span>.<span class="hljs-built_in">text</span> = <span class="hljs-built_in">text</span>;<br>            <span class="hljs-symbol">$vm</span>.duration = duration;<br>            <br>            <span class="hljs-comment">// 在指定 duration 之后让 toast 消失</span><br>            setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>                <span class="hljs-symbol">$vm</span>.isShow = <span class="hljs-literal">false</span>;  <br>            &#125;, <span class="hljs-symbol">$vm</span>.duration);<br>        &#125;<br>        <br>        <span class="hljs-comment">// 判断 Vue.$toast 是否存在</span><br>        <span class="hljs-keyword">if</span> (!Vue.<span class="hljs-symbol">$toast</span>) &#123;            <br>            Vue.<span class="hljs-symbol">$toast</span> = toast;        <br>        &#125;        <br>        <br>        Vue.prototype.<span class="hljs-symbol">$toast</span> = Vue.<span class="hljs-symbol">$toast</span>; <span class="hljs-comment">// 全局添加 $toast 事件</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="/2019/08/30/vue/166cb0b518f4c53c.png" class=""><p>成功编写完插件的 JS 脚本后，我们在入口文件中需要通过 Vue.use() 来注册一下该插件：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> Toast <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/widgets/toast/toast.js&#x27;</span><br><br>Vue.use(Toast); <span class="hljs-comment">// 注册 Toast</span><br><br></code></pre></td></tr></table></figure><p>最后我们在需要调用它的地方直接传入配置项使用即可，比如：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-built_in">this</span>.<span class="hljs-variable">$toast</span>(<span class="hljs-string">&#x27;Hello World&#x27;</span>, <span class="hljs-number">2000</span>);<br><br></code></pre></td></tr></table></figure><p>当然你也可以不使用 install 方法来编写插件，直接采用导出一个封装好的实例方法并将其挂载到 Vue 的原型链上来实现相同的功能。</p><p>更详细的编写插件和实例的方法可以参考我之前写的一篇文章：<a href="https://mp.weixin.qq.com/s/Aqgh7Dkialhm9v8U0wBuqg">Vue 插件编写与实战</a></p><h2 id="结语-9"><a href="#结语-9" class="headerlink" title="结语"></a>结语</h2><p>本文讲解了编写可复用性模块的常见方法，通过出现了重复代码 -&gt; 封装成一个变量 -&gt; 封装成一个函数 -&gt; 封装成一个组件 -&gt; 封装成一个插件，一步步将重复代码进行分析和复用。而与重复代码做斗争是一个持久性的过程，我们需要时刻保持一种“强迫症”的心态去整理复用项目中的重复代码，做好编码的严谨和自律。</p><h2 id="思考-作业-8"><a href="#思考-作业-8" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>在 Vue 中如何添加全局自定义指令？</p></li><li><p>在 vue 路由切换时如何全局隐藏某个插件？比如文中的 toast</p></li><li><p>如何实现一个表单验证插件？需要运用到哪些知识？</p></li></ul><h1 id="开发指南篇-3：合理划分容器组件与展示组件"><a href="#开发指南篇-3：合理划分容器组件与展示组件" class="headerlink" title="开发指南篇 3：合理划分容器组件与展示组件"></a>开发指南篇 3：合理划分容器组件与展示组件</h1><p>上篇文章我们提到了组件的概念，组件是目前模块化、组件化开发模式中必不可少的单元形式，那么除了其概念和可复用性外，我们对它的职能划分了解多少呢？</p><p>本文将立足 Vue 组件的职能来谈谈我个人对于其划分的理解，唯有了解不同类型组件的职能才能编写出可维护、低耦合的前端代码。</p><h2 id="组件的职能划分"><a href="#组件的职能划分" class="headerlink" title="组件的职能划分"></a>组件的职能划分</h2><p>如果要将 Vue 组件按照职能划分，我们可以将其分为两种类型：容器组件和展示组件。</p><p>容器组件和展示组件的概念来自于 <code>Redux</code> 文档，那么首先什么是容器组件呢？顾名思义，它是一个容器性质的组件，我们可以把它理解为最外层的父组件，也就是最顶层的组件，一般我们把它放置在 <code>views</code> 文件夹下，其功能主要用于做数据提取与实现公共逻辑，然后渲染对应的子组件。</p><p>另一类组件叫做展示组件，字面意思就是主要用于做展示的组件，其主要功能是负责接收从容器组件传输过来的数据并在页面上渲染，实现其内部独有的功能逻辑。</p><p>一个页面中容器组件与展示组件的关系如下图所示：</p> <img src="/2019/08/30/vue/16533670555c3f00.png" class=""><p>上图我们以博客首页为例，容器组件就是整个首页最外层的父组件，而展示组件就包含了导航栏、文章列表、底部等子组件，代码层面如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">navigation</span> @<span class="hljs-attr">count</span>=<span class="hljs-string">&quot;countFn&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">navigation</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">:list</span>=<span class="hljs-string">&quot;articleList&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">foot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">import</span> &#123; mapActions, mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">SET_BLOG_DATA</span>(); <span class="hljs-comment">// 调用接口获取数据</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">            ...<span class="hljs-title function_">mapGetters</span>([<span class="hljs-string">&#x27;articleList&#x27;</span>]), <span class="hljs-comment">// 监听 state</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            ...<span class="hljs-title function_">mapActions</span>([<span class="hljs-string">&#x27;SET_BLOG_DATA&#x27;</span>, <span class="hljs-string">&#x27;SET_NAV_COUNT&#x27;</span>]),</span><br><span class="language-javascript">            <span class="hljs-title function_">countFn</span>(<span class="hljs-params">item</span>) &#123;</span><br><span class="language-javascript">            </span><br><span class="language-javascript">                <span class="hljs-comment">// 调用接口存储导航点击次数并跳转，通过派发 action 的形式来发起 state 变化</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">SET_NAV_COUNT</span>(&#123; <span class="hljs-attr">type</span>: item.<span class="hljs-property">type</span> &#125;);</span><br><span class="language-javascript">                </span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">name</span>: item.<span class="hljs-property">route</span>&#125;);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>以上是首页容器组件中的主要代码，其主要做了两件事情：数据的传递和回调的处理，当然还可以包括处理一些该页面中不属于任何一个展示组件的方法，比如校验登录状态。在一个容器组件中可以包含多个展示组件，下面我们来看一下展示组件 <code>Navigation</code> 中的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> </span><br><span class="hljs-tag">            <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in nav&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span><br><span class="hljs-tag">            @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;goNav(item)&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;item.name&quot;</span></span><br><span class="hljs-tag">        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">nav</span>: [&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;首页&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">route</span>: <span class="hljs-string">&#x27;index&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;index&#x27;</span></span><br><span class="language-javascript">                &#125;, &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;文章&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">route</span>: <span class="hljs-string">&#x27;article&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;article&#x27;</span> </span><br><span class="language-javascript">                &#125;, &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;关于&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">route</span>: <span class="hljs-string">&#x27;about&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;about&#x27;</span> </span><br><span class="language-javascript">                &#125;]</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">goNav</span>(<span class="hljs-params">item</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;count&#x27;</span>, item); <span class="hljs-comment">// 触发回调</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><code>Navigation</code> 导航组件只负责自己内部的数据渲染和回调逻辑，对于存储每个导航的点击量及跳转逻辑来说，作为展示组件这并不是其所关心的，所以我们需要通过触发容器组件回调的方式来实现。再来看一下展示组件 <code>Article</code> 的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> </span><br><span class="hljs-tag">            <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span><br><span class="hljs-tag">            @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;goPage(item.id)&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;item.title&quot;</span></span><br><span class="hljs-tag">        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">props</span>: &#123;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">            <span class="hljs-comment">// 接收容器组件数据</span></span><br><span class="language-javascript">            <span class="hljs-attr">list</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">default</span>: [],</span><br><span class="language-javascript">                <span class="hljs-attr">type</span>: <span class="hljs-title class_">Array</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>展示组件 Article 中动态的数据通过 <code>props</code> 从父组件中获取，其内部只处理文章列表的渲染工作，这样很好的将 UI 层面和应用层面进行了分离，便于今后该组件的复用。</p><p>此外 <code>Foot</code> 组件为纯静态组件，其只负责内部数据的渲染，不接收外部的数据和回调方法，这里就不做介绍了。</p><p>从以上代码示例中我们不难发现容器组件和展示组件的主要区别和注意点：</p><p>展示组件</p><p>容器组件</p><p>作用</p><p>描述如何展现（骨架、样式）</p><p>描述如何运行（数据获取、状态更新）</p><p>是否使用 Vuex</p><p>否</p><p>是</p><p>数据来源</p><p>props</p><p>监听 Vuex state</p><p>数据修改</p><p>从 props 调用回调函数</p><p>向 Vuex 派发 actions</p><p>相比较如果上述的博客首页不做组件的划分，全部逻辑都放在一个组件中，那么必然会导致代码的臃肿和难以维护，而一旦划分了容器组件和展示组件，后期如果哪个页面同样需要展示文章列表，我们只需要传递不同的数据直接复用即可。</p><h2 id="组件的层次结构"><a href="#组件的层次结构" class="headerlink" title="组件的层次结构"></a>组件的层次结构</h2><p>了解了组件职能的划分后，我们再来看一下组件的层次结构。关于组件的层次，一般页面中不宜嵌套超过 3 层的组件，因为超过 3 层后父子组件的通信就会变得相对困难，不利于项目的开发和维护。3 层结构的容器组件与展示组件的数据传递如下：</p> <img src="/2019/08/30/vue/165387907893eb84.png" class=""><p>可见组件的层次越深数据传递的过程就会变得越复杂，当然这取决于你如何划分容器组件和展示组件，比如我们可以将上述博客首页换一种划分方式：</p> <img src="/2019/08/30/vue/1653884e4abef22f.png" class=""><p>上图我们页面中存在 3 个容器组件，每个容器组件又可以包含各自的展示组件，这样一定程度上可以减少组件的层次嵌套深度。当然展示组件中也可以包含对应的容器组件来解决数据传输的问题：</p> <img src="/2019/08/30/vue/165388d3df0a32c5.png" class=""><p>这样展示组件 B 下面的容器组件 C 便可以不依赖于容器组件 A 的数据，其可以单独的进行数据获取和状态更新。</p><p>而对于那些你不知道应该划分为容器组件和展示组件的组件，比如一些耦合度较高的组件，那么你可以暂时归类到其他组件中，混用容器和展示，随着日后功能的逐渐清晰，我们再将其进行划分。</p><h2 id="结语-10"><a href="#结语-10" class="headerlink" title="结语"></a>结语</h2><p>本文主要介绍了容器组件和展示组件的概念和层次划分，在编码上，容器组件和展示组件各司其职，它们将容器和展示更好的分离，提高了组件的重用度，降低了功能上的耦合度，为高效、高质量的代码开发奠定了基础。</p><h2 id="思考-作业-9"><a href="#思考-作业-9" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>如果你了解 React，那么试想一下在 React 中展示组件与容器组件有哪些异同点？</p></li><li><p>如果需要你对掘金首页进行组件的划分，你会如何划分其结构和层次？</p></li><li><p>在子组件的 <code>props</code> 中，如何动态的设置默认值？</p></li></ul><h1 id="开发指南篇-4：数据驱动与拼图游戏"><a href="#开发指南篇-4：数据驱动与拼图游戏" class="headerlink" title="开发指南篇 4：数据驱动与拼图游戏"></a>开发指南篇 4：数据驱动与拼图游戏</h1><p>数据驱动是 Vue 框架的核心特性之一，也是 Vue 响应式原理的具体体现，相信大家对其应该深有体会，尤其是在操作数据来触发页面更新的时候。</p><p>为了让大家更加了解数据驱动的理念，并解决使用过程中可能出现的一系列问题，本文将结合比较常见和简单的 “拼图游戏” 来展示 Vue 数据驱动的魅力所在。</p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>首先我们先来看一下实现的 “拼图游戏” 的动态效果：</p> <img src="/2019/08/30/vue/16580710e190e86c.gif" class=""><p>在不操作 <code>DOM</code> 的情况下实现以上功能其实需要我们对 Vue 数据驱动及数据可视化有一个非常清楚的认知，在操作数据的同时驱动可视化界面的还原。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>接下来我们来看一下实现该拼图游戏的功能点及关键代码：</p><h3 id="游戏面板的构建"><a href="#游戏面板的构建" class="headerlink" title="游戏面板的构建"></a>游戏面板的构建</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!-- HTML 部分 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;puzzle-wrap&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#x27;puzzle&#x27;: true, &#x27;puzzle-empty&#x27;: !puzzle&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(puzzle, index) in puzzles&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;puzzle&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 数据部分</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">puzzles</span>: <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">15</span> &#125;, <span class="hljs-function">(<span class="hljs-params">value, index</span>) =&gt;</span> index + <span class="hljs-number">1</span>)<br>        &#125;<br>    &#125;,<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上方我们使用 <code>v-for</code> 循环构建了从 1 ～ 15 按顺序排列的方块格子，也就是拼图完成时候的顺序，但是拼图游戏一开始数字的顺序应该是无序的，也是随机打乱的，那么我们怎么实现呢？可以使用下方的随机排列函数：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shuffle</span><span class="hljs-params">(arr)</span></span> &#123;<br>    let <span class="hljs-built_in">len</span> = arr.length<br>    <br>    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span> - <span class="hljs-number">1</span>; i++) &#123;<br>        let idx = Math.<span class="hljs-built_in">floor</span>(Math.<span class="hljs-built_in">random</span>() * (<span class="hljs-built_in">len</span> - i))<br>        let temp = arr[idx]<br>        arr[idx] = arr[<span class="hljs-built_in">len</span> - i - <span class="hljs-number">1</span>]<br>        arr[<span class="hljs-built_in">len</span> - i - <span class="hljs-number">1</span>] = temp<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> arr<br>&#125;<br><br></code></pre></td></tr></table></figure><p>该函数中我们使用 <code>Math.random()</code> 来返回 0 和 1 之间的伪随机数，可能为 0，但总是小于1，[0, 1)，而通过这一特性我们可以实现生成 n-m，包含 n 但不包含 m 的整数，具体步骤如下：</p><ul><li>第一步算出 <code>m-n</code> 的值，假设等于 w</li><li>第二步 <code>Math.random() * w</code></li><li>第三步 <code>Math.random() * w + n</code></li><li>第四步 <code>Math.floor(Math.random() * w + n)</code></li></ul><p>在 <code>shuffle</code> 函数中 n 值永远是 0，而 w（即 len - i） 值随着循环 i 值的变大而不断减小。</p><blockquote><p>在上面的算法里，我们每一次循环从前 len - i 个元素里随机一个位置，将这个元素和第 len - i 个元素进行交换，迭代直到 i &#x3D; len - 1 为止。</p></blockquote><p>这一便实现了数组的随机打乱。最后我们需要在数组末尾追加一个空值来显示唯一一个空白格子：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">this</span>.puzzles.<span class="hljs-keyword">push</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><br></code></pre></td></tr></table></figure><h3 id="交换方块位置"><a href="#交换方块位置" class="headerlink" title="交换方块位置"></a>交换方块位置</h3><p>实现随机数字后，当我们点击方块，如果其上下左右存在为空的格子就需要将其进行交换，而由于是数据驱动界面，这里我们便需要交换两者在数组中的位置来实现：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">export default &#123;<br>    methods: &#123;<br>        <br>        <span class="hljs-comment">// 点击方块</span><br>        moveFn(index) &#123;<br>            let puzzles = <span class="hljs-keyword">this</span>.puzzles<br><br>            <span class="hljs-comment">// 获取点击位置上下左右的值</span><br>            let leftNum = <span class="hljs-keyword">this</span>.puzzles[index - <span class="hljs-number">1</span>],<br>                rightNum = <span class="hljs-keyword">this</span>.puzzles[index + <span class="hljs-number">1</span>],<br>                topNum = <span class="hljs-keyword">this</span>.puzzles[index - <span class="hljs-number">4</span>],<br>                bottomNum = <span class="hljs-keyword">this</span>.puzzles[index + <span class="hljs-number">4</span>]<br><br>            <span class="hljs-comment">// 和为空的位置交换数值</span><br>            <span class="hljs-keyword">if</span> (leftNum === <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; index % <span class="hljs-number">4</span>) &#123;<br>                <span class="hljs-keyword">this</span>.setPuzzle(index, -<span class="hljs-number">1</span>)<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rightNum === <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; <span class="hljs-number">3</span> !== index % <span class="hljs-number">4</span>) &#123;<br>                <span class="hljs-keyword">this</span>.setPuzzle(index, <span class="hljs-number">1</span>)<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (topNum === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>                <span class="hljs-keyword">this</span>.setPuzzle(index, -<span class="hljs-number">4</span>)<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bottomNum === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>                <span class="hljs-keyword">this</span>.setPuzzle(index, <span class="hljs-number">4</span>)<br>            &#125;<br>        &#125;,<br><br>        <span class="hljs-comment">// 设置数组值</span><br>        setPuzzle(index, num) &#123;<br>            let curNum = <span class="hljs-keyword">this</span>.puzzles[index]<br>            <br>            <span class="hljs-keyword">this</span>.$<span class="hljs-keyword">set</span>(<span class="hljs-keyword">this</span>.puzzles, index + num, curNum)<br>            <span class="hljs-keyword">this</span>.$<span class="hljs-keyword">set</span>(<span class="hljs-keyword">this</span>.puzzles, index, <span class="hljs-string">&#x27;&#x27;</span>)<br>        &#125;,<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>由于是 16 宫格的拼图，所以我们在点击获取位置的时候需要考虑边界情况，比如第 4 个格子为空，我们点击第 5 个格子不应该交换它们，因为在界面上第 4 个格子不在第 5 个格子的左侧，所以我们使用 <code>index % 4</code> 的方法来进行边界的判断，同时使用 Vue 提供的 <code>$set</code> 方法来将响应属性添加到数组上。</p><h3 id="校验是否过关"><a href="#校验是否过关" class="headerlink" title="校验是否过关"></a>校验是否过关</h3><p>最后我们需要校验游戏是否过关，我们只需要在最后一个格子为空时去进行校验即可：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.puzzles[<span class="hljs-number">15</span>] === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>    const <span class="hljs-keyword">new</span><span class="hljs-type">Puzzles</span> = <span class="hljs-built_in">this</span>.puzzles.slice(<span class="hljs-number">0</span>, <span class="hljs-number">15</span>)<br>    const isPass = <span class="hljs-keyword">new</span><span class="hljs-type">Puzzles</span>.every((e, i) =&gt; e === i + <span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">if</span> (isPass) &#123;<br>        alert (<span class="hljs-string">&#x27;恭喜，闯关成功！&#x27;</span>)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们使用数组的 <code>every</code> 方法来简化代码的复杂度，当所有数字大小和对应的数组下标 + 1 相吻合时即会返回 <code>true</code>。</p><p>如此我们便完成了一个简单拼图游戏的功能。</p><h2 id="盲点及误区"><a href="#盲点及误区" class="headerlink" title="盲点及误区"></a>盲点及误区</h2><p>在实现拼图游戏后，有些同学可能会存在一些疑惑，比如：数组赋值为什么要用 $set 方法？数组随机打乱为什么不用 sort 排序呢？下面便来进行讲解：</p><h3 id="为什么要用-set-方法"><a href="#为什么要用-set-方法" class="headerlink" title="为什么要用 $set 方法"></a>为什么要用 $set 方法</h3><p>大家应该都知道如果不用 <code>$set</code> 方法我们可以直接通过操作数组索引的形式对数组进行赋值，从而交换拼图的中两者的数据：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 设置数组值</span><br><span class="hljs-function"><span class="hljs-title">setPuzzle</span><span class="hljs-params">(index, num)</span></span> &#123;<br>    let curNum = this<span class="hljs-selector-class">.puzzles</span><span class="hljs-selector-attr">[index]</span><br>    <br>    this<span class="hljs-selector-class">.puzzles</span><span class="hljs-selector-attr">[index + num]</span> = curNum<br>    this<span class="hljs-selector-class">.puzzles</span><span class="hljs-selector-attr">[index]</span> = <span class="hljs-string">&#x27;&#x27;</span><br>    <br>    <span class="hljs-comment">// this.$set(this.puzzles, index + num, curNum)</span><br>    <span class="hljs-comment">// this.$set(this.puzzles, index, &#x27;&#x27;)</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>但是你会发现这样做数据是改变了，但是页面并没有因此重新渲染，这是为什么呢？其实 Vue 官方已经给出了明确的答案：</p><blockquote><p>由于 JavaScript 的限制，Vue 不能检测以下变动的数组：</p><ul><li>当你利用索引直接设置一个项时，例如：vm.items[indexOfItem] &#x3D; newValue</li><li>当你修改数组的长度时，例如：vm.items.length &#x3D; newLength</li></ul></blockquote><p>我们这里使用的便是第一种利用索引的方式，由于 Vue 检测不到数组变动，因此页面便无法重绘。同样 Vue 也不能检测对象属性的添加或删除，需要使用 <code>Vue.set(object, key, value)</code> 方法来实现。</p><p>其实还有一种比较取巧的方式便是强制重新渲染 Vue 实例来解决这一问题：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 设置数组值</span><br><span class="hljs-function"><span class="hljs-title">setPuzzle</span><span class="hljs-params">(index, num)</span></span> &#123;<br>    let curNum = this<span class="hljs-selector-class">.puzzles</span><span class="hljs-selector-attr">[index]</span><br>    <br>    this<span class="hljs-selector-class">.puzzles</span><span class="hljs-selector-attr">[index + num]</span> = curNum<br>    this<span class="hljs-selector-class">.puzzles</span><span class="hljs-selector-attr">[index]</span> = <span class="hljs-string">&#x27;&#x27;</span><br>    <br>    this.<span class="hljs-variable">$forceUpdate</span>() <span class="hljs-comment">// 迫使 Vue 实例重新渲染</span><br>    <br>    <span class="hljs-comment">// this.$set(this.puzzles, index + num, curNum)</span><br>    <span class="hljs-comment">// this.$set(this.puzzles, index, &#x27;&#x27;)</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>上方我们使用了 Vue 提供的 <code>$forceUpdate</code> 方法迫使 Vue 实例重新渲染，这样改变的数据就会被更新的页面中去。但是最好不要这样操作，因为这会导致 Vue 重新遍历此对象所有的属性，一定程度上会影响页面的性能。</p><h3 id="为什么不用-sort-排序"><a href="#为什么不用-sort-排序" class="headerlink" title="为什么不用 sort 排序"></a>为什么不用 sort 排序</h3><p>其实 sort 方法也能够实现数组的随机排序，代码如下：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">let puzzleArr = <span class="hljs-built_in">Array</span>.<span class="hljs-keyword">from</span>(&#123; length: <span class="hljs-number">15</span> &#125;, <span class="hljs-function"><span class="hljs-params">(value, index)</span> =&gt;</span> index + <span class="hljs-number">1</span>);<br><br><span class="hljs-regexp">//</span> 随机打乱数组<br>puzzleArr = puzzleArr.sort(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.random() - <span class="hljs-number">0.5</span><br>&#125;);<br><br></code></pre></td></tr></table></figure><p>我们通过使用 <code>Math.random()</code> 的随机数减去 0.5 来返回一个大于、等于或小于 0 的数，sort 方法会根据接收到的值来对相互比较的数据进行升序或是降序排列。</p><p>但是由于 JavaScript 内置排序算法的缺陷性，使用 sort 排序的结果并不随机分布，经过大量的测试你会发现<strong>越大的数字出现在越后面的概率越大</strong>。</p><p>由于本文并非是一篇介绍 sort 排序的文章，关于论证其缺陷性的话题这里就不进行详细展开了，感兴趣的同学可以进一步进行探究。</p><h2 id="结语-11"><a href="#结语-11" class="headerlink" title="结语"></a>结语</h2><p>本文实例是基于我之前写的一篇关于利用 Vue.js 实现拼图游戏的文章上进行了改进和优化，希望通过这样一个小游戏来强化大家对于 Vue 数据驱动的理解。相比操作 DOM 元素，操作数据其实更加的便捷和快速，可以使用较少的代码来实现一些较为复杂的逻辑。</p><p>具体实例代码可以参考：<a href="https://github.com/luozhihao/vue-project-code/blob/ea7294370af888084be41c10c914b4fedbf3f400/ui-framework-project/src/views/demo/puzzle.vue">puzzle</a></p><h2 id="思考-作业-10"><a href="#思考-作业-10" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>Vue 中监听数据变化的原理是什么？是通过何种方式实现的？</p></li><li><p>如何论证原生 JS 中 sort 排序后越大的数字出现在越后面的概率越大？</p></li><li><p>如何使用 <code>Math.random()</code> 生成 n-m，不包含 n 但包含 m 的整数？</p></li></ul><h1 id="开发指南篇-5：Vue-API-盲点解析"><a href="#开发指南篇-5：Vue-API-盲点解析" class="headerlink" title="开发指南篇 5：Vue API 盲点解析"></a>开发指南篇 5：Vue API 盲点解析</h1><p>在了解了一些实用的开发技巧和编码理念后，我们在项目的开发过程中难免也会遇到因为不熟悉 Vue API 而导致的技术问题，而往往就是这样的一些问题消耗了我们大量的开发时间，造成代码可读性下降、功能紊乱甚至 <code>bug</code> 量的增加，其根本原因还是自己对 Vue API 的 “<strong>无知</strong>”。</p><p>本文将介绍 Vue 项目开发中比较难以理解并可能被你忽视的 API，唯有知己知彼，才能百战不殆。</p><h2 id="API-解析"><a href="#API-解析" class="headerlink" title="API 解析"></a>API 解析</h2><h3 id="使用-performance-开启性能追踪"><a href="#使用-performance-开启性能追踪" class="headerlink" title="使用 performance 开启性能追踪"></a>使用 performance 开启性能追踪</h3><p><code>performance API</code> 是 Vue 全局配置 API 中的一个，我们可以使用它来进行网页性能的追踪，我们可以在入口文件中添加：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> (process.env.NODE_ENV !== <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>    Vue.<span class="hljs-built_in">config</span>.performance = <span class="hljs-literal">true</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>来开启这一功能，该 API（2.2.0 新增）功能只适用于开发模式和支持 <code>performance.mark</code> API 的浏览器上，开启后我们可以下载 <a href="https://chrome.google.com/webstore/search/vue%20performance%20devtool">Vue Performance Devtool</a> 这一 chrome 插件来看查看各个组件的加载情况，如图：</p><img src="/2019/08/30/vue/165100a377b1bac9.png" class=""><p>从中我们可以清晰的看到页面组件在每个阶段的耗时情况，而针对耗时比较久的组件，我们便可以对其进行相应优化。</p><p>而其在 Vue 源码中主要使用了 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Performance">window.performance</a> 来获取网页性能数据，其中包含了 <code>performance.mark</code> 和 <code>performance.measure</code>。</p><ul><li>performance.mark 主要用于创建标记</li><li>performance.measure 主要用于记录两个标记的时间间隔</li></ul><p>例如：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby">performance.mark(<span class="hljs-string">&#x27;start&#x27;</span>); <span class="hljs-regexp">//</span> 创建 start 标记<br>performance.mark(<span class="hljs-string">&#x27;end&#x27;</span>); <span class="hljs-regexp">//</span> 创建 <span class="hljs-keyword">end</span> 标记<br><br>performance.measure(<span class="hljs-string">&#x27;output&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>, <span class="hljs-string">&#x27;end&#x27;</span>); <span class="hljs-regexp">//</span> 计算两者时间间隔<br><br>performance.getEntriesByName(<span class="hljs-string">&#x27;output&#x27;</span>); <span class="hljs-regexp">//</span> 获取标记，返回值是一个数组，包含了间隔时间数据<br><br></code></pre></td></tr></table></figure><p>熟练的使用 performance 我们可以查看并分析网页的很多数据，为我们项目优化提供保障。除了上述介绍的两个方法，我们还可以使用 <code>performance.timing</code> 来计算页面各个阶段的加载情况，关于 performance.timing 的介绍可以查看我之前写的一篇文章：<a href="https://www.cnblogs.com/luozhihao/p/4681564.html">利用 Navigation Timing 测量页面加载时间</a></p><h3 id="使用-errorHandler-来捕获异常"><a href="#使用-errorHandler-来捕获异常" class="headerlink" title="使用 errorHandler 来捕获异常"></a>使用 errorHandler 来捕获异常</h3><p>在浏览器异常捕获的方法上，我们熟知的一般有：<code>try ... catch</code> 和 <code>window.onerror</code>，这也是原生 JavaScript 提供给我们处理异常的方式。但是在 Vue 2.x 中如果你一如既往的想使用 window.onerror 来捕获异常，那么其实你是捕获不到的，因为异常信息被框架自身的异常机制捕获了，你可以使用 <code>errorHandler</code> 来进行异常信息的获取：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">errorHandler</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">err, vm, info</span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; <br>        message, <span class="hljs-comment">// 异常信息</span><br>        name, <span class="hljs-comment">// 异常名称</span><br>        stack  <span class="hljs-comment">// 异常堆栈信息</span><br>    &#125; = err;<br><br>    <span class="hljs-comment">// vm 为抛出异常的 Vue 实例</span><br>    <span class="hljs-comment">// info 为 Vue 特定的错误信息，比如错误所在的生命周期钩子</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>在入口文件中加入上述代码后，我们便可以捕获到 Vue 项目中的一些异常信息了，但是需要注意的是 Vue 2.4.0 起的版本才支持捕获 Vue 自定义事件处理函数内部的错误，比如:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">my-component</span> @<span class="hljs-attr">eventFn</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">doSomething</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// a is not defined</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>使用 Vue 中的异常捕获机制，我们可以针对捕获到的数据进行分析和上报，为实现前端异常监控奠定基础。关于对异常捕获的详细介绍，感兴趣的同学可以查看我的这篇文章：<a href="https://www.cnblogs.com/luozhihao/p/8635507.html">谈谈前端异常捕获与上报</a></p><h3 id="使用-nextTick-将回调延迟到下次-DOM-更新循环之后执行"><a href="#使用-nextTick-将回调延迟到下次-DOM-更新循环之后执行" class="headerlink" title="使用 nextTick 将回调延迟到下次 DOM 更新循环之后执行"></a>使用 nextTick 将回调延迟到下次 DOM 更新循环之后执行</h3><p>在某些情况下，我们改变页面中绑定的数据后需要对新视图进行一些操作，而这时候新视图其实还未生成，需要等待 DOM 的更新后才能获取的到，在这种场景下我们便可以使用 nextTick 来延迟回调的执行。比如未使用 <code>nextTick</code> 时的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in arr&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">arr</span>: []</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getData</span>();</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">box</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;hello&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>上方代码我们在实际运行的时候肯定会报错，因为我们获取 DOM 元素 li 的时候其还未被渲染，我们将方法放入 nextTick 回调中即可解决该问题：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-built_in">this</span>.<span class="hljs-variable">$nextTick</span>(() =&gt; &#123;<br>    <span class="hljs-built_in">this</span>.<span class="hljs-variable">$refs</span>.box.getElementsByTagName(<span class="hljs-string">&#x27;li&#x27;</span>)[<span class="hljs-number">0</span>].innerHTML = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>当然你也可以使用 ES6 的 <code>async/await</code> 语法来改写上述方法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp">methods: &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">async</span> <span class="hljs-title">getData</span>()</span> &#123;<br>        <span class="hljs-keyword">this</span>.arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>        <br>        <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.$nextTick();<br>        <br>        <span class="hljs-keyword">this</span>.$refs.box.getElementsByTagName(<span class="hljs-string">&#x27;li&#x27;</span>)[<span class="hljs-number">0</span>].innerHTML = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>那么接下来我们来分析下 Vue 是如何做到的，其源码中使用了 3 种方式：</p><ul><li>promise.then 延迟调用</li><li>setTimeout(func, 0) 延迟功能</li><li>MutationObserver 监听变化</li></ul><p>前两种方式相信大家都比较熟悉，其都具备延迟执行的功能，我们也可以直接替换 nextTick 为这两种方式中的一种，同样可以解决问题。这里主要介绍下 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver">MutationObserver</a> 这一 HTML5 新特性，那么什么是 <code>MutationObserver</code> 呢？用一句话介绍就是：我们可以使用它创建一个观察者对象，其会监听某个 DOM 元素，并在它的 DOM 树发生变化时执行我们提供的回调函数。实例化代码及配置如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 传入回调函数进行实例化</span><br><span class="hljs-keyword">var</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function"><span class="hljs-params">mutations</span> =&gt;</span> &#123;<br>    mutations.forEach(<span class="hljs-function"><span class="hljs-params">mutation</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(mutation.type);<br>    &#125;)<br>&#125;);<br><br><span class="hljs-comment">// 选择目标节点</span><br><span class="hljs-keyword">var</span> target = document.querySelector(<span class="hljs-string">&#x27;#box&#x27;</span>);<br> <br><span class="hljs-comment">// 配置观察选项</span><br><span class="hljs-keyword">var</span> config = &#123; <br>    <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否观察属性的变动</span><br>    childList: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否观察子节点的变动（指新增，删除或者更改）</span><br>    characterData: <span class="hljs-literal">true</span> <span class="hljs-comment">// 是否观察节点内容或节点文本的变动</span><br>&#125;;<br> <br><span class="hljs-comment">// 传入目标节点和观察选项</span><br>observer.observe(target, config);<br> <br><span class="hljs-comment">// 停止观察</span><br>observer.disconnect();<br><br></code></pre></td></tr></table></figure><p>这样我们便可以观察 id 为 box 下的 DOM 树变化，一旦发生变化就会触发相应的回调方法，实现延迟调用的功能。</p><h3 id="使用-watch-的深度遍历和立即调用功能"><a href="#使用-watch-的深度遍历和立即调用功能" class="headerlink" title="使用 watch 的深度遍历和立即调用功能"></a>使用 watch 的深度遍历和立即调用功能</h3><p>相信很多同学使用 <code>watch</code> 来监听数据变化的时候通常只使用过其中的 <code>handler</code> 回调，其实其还有两个参数，便是：</p><ul><li>deep 设置为 true 用于监听对象内部值的变化</li><li>immediate 设置为 true 将立即以表达式的当前值触发回调</li></ul><p>我们来看下代码中的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;obj.a = 2&quot;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">obj</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">obj</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">handler</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">newVal, oldVal</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newVal); </span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>以上代码我们修改了 obj 对象中 a 属性的值，我们可以触发其 watch 中的 handler 回调输出新的对象，而如果不加 <code>deep: true</code>，我们只能监听 obj 的改变，并不会触发回调。同时我们也添加了 <code>immediate: true</code> 配置，其会立即以 obj 的当前值触发回调。</p><p>在 Vue 源码中，主要使用了 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty (obj, key, option)</a> 方法来实现数据的监听，同时其也是 Vue 数据双向绑定的关键方法之一。示例代码如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Observer</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> result = <span class="hljs-literal">null</span>;<br>    <br>    Object.defineProperty(this, <span class="hljs-string">&#x27;result&#x27;</span>, &#123;<br>        <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;你访问了 result&#x27;</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;,<br>        <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;<br>            result = value;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;你设置了 result = &#x27;</span> + value);<br>        &#125;<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Observer(); <span class="hljs-comment">// 实例化</span><br><br>app.result; <span class="hljs-comment">// 你访问了 result</span><br>app.result = <span class="hljs-number">11</span>; <span class="hljs-comment">// 你设置了 result = 11</span><br><br></code></pre></td></tr></table></figure><p>我们通过实例化了 <code>Observer</code> 方法来实现了一个简单的监听数据访问与变化的功能。<code>Object.defineProperty</code> 是 ES5 的语法，这也就是为什么 Vue 不支持 IE8 以及更低版本浏览器的主要原因。</p><h3 id="对低开销的静态组件使用-v-once"><a href="#对低开销的静态组件使用-v-once" class="headerlink" title="对低开销的静态组件使用 v-once"></a>对低开销的静态组件使用 v-once</h3><p>Vue 提供了 <code>v-once</code> 指令用于只渲染元素和组件一次，一般可以用于存在大量静态数据组件的更新性能优化，注意是大量静态数据，因为少数情况下我们的页面渲染会因为一些静态数据而变慢。如果你需要对一个组件使用 v-once，可以直接在组件上绑定：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;my-component v-once <span class="hljs-symbol">:data=<span class="hljs-string">&quot;msg&quot;</span>&gt;&lt;/my-component&gt;</span><br><br></code></pre></td></tr></table></figure><p>这时候因为组件绑定了 v-once，所以无论 msg 的值如何变化，组件内渲染的永远是其第一次获取到的初始值。因此我们在使用 v-once 的时候需要考虑该组件今后的更新情况，避免不必要的问题产生。</p><h3 id="使用-isServer-判断当前实例是否运行于服务器"><a href="#使用-isServer-判断当前实例是否运行于服务器" class="headerlink" title="使用 $isServer 判断当前实例是否运行于服务器"></a>使用 $isServer 判断当前实例是否运行于服务器</h3><p>当我们的 Vue 项目中存在服务端渲染（SSR）的时候，有些项目文件可能会同时在客户端和服务端加载，这时候代码中的一些客户端浏览器才支持的属性或变量在服务端便会加载出错，比如 window、 document 等，这时候我们需要进行环境的判断来区分客户端和服务端，如果你不知道 <code>$isServer</code>，那么你可能会使用 <code>try ... catch</code> 或者 <code>process.env.VUE_ENV</code> 来判断：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">document</span>.title = <span class="hljs-string">&#x27;test&#x27;</span>;<br>&#125; <span class="hljs-keyword">catch</span>(e) &#123;&#125;<br><br><span class="hljs-comment">// process.env.VUE_ENV 需要在 webpack 中进行配置</span><br><span class="hljs-keyword">if</span> (process.env.VUE_ENV === <span class="hljs-string">&#x27;client&#x27;</span>) &#123;<br>    <span class="hljs-built_in">document</span>.title = <span class="hljs-string">&#x27;test&#x27;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>而使用 $isServer 则无需进行配置，在组件中直接使用该 API 即可：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.$isServer) &#123;<br>    <span class="hljs-built_in">document</span>.title = <span class="hljs-string">&#x27;test&#x27;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>其源码中使用了 <code>Object.defineProperty</code> 来进行数据监测：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&#x27;$isServer&#x27;</span>, &#123;<br>    <span class="hljs-attr">get</span>: isServerRendering<br>&#125;);<br><br><span class="hljs-keyword">var</span> _isServer;<br><span class="hljs-keyword">var</span> isServerRendering = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (_isServer === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!inBrowser &amp;&amp; !inWeex &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">global</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>            _isServer = <span class="hljs-variable language_">global</span>[<span class="hljs-string">&#x27;process&#x27;</span>].<span class="hljs-property">env</span>.<span class="hljs-property">VUE_ENV</span> === <span class="hljs-string">&#x27;server&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            _isServer = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> _isServer<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>当我们访问 $isServer 属性时，其会调用 <code>isServerRendering</code> 方法，该方法会首先判断当前环境，如果在浏览器或者 Weex 下则返回 false，否则继续判断当前全局环境下的 <code>process.env.VUE_ENV</code> 是否为 server 来返回最终结果。</p><h2 id="结语-12"><a href="#结语-12" class="headerlink" title="结语"></a>结语</h2><p>每一门语言、一个框架都有其 API 文档，在 Vue 的项目开发过程中，很多时候当你一筹莫展之际，你可以尝试浏览一下 Vue 的 API 列表，或许你就会柳暗花明。</p><h2 id="思考-作业-11"><a href="#思考-作业-11" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>使用 watch 监听某一值时，同时修改该值两次会触发几次 watch 回调？</p></li><li><p>使用 <code>errorHandler</code> 捕获异常堆栈后如何解析 <code>source-map</code> 信息？</p></li><li><p>除了本文介绍的 Vue 盲点外，还有哪些需要注意并容易忽略的 API？</p></li></ul><h1 id="开发拓展篇-1：扩充你的开发工具"><a href="#开发拓展篇-1：扩充你的开发工具" class="headerlink" title="开发拓展篇 1：扩充你的开发工具"></a>开发拓展篇 1：扩充你的开发工具</h1><p>在项目开发中，工具的使用起到了至关重要的作用，正所谓工欲善其事，必先利其器，掌握一些实用的开发工具能够使我们的开发效率事半功倍。</p><p>那么我们应该掌握哪些开发工具的使用方法呢？其实一路走来，我们已经介绍的开发工具包括了 <code>npm</code>、<code>yarn</code>、<code>webpack</code> 以及一些集成在项目中的工具包，这些工具一定程度上都大大简化了我们的开发流程，起到了项目助推剂的作用。因此在开发工具的学习上我们应该抱着宜多不宜少的心态，积极主动的扩充自己的工具库。</p><h2 id="巧用-Chrome-插件"><a href="#巧用-Chrome-插件" class="headerlink" title="巧用 Chrome 插件"></a>巧用 Chrome 插件</h2><p>首先，既然说到工具，那我们不得不介绍下占据浏览器市场份额霸主地位的 <code>Chrome</code> 了。相信每一个从事前端开发的同学都对其寄存着一种亲切感，因为只要是参与 web 项目的开发就基本上离不开它的关照，比如它提供的调试控制台以及数以万计的插件等。</p><p>而作为一名前端开发人员，我想你的 Chrome 浏览器地址栏右侧肯定排列着几款你钟爱的插件，使用的插件数量越多说明了你掌握的 Chrome 技能越多，同时一定程度上也凸显了你的开发能力。</p><p>那么接下来我们不妨来认识一下几款实用的 Chrome 插件：</p><h3 id="Vue-js-devtools"><a href="#Vue-js-devtools" class="headerlink" title="Vue.js devtools"></a>Vue.js devtools</h3><p>首先介绍的肯定是 <a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN">Vue.js devtools</a>，它是 Vue 官方发布的一款调试 Vue 项目的插件，支持数据模拟与调试。相信从事过 Vue 项目开发的同学都已经把它收入在自己的工具库中了，它的界面如下：</p><img src="/2019/08/30/vue/1655c88fb776ea32.png" class=""><p>成功安装它之后，在 Vue 项目的页面中我们可以打开 Chrome 控制台选择 Vue 的 tab 进行页面调试。</p><h3 id="Vue-Performance-Devtool"><a href="#Vue-Performance-Devtool" class="headerlink" title="Vue Performance Devtool"></a>Vue Performance Devtool</h3><p>在《Vue API 盲点解析》章节我们已经介绍了 <a href="https://chrome.google.com/webstore/detail/vue-performance-devtool/koljilikekcjfeecjefimopfffhkjbne">Vue Performance Devtool</a> 这款插件，它可以分析我们页面中各个组件的性能情况，从而在其基础上我们可以有针对性的对组件的代码进行优化，如下图所示：</p><img src="/2019/08/30/vue/1655c94f6dc46001.png" class=""><p>同样安装完毕后，我们可以打开 Chrome 控制台选择 <code>Vue Performance</code> 的 tab 进行组件的性能观察。</p><h3 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h3><p><a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en">Postman</a> 相信大家都比较熟悉，它是一款非常好用的接口调试工具。在 Vue 项目开发中，我们或多或少需要对后台提供的接口进行测试，比如传递数据并查看返回结果等，这时候使用 Postman 便可以完成这些任务。</p><img src="/2019/08/30/vue/1655cfc5e3d6690d.png" class=""><p>Postman 会当作 Chrome 应用程序安装到你的电脑上，打开后我们可以选择请求方式（GET／POST），输入请求 URL 以及设置传递参数来进行接口的调用。</p><h3 id="Web-Developer"><a href="#Web-Developer" class="headerlink" title="Web Developer"></a>Web Developer</h3><p><a href="https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm">Web Developer</a> 是一款强大的用于操作网页中各项资源与浏览器的插件，比如一键禁用 JS、编辑 CSS、清除 Cookie 等。</p><img src="/2019/08/30/vue/1655cc3216d01a59.png" class=""><p>虽然说一些功能我们也可以在 Chrome 控制台实现，但其提供的快捷键能够十分方便的让我们在页面中操作某些资源。</p><h3 id="Google-PageSpeed-Insights-API-Extension"><a href="#Google-PageSpeed-Insights-API-Extension" class="headerlink" title="Google PageSpeed Insights API Extension"></a>Google PageSpeed Insights API Extension</h3><p>PageSpeed Insights (PSI) 是 <code>Google</code> 在全球范围内应用最广的开发者工具之一，其中文网页版 <a href="developers.google.cn/speed/pagespeed/insights/">developers.google.cn&#x2F;speed&#x2F;pagespeed&#x2F;insights&#x2F;</a> 也已经发布。作为一款专注于改进网页性能的开发者工具，它主要具有以下两个优势：<strong>真实的网页运行速度</strong> 及 <strong>优化建议</strong>。</p><img src="/2019/08/30/vue/1655d1231520ea25.png" class=""><p>为了便于使用，我们可以直接下载 Chrome 插件 <a href="https://chrome.google.com/webstore/detail/google-pagespeed-insights/hfebkooaidmeboeblkkejdoepilnnjhn">Google PageSpeed Insights API Extension</a> 来对当前访问网址进行测试和分析。</p><h3 id="FeHelper"><a href="#FeHelper" class="headerlink" title="FeHelper"></a>FeHelper</h3><p>FeHelper 是百度 FE 团队开发的一款前端工具集插件，包含代码压缩／性能检测／字符串编解码等功能，能够帮助我们完成一些琐碎的开发任务。</p><img src="/2019/08/30/vue/1655d245e1bd2730.png" class=""><p>FeHelper 为我们提供了十多种快捷功能，在需要的时候我们直接点击插件图标选择对应功能即可，操作起来十分便捷。</p><h3 id="Can-I-Use"><a href="#Can-I-Use" class="headerlink" title="Can I Use"></a>Can I Use</h3><p><a href="https://chrome.google.com/webstore/detail/can-i-use/decehbilpgknnlnkbgkcggjbgjbphljb">Can I Use</a> 是 <a href="https://caniuse.com/">https://caniuse.com/</a> 网页版的插件。我们可以使用其来查看某一特性的浏览器支持程度，确保主流浏览器的支持。</p><p>1655d38dca6e9973.png)</p><p>使用 Chrome 插件形式的 Can I Use 我们可以快捷的查看项目中用到的某一特性的浏览器支持范围，同时还可以查看支持程度和兼容方式。</p><h3 id="其他实用插件"><a href="#其他实用插件" class="headerlink" title="其他实用插件"></a>其他实用插件</h3><ul><li><a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc">JSONView</a> ：一款可以将后台返回的 JSON 字符串数据自动格式化成规范 JSON 格式的插件</li><li><a href="https://chrome.google.com/webstore/detail/whatfont/jabopobgcpjmedljpbcaablpmlmfcogm">WhatFont</a>：一款可以显示浏览器中选择文字的字体类型／字号／颜色的插件</li><li><a href="https://chrome.google.com/webstore/detail/the-qr-code-extension/oijdcdmnjjgnnhgljmhkjlablaejfeeb">The QR Code Extension</a>：一款允许当前页面生成二维码，并使用网络摄像头扫描二维码的插件</li><li><a href="https://chrome.google.com/webstore/detail/test-ie/eldlkpeoddgbmpjlnpfblfpgodnojfjl?hl=zh-CN">Test IE</a>：一款可以模拟 <code>IE</code> 及其他主流浏览器的插件，但大部分模拟场景需要付费才能使用</li><li><a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg">Wappalyzer</a>：一款查看当前网站使用的前后端技术的插件，帮助你学习和认识优秀网站的技术选型</li><li><a href="https://chrome.google.com/webstore/detail/mobileresponsive-web-desi/elmekokodcohlommfikpmojheggnbelo">Mobile&#x2F;Responsive Web Design Tester</a>：一款用于测试页面在不同机型下呈现的插件</li><li><a href="https://chrome.google.com/webstore/detail/resolution-test/idhfcdbheobinplaamokffboaccidbal">Resolution Test</a>：一款用于测试页面在不同分辨率下呈现的插件</li></ul><p>以上我们介绍了一些非常实用的 chrome 拓展插件来助力我们的前端开发，为项目开发提供了工具解决方案，同时也有助于帮助大家开启以工具为向导的开发模式。</p><h2 id="分析你的包文件"><a href="#分析你的包文件" class="headerlink" title="分析你的包文件"></a>分析你的包文件</h2><p>每当我们使用 webpack 打包项目代码的时候，你可能需要关注一下打包生成的每个 js 文件的大小以及其包含的内容，这对于优化项目打包速度和提升页面加载性能都有十分大的帮助。</p><p>这里我们推荐使用 <a href="https://www.npmjs.com/package/webpack-bundle-analyzer">webpack-bundle-analyzer</a> 这一款 webpack 插件来进行包文件的分析，下面我们就来介绍下其配置和使用方法。</p><p>首先作为一款需要内置在代码中的开发分析工具，我们需要安装并在 webpack 的 plugins 中添加该插件：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#  安装命令</span><br>yarn <span class="hljs-built_in">add</span> webpack-bundle-analyzer <span class="hljs-comment">--dev</span><br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* vue.config.js */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">BundleAnalyzerPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-bundle-analyzer&#x27;</span>).<span class="hljs-property">BundleAnalyzerPlugin</span><br><br><span class="hljs-keyword">const</span> isPro = process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <br>    ... <br>    <br>    <span class="hljs-attr">configureWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (isPro) &#123;<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">plugins</span>: [<br>                <br>                    <span class="hljs-comment">// 使用包分析工具</span><br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">BundleAnalyzerPlugin</span>()<br>                ]<br>            &#125;<br>        &#125;<br>    &#125;,<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样我们在生产环境下打包便可以在浏览器 8888 端口（默认）下打开页面进行包文件的分析，如下图所示：</p><img src="/2019/08/30/vue/16561c54b9091a30.png" class=""><p>图中区域内包含了我们打包出的所有 js 文件，我们可以以不同的颜色进行区分，同时我们也可以点击某一区块进行放大观察，以此来分析是否存在较大或重复的模块。而在页面左侧存在一个筛选面板，在该面板中我们能勾选需要查看的文件来进行显示，同时也可以切换查看原始、普通及 <code>GZIP</code> 压缩模式下的文件大小。</p><p>使用好 webpack-bundle-analyzer 工具我们可以快速的找到需要合并的模块，解决文件冗余，为资源优化提供可行性方案。</p><h2 id="调试移动端页面"><a href="#调试移动端页面" class="headerlink" title="调试移动端页面"></a>调试移动端页面</h2><p>除了 Chrome 插件及打包分析工具的介绍外，我们再来了解下移动端页面的调试工具。相比 PC 端调试，移动端调试可能稍微复杂一点，但是只要熟练的使用好 “工具” 这一东西，我们同样可以在移动端的世界中游刃有余。</p><p>作为一名 <code>Mac</code> 及 <code>iOS</code> 用户，这里我主要介绍在 <code>iPhone</code> 手机中调试页面的方法，当然最后也会简单介绍一下 <code>Android</code> 手机页面的调试方法。</p><p>首先我们得具备这些工具：iPhone 手机一部、数据线一条、Mac 电脑一台。在满足以上要求后我们需要把手机通过数据线连接上 Mac 电脑，连接完毕后便可以进行如下步骤的设置：</p><h4 id="1-打开苹果手机的-Web-检查器-（设置-Safari浏览器-高级-Web检查器），一般情况下默认是开启的"><a href="#1-打开苹果手机的-Web-检查器-（设置-Safari浏览器-高级-Web检查器），一般情况下默认是开启的" class="headerlink" title="1. 打开苹果手机的 Web 检查器 （设置 &gt; Safari浏览器 &gt; 高级 &gt; Web检查器），一般情况下默认是开启的"></a>1. 打开苹果手机的 <code>Web 检查器</code> （设置 &gt; Safari浏览器 &gt; 高级 &gt; Web检查器），一般情况下默认是开启的</h4><h4 id="2-打开-Mac-上的-Safari-的-“开发”菜单，一般情况下默认是开启的"><a href="#2-打开-Mac-上的-Safari-的-“开发”菜单，一般情况下默认是开启的" class="headerlink" title="2. 打开 Mac 上的 Safari 的 “开发”菜单，一般情况下默认是开启的"></a>2. 打开 Mac 上的 <code>Safari</code> 的 <code>“开发”菜单</code>，一般情况下默认是开启的</h4> <img src="/2019/08/30/vue/1656272c36a04d93.png" class=""><h4 id="3-在手机-Safari-浏览器中打开你需要调试的页面"><a href="#3-在手机-Safari-浏览器中打开你需要调试的页面" class="headerlink" title="3. 在手机 Safari 浏览器中打开你需要调试的页面"></a>3. 在手机 Safari 浏览器中打开你需要调试的页面</h4><h4 id="4-在-Mac-Safari-浏览器中选择你需要调试的页面（开发-你的-iPhone-你的页面地址）"><a href="#4-在-Mac-Safari-浏览器中选择你需要调试的页面（开发-你的-iPhone-你的页面地址）" class="headerlink" title="4. 在 Mac Safari 浏览器中选择你需要调试的页面（开发 &gt; 你的 iPhone &gt; 你的页面地址）"></a>4. 在 Mac Safari 浏览器中选择你需要调试的页面（开发 &gt; 你的 iPhone &gt; 你的页面地址）</h4><h4 id="5-点击地址后弹出如图所示的控制台，你便可以在该控制台中进行调试了"><a href="#5-点击地址后弹出如图所示的控制台，你便可以在该控制台中进行调试了" class="headerlink" title="5. 点击地址后弹出如图所示的控制台，你便可以在该控制台中进行调试了"></a>5. 点击地址后弹出如图所示的控制台，你便可以在该控制台中进行调试了</h4><img src="/2019/08/30/vue/165627afd786c2d0.png" class=""><p>最后你可以针对你的移动端页面进行断点调试、操作缓存、查看网络及资源等，帮助你快速的定位和解决问题。</p><p>而在 Android 手机中，我们同样可以对移动端页面进行调试，主要不同点在于 IOS 使用的工具是 iPhone 和 Mac，Android 使用的工具主要是 Android 手机和 Windows 系统罢了（Mac 也可以使用模拟器），当然还需要借助 Chrome 的帮助。</p><p>这里主要介绍一下 Chrome 中的 <code>inspect</code>，我们可以在 Chrome 地址栏输入：<code>chrome://inspect/</code> 来捕获手机访问的页面地址，前提是你的 Android 手机通过数据线连接上了电脑并开启了相应权限，最后获取到的地址会在 <code>Remote Target</code> 中显示：</p><img src="/2019/08/30/vue/165628f25bf53e10.png" class=""><p>点击相应的地址会弹出一个控制台，你可以在该控制台中进行页面的调试。</p><h2 id="结语-13"><a href="#结语-13" class="headerlink" title="结语"></a>结语</h2><p>本文介绍了 Vue 项目开发时常用的 Chrome 插件、包分析工具以及移动端调试工具，这些开发工具的使用能够帮助我们快速的定位项目中出现的一些疑难杂症，而唯有 “用正确的工具，做正确的事情” 才能有效的彰显工具对于项目开发和维护的重要性，使我们的工具库能够发挥它真正的价值。</p><h2 id="思考-作业-12"><a href="#思考-作业-12" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p><code>webpack-bundle-analyzer</code> 有哪些配置项？分别有什么作用？</p></li><li><p>除了本文介绍的开发工具外，还有哪些比较实用的开发工具？</p></li></ul><h1 id="开发拓展篇-2：将-UI-界面交给第三方库"><a href="#开发拓展篇-2：将-UI-界面交给第三方库" class="headerlink" title="开发拓展篇 2：将 UI 界面交给第三方库"></a>开发拓展篇 2：将 UI 界面交给第三方库</h1><p>当你了解了 Vue 项目构建和开发的基本知识后，我认为接下来你一定想亲自在构建出的项目中填充自己的业务和功能逻辑，因为目前其还是空白的。</p><p>但是这里我不会教你如何实现一个具体的业务和功能模块，因为每个人想要实现的东西都可能不尽相同。如果你想快速开发一款应用，并且不想过多的操心页面 <code>UI</code> 层次的内容，比如你不想去实现一个下拉 UI 组件或设计一个 <code>icon</code> 图标，那么我想你有必要了解下 UI 库及图标库的应用。</p><h2 id="UI-库"><a href="#UI-库" class="headerlink" title="UI 库"></a>UI 库</h2><p>UI 库是脱离 JS 框架外的一种 “工具”，相比 JS 框架可以帮助你实现各种业务逻辑，其更关注于页面 UI 层面的实现，比如提供和业务无关的弹窗、导航、表单组件等，为项目 UI 层面的功能提供解决方案，比如 <a href="https://jqueryui.com/">jQuery UI</a>。</p><p>而由于本小册介绍的 JS 框架是 Vue，所以在 Vue 项目中我们需要使用基于 Vue 开发的 UI 库。本文将以比较流行的 <a href="https://doc.vux.li/zh-CN/">Vux</a> 为例，其目前 github star 数已在 14 k 左右。</p><blockquote><p>Vux 是一款是基于 <a href="https://weui.io/">WeUI</a> 和 <code>Vue(2.x)</code> 开发的移动端 UI 组件库，主要服务于微信页面。</p></blockquote><h3 id="Vux-的安装和配置"><a href="#Vux-的安装和配置" class="headerlink" title="Vux 的安装和配置"></a>Vux 的安装和配置</h3><p>那么我们如何在项目中使用 Vux 呢？首先我们先要进行安装：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">yarn <span class="hljs-built_in">add</span> vux <br><br><span class="hljs-comment"># 或者</span><br>npm install vux <span class="hljs-comment">--save</span><br><br></code></pre></td></tr></table></figure><p>同时我们还需要安装 <a href="https://doc.vux.li/zh-CN/vux-loader/about.html">vux-loader</a>：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">yarn <span class="hljs-built_in">add</span> vux-loader <span class="hljs-comment">--dev</span><br><br><span class="hljs-comment"># 或者</span><br>npm install vux-loader <span class="hljs-comment">--save-dev</span><br><br></code></pre></td></tr></table></figure><p>安装完成后，我们需要在项目中进行配置，而由于目前 Vux 官网的配置教程未对 Vue CLI 3.x 作出说明，我们先来看下其目前的介绍：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* build/webpack.base.conf.js */</span><br><span class="hljs-type">const</span> <span class="hljs-variable">vuxLoader</span> <span class="hljs-operator">=</span> require(<span class="hljs-string">&#x27;vux-loader&#x27;</span>)<br><span class="hljs-type">const</span> <span class="hljs-variable">webpackConfig</span> <span class="hljs-operator">=</span> originalConfig <span class="hljs-comment">// 原来的 module.exports 代码赋值给变量 webpackConfig</span><br><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = vuxLoader.merge(webpackConfig, &#123;<br>    plugins: [<span class="hljs-string">&#x27;vux-ui&#x27;</span>]<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>官方目前的配置是在 Vue CLI 2.x 的 <code>build/webpack.base.conf.js</code> 文件中进行修改，merge <code>vux-loader</code> 的配置项。那么在 Vue CLI 3.x 中其实原理是一样的，不一样的地方在于我们无法直接修改 webpack 配置文件，而需要通过 vue.config.js 中的 <code>configureWebpack</code> 配置项来进行修改罢了。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* vue.config.js */</span><br><span class="hljs-keyword">const</span> vuxLoader = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vux-loader&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    ...<br>    <br>    <span class="hljs-attr">configureWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        vuxLoader.<span class="hljs-title function_">merge</span>(config, &#123;<br>            <span class="hljs-attr">plugins</span>: [<span class="hljs-string">&#x27;vux-ui&#x27;</span>]<br>        &#125;)<br>    &#125;,<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>configureWebpack 配置中提供的 <code>config</code> 参数便是 webpack 的配置内容，也可以看作是官方文档中提到的原来在 <code>webpack.base.conf.js</code> 中的 <code>module.exports</code> 代码。</p><h3 id="Vux-的使用"><a href="#Vux-的使用" class="headerlink" title="Vux 的使用"></a>Vux 的使用</h3><p>当我们配置好 Vux 后，我们便可以在项目中使用了。Vux 为我们提供了很多项目中常用的组件和工具函数等，比如我们在全局父组件 App.vue 中添加一个底部导航：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!-- App.vue --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">tabbar</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">tabbar-item</span> <span class="hljs-attr">:link</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;name: &#x27;demo&#x27;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>Demo<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">tabbar-item</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">tabbar-item</span> <span class="hljs-attr">:link</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;name: &#x27;laboratory&#x27;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>实验室<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">tabbar-item</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">tabbar-item</span> <span class="hljs-attr">:link</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;name: &#x27;about&#x27;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">tabbar-item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">tabbar</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; Tabbar, TabbarItem &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vux&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    components: &#123;</span><br><span class="hljs-template-variable">        Tabbar,</span><br><span class="hljs-template-variable">        TabbarItem,</span><br><span class="hljs-template-variable">    &#125;</span><span class="language-xml"></span><br><span class="language-xml">&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;~vux/src/styles/reset.less&#x27;</span>;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>我们通过引入组件的方式将导航组 <code>Tabbar</code>、<code>TabbarItem</code> 件引入并注册到页面中，这样通过 Vux 文档中的介绍我们便可以对相应组件进行配置。呈现效果如下：</p> <img src="/2019/08/30/vue/165bd384922ca66c.png" class=""><p>需要注意的是我们需要在 App.vue 中引入 Vux 的 <code>reset</code> 样式 less 文件以解决样式呈现不统一的问题。关于其他 Vux 组件的配置可以参考官方文档：<a href="https://doc.vux.li/zh-CN/components/actionsheet.html">组件</a></p><h3 id="其他-UI-库（框架）"><a href="#其他-UI-库（框架）" class="headerlink" title="其他 UI 库（框架）"></a>其他 UI 库（框架）</h3><p>除了上方介绍的 Vux 外，类似的 Vue 的第三方 UI 库还有很多，这里我列举几个比较常用的：</p><ul><li><a href="https://www.iviewui.com/">iview</a>：一套基于 Vue.js 的高质量 UI 组件库（PC端）</li><li><a href="https://github.com/iview/iview-admin">iView Admin</a>：搭配使用iView UI组件库形成的一套后台集成解决方案（PC端）</li><li><a href="http://element-cn.eleme.io/#/zh-CN">Element</a>：一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库（PC端）</li><li><a href="http://okoala.github.io/vue-antd/#!/docs/introduce">Vue Antd</a>：Ant Design 的 Vue 实现，开发和服务于企业级后台产品（PC端）</li><li><a href="http://yuche.github.io/vue-strap/">VueStrap</a>：一款 Bootstrap 风格的 Vue UI 库（PC端）</li><li><a href="http://mint-ui.github.io/#!/zh-cn">Mint UI</a>：由饿了么前端开发的基于 Vue.js 的移动端组件库（移动端）</li><li><a href="https://wangdahoo.github.io/vonic-documents/#/?id=vonic">Vonic</a>：一个基于 vue.js 和 ionic 样式的 UI 框架，用于快速构建移动端单页应用（移动端）</li><li><a href="https://youzan.github.io/vant/#/zh-CN/intro">Vant</a>：轻量、可靠的移动端 Vue 组件库（移动端）</li><li><a href="https://didi.github.io/cube-ui/#/zh-CN/docs/introduction">Cube UI</a>：基于 Vue.js 实现的精致移动端组件库（移动端）</li></ul><h2 id="图标库"><a href="#图标库" class="headerlink" title="图标库"></a>图标库</h2><p>了解完 UI 库，我们再来了解下图标库。图标库，顾名思义就是汇聚了大量图标的仓库，在这样的仓库中我们可以查找并下载我们想要的图标，甚至还可以制定颜色和大小。</p><p>在项目中使用图标库可以为我们的项目制定统一的图标管理标准，同时一定程度上也可以减少项目图片的数量。下面我们便来介绍下目前最流行的一款图标库 <a href="http://www.iconfont.cn/">Iconfont</a>。</p><h3 id="使用-Iconfont-下载管理图标"><a href="#使用-Iconfont-下载管理图标" class="headerlink" title="使用 Iconfont 下载管理图标"></a>使用 Iconfont 下载管理图标</h3><blockquote><p><code>Iconfont</code> 是阿里妈妈 <code>MUX</code> 倾力打造的矢量图标管理、交流平台。 设计师将图标上传到 Iconfont 平台，用户可以自定义下载多种格式的 icon，平台也可将图标转换为字体，便于前端工程师自由调整与调用。</p></blockquote><img src="/2019/08/30/vue/165be177f5aae7ae.png" class=""><p>在 Iconfont 首页，我们可以点击图标库来进行图标的搜索。这里我们可以点击官方图标库后选择 Ant Design 官方图标库进入。</p><img src="/2019/08/30/vue/165be30ebede83c8.png" class=""><p>进入对应的图标库后，我们可以选择对应的图标加入购物车，同时购物车会更新添加后的图标数量。</p><img src="/2019/08/30/vue/165be34e414e5849.png" class=""><p>选择完成后，为了使图标便于今后管理，我们可以新建一个项目并将图标移入项目中。在项目中，我们便可以进行图标的添加、删除和下载等操作（需要登录）。</p><img src="/2019/08/30/vue/165be3a4e7cf82e4.png" class=""><p>这里我们采用将图标下载到本地的方式进行使用，当然你也可以使用在线链接，但这会受到网络的影响。</p><h3 id="Iconfont-的使用"><a href="#Iconfont-的使用" class="headerlink" title="Iconfont 的使用"></a>Iconfont 的使用</h3><p>下载到本地后，我们需要将文件夹中的 <code>iconfont.css</code>、<code>iconfont.eot</code>、<code>iconfont.svg</code>、<code>iconfont.ttf</code> 和 <code>iconfont.woff</code> 文件统一放到项目中去，比如我们可以放入新建的 assets 文件夹的 iconfont 中去。而 iconfont.css 便是管理这样图标字体的样式文件，我们可以将其引入到入口文件中：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">/* main.js */</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./assets/iconfont/iconfont.css&#x27;</span><br><br></code></pre></td></tr></table></figure><p>引入后我们便可以在项目中通过给 html 标签添加样式名称的方式来进行图标的使用，比如我们在上方 Vux 的导航上添加图标：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!-- App.vue --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">tabbar</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">tabbar-item</span> <span class="hljs-attr">:link</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;name: &#x27;demo&#x27;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-bulb&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>Demo<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">tabbar-item</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">tabbar-item</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-experiment&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>实验室<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">tabbar-item</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">tabbar-item</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-deploymentunit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">tabbar-item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">tabbar</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>按照 Vux 导航文档添加名称为 <code>icon</code> 的 <code>solt</code> 插槽后，我们还需要在标签上添加对应图标的 class 名称，比如 <code>iconfont icon-bulb</code>，最终我们的展示效果如图所示：</p> <img src="/2019/08/30/vue/165be50abd042347.png" class=""><h3 id="其他图标库"><a href="#其他图标库" class="headerlink" title="其他图标库"></a>其他图标库</h3><p>除了 Iconfont，常用的图标库还有：</p><ul><li><a href="https://fontawesome.com/">Font Awesome</a>：世界上最受欢迎且最易于使用的图标集</li><li><a href="https://ionicons.com/">Ionicons</a> ：精美的开源图标库，可以用于Web，iOS，Android和桌面应用程序</li><li><a href="https://themify.me/themify-icons">Themify</a>：一套用于网页设计和应用程序的完整图标</li></ul><p>相信以上这些图标库就足以使你应付所有项目了。</p><h2 id="结语-14"><a href="#结语-14" class="headerlink" title="结语"></a>结语</h2><p>本文介绍了 Vue 项目开发中可能会使用到的 UI 库与图标库的应用，以 Vux 和 Iconfont 为例讲解了它们在项目中的使用方法和注意事项，相信大家能够在项目构建和开发的基础上使用 UI 库与图标库快速实现自己的项目 UI 层面的功能和展示，为自己的项目添砖加瓦。</p><p>具体实例代码可以参考：<a href="https://github.com/luozhihao/vue-project-code/tree/master/ui-framework-project">ui-framework-project</a></p><h2 id="思考-作业-13"><a href="#思考-作业-13" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>查看 Vux 源码，尝试自己编写一个 UI 插件</p></li><li><p>Iconfont 是矢量图标库，其相比位图的主要区别是什么？</p></li></ul><h1 id="开发拓展篇-3：尝试使用外部数据"><a href="#开发拓展篇-3：尝试使用外部数据" class="headerlink" title="开发拓展篇 3：尝试使用外部数据"></a>开发拓展篇 3：尝试使用外部数据</h1><p>当你应用的 UI 层面已经趋于完善的时候，接下来你就需要去获取动态的数据来实现真实的应用场景。那么动态数据从哪里来呢？前端主要还是通过接口的形式获取。</p><p>如果有专业的接口开发人员和你一起完成一个应用，那么你只需要和他定义好接口的入参和出参，然后进行调用就好了，这也是公司中前端与后台的常见合作方式。</p><p>而在以下场景下，你可能并不需要或者并没有后台工程师提供接口给你：</p><ul><li>你个人开发的项目</li><li>你的应用数据来源于外部</li></ul><p>这时候你就需要通过调用<strong>第三方接口</strong>来实现应用的数据交互与展现。那么接下来我们就来介绍下第三方接口的使用。</p><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>大多数情况下，我们调用的第三方接口都是完全或者部分开源及免费的，因此只要在合理的范围内使用我们便可以实现一些简单的数据交互。本文将以<a href="https://www.juhe.cn/docs">聚合数据</a>提供的第三方接口 API 为例进行讲解。</p><h3 id="聚合数据"><a href="#聚合数据" class="headerlink" title="聚合数据"></a>聚合数据</h3><blockquote><p>聚合数据是国内领先的基础数据服务商， 以自有数据为基础，各种便捷服务整合以及第三方数据接入，为互联网开发全行业提供标准化 API 技术支撑服务的 DaaS 平台。</p></blockquote><p>在官网 API 首页（<a href="https://www.juhe.cn/docs">https://www.juhe.cn/docs</a>）我们可以选择你想要的接口类型进行调用，如下图所示：</p><img src="/2019/08/30/vue/165e11791a44f6ee.png" class=""><p>其中包含了免费及付费的接口类型，如果只是用于单个的调用或测试，建议大家使用免费接口就可以了（非会员只能申请一个免费接口，比较坑），但如果你的应用准备上架或发布，你最好付费以获得更多的调用和使用接口的次数。</p><p>点击你想使用的接口后你便可以查看该接口的 API 文档，包括接口地址、请求方式、请求示例及返回示例等，比如这里我点击“笑话大全”：</p><img src="/2019/08/30/vue/165e122c43a04e11.png" class=""><p>调用接口需要平台提供的 <code>AppKey</code>，在你注册登录个人中心的<strong>我的数据</strong>中可以查看对应接口的 <code>AppKey</code>：</p><img src="/2019/08/30/vue/165e13bbbf50ff00.png" class=""><p>获取到 AppKey 后我们便可以对接口进行测试了，这里我们可以直接通过对应接口的测试按钮进行测试，当然你也可以通过 <code>postman</code> 工具进行调试：</p><img src="/2019/08/30/vue/165e14381021f3dd.png" class=""><p>测试完毕后，我们便可以在 Vue 项目中接入我们的第三方接口，实现动态数据和功能。</p><h3 id="其他第三方接口"><a href="#其他第三方接口" class="headerlink" title="其他第三方接口"></a>其他第三方接口</h3><p>除了整合型的第三方接口聚合数据外，其他比较实用的第三方接口还有：</p><ul><li><a href="https://lbs.amap.com/">高德地图</a>：访问高德地图的 Web API</li><li><a href="https://developer.github.com/v3/">GitHub</a>：世界上领先的软件开发平台</li><li><a href="http://api.fanyi.baidu.com/api/trans/product/index">百度翻译</a>：支持多种语言之间的相互翻译</li><li><a href="https://www.heweather.com/documents/">和风天气</a>：中国天气信息</li><li><a href="https://www.avatardata.cn/Docs">阿凡达数据</a> ：提供中国可用的 API</li></ul><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><p>接下来，我们便可以在 Vue 项目中接入第三方接口来实现数据的交互。这里我们以接入聚合数据的<code>历史上的今天</code>接口为例。</p><p>首先我们来看一下该接口的请求详情：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts">请求地址：http:<span class="hljs-comment">//api.juheapi.com/japi/toh</span><br>请求参数：v=<span class="hljs-number">1.0</span><span class="hljs-variable">&amp;month</span>=<span class="hljs-number">10</span><span class="hljs-variable">&amp;day</span>=<span class="hljs-number">31</span><span class="hljs-variable">&amp;key</span>=你的AppKey<br>请求方式：GET<br><br></code></pre></td></tr></table></figure><p>上方详情中我们可以看到请求参数主要有 4 个，分别为：</p><ul><li>v：string 类型。版本，当前：1.0</li><li>month：int 类型。月份，如：10</li><li>day：int 类型。日，如：1</li><li>key：string 类型。你的 AppKey</li></ul><p>通过接口入参的说明我们可以知道唯一可以变的数据便是月份和日期，所以我们页面中得有选择<strong>月日</strong>的功能。</p><p>另外我们再来看一下该接口的出参示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;error_code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;请求成功！&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;day&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;des&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1907年11月1日 电影导演吴永刚诞生 &amp;emsp;&amp;emsp;吴永刚，1907年11月1日生于江苏吴县。1932年后参加影片《三个摩登女性》、《母性之光》的拍摄工作。1934年在联华影片公司编导处女作《神女》，一举成名，...&quot;</span><span class="hljs-punctuation">,</span>  <br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9000</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;lunar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;丁未年九月廿六&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;month&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;pic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>  <br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;电影导演吴永刚诞生&quot;</span><span class="hljs-punctuation">,</span>  <br>            <span class="hljs-attr">&quot;year&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1907</span>  <br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>通过上方示例，我们可以获取<strong>历史上的今天</strong>的标题、详情、图片等，这些数据可以用于页面展示。</p><p>这样经过接口入参和出参的分析，我们可以使用 Vux 构建一个简单的页面，如下图所示：</p> <img src="/2019/08/30/vue/165e2c1f6997c9cc.png" class=""><p>通过点击上图中“查看历史上的今天”按钮，便可以调用接口获取数据列表并渲染。主要代码如下：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">datetime-view</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;datetime&quot;</span> <span class="hljs-attr">:format</span>=<span class="hljs-string">&quot;format&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">datetime-view</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>选中值: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">value</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-padding&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">x-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click.native</span>=<span class="hljs-string">&quot;watchHistory&quot;</span>&gt;</span>查看历史上的今天<span class="hljs-tag">&lt;/<span class="hljs-name">x-button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">panel</span> <span class="hljs-attr">header</span>=<span class="hljs-string">&quot;历史上的今天&quot;</span> <span class="hljs-attr">:list</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">panel</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">DatetimeView</span>, <span class="hljs-title class_">XButton</span>, <span class="hljs-title class_">Panel</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vux&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; getHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;_ser/moduleB&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;10-31&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;MM-DD&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">list</span>: []</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">watchHistory</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">let</span> data = <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        </span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = [];</span></span><br><span class="language-javascript"><span class="language-xml">        </span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">getHistory</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">v</span>: <span class="hljs-string">&#x27;1.0&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">month</span>: data[<span class="hljs-number">0</span>],</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">day</span>: data[<span class="hljs-number">1</span>],</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;d6ceaf9be9f116ae45e7699845d87056&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">error_code</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    response.<span class="hljs-property">result</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                            <span class="hljs-attr">title</span>: e.<span class="hljs-property">title</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                            <span class="hljs-attr">desc</span>: e.<span class="hljs-property">des</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                            <span class="hljs-attr">src</span>: e.<span class="hljs-property">pic</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">                    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">DatetimeView</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">XButton</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">Panel</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>上方我们通过调用封装的 <code>getHistory</code> 接口名称进行数据的获取，在本地调用的过程中需要注意跨域的问题，可以配置 devServer 的 proxy 代理来解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* vue.config.js */</span><br><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>    devServer: &#123;<br>        proxy: &#123;<br>            <span class="hljs-string">&#x27;/juheapi&#x27;</span>: &#123;<br>                target: <span class="hljs-string">&#x27;http://api.juheapi.com/&#x27;</span>,<br>                changeOrigin: <span class="hljs-literal">true</span>,<br>                pathRewrite: &#123;<span class="hljs-string">&#x27;^/juheapi&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>具体实例代码可以参考：<a href="https://github.com/luozhihao/vue-project-code/tree/master/ui-framework-project">ui-framework-project</a></p><p>这样我们便完成了使用第三方接口获取数据实现页面渲染的功能，为自己的应用填充了数据和功能。</p><h2 id="结语-15"><a href="#结语-15" class="headerlink" title="结语"></a>结语</h2><p>第三方接口的使用能够帮助我们快速的获取数据并实现应用的动态交互，同时也有助于解决接口开发的人力及服务器资源消耗，为部分 Vue 项目开发提供数据保障。</p><p>至此，本小册的开发部分章节也将告一段落。在这部分的内容中我们一起学习了 Vue 项目开发的实用技巧、方法和工具，并在构建出的项目基础上了解并实践了 Vue 开发的相关技术要点。希望这部分内容的介绍能够巩固大家对于 Vue 开发的基础知识，弥补 Vue 开发的技能空白。</p><h2 id="思考-作业-14"><a href="#思考-作业-14" class="headerlink" title="思考 &amp; 作业"></a>思考 &amp; 作业</h2><ul><li><p>自己通过调用外部数据完成一个页面动态的数据渲染</p></li><li><p>devServer 的 proxy 代理是如何实现接口转换和重定向的？各配置项的作用是什么？</p></li></ul><h1 id="总结篇：写在最后"><a href="#总结篇：写在最后" class="headerlink" title="总结篇：写在最后"></a>总结篇：写在最后</h1><p>看到这里，也就是要和大家说再见的时候了，其实还有很多想和大家分享的内容没能来得及一一阐述，但是没有关系，我相信在今后学习 Vue 的道路上我们永远会保持关注，彼此照应，一起学习，一起进步。</p><p>而正所谓温故而知新，可以为师矣，接下来我们不妨一起回顾下本小册的主要内容。</p><h2 id="回顾与总结"><a href="#回顾与总结" class="headerlink" title="回顾与总结"></a>回顾与总结</h2><p>浏览小册目录，我们可以清楚的将小册的内容归类为构建与开发两部分，这也是本小册所要分享的知识点所在。</p><p>在小册构建部分我们由浅入深的进行了项目构建的学习，在 <code>Vue CLI 3.x</code> 的基础上，从基础构建开始，经历了 <code>npm</code> 与 <code>yarn</code> 的使用、<code>webpack</code> 的配置以及项目环境的注入，最后通过单页应用和多页应用的构建实战来进一步强化大家的认知，并对构建出的项目进行了整合和优化。</p><p>而在小册开发部分，我们主要针对 Vue 项目开发过程中可能遇到的技术点、难点及优化点进行了指南性的介绍，包括了编码技巧与规范、可复用性模块的编写、组件的职能划分、数据驱动的介绍以及 Vue API 的解析等，通过理论结合实战的形式一步步地帮助大家构筑 Vue 开发知识体系。</p><p>相对于偏具体实战性质的书籍，本小册主要偏向理论及应用层面。因为小册没有针对实现某一系统性的功能或项目进行详细的讲解，而是介绍了从无到有开发一个 Vue 基础项目的方法和经验，本着“授人以渔”的宗旨给大家进行应用性质的指南，而至于具体的业务及功能场景，则需要大家自己去填充。</p><h2 id="进阶与提升"><a href="#进阶与提升" class="headerlink" title="进阶与提升"></a>进阶与提升</h2><p>由于本小册定位是一本入门提升级的书籍，很多底层和原理性的知识都没能够在此详细介绍，如果你看完本小册并已经充分掌握了小册中的知识体系，或许接下来你可能有点迷茫，不知道下一步该如何完善自己的项目。不用担心，你可以按照下图的知识路线进一步提升自己，将一个纯前端的项目发展为由<strong>前端 —— 中间层</strong>组成的真正前后端分离的项目，如下图所示：</p><img src="/2019/08/30/vue/166b1039eecd39a9.png" class=""><p>本小册讲解的是上图中纯前端部分的内容，而所谓的 Node 中间层其实就是处于前端数据请求与后台响应渲染中间位置的架构，它是运行在服务端的，可以帮助我们启动脱离于后台项目的前端服务并实现数据的中转处理与页面渲染等功能。</p><p>这里我们需要了解 Node.js 的 Web 开发框架 <a href="https://github.com/koajs/koa">Koa</a>（或者 <a href="https://github.com/expressjs/express">Express</a>）, 你可以尝试使用 Koa 项目脚手架 <a href="https://github.com/17koa/koa-generator">koa-generator</a> 来实现一个简单的中间层项目。</p><p>在我们的 Vue 项目中，我们通过 webpack 打包在 dist 目录下输出了用于生产环境的静态文件，那么这些静态文件最后哪里会使用它们？其实我们可以通过启动 Node 服务来进行加载并渲染入口 html，也就是最终我们将这些文件放在服务器上运行的效果。</p><img src="/2019/08/30/vue/166cafe8fabd52d3.png" class=""><p>当然中间层的作用远不止渲染我们打包后的页面这么简单，通过添加一些 <code>middleware</code>（中间件）我们可以将客户端的一些功能转移到服务端处理，比如登录验证、用户信息获取、路由重定向以及各页面业务逻辑的封装等。感兴趣的同学可以以此为进阶和提升的下一个目标。</p><h2 id="作者寄语"><a href="#作者寄语" class="headerlink" title="作者寄语"></a>作者寄语</h2><p>文森特·梵高曾经说过：“不要吹灭你的灵感和你的想象力; 不要成为你的模型的奴隶。” 看完本小册，你可能并没有学到什么，但是我希望你能发现什么，发现自己的灵感，发挥自己的想象力去继续深挖填充小册中介绍的内容，永远不要止步于当下，你还有很多东西需要去学习。</p><p>我们应该抱着玩的心态的去尝试各种新鲜的技术，然后回归运用到应用中去，毕竟世界那么大，每一个 <code>Hello Wrold</code> 实战都是你打开未知大门的钥匙。</p><p>有些时候你花了时间去学习，但是最后总会茫然的感觉自己并没有收获任何实际性的东西，其实你忽略了自己的思想，忽略了思想上的提升。就好比有些人上了四年大学，当他回望大学生涯的时候会发现大学并没有教会他什么，但却给了他一种思想，而这种思想正塑造了自己的人生。</p><p>Vue 的学习并非一朝一夕就能完成的，不要吝啬自己的学习时间，也不要局限于 Vue 本身，因为所有知识都是融会贯通的，当你学会了 <code>React</code> 的时候再来看看 Vue 的文档，或许也会有一种似曾相识的亲切感。</p><p>最后，愿自己码梦为生，笔耕不辍；愿你码到成功，初心不改。</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>如果你喜欢我的文章并想继续关注“劳卜”我的话，可以扫一扫下方的二维码关注我的微信公众号「前端呼啦圈」，第一时间获取我的原创推送。</p> <img src="/2019/08/30/vue/166b60f778687af7.png" class=""><p>同时也可以关注我的博客：<a href="http://www.cnblogs.com/luozhihao/">http://www.cnblogs.com/luozhihao/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 相关文档</title>
    <link href="/2019/08/29/Docker/"/>
    <url>/2019/08/29/Docker/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker-相关文档"><a href="#Docker-相关文档" class="headerlink" title="Docker 相关文档"></a>Docker 相关文档</h2><ul><li><a href="https://blog.csdn.net/r939126607/article/details/83350186">centos7.3环境下的docker安装 切换docker国内镜像源</a></li></ul><p><escape><span id="more"></span></escape></p><ul><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost /]# sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure></li><li><p>过程</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Loaded</span> plugins: fastestmirror<br><span class="hljs-attribute">Loading</span> mirror speeds from cached hostfile<br><span class="hljs-attribute">Package</span> yum-utils-<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">31</span>-<span class="hljs-number">50</span>.el7.noarch already installed and latest version<br><span class="hljs-attribute">Package</span> device-mapper-persistent-data-<span class="hljs-number">0</span>.<span class="hljs-number">7</span>.<span class="hljs-number">3</span>-<span class="hljs-number">3</span>.el7.x86_64 already installed and latest version<br><span class="hljs-attribute">Package</span> <span class="hljs-number">7</span>:lvm2-<span class="hljs-number">2</span>.<span class="hljs-number">02</span>.<span class="hljs-number">180</span>-<span class="hljs-number">10</span>.el7_6.<span class="hljs-number">8</span>.x86_64 already installed and latest version<br><span class="hljs-attribute">Nothing</span> to do<br></code></pre></td></tr></table></figure></li><li><p>添加taobao镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost /]# sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure></li><li><p>log</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">Loaded plugins: fastestmirror<br>adding repo from: http://mirrors.aliyun.<span class="hljs-keyword">com</span>/docker-<span class="hljs-keyword">ce</span>/linux/centos/docker-<span class="hljs-keyword">ce</span>.repo<br>grabbing <span class="hljs-keyword">file</span> http://mirrors.aliyun.<span class="hljs-keyword">com</span>/docker-<span class="hljs-keyword">ce</span>/linux/centos/docker-<span class="hljs-keyword">ce</span>.repo <span class="hljs-keyword">to</span> /etc/yum.repos.d/docker-<span class="hljs-keyword">ce</span>.repo<br>repo saved <span class="hljs-keyword">to</span> /etc/yum.repos.d/docker-<span class="hljs-keyword">ce</span>.repo<br></code></pre></td></tr></table></figure></li><li><p>查看列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost /]# yum list docker-ce --showduplicates | sort -r<br></code></pre></td></tr></table></figure></li><li><p>结果</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Loading</span> mirror speeds from cached hostfile<br><span class="hljs-attribute">Loaded</span> plugins: fastestmirror<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">19</span>.<span class="hljs-number">03</span>.<span class="hljs-number">1</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">19</span>.<span class="hljs-number">03</span>.<span class="hljs-number">0</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">8</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">7</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">6</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">5</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">4</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">3</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">2</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">1</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">3</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">0</span>-<span class="hljs-number">3</span>.el7                     docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">18</span>.<span class="hljs-number">06</span>.<span class="hljs-number">3</span>.ce-<span class="hljs-number">3</span>.el7                    docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">18</span>.<span class="hljs-number">06</span>.<span class="hljs-number">2</span>.ce-<span class="hljs-number">3</span>.el7                    docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">18</span>.<span class="hljs-number">06</span>.<span class="hljs-number">1</span>.ce-<span class="hljs-number">3</span>.el7                    docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">18</span>.<span class="hljs-number">06</span>.<span class="hljs-number">0</span>.ce-<span class="hljs-number">3</span>.el7                    docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">18</span>.<span class="hljs-number">03</span>.<span class="hljs-number">1</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">18</span>.<span class="hljs-number">03</span>.<span class="hljs-number">0</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">12</span>.<span class="hljs-number">1</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">09</span>.<span class="hljs-number">1</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">09</span>.<span class="hljs-number">0</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">06</span>.<span class="hljs-number">2</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">06</span>.<span class="hljs-number">1</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">06</span>.<span class="hljs-number">0</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">03</span>.<span class="hljs-number">3</span>.ce-<span class="hljs-number">1</span>.el7                    docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">03</span>.<span class="hljs-number">2</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">03</span>.<span class="hljs-number">1</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">docker</span>-ce.x86_64            <span class="hljs-number">17</span>.<span class="hljs-number">03</span>.<span class="hljs-number">0</span>.ce-<span class="hljs-number">1</span>.el7.centos             docker-ce-stable<br><span class="hljs-attribute">Available</span> Packages<br></code></pre></td></tr></table></figure></li><li><p>安装最新版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost /]# sudo yum install docker-ce-18.06.3.ce<br></code></pre></td></tr></table></figure></li><li><p>过程</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs subunit">Loaded plugins: fastestmirror<br>Loading mirror speeds from cached hostfile<br>Resolving Dependencies<br>--&gt; Running transaction check<br>---&gt; Package docker-ce.x86_64 0:18.06.3.ce<span class="hljs-string">-3</span>.el7 will be installed<br>--&gt; Processing Dependency: container-selinux &gt;= 2.9 for package: docker-ce<span class="hljs-string">-18</span>.06.3.ce<span class="hljs-string">-3</span>.el7.x86_64<br>--&gt; Processing Dependency: libltdl.so.7()(64bit) for package: docker-ce<span class="hljs-string">-18</span>.06.3.ce<span class="hljs-string">-3</span>.el7.x86_64<br>--&gt; Running transaction check<br>---&gt; Package container-selinux.noarch 2:2.107<span class="hljs-string">-1</span>.el7_6 will be installed<br>---&gt; Package libtool-ltdl.x86_64 0:2.4.2<span class="hljs-string">-22</span>.el7_3 will be installed<br>--&gt; Finished Dependency Resolution<br><br>Dependencies Resolved<br><br>==============================================================================================================================<br> Package                          Arch                  Version                         Repository                       Size<br>==============================================================================================================================<br>Installing:<br> docker-ce                        x86_64                18.06.3.ce<span class="hljs-string">-3</span>.el7                docker-ce-stable                 41 M<br>Installing for dependencies:<br> container-selinux                noarch                2:2.107<span class="hljs-string">-1</span>.el7_6                 extras                           39 k<br> libtool-ltdl                     x86_64                2.4.2<span class="hljs-string">-22</span>.el7_3                  base                             49 k<br><br>Transaction Summary<br>==============================================================================================================================<br>Install  1 Package (<span class="hljs-string">+2</span> Dependent packages)<br><br>Total size: 41 M<br>Total download size: 41 M<br>Installed size: 168 M<br>Is this ok [y/d/N]: y<br>Downloading packages:<br>Delta RPMs disabled because /usr/bin/applydeltarpm not installed.<br>(1/2): libtool-ltdl<span class="hljs-string">-2</span>.4.2<span class="hljs-string">-22</span>.el7_3.x86_64.rpm                                                          |  49 kB  00:00:00     <br>warning: /var/cache/yum/x86_64/7/docker-ce-stable/packages/docker-ce<span class="hljs-string">-18</span>.06.3.ce<span class="hljs-string">-3</span>.el7.x86_64.rpm: Header V4 RSA/SHA512 Signature, key ID 621e9f35: NOKEY<br>Public key for docker-ce<span class="hljs-string">-18</span>.06.3.ce<span class="hljs-string">-3</span>.el7.x86_64.rpm is not installed<br>(2/2): docker-ce<span class="hljs-string">-18</span>.06.3.ce<span class="hljs-string">-3</span>.el7.x86_64.rpm                                                           |  41 MB  00:00:07     <br>------------------------------------------------------------------------------------------------------------------------------<br>Total                                                                                         5.1 MB/s |  41 MB  00:00:07     <br>Retrieving key from https://mirrors.aliyun.com/docker-ce/linux/centos/gpg<br>Importing GPG key 0x621E9F35:<br> Userid     : &quot;Docker Release (CE rpm) &lt;docker@docker.com&gt;&quot;<br> Fingerprint: 060a 61c5 1b55 8a7f 742b 77aa c52f eb6b 621e 9f35<br> From       : https://mirrors.aliyun.com/docker-ce/linux/centos/gpg<br>Is this ok [y/N]: y<br>Running transaction check<br>Running transaction test<br>Transaction test succeeded<br>Running transaction<br>  Installing : 2:container-selinux<span class="hljs-string">-2</span>.107<span class="hljs-string">-1</span>.el7_6.noarch                                                                   1/3 <br>  Installing : libtool-ltdl<span class="hljs-string">-2</span>.4.2<span class="hljs-string">-22</span>.el7_3.x86_64                                                                         2/3 <br>  Installing : docker-ce<span class="hljs-string">-18</span>.06.3.ce<span class="hljs-string">-3</span>.el7.x86_64                                                                          3/3 <br>  Verifying  : libtool-ltdl<span class="hljs-string">-2</span>.4.2<span class="hljs-string">-22</span>.el7_3.x86_64                                                                         1/3 <br>  Verifying  : docker-ce<span class="hljs-string">-18</span>.06.3.ce<span class="hljs-string">-3</span>.el7.x86_64                                                                          2/3 <br>  Verifying  : 2:container-selinux<span class="hljs-string">-2</span>.107<span class="hljs-string">-1</span>.el7_6.noarch                                                                   3/3 <br><br>Installed:<br>  docker-ce.x86_64 0:18.06.3.ce<span class="hljs-string">-3</span>.el7                                                                                         <br><br>Dependency Installed:<br>  container-selinux.noarch 2:2.107<span class="hljs-string">-1</span>.el7_6                        libtool-ltdl.x86_64 0:2.4.2<span class="hljs-string">-22</span>.el7_3                       <br><br>Complete!<br></code></pre></td></tr></table></figure></li><li><p>添加开机启动服务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@localhost /]<span class="hljs-comment"># sudo systemctl start docker</span><br>[root@localhost /]<span class="hljs-comment"># sudo systemctl enable docker</span><br>Created symlink from <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/mu</span>lti-user.target.wants<span class="hljs-regexp">/docker.service to /u</span>sr<span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/</span>docker.service.<br></code></pre></td></tr></table></figure></li><li><p>查看docker版本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@localhost</span> <span class="hljs-string">/</span>]<span class="hljs-comment"># docker version</span><br><span class="hljs-attr">Client:</span><br> <span class="hljs-attr">Version:</span>           <span class="hljs-number">18.06</span><span class="hljs-number">.3</span><span class="hljs-string">-ce</span><br> <span class="hljs-attr">API version:</span>       <span class="hljs-number">1.38</span><br> <span class="hljs-attr">Go version:</span>        <span class="hljs-string">go1.10.3</span><br> <span class="hljs-attr">Git commit:</span>        <span class="hljs-string">d7080c1</span><br> <span class="hljs-attr">Built:</span>             <span class="hljs-string">Wed</span> <span class="hljs-string">Feb</span> <span class="hljs-number">20</span> <span class="hljs-number">02</span><span class="hljs-string">:26:51</span> <span class="hljs-number">2019</span><br> <span class="hljs-attr">OS/Arch:</span>           <span class="hljs-string">linux/amd64</span><br> <span class="hljs-attr">Experimental:</span>      <span class="hljs-literal">false</span><br><br><span class="hljs-attr">Server:</span><br> <span class="hljs-attr">Engine:</span><br>  <span class="hljs-attr">Version:</span>          <span class="hljs-number">18.06</span><span class="hljs-number">.3</span><span class="hljs-string">-ce</span><br>  <span class="hljs-attr">API version:</span>      <span class="hljs-number">1.38</span> <span class="hljs-string">(minimum</span> <span class="hljs-string">version</span> <span class="hljs-number">1.12</span><span class="hljs-string">)</span><br>  <span class="hljs-attr">Go version:</span>       <span class="hljs-string">go1.10.3</span><br>  <span class="hljs-attr">Git commit:</span>       <span class="hljs-string">d7080c1</span><br>  <span class="hljs-attr">Built:</span>            <span class="hljs-string">Wed</span> <span class="hljs-string">Feb</span> <span class="hljs-number">20</span> <span class="hljs-number">02</span><span class="hljs-string">:28:17</span> <span class="hljs-number">2019</span><br>  <span class="hljs-attr">OS/Arch:</span>          <span class="hljs-string">linux/amd64</span><br>  <span class="hljs-attr">Experimental:</span>     <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li><p>建议更换docker的镜像源</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@localhost</span> <span class="hljs-regexp">/]# vi /</span>etc<span class="hljs-regexp">/docker/</span>daemon.json<br></code></pre></td></tr></table></figure></li><li><p>新增内容</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br><span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重启docker</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> /]<span class="hljs-meta"># systemctl restart docker.service</span><br></code></pre></td></tr></table></figure></li><li><p>查看镜像列表</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@localhost /]<span class="hljs-comment"># docker images</span><br>REPOSITORY          <span class="hljs-keyword">TAG</span>                 <span class="hljs-title">IMAGE</span> ID            CREATED             SIZE<br></code></pre></td></tr></table></figure></li><li><p>查看docker版本</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">[root@localhost /]<span class="hljs-comment"># docker -v</span><br>Docker <span class="hljs-built_in">version</span> <span class="hljs-number">18.06</span><span class="hljs-number">.3</span>-ce, build d7080c1<br></code></pre></td></tr></table></figure></li><li><p>卸载已安装的docker</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livescript">yum -y remove docker <span class="hljs-string">\</span><br>              docker-ce <span class="hljs-string">\</span><br>              docker-ce-cli <span class="hljs-string">\</span><br>              containerd.io <span class="hljs-string">\</span><br>              docker-client <span class="hljs-string">\</span><br>              docker-client-latest <span class="hljs-string">\</span><br>              docker-common <span class="hljs-string">\</span><br>              docker-latest <span class="hljs-string">\</span><br>              docker-latest-logrotate <span class="hljs-string">\</span><br>              docker-logrotate <span class="hljs-string">\</span><br>              docker-engine<br></code></pre></td></tr></table></figure></li><li><p>安装适合的版本</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> -y install docker-ce-<span class="hljs-number">18</span>.<span class="hljs-number">03</span>.<span class="hljs-number">0</span>.ce<br></code></pre></td></tr></table></figure></li><li><p>查看镜像列表命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span><br></code></pre></td></tr></table></figure></li><li><p>镜像列表</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@localhost demo001]<span class="hljs-comment"># docker images</span><br>REPOSITORY          <span class="hljs-keyword">TAG</span>                 <span class="hljs-title">IMAGE</span> ID            CREATED             SIZE<br><span class="hljs-tag">&lt;none&gt;</span>              <span class="hljs-tag">&lt;none&gt;</span>              <span class="hljs-number">4</span>fba9be82837        <span class="hljs-number">8</span> minutes ago       <span class="hljs-number">995M</span>B<br><span class="hljs-keyword">node</span>                <span class="hljs-title">latest</span>              b18afbdfc458        <span class="hljs-number">8</span> days ago          <span class="hljs-number">908M</span>B<br>centos              <span class="hljs-number">7</span>                   <span class="hljs-number">67</span>fa590cfc1c        <span class="hljs-number">9</span> days ago          <span class="hljs-number">202M</span>B<br>centos              latest              <span class="hljs-number">67</span>fa590cfc1c        <span class="hljs-number">9</span> days ago          <span class="hljs-number">202M</span>B<br><span class="hljs-keyword">node</span>                <span class="hljs-title">8</span>.<span class="hljs-number">11.3</span>-slim         <span class="hljs-number">1</span>d5555ef5229        <span class="hljs-number">13</span> months ago       <span class="hljs-number">182M</span>B<br></code></pre></td></tr></table></figure></li><li><p>根据镜像id设置Tag</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker <span class="hljs-keyword">tag</span> <span class="hljs-title">4fba9be82837</span> todoapp<br></code></pre></td></tr></table></figure></li><li><p>运行实例</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -p <span class="hljs-number">8000</span>:<span class="hljs-number">8000</span> --name example1 todoapp<br></code></pre></td></tr></table></figure></li><li><p>在浏览器运行</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//10.100.254.229:8000</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>CentOS</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第34周</title>
    <link href="/2019/08/19/Year2019Week34/"/>
    <url>/2019/08/19/Year2019Week34/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第34周（2019-08-19-2019-08-25）"><a href="#2019年第34周（2019-08-19-2019-08-25）" class="headerlink" title="2019年第34周（2019&#x2F;08&#x2F;19~2019&#x2F;08&#x2F;25）"></a>2019年第34周（2019&#x2F;08&#x2F;19~2019&#x2F;08&#x2F;25）</h2><ol><li><a href="https://www.jianshu.com/p/7d2e584cbcc1">node模块之xlsx使用</a></li><li><a href="https://www.cnblogs.com/yadiblogs/p/8818277.html">vue（一）使用vue-cli搭建项目</a></li><li><a href="https://blog.csdn.net/wq18512847606/article/details/80790584">vue + iview项目构建</a></li><li><a href="https://juejin.im/post/58c0e882da2f60186d6d4818">vue + iview 项目实践总结 【完】</a></li><li><a href="https://blog.csdn.net/xuehu837769474/article/details/81984937">Vue+ElementUI从零开始搭建自己的网站（一、环境搭建）</a></li><li><a href="https://blog.csdn.net/xuehu837769474/article/details/82012361">Vue+ElementUI从零开始搭建自己的网站（二、导航组件）</a></li><li><a href="https://blog.csdn.net/xuehu837769474/article/details/82012917">Vue+ElementUI从零开始搭建自己的网站（三、组件间的通信）</a></li><li><a href="https://www.cnblogs.com/andysd/p/3809960.html">SQL SERVER 2008分页</a></li><li><a href="https://hot.cnbeta.com/articles/game/878979.htm">教育类游戏前景好 美国已超越中国成为最大购买国</a></li><li><a href="https://www.cnblogs.com/peiyu1988/p/7766594.html">Nodejs MSSQL详细解读</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>game</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BJC_Efficiency 相关文档</title>
    <link href="/2019/08/13/BJC_Efficiency/"/>
    <url>/2019/08/13/BJC_Efficiency/</url>
    
    <content type="html"><![CDATA[<p>自动生成 Model</p><p><escape><span id="more"></span></escape></p><h2 id="自动生成-Model"><a href="#自动生成-Model" class="headerlink" title="自动生成 Model"></a>自动生成 Model</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;BJC_Efficiency&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;dialect&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;mssql&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;10.100.254.163&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;user&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;sa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;bjc.123&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;database&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;BJC_Efficiency&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tables&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;COM_PG&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;COM_Organization&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;PE_PerformanceResult&quot;</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="新建-Run-Debug-配置："><a href="#新建-Run-Debug-配置：" class="headerlink" title="新建 Run&#x2F;Debug 配置："></a>新建 Run&#x2F;Debug 配置：</h3><ol><li>【Add New Configuration】-&gt;【Node.js】</li><li>【Name: DBModelBuild】</li><li>[Working directory: D:\svn_mobile3\PDRC_Mobile\Application_Development_v20190716\10_System\bjc_logic\service_performance\node_modules@bjc\sequelize-auto-sql\bin】</li><li>【JavaScript file: build.js】</li><li>运行，src下会自动生成相关的Model和DataManager类。</li></ol><h2 id="Excel-读写"><a href="#Excel-读写" class="headerlink" title="Excel 读写"></a>Excel 读写</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;@bjc/excelfiles_proxy&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;xlsx&quot;</span>: <span class="hljs-string">&quot;^0.15.0&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>src\xlsx_proxy.js<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nodejs"><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nodejs"><br></code></pre></td></tr></table></figure><h2 id="调用RESTful"><a href="#调用RESTful" class="headerlink" title="调用RESTful"></a>调用RESTful</h2><h3 id="Method-findPerformanceResult"><a href="#Method-findPerformanceResult" class="headerlink" title="Method: findPerformanceResult"></a>Method: findPerformanceResult</h3><ul><li><p>url:　<a href="http://127.0.0.1:9901/performance/findPerformanceResult">http://127.0.0.1:9901/performance/findPerformanceResult</a></p></li><li><p>method: POST</p></li><li><p>body: raw&#x2F;JSON(application&#x2F;json)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;contextId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;XXXX&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;performanceQuarter&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2019-07-01&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;leaderWorkId&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;B-00010&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;pageCount&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;4&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;pageNumber&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;WorkID&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;orderType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ASC&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>result: </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;rn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;WorkId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;B-00045&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;IsManualInput&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;PerformanceQuarter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2019-07-01T00:00:00.000Z&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;RealCapacity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.8090909090909089</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;RealYield&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10.024510183109221</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;WorkSaturation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.177669615846371</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;PerformanceLevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;B&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;rn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;6&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;WorkId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;B-00097&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;IsManualInput&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;PerformanceQuarter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2019-07-01T00:00:00.000Z&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;RealCapacity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2.1909090909090914</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;RealYield&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">13.056020539075796</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;WorkSaturation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.11696451093374</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;PerformanceLevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;B&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;rn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;WorkId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;B-00111&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;IsManualInput&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;PerformanceQuarter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2019-07-01T00:00:00.000Z&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;RealCapacity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3.9</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;RealYield&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">39.57148519805875</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;WorkSaturation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.984854113956933</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;PerformanceLevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;B&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;rn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;8&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;WorkId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;B-00146&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;IsManualInput&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;PerformanceQuarter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2019-07-01T00:00:00.000Z&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;RealCapacity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3.127272727272727</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;RealYield&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21.052609318033028</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;WorkSaturation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.3738392686547716</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;PerformanceLevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Method-savePerformanceResult"><a href="#Method-savePerformanceResult" class="headerlink" title="Method: savePerformanceResult"></a>Method: savePerformanceResult</h3><ul><li><p>url:　<a href="http://127.0.0.1:9901/performance/savePerformanceResult">http://127.0.0.1:9901/performance/savePerformanceResult</a></p></li><li><p>method: POST</p></li><li><p>body: raw&#x2F;JSON(application&#x2F;json)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;contextId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;XXXX&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;performanceQuarter&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2019-07-01&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;workId&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;B-00010&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;performanceLevel&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;B&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>result:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="多表联查优化"><a href="#多表联查优化" class="headerlink" title="多表联查优化"></a>多表联查优化</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> TOP <span class="hljs-number">10</span> * <span class="hljs-keyword">FROM</span> (<br><span class="hljs-keyword">SELECT</span> row_number () <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> WorkId) <span class="hljs-keyword">AS</span> rn,*<span class="hljs-keyword">FROM</span> <br>(<br><span class="hljs-keyword">SELECT</span> <br>t2.WorkId,<br>t3.IsManualInput,<br>t3.PerformanceQuarter,<br>t4.RealCapacity,<br>t4.RealYield,<br>t4.WorkSaturation,<br>t3.PerformanceLevel <br><span class="hljs-keyword">FROM</span> COM_Organization t1 <br><span class="hljs-keyword">JOIN</span> COM_Employee t2 <br><span class="hljs-keyword">ON</span> t2.DepartmentID=t1.DepartmentID <span class="hljs-keyword">AND</span> t2.WorkId!=t1.DepartmentLeaderWorkID <br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PE_PerformanceResult t3 <br><span class="hljs-keyword">ON</span>  t3.PerformanceQuarter=<span class="hljs-string">&#x27;2019-07-01&#x27;</span> <span class="hljs-keyword">and</span> t3.PGWorkID=t2.WorkId<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> (<br><span class="hljs-keyword">SELECT</span> <br>PGWorkID,<br><span class="hljs-built_in">SUM</span> (RealCapacity) <span class="hljs-keyword">AS</span> RealCapacity,<br><span class="hljs-built_in">SUM</span> (RealYield) <span class="hljs-keyword">AS</span> RealYield,<br><span class="hljs-built_in">AVG</span> (WorkSaturation) <span class="hljs-keyword">AS</span> WorkSaturation <br><span class="hljs-keyword">FROM</span> <br>(<br><span class="hljs-keyword">SELECT</span> <br>PGWorkID,MonthDate,<br><span class="hljs-built_in">MAX</span> (RealCapacity) <span class="hljs-keyword">AS</span> RealCapacity,<br><span class="hljs-built_in">SUM</span> (RealYield) <span class="hljs-keyword">AS</span> RealYield,<br><span class="hljs-built_in">MAX</span> (WorkSaturation) <span class="hljs-keyword">AS</span> WorkSaturation <br><span class="hljs-keyword">FROM</span> BI_Inc_EmployeeMonthlyBills <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> PGWorkID,MonthDate<br>) t5 <span class="hljs-keyword">WHERE</span> MonthDate <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;2019-07-01&#x27;</span>,<span class="hljs-string">&#x27;2019-08-01&#x27;</span>,<span class="hljs-string">&#x27;2019-09-01&#x27;</span>) <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> PGWorkID<br>) t4 <span class="hljs-keyword">ON</span> t4.PGWorkID=t2.WorkId <br><span class="hljs-keyword">WHERE</span> t1.DepartmentLeaderWorkID=<span class="hljs-string">&#x27;B-00010&#x27;</span><br>) t6<br>) t7 <br><span class="hljs-keyword">WHERE</span> rn&gt;<span class="hljs-number">190</span> <span class="hljs-keyword">AND</span> rn&lt;= <span class="hljs-number">200</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> WorkID <span class="hljs-keyword">ASC</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rn</span>WorkIdIsManualInputPerformanceQuarterRealCapacityRealYieldWorkSaturationPerformanceLevel<br><span class="hljs-attribute">191</span>B-<span class="hljs-number">01946</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">3</span>.<span class="hljs-number">8181818181818180</span><span class="hljs-number">1</span>.<span class="hljs-number">234703067573610</span><span class="hljs-number">0</span>.<span class="hljs-number">1553764221168356</span>A<br><span class="hljs-attribute">192</span>B-<span class="hljs-number">01947</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">2</span>.<span class="hljs-number">9000000000000000</span><span class="hljs-number">0</span>.<span class="hljs-number">558169415157516</span><span class="hljs-number">0</span>.<span class="hljs-number">1396570045274133</span>B<br><span class="hljs-attribute">193</span>B-<span class="hljs-number">01953</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">3</span>.<span class="hljs-number">7545454545454550</span><span class="hljs-number">21</span>.<span class="hljs-number">144014548130287</span><span class="hljs-number">1</span>.<span class="hljs-number">1020818503759093</span>S<br><span class="hljs-attribute">194</span>B-<span class="hljs-number">01962</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">2</span>.<span class="hljs-number">6318181818181820</span><span class="hljs-number">3</span>.<span class="hljs-number">724766914439220</span><span class="hljs-number">0</span>.<span class="hljs-number">3096933942466470</span>B<br><span class="hljs-attribute">195</span>B-<span class="hljs-number">01965</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">4</span>.<span class="hljs-number">3363636363636370</span><span class="hljs-number">4</span>.<span class="hljs-number">839967513395080</span><span class="hljs-number">0</span>.<span class="hljs-number">2941409418006996</span>D<br><span class="hljs-attribute">196</span>B-<span class="hljs-number">01976</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">3</span>.<span class="hljs-number">6545454545454550</span><span class="hljs-number">9</span>.<span class="hljs-number">470733298575336</span><span class="hljs-number">0</span>.<span class="hljs-number">6903430017060930</span>B<br><span class="hljs-attribute">197</span>B-<span class="hljs-number">02005</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">2</span>.<span class="hljs-number">3636363636363640</span><span class="hljs-number">5</span>.<span class="hljs-number">122364662635264</span><span class="hljs-number">0</span>.<span class="hljs-number">4986870407582120</span>B<br><span class="hljs-attribute">198</span>B-<span class="hljs-number">02006</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">3</span>.<span class="hljs-number">7000000000000000</span><span class="hljs-number">5</span>.<span class="hljs-number">606239704435784</span><span class="hljs-number">0</span>.<span class="hljs-number">4057021572542080</span>A<br><span class="hljs-attribute">199</span>B-<span class="hljs-number">02008</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">1</span>.<span class="hljs-number">9772727272727270</span><span class="hljs-number">19</span>.<span class="hljs-number">069847624367282</span><span class="hljs-number">1</span>.<span class="hljs-number">7885872213177436</span>S<br><span class="hljs-attribute">200</span>B-<span class="hljs-number">02012</span><span class="hljs-number">0</span><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span><span class="hljs-number">2</span>.<span class="hljs-number">5000000000000000</span><span class="hljs-number">11</span>.<span class="hljs-number">711574060042021</span><span class="hljs-number">1</span>.<span class="hljs-number">1842042415696036</span>B<br></code></pre></td></tr></table></figure><ul><li><p>问题分析：<br>  t4表查询的结果的所有键都没有索引，增加一个索引解决问题。</p></li><li><p>问题解决<br>  给表【BI_Inc_EmployeeMonthlyBills】的【PGWorkID】添加索引，效率从2~3秒缩减到1秒以内。</p></li></ul><h2 id="iView-AutoComplete"><a href="#iView-AutoComplete" class="headerlink" title="iView AutoComplete"></a>iView AutoComplete</h2><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AutoComplete</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value2&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">@<span class="hljs-attr">on-search</span>=<span class="hljs-string">&quot;filterMethod2&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;工号&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:200px&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in data2&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.value&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.workId&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item.value</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">AutoComplete</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&lt;script&gt;<br>    export default &#123;<br>        data () &#123;<br>            return &#123;<br>                value2: &#x27;&#x27;,<br>data2: [&#123;workId:&#x27;B-<span class="hljs-number">0002</span>1&#x27;,value: &#x27;B-<span class="hljs-number">0002</span>1[PG_B-<span class="hljs-number">0002</span>1]&#x27;&#125;,<br>  &#123;workId:&#x27;B-<span class="hljs-number">0002</span>2&#x27;,value: &#x27;B-<span class="hljs-number">0002</span>2[PG_B-<span class="hljs-number">0002</span>2]&#x27;&#125;,<br>  &#123;workId:&#x27;B-<span class="hljs-number">0002</span>5&#x27;,value: &#x27;B-<span class="hljs-number">0002</span>5[PG_B-<span class="hljs-number">0002</span>5]&#x27;&#125;,<br>  &#123;workId:&#x27;B-<span class="hljs-number">1003</span>6&#x27;,value: &#x27;B-<span class="hljs-number">1003</span>6[PG_B-<span class="hljs-number">0003</span>6]&#x27;&#125;,<br>  &#123;workId:&#x27;B-<span class="hljs-number">1004</span>5&#x27;,value: &#x27;B-<span class="hljs-number">1004</span>5[PG_B-<span class="hljs-number">0004</span>5]&#x27;&#125;],<br>data2Backup: [&#123;workId:&#x27;B-<span class="hljs-number">0002</span>1&#x27;,value: &#x27;B-<span class="hljs-number">0002</span>1[PG_B-<span class="hljs-number">0002</span>1]&#x27;&#125;,<br>  &#123;workId:&#x27;B-<span class="hljs-number">0002</span>2&#x27;,value: &#x27;B-<span class="hljs-number">0002</span>2[PG_B-<span class="hljs-number">0002</span>2]&#x27;&#125;,<br>  &#123;workId:&#x27;B-<span class="hljs-number">0002</span>5&#x27;,value: &#x27;B-<span class="hljs-number">0002</span>5[PG_B-<span class="hljs-number">0002</span>5]&#x27;&#125;,<br>  &#123;workId:&#x27;B-<span class="hljs-number">1003</span>6&#x27;,value: &#x27;B-<span class="hljs-number">1003</span>6[PG_B-<span class="hljs-number">0003</span>6]&#x27;&#125;,<br>  &#123;workId:&#x27;B-<span class="hljs-number">1004</span>5&#x27;,value: &#x27;B-<span class="hljs-number">1004</span>5[PG_B-<span class="hljs-number">0004</span>5]&#x27;&#125;],<br>            &#125;<br>        &#125;,<br>methods: &#123;<br>filterMethod2(value) &#123;<br><span class="hljs-comment">//debugger;</span><br>this.data2 = this.data2Backup;<br>this.data2 = this.data2.filter((item) =&gt; &#123;<br>  return item.workId.indexOf(value) !== -<span class="hljs-number">1</span>;<br>&#125;);<br><span class="hljs-comment">//option.value.toUpperCase().indexOf(value.toUpperCase()) !== -1;</span><br>&#125;<br>&#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><ul><li><p>方法定义 <strong>async</strong> 和 <strong>await</strong> 成对出现  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-title function_">findJobLevels</span>(<span class="hljs-params">workidListJson</span>)&#123;<br>    <span class="hljs-keyword">let</span> jobLevelArray = [];<br>    <span class="hljs-keyword">let</span> url = <span class="hljs-string">&#x27;http://kaoqin.bill-jc.com/wechatOA/api/salaryRate/getUserInfo&#x27;</span>;<br><br>    <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">post</span>(url, workidListJson)<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>            <span class="hljs-comment">//console.log(response.data.Data);</span><br>            response.<span class="hljs-property">data</span>.<span class="hljs-property">Data</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br>                jobLevelArray.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-title class_">WorkId</span>: item.<span class="hljs-property">workId</span>, <span class="hljs-title class_">JobLevel</span>: item.<span class="hljs-property">education</span>&#125;);<span class="hljs-comment">//jobLevel</span><br>            &#125;);<br>        &#125;)<br>        .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>        &#125;);<br><br>    <span class="hljs-keyword">return</span> jobLevelArray;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方法调用：异步的方法用异步的方式调用，在then方面里面用匿名函数处理返回的对象  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> body = &#123;<br>    <span class="hljs-string">&quot;workidList&quot;</span>: <span class="hljs-string">&quot;B-203,B-35219,B-31523,B-34142&quot;</span><br>&#125;;<br><br><br><span class="hljs-keyword">let</span> performanceResultService = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PerformanceResultService</span>(config);<br><span class="hljs-comment">// 异步的方法用异步的方式调用，在then方面里面用匿名函数处理返回的对象</span><br>performanceResultService.<span class="hljs-title function_">findJobLevels</span>(body).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>)=&gt;</span>&#123;<br>    result.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item.<span class="hljs-property">WorkId</span> + <span class="hljs-string">&quot;:&quot;</span> + item.<span class="hljs-property">JobLevel</span>)<br>    &#125;);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h2 id="多表联查"><a href="#多表联查" class="headerlink" title="多表联查"></a>多表联查</h2><ul><li><p>config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> appConfig = &#123;<br>    <span class="hljs-attr">connections</span>: &#123;<br>        <span class="hljs-string">&quot;MSSQL_CONNECTION&quot;</span>: &#123;<br>            <span class="hljs-attr">dbType</span>: <span class="hljs-string">&quot;mssql&quot;</span>,<br>            <span class="hljs-attr">connectionString</span>: &#123;<br>                <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;sa&#x27;</span>,<br>                <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;XXX&#x27;</span>,<br>                <span class="hljs-attr">server</span>: <span class="hljs-string">&#x27;10.100.254.XXX&#x27;</span>,<br>                <span class="hljs-attr">database</span>: <span class="hljs-string">&#x27;XXX&#x27;</span>,<br>                <span class="hljs-attr">port</span>: <span class="hljs-number">1433</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = appConfig<br></code></pre></td></tr></table></figure></li><li><p>emp.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Sequelize</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;sequelize&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Op</span> = <span class="hljs-title class_">Sequelize</span>.<span class="hljs-property">Op</span>;<br><span class="hljs-keyword">let</span> config = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../config&quot;</span>);<br><br><span class="hljs-keyword">const</span> sequelize = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sequelize</span>(config.<span class="hljs-property">connections</span>.<span class="hljs-property">MSSQL_CONNECTION</span>.<span class="hljs-property">connectionString</span>.<span class="hljs-property">database</span>, config.<span class="hljs-property">connections</span>.<span class="hljs-property">MSSQL_CONNECTION</span>.<span class="hljs-property">connectionString</span>.<span class="hljs-property">user</span>, config.<span class="hljs-property">connections</span>.<span class="hljs-property">MSSQL_CONNECTION</span>.<span class="hljs-property">connectionString</span>.<span class="hljs-property">password</span>, &#123;<br>    <span class="hljs-attr">host</span>: config.<span class="hljs-property">connections</span>.<span class="hljs-property">MSSQL_CONNECTION</span>.<span class="hljs-property">connectionString</span>.<span class="hljs-property">server</span>,<br>    <span class="hljs-attr">dialect</span>: <span class="hljs-string">&#x27;mssql&#x27;</span>,<br>    <span class="hljs-attr">pool</span>: &#123;<br>        <span class="hljs-attr">max</span>: <span class="hljs-number">5</span>,<br>        <span class="hljs-attr">min</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">idle</span>: <span class="hljs-number">30000</span><br>    &#125;<br>&#125;);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">DataTypes</span> = <span class="hljs-title class_">Sequelize</span>.<span class="hljs-property">DataTypes</span>;<br><br><span class="hljs-keyword">const</span> users = sequelize.<span class="hljs-title function_">define</span>(<span class="hljs-string">&#x27;u&#x27;</span>, &#123;<br>    <span class="hljs-title class_">WorkId</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-title function_">STRING</span>(<span class="hljs-number">50</span>),<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">primaryKey</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;工号&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">UserName</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">STRING</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;姓名&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">UserPWD</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">STRING</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;密码&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">CreateTime</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">BIGINT</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;记录时间&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">DepartmentID</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-title function_">STRING</span>(<span class="hljs-number">50</span>),<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;部门编号&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">MountGuardDate</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">BIGINT</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;入职时间&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">LaidOffDate</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">BIGINT</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;离职时间&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">Email</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">STRING</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;邮箱&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">Phone</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-title function_">STRING</span>(<span class="hljs-number">16</span>),<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;电话&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">IsLock</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">INTEGER</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;是否锁定&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">Gender</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-title function_">STRING</span>(<span class="hljs-number">50</span>),<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;性别&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">EmployeeType</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">INTEGER</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;员工类型&quot;</span><br>    &#125;<br>&#125;, &#123;<br>    <span class="hljs-attr">tableName</span>: <span class="hljs-string">&#x27;COM_Employee&#x27;</span><br>&#125;);<br><br><span class="hljs-keyword">const</span> organizations = sequelize.<span class="hljs-title function_">define</span>(<span class="hljs-string">&#x27;o&#x27;</span>, &#123;<br>    <span class="hljs-title class_">DepartmentID</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-title function_">STRING</span>(<span class="hljs-number">50</span>),<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">primaryKey</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;部门编号&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">DepartmentName</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">STRING</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;部门名称&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">DepartmentLeaderWorkID</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-title function_">STRING</span>(<span class="hljs-number">50</span>),<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;部门领导工号&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">DepartmentLeaderName</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-title function_">STRING</span>(<span class="hljs-number">16</span>),<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;部门领导姓名&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">ParentDepartmentID</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">STRING</span>,<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;上级部门&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">DepartmentLeaderEmail</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-title function_">STRING</span>(<span class="hljs-number">200</span>),<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;部门领导邮箱&quot;</span><br>    &#125;,<br>    <span class="hljs-title class_">DepartmentLeaderPhone</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-title function_">STRING</span>(<span class="hljs-number">16</span>),<br>        <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">comment</span>: <span class="hljs-string">&quot;部门领导电话&quot;</span><br>    &#125;<br>&#125;, &#123;<br>    <span class="hljs-attr">tableName</span>: <span class="hljs-string">&#x27;COM_Organization&#x27;</span><br>&#125;);<br>users.<span class="hljs-title function_">belongsTo</span>(organizations, &#123; <span class="hljs-attr">foreignKey</span>: <span class="hljs-string">&#x27;DepartmentID&#x27;</span>, <span class="hljs-attr">targetKey</span>: <span class="hljs-string">&#x27;DepartmentID&#x27;</span>, <span class="hljs-attr">as</span>: <span class="hljs-string">&#x27;d&#x27;</span> &#125;);<br><br>users.<span class="hljs-title function_">findAll</span>(&#123;<br>    <span class="hljs-attr">attributes</span>: [<span class="hljs-string">&#x27;WorkId&#x27;</span>, <span class="hljs-string">&#x27;UserName&#x27;</span>],<br>    <span class="hljs-attr">include</span>: [&#123;<br>        <span class="hljs-attr">model</span>: organizations,<br>        <span class="hljs-attr">as</span>: <span class="hljs-string">&#x27;d&#x27;</span>,<br>        <span class="hljs-attr">attributes</span>: [<span class="hljs-string">&#x27;DepartmentLeaderId&#x27;</span>],<br>        <span class="hljs-attr">where</span>: &#123;<br>            <span class="hljs-title class_">DepartmentLeaderWorkID</span>:  [<span class="hljs-string">&#x27;B-00010&#x27;</span>, <span class="hljs-string">&#x27;B-00011&#x27;</span>]<br>        &#125;<br>    &#125;],<br>    <span class="hljs-comment">//raw:true</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(result))<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>参考文档：<a href="https://www.cnblogs.com/hss-blog/articles/10220267.html">Sequelize 关联查询数据合并字段</a></p></li></ul><h1 id="初始化数据（员工表和部门表）"><a href="#初始化数据（员工表和部门表）" class="headerlink" title="初始化数据（员工表和部门表）"></a>初始化数据（员工表和部门表）</h1><ul><li>查询得到所有结果及关系<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">SELECT<br><span class="hljs-built_in">t1</span>.WorkId,<br><span class="hljs-built_in">t1</span>.UserName,<br><span class="hljs-built_in">t1</span>.UserPWD,<br><span class="hljs-built_in">t1</span>.CreateTime,<br><span class="hljs-built_in">t1</span>.DepartmentID,<br><span class="hljs-built_in">t2</span>.DepartmentLeaderWorkID,<br><span class="hljs-built_in">t3</span>.DepartmentLeaderWorkID ParentDepartmentLeaderWorkID,<br><span class="hljs-built_in">t1</span>.MountGuardDate,<br><span class="hljs-built_in">t1</span>.LaidOffDate,<br><span class="hljs-built_in">t1</span>.Email,<br><span class="hljs-built_in">t1</span>.Phone,<br><span class="hljs-built_in">t1</span>.IsLock,<br><span class="hljs-built_in">t1</span>.Gender,<br><span class="hljs-built_in">t1</span>.EmployeeType <br>FROM<br>COM_Employee <span class="hljs-built_in">t1</span>,<br>COM_Organization <span class="hljs-built_in">t2</span><br>LEFT <span class="hljs-keyword">JOIN </span>COM_Organization <span class="hljs-built_in">t3</span> ON <span class="hljs-built_in">t2</span>.ParentDepartmentID= <span class="hljs-built_in">t3</span>.DepartmentID <br>WHERE<br><span class="hljs-built_in">t1</span>.DepartmentID= <span class="hljs-built_in">t2</span>.DepartmentID;<br></code></pre></td></tr></table></figure></li><li>查询结果<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs subunit">WorkIdUserNameUserPWDCreateTimeDepartmentIDDepartmentLeaderWorkIDParentDepartmentLeaderWorkIDMountGuardDateLaidOffDateEmailPhoneIsLockGenderEmployeeType<br>B<span class="hljs-string">-00001</span>TE_B<span class="hljs-string">-00001</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000da520f0-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00001</span>NULL2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00001@billjc.comNULLNULLNULL1<br>B<span class="hljs-string">-00002</span>TE_B<span class="hljs-string">-00002</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000dab6280-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00002</span>NULL2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00002@billjc.comNULLNULLNULL1<br>B<span class="hljs-string">-00003</span>TL_B<span class="hljs-string">-00003</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000dac25d0-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00003</span>B<span class="hljs-string">-00001</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00003@billjc.comNULLNULLNULL2<br>B<span class="hljs-string">-00004</span>TL_B<span class="hljs-string">-00004</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000dace920-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00004</span>B<span class="hljs-string">-00002</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00004@billjc.comNULLNULLNULL2<br>B<span class="hljs-string">-00005</span>TL_B<span class="hljs-string">-00005</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000dadac70-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00005</span>B<span class="hljs-string">-00002</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00005@billjc.comNULLNULLNULL2<br>B<span class="hljs-string">-00006</span>TL_B<span class="hljs-string">-00006</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000dae48b0-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-30669</span>B<span class="hljs-string">-00001</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00006@billjc.comNULLNULLNULL2<br>B<span class="hljs-string">-00007</span>TL_B<span class="hljs-string">-00007</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000daf0c00-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00007</span>B<span class="hljs-string">-00002</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00007@billjc.comNULLNULLNULL2<br>B<span class="hljs-string">-00008</span>TL_B<span class="hljs-string">-00008</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000dafa840-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00008</span>B<span class="hljs-string">-00001</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00008@billjc.comNULLNULLNULL2<br>B<span class="hljs-string">-00009</span>TL_B<span class="hljs-string">-00009</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000db06b90-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00009</span>B<span class="hljs-string">-00002</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00009@billjc.comNULLNULLNULL2<br>B<span class="hljs-string">-00010</span>TL_B<span class="hljs-string">-00010</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000db12ee0-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00010</span>B<span class="hljs-string">-00001</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00010@billjc.comNULLNULLNULL2<br>B<span class="hljs-string">-00011</span>TL_B<span class="hljs-string">-00011</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000db1cb20-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00011</span>B<span class="hljs-string">-00001</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00011@billjc.comNULLNULLNULL2<br>B<span class="hljs-string">-00012</span>TL_B<span class="hljs-string">-00012</span>1232019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.0000db28e70-bf2d<span class="hljs-string">-11</span>e9-b3d5-f7c4144c6d71B<span class="hljs-string">-00012</span>B<span class="hljs-string">-00002</span>2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00.000NULLte00012@billjc.comNULLNULLNULL2<br>...<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Activiti6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第31周</title>
    <link href="/2019/08/12/Year2019Week33/"/>
    <url>/2019/08/12/Year2019Week33/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第31周（2019-08-12-2019-08-18）"><a href="#2019年第31周（2019-08-12-2019-08-18）" class="headerlink" title="2019年第31周（2019&#x2F;08&#x2F;12~2019&#x2F;08&#x2F;18）"></a>2019年第31周（2019&#x2F;08&#x2F;12~2019&#x2F;08&#x2F;18）</h2><ol><li><a href="https://www.jianshu.com/p/7d2e584cbcc1">node模块之xlsx使用</a></li><li><a href="https://www.cnblogs.com/yadiblogs/p/8818277.html">vue（一）使用vue-cli搭建项目</a></li><li><a href="https://blog.csdn.net/wq18512847606/article/details/80790584">vue + iview项目构建</a></li><li><a href="https://juejin.im/post/58c0e882da2f60186d6d4818">vue + iview 项目实践总结 【完】</a></li><li><a href="https://blog.csdn.net/xuehu837769474/article/details/81984937">Vue+ElementUI从零开始搭建自己的网站（一、环境搭建）</a></li><li><a href="https://blog.csdn.net/xuehu837769474/article/details/82012361">Vue+ElementUI从零开始搭建自己的网站（二、导航组件）</a></li><li><a href="https://blog.csdn.net/xuehu837769474/article/details/82012917">Vue+ElementUI从零开始搭建自己的网站（三、组件间的通信）</a></li><li><a href="https://www.cnblogs.com/andysd/p/3809960.html">SQL SERVER 2008分页</a></li><li><a href="https://hot.cnbeta.com/articles/game/878979.htm">教育类游戏前景好 美国已超越中国成为最大购买国</a></li><li><a href="https://www.cnblogs.com/peiyu1988/p/7766594.html">Nodejs MSSQL详细解读</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>game</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PowerDesigner 反向工程 - SQL Server 2008</title>
    <link href="/2019/08/08/PowerDesigner/"/>
    <url>/2019/08/08/PowerDesigner/</url>
    
    <content type="html"><![CDATA[<ul><li>PowerDesigner 反向工程 - SQL Server 2008<br><escape><span id="more"></span></escape></li></ul><p>&nbsp;</p><h2 id="反向工程"><a href="#反向工程" class="headerlink" title="反向工程"></a>反向工程</h2><ol><li><p>依次选择菜单：【File】-&gt;【Reverse Engineer】-&gt;【Database…】<br><img src="/PowerDesigner%5CPD_001.png">                                                            </p></li><li><p>【DBMS】选择【Miscrosoft SQL Server 2008】，然后点击【确定】按钮：<br><img src="/PowerDesigner%5CPD_002.png">                                                            </p></li><li><p>在【Connect to Data Source】面板中，【Data Source】选择【ODBC machine data source:】，然后点击【Configure…】按钮：<br><img src="/PowerDesigner%5CPD_003.png">                                                            </p></li><li><p>在【Configure Data Connections】面板中，选择第一个面板【ODBC Machine Data Sources】，然后点击【Add Data Source】按钮：<br><img src="/PowerDesigner%5CPD_004.png"></p></li><li><p>在弹出的【创建新数据源】面板中，选择【系统数据源(只用于当前机器)】：<br><img src="/PowerDesigner%5CPD_005.png">                                                            </p></li><li><p>接下来，选择【SQL Server】<br><img src="/PowerDesigner%5CPD_006.png">                                                            </p></li><li><p>最后，点击【完成】按钮：<br><img src="/PowerDesigner%5CPD_007.png">                                                                                                                       </p></li><li><p>在弹出的【创建到 SQL Server 的新数据源】面板中，依次输入【名称】和【服务器IP地址】：<br><img src="/PowerDesigner%5CPD_008.png">                                                            </p></li><li><p>接下来，选择【使用用户输入登录ID和密码的 SQL Server 验证】，同时输入【登录用户名】和【密码】：<br><img src="/PowerDesigner%5CPD_009.png">                                                            </p></li><li><p>接下来，不做任何修改，点击【下一步】：<br><img src="/PowerDesigner%5CPD_010.png"></p></li><li><p>最后，点击【完成】按钮，数据源创建完成：<br><img src="/PowerDesigner%5CPD_011.png">                                                            </p></li><li><p>接下来，在【ODBC Microsoft SQL Server 安装】面板中，点击【测试数据源】按钮：<br><img src="/PowerDesigner%5CPD_012.png"></p></li><li><p>测试结果：【测试成功】：<br><img src="/PowerDesigner%5CPD_013.png">                                                            </p></li><li><p>数据源创建完毕：<br><img src="/PowerDesigner%5CPD_014.png">                                                            </p></li><li><p>下拉选框中可以看到刚才创建的数据源【pdrcdb】：<br><img src="/PowerDesigner%5CPD_015.png">                                                            </p></li><li><p>选择下拉选框中的数据源，然后输入密码，点击【Connect】按钮：<br><img src="/PowerDesigner%5CPD_016.png"></p></li><li><p>回到反向工程数据源选择页面，点击【确认】按钮：<br><img src="/PowerDesigner%5CPD_017.png">                                                            </p></li><li><p>在弹出的【Database Reverse Engineering】页面中，默认会选择所有的数据库【All Databases】，同时默认勾选了【Table】选项：<br><img src="/PowerDesigner%5CPD_018.png">                                                            </p></li><li><p>选择【BJC_PDRC】数据库：<br><img src="/PowerDesigner%5CPD_019.png">                                                            </p></li><li><p>按需要选择【视图】，最后点击【OK】按钮，开始反向工程：<br><img src="/PowerDesigner%5CPD_020.png">                                                            </p></li><li><p>最终的反向工程结果：<br><img src="/PowerDesigner%5CPD_021.png"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
      <tag>PowerDesigner</tag>
      
      <tag>Reverse Engineer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第31周</title>
    <link href="/2019/07/30/Year2019Week31/"/>
    <url>/2019/07/30/Year2019Week31/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第31周（2019-07-29-2019-08-04）"><a href="#2019年第31周（2019-07-29-2019-08-04）" class="headerlink" title="2019年第31周（2019&#x2F;07&#x2F;29~2019&#x2F;08&#x2F;04）"></a>2019年第31周（2019&#x2F;07&#x2F;29~2019&#x2F;08&#x2F;04）</h2><ol><li><a href="https://github.com/fjqingyou/PotPlayer_Subtitle_Translate_Baidu">PotPlayer 字幕在线翻译插件 - 百度平台</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PotPlayer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Photoshop</title>
    <link href="/2019/07/24/Photoshop/"/>
    <url>/2019/07/24/Photoshop/</url>
    
    <content type="html"><![CDATA[<ol><li>抠图</li><li>裁剪</li><li>复制（轻移）</li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p><p><strong>任何图片都要先去掉图层锁定再进行操作</strong></p><ol><li>抠图<ol><li>选择【魔棒工具】（Shift+W）</li><li>点击需要删除的区域，然后按Delete键</li></ol></li><li>裁剪<ol><li>选择【移动工具】（Shift+V）</li><li>在有内容的图像左侧标尺区域点击向右拖动，生成垂直参考线；</li><li>在有内容的图像顶部标尺区域点击向下拖动，生成水平参考线；</li><li>选择【矩形选框工具】（Shift+M），选择需要的区域</li><li>菜单【图像】-》【裁剪】</li></ol></li><li>复制（轻移）<ol><li>选择【矩形选框工具】（Shift+M），选择需要的区域</li><li>选择【移动工具】（Shift+V）</li><li>按住【Alt】键，然后按向上或下箭头，垂直粘贴矩形区域；</li><li>按住【Alt】键，然后按向左或右箭头，水平粘贴矩形区域；</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Photoshop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Photoshop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第30周</title>
    <link href="/2019/07/22/Year2019Week30/"/>
    <url>/2019/07/22/Year2019Week30/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第30周（2019-07-22-2019-07-28）"><a href="#2019年第30周（2019-07-22-2019-07-28）" class="headerlink" title="2019年第30周（2019&#x2F;07&#x2F;22~2019&#x2F;07&#x2F;28）"></a>2019年第30周（2019&#x2F;07&#x2F;22~2019&#x2F;07&#x2F;28）</h2><ol><li><a href="https://cloud.tencent.com/developer/article/1337723">iOS使用 cocoapods 安装libwebp 错误Error installing libwebp</a></li><li><a href="https://blog.csdn.net/amberoot/article/details/80930804">Swift3.0之代码裁剪图片（只显示部分图片</a></li><li><a href="https://www.jianshu.com/p/4de39664adfa">Swift 4.2 自定义相机</a></li><li><a href="https://www.jianshu.com/p/5f5160c50a4b">iOS端支持WebP格式图片的显示及NSData、UIImage转换</a></li><li><a href="https://www.cnblogs.com/sxlfybb/p/3791973.html">Swift UIImage加载远程图片和圆角矩形</a></li><li><a href="https://cloud.tencent.com/developer/news/123268">21个免费音效素材库</a></li><li><a href="https://www.jb51.net/softs/608184.html">AddBorder(图片批量添加指定颜色边框工具) 最新绿色免费版</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webp</tag>
      
      <tag>libwebp</tag>
      
      <tag>UIImage</tag>
      
      <tag>素材</tag>
      
      <tag>Software</tag>
      
      <tag>Green</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第29周</title>
    <link href="/2019/07/17/Year2019Week29/"/>
    <url>/2019/07/17/Year2019Week29/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第29周（2019-07-15-2019-07-21）"><a href="#2019年第29周（2019-07-15-2019-07-21）" class="headerlink" title="2019年第29周（2019&#x2F;07&#x2F;15~2019&#x2F;07&#x2F;21）"></a>2019年第29周（2019&#x2F;07&#x2F;15~2019&#x2F;07&#x2F;21）</h2><ol><li><a href="https://www.cnblogs.com/cylblogs/p/7390678.html">sequelize-auto orm 自动生成models</a></li><li><a href="https://www.cnblogs.com/llcdxh/p/9721304.html">使用sequelize-auto生成sequelize的Models</a></li><li><a href="https://www.npmjs.com/package/sequelize-auto">sequelize-auto</a></li><li><a href="https://github.com/sequelize/sequelize-auto/issues/360">user not recognized when in cmd(mssql用户名认证失败)</a></li><li><a href="http://zhu329599788.lofter.com/post/1cae8994_d0eaf1a">sequelize定义实体对象 默认自动将名加S变复数</a></li><li><a href="https://convertio.co/zh/pdf-epub/">PDF到EPUB转换器</a></li><li><a href="https://sigil-ebook.com/">sigil-epub制作</a></li><li><a href="http://www.cocoachina.com/articles/10814">iOS-Core-Animation-Advanced-Techniques（一）</a></li><li><a href="http://www.cocoachina.com/articles/10816">iOS-Core-Animation-Advanced-Techniques（二）</a></li><li><a href="http://www.cocoachina.com/articles/10827">iOS-Core-Animation-Advanced-Techniques（三）</a></li><li><a href="http://www.cocoachina.com/articles/10840">iOS-Core-Animation-Advanced-Techniques(七)</a></li><li><a href="https://blog.csdn.net/liu943367080/article/details/80626721">iOS 添加自定义的字体 Fonts provided by application</a></li><li><a href="https://github.com/ronggang/PT-Plugin-Plus/wiki">PT-Plugin-Plus</a></li><li><a href="https://blog.csdn.net/mydo/article/details/79146646">Cocoa利用TexturePacker创建的纹理图集实现角色的帧动画</a></li><li><a href="http://www.hangge.com/blog/cache/detail_732.html">Swift - 使用atlas图集实现动画效果（SpriteKit游戏开发）</a></li><li><a href="https://www.cnblogs.com/apiapia/p/9512007.html">一步一步图文介绍SpriteKit使用TexturePacker导出的纹理集Altas</a></li><li><a href="https://www.jianshu.com/p/2eae8bfb5fc1">(一)宇宙大战Space Battle – 新建场景SCENE、精灵节点、PARTICLE粒子及背景音乐</a></li><li><a href="https://www.jianshu.com/p/74a52b7c03e3">(二)宇宙大战Space Battle – SpriteKit 无限循环背景Endless、SpriteKit物理碰撞、CoreMotion加速计</a></li><li><a href="https://www.jianshu.com/p/038c092b4636">(三)宇宙大战Space Battle – 场景SCENE切换、UserDefaults统计分数、Particle粒子效果</a></li><li><a href="http://www.ifiero.com/">ifiero-不错的学习SpriteKit的网站</a></li><li><a href="https://www.emanueleferonato.com/">emanueleferonato-不错的学习HTML5游戏源码网站</a></li><li><a href="https://segmentfault.com/u/catzzz/articles?page=2">SpriteKit+Swift学习笔记</a></li><li><a href="https://github.com/mogocat/balloonCat">balloonCat</a></li><li><a href="https://blog.csdn.net/iamcuilong/article/details/78982856?t=1515920221156">Win7下更改iTunes备份路径最便捷的方法(亲测win10同样适用)</a></li><li><a href="https://blog.csdn.net/a411358606/article/details/52179422">iOS逆向工程——获取app素材图片</a></li><li><a href="https://blog.csdn.net/weixin_34174422/article/details/87089334">iOS如何提取APP中的素材</a></li><li><a href="https://jingyan.baidu.com/article/a501d80c224bacec630f5edc.html">如何提取iOS App素材</a></li><li><a href="https://blog.csdn.net/weixin_34174105/article/details/90850552">如何导出 iOS App 的 .ipa 文件？</a></li><li><a href="https://blog.csdn.net/aa464971/article/details/87955711">用Apple Configurator 2提取ipa文件</a></li><li><a href="https://blog.csdn.net/weixin_43276913/article/details/84555205">MAC 命令行拷贝文件夹</a></li><li><a href="https://www.cnblogs.com/firstrate/p/6796526.html">WebP 极限压缩及ios实现</a></li><li><a href="https://www.jianshu.com/p/478d680322bf">iOS支持webp格式图片</a></li><li><a href="https://www.jianshu.com/p/f97081867cf6">iOS 展示WebP图片（通过SDWebImage实现对.webp格式图片的支持）</a></li><li><a href="https://www.jianshu.com/p/5f5160c50a4b">iOS端支持WebP格式图片的显示及NSData、UIImage转换</a></li><li><a href="https://blog.csdn.net/callzjy/article/details/68067481">Swift3播放webp</a></li><li><a href="https://github.com/SDWebImage/SDWebImageWebPCoder">SDWebImageWebPCoder</a></li><li><a href="https://github.com/SDWebImage/SDWebImage">SDWebImage</a></li><li><a href="https://www.cnblogs.com/iOSDeng/p/7890511.html">webp格式图片在iOS中的使用-YYWebImage</a></li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp -R <span class="hljs-regexp">/Users/</span>coderdream<span class="hljs-regexp">/Library/</span>Group\ Containers<span class="hljs-regexp">/K36BKF7T3D.group.com.apple.configurator/</span>Library<span class="hljs-regexp">/Caches/</span>Assets<span class="hljs-regexp">/TemporaryItems/</span>MobileApps .<br></code></pre></td></tr></table></figure><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>sequelize</tag>
      
      <tag>orm</tag>
      
      <tag>epub</tag>
      
      <tag>sigil</tag>
      
      <tag>Animation</tag>
      
      <tag>Fonts</tag>
      
      <tag>PT</tag>
      
      <tag>SpriteKit</tag>
      
      <tag>Game</tag>
      
      <tag>HTML5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第28周</title>
    <link href="/2019/07/08/Year2019Week28/"/>
    <url>/2019/07/08/Year2019Week28/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第28周（2019-07-08-x7e2019-07-14）"><a href="#2019年第28周（2019-07-08-x7e2019-07-14）" class="headerlink" title="2019年第28周（2019&#x2F;07&#x2F;08\x7e2019&#x2F;07&#x2F;14）"></a>2019年第28周（2019&#x2F;07&#x2F;08\x7e2019&#x2F;07&#x2F;14）</h2><ol><li><a href="https://www.jianshu.com/p/e2a017d97c23">1个小工具，解决无法在电脑上用微信读书并轻松做笔记写书评的难题</a></li><li><a href="https://www.cnblogs.com/lisa090818/p/4226787.html">iOS教程：Core Data数据持久性存储基础教程</a></li><li><a href="https://www.cnblogs.com/lisa090818/p/4226794.html">iOS教程：如何使用Core Data – 预加载和引入数据</a></li><li><a href="https://www.cnblogs.com/lisa090818/p/4226802.html">iOS教程：如何使用NSFetchedResultsController</a></li><li><a href="https://www.jianshu.com/p/fdb22c04339a">CoreData高能组合拳NSFetchedResultsController</a></li><li><a href="https://www.jianshu.com/p/0f8dda24468c">转载 - ios核心动画高级技巧（视觉效果）</a></li><li><a href="https://www.jianshu.com/p/a03873018b38">iOS核心动画高级技巧：第一部分-图层</a></li><li><a href="https://www.jianshu.com/p/cb7bdc5872b9">iOS核心动画高级技巧：第二部分-动画</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信读书</tag>
      
      <tag>动画</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第27周</title>
    <link href="/2019/07/02/Year2019Week27/"/>
    <url>/2019/07/02/Year2019Week27/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第27周（2019-07-01-2019-07-07）"><a href="#2019年第27周（2019-07-01-2019-07-07）" class="headerlink" title="2019年第27周（2019&#x2F;07&#x2F;01~2019&#x2F;07&#x2F;07）"></a>2019年第27周（2019&#x2F;07&#x2F;01~2019&#x2F;07&#x2F;07）</h2><ol><li><a href="https://icon.wuruihong.com/">批量生成 iOS Android 图标</a></li><li><a href="https://www.cnblogs.com/baixiaozheng/p/4989856.html">在eclipse中安装TestNG</a></li><li><a href="https://www.cnblogs.com/liguo-rong/p/8026966.html">Windows Server 2008R2 FTP服务器搭建详细图解</a></li><li><a href="https://www.jianshu.com/p/cf721e511b29">2.GoogleAdMob–Google广告 SDK</a></li><li><a href="">Google 广告投放(iOS)</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS projects</tag>
      
      <tag>图标</tag>
      
      <tag>TestNG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第26周</title>
    <link href="/2019/06/26/Year2019Week26/"/>
    <url>/2019/06/26/Year2019Week26/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第26周（2019-06-24-2019-06-30）"><a href="#2019年第26周（2019-06-24-2019-06-30）" class="headerlink" title="2019年第26周（2019&#x2F;06&#x2F;24~2019&#x2F;06&#x2F;30）"></a>2019年第26周（2019&#x2F;06&#x2F;24~2019&#x2F;06&#x2F;30）</h2><ol><li><a href="https://www.jianshu.com/p/f919b454ad2c">iOS App间文件共享</a></li><li><a href="https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html">System-Declared Uniform Type Identifiers</a></li><li><a href="https://blog.csdn.net/totogo2010/article/details/29182385">iOS App让自己的应用在其他应用中打开列表中显示</a></li><li><a href="https://blog.csdn.net/u011154007/article/details/73549134">IOS 打开预览pdf、ppt、excel、word、tet、rtf、csv格式的文件，微信文件分享</a></li><li><a href="https://blog.csdn.net/chmod_R_755/article/details/78561607">iOS文件夹共享Files</a></li><li><a href="https://blog.csdn.net/tianjiqcs/article/details/71410398">让自己开发的iOS App通过iTunes共享文件到Document目录</a></li><li><a href="https://www.jianshu.com/p/acf4232b47a1">iOS实现App之间文件分享方法</a></li><li><a href="https://juejin.im/post/5cfe40dae51d45590a445b1b">【翻译】WWDC 2019 ：优秀的开发习惯</a></li><li><a href="https://juejin.im/post/5d09a3ccf265da1b8d162078">22 个 iOS 开发热门开源项目</a></li><li><a href="https://icodesign.me/posts/swift-combine/">Swift Combine 入门导读</a></li><li><a href="https://link.juejin.im/?target=https://mp.weixin.qq.com/s/x_jFcKeXSbtdK0CnfayFsw">新晋网红SwiftUI——淘宝带你初体验</a></li><li><a href="https://github.com/joelparkerhenderson/demo_swift_excel_xlsx_reader_writer">Demo Swift Excel Xlsx Reader Writer</a></li><li><a href="https://juejin.im/post/5d09d585e51d455d6c0ad927">无侵入埋点</a></li><li><a href="https://www.jianshu.com/p/4dca6e64ef15">WWDC - SwiftUI - 初恋般的感觉</a></li><li><a href="https://www.jianshu.com/p/2e074db792ba">史上最详细的iOS之事件的传递和响应机制-原理篇</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第25周</title>
    <link href="/2019/06/17/Year2019Week25/"/>
    <url>/2019/06/17/Year2019Week25/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第25周（2019-06-17-2019-06-23）"><a href="#2019年第25周（2019-06-17-2019-06-23）" class="headerlink" title="2019年第25周（2019&#x2F;06&#x2F;17~2019&#x2F;06&#x2F;23）"></a>2019年第25周（2019&#x2F;06&#x2F;17~2019&#x2F;06&#x2F;23）</h2><ol><li><a href="https://github.com/spkingr/30-iOS-swift-projects-in-100-days">30-iOS-swift-projects-in-100-days</a></li><li><a href="https://www.jianshu.com/p/c6ae28964ad5">抓住iOS的未来 - 30天学习编写30个Swift小程序</a></li><li><a href="https://juejin.im/post/5d0a099ff265da1b8811e055">如何使用shouldRasterize属性进行性能调优</a></li><li><a href="https://juejin.im/post/5d05b45bf265da1bcc193ff4">SwiftUI or Flutter ?</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第24周</title>
    <link href="/2019/06/10/Year2019Week24/"/>
    <url>/2019/06/10/Year2019Week24/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第24周（2019-06-10-2019-06-16）"><a href="#2019年第24周（2019-06-10-2019-06-16）" class="headerlink" title="2019年第24周（2019&#x2F;06&#x2F;10~2019&#x2F;06&#x2F;16）"></a>2019年第24周（2019&#x2F;06&#x2F;10~2019&#x2F;06&#x2F;16）</h2><ol><li><a href="https://blog.csdn.net/Erice_s/article/details/80202536">Github Markdown 中的复选框按钮的实现</a></li><li><a href="https://www.jianshu.com/p/3c7995ffc4da">Swift-自定义UITableViewCell和View(XIB和纯代码)</a></li><li><a href="https://www.cnblogs.com/oxsir/p/9726602.html">Windows系统下搭建私有npm仓储服务器, 打包并推送到私有npm仓储服务器</a></li><li><a href="https://www.cnblogs.com/hai-cheng/p/8670395.html">nssm 在Windows上部署服务</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p><h2 id="Windows-系统下搭建私有-npm-仓储服务器-Sinopia"><a href="#Windows-系统下搭建私有-npm-仓储服务器-Sinopia" class="headerlink" title="Windows 系统下搭建私有 npm 仓储服务器 Sinopia"></a>Windows 系统下搭建私有 npm 仓储服务器 Sinopia</h2><ol><li><p>安装 Python</p></li><li><p>安装 NodeJs</p></li><li><p>安装 Sinopia  </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g sinopia<br></code></pre></td></tr></table></figure></li><li><p>打开端口4873端口</p><ol><li>Windows 防火墙 -&gt; 高级设置 -&gt; 入站规则 -&gt; 新建规则 -&gt; 端口 -&gt; TCP、本地特定端口：4873</li></ol></li><li><p>配置 Sinopia</p><ol><li>打开C:\Users\Administrator\AppData\Roaming\sinopia\config.yaml文件, (请将Administrator替换为你的windows用户名)</li><li>在文件末尾增加以下代码, 保存并退出   <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># listen ip and port</span><br><span class="hljs-attribute">listen</span>: <span class="hljs-number">0.0.0.0:4873</span>  <br></code></pre></td></tr></table></figure></li></ol></li><li><p>新增用户（输入用户名、密码和邮箱地址）                                        </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">npm adduser <span class="hljs-params">--registry</span> http:<span class="hljs-string">//10.100.254.163</span><span class="hljs-function">:4873</span>    <br></code></pre></td></tr></table></figure></li></ol><p><img src="/2019Week24%5C01.jpg"><br>7. 访问并登录（用户名&#x2F;密码：pdrc&#x2F;pdrc)<br><img src="/2019Week24%5C02.jpg">  </p><h2 id="使用-nssm-将-Sinopia-作为-Windows-服务开机启动"><a href="#使用-nssm-将-Sinopia-作为-Windows-服务开机启动" class="headerlink" title="使用 nssm 将 Sinopia 作为 Windows 服务开机启动"></a>使用 nssm 将 Sinopia 作为 Windows 服务开机启动</h2><ol><li><p>下载NSSM       <a href="http://www.nssm.cc/release/nssm-2.24.zip">download</a></p></li><li><p>根据自己的平台，将32&#x2F;64位nssm.exe文件解压至任意文件夹。</p></li><li><p>cmd定位至nssm.exe所在目录。</p></li><li><p>输入 nssm install {服务名称}，即注册服务的名称。注册服务弹出如下NSSM界面。<br><img src="/2019Week24%5C07.jpg">  </p></li><li><p>我们要执行的文件为sinopia.cmd， 路径为: C:\Users\Administrator\AppData\Roaming\npm\sinopia.cmd<br><img src="/2019Week24%5C03.jpg">  </p></li><li><p>完成路径配置后，Startup directory会自动配置，我们这里不用再修改，直接点击【Install service】创建服务：<br><img src="/2019Week24%5C04.jpg"></p></li><li><p>启动服务之前先修改配置，用于支持 IP 地址访问<br>打开 C:\Windows\System32\config\systemprofile\AppData\Roaming\sinopia\config.yaml 文件，在文件末尾增加以下代码, 保存并退出  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># listen ip and port</span><br><span class="hljs-attribute">listen</span>: <span class="hljs-number">0.0.0.0:4873</span> <br></code></pre></td></tr></table></figure></li><li><p>启动服务：<br><img src="/2019Week24%5C05.jpg"></p></li><li><p>启动成功后，任务管理器中有 node.exe 的进程：<br><img src="/2019Week24%5C06.jpg"></p></li><li><p>本机访问 <a href="http://10.100.254.163:4873/">http://10.100.254.163:4873</a></p></li><li><p>新增用户（输入用户名、密码和邮箱地址）   </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">npm adduser <span class="hljs-params">--registry</span> http:<span class="hljs-string">//10.100.254.163</span><span class="hljs-function">:4873</span>    <br></code></pre></td></tr></table></figure></li><li><p>创建用户成功后，其他机器就可以通过IP地址访问并登录了。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>Github</tag>
      
      <tag>Sinopia</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第23周</title>
    <link href="/2019/06/03/Year2019Week23/"/>
    <url>/2019/06/03/Year2019Week23/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第23周（2019-06-03-2019-06-09）"><a href="#2019年第23周（2019-06-03-2019-06-09）" class="headerlink" title="2019年第23周（2019&#x2F;06&#x2F;03~2019&#x2F;06&#x2F;09）"></a>2019年第23周（2019&#x2F;06&#x2F;03~2019&#x2F;06&#x2F;09）</h2><ol><li><a href="https://blog.csdn.net/qq_32768743/article/details/85713116">设置WebStorm不检测javascript分号</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dir</tag>
      
      <tag>WebStorm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 开发环境</title>
    <link href="/2019/05/29/Java_Env/"/>
    <url>/2019/05/29/Java_Env/</url>
    
    <content type="html"><![CDATA[<p><escape><span id="more"></span></escape></p><p>&nbsp;</p><h3 id="Java-环境设置之-eclipse-设置"><a href="#Java-环境设置之-eclipse-设置" class="headerlink" title="Java 环境设置之 eclipse 设置"></a>Java 环境设置之 eclipse 设置</h3><ul><li>设置文件编码格式<br><img src="/Java_Env%5Cenv_01.png">  </li><li>设置字体和大小<br><img src="/Java_Env%5Cenv_02.png">    </li><li>设置 JDK<br><img src="/Java_Env%5Cenv_03.png">    </li><li>设置 Maven 版本及安装路径<br><img src="/Java_Env%5Cenv_04.png">   </li><li>设置 Maven 配置文件路径<br><img src="/Java_Env%5Cenv_05.png">   </li><li>设置 Tomcat 安装路径<br><img src="/Java_Env%5Cenv_06.png"></li></ul><h3 id="jetty-配置"><a href="#jetty-配置" class="headerlink" title="jetty 配置"></a>jetty 配置</h3><ul><li><p>pom.xml</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>jetty-demo<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-war-plugin --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">packagingExcludes</span>&gt;</span>WEB-INF/lib/*.jar<span class="hljs-tag">&lt;/<span class="hljs-name">packagingExcludes</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- Run As : maven build : Goals : mybatis-generator:generate -D mybatis.generator.overwrite=true --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">verbose</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">verbose</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">skip</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">skip</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-maven-plugin --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.eclipse.jetty<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.4.7.v20170914<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">scanIntervalSeconds</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">scanIntervalSeconds</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">httpConnector</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>8088<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">idleTimeout</span>&gt;</span>60000<span class="hljs-tag">&lt;/<span class="hljs-name">idleTimeout</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">httpConnector</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">webApp</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">contextPath</span>&gt;</span>/$</span><span class="hljs-template-variable">&#123;project.build.finalName&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">contextPath</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">webApp</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>执行 Maven 命令：<br>在工程的pom.xml文件上点击【右键】-&gt; 【Run As】 -&gt; 【3 Maven build…】，在命令 Goals 中, 输入jetty:run 命令开始启动jetty，同时将项目部署到jetty中。</p></li><li><p>参考文档：<a href="https://jingyan.baidu.com/article/d3b74d64f07e101f77e60906.html">如何将maven项目发布到jetty中</a></p></li></ul><h3 id="applicationContext-xml-编译报错"><a href="#applicationContext-xml-编译报错" class="headerlink" title="applicationContext.xml 编译报错"></a>applicationContext.xml 编译报错</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cvc-complex-<span class="hljs-keyword">type</span><span class="hljs-number">.2</span><span class="hljs-number">.4</span>.c: The matching wildcard <span class="hljs-keyword">is</span> <span class="hljs-keyword">strict</span>, but <span class="hljs-keyword">no</span> declaration can be <span class="hljs-built_in">found</span> <span class="hljs-keyword">for</span> element <span class="hljs-string">&#x27;context:component-scan&#x27;</span>.<br><br>cvc-complex-<span class="hljs-keyword">type</span><span class="hljs-number">.2</span><span class="hljs-number">.4</span>.c: The matching wildcard <span class="hljs-keyword">is</span> <span class="hljs-keyword">strict</span>, but <span class="hljs-keyword">no</span> declaration can be <span class="hljs-built_in">found</span> <span class="hljs-keyword">for</span> element <span class="hljs-string">&#x27;aop:aspectj-autoproxy&#x27;</span>.<br></code></pre></td></tr></table></figure><ul><li>指定版本号<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans<br>        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<br>        http://www.springframework.org/schema/context<br>        http://www.springframework.org/schema/context/spring-context-4.3.xsd<br>        http://www.springframework.org/schema/aop<br>        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd<br>        http://www.springframework.org/schema/tx<br>        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd&quot;<br></code></pre></td></tr></table></figure></li></ul><h3 id="testng-xml报错"><a href="#testng-xml报错" class="headerlink" title="testng.xml报错"></a>testng.xml报错</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">Referenced file contains errors (http://testng.org/testng-1.0.dtd).  <br>For more information, right click on the message in the Problems View and select &quot;Show Details...&quot;<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">The content of element <span class="hljs-built_in">type</span> <span class="hljs-string">&quot;context&quot;</span> <span class="hljs-keyword">is</span> incomplete, it must <span class="hljs-keyword">match</span> <span class="hljs-comment">&quot;(property*,plugin*,commentGenerator?,(connectionFactory|</span><br>jdbcConnection),javaTypeResolver?,javaModelGenerator,sqlMapGenerator?,javaClientGenerator?,table+)<span class="hljs-comment">&quot;.</span><br></code></pre></td></tr></table></figure><ul><li><p>table 标签至少有一个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--生成对应表及类名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> </span><br></code></pre></td></tr></table></figure></li><li><p>Maven install 报错</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">[ERROR] Failed to<span class="hljs-built_in"> execute </span>goal org.apache.maven.plugins:maven-compiler-plugin:3.1:compile (default-compile) on project pdrc: Compilation failure<br>[ERROR] No compiler is provided in this environment. Perhaps you are running on a JRE rather than a JDK?<br>[ERROR] -&gt; [Help 1]<br></code></pre></td></tr></table></figure></li><li><p>启动Tomcat报错</p></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">五月 <span class="hljs-number">29</span>, <span class="hljs-number">2019</span> <span class="hljs-number">10</span>:<span class="hljs-number">40</span>:<span class="hljs-number">12</span> 上午 org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardContext</span> listenerStart<br>严重: Error configuring application listener of class <span class="hljs-selector-attr">[org.springframework.web.util.Log4jConfigListener]</span><br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ClassNotFoundException</span>: org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.Log4jConfigListener</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.loader</span><span class="hljs-selector-class">.WebappClassLoaderBase</span><span class="hljs-selector-class">.loadClass</span>(WebappClassLoaderBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1285</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.loader</span><span class="hljs-selector-class">.WebappClassLoaderBase</span><span class="hljs-selector-class">.loadClass</span>(WebappClassLoaderBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1119</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.DefaultInstanceManager</span><span class="hljs-selector-class">.loadClass</span>(DefaultInstanceManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">512</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.DefaultInstanceManager</span><span class="hljs-selector-class">.loadClassMaybePrivileged</span>(DefaultInstanceManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">493</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.DefaultInstanceManager</span><span class="hljs-selector-class">.newInstance</span>(DefaultInstanceManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">119</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardContext</span><span class="hljs-selector-class">.listenerStart</span>(StandardContext<span class="hljs-selector-class">.java</span>:<span class="hljs-number">4667</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardContext</span><span class="hljs-selector-class">.startInternal</span>(StandardContext<span class="hljs-selector-class">.java</span>:<span class="hljs-number">5207</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.LifecycleBase</span><span class="hljs-selector-class">.start</span>(LifecycleBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">150</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span>.ContainerBase<span class="hljs-variable">$StartChild</span><span class="hljs-selector-class">.call</span>(ContainerBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1419</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span>.ContainerBase<span class="hljs-variable">$StartChild</span><span class="hljs-selector-class">.call</span>(ContainerBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1409</span>)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.FutureTask</span><span class="hljs-selector-class">.run</span>(Unknown Source)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.ThreadPoolExecutor</span><span class="hljs-selector-class">.runWorker</span>(Unknown Source)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span>.ThreadPoolExecutor<span class="hljs-variable">$Worker</span><span class="hljs-selector-class">.run</span>(Unknown Source)<br>at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.run</span>(Unknown Source)<br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//localhost:8088/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第22周</title>
    <link href="/2019/05/27/Year2019Week22/"/>
    <url>/2019/05/27/Year2019Week22/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第22周（2019-05-27-2019-05-31）"><a href="#2019年第22周（2019-05-27-2019-05-31）" class="headerlink" title="2019年第22周（2019&#x2F;05&#x2F;27~2019&#x2F;05&#x2F;31）"></a>2019年第22周（2019&#x2F;05&#x2F;27~2019&#x2F;05&#x2F;31）</h2><ol><li><a href="https://baike.so.com/doc/10040871-10521086.html">用 dir 查看一个目录下所有文件和文件夹的大小</a></li><li><a href="https://blog.csdn.net/qq_33658067/article/details/52757777">使用tree命令导出windows的文件夹&#x2F;文件的目录树</a></li><li><a href="https://www.cnblogs.com/libra0920/p/6394003.html">eclipse启动项目报错：java.lang.ClassNotFoundException: ContextLoaderListener</a></li><li><a href="https://blog.csdn.net/jiegegeaa1/article/details/81543427">运用Maven将web项目部署到jetty（IDEA 环境）</a></li><li><a href="https://jingyan.baidu.com/article/d3b74d64f07e101f77e60906.html">如何将maven项目发布到jetty中（eclipse 环境）</a></li><li><a href="https://www.cnblogs.com/qiaojie/p/5560388.html">Sublime Text3 配置 NodeJs 环境</a></li><li><a href="https://www.cnblogs.com/xinglejun/p/10682847.html">Sublime Text3 最新版3207 安装及破解</a></li><li><a href="https://www.jianshu.com/p/23b823d6e786">解决 Sublime Text3 packagecontrol.io 无法访问的问题</a></li></ol><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><ol><li><a href="https://noahgilmore.com/blog/uibutton-padding/">UIButton: Padding Between Image and Text</a></li><li><a href="https://www.jianshu.com/p/78bbcc15eac3">SpriteKit中SKSpriteNode拖动的简单实现</a></li><li><a href="https://juejin.im/post/5ceba9af6fb9a07ece67ae6d">iOS 常用布局方式之Frame</a></li><li><a href="https://www.jianshu.com/p/0455f7a9ebe8">iOS UIButton根据内容自动布局</a></li><li><a href="https://www.jianshu.com/p/0cc657becbe9">SpriteKit框架之浅谈物理引擎</a></li><li><a href="https://www.jianshu.com/p/aff13f3355f4">SpriteKit之浅谈AnchorPoint(锚点)的使用</a></li></ol><h3 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h3><ol><li><a href="https://www.jianshu.com/p/e3922cac9cfe">1.UIKit框架（一） —— UIKit动力学和移动效果（一）</a></li><li><a href="https://www.jianshu.com/p/82d1532c32d0">2.UIKit框架（二） —— UIKit动力学和移动效果（二）</a></li><li><a href="https://github.com/CoderDream/iOS_Best_Practice/tree/master/UIKitDemo/01">UIKit动力学和移动效果笔记</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dir</span> /a /s &gt;&gt; 002.txt<br></code></pre></td></tr></table></figure><h2 id="Sublime-Text3-配置-NodeJs-环境-笔记"><a href="#Sublime-Text3-配置-NodeJs-环境-笔记" class="headerlink" title="Sublime Text3 配置 NodeJs 环境 笔记"></a>Sublime Text3 配置 NodeJs 环境 笔记</h2><ul><li><p>找到nodejs的安装目录</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">CoderDreamdeiMac:~ coderdream$ which <span class="hljs-keyword">node</span><br><span class="hljs-title">/usr</span>/local/bin/<span class="hljs-keyword">node</span><span class="hljs-title"></span><br></code></pre></td></tr></table></figure></li><li><p>Nodejs.sublime-settings 修改结果  </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&#123;<br>  <span class="hljs-string">//</span> save before running commands<br>  <span class="hljs-string">&quot;save_first&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-string">//</span> <span class="hljs-keyword">if</span> present, use this <span class="hljs-keyword">command</span> instead of plain <span class="hljs-string">&quot;node&quot;</span><br>  <span class="hljs-string">//</span> e.g. <span class="hljs-string">&quot;/usr/bin/node&quot;</span> or <span class="hljs-string">&quot;C:\bin\node.exe&quot;</span><br>  <span class="hljs-string">&quot;node_command&quot;</span>: <span class="hljs-string">&quot;/usr/local/bin/node&quot;</span>, <span class="hljs-string">//</span>   <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">//</span> Same for NPM <span class="hljs-keyword">command</span><br>  <span class="hljs-string">&quot;npm_command&quot;</span>: <span class="hljs-string">&quot;/usr/local/bin/npm&quot;</span>, <span class="hljs-string">//</span> <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">//</span> as &#x27;NODE_PATH&#x27; environment variable for node runtime<br>  <span class="hljs-string">&quot;node_path&quot;</span>: <span class="hljs-literal">false</span>,<br><br>  <span class="hljs-string">&quot;expert_mode&quot;</span>: <span class="hljs-literal">false</span>,<br><br>  <span class="hljs-string">&quot;output_to_new_tab&quot;</span>: <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Nodejs.sublime-build 修改encoding 为 utf8  和 osx （路径与实际一致即可，参考上面的路径）</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nsis">&#123;<br>  <span class="hljs-string">&quot;cmd&quot;</span>: [<span class="hljs-string">&quot;node&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span>],<br>  <span class="hljs-string">&quot;file_regex&quot;</span>: <span class="hljs-string">&quot;^[ ]*File \&quot;</span>(...*?)\<span class="hljs-string">&quot;, line ([0-9]*)&quot;</span>,<br>  <span class="hljs-string">&quot;selector&quot;</span>: <span class="hljs-string">&quot;source.js&quot;</span>,<br>  <span class="hljs-string">&quot;shell&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-string">&quot;encoding&quot;</span>: <span class="hljs-string">&quot;utf8&quot;</span>,//<span class="hljs-string">&quot;cp1252&quot;</span>,<br>  <span class="hljs-string">&quot;windows&quot;</span>:<br>    &#123;<br>        <span class="hljs-string">&quot;shell_cmd&quot;</span>: <span class="hljs-string">&quot;taskkill /F /IM node.exe &amp; node <span class="hljs-variable">$file</span>&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;linux&quot;</span>:<br>    &#123;<br>        <span class="hljs-string">&quot;shell_cmd&quot;</span>: <span class="hljs-string">&quot;killall node; /usr/bin/env node <span class="hljs-variable">$file</span>&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;osx&quot;</span>:<br>    &#123;<br>        <span class="hljs-string">&quot;shell_cmd&quot;</span>: <span class="hljs-string">&quot;killall node; /usr/local/bin/env node <span class="hljs-variable">$file</span>&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tree</tag>
      
      <tag>dir</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sudoku</title>
    <link href="/2019/05/24/iOS_Game/"/>
    <url>/2019/05/24/iOS_Game/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://github.com/cokecoffe/sudoku">sudoku</a></li><li><a href="https://github.com/coding2233/UnitySudoku">UnitySudoku</a></li><li><a href="https://github.com/CoderDream/ZZSudoku">ZZSudoku</a></li><li><a href="https://u19006311.pipipan.com/fs/19006311-326792217">数独从入门到精通_慕容漪汐_中国纺织_2016.10.zip</a></li></ol><p><escape><span id="more"></span></escape>  </p>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sudoku</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpriteKit</title>
    <link href="/2019/05/24/SpriteKit/"/>
    <url>/2019/05/24/SpriteKit/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://www.jianshu.com/p/1184f4d52b77">SpriteKit之轻量级瓦片地图生成工具SDmapNode详解</a></li><li><a href="https://www.jianshu.com/p/0ab9bb735ec2">SpriteKit框架之浅谈瓦片地图简介以及TML地图文件的创建使用</a></li><li><a href="https://www.jianshu.com/p/493686eaf0d7">SpriteKit框架之浅谈节点碰撞的实现</a></li><li><a href="https://www.jianshu.com/p/ee0d9b1077cc">SpriteKit框架之SKPhysicsBody的移动和连接</a></li><li><a href="https://www.jianshu.com/p/4046bab3a63d">SpriteKit框架之关于物理引擎属性的那点事</a></li><li><a href="https://www.jianshu.com/p/0cc657becbe9">SpriteKit框架之浅谈物理引擎 (2016.08.30 19:22)</a></li><li><a href="https://www.jianshu.com/p/78bbcc15eac3">SpriteKit中SKSpriteNode拖动的简单实现(2016.08.26 20:29)</a></li><li><a href="https://www.jianshu.com/p/2efc153200c9">SpriteKit框架之最全动作介绍 没有之一(2016.08.26 20:27)</a></li><li><a href="https://developer.apple.com/documentation/spritekit">Apple Sprite Kit</a></li><li><a href="https://www.jianshu.com/p/493686eaf0d7">SpriteKit框架之浅谈节点碰撞的实现(2016.09.01 10:38)</a></li><li><a href="https://www.jianshu.com/p/78bbcc15eac3">SpriteKit中SKSpriteNode拖动的简单实现(2016.08.26 20:29)</a></li><li><a href="https://github.com/KirstenDunst/SpriteKitGame">KirstenDunst&#x2F;SpriteKitGame</a></li><li><a href="https://www.raywenderlich.com/71-spritekit-tutorial-for-beginners">SpriteKit Tutorial for Beginners</a></li><li><a href="https://blog.csdn.net/kmyhy/article/details/78182569">如何用 Sprite Kit 和 Swift 制作一个逃逸游戏-第一部分</a></li><li><a href="https://blog.csdn.net/kmyhy/article/details/78182611">如何用 Sprite Kit 和 Swift 制作一个逃逸游戏-第二部分</a></li><li><a href="https://blog.csdn.net/colouful987/article/category/2898663">Sprite Kit(用Swift做个游戏)</a></li><li><a href="https://blog.csdn.net/silk_bar/article/category/6175612">swift实战入门-手把手教你编写2048</a></li></ol><p><escape><span id="more"></span></escape>  </p>]]></content>
    
    
    <categories>
      
      <category>SpriteKit</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpriteKit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第21周</title>
    <link href="/2019/05/20/Year2019Week21/"/>
    <url>/2019/05/20/Year2019Week21/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第21周（2019-05-20-2019-05-26）"><a href="#2019年第21周（2019-05-20-2019-05-26）" class="headerlink" title="2019年第21周（2019&#x2F;05&#x2F;20~2019&#x2F;05&#x2F;26）"></a>2019年第21周（2019&#x2F;05&#x2F;20~2019&#x2F;05&#x2F;26）</h2><ol><li><a href="https://baike.so.com/doc/10040871-10521086.html">WBS - 工作分解结构</a></li><li><a href="https://www.jianshu.com/p/235bc6c3ca77">使用 Charles 获取 https 的数据</a></li><li><a href="https://juejin.im/post/5cc5ca4ae51d456e2446fd38?utm_source=gold_browser_extension">iOS应用模块化的思考及落地方案（一）模块的划分及模块化工作流程</a></li><li><a href="https://www.jianshu.com/p/470b9ad2d1a0">五一流水(2016)</a></li><li><a href="https://www.jianshu.com/p/ee9505460b71">iOS-Instuments使用详解</a></li><li><a href="https://www.jianshu.com/p/ba08804ce056">一名一线开发对于App架构和组件化的思考</a></li><li><a href="https://www.jianshu.com/p/3ed4151d928c">从0到1实现一个模块间通信的服务组件</a></li><li><a href="https://www.cnblogs.com/longiang7510/p/5867805.html">优化UITableViewCell高度计算的那些事</a></li><li><a href="https://zhidao.baidu.com/question/1049840751738563139.html">Mac下Zip压缩包解压后文件名出现乱码，怎么解决</a></li><li><a href="http://www.pc6.com/mac/113482.html">The Unarchiver Mac版 V4.1.0</a></li><li><a href="https://jingyan.baidu.com/article/495ba84109975338b30edee7.html">怎么将VUZ格式电子书转PDF 有妙法</a></li><li><a href="https://baijiahao.baidu.com/s?id=1627235697905043031">如何做出的包子馒头又白又大，松软还好吃</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>WBS</tag>
      
      <tag>摄影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第20周</title>
    <link href="/2019/05/13/Year2019Week20/"/>
    <url>/2019/05/13/Year2019Week20/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第20周（2019-05-13-2019-05-20）"><a href="#2019年第20周（2019-05-13-2019-05-20）" class="headerlink" title="2019年第20周（2019&#x2F;05&#x2F;13~2019&#x2F;05&#x2F;20）"></a>2019年第20周（2019&#x2F;05&#x2F;13~2019&#x2F;05&#x2F;20）</h2><ol><li><a href="https://juejin.im/post/5cd4e784f265da038733bc4b">马蜂窝 iOS App 启动治理：回归用户体验</a></li><li><a href="https://jingyan.baidu.com/article/215817f7a49ef61eda142300.html">Adobe Acrobat DC怎样添加水印？</a></li><li><a href="https://www.cnbeta.com/articles/tech/845015.htm">Google I&#x2F;O 2019全纪录 : AI惊艳Android Q 真香 还有两款新硬件</a></li><li><a href="https://juejin.im/post/5cd053b051882541332f5bdb">Audio Unit: iOS中最底层最强大音频控制API</a></li><li><a href="https://www.cnblogs.com/weiqt/articles/1826847.html">SQL Server中使用convert进行日期转换</a></li><li><a href="https://juejin.im/post/5ccc7d3fe51d453afc760317">搞事情之 Vapor 初探</a></li><li><a href="https://jingyan.baidu.com/article/fdbd4277b0b81fb89e3f48b7.html">手机版b站下载的视频在文件夹哪里</a></li><li><a href="https://jingyan.baidu.com/article/215817f74703191eda142384.html">如何将blv格式文件转为MP4格式文件</a></li><li><a href="https://www.94afx.com/a/diannaoruanjian/193.html">字幕通YeeCaption破解版|中文破解版（全功能版本）</a></li><li><a href="https://blog.csdn.net/jinshelj/article/details/84543635">Beyond Compare v4.2.8 Build 23479 32bit+64bit windows破解版</a></li><li><a href="https://www.luochenzhimu.com/archives/4814.html">文件对比 Beyond Compare v4.2.9 (build 23626) for Win&amp;Mac&amp;Linux</a></li><li><a href="https://blog.csdn.net/liitdar/article/details/79908464">beyond compare 4常见问题及相关配置</a></li><li><a href="http://www.hao7di.com/ruanjian/changyongxiaoruanjian/432.html">BeyondCompare(4.2.7)绿色破解版，文件对比神器</a></li><li><a href="https://blog.csdn.net/sinat_29891353/article/details/83989038">BeyondCompare this license key has been revoked: 1822-9597解决办法 </a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS项目</tag>
      
      <tag>BeyondCompare</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第18周</title>
    <link href="/2019/04/29/Year2019Week18/"/>
    <url>/2019/04/29/Year2019Week18/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第18周（2019-04-29-2019-05-05）"><a href="#2019年第18周（2019-04-29-2019-05-05）" class="headerlink" title="2019年第18周（2019&#x2F;04&#x2F;29~2019&#x2F;05&#x2F;05）"></a>2019年第18周（2019&#x2F;04&#x2F;29~2019&#x2F;05&#x2F;05）</h2><ol><li><a href="https://www.jianshu.com/p/f2be1fcb77d3">高仿喜马拉雅项目 - Swift5版本</a></li><li><a href="https://www.jianshu.com/p/01ca73387481">(Swift) iOS Apps with REST APIs(序列)</a></li><li><a href="https://www.v2ex.com/t/558050#reply53">40 老码农分享下半年的全站开发的故事</a></li><li><a href="https://www.v2ex.com/t/494517">2 天时间用 Swift 撸了一个捷径分享小站</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ETL 作业</title>
    <link href="/2019/04/26/ETL_Job/"/>
    <url>/2019/04/26/ETL_Job/</url>
    
    <content type="html"><![CDATA[<ul><li>作业<br><escape><span id="more"></span></escape></li></ul><p>&nbsp;</p><h2 id="创建作业"><a href="#创建作业" class="headerlink" title="创建作业"></a>创建作业</h2><ul><li><p>新建作业<br><img src="/ETL_Job%5Csnap0001.png">  </p></li><li><p>作业详情<br><img src="/ETL_Job%5Csnap0002.png">  </p></li><li><p>作业步骤<br><img src="/ETL_Job%5Csnap0003.png">  </p></li><li><p>作业步骤属性<br><img src="/ETL_Job%5Csnap0004.png"></p></li><li><p>作业计划<br><img src="/ETL_Job%5Csnap0005.png">  </p></li><li><p>计划详情<br><img src="/ETL_Job%5Csnap0006.png">  </p></li><li><p>作业开始步骤菜单<br><img src="/ETL_Job%5Csnap0007.png">  </p></li><li><p>开始执行作业<br><img src="/ETL_Job%5Csnap0008.png">  </p></li><li><p>作业执行中<br><img src="/ETL_Job%5Csnap0009.png">  </p></li><li><p>作业执行完成<br><img src="/ETL_Job%5Csnap0010.png"></p></li><li><p>查看作业历史记录菜单<br><img src="/ETL_Job%5Csnap0011.png">  </p></li><li><p>作业日志列表<br><img src="/ETL_Job%5Csnap0012.png"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ETL</tag>
      
      <tag>Job</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ETL 小技巧</title>
    <link href="/2019/04/26/ETL_Tips/"/>
    <url>/2019/04/26/ETL_Tips/</url>
    
    <content type="html"><![CDATA[<ul><li>生成随机数</li><li>弹窗<br><escape><span id="more"></span></escape></li></ul><p>&nbsp;</p><h2 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C#">Random random = <span class="hljs-keyword">new</span> Random();<br><span class="hljs-built_in">int</span> n = random.Next(<span class="hljs-number">75</span>, <span class="hljs-number">250</span>);   <span class="hljs-comment">//生成75-250之间的随机数</span><br><span class="hljs-built_in">decimal</span> ran = (<span class="hljs-built_in">decimal</span>) n / <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><h2 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a>弹窗</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">using</span> System.Windows.Forms;<br><br>MessageBox.Show(ran.ToString());<br></code></pre></td></tr></table></figure><h2 id="日期相关"><a href="#日期相关" class="headerlink" title="日期相关"></a>日期相关</h2><ul><li><p>日期计算  </p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">DateTime</span> dt = <span class="hljs-built_in">DateTime</span>.Now;<br><span class="hljs-comment">//Dts.Variables[&quot;CurrentDate&quot;].Value = dt;</span><br><span class="hljs-comment">//DateTime </span><br><span class="hljs-comment">//dt = new DateTime(2019, 12, 15);</span><br><span class="hljs-comment">//string dtString = dt.ToString();</span><br><span class="hljs-comment">//MessageBox.Show(dtString);</span><br><span class="hljs-built_in">DateTime</span> lastFinancialDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DateTime</span>(dt.Year, dt.Month, <span class="hljs-number">1</span>);<br><span class="hljs-comment">//lastFinancialDate = lastFinancialDate.AddMonths(-1);</span><br><span class="hljs-built_in">DateTime</span> dataStartDate = lastFinancialDate.AddMonths(<span class="hljs-number">-1</span>); <span class="hljs-comment">// new DateTime(dt.Year, dt.Month, 1);</span><br><span class="hljs-built_in">DateTime</span> dataEndDate = lastFinancialDate.AddDays(<span class="hljs-number">-1</span>);<br></code></pre></td></tr></table></figure></li><li><p>获取日期字符串</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">string queryDateTime <span class="hljs-operator">=</span> DateTime.Now.ToString(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>)<span class="hljs-comment">; //  fff</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ETL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ETL 最佳实践之计算产能偏差</title>
    <link href="/2019/04/25/ETL_CalcCapacityDeviation/"/>
    <url>/2019/04/25/ETL_CalcCapacityDeviation/</url>
    
    <content type="html"><![CDATA[<ul><li>生成产品维度数据</li><li>刷新 Project_Detail 表的上一个版本的项目ID<br><escape><span id="more"></span></escape></li></ul><p>&nbsp;</p><h1 id="查找项目列表"><a href="#查找项目列表" class="headerlink" title="查找项目列表"></a>查找项目列表</h1><ul><li><p>查询脚本  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>a.ProjectID,<br>b.[WorkID],<br>d.[PK_日期],<br>c.RecordDate,<br>c.[BSD],<br>c.[RealCapacity],<br>c.[CapacityDeviation],<br>e.[AddDate],<br>e.[InDate],<br>e.[DelDate]<br><span class="hljs-keyword">FROM</span><br>Project_Detail a<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> HumanMap b <br><span class="hljs-keyword">ON</span> a.ProjectID <span class="hljs-operator">=</span> b.ProjectID<br><span class="hljs-keyword">JOIN</span> PDRC_A_DATE d <br><span class="hljs-keyword">ON</span> d.[PK_日期]<span class="hljs-operator">&gt;=</span>b.InPro_Date <br><span class="hljs-keyword">AND</span> d.[PK_日期]<span class="hljs-operator">&lt;=</span>b.OutPro_Date<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> DEV_BSD_IDLE c <br><span class="hljs-keyword">ON</span> b.WORKID <span class="hljs-operator">=</span> c.WORKID <br><span class="hljs-keyword">AND</span> c.RecordDate<span class="hljs-operator">&lt;=</span>b.OutPro_Date <br><span class="hljs-keyword">AND</span> c.RecordDate<span class="hljs-operator">=</span>d.[PK_日期]<br><span class="hljs-keyword">JOIN</span> RC_DEV_AEGIS e <br><span class="hljs-keyword">ON</span> b.WORKID <span class="hljs-operator">=</span> e.WORKID<br></code></pre></td></tr></table></figure></li><li><p>结构图<br><img src="/ETL_CalcCapacityDeviation%5Csnap0101.png"></p></li><li><p>结构图<br><img src="/ETL_CalcCapacityDeviation%5Csnap0102.png"></p></li></ul><h1 id="生成产品维度数据"><a href="#生成产品维度数据" class="headerlink" title="生成产品维度数据"></a>生成产品维度数据</h1><h2 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h2><ol><li>数据库：BI 库  </li><li>涉及的表：<ul><li>Project_Detail</li><li>HumanMap</li><li>PDRC_A_DATE</li><li>DEV_BSD_IDLE</li><li>RC_DEV_AEGIS</li></ul></li></ol><p>对于缺少考勤的数据，默认为全天的产能</p>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSIS</tag>
      
      <tag>ETL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第17周</title>
    <link href="/2019/04/22/Year2019Week17/"/>
    <url>/2019/04/22/Year2019Week17/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第17周（2019-04-22-2019-04-28）"><a href="#2019年第17周（2019-04-22-2019-04-28）" class="headerlink" title="2019年第17周（2019&#x2F;04&#x2F;22~2019&#x2F;04&#x2F;28）"></a>2019年第17周（2019&#x2F;04&#x2F;22~2019&#x2F;04&#x2F;28）</h2><ol><li><a href="https://blog.csdn.net/wstoneh01/article/details/50578331">SQL Server中的四舍五入函数ROUND</a></li><li><a href="https://www.cnblogs.com/gudujianxiao/archive/2012/02/10/2344198.html">SSIS的控制流之For循环容器</a></li><li><a href="http://www.885.com/a/245669.html">你适合炒股吗？到底什么样的人最适合炒股呢？</a></li><li><a href="https://www.jianshu.com/p/7339031f2257">60 余家免费正版图片网站，应该是目前最全的的集合了</a></li><li><a href="https://blog.csdn.net/u010178308/article/details/84281447">SQL SERVER跨服务器(跨库)查询</a></li></ol><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><ul><li><a href="https://bbs.csdn.net/topics/390545868">安装SQLserver2008r2出现“试图执行未经授权的操作”</a><br>安装时取消对兼容模式的勾选，重新安装就可以了。</li></ul><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
      <tag>SSIS</tag>
      
      <tag>股票</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第15周</title>
    <link href="/2019/04/09/Year2019Week15/"/>
    <url>/2019/04/09/Year2019Week15/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第15周（2019-04-08-2019-04-014）"><a href="#2019年第15周（2019-04-08-2019-04-014）" class="headerlink" title="2019年第15周（2019&#x2F;04&#x2F;08~2019&#x2F;04&#x2F;014）"></a>2019年第15周（2019&#x2F;04&#x2F;08~2019&#x2F;04&#x2F;014）</h2><ol><li><a href="http://www.cnblogs.com/yao62995/p/5773578.html">Tensorflow 图解分析 （Session, Graph, Kernels, Devices）</a></li><li><a href="https://www.jianshu.com/p/3536990b86b7">iOS-设计模式详解</a></li><li><a href="https://www.jianshu.com/p/4fbaebeb77ea">iOS-性能优化总结(附实例)</a></li><li><a href="http://wereadteam.github.io/2016/05/03/WeRead-Performance/">微信读书 iOS 性能优化总结</a></li><li><a href="http://www.cocoachina.com/bbs/read.php?tid=1683991">xcode 7.3.1 真机测试出错</a></li><li><a href="https://jingyan.baidu.com/article/e2284b2b906adee2e7118d61.html">iPhone6如何快速还原网络设置</a></li><li><a href="http://www.w3school.com.cn/sql/func_datediff.asp">SQL Server DATEDIFF() 函数</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tensorflow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第14周</title>
    <link href="/2019/04/01/Year2019Week14/"/>
    <url>/2019/04/01/Year2019Week14/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第14周（2019-04-01-2019-04-07）"><a href="#2019年第14周（2019-04-01-2019-04-07）" class="headerlink" title="2019年第14周（2019&#x2F;04&#x2F;01~2019&#x2F;04&#x2F;07）"></a>2019年第14周（2019&#x2F;04&#x2F;01~2019&#x2F;04&#x2F;07）</h2><ol><li><a href="https://www.jianshu.com/p/f50a6830f83c">iOS移动开发没人要了？</a></li><li><a href="https://www.jianshu.com/p/b7f7f3831354">奶香十足的豆沙包和糖三角，粗粮也能甜蜜蜜</a></li><li><a href="https://www.jianshu.com/p/7ed5840fa3d9">4月我家最爱的素菜，一周吃3回，每次上桌最先抢光，比肉还受欢迎</a></li><li><a href="https://bujige.net/blog/Recite-10000-Vocabulary.html">拒绝速食鸡汤，程序员的『10000』单词之路</a></li><li><a href="https://blog.csdn.net/u012551928/article/details/81094698">vmware 安装的苹果系统 安装tools不成功和无法适应分辨率问题</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第131周</title>
    <link href="/2019/03/29/Year2019Week13/"/>
    <url>/2019/03/29/Year2019Week13/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第13周（2019-03-25-2019-03-31）"><a href="#2019年第13周（2019-03-25-2019-03-31）" class="headerlink" title="2019年第13周（2019&#x2F;03&#x2F;25~2019&#x2F;03&#x2F;31）"></a>2019年第13周（2019&#x2F;03&#x2F;25~2019&#x2F;03&#x2F;31）</h2><ol><li><a href="http://bbs.pcbeta.com/viewthread-1802992-1-1.html">授人以渔用原版dmg镜像制作可在虚拟机安装的cdr苹果系统镜像</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1694153-1-16.html">macOS 懒人版制作app</a></li><li><a href="http://d11.applex.net/macos/10.14.x/Install.macOS.Mojave.10.14.4.08.dmg">macOS.Mojave.10.14.4.08.dmg</a></li><li><a href="https://www.cnbeta.com/articles/tech/832201.htm">华为2018年财报：净利润593亿元 同比增长25.1%</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CDR</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SourceTree</title>
    <link href="/2019/03/14/SourceTree/"/>
    <url>/2019/03/14/SourceTree/</url>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ol><li><a href="https://product-downloads.atlassian.com/software/sourcetree/ga/Sourcetree_3.1.1_213.zip">Windows</a></li><li><a href="https://product-downloads.atlassian.com/software/sourcetree/ga/Sourcetree_3.1.2_216.zip">Mac</a></li></ol><h2 id="生成秘钥文件"><a href="#生成秘钥文件" class="headerlink" title="生成秘钥文件"></a>生成秘钥文件</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">$ ssh-keygen -t rsa -<span class="hljs-keyword">b</span> <span class="hljs-number">4096</span> -C <span class="hljs-string">&quot;coderdream@gmail.com&quot;</span><br></code></pre></td></tr></table></figure><h2 id="将秘钥内容添加到-GitHub-中："><a href="#将秘钥内容添加到-GitHub-中：" class="headerlink" title="将秘钥内容添加到 GitHub 中："></a>将秘钥内容添加到 GitHub 中：</h2><ul><li>秘钥地址：C:\Users\xxx\.ssh\id_rsa.pub</li><li><a href="https://github.com/settings/ssh/new">SSH keys &#x2F; Add new</a></li></ul><h2 id="系统设置："><a href="#系统设置：" class="headerlink" title="系统设置："></a>系统设置：</h2><ul><li><p>SSH客户端配置，客户端选择【OpenSSH】：<br>  <img src="/SourceTree%5Csnap0001.png"></p></li><li><p>添加 GitHub 账户：<br>  <img src="/SourceTree%5Csnap0002.png"></p></li></ul><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SourceTree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第11周</title>
    <link href="/2019/03/11/Year2019Week11/"/>
    <url>/2019/03/11/Year2019Week11/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第11周（2019-03-11-2019-03-17）"><a href="#2019年第11周（2019-03-11-2019-03-17）" class="headerlink" title="2019年第11周（2019&#x2F;03&#x2F;11~2019&#x2F;03&#x2F;17）"></a>2019年第11周（2019&#x2F;03&#x2F;11~2019&#x2F;03&#x2F;17）</h2><ol><li><a href="https://www.cnblogs.com/ljhdo/p/5174681.html">SSIS 数据类型和类型转换</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSIS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cocoapods</title>
    <link href="/2019/03/08/CocoaPods/"/>
    <url>/2019/03/08/CocoaPods/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://www.jianshu.com/p/90ca71b3b94a">Pods &#x2F;usr&#x2F;bin&#x2F;git clone https://github.com/CocoaPods/Specs.git master</a></li><li><a href="https://mirror.tuna.tsinghua.edu.cn/help/CocoaPods/">清华大学 CocoaPods 镜像使用帮助</a></li><li><a href="https://www.cnblogs.com/zhuyanboyue/p/6118950.html">CocoaPods最新安装及跳过pod setup快速安装教程</a></li><li><a href="https://blog.csdn.net/iotjin/article/details/81603148">首次 pod setup 慢解决方案</a></li><li><a href="https://www.jianshu.com/p/98ff07ecf4b8">CocoaPods 的简单快速安装方法</a></li><li><a href="https://www.jianshu.com/p/1bb0ad42cb2e">CocoaPods安装 详细</a></li><li><a href="https://gems.ruby-china.com/">RubyGems 镜像</a></li><li><a href="https://www.cnblogs.com/chuancheng/p/8443677.html">iOS安装CocoaPods详细过程</a></li><li><a href="https://www.jianshu.com/p/a1a1d4e549e6">使用国内镜像下载cocoapods -&gt;master</a></li><li><a href="http://cocoapodscn.com/">COCOAPODSCN.COM SPECS 中国镜像站</a></li></ol><h3 id="Cocoapods-使用技巧"><a href="#Cocoapods-使用技巧" class="headerlink" title="Cocoapods 使用技巧"></a>Cocoapods 使用技巧</h3><p>每次我们执行pod install、pod update时都会更新整个specs库，这样非常费时，所以想在不更新specs库的前提下安装三方库。<br>只有当觉得specs库太旧了之后或者specs库里面找不到某个三方库时才进行更新specs库。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">pod install --<span class="hljs-keyword">verbose</span> --<span class="hljs-keyword">no</span>-repo-<span class="hljs-keyword">update</span><br>pod <span class="hljs-keyword">update</span> --<span class="hljs-keyword">verbose</span> --<span class="hljs-keyword">no</span>-repo-<span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure><p>作者：SuperDanny<br>链接：<a href="https://www.jianshu.com/p/098a7dcf67e4">https://www.jianshu.com/p/098a7dcf67e4</a><br>来源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。  </p><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CocoaPods</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第10周</title>
    <link href="/2019/03/05/Year2019Week10/"/>
    <url>/2019/03/05/Year2019Week10/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第10周（2019-03-04-2019-03-10）"><a href="#2019年第10周（2019-03-04-2019-03-10）" class="headerlink" title="2019年第10周（2019&#x2F;03&#x2F;04~2019&#x2F;03&#x2F;10）"></a>2019年第10周（2019&#x2F;03&#x2F;04~2019&#x2F;03&#x2F;10）</h2><ol><li><a href="http://blog.sina.com.cn/s/blog_61d7fba70102wzaf.html">文件快拷工具FastCopy的基本操作</a></li><li><a href="https://blog.csdn.net/wuwo333/article/details/81005135">千万级别文件Copy工具</a></li><li><a href="https://blog.csdn.net/fyq891014/article/details/50935807">Foxmail7.2 账号帐号邮件备份和恢复</a></li><li><a href="https://zhidao.baidu.com/question/556714047.html">如何屏蔽adobe激活服务器 ？</a></li><li><a href="https://jingyan.baidu.com/article/925f8cb8a15813c0dde056f8.html">Adblock使用简明教程</a></li><li><a href="https://www.jianshu.com/p/f71457a2a70c">Chrome插件</a></li><li><a href="https://blog.csdn.net/xueqiang03/article/details/80702771">64位Navicat Premium 12.0.29安装、激活与使用教程</a></li><li><a href="https://blog.csdn.net/xuhongyuan2010/article/details/46287329">SQL取前几条数据</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chrome</tag>
      
      <tag>FastCopy</tag>
      
      <tag>Foxmail</tag>
      
      <tag>Navicat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第9周</title>
    <link href="/2019/02/26/Year2019Week09/"/>
    <url>/2019/02/26/Year2019Week09/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第9周（2019-02-25-2019-03-03）"><a href="#2019年第9周（2019-02-25-2019-03-03）" class="headerlink" title="2019年第9周（2019&#x2F;02&#x2F;25~2019&#x2F;03&#x2F;03）"></a>2019年第9周（2019&#x2F;02&#x2F;25~2019&#x2F;03&#x2F;03）</h2><ol><li><a href="https://www.tpyyes.com/a/object-c_ios/2018/0628/644.html">UIImageView异步加载网络图片并显示图片的方法示例_Swift 4教程</a></li><li><a href="https://www.jianshu.com/p/d8c3477f4dc3">4.IOS(swift)-scrollView(tableView) ·图片加载逻辑的优化</a></li><li><a href="https://post.smzdm.com/p/a997840o/">追剧、办公、看小说…7个网站，让你万事无忧</a>  </li><li><a href="https://post.smzdm.com/p/aqnd04zk/">前员工告诉你，怎么撸交行信用卡的羊毛</a>  </li><li><a href="https://post.smzdm.com/p/a6lnw65o/">瞒天过海，移花接木—分享一下我心中十五部顶级的高智商犯罪电影</a>  </li><li><a href="https://test.smzdm.com/pingce/p/70126446/">入坑8年的烘培老鸟带你了解，拥有1台【顶配台式蒸烤箱】是怎样的一种体验？</a> </li><li><a href="https://blog.csdn.net/hbblzjy/article/details/53392135">Swift基础之使用Alamofire库进行网络请求和断点下载</a> </li><li><a href="https://www.cnblogs.com/jukaiit/p/9283498.html">【iOS开发】Alamofire框架的使用一 —— 基本用法</a> </li><li><a href="https://www.jianshu.com/p/f8c3adb056cf">【iOS开发】Alamofire框架的使用一 —— 基本用法</a></li><li><a href="https://www.jianshu.com/p/903b678d2d3f">【iOS开发】Alamofire框架的使用二 —— 高级用法</a> </li><li><a href="https://www.cnblogs.com/Amoyios/p/6288440.html">Alamofire 4.0 迁移指南</a> </li><li><a href="https://www.jianshu.com/p/f05cb2d24555">AlamoFire的使用(下载队列，断点续传)</a> </li><li><a href="https://www.cnblogs.com/LiuChengLi/p/4862541.html">iOS9 http不能访问网络——在Xcode中将https改成http方式</a> </li><li><a href="https://blog.csdn.net/kuangdacaikuang/article/details/80687004">swift 4 tableViewCell动态加载网络图片问题处理</a> </li><li><a href="https://blog.csdn.net/u014636932/article/details/74913498">iOS开发学习笔记之swift3.0几种加载网络图片的方法</a> </li><li><a href="https://www.cnblogs.com/Jenaral/p/5722431.html">Alamofire 框架浅析</a> </li><li><a href="https://blog.csdn.net/hello_hwc/article/details/72853786">Alamofire的设计之道</a> </li><li><a href="https://cloud.tencent.com/developer/article/1332607">用 Swift 编写网络层单元测试</a> </li><li><a href="https://www.jianshu.com/p/07b1ec36a689">Swift Alamofire</a> </li><li><a href="https://www.jianshu.com/p/78c106db4530">Alamofire 使用心得</a> </li><li><a href="https://blog.csdn.net/SunFlowerInRain/article/details/76207022">翻译_Alamofire的使用教程</a> </li><li><a href="https://blog.csdn.net/difffate/article/details/77945239">PowerDesigner显示Comment注释</a> </li><li><a href="https://github.com/Quick/Quick/blob/master/Documentation/zh-cn/ArrangeActAssert.md">编写高效的 XCTest 测试: Arrange，Act 和 Assert</a> </li><li><a href="https://onevcat.com/2014/02/ios-test-with-kiwi/">TDD的iOS开发初步以及Kiwi使用入门</a> </li><li><a href="https://www.raywenderlich.com/1752-unit-testing-tutorial-mocking-objects">Unit Testing Tutorial: Mocking Objects</a> </li><li><a href="https://www.jianshu.com/p/36c5682da0f7">如何为网络接口编写单元测试</a> </li><li><a href="https://www.jianshu.com/p/c54f0cc08c20">iOS单元测试和UI测试</a> </li><li><a href="https://www.jianshu.com/p/f13fc6aed467">使用swift给objc项目做单元测试</a> </li><li><a href="https://cloud.tencent.com/developer/article/1332605">开源项目——『看知乎』iOS 版</a> </li><li><a href="https://cloud.tencent.com/developer/article/1332611">Swift API 设计指南（上）</a> </li><li><a href="https://cloud.tencent.com/developer/article/1332612">Swift API 设计指南（下）</a> </li><li><a href="https://cloud.tencent.com/developer/article/1332615">试水 Mac 开发 —— 代码生成器</a> </li><li><a href="https://www.jianshu.com/p/6d090e9cdf15">Swift性能的一些测试</a> </li><li><a href="https://www.jianshu.com/p/be32739d8aae">iOS如何开始单元测试（swift版）</a> </li><li><a href="https://www.cnblogs.com/wolfman4secret/p/5078036.html">Swift中的单元测试</a> </li><li><a href="https://www.jianshu.com/p/56c916bbfad1">一些好用swift三方框架</a> </li><li><a href="https://juejin.im/post/5c6a0b6ef265da2de660f83f">用这些 iOS 技巧让你的 APP 性能更佳</a> </li><li><a href="https://juejin.im/post/5c6a0abaf265da2dc675a9b2">Swift：通过示例避免内存泄漏</a> </li><li><a href="https://juejin.im/post/5c653aa6e51d457fbf5dc298">来一次有侧重点的区分Swift与Objective-C</a> </li><li><a href="https://juejin.im/post/5c62caf6e51d457fc905dd75">AppDelegate的模块化+瘦身</a> </li><li><a href="https://www.jianshu.com/p/4522a4cf9fc9">Swift下UserDefaults的常见使用和注意事项</a>   </li><li><a href="https://www.cnblogs.com/hanivy/p/7550666.html">SublimeText 批量清除空行</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>23种设计模式及案例整理分享</title>
    <link href="/2019/02/21/DesignPatternIntroduce/"/>
    <url>/2019/02/21/DesignPatternIntroduce/</url>
    
    <content type="html"><![CDATA[<h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><ul><li><a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F">创建型模式</a><ul><li><a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F">工厂模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F">抽象工厂模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">单例模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F">建造者模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F">原型模式</a></li></ul></li><li><a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F">结构型模式</a>  <ul><li><a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F">适配器模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F">装饰器模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F">代理模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F">外观模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F">桥接模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F">组合模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F">享元模式</a></li></ul></li><li><a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F">行为型模式</a><ul><li><a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F">策略模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F">模板模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F">观察者模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F">迭代器模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F">责任链模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F">命令模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F">备忘录模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F">状态模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F">访问者模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F">中介者模式</a>、<a href="https://coderdream.github.io/2019/02/21/DesignPatternIntroduce#%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F">解释器模式</a></li></ul></li></ul><p>&nbsp;<br><escape><span id="more"></span></escape></p><p><img src="/DesignPatternIntroduce%5C640.jpg"></p><hr><h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h1><hr><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p><ul><li>详解<br><strong>意图</strong>：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。<br><strong>主要解决</strong>：主要解决接口选择的问题。<br><strong>何时使用</strong>：我们明确地计划不同条件下创建不同实例时。<br><strong>如何解决</strong>：让其子类实现工厂接口，返回的也是一个抽象的产品。<br><strong>关键代码</strong>：创建过程在其子类执行。<br><strong>应用实例</strong>： 1、您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。 2、Hibernate 换数据库只需换方言和驱动就可以。<br><strong>优点</strong>： 1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。<br><strong>缺点</strong>：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。<br><strong>使用场景</strong>： 1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。 2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。 3、设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。<br><strong>注意事项</strong>：作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</li></ul><hr><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p><ul><li>详解<br><strong>意图</strong>：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。<br><strong>主要解决</strong>：主要解决接口选择的问题。<br><strong>何时使用</strong>：系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。<br><strong>如何解决</strong>：在一个产品族里面，定义多个产品。<br><strong>关键代码</strong>：在一个工厂里聚合多个同类产品。<br><strong>应用实例</strong>：工作了，为了参加一些聚会，肯定有两套或多套衣服吧，比如说有商务装（成套，一系列具体产品）、时尚装（成套，一系列具体产品），甚至对于一个家庭来说，可能有商务女装、商务男装、时尚女装、时尚男装，这些也都是成套的，即一系列具体产品。假设一种情况（现实中是不存在的，要不然，没法进入共产主义了，但有利于说明抽象工厂模式），在您的家中，某一个衣柜（具体工厂）只能存放某一种这样的衣服（成套，一系列具体产品），每次拿这种成套的衣服时也自然要从这个衣柜中取出了。用 OO 的思想去理解，所有的衣柜（具体工厂）都是衣柜类的（抽象工厂）某一个，而每一件成套的衣服又包括具体的上衣（某一具体产品），裤子（某一具体产品），这些具体的上衣其实也都是上衣（抽象产品），具体的裤子也都是裤子（另一个抽象产品）。<br><strong>优点</strong>：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。<br><strong>缺点</strong>：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。<br><strong>使用场景</strong>： 1、QQ 换皮肤，一整套一起换。 2、生成不同操作系统的程序。<br><strong>注意事项</strong>：产品族难扩展，产品等级易扩展。</li></ul><hr><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><blockquote><p>注意：<br>1、单例类只能有一个实例。<br>2、单例类必须自己创建自己的唯一实例。<br>3、单例类必须给所有其他对象提供这一实例。  </p></blockquote><ul><li>详解<br><strong>意图</strong>：保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br><strong>主要解决</strong>：一个全局使用的类频繁地创建与销毁。<br><strong>何时使用</strong>：当您想控制实例数目，节省系统资源的时候。<br><strong>如何解决</strong>：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。<br><strong>关键代码</strong>：构造函数是私有的。<br><strong>应用实例</strong>： 1、一个党只能有一个主席。 2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。 3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。<br><strong>优点</strong>： 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。 2、避免对资源的多重占用（比如写文件操作）。<br><strong>缺点</strong>：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。<br><strong>使用场景</strong>： 1、要求生产唯一序列号。 2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 3、创建的一个对象需要消耗的资源过多，比如 I&#x2F;O 与数据库的连接等。<br><strong>注意事项</strong>：getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</li></ul><hr><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p><ul><li>详解<br><strong>意图</strong>：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。<br><strong>主要解决</strong>：主要解决在软件系统中，有时候面临着”一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。<br><strong>何时使用</strong>：一些基本部件不会变，而其组合经常变化的时候。<br><strong>如何解决</strong>：将变与不变分离开。<br><strong>关键代码</strong>：建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。<br><strong>应用实例</strong>： 1、去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的”套餐”。 2、JAVA 中的 StringBuilder。<br><strong>优点</strong>： 1、建造者独立，易扩展。 2、便于控制细节风险。<br><strong>缺点</strong>： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。<br><strong>使用场景</strong>： 1、需要生成的对象具有复杂的内部结构。 2、需要生成的对象内部属性本身相互依赖。<br><strong>注意事项</strong>：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</li></ul><hr><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p><ul><li>详解<br><strong>意图</strong>：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。<br><strong>主要解决</strong>：在运行期建立和删除原型。<br><strong>何时使用</strong>： 1、当一个系统应该独立于它的产品创建，构成和表示时。 2、当要实例化的类是在运行时刻指定时，例如，通过动态装载。 3、为了避免创建一个与产品类层次平行的工厂类层次时。 4、当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。<br><strong>如何解决</strong>：利用已有的一个原型对象，快速地生成和原型对象一样的实例。<br><strong>关键代码</strong>： 1、实现克隆操作，在 JAVA 继承 Cloneable，重写 clone()，在 .NET 中可以使用 Object 类的 MemberwiseClone() 方法来实现对象的浅拷贝或通过序列化的方式来实现深拷贝。 2、原型模式同样用于隔离类对象的使用者和具体类型（易变类）之间的耦合关系，它同样要求这些”易变类”拥有稳定的接口。<br><strong>应用实例</strong>： 1、细胞分裂。 2、JAVA 中的 Object clone() 方法。<br><strong>优点</strong>： 1、性能提高。 2、逃避构造函数的约束。<br><strong>缺点</strong>： 1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。 2、必须实现 Cloneable 接口。<br><strong>使用场景</strong>： 1、资源优化场景。 2、类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。 3、性能和安全要求的场景。 4、通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。 5、一个对象多个修改者的场景。 6、一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。 7、在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与 Java 融为浑然一体，大家可以随手拿来使用。<br><strong>注意事项</strong>：与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现 Cloneable，重写，深拷贝是通过实现 Serializable 读取二进制流。</li></ul><hr><h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><hr><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。<br>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。<br>我们通过下面的实例来演示适配器模式的使用。其中，音频播放器设备只能播放 mp3 文件，通过使用一个更高级的音频播放器来播放 vlc 和 mp4 文件。</p><ul><li>详解<br><strong>意图</strong>：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。<br><strong>主要解决</strong>：主要解决在软件系统中，常常要将一些”现存的对象”放到新的环境中，而新环境要求的接口是现对象不能满足的。<br><strong>何时使用</strong>： 1、系统需要使用现有的类，而此类的接口不符合系统的需要。 2、想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。 3、通过接口转换，将一个类插入另一个类系中。（比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现飞的接口。）<br><strong>如何解决</strong>：继承或依赖（推荐）。<br><strong>关键代码</strong>：适配器继承或依赖已有的对象，实现想要的目标接口。<br><strong>应用实例</strong>： 1、美国电器 110V，中国 220V，就要有一个适配器将 110V 转化为 220V。 2、JAVA JDK 1.1 提供了 Enumeration 接口，而在 1.2 中提供了 Iterator 接口，想要使用 1.2 的 JDK，则要将以前系统的 Enumeration 接口转化为 Iterator 接口，这时就需要适配器模式。 3、在 LINUX 上运行 WINDOWS 程序。 4、JAVA 中的 jdbc。<br><strong>优点</strong>： 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。<br><strong>缺点</strong>： 1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。 2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。<br><strong>使用场景</strong>：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。<br><strong>注意事项</strong>：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。</li></ul><hr><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。<br>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。<br>我们通过下面的实例来演示装饰器模式的用法。其中，我们将把一个形状装饰上不同的颜色，同时又不改变形状类。</p><ul><li>详解<br><strong>意图</strong>：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。<br><strong>主要解决</strong>：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。<br><strong>何时使用</strong>：在不想增加很多子类的情况下扩展类。<br><strong>如何解决</strong>：将具体功能职责划分，同时继承装饰者模式。<br><strong>关键代码</strong>： 1、Component 类充当抽象角色，不应该具体实现。 2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。<br><strong>应用实例</strong>： 1、孙悟空有 72 变，当他变成”庙宇”后，他的根本还是一只猴子，但是他又有了庙宇的功能。 2、不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。<br><strong>优点</strong>：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。<br><strong>缺点</strong>：多层装饰比较复杂。<br><strong>使用场景</strong>： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。<br><strong>注意事项</strong>：可代替继承。</li></ul><hr><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。<br>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p><ul><li>详解<br><strong>意图</strong>：为其他对象提供一种代理以控制对这个对象的访问。<br><strong>主要解决</strong>：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。<br><strong>何时使用</strong>：想在访问一个类时做一些控制。<br><strong>如何解决</strong>：增加中间层。<br><strong>关键代码</strong>：实现与被代理类组合。<br><strong>应用实例</strong>： 1、Windows 里面的快捷方式。 2、猪八戒去找高翠兰结果是孙悟空变的，可以这样理解：把高翠兰的外貌抽象出来，高翠兰本人和孙悟空都实现了这个接口，猪八戒访问高翠兰的时候看不出来这个是孙悟空，所以说孙悟空是高翠兰代理类。 3、买火车票不一定在火车站买，也可以去代售点。 4、一张支票或银行存单是账户中资金的代理。支票在市场交易中用来代替现金，并提供对签发人账号上资金的控制。 5、spring aop。<br><strong>优点</strong>： 1、职责清晰。 2、高扩展性。 3、智能化。<br><strong>缺点</strong>： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。<br><strong>使用场景</strong>：按职责来划分，通常有以下使用场景： 1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理。<br><strong>注意事项</strong>： 1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。 2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</li></ul><hr><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p>外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。<br>这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。</p><ul><li>详解<br><strong>意图</strong>：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。<br><strong>主要解决</strong>：降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。<br><strong>何时使用</strong>： 1、客户端不需要知道系统内部的复杂联系，整个系统只需提供一个”接待员”即可。 2、定义系统的入口。<br><strong>如何解决</strong>：客户端不与系统耦合，外观类与系统耦合。<br><strong>关键代码</strong>：在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。<br><strong>应用实例</strong>： 1、去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。 2、JAVA 的三层开发模式。<br><strong>优点</strong>： 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。<br><strong>缺点</strong>：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。<br><strong>使用场景</strong>： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。<br><strong>注意事项</strong>：在层次化结构中，可以使用外观模式定义系统中每一层的入口。</li></ul><hr><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。<br>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。<br>我们通过下面的实例来演示桥接模式（Bridge Pattern）的用法。其中，可以使用相同的抽象类方法但是不同的桥接实现类，来画出不同颜色的圆。</p><ul><li>详解<br><strong>意图</strong>：将抽象部分与实现部分分离，使它们都可以独立的变化。<br><strong>主要解决</strong>：在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。<br><strong>何时使用</strong>：实现系统可能有多个角度分类，每一种角度都可能变化。<br><strong>如何解决</strong>：把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。<br><strong>关键代码</strong>：抽象类依赖实现类。<br><strong>应用实例</strong>： 1、猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择。 2、墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。<br><strong>优点</strong>： 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。<br><strong>缺点</strong>：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。<br><strong>使用场景</strong>： 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。<br><strong>注意事项</strong>：对于两个独立变化的维度，使用桥接模式再适合不过了。</li></ul><hr><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p>组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。<br>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。<br>我们通过下面的实例来演示组合模式的用法。实例演示了一个组织中员工的层次结构。</p><ul><li>详解<br><strong>意图</strong>：将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。<br><strong>主要解决</strong>：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。<br><strong>何时使用</strong>： 1、您想表示对象的部分-整体层次结构（树形结构）。 2、您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。<br><strong>如何解决</strong>：树枝和叶子实现统一接口，树枝内部组合该接口。<br><strong>关键代码</strong>：树枝内部组合该接口，并且含有内部属性 List，里面放 Component。<br><strong>应用实例</strong>： 1、算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作数、操作符和另一个操作数。 2、在 JAVA AWT 和 SWING 中，对于 Button 和 Checkbox 是树叶，Container 是树枝。<br><strong>优点</strong>： 1、高层模块调用简单。 2、节点自由增加。<br><strong>缺点</strong>：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。<br><strong>使用场景</strong>：部分、整体场景，如树形菜单，文件、文件夹的管理。<br><strong>注意事项</strong>：定义时为具体类。</li></ul><hr><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。<br>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。我们将通过创建 5 个对象来画出 20 个分布于不同位置的圆来演示这种模式。由于只有 5 种可用的颜色，所以 color 属性被用来检查现有的 Circle 对象。</p><ul><li>详解<br><strong>意图</strong>：运用共享技术有效地支持大量细粒度的对象。<br><strong>主要解决</strong>：在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。<br><strong>何时使用</strong>： 1、系统中有大量对象。 2、这些对象消耗大量内存。 3、这些对象的状态大部分可以外部化。 4、这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。 5、系统不依赖于这些对象身份，这些对象是不可分辨的。<br><strong>如何解决</strong>：用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。<br><strong>关键代码</strong>：用 HashMap 存储这些对象。<br><strong>应用实例</strong>： 1、JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。 2、数据库的数据池。<br><strong>优点</strong>：大大减少对象的创建，降低系统的内存，使效率提高。<br><strong>缺点</strong>：提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。<br><strong>使用场景</strong>： 1、系统有大量相似对象。 2、需要缓冲池的场景。<br><strong>注意事项</strong>： 1、注意划分外部状态和内部状态，否则可能会引起线程安全问题。 2、这些类必须有一个工厂对象加以控制。</li></ul><hr><h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1><hr><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。<br>在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p><hr><ul><li>详解<br><strong>意图</strong>：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。<br><strong>主要解决</strong>：在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。<br><strong>何时使用</strong>：一个系统有许多许多类，而区分它们的只是他们直接的行为。<br><strong>如何解决</strong>：将这些算法封装成一个一个的类，任意地替换。<br><strong>关键代码</strong>：实现同一个接口。<br><strong>应用实例</strong>： 1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。 2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。 3、JAVA AWT 中的 LayoutManager。<br><strong>优点</strong>： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。<br><strong>缺点</strong>： 1、策略类会增多。 2、所有策略类都需要对外暴露。<br><strong>使用场景</strong>： 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 2、一个系统需要动态地在几种算法中选择一种。 3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。<br><strong>注意事项</strong>：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</li></ul><hr><h2 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h2><p>在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式&#x2F;模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。</p><ul><li>详解<br><strong>意图</strong>：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。<br><strong>主要解决</strong>：一些方法通用，却在每一个子类都重新写了这一方法。<br><strong>何时使用</strong>：有一些通用的方法。<br><strong>如何解决</strong>：将这些通用算法抽象出来。<br><strong>关键代码</strong>：在抽象类实现，其他步骤在子类实现。<br><strong>应用实例</strong>： 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。 3、spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。<br><strong>优点</strong>： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。<br><strong>缺点</strong>：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。<br><strong>使用场景</strong>： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。<br><strong>注意事项</strong>：为防止恶意操作，一般模板方法都加上 final 关键词。</li></ul><hr><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。</p><ul><li>详解<br><strong>意图</strong>：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。<br><strong>主要解决</strong>：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。<br><strong>何时使用</strong>：一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。<br><strong>如何解决</strong>：使用面向对象技术，可以将这种依赖关系弱化。<br><strong>关键代码</strong>：在抽象类里有一个 ArrayList 存放观察者们。<br><strong>应用实例</strong>： 1、拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。 2、西游记里面悟空请求菩萨降服红孩儿，菩萨洒了一地水招来一个老乌龟，这个乌龟就是观察者，他观察菩萨洒水这个动作。<br><strong>优点</strong>： 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。<br><strong>缺点</strong>： 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。<br><strong>使用场景</strong>：<br>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。<br>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。<br>一个对象必须通知其他对象，而并不知道这些对象是谁。<br>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。<br><strong>注意事项</strong>： 1、JAVA 中已经有了对观察者模式的支持类。 2、避免循环引用。 3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</li></ul><hr><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><p>迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。<br>迭代器模式属于行为型模式。</p><ul><li>详解<br><strong>意图</strong>：提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。<br><strong>主要解决</strong>：不同的方式来遍历整个整合对象。<br><strong>何时使用</strong>：遍历一个聚合对象。<br><strong>如何解决</strong>：把在元素之间游走的责任交给迭代器，而不是聚合对象。<br><strong>关键代码</strong>：定义接口：hasNext, next。<br><strong>应用实例</strong>：JAVA 中的 iterator。<br><strong>优点</strong>： 1、它支持以不同的方式遍历一个聚合对象。 2、迭代器简化了聚合类。 3、在同一个聚合上可以有多个遍历。 4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。<br><strong>缺点</strong>：由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。<br><strong>使用场景</strong>： 1、访问一个聚合对象的内容而无须暴露它的内部表示。 2、需要为聚合对象提供多种遍历方式。 3、为遍历不同的聚合结构提供一个统一的接口。<br><strong>注意事项</strong>：迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据。</li></ul><hr><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p>顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。<br>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p><ul><li>详解<br><strong>意图</strong>：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。<br><strong>主要解决</strong>：职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。<br><strong>何时使用</strong>：在处理消息的时候以过滤很多道。<br><strong>如何解决</strong>：拦截的类都实现统一接口。<br><strong>关键代码</strong>：Handler 里面聚合它自己，在 HanleRequest 里判断是否合适，如果没达到条件则向下传递，向谁传递之前 set 进去。<br><strong>应用实例</strong>： 1、红楼梦中的”击鼓传花”。 2、JS 中的事件冒泡。 3、JAVA WEB 中 Apache Tomcat 对 Encoding 的处理，Struts2 的拦截器，jsp servlet 的 Filter。<br><strong>优点</strong>： 1、降低耦合度。它将请求的发送者和接收者解耦。 2、简化了对象。使得对象不需要知道链的结构。 3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 4、增加新的请求处理类很方便。<br><strong>缺点</strong>： 1、不能保证请求一定被接收。 2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 3、可能不容易观察运行时的特征，有碍于除错。<br><strong>使用场景</strong>： 1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。 2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。 3、可动态指定一组对象处理请求。<br><strong>注意事项</strong>：在 JAVA WEB 中遇到很多应用。</li></ul><hr><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p><ul><li>详解<br><strong>意图</strong>：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。<br><strong>主要解决</strong>：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。<br><strong>何时使用</strong>：在某些场合，比如要对行为进行”记录、撤销&#x2F;重做、事务”等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将”行为请求者”与”行为实现者”解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。<br><strong>如何解决</strong>：通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。<br><strong>关键代码</strong>：定义三个角色：1、received 真正的命令执行对象 2、Command 3、invoker 使用命令对象的入口<br><strong>应用实例</strong>：struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于 Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。<br><strong>优点</strong>： 1、降低了系统耦合度。 2、新的命令可以很容易添加到系统中去。<br><strong>缺点</strong>：使用命令模式可能会导致某些系统有过多的具体命令类。<br><strong>使用场景</strong>：认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。<br><strong>注意事项</strong>：系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作，也可以考虑使用命令模式，见命令模式的扩展。</li></ul><hr><h2 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h2><p>备忘录模式（Memento Pattern）保存一个对象的某个状态，以便在适当的时候恢复对象。备忘录模式属于行为型模式。</p><ul><li>详解<br><strong>意图</strong>：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。<br><strong>主要解决</strong>：所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。<br><strong>何时使用</strong>：很多时候我们总是需要记录一个对象的内部状态，这样做的目的就是为了允许用户取消不确定或者错误的操作，能够恢复到他原先的状态，使得他有”后悔药”可吃。<br><strong>如何解决</strong>：通过一个备忘录类专门存储对象状态。<br><strong>关键代码</strong>：客户不与备忘录类耦合，与备忘录管理类耦合。<br><strong>应用实例</strong>： 1、后悔药。 2、打游戏时的存档。 3、Windows 里的 ctri + z。 4、IE 中的后退。 4、数据库的事务管理。<br><strong>优点</strong>： 1、给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 2、实现了信息的封装，使得用户不需要关心状态的保存细节。<br><strong>缺点</strong>：消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。<br><strong>使用场景</strong>： 1、需要保存&#x2F;恢复数据的相关状态场景。 2、提供一个可回滚的操作。<br><strong>注意事项</strong>： 1、为了符合迪米特原则，还要增加一个管理备忘录的类。 2、为了节约内存，可使用原型模式+备忘录模式。</li></ul><hr><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><p>在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。<br>在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象。</p><ul><li>详解<br><strong>意图</strong>：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。<br><strong>主要解决</strong>：对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。<br><strong>何时使用</strong>：代码中包含大量与对象状态有关的条件语句。<br><strong>如何解决</strong>：将各种具体的状态类抽象出来。<br><strong>关键代码</strong>：通常命令模式的接口中只有一个方法。而状态模式的接口中有一个或者多个方法。而且，状态模式的实现类的方法，一般返回值，或者是改变实例变量的值。也就是说，状态模式一般和对象的状态有关。实现类的方法有不同的功能，覆盖接口中的方法。状态模式和命令模式一样，也可以用于消除 if…else 等条件选择语句。<br><strong>应用实例</strong>： 1、打篮球的时候运动员可以有正常状态、不正常状态和超常状态。 2、曾侯乙编钟中，’钟是抽象接口’,’钟A’等是具体状态，’曾侯乙编钟’是具体环境（Context）。<br><strong>优点</strong>： 1、封装了转换规则。 2、枚举可能的状态，在枚举状态之前需要确定状态种类。 3、将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 4、允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 5、可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。<br><strong>缺点</strong>： 1、状态模式的使用必然会增加系统类和对象的个数。 2、状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 3、状态模式对”开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。<br><strong>使用场景</strong>： 1、行为随状态改变而改变的场景。 2、条件、分支语句的代替者。<br><strong>注意事项</strong>：在行为受状态约束的时候使用状态模式，而且状态不超过 5 个。</li></ul><hr><h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><p>在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。这种类型的设计模式属于行为型模式。根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。</p><ul><li>详解<br><strong>意图</strong>：主要将数据结构与数据操作分离。<br><strong>主要解决</strong>：稳定的数据结构和易变的操作耦合问题。<br><strong>何时使用</strong>：需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，使用访问者模式将这些封装到类中。<br><strong>如何解决</strong>：在被访问的类里面加一个对外提供接待访问者的接口。<br><strong>关键代码</strong>：在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。<br><strong>应用实例</strong>：您在朋友家做客，您是访问者，朋友接受您的访问，您通过朋友的描述，然后对朋友的描述做出一个判断，这就是访问者模式。<br><strong>优点</strong>： 1、符合单一职责原则。 2、优秀的扩展性。 3、灵活性。<br><strong>缺点</strong>： 1、具体元素对访问者公布细节，违反了迪米特原则。 2、具体元素变更比较困难。 3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。<br><strong>使用场景</strong>： 1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，也不希望在增加新操作时修改这些类。<br><strong>注意事项</strong>：访问者可以对功能进行统一，可以做报表、UI、拦截器与过滤器。</li></ul><hr><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><p>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。</p><ul><li>详解<br><strong>意图</strong>：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。<br><strong>主要解决</strong>：对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。<br><strong>何时使用</strong>：多个类相互耦合，形成了网状结构。<br><strong>如何解决</strong>：将上述网状结构分离为星型结构。<br><strong>关键代码</strong>：对象 Colleague 之间的通信封装到一个类中单独处理。<br><strong>应用实例</strong>： 1、中国加入 WTO 之前是各个国家相互贸易，结构复杂，现在是各个国家通过 WTO 来互相贸易。 2、机场调度系统。 3、MVC 框架，其中C（控制器）就是 M（模型）和 V（视图）的中介者。<br><strong>优点</strong>： 1、降低了类的复杂度，将一对多转化成了一对一。 2、各个类之间的解耦。 3、符合迪米特原则。<br><strong>缺点</strong>：中介者会庞大，变得复杂难以维护。<br><strong>使用场景</strong>： 1、系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。 2、想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。<br><strong>注意事项</strong>：不应当在职责混乱的时候使用。</li></ul><hr><h2 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h2><p>解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p><ul><li>详解<br><strong>意图</strong>：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。<br><strong>主要解决</strong>：对于一些固定文法构建一个解释句子的解释器。<br><strong>何时使用</strong>：如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。<br><strong>如何解决</strong>：构件语法树，定义终结符与非终结符。<br><strong>关键代码</strong>：构件环境类，包含解释器之外的一些全局信息，一般是 HashMap。<br><strong>应用实例</strong>：编译器、运算表达式计算。<br><strong>优点</strong>： 1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。<br><strong>缺点</strong>： 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。<br><strong>使用场景</strong>： 1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。 2、一些重复出现的问题可以用一种简单的语言来进行表达。 3、一个简单语法需要解释的场景。<br><strong>注意事项</strong>：可利用场景比较少，JAVA 中如果碰到可以用 expression4J 代替。</li></ul><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzNzIwODY2OQ==&mid=2649822732&idx=1&sn=07c98615639b9fa40930875ee38749ec&chksm=f0c9a33ec7be2a2891ef8cdb5e9adc4e802ba37aa065478b23fc1531564207cb77f5ba1bd04b&mpshare=1&scene=1&srcid=0221qlTWYitiyupQgfgnMZ7l#rd">原文链接</a></p>]]></content>
    
    
    <categories>
      
      <category>DesignPattern</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DesignPattern</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第8周</title>
    <link href="/2019/02/20/Year2019Week08/"/>
    <url>/2019/02/20/Year2019Week08/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第8周（2019-02-18-2019-02-24）"><a href="#2019年第8周（2019-02-18-2019-02-24）" class="headerlink" title="2019年第8周（2019&#x2F;02&#x2F;18~2019&#x2F;02&#x2F;24）"></a>2019年第8周（2019&#x2F;02&#x2F;18~2019&#x2F;02&#x2F;24）</h2><ol><li><a href="https://blog.csdn.net/billy_chen_2013/article/details/71172598">SQL Server 查询时显示行号</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ETL最佳实践之生成产品维度</title>
    <link href="/2019/02/20/ETL_ProductDim/"/>
    <url>/2019/02/20/ETL_ProductDim/</url>
    
    <content type="html"><![CDATA[<ul><li>生成产品维度数据</li><li>刷新 Project_Detail 表的上一个版本的项目ID<br><escape><span id="more"></span></escape></li></ul><p>&nbsp;</p><h1 id="查找项目列表（在101上）"><a href="#查找项目列表（在101上）" class="headerlink" title="查找项目列表（在101上）"></a>查找项目列表（在101上）</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br><span class="hljs-operator">*</span> <br><span class="hljs-keyword">FROM</span><br>ISBG_Project <br><span class="hljs-keyword">WHERE</span><br>( OBDORPPC <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;PPC&#x27;</span> <span class="hljs-keyword">AND</span> CustomerNo <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;00106%&#x27;</span> <span class="hljs-keyword">AND</span> ProjectStartDateTime <span class="hljs-operator">&gt;=</span> <span class="hljs-string">&#x27;2018-1-1&#x27;</span> ) <br><span class="hljs-keyword">OR</span> ( ProjectNewNo <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IDLE20180308127&#x27;</span> ) <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>CreateDate <span class="hljs-keyword">DESC</span><br></code></pre></td></tr></table></figure><h1 id="生成产品维度数据"><a href="#生成产品维度数据" class="headerlink" title="生成产品维度数据"></a>生成产品维度数据</h1><h2 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h2><ol><li>数据库：业务库、BI库  </li><li>涉及的表：业务库（ISBG_Project）、BI库（PRODUCT_AEGIS  、Project_Detail）</li><li>将 <strong>ISBG_Project表</strong> 中的 <strong>BeProduct</strong>、<strong>BeProductName</strong>  两个字段查询出来得到结果集，然后刷新维度表的数据，有就略过，没有就新增  </li><li>刷新 <strong>Project_Detail</strong> 的 产品信息</li></ol><ul><li>查询脚本<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>a.BeProduct,<br>a.BeProductName<br><span class="hljs-keyword">FROM</span><br>ISBG_Project a<br><span class="hljs-keyword">WHERE</span><br>a.BeProduct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">AND</span> a.BeProductName <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">AND</span> a.BeProduct <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">AND</span> a.BeProductName <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>a.BeProduct,<br>a.BeProductName<br></code></pre></td></tr></table></figure></li><li>查询结果<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">BeProduct</span><span class="hljs-keyword">BeProductName</span><br><span class="hljs-keyword"></span> IPDHisales<br>...<br>中间件云-开发中间件云<br>终端设计&amp;验证&amp;软件开发过程管理CMC<br></code></pre></td></tr></table></figure></li></ul><h1 id="刷新-Project-Detail-表的上一个版本的项目ID"><a href="#刷新-Project-Detail-表的上一个版本的项目ID" class="headerlink" title="刷新 Project_Detail 表的上一个版本的项目ID"></a>刷新 Project_Detail 表的上一个版本的项目ID</h1><h2 id="1-思路-1"><a href="#1-思路-1" class="headerlink" title="1. 思路"></a>1. 思路</h2><ol><li>数据库：业务库、BI库  </li><li>涉及的表：业务库（ISBG_Project）、BI库（Project_Detail）</li><li>通过脚本查询得到所有版本信息，按项目开始时间排序并增加行号，当前项目的行号减一即为前一个项目，  </li><li>将得到的 <strong>ProjectID</strong> 刷新到 <strong>Project_Detail表</strong> 的 <strong>PreviousVersionProjectID</strong></li></ol><ul><li><p>查询脚本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br><span class="hljs-built_in">ROW_NUMBER</span> () <span class="hljs-keyword">OVER</span> (<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>a.ProjectStartDateTime<br>) <span class="hljs-keyword">AS</span> row_number,<br>a.id,<br>a.ProjectStartDateTime,<br>a.BeProduct,<br>a.BeProductName<br><span class="hljs-keyword">FROM</span><br>ISBG_Project a<br><span class="hljs-keyword">JOIN</span> (<br><span class="hljs-keyword">SELECT</span><br>ip.BeProduct,<br>ip.BeProductName<br><span class="hljs-keyword">FROM</span><br>ISBG_Project ip<br><span class="hljs-keyword">WHERE</span><br>id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;3a88df6c-83be-4903-a923-f2c80abcf3be&#x27;</span><br>) b <span class="hljs-keyword">ON</span> a.BeProduct <span class="hljs-operator">=</span> b.BeProduct<br><span class="hljs-keyword">AND</span> a.BeProductName <span class="hljs-operator">=</span> b.BeProductName<br></code></pre></td></tr></table></figure></li><li><p>查询结果</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">RowNumber</span>idProjectStartDateTimeBeProductBeProductName<br><span class="hljs-attribute">1</span><span class="hljs-number">290</span>a08b8-<span class="hljs-number">241</span>a-<span class="hljs-number">486</span>b-<span class="hljs-number">90</span>a0-<span class="hljs-number">7</span>d57e9ce32ab<span class="hljs-number">2018</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span>InnovationPQM<br><span class="hljs-attribute">2</span><span class="hljs-number">3</span>a88df6c-<span class="hljs-number">83</span>be-<span class="hljs-number">4903</span>-a923-f2c80abcf3be<span class="hljs-number">2018</span>-<span class="hljs-number">11</span>-<span class="hljs-number">19</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span>innovationPQM<br><span class="hljs-attribute">3</span>d375e63a-a952-<span class="hljs-number">48</span>c0-<span class="hljs-number">84</span>a6-<span class="hljs-number">3666</span>ef9630fc<span class="hljs-number">2018</span>-<span class="hljs-number">12</span>-<span class="hljs-number">17</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">000</span>innovationPQM<br></code></pre></td></tr></table></figure></li><li><p>整体步骤：<br><img src="/ETL_ProductDim%5C0200.png">  </p></li><li><p>第1步：<br><img src="/ETL_ProductDim%5C0201.png">  </p></li><li><p>第2步：过滤已经处理过的数据<br><img src="/ETL_ProductDim%5C0202.png"> </p></li><li><p>第3步：获取版本编号<br><img src="/ETL_ProductDim%5C0203.png">   </p></li><li><p>查询脚本（通过产品信息获得版本编号）  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>a.a_number,<br><span class="hljs-built_in">ROW_NUMBER</span> () <span class="hljs-keyword">OVER</span> (<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>a.BeProduct,a.BeProductName,b.ProjectStartDateTime<br>) <span class="hljs-keyword">AS</span> row_number,<br>b.ID,b.ProjectStartDateTime,a.BeProduct,a.BeProductName <span class="hljs-keyword">from</span><br>(<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">ROW_NUMBER</span> () <span class="hljs-keyword">OVER</span> (<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>BeProduct,BeProductName<br>) <span class="hljs-keyword">AS</span> a_number,<br>BeProduct,BeProductName <span class="hljs-keyword">from</span> ISBG_Project <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> BeProduct,BeProductName<br>) a<br><span class="hljs-keyword">join</span> ISBG_Project b <span class="hljs-keyword">on</span> b.BeProduct<span class="hljs-operator">=</span>a.BeProduct <span class="hljs-keyword">and</span> b.BeProductName<span class="hljs-operator">=</span>a.BeProductName<br></code></pre></td></tr></table></figure></li><li><p>第4步：按项目ID排序左侧数据<br><img src="/ETL_ProductDim%5C0204.png">  </p></li><li><p>第5步：按项目ID排序右侧收据<br><img src="/ETL_ProductDim%5C0205.png">  </p></li><li><p>第6步：多播右侧版本编号数据，以便二次使用<br><img src="/ETL_ProductDim%5C0206.png">  </p></li><li><p>第7步：合并连接数据获取当前版本编号<br><img src="/ETL_ProductDim%5C0207.png">  </p></li><li><p>第8步：计算上一版本编号<br><img src="/ETL_ProductDim%5C0208.png">  </p></li><li><p>第9步：按序号排序左侧数据<br><img src="/ETL_ProductDim%5C0209.png">  </p></li><li><p>第10步：按序号排序右侧侧数据<br><img src="/ETL_ProductDim%5C0210.png">  </p></li><li><p>第11步：合并连接数据获取上一版本编号<br><img src="/ETL_ProductDim%5C0211.png">  </p></li><li><p>第12步：更新记录<br><img src="/ETL_ProductDim%5C0212.png"><br><img src="/ETL_ProductDim%5C0213.png"></p></li></ul><h1 id="准备新需求的测试数据"><a href="#准备新需求的测试数据" class="headerlink" title="准备新需求的测试数据"></a>准备新需求的测试数据</h1><h2 id="写入三张表"><a href="#写入三张表" class="headerlink" title="写入三张表"></a>写入三张表</h2><ol><li>HR_IMPORT_Member(读写，员工基本数据，BSM和技术方向)，</li><li>HR_IMPORT_WorkStatus(读写,考勤、请假、调休数据表)；</li><li>HR_IMPORT_LOG(读写，操作日志)</li></ol><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><ol><li>交付人员基础数据表：人资程序将BSM数据同步到这个表，如果工号以存在就覆盖数据，否则新增数据。<br> <img src="/ETL_ProductDim%5C0301.png"> </li><li>交付人员在岗、请假、调休数据表：每月考勤、请假、调休数据锁定后，凌晨5点，人资程序将数据新增到这个表。所有字段都不允许为空，且是0~255之间（byte类型）。产能系统每月自动清空5个月前的数据。<br> <img src="/ETL_ProductDim%5C0302.png"> </li><li>处理日志表：每次从人资系统导入数据到产能数据库后都需要在此表中插入日志。<br>如果导入的是基本数据，ImportType写入1，DataStartDate和DataEndDate填写导入数据当日的日期，日期不要带有时间信息。<br>如果导入的是在岗状态数据，ImportType写入2，DataStartDate写入本批次数据最早的日期，DataEndDate写入本批次数据最后的日期。<br><img src="/ETL_ProductDim%5C0303.png"></li></ol><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>先从项目表中取4个未结项和4个已结项的项目，其中两个项目属于同一个产品的不同版本；</li><li>通过项目ID查找人力地图表，得到交付人员的员工号；</li><li>根据员工号，生成BSM和技术方向的模拟数据，写入<strong>交付人员基础数据表</strong>，同时写入<strong>处理日志表</strong></li><li>通过BI库的日期维度表得到工作日记录（暂时模拟某段时间的数据，如2019年1月~2月）</li><li>模拟考勤数据，工作日合计8小时，</li><li>将模拟数据写入<strong>考勤、请假、调休数据表</strong>，同时写入<strong>处理日志表</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ID <span class="hljs-keyword">from</span> (<br><span class="hljs-comment">-- 两个未结项的 ISBG 项目</span><br><span class="hljs-keyword">select</span> TOP <span class="hljs-number">2</span>  ID,ProjectName,ProjectMgr_Name,ProjectStartDateTime,DepartmentName, BeProduct,BeProductName,CooperationType,IsFinish<br>  <span class="hljs-keyword">from</span> ISBG_Project <br>  <span class="hljs-keyword">where</span> <br>  OBDORPPC<span class="hljs-operator">=</span><span class="hljs-string">&#x27;PPC&#x27;</span> <span class="hljs-keyword">AND</span> OBDORPPC<span class="hljs-operator">!=</span><span class="hljs-string">&#x27;IDLE&#x27;</span> <span class="hljs-keyword">and</span> CustomerNo <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;00106%&#x27;</span> <br><span class="hljs-keyword">and</span> ProjectStartDateTime<span class="hljs-operator">&gt;=</span><span class="hljs-string">&#x27;2019-3-1&#x27;</span><br><span class="hljs-keyword">AND</span> BeProduct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">AND</span> BeProductName <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">AND</span> BeProduct <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">AND</span> BeProductName <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">and</span> CooperationType <span class="hljs-operator">=</span><span class="hljs-string">&#x27;FP&#x27;</span><br><span class="hljs-comment">-- 两个已结项的 ISBG 项目</span><br><span class="hljs-keyword">union</span><br>  <span class="hljs-keyword">select</span> TOP <span class="hljs-number">2</span>  a.ID,a.ProjectName,a.ProjectMgr_Name,a.ProjectStartDateTime,a.BeProduct,a.DepartmentName,a.BeProductName,a.CooperationType,a.IsFinish<br>  <span class="hljs-keyword">from</span> ISBG_Project a<br>  <span class="hljs-keyword">join</span> <br>  ISBG_Project_Finish b<br>  <span class="hljs-keyword">on</span> a.ID <span class="hljs-operator">=</span> b.ProjectId<br>  <span class="hljs-keyword">where</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br>  <span class="hljs-keyword">AND</span> OBDORPPC<span class="hljs-operator">=</span><span class="hljs-string">&#x27;PPC&#x27;</span> <br> <span class="hljs-comment">-- AND OBDORPPC!=&#x27;IDLE&#x27; </span><br>  <span class="hljs-comment">--AND OBDORPPC!=&#x27;New&#x27; </span><br>  <span class="hljs-comment">-- AND OBDORPPC!=&#x27;OPD&#x27; </span><br>  <span class="hljs-comment">-- and CustomerNo not like &#x27;00106%&#x27; </span><br>  <span class="hljs-comment">-- and ProjectStartDateTime&gt;=&#x27;2018-12-1&#x27;</span><br>  <span class="hljs-keyword">and</span> ProjectNewNo<span class="hljs-operator">!=</span><span class="hljs-string">&#x27;IDLE20180308127&#x27;</span> <br><span class="hljs-keyword">AND</span> BeProduct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">AND</span> BeProductName <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">AND</span> BeProduct <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">AND</span> BeProductName <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">and</span> CooperationType <span class="hljs-operator">=</span><span class="hljs-string">&#x27;FP&#x27;</span><br><span class="hljs-keyword">union</span><br><span class="hljs-comment">-- 相同的两个项目，一个已结项，一个未结项</span><br><span class="hljs-keyword">select</span> TOP <span class="hljs-number">2</span>  ID,ProjectName,ProjectMgr_Name,ProjectStartDateTime,DepartmentName,BeProduct,BeProductName,CooperationType,IsFinish<br>  <span class="hljs-keyword">from</span> ISBG_Project <br>  <span class="hljs-keyword">where</span><br>  <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>  <br>  <span class="hljs-comment">-- AND ProjectStartDateTime&gt;=&#x27;2018-8-1&#x27;  </span><br>  <span class="hljs-comment">--order by CreateDate desc</span><br>  <span class="hljs-keyword">AND</span> BeProduct<span class="hljs-operator">=</span><span class="hljs-string">&#x27;HIC云&#x27;</span><br>  <span class="hljs-keyword">AND</span> BeProductName<span class="hljs-operator">=</span><span class="hljs-string">&#x27;eSee&#x27;</span><br><span class="hljs-keyword">and</span> CooperationType <span class="hljs-operator">=</span><span class="hljs-string">&#x27;FP&#x27;</span><br><span class="hljs-keyword">union</span><br><span class="hljs-comment">-- IDLE 项目</span><br><span class="hljs-keyword">select</span> TOP <span class="hljs-number">1</span> ID,ProjectName,ProjectMgr_Name,ProjectStartDateTime,DepartmentName,BeProduct,BeProductName,CooperationType,IsFinish<br><span class="hljs-keyword">from</span> ISBG_Project <br><span class="hljs-keyword">where</span> ProjectNewNo<span class="hljs-operator">=</span><span class="hljs-string">&#x27;IDLE20180308127&#x27;</span><br><span class="hljs-keyword">union</span><br><span class="hljs-comment">-- SSBG 项目</span><br><span class="hljs-keyword">select</span> TOP <span class="hljs-number">1</span> ID,ProjectName,ProjectMgr_Name,ProjectStartDateTime,DepartmentName,BeProduct,BeProductName,CooperationType,IsFinish<br><span class="hljs-keyword">from</span> ISBG_Project <br><span class="hljs-keyword">where</span> DepartmentName <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;SSBG-BU17%&#x27;</span> <br><span class="hljs-keyword">and</span> ProjectStartDateTime<span class="hljs-operator">&gt;=</span><span class="hljs-string">&#x27;2018-12-1&#x27;</span> <br><span class="hljs-comment">--AND BeProduct IS NOT NULL</span><br><span class="hljs-comment">--AND BeProductName IS NOT NULL</span><br><span class="hljs-comment">--AND BeProduct != &#x27;&#x27;</span><br><span class="hljs-comment">--AND BeProductName != &#x27;&#x27;</span><br>) a <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> a.ProjectStartDateTime <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">SELECT</span> COUNT<span class="hljs-comment">(*) FROM HR_IMPORT_WorkStatus a WHERE a.WorkingHours &lt;&gt; 8;</span><br><span class="hljs-comment">SELECT COUNT(*)</span> <span class="hljs-keyword">FROM</span> HR_IMPORT_WorkStatus a <span class="hljs-keyword">WHERE</span> a.CompassionateLeaveHours &gt; <span class="hljs-number">0</span><span class="hljs-punctuation">;</span><br><span class="hljs-keyword">SELECT</span> COUNT<span class="hljs-comment">(*) FROM HR_IMPORT_WorkStatus a WHERE a.SickLeaveHours &gt; 0;</span><br><span class="hljs-comment">SELECT COUNT(*)</span> <span class="hljs-keyword">FROM</span> HR_IMPORT_WorkStatus a <span class="hljs-keyword">WHERE</span> a.OtherPayLeavelHours &gt; <span class="hljs-number">0</span><span class="hljs-punctuation">;</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span>(a.WorkingHours), COUNT<span class="hljs-comment">(*) FROM HR_IMPORT_WorkStatus a WHERE a.WorkingHours &lt;&gt; 8 GROUP BY a.WorkingHours ORDER BY a.WorkingHours;</span><br><span class="hljs-comment">SELECT DISTINCT(a.CompassionateLeaveHours), COUNT(*)</span> <span class="hljs-keyword">FROM</span> HR_IMPORT_WorkStatus a <span class="hljs-keyword">WHERE</span> a.CompassionateLeaveHours &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> a.CompassionateLeaveHours<span class="hljs-punctuation">;</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span>(a.SickLeaveHours), COUNT<span class="hljs-comment">(*) FROM HR_IMPORT_WorkStatus a WHERE a.SickLeaveHours &gt; 0 GROUP BY a.SickLeaveHours;</span><br><span class="hljs-comment">SELECT DISTINCT(a.OtherPayLeavelHours), COUNT(*)</span> <span class="hljs-keyword">FROM</span> HR_IMPORT_WorkStatus a <span class="hljs-keyword">WHERE</span> a.OtherPayLeavelHours &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> a.OtherPayLeavelHours<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><h1 id="产能偏差"><a href="#产能偏差" class="headerlink" title="产能偏差"></a>产能偏差</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><h3 id="处理考勤数据"><a href="#处理考勤数据" class="headerlink" title="处理考勤数据"></a>处理考勤数据</h3><ul><li>以 Project_AEGIS 为项目源头，过滤 Project_Detail 中已处理（Processed&gt;0）的数据</li><li>右联查询考勤数据（TODO）</li><li></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>a.ProjectID,<br>a.WorkID,<br>c.BSM,<br>c.RecordDate,<br>c.BSD,<br>c.RealCapacity,<br>c.CapacityDeviation <br><span class="hljs-keyword">FROM</span><br>HumanMap a<br><span class="hljs-keyword">JOIN</span> DEV_BSD_IDLE c <span class="hljs-keyword">ON</span> c.WorkID<span class="hljs-operator">=</span> a.WorkID <br><span class="hljs-keyword">AND</span> (( c.RecordDate <span class="hljs-operator">&gt;=</span> a.InPro_Date <span class="hljs-keyword">AND</span> c.RecordDate <span class="hljs-operator">&lt;</span> a.OutPro_Date ) <br><span class="hljs-keyword">OR</span> ( c.RecordDate <span class="hljs-operator">=</span> a.InPro_Date <span class="hljs-keyword">AND</span> a.InPro_Date <span class="hljs-operator">=</span> a.OutPro_Date )) <br><span class="hljs-comment">-- AND c.RealCapacity IS NOT NULL AND c.CapacityDeviation IS NOT NULL</span><br><span class="hljs-keyword">WHERE</span><br>a.ProjectID <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span><br>ProjectID <br><span class="hljs-keyword">FROM</span><br>Project_AEGIS <br><span class="hljs-keyword">WHERE</span><br>ProjectID <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> ( <span class="hljs-keyword">SELECT</span> ProjectID <span class="hljs-keyword">FROM</span> Project_Detail <span class="hljs-keyword">WHERE</span> Processed <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-number">0</span> ))<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> DEV_BSD_IDLE a <span class="hljs-keyword">where</span> a.CapacityDeviation <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">and</span> a.CapacityDeviation &lt;&gt; <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span><br>ProjectID <br><span class="hljs-keyword">FROM</span><br>Project_AEGIS <br><span class="hljs-keyword">WHERE</span><br>ProjectID <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> ( <span class="hljs-keyword">SELECT</span> ProjectID <span class="hljs-keyword">FROM</span> Project_Detail <span class="hljs-keyword">WHERE</span> Processed &lt;&gt; <span class="hljs-number">0</span> )<br></code></pre></td></tr></table></figure><p>- </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs stylus">SELECT<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.ProjectID</span>,<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.WorkID</span>,<br><span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.BSM</span> AS BSMIncome,<br><span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.Quality</span>,<br><span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.OffsetCapacity</span>,<br>c<span class="hljs-selector-class">.BSM</span> AS BSMBase,<br>c<span class="hljs-selector-class">.RecordDate</span>,<br>c<span class="hljs-selector-class">.BSD</span> <br>FROM<br>HumanMapBak <span class="hljs-selector-tag">a</span><br>LEFT OUTER JOIN PDRC_BSM_Dispatch <span class="hljs-selector-tag">b</span> ON <span class="hljs-selector-tag">b</span>.ProjectID= <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.ProjectID</span> <br>AND <span class="hljs-selector-tag">b</span>.WorkID= <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.WorkID</span><br>JOIN DEV_BSD_IDLE c ON c.WorkID= <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.WorkID</span> <br>AND ((<br>c.RecordDate&gt;= <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.InPro_Date</span> <br>AND c.RecordDate&lt; <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.OutPro_Date</span> <br>) <br>OR ( c.RecordDate= <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.InPro_Date</span> AND <span class="hljs-selector-tag">a</span>.InPro_Date= <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.OutPro_Date</span> )) <br>-- LEFT JOIN <br>WHERE<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.ProjectID</span> <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;2e8c8397-4be8-4f34-9527-ce239d4f2068&#x27;</span>,<br><span class="hljs-string">&#x27;3a88df6c-83be-4903-a923-f2c80abcf3be&#x27;</span>,<br><span class="hljs-string">&#x27;a6318b58-8b07-455a-81ac-6f0adec657bf&#x27;</span>,<br><span class="hljs-string">&#x27;a989e256-971a-49e1-a5e0-620d488f5c3a&#x27;</span>)<br></code></pre></td></tr></table></figure><p>- </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">UPDATE [BJC_PDRCBI].[dbo].[DEV_BSD_IDLE]<br>   <span class="hljs-built_in">SET</span> [RealCapacity] = <span class="hljs-literal">NULL</span><br>      ,[CapacityDeviation] = <span class="hljs-literal">NULL</span><br> WHERE <span class="hljs-attribute">1</span>=1<br>GO<br></code></pre></td></tr></table></figure><ul><li>查询 IDLE 表<figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> DEV_BSD_IDLE a <span class="hljs-keyword">where</span> a.WorkID=<span class="hljs-string">&#x27;B-41018&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="日期与弹窗-MessageBox"><a href="#日期与弹窗-MessageBox" class="headerlink" title="日期与弹窗 MessageBox"></a>日期与弹窗 MessageBox</h2><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">DateTime</span> <span class="hljs-variable">dt</span> <span class="hljs-operator">=</span> <span class="hljs-variable">DateTime</span><span class="hljs-operator">.</span><span class="hljs-built_in">Now</span><span class="hljs-operator">;</span><br><span class="hljs-operator">//</span><span class="hljs-variable">DateTime</span> <span class="hljs-variable">dt</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-variable">DateTime</span><span class="hljs-punctuation">(</span><span class="hljs-number">2019</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">15</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">string</span> <span class="hljs-variable">dtString</span> <span class="hljs-operator">=</span> <span class="hljs-variable">dt</span><span class="hljs-operator">.</span><span class="hljs-built_in">ToString</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-operator">//</span><span class="hljs-variable">MessageBox</span><span class="hljs-operator">.</span><span class="hljs-built_in">Show</span><span class="hljs-punctuation">(</span><span class="hljs-variable">dtString</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">DateTime</span> <span class="hljs-variable">lastFinancialDate</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-variable">DateTime</span><span class="hljs-punctuation">(</span><span class="hljs-variable">dt</span><span class="hljs-operator">.</span><span class="hljs-variable">Year</span><span class="hljs-operator">,</span> <span class="hljs-variable">dt</span><span class="hljs-operator">.</span><span class="hljs-variable">Month</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">lastFinancialDate</span> <span class="hljs-operator">=</span> <span class="hljs-variable">lastFinancialDate</span><span class="hljs-operator">.</span><span class="hljs-variable">AddMonths</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">MessageBox</span><span class="hljs-operator">.</span><span class="hljs-built_in">Show</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;FinancialDay: &quot;</span> <span class="hljs-operator">+</span> <span class="hljs-variable">Dts</span><span class="hljs-operator">.</span><span class="hljs-built_in">Variables</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;FinancialDay&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-operator">.</span><span class="hljs-variable">Value</span><span class="hljs-operator">.</span><span class="hljs-built_in">ToString</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">Dts</span><span class="hljs-operator">.</span><span class="hljs-built_in">Variables</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;LastFinancialDate&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-operator">.</span><span class="hljs-variable">Value</span> <span class="hljs-operator">=</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">dt</span><span class="hljs-operator">.</span><span class="hljs-variable">Day</span> <span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">int</span><span class="hljs-punctuation">)</span><span class="hljs-variable">Dts</span><span class="hljs-operator">.</span><span class="hljs-built_in">Variables</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;FinancialDay&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-operator">.</span><span class="hljs-variable">Value</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">?</span> <span class="hljs-variable">lastFinancialDate</span> <span class="hljs-operator">:</span> <span class="hljs-variable">lastFinancialDate</span><span class="hljs-operator">.</span><span class="hljs-variable">AddMonths</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">string</span> <span class="hljs-variable">lastFinancialDateString</span> <span class="hljs-operator">=</span> <span class="hljs-variable">Dts</span><span class="hljs-operator">.</span><span class="hljs-built_in">Variables</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;LastFinancialDate&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-operator">.</span><span class="hljs-variable">Value</span><span class="hljs-operator">.</span><span class="hljs-built_in">ToString</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-operator">//</span><span class="hljs-variable">MessageBox</span><span class="hljs-operator">.</span><span class="hljs-built_in">Show</span><span class="hljs-punctuation">(</span><span class="hljs-variable">lastFinancialDateString</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure><h2 id="奖金计算"><a href="#奖金计算" class="headerlink" title="奖金计算"></a>奖金计算</h2><ol><li><p>查询结果得到结果集：</p></li><li><p>通过派生列整理数据，得到实际的产能（BSM*质量）<br><img src="/ETL_ProductDim%5C0401.png">  </p></li><li></li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://www.cnblogs.com/ljhdo/p/5174681.html">SSIS 数据类型和类型转换</a></li></ol><p>SSIS 数据类型和类型转换<br>在进行ETL开发时，数据类型（Data Type）是最基础的，但也容易被忽略，楼主使用的SQL Server 版本是2012，用此博文记录，常用的SSIS数据类型和TSQL数据类型的映射。SSIS的数据类型，是指数据流组件使用的数据类型和变量的数据类型（Data Flow 和 Variable）。</p><p>当数据进入Package的data flow task中时，SSIS 通过数据源组件从数据源抽取（extract）数据，获取元数据类型，并转换成SSIS支持的数据类型，SSIS的数据类型主要分为三类：字符（string），数值（numeric）和日期&#x2F;时间（date&#x2F;time），如果源数据类似不能转换成相应的SSIS 数据类型，SSIS Engine就会报错。SSIS的数据类型，以“DT_”开头，是Data Type的简写。</p><p>一，SSIS 数据流的数据类型和TSQL数据类型的映射</p><ol><li>字符类型</li></ol><p>字符类型用于存储字符串，在SQL Server中，使用单引号表示一个字符，但是在SSIS中，使用双引号表示一个字符串。</p><p>SSIS的字符类型和TSQL的数据类型的对应关系：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">DT_STR：对应TSQL的 <span class="hljs-type">varchar</span>, <span class="hljs-type">char</span>  <br>DT_WSTR：对应TSQL的 <span class="hljs-type">nchar</span>, nvarchar, <span class="hljs-type">xml</span><br></code></pre></td></tr></table></figure><ol start="2"><li>数值类型</li></ol><p>数值类型分为整数和小数，SSIS的整数类型和TSQL数据类型的对应关系：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">DT_BOOL</span>：bit  <br><span class="hljs-attribute">DT_UI1</span>：tinyint，占用一个字节，非负整数，数值范围是：<span class="hljs-number">0</span>-<span class="hljs-number">255</span>  <br><span class="hljs-attribute">DT_I2</span>：smallint，占用<span class="hljs-number">2</span>个字节，有符号整数  <br><span class="hljs-attribute">DT_I4</span>：int，占用<span class="hljs-number">4</span>个字节，有符号整数  <br><span class="hljs-attribute">DT_I8</span>：bigint，占用<span class="hljs-number">8</span>个字节，有符号整数  <br><span class="hljs-attribute">DT_BYTES</span>：binary, varbinary, RowVersion<br></code></pre></td></tr></table></figure><p>TSQL的小数数值类型分为两类：精确小数（decimal）和近似小数（float），小数也叫实数（real），SSIS的小数类型和TSQL数据类型的对应关系：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">DT_NUMERIC：精确小数，decimal  <br>DT_R4：近似小数，<span class="hljs-attribute">float</span>(<span class="hljs-number">24</span>)  <br>DT_R8：近似小数，<span class="hljs-attribute">float</span>(<span class="hljs-number">53</span>)  <br></code></pre></td></tr></table></figure><p>3，日期时间类型</p><p>SSIS的日期时间类型和TSQL数据类型的对应关系：</p><p>DT_DBDATE：date<br>DT_DBTIME2：time(p)<br>DT_DBTIMESTAMP：datetime<br>DT_DBTIMESTAMP2：datetime2<br>SSIS 内置函数：GETDATE() 和 GETUTCDATE() 返回值的数据类型是DT_DBTIMESTAMP，对应TSQL的DateTime，因此，只保留3位毫秒。在Expression Builder中，将时间类型转换成字符串类型，显示的毫秒数有效数值只有3位，末尾补6个0，共9位：</p><p>(DT_WSTR,30) GETDATE()，Evaluated Value是：2016-10-13 17:04:01.765000000<br>(DT_DBTIMESTAMP2,7) GETDATE()，Evaluated Value是：10&#x2F;13&#x2F;2016 5:01:54 PM<br>二，SSIS 变量(Variable)的数据类型和TSQL数据类型的映射</p><p>SSIS 变量的数据类型，不同于SSIS的数据类型，但都和SSIS的数据类型相兼容，在进行表达式求值时，SSIS自动将变量的数据类型隐式转换成SSIS的数据类型，然后进行求值。</p><p>Variables have a Variant data type and the expression evaluator converts the data type of a variable from a Variant subtype to an Integration Services data type before it evaluates the expression. </p><p>1，字符数据类型</p><p>字符变量和TSQL数据类型的映射关系：</p><p>String：char,nchar,varchar(n),nvarchar(n)<br>object：varchar(max),nvarchar(max)<br>2，数值类型</p><p>数值类型的变量和TSQL数据类型的映射关系：</p><p>Boolean：bit<br>Int64：bigint<br>Int32：int<br>Int16：smallint<br>Byte：tinyint<br>object：binary, varbinary(n), varbinary(max)<br>精确小数：Decimal 在SQL Server 2012以后，对应TSQL的decimal<br>近似小数：Single 对应TSQL的float(24),  Double 对应TSQL的float(53)<br>3，日期&#x2F;时间类型</p><p>日期&#x2F;时间类型的变量和TSQL数据类型的映射关系：</p><p>DateTime：对应TSQL的datetime<br>Object：对应TSQL的time，date，datetime2<br>三，强制类型转换</p><p>SSIS在进行表达式求值时，自动将一个数据类型隐式转换成相兼容的另外一个数据类型，如果类型不兼容，必须强制类型转换，否则，SSIS报错。对数据进行强制类型转换的格式是：(type) expression，在进行显式类型转换时，尽量使用窄的数据类型，这样能够提高数据传输的速度；但是，数据转换需要付出一定的代价，因此，必须权衡类型转换和数据传输对性能的影响。</p><p>An implicit conversion of a data type occurs when the expression evaluator automatically converts the data from one data type to another. If the data in a column does not require the full width allocated by the source data type, you might want to change the data type of the column. Making each data row as narrow as possible helps optimize performance when transferring data because the narrower each row is, the faster the data is moved from source to destination.</p><p>1，将字符串转换成TSQL的日期&#x2F;时间类型</p><p>在SSIS中，字符串常量使用双引号“”，[] 表示可选：</p><p>转换成date：(DT_DBDATE)”yyyy-mm-dd”<br>转换成time(n)：(DT_DBTIME2,n)”hh:mm:ss[.fffffff]”<br>转换成datetime：(DT_DBTIMESTAMP)”yyyy-mm-dd hh:mm:ss[.fff]”<br>转换成datetime2(n)：(DT_DBTIMESTAMP2,n)”yyyy-mm-dd hh:mm:ss[.fffffff]”<br>2，转换成字符串</p><p>字符串分为双字节字符和单字节字符，对于单字节字符，SSIS使用 DT_STR 表示，在强制类型转换时，必须制定code page和字符长度：</p><p>将整数5转换为单字节字符：(DT_STR,30,1252)5<br>将整数5转换为双字节字符：(DT_WSTR,30)5<br>将 DT_DBTIMESTAMP 类型转换成字符串：(DT_WSTR,30)GETDATE()，返回的数据格式是: 2016-10-13 14:55:31.248000000,GETDATE()返回的数据类型是DT_DBTIMESTAMP；<br>3，数值类型转换</p><p>将字符串转换成bit：(DT_BOOL)”True”<br>将小数转换成int：(DT_I4) 3.57<br>将整数转化成精确小数：(DT_NUMERIC,7,3)4000<br>四，数据类型转换的性能</p><p>将数据从一个SQL Server 加载到另一个SQL Server之前，如果需要转换数据类型，建议使用TSQL Conversion，这样，能简化Package的设计，提高转换速度。</p><p>五，参数的数据类型</p><p>在Execute SQL Task引用变量时，必须在Parameter Mapping Tab中设置参数的Data Type，请参考《Execute SQL Task 参数和变量的映射》</p><p>参考文档：</p><p>Integration Services (SSIS) Expressions</p><p>Cast (SSIS Expression)</p><p>Integration Services Data Types</p><p>SQL Server Integration Services, Data Type Mapping</p><p>Performance Comparison between Data Type Conversion Techniques in SSIS 2008</p>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ETL</tag>
      
      <tag>MessageBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第7周</title>
    <link href="/2019/02/15/Year2019Week07/"/>
    <url>/2019/02/15/Year2019Week07/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第7周（2019-02-11-2019-02-17）"><a href="#2019年第7周（2019-02-11-2019-02-17）" class="headerlink" title="2019年第7周（2019&#x2F;02&#x2F;11~2019&#x2F;02&#x2F;17）"></a>2019年第7周（2019&#x2F;02&#x2F;11~2019&#x2F;02&#x2F;17）</h2><ol><li><a href="https://blog.csdn.net/zard_0_/article/details/77571536">让Mac文本编辑器成为HTML编辑器</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Selenium 自动化测试</title>
    <link href="/2019/01/29/Selenium/"/>
    <url>/2019/01/29/Selenium/</url>
    
    <content type="html"><![CDATA[<h3 id="知识点滴"><a href="#知识点滴" class="headerlink" title="知识点滴"></a>知识点滴</h3><ol><li><a href="https://blog.csdn.net/amoscn/article/details/79605742">Java selenium - 父子、兄弟、相邻节点定位方式详解</a>  </li><li><a href="https://blog.csdn.net/cyjs1988/article/details/75006167">Selenium在定位的class含有空格的复合类的解决办法</a>  </li><li><a href="https://www.cnblogs.com/yyym/p/8406513.html">Java + Selenium + WebDriver八大元素定位方式</a></li><li><a href="https://blog.csdn.net/u011541946/article/details/73695239">Java+Selenium3方法篇23-iframe切换的问题</a>  </li><li><a href="https://www.cnblogs.com/andrew209/p/9017087.html">Java+selenium之WebDriver常见特殊情况如iframe&#x2F;弹窗处理(四)</a></li></ol><h3 id="Java-Selenium3POM自动化测试框架设计系列"><a href="#Java-Selenium3POM自动化测试框架设计系列" class="headerlink" title="Java+Selenium3POM自动化测试框架设计系列"></a>Java+Selenium3POM自动化测试框架设计系列</h3><ol><li><a href="https://blog.csdn.net/u011541946/article/category/6958269/4">Java+Selenium3POM自动化测试框架设计系列</a>  </li><li><a href="https://blog.csdn.net/u011541946/article/category/6854930">Java+Selenium3.0关键字驱动框架设计教程</a></li><li><a href="https://www.cnblogs.com/andrew209/tag/selenium/">捏不死的小蚂蚁的Selenium文章</a></li></ol><h3 id="Selenium-教程"><a href="#Selenium-教程" class="headerlink" title="Selenium 教程"></a>Selenium 教程</h3><ol><li><a href="http://www.cnblogs.com/TankXiao/p/5252754.html">(一) 介绍</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/4110494.html">(二)环境搭建方法一</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/4142070.html">(三)环境搭建 基于Maven</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5211759.html">(四)使用浏览器调试工具</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5222238.html">(五)元素定位大全</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5253072.html">(六)xpath 定位</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5260683.html">(七)CSS 定位</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/4140543.html">(八) IDE 用法</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5258104.html">(九)常见web UI 元素操作 及API使用</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5260557.html">(十)操作浏览器</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5260445.html">(十一)操作弹出对话框</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5260707.html">(十二)操作弹出窗口</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5246557.html">(十三)智能等待页面加载完成</a></li><li><a href="http://www.cnblogs.com/TankXiao/p/5237189.html">(十四)处理Iframe 中的元素</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Selenium</tag>
      
      <tag>自动化测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第5周</title>
    <link href="/2019/01/28/Year2019Week05/"/>
    <url>/2019/01/28/Year2019Week05/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第5周（2019-01-28-2019-02-03）"><a href="#2019年第5周（2019-01-28-2019-02-03）" class="headerlink" title="2019年第5周（2019&#x2F;01&#x2F;28~2019&#x2F;02&#x2F;03）"></a>2019年第5周（2019&#x2F;01&#x2F;28~2019&#x2F;02&#x2F;03）</h2><ol><li><a href="http://www.runoob.com/w3cnote/git-guide.html">Github 简明教程</a></li><li><a href="https://jingyan.baidu.com/article/c85b7a6403d7d1003bac95f8.html">如何快速辨别Excel中两列数据是否相同{&#x3D;IF(C2&#x3D;B2,”相同”,”不同”)}</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>Excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信公众号与小程序</title>
    <link href="/2019/01/28/WeChat/"/>
    <url>/2019/01/28/WeChat/</url>
    
    <content type="html"><![CDATA[<h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><ol><li><a href="http://www.shenli.cc/625.html">微擎小程序模块安装教程</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>微信</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微擎</tag>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开放心态，做钱塘弄潮儿，杀出一条血路——任正非在杭州研究所业务汇报会上的讲话</title>
    <link href="/2019/01/22/HW_20190118/"/>
    <url>/2019/01/22/HW_20190118/</url>
    
    <content type="html"><![CDATA[<p>开放心态，做钱塘弄潮儿，杀出一条血路——任正非在杭州研究所业务汇报会上的讲话</p><ul><li>一、软件上我们最缺乏的是对宏观架构有清醒认识的人才，要站到战略的高度去看未来的软件人才。</li><li>二、谁也没有限制我们的科研，要开放心态，连接世界上一切优秀的资源。</li><li>三、向谷歌军团学习，扑上去，杀出一条血路。<br>&nbsp;<br><escape><span id="more"></span></escape></li></ul><h1 id="开放心态，做钱塘弄潮儿，杀出一条血路——任正非在杭州研究所业务汇报会上的讲话"><a href="#开放心态，做钱塘弄潮儿，杀出一条血路——任正非在杭州研究所业务汇报会上的讲话" class="headerlink" title="开放心态，做钱塘弄潮儿，杀出一条血路——任正非在杭州研究所业务汇报会上的讲话"></a>开放心态，做钱塘弄潮儿，杀出一条血路——任正非在杭州研究所业务汇报会上的讲话</h1><p>2019年1月9日</p><p><img src="/HW_20190118%5C01_Title.png"></p><h2 id="一、软件上我们最缺乏的是对宏观架构有清醒认识的人才，要站到战略的高度去看未来的软件人才。"><a href="#一、软件上我们最缺乏的是对宏观架构有清醒认识的人才，要站到战略的高度去看未来的软件人才。" class="headerlink" title="一、软件上我们最缺乏的是对宏观架构有清醒认识的人才，要站到战略的高度去看未来的软件人才。"></a>一、软件上我们最缺乏的是对宏观架构有清醒认识的人才，要站到战略的高度去看未来的软件人才。</h2><p>在基础软件这个问题上，我们要下定决心去突破。我们做黑土地的能力是小公司做不到的，只要有了土地就能长庄稼，庄稼长多了就是我们的云。找到战略高手是我们干部部门、业务部门的重要任务。</p><p>在软件工程能力提升上，我们最缺乏的是对宏观架构有清醒认识的人才。建立公司是一个架构；建立公司的利益体系也是一个架构；任何产品都是架构第一；软件重构一定要从宏观架构入手。公司未来关于软件的管理，请国际上在这方面有深厚积累的顾问公司来规范我们五万多软件专业人员编制软件的行为，通过以考促训，选拔人才。要站到战略的高度去看未来的软件人才选拔、培养和造就。今天我们在硬件中的嵌入式软件是很成功的，在此基础重构云、“黑土地”的架构，一定会争取到更大的成功。对于全世界高效的竞赛能手，例如这些年世界竞赛都在俄罗斯、东欧，我们用起薪是同级的五倍以上的年薪，把他们招来。让这些“沙丁鱼”，激活我们的组织与平台。</p><p>构筑软件安全能力，红蓝军要同时组建，蓝军不一定是有学历的。我们帮助他们在工作中完成学历教育。</p><h2 id="二、谁也没有限制我们的科研，要开放心态，连接世界上一切优秀的资源。"><a href="#二、谁也没有限制我们的科研，要开放心态，连接世界上一切优秀的资源。" class="headerlink" title="二、谁也没有限制我们的科研，要开放心态，连接世界上一切优秀的资源。"></a>二、谁也没有限制我们的科研，要开放心态，连接世界上一切优秀的资源。</h2><p>没有谁在限制我们的科研，我们也不要自己约束了自己，要敢于到贴近人才资源的地方进行研究活动，在每个研究所形成自己的技术要素，对行业发展形成牵引。</p><p>俄罗斯的数学、物理、软件都很厉害，我们也要加大对俄罗斯人才的获取，要大规模利用俄罗斯的博士来弥补我们理论上的不足；在俄罗斯的布局未来会迅速扩大，分阶段，先有一个点，就有了一个碉堡，有了碉堡，就建碉堡群，有了碉堡群，就建基地。</p><p>你们要尊重教授，尊重知识，尊重文化,请老师来讲课，老师来讲一堂课就给我们开了天光，我们给老师咨询费，就和我们建立了感情，大家就拧成了一个团队。讲课的费用从徐文伟战略研究院出，一千美金一小时，包括座谈，喝咖啡聊天都算教时。讲完了以后大家在一起沟通，一杯咖啡吸收宇宙能量。希望你们在座记住，就是要广交朋友，不能闭门造车。</p><p>要多和终端、外研所交流。日本研究所在终端技术研究上是非常厉害的，用好那就是天翻地覆的变化。在四月樱花开放的时候，欧洲研究院和日本研究所会在樱花树下开一个科学研讨会，你们也要参加，通过借鉴你们就能一下飞跃。希望你们能和日研所成为好朋友，桂花开放的时候再把他们请回来。</p><h2 id="三、向谷歌军团学习，扑上去，杀出一条血路。"><a href="#三、向谷歌军团学习，扑上去，杀出一条血路。" class="headerlink" title="三、向谷歌军团学习，扑上去，杀出一条血路。"></a>三、向谷歌军团学习，扑上去，杀出一条血路。</h2><p>谷歌军团的编制不大，战斗力极强，要好好向谷歌军团学习。</p><p>终端发展迅速就是采用了正确的方法，他们搞四组一队，实行三三制，实际上和谷歌军团是一致的。你们应该看阿根廷改革的全套文件，要一字一字读。</p><p>算法团队直接杀入到项目中去，一线既有算法又有数据，就容易突破。你们组织优秀的博士形成一个谷歌军团，扑上去，就可能把口子撕开。抽象的平台一定要有实践东西检验，多几个具体化的平台，综合起来才会有抽象平台。白博士率你的“军团”杀入反诈骗软件的研究。</p><p>智能计算业务未来可通过自研的芯片产品赚钱，从算、管、AI、存、传的芯片布局竞争力构建思路。边缘计算是公司的大战略，OS的研发中要考虑边缘计算，从用户场景分析边缘的热点问题，热点问题要在边缘侧闭环掉，减轻中央计算的压力。摄像机也要坚定不移的做边缘计算，做智能摄像机，聚焦在智能AI，聚焦在超高清，坚定不移的和终端做技术合作，勇猛冲锋，杀出一条血路来。</p><p>别关在深宫大院里面，到战场上去，立功去，说不定你就从少尉升少将了。希望你们的“谷歌军团”能率先杀出一条血路来，成功了我会来看你们。</p><p>报送：董事会成员、监事会成员</p><p>主送：全体员工，全公开</p><p>二〇一九年一月十八日</p>]]></content>
    
    
    <categories>
      
      <category>管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>华为</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第4周</title>
    <link href="/2019/01/21/Year2019Week04/"/>
    <url>/2019/01/21/Year2019Week04/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第4周（2019-01-21-2019-01-27）"><a href="#2019年第4周（2019-01-21-2019-01-27）" class="headerlink" title="2019年第4周（2019&#x2F;01&#x2F;21~2019&#x2F;01&#x2F;27）"></a>2019年第4周（2019&#x2F;01&#x2F;21~2019&#x2F;01&#x2F;27）</h2><ol><li><a href="https://blog.csdn.net/liubo2012/article/details/46337063">Slf4j MDC 使用和 基于 Logback 的实现分析</a></li><li><a href="https://jingyan.baidu.com/article/a17d52851127fc8098c8f2e0.html">Notepad++ 删除空行的技巧</a></li><li><a href="https://www.cnbeta.com/articles/soft/811595.htm">Wine 4.0 正式版发布 游戏玩家来试试怎么样？</a></li><li><a href="https://blog.csdn.net/weixin_43760287/article/details/84325809">ios个人小游戏开发者如何做到年收益过百万？</a></li><li><a href="https://sspai.com/post/52125">2018 年少数派读者最喜欢的 15 款应用 &amp; 游戏</a></li><li><a href="https://github.com/1c7/chinese-independent-developer">中国独立开发者项目列表</a></li><li><a href="https://blog.csdn.net/iOSzhuoyuan/article/details/80720991">7年开发笔记（总结）：iOS个人开发者的困境与突破</a></li><li><a href="https://www.qimai.cn/">七麦数据-各种APP 排行榜</a></li><li><a href="https://sspai.com/post/52270">2018我的人生游戏指南-欲望与「成救」模式</a></li><li><a href="https://sspai.com/post/47694">用玩游戏的方式学习 Git</a></li><li><a href="https://sspai.com/post/37613">这是你们想要的编程入门与学习方法</a></li><li><a href="https://sspai.com/post/45679">三天时间，我写出了自己的 Todo 应用</a></li><li><a href="https://sspai.com/post/45871">我把一款时间管理软件，升级了60次</a></li><li><a href="https://sspai.com/post/37201">天气应用 Flat Weather 的设计历程 | Matrix 精选</a></li><li><a href="https://sspai.com/post/37402">2016, 一个独立开发者的心路历程 | 2016 与我的数字生活</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>slf4j</tag>
      
      <tag>logBack</tag>
      
      <tag>MDC</tag>
      
      <tag>Notepad++</tag>
      
      <tag>Wine</tag>
      
      <tag>独立开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装PE到多分区U盘图文教程</title>
    <link href="/2019/01/21/WinPE/"/>
    <url>/2019/01/21/WinPE/</url>
    
    <content type="html"><![CDATA[<h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><ul><li><a href="https://coderdream.github.io/2019/01/21/WinPE/#%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF%E4%B8%8E%E7%9B%AE%E6%A0%87">基本思路与目标</a></li><li><a href="https://coderdream.github.io/2019/01/21/WinPE/#%E6%89%80%E9%9C%80%E8%BD%AF%E7%A1%AC%E4%BB%B6">所需软硬件</a></li><li><a href="https://coderdream.github.io/2019/01/21/WinPE/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">准备工作</a></li><li><a href="https://coderdream.github.io/2019/01/21/WinPE/#%E5%AE%9E%E8%B7%B5%E6%93%8D%E4%BD%9C">实践操作</a><ul><li><a href="https://coderdream.github.io/2019/01/21/WinPE/#%E6%93%8D%E4%BD%9C%E5%89%8D%E5%BF%85%E8%AF%BB">操作前必读</a></li><li><a href="https://coderdream.github.io/2019/01/21/WinPE/#%E4%B8%8B%E8%BE%B9%E4%BB%A58GU%E7%9B%98%E5%88%86%E4%B8%BA%E4%B8%A4%E4%B8%AA%E5%88%86%E5%8C%BA%E4%B8%BA%E4%BE%8B">下边以8GU盘分为两个分区为例</a></li></ul></li><li><a href="https://coderdream.github.io/2019/01/21/WinPE/#%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E">补充说明</a></li><li><a href="https://coderdream.github.io/2019/01/21/WinPE/#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">参考文档</a><br><escape><span id="more"></span></escape></li></ul><p>&nbsp;</p><h2 id="基本思路与目标"><a href="#基本思路与目标" class="headerlink" title="基本思路与目标"></a>基本思路与目标</h2><ol><li>实际上这是网上已有的内容，这里做个知识普及，不是新东西。也有很多U盘PE制作工具，请绕过，条条大路通罗马，这里只说这一条道。</li><li>U盘做成两个或更多的分区（建议分两个分区），其中一个分区专门用来放启动PE所需的文件，其他分区可以格成NTFS格式或exFAT格式（建议后者），方便存放大容量（超个4G）的单个文件，如，目前WIN10官方的ISO文件有5G之多。</li></ol><p>&nbsp;</p><h2 id="所需软硬件"><a href="#所需软硬件" class="headerlink" title="所需软硬件"></a>所需软硬件</h2><ol><li>软件工具：UltraISO、DiskGenius</li><li>PE的ISO文件：WinPE_X64_2in1_20170812. ISO，以及相应的PMF文件，PMF文件你也可以自己制作，教程中有说到。</li><li>U盘：8G或更大，小U盘分区意义不大。呵呵，实际上8G都偏小，我是用来演示的，将就说一下8G可以。<br>上述软件工具与PEISO文件下载地址：<a href="http://pan/">http://pan</a>. baidu. com&#x2F;s&#x2F;1i4BH4Cd密码：9t0z</li></ol><p>&nbsp;</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>切记，备份你的U盘数据到电脑硬盘上，因为制作过程中将格式化U盘。<br>&nbsp;</p><h2 id="实践操作"><a href="#实践操作" class="headerlink" title="实践操作"></a>实践操作</h2><h3 id="操作前必读"><a href="#操作前必读" class="headerlink" title="操作前必读"></a>操作前必读</h3><ul><li>A. 如果你的U盘已经有多个分区（事先要下载相应的PMF文件），请确认最后一个分区的容量是否合适，要大于PMF文件容量，然后从第14个步骤开始。</li><li>B. 如果你事先已有了PMF文件，但U盘没有多分区，从第9个步骤开始操作。</li><li>C. 其他情况从第1个步骤开始。</li></ul><h3 id="下边以8GU盘分为两个分区为例"><a href="#下边以8GU盘分为两个分区为例" class="headerlink" title="下边以8GU盘分为两个分区为例"></a>下边以8GU盘分为两个分区为例</h3><ol><li><p>写入硬盘映像。重复强调一下，要事先备份U盘数据。<br>  安装UltraISO，也可以是免安装的单文件版本。U盘接入电脑。使用UltraISO打开WinPE_X64_2in1_20170812. ISO，如下图（图1）操作。</p>  <img src="/2019/01/21/WinPE/image001.png" class=""></li><li><p>选择写入方式（图2）。有些老式机子不支持HDD+V2模式，所以一般HDD+模式即可。选择好之后，点“写入”。</p>  <img src="/2019/01/21/WinPE/image002.png" class=""></li><li><p>以下是正式写入U盘的进程图（图3）：</p>  <img src="/2019/01/21/WinPE/image003.png" class=""></li><li><p>刻录成功，返回（图4），关闭UltraISO。此时U盘是可启动的PE盘，但是还是单一分区。</p>  <img src="/2019/01/21/WinPE/image004.png" class=""></li><li><p>运行DiskGenius。右键点击DiskGenius界面中的U盘（图5），将U盘分区备份成镜像文件（pmf为后缀名的文件）。</p>  <img src="/2019/01/21/WinPE/image005.png" class=""></li><li><p>选择备份到什么路径（图6），并指定备份的文件名，如：WinPE_X64_2in1_20170812. pmf</p>  <img src="/2019/01/21/WinPE/image006.png" class=""></li><li><p>下图（图7）为备份过程。</p>  <img src="/2019/01/21/WinPE/image007.png" class=""></li><li><p>成功备份的结果（图8）  </p>  <img src="/2019/01/21/WinPE/image008.png" class=""></li><li><p>删除U盘分区（图9）。这个U盘还是一个分区，不是初衷。</p>  <img src="/2019/01/21/WinPE/image009.png" class=""><p>  U盘PE数据的已经备份了，就是WinPE_X64_2in1_20170812. pmf，不怕删除U盘分区。这为下面U盘分成两个分区做好准备工作。</p></li><li><p>U盘分区（图10）。用来做PE启动的分区要放在最后一个分区，这里以两个分区为例，第二分区是最后一个分区，是用来PE启动的。第一分区是普通分区，可以大一些，比如，8G的U盘，第一个分区给出6G容量（图10），余下的1. 2G作为PE启动的分区。如果你有32G的U盘，你可以将PE启动的分区做成4G也可以，主要还是看你的需要。<br>第一个分区用来存放各类文件的，NTFS格式或exFAT格式较好（建议后者），看示意图。</p><img src="/2019/01/21/WinPE/image010.png" class=""></li><li><p>确定PE启动分区（图11）。作为PE启动分区（以1. 2G为例），必须是主磁盘分区，FAT32格式。</p><img src="/2019/01/21/WinPE/image011.png" class=""></li><li><p>激活PE启动分区（图12）。</p><img src="/2019/01/21/WinPE/image012.png" class=""></li><li><p>保存分区表与格式化分区（图13）。点击“保存更改”即可。</p><img src="/2019/01/21/WinPE/image013.png" class=""></li><li><p>将镜像文件还原到PE启动分区（图14）。右键点1. 2G的那个分区，点菜单“从镜像文件还原分区”。</p><img src="/2019/01/21/WinPE/image014.png" class=""></li><li><p>进行分区还原。选择事先备份的pmf文件，点“开始”进行还原。此时只是还原1. 2G的那个分区，6G的分区不去动它。</p><img src="/2019/01/21/WinPE/image015.png" class=""></li><li><p>还原成功的示意图（图16）。图中G分区是U盘的第一个分区，NTFS格式，H分区是PE启动分区，FAT32格式。</p><img src="/2019/01/21/WinPE/image016.png" class=""></li><li><p>在Windows的文件资源管理器中看到的U盘分区的示意图（图17）。</p>  <img src="/2019/01/21/WinPE/image017.png" class=""></li></ol><p>&nbsp;</p><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><ol><li>启动分区PE如何更新？在<strong>版本号15063的WIN10</strong>或PE中是可以看到U盘的多个分区，包括启动分区FAT32。一般来说，就是同名替换WIM文件，外置程序按同样路径替换。结构复杂的PE，制作者有提供PMF文件（单一分区方式）最方便，如果没有，自己找个旧U盘制作个PMF文件（单一分区方式），将这个PMF文件恢复到大U盘的FAT32分区。</li><li>启动分区专门用来置放系统安装源文件也是同样的道理。这种系统安装方式类似以前的光盘启动安装。</li></ol><p>&nbsp;</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li>[制作自己的PMF文件](<a href="http://bbs/">http://bbs</a>. pcbeta. com&#x2F;viewthread-1753994-1-1. html)</li><li>[原文](<a href="http://bbs/">http://bbs</a>. pcbeta. com&#x2F;viewthread-1753915-1-1. html)</li></ol>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WinPE</tag>
      
      <tag>UltraISO</tag>
      
      <tag>DiskGenius</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NodeJS 相关</title>
    <link href="/2019/01/19/NodeJS/"/>
    <url>/2019/01/19/NodeJS/</url>
    
    <content type="html"><![CDATA[<h1 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h1><ol><li><a href="https://www.cnblogs.com/sghy/p/6840925.html">设置npm的registry</a></li><li><a href="http://www.runoob.com/w3cnote/git-guide.html">Github 简明教程</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html">测试框架 Mocha 实例教程-阮一峰</a></li><li>[前端单元测试 实现教程 mocha + mochawesome + istanbul + sinon + chai](前端单元测试 实现教程 mocha + mochawesome + istanbul + sinon + chai)</li><li><a href="https://blog.csdn.net/prufeng/article/details/83043246">使用Mocha和Istanbul实现Node.js单元测试和覆盖率</a></li><li><a href="https://istanbul.js.org/docs/tutorials/mocha/">Using Istanbul With Mocha</a></li><li><a href="https://www.npmjs.com/package/mkdirp">mkdirp - Create a new directory and any necessary subdirectories</a></li><li><a href="https://www.jianshu.com/p/ad59cfd158d4">chai学习笔记</a></li><li><a href="https://www.cnblogs.com/itadong/p/7151308.html">nodejs取得当前执行路径</a></li><li><a href="http://www.voidcn.com/article/p-vcxnomvv-bth.html">将require(‘chromedriver).path直接传递给selenium-webdriver</a></li><li><a href="https://www.cnblogs.com/yxi-liu/p/node-selenium-driver.html">Selenium-webdriver基本使用</a></li><li><a href="https://blog.csdn.net/weixin_34234823/article/details/86400982">Node + Selenium使用小结(sleep使用)</a></li><li><a href="https://www.jianshu.com/p/f4a85c683750">Node.js结合selenium做web自动化测试第七课</a></li></ol><h1 id="USING-ASYNC-AWAIT"><a href="#USING-ASYNC-AWAIT" class="headerlink" title="USING ASYNC &#x2F; AWAIT"></a><a href="https://mochajs.org/#interfaces">USING ASYNC &#x2F; AWAIT</a></h1><p>If your JS environment supports async &#x2F; await, you can also write asynchronous tests like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">beforeEach</span>(<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">await</span> db.<span class="hljs-title function_">clear</span>();<br>  <span class="hljs-keyword">await</span> db.<span class="hljs-title function_">save</span>([tobi, loki, jane]);<br>&#125;);<br><br><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;#find()&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;responds with matching records&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> users = <span class="hljs-keyword">await</span> db.<span class="hljs-title function_">find</span>(&#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;User&#x27;</span>&#125;);<br>    users.<span class="hljs-property">should</span>.<span class="hljs-property">have</span>.<span class="hljs-title function_">length</span>(<span class="hljs-number">3</span>);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><p>package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mocha&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;test:mocha&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nyc -a --reporter=html mocha --recursive test/performanceresultservice.test.js&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure></li><li><p>d</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-comment">//********************************************//</span><br><span class="hljs-comment">// Create By       :XuLin</span><br><span class="hljs-comment">// Create Date     :2019/8/19</span><br><span class="hljs-comment">// Update Date     :2019/8/19</span><br><span class="hljs-comment">// File Description:PerformanceResultService Unit Test</span><br><span class="hljs-comment">//********************************************//</span><br><span class="hljs-keyword">var</span> expect = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;chai&#x27;</span>).<span class="hljs-property">expect</span>;<br><span class="hljs-keyword">const</span> config = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../dbconfig.json&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">PerformanceResultService</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../src/performanceresultservice&#x27;</span>);<br><br><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;findPgWorkIds&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;findPgWorkIds_01_find&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> body = &#123;<br>            <span class="hljs-string">&#x27;contextId&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-string">&#x27;data&#x27;</span>: &#123;<br>                <span class="hljs-string">&#x27;departmentLeaderWorkId&#x27;</span>: <span class="hljs-string">&#x27;B-00010&#x27;</span><br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">let</span> ctx = &#123;<br>            <span class="hljs-attr">session</span>: &#123;<br>                <span class="hljs-attr">userInfo</span>: &#123;<br>                    <span class="hljs-title class_">GlobalID</span>: <span class="hljs-string">&#x27;B-30669&#x27;</span>,<br>                    <span class="hljs-attr">role</span>: <span class="hljs-string">&#x27;TL&#x27;</span><br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">let</span> performanceResultService = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PerformanceResultService</span>(&#123;<br>            <span class="hljs-attr">dbConfig</span>: config,<br>            <span class="hljs-attr">serviceConfig</span>: &#123;<br>                <span class="hljs-attr">HR_getUserInfo</span>: <span class="hljs-string">&quot;http://kaoqin.bill-jc.com/wechatOA/api/salaryRate/getUserInfo&quot;</span><br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">await</span> performanceResultService.<span class="hljs-title function_">init</span>();<br>        <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> performanceResultService.<span class="hljs-title function_">findPgWorkIds</span>(body, ctx);<br>            <span class="hljs-keyword">debugger</span>;<br>            <span class="hljs-comment">//console.log(result);</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;###########&#x27;</span>);<br>            <span class="hljs-title function_">expect</span>(result.<span class="hljs-property">length</span>).<span class="hljs-property">to</span>.<span class="hljs-property">be</span>.<span class="hljs-title function_">equal</span>(<span class="hljs-number">168</span>);<br>    &#125;);<br>&#125;);<br><br></code></pre></td></tr></table></figure></li><li><p>console</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs clean">D:\svn_mobile3\PDRC_Mobile\Application_Development_v20190716\<span class="hljs-number">10</span>_System\bjc_logic\service_performance&gt;npm run test:mocha<br><br>&gt; @bjc/service_performance@<span class="hljs-number">1.0</span><span class="hljs-number">.0</span> test:mocha D:\svn_mobile3\PDRC_Mobile\Application_Development_v20190716\<span class="hljs-number">10</span>_System\bjc_logic\service_performance<br>&gt; nyc -a --reporter=html mocha --recursive test/performanceresultservice.test.js<br><br><br><br>  findPgWorkIds<br>departmentLeaderWorkId: B<span class="hljs-number">-30669</span><br>Executing (default): SELECT t2.WorkId,t2.UserName<br>                    FROM COM_Organization t1<br>                    JOIN COM_Employee t2<br>                    ON t2.DepartmentID=t1.DepartmentID<br>                    AND t2.WorkId!=t1.DepartmentLeaderWorkID<br>                    AND t2.EmployeeType=<span class="hljs-number">3</span><br>                    AND t1.DepartmentLeaderWorkID=<span class="hljs-string">&#x27;B-30669&#x27;</span><br>###########<br>    √ findPgWorkIds_01_find (<span class="hljs-number">1035</span>ms)<br><br><br>  <span class="hljs-number">1</span> passing (<span class="hljs-number">1</span>s)<br></code></pre></td></tr></table></figure></li></ul><p>同时在 coverage 生成报告。</p><ol><li>修改 nrm 源:<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">nrm</span> <span class="hljs-keyword">add</span> taobao https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure></li><li>增加 GitHub 变量<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;your name&quot;</span><br>$ git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;your_email@youremail.com&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="CentOS-安装-NodeJS"><a href="#CentOS-安装-NodeJS" class="headerlink" title="CentOS 安装 NodeJS"></a>CentOS 安装 NodeJS</h1><ul><li><p>安装wget</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y wget<br></code></pre></td></tr></table></figure></li><li><p>下载</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://nodejs.org/dist/v10.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>/node-v10.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>-linux-x64.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>所有版本地址</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">https:</span>//nodejs<span class="hljs-meta">.org</span>/dist/<br></code></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">tar -zxvf <span class="hljs-keyword">node</span><span class="hljs-title">-v10</span>.<span class="hljs-number">5.0</span>-linux-x64.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>建立软连接</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">ln -s /root/soft/<span class="hljs-keyword">node</span><span class="hljs-title">-v10</span>.<span class="hljs-number">5.0</span>-linux-x64/bin/<span class="hljs-keyword">node</span> <span class="hljs-title">/usr</span>/bin/<span class="hljs-keyword">node</span><br><span class="hljs-title">ln</span> -s /root/soft/<span class="hljs-keyword">node</span><span class="hljs-title">-v10</span>.<span class="hljs-number">5.0</span>-linux-x64/bin/npm /usr/bin/npm<br>ln -s /root/soft/<span class="hljs-keyword">node</span><span class="hljs-title">-v10</span>.<span class="hljs-number">5.0</span>-linux-x64/bin/nrm /usr/bin/nrm<br>ln -s /root/soft/<span class="hljs-keyword">node</span><span class="hljs-title">-v10</span>.<span class="hljs-number">5.0</span>-linux-x64/bin/pm2 /usr/bin/pm2<br></code></pre></td></tr></table></figure></li><li><p>检查版本</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> bin]<span class="hljs-meta"># node -v</span><br>v10<span class="hljs-number">.5</span><span class="hljs-number">.0</span><br>[root<span class="hljs-symbol">@localhost</span> bin]<span class="hljs-meta"># npm -v</span><br><span class="hljs-number">6.1</span><span class="hljs-number">.0</span><br>[root<span class="hljs-symbol">@localhost</span> bin]<span class="hljs-meta"># nrm -V</span><br><span class="hljs-number">1.2</span><span class="hljs-number">.1</span><br>[root<span class="hljs-symbol">@localhost</span> bin]<span class="hljs-meta"># pm2 -v</span><br><span class="hljs-number">3.5</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure></li><li><p>安装nrm</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g nrm<br></code></pre></td></tr></table></figure></li></ul><h1 id="nrm-操作"><a href="#nrm-操作" class="headerlink" title="nrm 操作"></a>nrm 操作</h1><ul><li><p>增加內源</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">nrm</span> <span class="hljs-keyword">add</span> S163 http:<span class="hljs-comment">//10.100.254.163:4873/</span><br></code></pre></td></tr></table></figure></li><li><p>查看所有源</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">[root@localhost bin]<span class="hljs-comment"># nrm ls</span><br><br>* npm <span class="hljs-params">--------</span> https:<span class="hljs-string">//registry.npmjs.org/</span><br>  yarn <span class="hljs-params">-------</span> https:<span class="hljs-string">//registry.yarnpkg.com/</span><br>  cnpm <span class="hljs-params">-------</span> http:<span class="hljs-string">//r.cnpmjs.org/</span><br>  taobao <span class="hljs-params">-----</span> https:<span class="hljs-string">//registry.npm.taobao.org/</span><br>  nj <span class="hljs-params">---------</span> https:<span class="hljs-string">//registry.nodejitsu.com/</span><br>  npmMirror -- https:<span class="hljs-string">//skimdb.npmjs.com/registry/</span><br>  edunpm <span class="hljs-params">-----</span> http:<span class="hljs-string">//registry.enpmjs.org/</span><br>  S163 <span class="hljs-params">-------</span> http:<span class="hljs-string">//10.100.254.163</span><span class="hljs-function">:4873</span>/<br></code></pre></td></tr></table></figure></li><li><p>使用內源</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">[root@localhost website]<span class="hljs-comment"># nrm use S163</span><br>                        <br><br>   Registry has been <span class="hljs-keyword">set</span> to: http:<span class="hljs-string">//10.100.254.163</span><span class="hljs-function">:4873</span>/<br><br>[root@localhost website]<span class="hljs-comment"># nrm ls</span><br><br>  npm <span class="hljs-params">--------</span> https:<span class="hljs-string">//registry.npmjs.org/</span><br>  yarn <span class="hljs-params">-------</span> https:<span class="hljs-string">//registry.yarnpkg.com/</span><br>  cnpm <span class="hljs-params">-------</span> http:<span class="hljs-string">//r.cnpmjs.org/</span><br>  taobao <span class="hljs-params">-----</span> https:<span class="hljs-string">//registry.npm.taobao.org/</span><br>  nj <span class="hljs-params">---------</span> https:<span class="hljs-string">//registry.nodejitsu.com/</span><br>  npmMirror -- https:<span class="hljs-string">//skimdb.npmjs.com/registry/</span><br>  edunpm <span class="hljs-params">-----</span> http:<span class="hljs-string">//registry.enpmjs.org/</span><br>* S163 <span class="hljs-params">-------</span> http:<span class="hljs-string">//10.100.254.163</span><span class="hljs-function">:4873</span>/<br></code></pre></td></tr></table></figure></li></ul><h1 id="打开防火墙9901端口"><a href="#打开防火墙9901端口" class="headerlink" title="打开防火墙9901端口"></a>打开防火墙9901端口</h1><ul><li>打开端口并检查<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">添加指定需要开放的端口：<br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --add-port=9901/tcp --permanent</span><br>重载入添加的端口：<br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --reload</span><br>查询指定端口是否开启成功：<br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --query-port=9901/tcp</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="svn下载"><a href="#svn下载" class="headerlink" title="svn下载"></a>svn下载</h1><ul><li><p>svn下载源代码</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">svn checkout https://<span class="hljs-number">10.100</span>.<span class="hljs-number">254.108</span>/svn/ITsvn/<span class="hljs-variable">%E4</span><span class="hljs-variable">%BA</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%93</span><span class="hljs-variable">%81</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%BA</span><span class="hljs-variable">%93</span>/<span class="hljs-variable">%E6</span><span class="hljs-variable">%96</span><span class="hljs-variable">%B0</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%B9</span><span class="hljs-variable">%B3</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%B0</span>/<span class="hljs-variable">%E5</span><span class="hljs-variable">%88</span><span class="hljs-variable">%86</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%94</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%89</span><span class="hljs-variable">%88</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%9</span>C<span class="hljs-variable">%AC</span>/PDRC_Mobile/Application_Development_v<span class="hljs-number">20190716</span>/<span class="hljs-number">10</span>_System<br></code></pre></td></tr></table></figure></li><li><p>svn更新源代码</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">svn update</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="安装与发布"><a href="#安装与发布" class="headerlink" title="安装与发布"></a>安装与发布</h1><p>进入&#x2F;pdrc&#x2F;10_System&#x2F;bjc_common&#x2F;website，使用 vim package.json 打开文件，使用[dd]行删除命令，删除下面的代码，然后按【Esc】，输入【:wq】命令，保存退出：  </p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-string">&quot;@bjc/service_dynamictemplate&quot;</span>: <span class="hljs-string">&quot;^1.0.0&quot;</span>,<br><span class="hljs-string">&quot;@bjc/service_performance&quot;</span>: <span class="hljs-string">&quot;^1.0.0&quot;</span>,<br><span class="hljs-string">&quot;@bjc/middleware_sso&quot;</span>: <span class="hljs-string">&quot;^1.0.0&quot;</span>,<br><span class="hljs-string">&quot;@bjc/middleware_role&quot;</span>: <span class="hljs-string">&quot;^1.0.0&quot;</span>,<br><span class="hljs-string">&quot;@bjc/log&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br></code></pre></td></tr></table></figure><ul><li><p>在外源下安装：  </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure></li><li><p>还原package.json内容，然后用nrm切换到內源安装：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> website]<span class="hljs-meta"># nrm use S163</span><br>[root<span class="hljs-symbol">@localhost</span> website]<span class="hljs-meta"># npm install</span><br></code></pre></td></tr></table></figure></li><li><p>修改config.default.js文件中hostname值为机器的实际IP地址：  </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle">vim <span class="hljs-regexp">/pdrc/</span><span class="hljs-number">10</span>_System<span class="hljs-regexp">/bjc_common/</span>website<span class="hljs-regexp">/config/</span>config.<span class="hljs-keyword">default</span>.js<br><br>exports.cluster = &#123;<br>listen: &#123;<br>  port: <span class="hljs-number">9901</span>,<br>  hostname: <span class="hljs-string">&#x27;10.100.254.229&#x27;</span>,<br>&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>打包前端代码：  </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@localhost pc]# npm run-script build<br>&gt; bjc_performance_pc@<span class="hljs-number">1.0</span>.<span class="hljs-number">0</span> build <span class="hljs-regexp">/pdrc/</span><span class="hljs-number">10</span>_System<span class="hljs-regexp">/bjc_ui/</span>pc<br>&gt; node build/build.js<br><br>Hash: <span class="hljs-number">7</span>aab3cb3fd1cacc57ed4<br>Version: webpack <span class="hljs-number">3.12</span>.<span class="hljs-number">0</span><br>Time: <span class="hljs-number">62971</span>ms<br>                                                  Asset       <span class="hljs-keyword">Size</span>  Chunks                    Chunk Names<br>    <span class="hljs-keyword">static</span><span class="hljs-regexp">/css/</span>app.d9fbadc6069a89e4176552e220b44f10.css     <span class="hljs-number">267</span> kB       <span class="hljs-number">1</span>  [emitted]  [big]  app<br>                    <span class="hljs-keyword">static</span><span class="hljs-regexp">/fonts/i</span>onicons.<span class="hljs-number">143146</span>f.woff2    <span class="hljs-number">82.2</span> kB          [emitted]         <br>                      <span class="hljs-keyword">static</span><span class="hljs-regexp">/fonts/i</span>onicons.d535a25.ttf     <span class="hljs-number">198</span> kB          [emitted]         <br>                     <span class="hljs-keyword">static</span><span class="hljs-regexp">/fonts/i</span>onicons.<span class="hljs-number">99</span>ac330.woff     <span class="hljs-number">198</span> kB          [emitted]         <br>               <span class="hljs-keyword">static</span><span class="hljs-regexp">/js/</span>vendor.d5102c7a2c959385c6e2.js     <span class="hljs-number">751</span> kB       <span class="hljs-number">0</span>  [emitted]  [big]  vendor<br>                  <span class="hljs-keyword">static</span><span class="hljs-regexp">/js/</span>app.<span class="hljs-number">2603</span>d4d72d1c5a87cf7f.js    <span class="hljs-number">15.6</span> kB       <span class="hljs-number">1</span>  [emitted]         app<br>             <span class="hljs-keyword">static</span><span class="hljs-regexp">/js/m</span>anifest.<span class="hljs-number">2</span>ae2e69a05c33dfc65f8.js  <span class="hljs-number">857</span> bytes       <span class="hljs-number">2</span>  [emitted]         manifest<br>                        <span class="hljs-keyword">static</span><span class="hljs-regexp">/img/i</span>onicons.a2c4a26.svg     <span class="hljs-number">555</span> kB          [emitted]  [big]  <br><span class="hljs-keyword">static</span><span class="hljs-regexp">/css/</span>app.d9fbadc6069a89e4176552e220b44f10.css.map     <span class="hljs-number">380</span> kB          [emitted]         <br>           <span class="hljs-keyword">static</span><span class="hljs-regexp">/js/</span>vendor.d5102c7a2c959385c6e2.js.map    <span class="hljs-number">3.25</span> MB       <span class="hljs-number">0</span>  [emitted]         vendor<br>              <span class="hljs-keyword">static</span><span class="hljs-regexp">/js/</span>app.<span class="hljs-number">2603</span>d4d72d1c5a87cf7f.js.map      <span class="hljs-number">63</span> kB       <span class="hljs-number">1</span>  [emitted]         app<br>         <span class="hljs-keyword">static</span><span class="hljs-regexp">/js/m</span>anifest.<span class="hljs-number">2</span>ae2e69a05c33dfc65f8.js.map    <span class="hljs-number">4.97</span> kB       <span class="hljs-number">2</span>  [emitted]         manifest<br>                                             index.html  <span class="hljs-number">583</span> bytes          [emitted]         <br>                                    <span class="hljs-keyword">static</span><span class="hljs-regexp">/js/</span>server.js   <span class="hljs-number">79</span> bytes          [emitted]         <br><br>  Build complete.<br><br>  Tip: built files are meant to be served over an HTTP server.<br>  Opening index.html over <span class="hljs-keyword">file</span>:<span class="hljs-comment">// won&#x27;t work.</span><br><br></code></pre></td></tr></table></figure></li><li><p>删除website的app文件夹下的历史版本前端代码：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">rm -rf <span class="hljs-regexp">/pdrc/</span><span class="hljs-number">10</span>_System<span class="hljs-regexp">/bjc_common/</span>website<span class="hljs-regexp">/app/i</span>ndex.html<br>rm -rf <span class="hljs-regexp">/pdrc/</span><span class="hljs-number">10</span>_System<span class="hljs-regexp">/bjc_common/</span>website<span class="hljs-regexp">/app/</span><span class="hljs-keyword">static</span><br></code></pre></td></tr></table></figure></li><li><p>复制最新前端代码到website的app文件夹下：  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp -r <span class="hljs-regexp">/pdrc/</span><span class="hljs-number">10</span>_System<span class="hljs-regexp">/bjc_ui/</span>pc<span class="hljs-regexp">/dist/</span>. <span class="hljs-regexp">/pdrc/</span><span class="hljs-number">10</span>_System<span class="hljs-regexp">/bjc_common/</span>website<span class="hljs-regexp">/app/</span><br></code></pre></td></tr></table></figure></li><li><p>修改前端配置文件的服务器地址为机器的实际IP地址：  </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@localhost</span> js]# vim <span class="hljs-regexp">/pdrc/</span>10_System<span class="hljs-regexp">/bjc_common/</span>website<span class="hljs-regexp">/app/</span><span class="hljs-keyword">static</span><span class="hljs-regexp">/js/</span>server.js <br><br>(function()&#123;<br>  window.servers <span class="hljs-operator">=</span> &#123;<br>    local: &#x27;http:<span class="hljs-comment">//10.100.254.229:9901&#x27;</span><br>  &#125;<br>&#125;)();<br></code></pre></td></tr></table></figure></li></ul><h1 id="启动web服务"><a href="#启动web服务" class="headerlink" title="启动web服务"></a>启动web服务</h1><ul><li>在website的根目录下执行命令：  <figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs prolog">npm start<br><br>[root@localhost website]# npm start<br><br>&gt; bjc_quality_sys@<span class="hljs-number">1.0</span><span class="hljs-number">.0</span> start /root/<span class="hljs-symbol">Dev</span>/website<br>&gt; egg-scripts start --daemon --title=egg-server-<span class="hljs-symbol">BJCQualitySYS</span><br><br>[egg-scripts] <span class="hljs-symbol">Starting</span> egg application at /root/<span class="hljs-symbol">Dev</span>/website<br>[egg-scripts] <span class="hljs-symbol">Run</span> node /root/<span class="hljs-symbol">Dev</span>/website/node_modules/egg-scripts/lib/start-cluster <br>&#123;<span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;egg-server-BJCQualitySYS&quot;</span>,<span class="hljs-string">&quot;baseDir&quot;</span>:<span class="hljs-string">&quot;/root/Dev/website&quot;</span>,<br><span class="hljs-string">&quot;framework&quot;</span>:<span class="hljs-string">&quot;/root/Dev/website/node_modules/egg&quot;</span>&#125; --title=egg-server-<span class="hljs-symbol">BJCQualitySYS</span><br>[egg-scripts] <span class="hljs-symbol">Save</span> log file to /root/logs<br>[egg-scripts] <span class="hljs-symbol">Wait</span> <span class="hljs-symbol">Start</span>: <span class="hljs-number">1.</span>..<br>[egg-scripts] <span class="hljs-symbol">Wait</span> <span class="hljs-symbol">Start</span>: <span class="hljs-number">2.</span>..<br>[egg-scripts] <span class="hljs-symbol">Wait</span> <span class="hljs-symbol">Start</span>: <span class="hljs-number">3.</span>..<br>[egg-scripts] <span class="hljs-symbol">Wait</span> <span class="hljs-symbol">Start</span>: <span class="hljs-number">4.</span>..<br>[egg-scripts] <span class="hljs-symbol">Wait</span> <span class="hljs-symbol">Start</span>: <span class="hljs-number">5.</span>..<br>[egg-scripts] <span class="hljs-symbol">Wait</span> <span class="hljs-symbol">Start</span>: <span class="hljs-number">6.</span>..<br>[egg-scripts] egg started on http://<span class="hljs-number">10.100</span><span class="hljs-number">.254</span><span class="hljs-number">.229</span>:<span class="hljs-number">9901</span><br></code></pre></td></tr></table></figure></li></ul><p>服务成功启动后，可在浏览器中访问！</p><h1 id="停止web服务"><a href="#停止web服务" class="headerlink" title="停止web服务"></a>停止web服务</h1><ul><li><p>在website的根目录下执行命令：      </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@localhost website]<span class="hljs-comment"># npm stop</span><br><br>&gt; bjc_quality_sys@<span class="hljs-number">1.0</span>.<span class="hljs-number">0</span> <span class="hljs-literal">stop</span> /root/Dev/website<br>&gt; egg-scripts <span class="hljs-literal">stop</span> --<span class="hljs-attr">title=</span>egg-server-BJCQualitySYS<br><br>[egg-scripts] stopping egg application with --<span class="hljs-attr">title=</span>egg-server-BJCQualitySYS<br>[egg-scripts] got <span class="hljs-keyword">master</span> <span class="hljs-title">pid</span> [<span class="hljs-string">&quot;14821&quot;</span>]<br>[egg-scripts] <span class="hljs-literal">stopped</span><br></code></pre></td></tr></table></figure></li><li><p>把任何文件放在这个目录下，可以直接用浏览器下载：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">\<span class="hljs-number">10</span>_System\bjc_common\website\app\download<br><br><span class="hljs-regexp">//</span> 放置 website.zip 文件，下载地址为：<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">10.50</span>.<span class="hljs-number">20.123</span>:<span class="hljs-number">9901</span><span class="hljs-regexp">/static/</span>download/website.zip<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>NodeJS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>NodeJS</tag>
      
      <tag>PDRC</tag>
      
      <tag>selenium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hackintosh 黑苹果乐园</title>
    <link href="/2019/01/17/Hackintosh/"/>
    <url>/2019/01/17/Hackintosh/</url>
    
    <content type="html"><![CDATA[<p>文章目录</p><ul><li><a href="#%E9%A9%B1%E5%8A%A8">驱动</a><ul><li><a href="#%E7%BD%91%E5%8D%A1">网卡</a></li></ul></li></ul><p><escape><span id="more"></span></escape>  </p><h2 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h2><h3 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h3><ol><li><p><a href="http://bbs.pcbeta.com/forum.php?mod=viewthread&tid=1799109&extra=page=1&filter=typeid&typeid=1329&page=4">AR9565无线网卡驱动（10.14和10.12系统下亲测完美）</a></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">发表于 2018<span class="hljs-string">-12</span><span class="hljs-string">-30</span> 17:17:28 |只看该作者<br>直接把这个放进资源库 ▸ Extensions里 （或者系统 ▸ 资源库 ▸ Extensions里），什么都不用删！<br></code></pre></td></tr></table></figure></li><li><p><a href="http://bbs.pcbeta.com/forum.php?mod=viewthread&tid=1794771&extra=page=2&filter=typeid&typeid=1329&typeid=1329">AR9285 Mojava无法驱动</a></p></li><li><p><a href="http://bbs.pcbeta.com/forum.php?mod=viewthread&tid=1790406&highlight=9485">Mojave驱动ar956x 9485 946x的解决方案</a></p><img src="/2019/01/17/Hackintosh/AirPortAtheros40.png" class=""></li><li><p><a href="http://bbs.pcbeta.com/forum.php?mod=viewthread&tid=1790406&extra=&highlight=9485&page=3">etnperlong</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown">好的，经过半个上午的折腾，我的AR9565终于在10.14上驱动起来了，感谢楼主提供的驱动，我后来还补上了ATH9KInjector.kext（来自国际友人修改的1.2.6版本ATH9KFixUp）<br><br>以下是我的修复方案：<br><span class="hljs-bullet">1.</span> 将楼主提供的附件里AtherosAirport40.kext，安装到/S/L/E/IO80211Family.kext/Contents/Plugins/里<br><span class="hljs-bullet">2.</span> 下载最新LiLu 1.2.7，Clover注入（一般黑果都会有的吧，更新下版本号就好）<br><span class="hljs-bullet">3.</span> 将楼主提供的附件里ATH9KFixup.kext用Clover注入<br><span class="hljs-bullet">4.</span> 修改config，按楼主的说明加上-lilubetaall 和 -ath9565<br><span class="hljs-bullet">5.</span> 下载我这里的附件并解压得到ATH9KInjector.kext，安装到/S/L/E/<br><span class="hljs-bullet">6.</span> 重建缓存，重启<br><br>参考国际友人做法，用10.13.4的IO80211Family替换，然后用全套国际友人修改的1.2.6版本ATH9KFixUp，会导致只能打开WiFi不能搜索，用楼主的附件糅合在一起之后，成功驱动！<br><br>PS：用老版本的BTFirmwareUpload貌似还可以驱动蓝牙，手机可以搜索到黑果的蓝牙信号，但是并没有<br>进一步测试<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Hackintosh</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AR9485</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS</title>
    <link href="/2019/01/14/macOS/"/>
    <url>/2019/01/14/macOS/</url>
    
    <content type="html"><![CDATA[<h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><ol><li><a href="https://blog.csdn.net/lovechris00/article/details/79935134">macOS 设置文件默认打开方式</a></li><li><a href="https://jingyan.baidu.com/article/f3ad7d0f55154309c3345bdd.html">Mac系统如何编辑hosts文件</a></li><li><a href="https://blog.csdn.net/u013062316/article/details/44309489">关于在Mac下用Unix命令操作移动硬盘的步骤</a></li><li><a href="https://jingyan.baidu.com/article/6b1823098c4f98ba58e159ec.html">Mac 如何查找出大文件？</a></li><li><a href="https://blog.csdn.net/fungleo/article/details/78489552">linux\mac 日常入门命令行使用——搜索文件\文件夹</a></li><li><a href="https://zhidao.baidu.com/question/1737939526908183027.html">苹果Mac操作系统下怎么显示隐藏文件</a></li></ol><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><ol><li><a href="https://www.iplaysoft.com/iina.html">IINA - 以成为苹果 Mac 平台上最强的好用万能视频播放器而生！</a></li><li><a href="https://www.cockos.com/licecap/">LICEcap</a><br>LICEcap 是一个神奇的免费的Gif 屏幕录像软件，它可将屏幕录像的内容直接保存为高质量(每帧颜色数量可超过256)GIF动态图片格式。并且支持特别标记鼠标操作动态效果，支持 elapsed time 和 title frame 及自定义热键功能，并自由调整录制窗口大小，你完全可以使用LICEcap录制出GIF图片格式的视频教程，看起来显得很专业!</li></ol><h2 id="应用开发"><a href="#应用开发" class="headerlink" title="应用开发"></a>应用开发</h2><ol><li><a href="https://blog.csdn.net/zixiao217/article/details/78006599">Mac安装、配置Maven</a></li><li><a href="http://www.kejunfeng.com/2018/07/12/webstorm.html">WebStorm2018.3 中文汉化最新破解激活版 Mac&#x2F;Win</a></li><li><a href="https://blog.csdn.net/wang19891106/article/details/51127133">NodeJS入门–环境搭建 IntelliJ IDEA</a></li><li><a href="https://www.cnblogs.com/hafiz/p/5515388.html">手写Maven的archetype项目脚手架</a></li><li><a href="https://my.oschina.net/u/261246/blog/817125">删除IntelliJ Idea中Maven Archetype</a></li><li><a href="https://www.cnblogs.com/mafeng/p/5985142.html">如何删除GIT中的.DS_Store</a></li></ol><h2 id="VMWare"><a href="#VMWare" class="headerlink" title="VMWare"></a>VMWare</h2><ol><li><a href="https://drive.google.com/drive/folders/1Odu1gu4cdMU0HNw8QztrR_fvYlmcNSLt?usp=sharing">macOS Catalina Final Version by Geekrar (One Full – Google Drive)</a></li><li><a href="https://www.geekrar.com/download-macos-catalina-vmware-virtualbox-image-latest-version/">Download macOS Catalina VMware &amp; VirtualBox Image – Latest Version</a></li><li><a href="https://blog.sxbai.com/174.html">如何在Windows上VMware上安装macOS Catalina 10.15</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
      <tag>IDEA</tag>
      
      <tag>WebStorm</tag>
      
      <tag>NodeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第3周</title>
    <link href="/2019/01/14/Year2019Week03/"/>
    <url>/2019/01/14/Year2019Week03/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第3周（2019-01-14-2019-01-20）"><a href="#2019年第3周（2019-01-14-2019-01-20）" class="headerlink" title="2019年第3周（2019&#x2F;01&#x2F;14~2019&#x2F;01&#x2F;20）"></a>2019年第3周（2019&#x2F;01&#x2F;14~2019&#x2F;01&#x2F;20）</h2><ol><li><a href="https://blog.csdn.net/qq_36754544/article/details/79556339">IntelliJ IDEA 如何删除自定义的 Maven 骨架(Archetype)</a></li><li><a href="https://blog.csdn.net/asdfsadfasdfsa/article/details/79988360">修改Idea默认的全局设置</a></li><li>IdeaUI 2018 链接：<a href="http://pan.baidu.com/s/1bpnlLAR">http://pan.baidu.com/s/1bpnlLAR</a> 密码：rl9v</li><li><a href="https://www.jianshu.com/p/e4a544741fe0">可能是目前最全面的Markdown写作解决方案</a></li><li><a href="https://juejin.im/entry/5c412f82e51d4552701565f3">为什么程序员们愿意在GitHub上开源自己的成果?</a></li><li><a href="https://www.expreview.com/38666.html">Adblock Plus广告过滤白名单公开：谷歌、微软、亚马逊在列(属性-&gt;可允许广告，关掉Taboola广告)</a></li></ol><p><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
      <tag>IDEA</tag>
      
      <tag>Markdown</tag>
      
      <tag>AdBlock</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第4章 Activiti6.0引擎配置</title>
    <link href="/2019/01/14/Activiti6InAction_Chapter04/"/>
    <url>/2019/01/14/Activiti6InAction_Chapter04/</url>
    
    <content type="html"><![CDATA[<h2 id="第4章-Activiti6-0引擎配置"><a href="#第4章-Activiti6-0引擎配置" class="headerlink" title="第4章 Activiti6.0引擎配置"></a>第4章 Activiti6.0引擎配置</h2><p>本章为大家介绍Activiti6.0配置，所有的配置都是通过ProcessEngineConfiguration类来设置的，其中主要的配置包括数据源，数据类型，创建数据库表的策略，作业执行器的配置，流程历史数据记录的详细级别，Activiti对日志的配置支持，以及在流程执行过程中定义方便定位信息的mdc变量，Activiti提供的事件处理程序ActivitiEven…</p><h3 id="4-1-本章概述"><a href="#4-1-本章概述" class="headerlink" title="4-1 本章概述"></a>4-1 本章概述</h3><h3 id="4-2-创建流程引擎配置-config-samples"><a href="#4-2-创建流程引擎配置-config-samples" class="headerlink" title="4-2 创建流程引擎配置-config_samples"></a>4-2 创建流程引擎配置-config_samples</h3><h3 id="4-3-创建流程引擎配置-archetype"><a href="#4-3-创建流程引擎配置-archetype" class="headerlink" title="4-3 创建流程引擎配置-archetype"></a>4-3 创建流程引擎配置-archetype</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Admin</span><span class="hljs-meta">@Admin</span><span class="hljs-operator">-</span><span class="hljs-type">PC</span> <span class="hljs-type">MINGW64</span> <span class="hljs-regexp">/d/</span><span class="hljs-type">Java</span><span class="hljs-regexp">/GitHub/</span><span class="hljs-type">Activiti6</span><span class="hljs-regexp">/tooling/</span>archetypes<span class="hljs-operator">/</span>activiti<span class="hljs-operator">-</span>archetype<span class="hljs-operator">-</span>unittest (study6)<br>$ mvn clean install<br><br></code></pre></td></tr></table></figure><p>执行完上面的命令，就可以在新建工程的时候使用这个脚手架了：<br><img src="/Activiti6InAction_Chapter04%5C01_New_Archetype.png"></p><h3 id="4-4-数据库配置-dbconfig"><a href="#4-4-数据库配置-dbconfig" class="headerlink" title="4-4 数据库配置-dbconfig"></a>4-4 数据库配置-dbconfig</h3><h3 id="4-5-数据库配置-dbconfig-code"><a href="#4-5-数据库配置-dbconfig-code" class="headerlink" title="4-5 数据库配置-dbconfig_code"></a>4-5 数据库配置-dbconfig_code</h3><h3 id="4-6-日志记录配置-logging"><a href="#4-6-日志记录配置-logging" class="headerlink" title="4-6 日志记录配置-logging"></a>4-6 日志记录配置-logging</h3><h3 id="4-7-日志记录配置-logging-mdc"><a href="#4-7-日志记录配置-logging-mdc" class="headerlink" title="4-7 日志记录配置-logging_mdc"></a>4-7 日志记录配置-logging_mdc</h3><h3 id="4-8-历史记录配置-history-1"><a href="#4-8-历史记录配置-history-1" class="headerlink" title="4-8 历史记录配置-history-1"></a>4-8 历史记录配置-history-1</h3><h3 id="4-9-历史记录配置-history-2"><a href="#4-9-历史记录配置-history-2" class="headerlink" title="4-9 历史记录配置-history-2"></a>4-9 历史记录配置-history-2</h3><h3 id="4-10-事件处理及监听器配置-eventlog"><a href="#4-10-事件处理及监听器配置-eventlog" class="headerlink" title="4-10 事件处理及监听器配置-eventlog"></a>4-10 事件处理及监听器配置-eventlog</h3><h3 id="4-11-事件处理及监听器配置-eventLinstener-1"><a href="#4-11-事件处理及监听器配置-eventLinstener-1" class="headerlink" title="4-11 事件处理及监听器配置-eventLinstener-1"></a>4-11 事件处理及监听器配置-eventLinstener-1</h3><h3 id="4-12-事件处理及监听器配置-eventLinstener-2"><a href="#4-12-事件处理及监听器配置-eventLinstener-2" class="headerlink" title="4-12 事件处理及监听器配置-eventLinstener-2"></a>4-12 事件处理及监听器配置-eventLinstener-2</h3><h3 id="4-13-命令拦截器配置-command-1"><a href="#4-13-命令拦截器配置-command-1" class="headerlink" title="4-13 命令拦截器配置-command-1"></a>4-13 命令拦截器配置-command-1</h3><h3 id="4-14-命令拦截器配置-command-2"><a href="#4-14-命令拦截器配置-command-2" class="headerlink" title="4-14 命令拦截器配置-command-2"></a>4-14 命令拦截器配置-command-2</h3><h3 id="4-15-作业执行器配置-job-1"><a href="#4-15-作业执行器配置-job-1" class="headerlink" title="4-15 作业执行器配置-job-1"></a>4-15 作业执行器配置-job-1</h3><h3 id="4-16-作业执行器配置-job-2"><a href="#4-16-作业执行器配置-job-2" class="headerlink" title="4-16 作业执行器配置-job-2"></a>4-16 作业执行器配置-job-2</h3><h3 id="4-17-Activiti与spring集成-1"><a href="#4-17-Activiti与spring集成-1" class="headerlink" title="4-17 Activiti与spring集成-1"></a>4-17 Activiti与spring集成-1</h3><h3 id="4-18-Activiti与spring集成-2"><a href="#4-18-Activiti与spring集成-2" class="headerlink" title="4-18 Activiti与spring集成-2"></a>4-18 Activiti与spring集成-2</h3><h3 id="4-19-Activiti与spring集成-3"><a href="#4-19-Activiti与spring集成-3" class="headerlink" title="4-19 Activiti与spring集成-3"></a>4-19 Activiti与spring集成-3</h3><p><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Activiti6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Activiti6.0工作流引擎深度解析与实战视频教程目录</title>
    <link href="/2019/01/14/Activiti6InAction_Contents/"/>
    <url>/2019/01/14/Activiti6InAction_Contents/</url>
    
    <content type="html"><![CDATA[<h1 id="Java视频教程详情描述："><a href="#Java视频教程详情描述：" class="headerlink" title="Java视频教程详情描述："></a>Java视频教程详情描述：</h1><p>本课程将系统且深入源码讲解Activiti6.0工作流引擎的使用、配置、核心api以及BPMN2.0规范、数据库设计及模型映射，Spring Boot2.0集成，工作流平台搭建、部署与运维等，通过本课程的学习，你将切实学会Activiti6.0工作流引擎开发，大大提升自己的业务建模能力，技术架构能力，开源库研究能力，流程梳理能力，从而进阶为Java中高级工程师。</p><h2 id="第1章-课程介绍"><a href="#第1章-课程介绍" class="headerlink" title="第1章 课程介绍"></a>第1章 课程介绍</h2><p>本课程将系统且深入源码讲解Activiti6.0工作流引擎的使用、配置、核心api以及BPMN2.0规范、数据库设计及模型映射，Spring Boot2.0集成，工作流平台搭建、部署与运维等，通过本课程的学习，你将切实学会Activiti6.0工作流引擎开发，大大提升自己的业务建模能力，技术架构能力，开源库研究能力，流程梳理能力，从而进阶为Jav…</p><h3 id="1-1-课程导学"><a href="#1-1-课程导学" class="headerlink" title="1-1 课程导学"></a>1-1 课程导学</h3><h2 id="第2章-工作流入门"><a href="#第2章-工作流入门" class="headerlink" title="第2章 工作流入门"></a>第2章 工作流入门</h2><p>本章首先介绍了工作流是什么，工作流技术选型，然后带大家快速体验activiti6.0，让大家在最短的时间内体验工作流系统的操作过程，对activiti工作流有个感性的认识。</p><h3 id="2-1-本章概述"><a href="#2-1-本章概述" class="headerlink" title="2-1 本章概述"></a>2-1 本章概述</h3><h3 id="2-2-工作流介绍"><a href="#2-2-工作流介绍" class="headerlink" title="2-2 工作流介绍"></a>2-2 工作流介绍</h3><h3 id="2-3-工作流引擎技术选型"><a href="#2-3-工作流引擎技术选型" class="headerlink" title="2-3 工作流引擎技术选型"></a>2-3 工作流引擎技术选型</h3><h3 id="2-4-Activiti6-0快速体验-部署环境介绍"><a href="#2-4-Activiti6-0快速体验-部署环境介绍" class="headerlink" title="2-4 Activiti6.0快速体验-部署环境介绍"></a>2-4 Activiti6.0快速体验-部署环境介绍</h3><h3 id="2-5-Activiti6-0快速体验-部署环境实操"><a href="#2-5-Activiti6-0快速体验-部署环境实操" class="headerlink" title="2-5 Activiti6.0快速体验-部署环境实操"></a>2-5 Activiti6.0快速体验-部署环境实操</h3><h3 id="2-6-Activiti6-0快速体验-流程体验"><a href="#2-6-Activiti6-0快速体验-流程体验" class="headerlink" title="2-6 Activiti6.0快速体验-流程体验"></a>2-6 Activiti6.0快速体验-流程体验</h3><h2 id="第3章-Activiti6-0源码初探"><a href="#第3章-Activiti6-0源码初探" class="headerlink" title="第3章 Activiti6.0源码初探"></a>第3章 Activiti6.0源码初探</h2><p>本章带大家对Activiti6.0源码进行初探,首先我会介绍如何基于源代码方式学习开源软件的方法，然后在官方源码的基础上运行activiti-app，并详细介绍activiti-app的工程结构，演示demo，学习官方demo构建的优点，对源码有一个初步认识后，我们开始activiti的hello world之旅，通过编程方式体验工作流的运行过程，绘制流程图，…</p><h3 id="3-1-本章概述"><a href="#3-1-本章概述" class="headerlink" title="3-1 本章概述"></a>3-1 本章概述</h3><h3 id="3-2-Activiti6-0源码初探-概览与获取"><a href="#3-2-Activiti6-0源码初探-概览与获取" class="headerlink" title="3-2 Activiti6.0源码初探-概览与获取"></a>3-2 Activiti6.0源码初探-概览与获取</h3><h3 id="3-3-Activiti6-0源码初探-engine"><a href="#3-3-Activiti6-0源码初探-engine" class="headerlink" title="3-3 Activiti6.0源码初探-engine"></a>3-3 Activiti6.0源码初探-engine</h3><h3 id="3-4-Activiti6-0源码初探-模块介绍"><a href="#3-4-Activiti6-0源码初探-模块介绍" class="headerlink" title="3-4 Activiti6.0源码初探-模块介绍"></a>3-4 Activiti6.0源码初探-模块介绍</h3><h3 id="3-5-Activiti6-0源码初探-activiti-app运行"><a href="#3-5-Activiti6-0源码初探-activiti-app运行" class="headerlink" title="3-5 Activiti6.0源码初探-activiti-app运行"></a>3-5 Activiti6.0源码初探-activiti-app运行</h3><h3 id="3-6-Activiti6-0源码初探-WebConfigurer"><a href="#3-6-Activiti6-0源码初探-WebConfigurer" class="headerlink" title="3-6 Activiti6.0源码初探-WebConfigurer"></a>3-6 Activiti6.0源码初探-WebConfigurer</h3><h3 id="3-7-Activiti6-0源码初探-helloword-1"><a href="#3-7-Activiti6-0源码初探-helloword-1" class="headerlink" title="3-7 Activiti6.0源码初探-helloword-1"></a>3-7 Activiti6.0源码初探-helloword-1</h3><h3 id="3-8-Activiti6-0源码初探-helloword-2"><a href="#3-8-Activiti6-0源码初探-helloword-2" class="headerlink" title="3-8 Activiti6.0源码初探-helloword-2"></a>3-8 Activiti6.0源码初探-helloword-2</h3><h3 id="3-9-Activiti6-0源码初探-helloword-idea-1"><a href="#3-9-Activiti6-0源码初探-helloword-idea-1" class="headerlink" title="3-9 Activiti6.0源码初探-helloword_idea-1"></a>3-9 Activiti6.0源码初探-helloword_idea-1</h3><h3 id="3-10-Activiti6-0源码初探-helloword-idea-2"><a href="#3-10-Activiti6-0源码初探-helloword-idea-2" class="headerlink" title="3-10 Activiti6.0源码初探-helloword_idea-2"></a>3-10 Activiti6.0源码初探-helloword_idea-2</h3><h3 id="3-11-Activiti6-0源码初探-helloword-idea-3"><a href="#3-11-Activiti6-0源码初探-helloword-idea-3" class="headerlink" title="3-11 Activiti6.0源码初探-helloword_idea-3"></a>3-11 Activiti6.0源码初探-helloword_idea-3</h3><h2 id="第4章-Activiti6-0引擎配置"><a href="#第4章-Activiti6-0引擎配置" class="headerlink" title="第4章 Activiti6.0引擎配置"></a>第4章 Activiti6.0引擎配置</h2><p>本章为大家介绍Activiti6.0配置，所有的配置都是通过ProcessEngineConfiguration类来设置的，其中主要的配置包括数据源，数据类型，创建数据库表的策略，作业执行器的配置，流程历史数据记录的详细级别，Activiti对日志的配置支持，以及在流程执行过程中定义方便定位信息的mdc变量，Activiti提供的事件处理程序ActivitiEven…</p><h3 id="4-1-本章概述"><a href="#4-1-本章概述" class="headerlink" title="4-1 本章概述"></a>4-1 本章概述</h3><h3 id="4-2-创建流程引擎配置-config-samples"><a href="#4-2-创建流程引擎配置-config-samples" class="headerlink" title="4-2 创建流程引擎配置-config_samples"></a>4-2 创建流程引擎配置-config_samples</h3><h3 id="4-3-创建流程引擎配置-archetype"><a href="#4-3-创建流程引擎配置-archetype" class="headerlink" title="4-3 创建流程引擎配置-archetype"></a>4-3 创建流程引擎配置-archetype</h3><h3 id="4-4-数据库配置-dbconfig"><a href="#4-4-数据库配置-dbconfig" class="headerlink" title="4-4 数据库配置-dbconfig"></a>4-4 数据库配置-dbconfig</h3><h3 id="4-5-数据库配置-dbconfig-code"><a href="#4-5-数据库配置-dbconfig-code" class="headerlink" title="4-5 数据库配置-dbconfig_code"></a>4-5 数据库配置-dbconfig_code</h3><h3 id="4-6-日志记录配置-logging"><a href="#4-6-日志记录配置-logging" class="headerlink" title="4-6 日志记录配置-logging"></a>4-6 日志记录配置-logging</h3><h3 id="4-7-日志记录配置-logging-mdc"><a href="#4-7-日志记录配置-logging-mdc" class="headerlink" title="4-7 日志记录配置-logging_mdc"></a>4-7 日志记录配置-logging_mdc</h3><h3 id="4-8-历史记录配置-history-1"><a href="#4-8-历史记录配置-history-1" class="headerlink" title="4-8 历史记录配置-history-1"></a>4-8 历史记录配置-history-1</h3><h3 id="4-9-历史记录配置-history-2"><a href="#4-9-历史记录配置-history-2" class="headerlink" title="4-9 历史记录配置-history-2"></a>4-9 历史记录配置-history-2</h3><h3 id="4-10-事件处理及监听器配置-eventlog"><a href="#4-10-事件处理及监听器配置-eventlog" class="headerlink" title="4-10 事件处理及监听器配置-eventlog"></a>4-10 事件处理及监听器配置-eventlog</h3><h3 id="4-11-事件处理及监听器配置-eventLinstener-1"><a href="#4-11-事件处理及监听器配置-eventLinstener-1" class="headerlink" title="4-11 事件处理及监听器配置-eventLinstener-1"></a>4-11 事件处理及监听器配置-eventLinstener-1</h3><h3 id="4-12-事件处理及监听器配置-eventLinstener-2"><a href="#4-12-事件处理及监听器配置-eventLinstener-2" class="headerlink" title="4-12 事件处理及监听器配置-eventLinstener-2"></a>4-12 事件处理及监听器配置-eventLinstener-2</h3><h3 id="4-13-命令拦截器配置-command-1"><a href="#4-13-命令拦截器配置-command-1" class="headerlink" title="4-13 命令拦截器配置-command-1"></a>4-13 命令拦截器配置-command-1</h3><h3 id="4-14-命令拦截器配置-command-2"><a href="#4-14-命令拦截器配置-command-2" class="headerlink" title="4-14 命令拦截器配置-command-2"></a>4-14 命令拦截器配置-command-2</h3><h3 id="4-15-作业执行器配置-job-1"><a href="#4-15-作业执行器配置-job-1" class="headerlink" title="4-15 作业执行器配置-job-1"></a>4-15 作业执行器配置-job-1</h3><h3 id="4-16-作业执行器配置-job-2"><a href="#4-16-作业执行器配置-job-2" class="headerlink" title="4-16 作业执行器配置-job-2"></a>4-16 作业执行器配置-job-2</h3><h3 id="4-17-Activiti与spring集成-1"><a href="#4-17-Activiti与spring集成-1" class="headerlink" title="4-17 Activiti与spring集成-1"></a>4-17 Activiti与spring集成-1</h3><h3 id="4-18-Activiti与spring集成-2"><a href="#4-18-Activiti与spring集成-2" class="headerlink" title="4-18 Activiti与spring集成-2"></a>4-18 Activiti与spring集成-2</h3><h3 id="4-19-Activiti与spring集成-3"><a href="#4-19-Activiti与spring集成-3" class="headerlink" title="4-19 Activiti与spring集成-3"></a>4-19 Activiti与spring集成-3</h3><h2 id="第5章-Activiti核心API"><a href="#第5章-Activiti核心API" class="headerlink" title="第5章 Activiti核心API"></a>第5章 Activiti核心API</h2><p>本章主要讲解Activiti核心API，包括ProcessEngine以及服务、流程存储服务、流程运行控制服务、任务管理服务、用户和用户组管理服务、表单服务管理、历史数据管理服务、其它管理服务、异常策略。在学习了这些常用api的基础上我们通过APi控制一个流程实例的状态进化，体验流程的部署过程，启动流程实例，驱动流程到下一个节点…</p><h3 id="5-1-本章概述"><a href="#5-1-本章概述" class="headerlink" title="5-1 本章概述"></a>5-1 本章概述</h3><h3 id="5-2-流程存储服务-RepositoryService-1"><a href="#5-2-流程存储服务-RepositoryService-1" class="headerlink" title="5-2 流程存储服务-RepositoryService-1"></a>5-2 流程存储服务-RepositoryService-1</h3><h3 id="5-3-流程存储服务-RepositoryService-2"><a href="#5-3-流程存储服务-RepositoryService-2" class="headerlink" title="5-3 流程存储服务-RepositoryService-2"></a>5-3 流程存储服务-RepositoryService-2</h3><h3 id="5-4-流程运行-控制服务-RuntimeService-1"><a href="#5-4-流程运行-控制服务-RuntimeService-1" class="headerlink" title="5-4 流程运行 控制服务-RuntimeService-1"></a>5-4 流程运行 控制服务-RuntimeService-1</h3><h3 id="5-5-流程运行-控制服务-RuntimeService-2"><a href="#5-5-流程运行-控制服务-RuntimeService-2" class="headerlink" title="5-5 流程运行 控制服务-RuntimeService-2"></a>5-5 流程运行 控制服务-RuntimeService-2</h3><h3 id="5-6-流程运行-控制服务-RuntimeService-3"><a href="#5-6-流程运行-控制服务-RuntimeService-3" class="headerlink" title="5-6 流程运行 控制服务-RuntimeService-3"></a>5-6 流程运行 控制服务-RuntimeService-3</h3><h3 id="5-7-任务管理服务-TaskService-1"><a href="#5-7-任务管理服务-TaskService-1" class="headerlink" title="5-7 任务管理服务-TaskService-1"></a>5-7 任务管理服务-TaskService-1</h3><h3 id="5-8-任务管理服务-TaskService-2"><a href="#5-8-任务管理服务-TaskService-2" class="headerlink" title="5-8 任务管理服务-TaskService-2"></a>5-8 任务管理服务-TaskService-2</h3><h3 id="5-9-任务管理服务-TaskService-3"><a href="#5-9-任务管理服务-TaskService-3" class="headerlink" title="5-9 任务管理服务-TaskService-3"></a>5-9 任务管理服务-TaskService-3</h3><h3 id="5-10-用户和用户组管理服务-IdentityService"><a href="#5-10-用户和用户组管理服务-IdentityService" class="headerlink" title="5-10 用户和用户组管理服务-IdentityService"></a>5-10 用户和用户组管理服务-IdentityService</h3><h3 id="5-11-表单管理服务-formeService"><a href="#5-11-表单管理服务-formeService" class="headerlink" title="5-11 表单管理服务- formeService"></a>5-11 表单管理服务- formeService</h3><h3 id="5-12-历史数据管理服务-HistoryService-1"><a href="#5-12-历史数据管理服务-HistoryService-1" class="headerlink" title="5-12 历史数据管理服务-HistoryService-1"></a>5-12 历史数据管理服务-HistoryService-1</h3><h3 id="5-13-历史数据管理服务-HistoryService-2"><a href="#5-13-历史数据管理服务-HistoryService-2" class="headerlink" title="5-13 历史数据管理服务-HistoryService-2"></a>5-13 历史数据管理服务-HistoryService-2</h3><h3 id="5-14-其它管理服务-OtherService"><a href="#5-14-其它管理服务-OtherService" class="headerlink" title="5-14 其它管理服务-OtherService"></a>5-14 其它管理服务-OtherService</h3><h3 id="5-15-异常策略"><a href="#5-15-异常策略" class="headerlink" title="5-15 异常策略"></a>5-15 异常策略</h3><h2 id="第6章-数据库设计与模型映射"><a href="#第6章-数据库设计与模型映射" class="headerlink" title="第6章 数据库设计与模型映射"></a>第6章 数据库设计与模型映射</h2><p>本章主要讲解数据库设计与模型映射，包括通用数据表、流程存储表、身份数据表、运行时流程数据表、历史流程表。我们通过流程执行观察数据库内容的变化体会流程引擎表结构之间的关系。</p><h3 id="6-1-通用数据表设计"><a href="#6-1-通用数据表设计" class="headerlink" title="6-1 通用数据表设计"></a>6-1 通用数据表设计</h3><h3 id="6-2-流程定义存储表设计"><a href="#6-2-流程定义存储表设计" class="headerlink" title="6-2 流程定义存储表设计"></a>6-2 流程定义存储表设计</h3><h3 id="6-3-身份数据表设计"><a href="#6-3-身份数据表设计" class="headerlink" title="6-3 身份数据表设计"></a>6-3 身份数据表设计</h3><h3 id="6-4-运行时流程数据表设计-1"><a href="#6-4-运行时流程数据表设计-1" class="headerlink" title="6-4 运行时流程数据表设计-1"></a>6-4 运行时流程数据表设计-1</h3><h3 id="6-5-运行时流程数据表设计-2"><a href="#6-5-运行时流程数据表设计-2" class="headerlink" title="6-5 运行时流程数据表设计-2"></a>6-5 运行时流程数据表设计-2</h3><h3 id="6-6-历史流程数据表设计-1"><a href="#6-6-历史流程数据表设计-1" class="headerlink" title="6-6 历史流程数据表设计-1"></a>6-6 历史流程数据表设计-1</h3><h3 id="6-7-历史流程数据表设计-2"><a href="#6-7-历史流程数据表设计-2" class="headerlink" title="6-7 历史流程数据表设计-2"></a>6-7 历史流程数据表设计-2</h3><h2 id="第7章-BPMN2-0规范"><a href="#第7章-BPMN2-0规范" class="headerlink" title="第7章 BPMN2.0规范"></a>第7章 BPMN2.0规范</h2><p>本章主要讲解BPMN2.0规范，这里主要介绍BPMN中规范的基本元素Activities(活动)、Gateways（网关）、Events（事件），事件一般按照位置分类为开始事、结束事件、中间事件、边界事件。活动包括原子任务和子流程,常用原子任务涉及到UserTask（用户任务）、ScriptTask(脚本任务)、ServiceTask（JavaDelegate定义实现），网关包…</p><h3 id="7-1-本章概述"><a href="#7-1-本章概述" class="headerlink" title="7-1 本章概述"></a>7-1 本章概述</h3><h3 id="7-2-BPMN2-0流程事件-事件分类"><a href="#7-2-BPMN2-0流程事件-事件分类" class="headerlink" title="7-2 BPMN2.0流程事件-事件分类"></a>7-2 BPMN2.0流程事件-事件分类</h3><h3 id="7-3-BPMN2-0流程事件-错误事件"><a href="#7-3-BPMN2-0流程事件-错误事件" class="headerlink" title="7-3 BPMN2.0流程事件-错误事件"></a>7-3 BPMN2.0流程事件-错误事件</h3><h3 id="7-4-BPMN2-0流程事件-信号消息事件"><a href="#7-4-BPMN2-0流程事件-信号消息事件" class="headerlink" title="7-4 BPMN2.0流程事件-信号消息事件"></a>7-4 BPMN2.0流程事件-信号消息事件</h3><h3 id="7-5-BPMN2-0流程任务-用户任务-1"><a href="#7-5-BPMN2-0流程任务-用户任务-1" class="headerlink" title="7-5 BPMN2.0流程任务-用户任务-1"></a>7-5 BPMN2.0流程任务-用户任务-1</h3><h3 id="7-6-BPMN2-0流程任务-用户任务-2"><a href="#7-6-BPMN2-0流程任务-用户任务-2" class="headerlink" title="7-6 BPMN2.0流程任务-用户任务-2"></a>7-6 BPMN2.0流程任务-用户任务-2</h3><h3 id="7-7-BPMN2-0脚本任务"><a href="#7-7-BPMN2-0脚本任务" class="headerlink" title="7-7 BPMN2.0脚本任务"></a>7-7 BPMN2.0脚本任务</h3><h3 id="7-8-BPMN2-0服务任务-1"><a href="#7-8-BPMN2-0服务任务-1" class="headerlink" title="7-8 BPMN2.0服务任务-1"></a>7-8 BPMN2.0服务任务-1</h3><h3 id="7-9-BPMN2-0服务任务-2"><a href="#7-9-BPMN2-0服务任务-2" class="headerlink" title="7-9 BPMN2.0服务任务-2"></a>7-9 BPMN2.0服务任务-2</h3><h3 id="7-10-BPMN2-0顺序流和网关-1"><a href="#7-10-BPMN2-0顺序流和网关-1" class="headerlink" title="7-10 BPMN2.0顺序流和网关-1"></a>7-10 BPMN2.0顺序流和网关-1</h3><h3 id="7-11-BPMN2-0顺序流和网关-2"><a href="#7-11-BPMN2-0顺序流和网关-2" class="headerlink" title="7-11 BPMN2.0顺序流和网关-2"></a>7-11 BPMN2.0顺序流和网关-2</h3><h3 id="7-12-BPMN2-0顺序流和网关-3"><a href="#7-12-BPMN2-0顺序流和网关-3" class="headerlink" title="7-12 BPMN2.0顺序流和网关-3"></a>7-12 BPMN2.0顺序流和网关-3</h3><h3 id="7-13-BPMN2-0子流程-1"><a href="#7-13-BPMN2-0子流程-1" class="headerlink" title="7-13 BPMN2.0子流程-1"></a>7-13 BPMN2.0子流程-1</h3><h3 id="7-14-BPMN2-0子流程-2"><a href="#7-14-BPMN2-0子流程-2" class="headerlink" title="7-14 BPMN2.0子流程-2"></a>7-14 BPMN2.0子流程-2</h3><h3 id="7-15-BPMN2-0子流程-3"><a href="#7-15-BPMN2-0子流程-3" class="headerlink" title="7-15 BPMN2.0子流程-3"></a>7-15 BPMN2.0子流程-3</h3><h3 id="7-16-BPMN2-0子流程-4"><a href="#7-16-BPMN2-0子流程-4" class="headerlink" title="7-16 BPMN2.0子流程-4"></a>7-16 BPMN2.0子流程-4</h3><h2 id="第8章-Activiti6-0集成Spring-Boot2-0"><a href="#第8章-Activiti6-0集成Spring-Boot2-0" class="headerlink" title="第8章 Activiti6.0集成Spring Boot2.0"></a>第8章 Activiti6.0集成Spring Boot2.0</h2><p>本章讲解集成Spring Boot2.0，主要包括Spring Boot2.0特性、启动依赖starter、 自动装配AutoConfigure、运维监控Acutator、微服务Stand-alone、 启动入口SpringBootApplication、外部化配置yaml、Profiles、日志logging、 web mvc、SQL数据库集成、单元测试。 …</p><h3 id="8-1-本章概述"><a href="#8-1-本章概述" class="headerlink" title="8-1 本章概述"></a>8-1 本章概述</h3><h3 id="8-2-Spring-Boot2-0入门实例-1"><a href="#8-2-Spring-Boot2-0入门实例-1" class="headerlink" title="8-2 Spring Boot2.0入门实例-1"></a>8-2 Spring Boot2.0入门实例-1</h3><h3 id="8-3-Spring-Boot2-0入门实例-2"><a href="#8-3-Spring-Boot2-0入门实例-2" class="headerlink" title="8-3 Spring Boot2.0入门实例-2"></a>8-3 Spring Boot2.0入门实例-2</h3><h3 id="8-4-Spring-Boot2-0启动依赖和自动装配-1"><a href="#8-4-Spring-Boot2-0启动依赖和自动装配-1" class="headerlink" title="8-4 Spring Boot2.0启动依赖和自动装配-1"></a>8-4 Spring Boot2.0启动依赖和自动装配-1</h3><h3 id="8-5-Spring-Boot2-0启动依赖和自动装配-2"><a href="#8-5-Spring-Boot2-0启动依赖和自动装配-2" class="headerlink" title="8-5 Spring Boot2.0启动依赖和自动装配-2"></a>8-5 Spring Boot2.0启动依赖和自动装配-2</h3><h3 id="8-6-Activiti6-0与Spring-Boot2-0集成-1"><a href="#8-6-Activiti6-0与Spring-Boot2-0集成-1" class="headerlink" title="8-6 Activiti6.0与Spring Boot2.0集成-1"></a>8-6 Activiti6.0与Spring Boot2.0集成-1</h3><h3 id="8-7-Activiti6-0与Spring-Boot2-0集成-2"><a href="#8-7-Activiti6-0与Spring-Boot2-0集成-2" class="headerlink" title="8-7 Activiti6.0与Spring Boot2.0集成-2"></a>8-7 Activiti6.0与Spring Boot2.0集成-2</h3><h2 id="第9章-工作流平台搭建"><a href="#第9章-工作流平台搭建" class="headerlink" title="第9章 工作流平台搭建"></a>第9章 工作流平台搭建</h2><p>本章主要讲解工作流平台搭建，包括需求分析、集成activiti-app、 集成activiti-admin、开发自定义动态表单、电商的业务流程分析建模、 流程文件部署及系统测试验证。</p><h3 id="9-1-工作流平台搭建-需求分析"><a href="#9-1-工作流平台搭建-需求分析" class="headerlink" title="9-1 工作流平台搭建-需求分析"></a>9-1 工作流平台搭建-需求分析</h3><h3 id="9-2-工作流平台搭建集成spring-boot1-1"><a href="#9-2-工作流平台搭建集成spring-boot1-1" class="headerlink" title="9-2 工作流平台搭建集成spring boot1-1"></a>9-2 工作流平台搭建集成spring boot1-1</h3><h3 id="9-3-工作流平台搭建集成spring-boot1-2"><a href="#9-3-工作流平台搭建集成spring-boot1-2" class="headerlink" title="9-3 工作流平台搭建集成spring boot1-2"></a>9-3 工作流平台搭建集成spring boot1-2</h3><h3 id="9-4-工作流平台搭建集成spring-boot1-3"><a href="#9-4-工作流平台搭建集成spring-boot1-3" class="headerlink" title="9-4 工作流平台搭建集成spring boot1-3"></a>9-4 工作流平台搭建集成spring boot1-3</h3><h3 id="9-5-工作流平台搭建集成spring-boot1-4"><a href="#9-5-工作流平台搭建集成spring-boot1-4" class="headerlink" title="9-5 工作流平台搭建集成spring boot1-4"></a>9-5 工作流平台搭建集成spring boot1-4</h3><h3 id="9-6-工作流平台升级spring-boot2-1"><a href="#9-6-工作流平台升级spring-boot2-1" class="headerlink" title="9-6 工作流平台升级spring boot2-1"></a>9-6 工作流平台升级spring boot2-1</h3><h3 id="9-7-工作流平台升级spring-boot2-2"><a href="#9-7-工作流平台升级spring-boot2-2" class="headerlink" title="9-7 工作流平台升级spring boot2-2"></a>9-7 工作流平台升级spring boot2-2</h3><h3 id="9-8-工作流平台升级spring-boot2-3"><a href="#9-8-工作流平台升级spring-boot2-3" class="headerlink" title="9-8 工作流平台升级spring boot2-3"></a>9-8 工作流平台升级spring boot2-3</h3><h3 id="9-9-工作流平台升级spring-boot2-4"><a href="#9-9-工作流平台升级spring-boot2-4" class="headerlink" title="9-9 工作流平台升级spring boot2-4"></a>9-9 工作流平台升级spring boot2-4</h3><h3 id="9-10-工作流平台搭建-workflow-1"><a href="#9-10-工作流平台搭建-workflow-1" class="headerlink" title="9-10 工作流平台搭建-workflow-1"></a>9-10 工作流平台搭建-workflow-1</h3><h3 id="9-11-工作流平台搭建-workflow-2"><a href="#9-11-工作流平台搭建-workflow-2" class="headerlink" title="9-11 工作流平台搭建-workflow-2"></a>9-11 工作流平台搭建-workflow-2</h3><h3 id="9-12-工作流平台搭建-购物流程-1"><a href="#9-12-工作流平台搭建-购物流程-1" class="headerlink" title="9-12 工作流平台搭建-购物流程-1"></a>9-12 工作流平台搭建-购物流程-1</h3><h3 id="9-13-工作流平台搭建-购物流程-2"><a href="#9-13-工作流平台搭建-购物流程-2" class="headerlink" title="9-13 工作流平台搭建-购物流程-2"></a>9-13 工作流平台搭建-购物流程-2</h3><h3 id="9-14-工作流平台搭建-购物流程-3"><a href="#9-14-工作流平台搭建-购物流程-3" class="headerlink" title="9-14 工作流平台搭建-购物流程-3"></a>9-14 工作流平台搭建-购物流程-3</h3><h2 id="第10章-工作流平台部署和运维"><a href="#第10章-工作流平台部署和运维" class="headerlink" title="第10章 工作流平台部署和运维"></a>第10章 工作流平台部署和运维</h2><p>本章主要讲解工作流平台部署和运维，包括云上部署系统、工作流平台运维、 系统横向扩容、那些踩过的坑。</p><h3 id="10-1-工作流平台部署-1"><a href="#10-1-工作流平台部署-1" class="headerlink" title="10-1 工作流平台部署-1"></a>10-1 工作流平台部署-1</h3><h3 id="10-2-工作流平台部署-2"><a href="#10-2-工作流平台部署-2" class="headerlink" title="10-2 工作流平台部署-2"></a>10-2 工作流平台部署-2</h3><h2 id="第11章-课程总结"><a href="#第11章-课程总结" class="headerlink" title="第11章 课程总结"></a>第11章 课程总结</h2><p>本章和大家一起总结回顾课程重难点，帮助大家更好的加强与巩固本课程所学知识。</p><h3 id="11-1-课程总结"><a href="#11-1-课程总结" class="headerlink" title="11-1 课程总结"></a>11-1 课程总结</h3><p><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Activiti6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 系统 BlueLake 主题安装与设置</title>
    <link href="/2019/01/09/hexo-blue-lake/"/>
    <url>/2019/01/09/hexo-blue-lake/</url>
    
    <content type="html"><![CDATA[<p>文章目录</p><ul><li><a href="#%E5%AE%89%E8%A3%85%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96">安装与初始化</a></li><li><a href="#%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%8A%A0%E4%B8%8A%E5%9B%BE%E7%89%87">给自己的Hexo博客加上图片</a></li><li><a href="#Hexo%E4%B8%AD%E6%8F%90%E4%BE%9B%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%8A%9F%E8%83%BD">Hexo中提供文件下载功能</a></li><li><a href="#%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2">添加本地搜索</a></li><li><a href="#%E8%AE%BE%E7%BD%AE%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87">设置阅读全文</a></li><li><a href="#%E8%A7%A3%E5%86%B3busuanzi%E6%97%A0%E6%95%88%E7%9A%84%E6%96%B9%E6%B3%95">解决busuanzi无效的方法</a></li></ul><p><escape><span id="more"></span></escape></p><p>&nbsp;</p><h3 id="安装与初始化"><a href="#安装与初始化" class="headerlink" title="安装与初始化"></a>安装与初始化</h3><ul><li><p>安装hexo：<br>Windows</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install hexo-cli -g</span> <br></code></pre></td></tr></table></figure><p>macOS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo npm install hexo-cli -g</span> <br></code></pre></td></tr></table></figure></li><li><p>创建网站目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> blog</span><br></code></pre></td></tr></table></figure></li><li><p>通过blog目录创建站点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo init blog</span> <br></code></pre></td></tr></table></figure></li><li><p>安装过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">admindeMacBook<span class="hljs-operator">-</span>Pro:<span class="hljs-operator">~</span> admin hexo init blog<br>INFO  Cloning hexo<span class="hljs-operator">-</span>starter <span class="hljs-keyword">to</span> <span class="hljs-operator">~</span><span class="hljs-operator">/</span>blog<br>hexo<span class="hljs-operator">-</span>site<span class="hljs-variable">@0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> <span class="hljs-operator">/</span>Users<span class="hljs-operator">/</span>admin<span class="hljs-operator">/</span>blog<br>... 部分省略<br>      ├── <span class="hljs-keyword">range</span><span class="hljs-operator">-</span>parser<span class="hljs-variable">@1</span><span class="hljs-number">.2</span><span class="hljs-number">.0</span> <br>      └── statuses<span class="hljs-variable">@1</span><span class="hljs-number">.3</span><span class="hljs-number">.0</span> <br><br>INFO  <span class="hljs-keyword">Start</span> blogging <span class="hljs-keyword">with</span> Hexo<span class="hljs-operator">!</span><br></code></pre></td></tr></table></figure></li><li><p>安装完成后,进入blog站点目录,安装一下npm插件支持(<em>如果是其他电脑克隆了这个项目，需要执行下面的安装命令</em>)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> blog</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install</span><br></code></pre></td></tr></table></figure></li><li><p>启动站点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo server</span><br>INFO  Start processing<br>INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.<br></code></pre></td></tr></table></figure></li><li><p>查看站点：<br>在浏览器中查看<a href="http://localhost:4000/">http://localhost:4000/</a></p></li><li><p>配置GitHub<br>在blog目录,打开_config.yml</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>vim _config.yml<br></code></pre></td></tr></table></figure></li><li><p>修改配置文件_config.yml中deploy下的内容</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-variable">&amp;nbsp</span><span class="hljs-punctuation">;</span><br><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//github.com/CoderDream/coderdream.github.io.git</span><br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure></li><li><p>Github部署配置参数详解</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">deploy:</span>  表示部署设置<br><span class="hljs-symbol">type:</span>    部署类型,支持git,heroku<br><span class="hljs-symbol">repo:</span>    部署位置 git仓库项目的位置<br><span class="hljs-symbol">branch:</span>  部署到Github的分支名称<br><span class="hljs-symbol">message:</span> 自定义提交信息<br></code></pre></td></tr></table></figure></li><li><p>设置语言</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN<br></code></pre></td></tr></table></figure></li><li><p>安装部署插件<br>配置修改完成后,需要安装部署插件:<br>安装 hexo-deployer-git 插件: 在blog目录执行以下命令即可</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></li><li><p>插件安装完成后,执行项目清理和静态网页生成</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo clean<br><span class="hljs-variable">$ </span>hexo genarate<br></code></pre></td></tr></table></figure></li><li><p>安装完成后进行部署</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo deploy<br></code></pre></td></tr></table></figure></li><li><p>一键发布</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean; hexo <span class="hljs-keyword">generate</span>; hexo deploy<br></code></pre></td></tr></table></figure></li><li><p>查看结果<br>然后到你的Github上项目的主页,看看master分支上的代码更新时间</p></li></ul><h3 id="给自己的Hexo博客加上图片"><a href="#给自己的Hexo博客加上图片" class="headerlink" title="给自己的Hexo博客加上图片"></a>给自己的Hexo博客加上图片</h3><ul><li>首先把blog（hexo）目录下的_config.yml里的psot_asset_folder:设置为true</li><li>在blog（hexo）目录下执行:<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">npm install hexo-asset-<span class="hljs-built_in">image</span> --<span class="hljs-built_in">save</span><br></code></pre></td></tr></table></figure></li><li>在blog（hexo）目录下Git Bash Here，运行hexo n “博客名”来生成md博客时，会在_post目录下看到一个与博客同名的文件夹。</li><li>将想要上传的图片先扔到文件夹下，然后在博客中使用markdown的格式引入图片：<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[你想要输入的替代文字]</span>(xxxx/图片名.jpg)<br></code></pre></td></tr></table></figure></li></ul><h3 id="Hexo中提供文件下载功能"><a href="#Hexo中提供文件下载功能" class="headerlink" title="Hexo中提供文件下载功能"></a>Hexo中提供文件下载功能</h3><ul><li>在source目录下新建dounload文件夹，将需要上传的文件xx.xls复制到该目录。</li><li>在_posts博文中，插入：<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[点击下载]</span>(/download/xx.xls&quot;)<br></code></pre></td></tr></table></figure></li></ul><h3 id="添加本地搜索"><a href="#添加本地搜索" class="headerlink" title="添加本地搜索"></a>添加本地搜索</h3><p>默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件hexo-generator-json-content来创建JSON数据文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bath">$ npm install hexo-generator-json-content@2.2.0 --save<br></code></pre></td></tr></table></figure><ul><li><p>然后在根_config.yml添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jsonContent:</span><br>  <span class="hljs-attr">meta:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">pages:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">posts:</span><br>    <span class="hljs-attr">title:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">date:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">raw:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">content:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">slug:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">updated:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">comments:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">link:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">permalink:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">excerpt:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">categories:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">tags:</span> <span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure></li><li><p>最后在主题_config.yml添加配置(themes&#x2F;BlueLake&#x2F;_config.yml)：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">local_search:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="设置阅读全文"><a href="#设置阅读全文" class="headerlink" title="设置阅读全文"></a>设置阅读全文</h3><ul><li>您可以在文章的 front-matter 中添加 description，并提供文章摘录，或在文章中使用下面的代码手动进行截断（Hexo推荐的方式）。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">escape</span>&gt;</span><span class="hljs-comment">&lt;!-- more --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">escape</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="解决busuanzi无效的方法"><a href="#解决busuanzi无效的方法" class="headerlink" title="解决busuanzi无效的方法"></a>解决busuanzi无效的方法</h3><ul><li>使用nodepad++的【搜索】-&gt;【查找】-&gt;【文件查找】的【在文件中替换】：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dn-lbstatics<span class="hljs-selector-class">.qbox</span><span class="hljs-selector-class">.me</span> 替换为 busuanzi<span class="hljs-selector-class">.ibruce</span>.info<br></code></pre></td></tr></table></figure></li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol><li><a href="https://blog.csdn.net/dingding_12345/article/details/61414438">Hexo 创建“关于我”界面</a></li><li><a href="https://blog.csdn.net/qq_40265501/article/details/80019774">给自己的Hexo博客加上图片</a></li><li><a href="https://jingyan.baidu.com/article/fec4bce296d834f2608d8b5b.html">Hexo中提供文件下载功能</a></li><li><a href="https://github.com/chaooo/hexo-theme-BlueLake">BlueLake官网</a></li><li><a href="https://pagespeed.v2ex.com/t/495380">解决 busuanzi 无效的方法（hexo-theme-next）</a></li><li><a href="https://blog.csdn.net/qq_26718271/article/details/81512216">bash devtty No such device or address</a></li></ol><p><escape><!-- more --></escape></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>BlueLake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第2周</title>
    <link href="/2019/01/09/Year2019Week02/"/>
    <url>/2019/01/09/Year2019Week02/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第2周（2019-01-07-2019-01-13）"><a href="#2019年第2周（2019-01-07-2019-01-13）" class="headerlink" title="2019年第2周（2019&#x2F;01&#x2F;07~2019&#x2F;01&#x2F;13）"></a>2019年第2周（2019&#x2F;01&#x2F;07~2019&#x2F;01&#x2F;13）</h2><ol><li><a href="https://www.cnblogs.com/jpfss/p/8037838.html">eclipse的.properties文件中文显示问题</a></li><li><a href="https://www.cnblogs.com/goldenVip/p/6278377.html">关于项目报错Dynamic Web Module 3.0 requires Java 1.6 or newer 的解决方法</a></li><li><a href="http://www.cnblogs.com/xxoome/p/10030724.html">Windows下IDEA的terminal配置bash命令</a></li><li><a href="https://www.cnblogs.com/hdwang/p/6875416.html">eclipse&#x2F;intellij idea 查看java源码和注释</a></li><li><a href="https://blog.csdn.net/u013823429/article/details/66982245">Eclipse查看Servlet源码</a></li><li><a href="https://blog.csdn.net/chwshuang/article/details/52350377">Hexo在Github中搭建博客系统(1)Hexo安装</a></li><li><a href="https://blog.csdn.net/chwshuang/article/details/52350387">Hexo在Github中搭建博客系统(2)Hexo一键发布文章到Github</a></li><li><a href="https://blog.csdn.net/chwshuang/article/details/52350463">Hexo在Github中搭建博客系统(3)Hexo安装主题</a></li><li><a href="https://blog.csdn.net/chwshuang/article/details/52350518">Hexo在Github中搭建博客系统(4)建菜单写文章</a></li><li><a href="https://blog.csdn.net/chwshuang/article/details/52350551">Hexo在Github中搭建博客系统(5)Markdown语法</a></li><li><a href="https://blog.csdn.net/chwshuang/article/details/52350559">Hexo在Github中搭建博客系统(6)异常处理</a></li><li><a href="https://blog.csdn.net/chwshuang/article/details/52350589">Hexo在Github中搭建博客系统(7)万网域名解析到Github Pages</a></li><li><a href="https://blog.csdn.net/qq_38663729/article/details/80430325">IDEA Cannot find declaration to go to问题的解决方法</a></li><li><a href="http://doc.okbase.net/fengshizty/archive/126397.html">Maven搭建SpringMVC+Mybatis项目详解</a></li><li><a href="https://blog.csdn.net/qq_40265501/article/details/80019774">给自己的Hexo博客加上图片</a></li><li><a href="https://jingyan.baidu.com/article/fec4bce296d834f2608d8b5b.html">Hexo中提供文件下载功能</a></li><li><a href="https://www.jianshu.com/p/e17711e44e00">Hexo使用攻略-添加分类及标签</a></li><li><a href="https://chaoo.oschina.io/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE.html">BlueLake博客主题的详细配置</a></li><li><a href="/2019/01/09/Hexo/">Hexo 系统 BlueLake 主题安装与设置</a></li><li><a href="https://www.cnblogs.com/lighten/tag/activiti%E7%9B%B8%E5%85%B3/">Activiti系列 - 5.21</a></li><li><a href="https://www.cnbeta.com/articles/tech/806785.htm">还指望通过锻炼减肥？研究告诉你这种想法多不现实</a></li><li><a href="https://blog.csdn.net/gang544043963/article/details/83934015">程序员如何精确评估开发时间？</a></li><li><a href="https://blog.csdn.net/wei83523408/article/details/56036332">Windows下git中sh.exe中文显示乱码问题解决</a></li><li><a href="https://www.cnblogs.com/kevingrace/p/5690241.html">Git忽略提交规则 - .gitignore配置运维总结</a></li></ol><p><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
      <tag>Maven</tag>
      
      <tag>GitHub</tag>
      
      <tag>IDEA</tag>
      
      <tag>Hexo</tag>
      
      <tag>Mybatis</tag>
      
      <tag>WinPE</tag>
      
      <tag>gitignore</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS</title>
    <link href="/2019/01/09/iOS/"/>
    <url>/2019/01/09/iOS/</url>
    
    <content type="html"><![CDATA[<p>&nbsp;</p><h1 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h1><h2 id="SwiftUI"><a href="#SwiftUI" class="headerlink" title="SwiftUI"></a>SwiftUI</h2><ol><li><a href="https://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&mid=2650402703&idx=1&sn=0942415a7c92ab2465a9acb58b15b808&chksm=83952797b4e2ae812bd6159b49c069104e8db54db40435cb3343e06ff96f043390d8057cd8d6&scene=21#wechat_redirect">新晋网红SwiftUI——淘宝带你初体验</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&mid=2650402891&idx=1&sn=804f271d6794a0ec7b5eeaea585f5e8e&chksm=83953853b4e2b14563dd6cefb1362a457b96fb591c64bd6c94cb38d0595d2233daa96ba1b876&scene=21#wechat_redirect">系列文章深度解读|SwiftUI 背后那些事儿</a></li><li><a href="https://mp.weixin.qq.com/s/QgDSuTFjwFlXzhksfgmkIQ">历时五天用 SwiftUI 做了一款 APP，阿里工程师如何做的？</a></li></ol><h2 id="Swift-1"><a href="#Swift-1" class="headerlink" title="Swift"></a>Swift</h2><ol><li><a href="https://www.jianshu.com/p/3a88ab9ed7d6">Swift编程思想（一） —— 函数式编程简介（一）</a></li><li><a href="https://www.jianshu.com/p/140de3e73ad8">iOS-卡顿监测-FPS监测(附详细代码及原理讲解)</a></li><li><a href="http://www.cocoachina.com/swift/20161121/18144.html">从 Swift 的面向协议编程说开去</a></li><li><a href="https://blog.csdn.net/felicity294250051/article/details/79026969">Swift 【基于 Swift 面向协议编程】</a></li><li><a href="https://blog.csdn.net/itchosen/article/details/77483601">深入理解Swift 面向协议编程</a></li><li><a href="https://juejin.im/post/5ddb580451882573520fb182">Swift 5.1 极简参考手册</a></li></ol><h2 id="iOS-开发"><a href="#iOS-开发" class="headerlink" title="iOS 开发"></a>iOS 开发</h2><ol><li><a href="https://www.cnblogs.com/wangkejia/p/7891374.html">iOS-OC、Swift 混编之桥接文件</a></li><li><a href="https://www.jianshu.com/p/29257388b8cb">iOS 发送HTTP请求报错</a></li><li><a href="https://forums.developer.apple.com/thread/111334">Updated to iOS 12.1&#x2F;Xcode 10.1 and getting a flood of “Signal strength query returned error</a></li><li><a href="https://stackoverflow.com/questions/37800790/hide-strange-unwanted-xcode-logs">Hide strange unwanted Xcode logs</a></li><li><a href="https://www.jianshu.com/p/4f025476701a">Swift 3 杂谈</a></li><li><a href="https://juejin.im/post/5c0f95f4e51d4570f90cde85">iOS操作系统– App启动流程分析与优化</a></li><li><a href="https://www.jianshu.com/p/db504d233176">使用Xcode10 Instruments检测内存泄露</a></li><li><a href="https://www.jianshu.com/p/27db762409ca">iOS面试进阶篇(五)</a></li><li><a href="https://www.jianshu.com/p/55b9612080d5">iOS面试进阶篇(八)-高级面试题</a></li><li><a href="https://www.jianshu.com/p/de6ebffdef86">移动iOS架构起航</a></li><li><a href="https://www.cnblogs.com/lulushen/p/9640037.html">真机调试包,解决xcode跑不了高版本iOS系统问题，及Deployment Target不显示高版本系统的问题</a></li></ol><h2 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h2><ol><li><a href="https://www.jianshu.com/p/10f32174fb2d">Swift —UIImageView的使用(使用app内置图片和网络图片)</a></li></ol><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><ol><li><a href="https://www.2cto.com/kf/201604/501527.html">iOS笔记UI–使用storyboard添加约束</a></li><li><a href="https://blog.csdn.net/pucker/article/details/49925335">iOS 9 Auto Layout界面自动布局系列6-自适应布局</a></li></ol><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ol><li><a href="https://www.cnblogs.com/HQBBOX/p/6587058.html">Swift FMDB的使用</a></li><li><a href="https://blog.csdn.net/loveiosolovehua/article/details/78680256">FMDB 在Swift4.0中使用</a></li><li><a href="https://blog.csdn.net/lidongxuedecsdn/article/details/79617845">FMDB的使用（Swift）</a></li><li><a href="https://www.jianshu.com/p/0bfa64b2ecc1">Swift(FMDB的简单使用)</a></li><li><a href="https://cocoapods.org/pods/FMDB">官方文档</a></li><li><a href="https://www.cnblogs.com/kklldog/p/swift-fmdb.html">Swift使用FMDB操作SQLite</a></li></ol><h2 id="UITableView"><a href="#UITableView" class="headerlink" title="UITableView"></a>UITableView</h2><ol><li><a href="https://www.jianshu.com/p/bb65e97a2e8e">Swift（二十一）UITableView</a></li><li><a href="https://www.cnblogs.com/Xebdison/p/5500008.html">新手教程之使用Xib自定义UITableViewCell</a></li><li><a href="https://www.jianshu.com/p/4c39be207923">iOS AutoLayout进阶(五)UITableViewCell自动高度</a></li><li><a href="https://www.jmwebseo.cn/220.html">UITableViewController 的 numberOfSections 不显示数据</a></li></ol><h2 id="UserNotifications"><a href="#UserNotifications" class="headerlink" title="UserNotifications"></a>UserNotifications</h2><ol><li><a href="http://www.hangge.com/blog/cache/detail_1845.html">Swift - UserNotifications框架使用详解1（基本介绍，权限的申请与判断）</a></li><li><a href="http://www.hangge.com/blog/cache/detail_1851.html">Swift - UserNotifications框架使用详解2（发送本地通知）</a></li><li><a href="http://www.hangge.com/blog/cache/detail_1850.html">Swift - UserNotifications框架使用详解3（推送远程通知）</a></li><li><a href="https://github.com/CoderDream/iOS_Best_Practice/tree/7d2f554eedc54b6cdec6b927cabdf57addbc5156/Notification/UserNotificationsDemo01">UserNotificationsDemo - GitHub</a></li><li><a href="http://www.hangge.com/blog/cache/detail_2033.html">Swift - 第三方透明指示器SwiftNotice使用详解</a></li></ol><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><ol><li><a href="https://www.cnblogs.com/LL--Blog/p/5701457.html">Swift 异常捕获try catch的使用</a></li><li><a href="https://www.cnblogs.com/QianChia/p/6379191.html">iOS - UnitTests 单元测试</a>  </li><li><a href="https://github.com/mflint/SwiftMock">SwiftMock</a>  </li><li><a href="https://github.com/leancloud/LeanStorageDemo-iOS">LeanStorageDemo-iOS</a>  </li><li><a href="https://blog.csdn.net/wds1181977/article/details/52056307">LeanCloud从入门到放弃</a>  </li><li><a href="https://blog.csdn.net/weixin_41735943/article/details/81270100">Swift4–解析json文件</a>  </li><li><a href="https://blog.csdn.net/weixin_41735943/article/details/82622468">Swift4–使用URLSession进行网络请求</a>    </li><li><a href="https://www.jianshu.com/p/f13fc6aed467">使用swift给objc项目做单元测试</a>   </li><li><a href="https://www.jianshu.com/p/c54f0cc08c20">iOS单元测试和UI测试</a></li></ol><h2 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h2><ol><li><a href="http://www.cocoachina.com/bbs/read.php?tid=233859">Xcode6上控件的约束关系怎么删除?</a></li><li><a href="https://juejin.im/post/5ccea148f265da038e54bbf2">Swift 代码格式化</a></li></ol><h1 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h1><h2 id="今日头条"><a href="#今日头条" class="headerlink" title="今日头条"></a>今日头条</h2><ol><li><a href="https://github.com/hrscy/TodayNews">Swift 4 - 模仿今日头条</a></li><li><a href="https://github.com/hutmobile/iOS_YangMeng_TodayNews">iOS_YangMeng_TodayNews(Swift4.2)</a></li><li><a href="https://www.jianshu.com/p/c263abb005d6">高仿漫画类项目-Swift5版本</a></li></ol><p>&nbsp;</p><h1 id="游戏相关"><a href="#游戏相关" class="headerlink" title="游戏相关"></a>游戏相关</h1><h2 id="SpriteKit"><a href="#SpriteKit" class="headerlink" title="SpriteKit"></a>SpriteKit</h2><ol><li><a href="https://juejin.im/entry/585b7cc18d6d810065d2905e">如何在 Swift 3 中用 SpriteKit 框架编写游戏 (Part 1)</a></li><li><a href="https://juejin.im/entry/5860d2e4128fe1006dfbb962">如何在 Swift 3 中用 SpriteKit 框架编写游戏 (Part 2)</a></li><li><a href="https://juejin.im/entry/586d359a128fe1006661e361">如何在 Swift 3 中用 SpriteKit 框架编写游戏 (Part 3)</a></li><li><a href="https://juejin.im/post/5bddcbd151882516e46b0025">暑假花了十九天做的 PFollow</a></li><li><a href="https://juejin.im/entry/59d37a645188257a8908abbf">SpriteKit（概述）</a></li><li><a href="https://www.jianshu.com/p/370ab95c0815">SpriteKit框架详细解析（一） —— 基本概览（一）</a></li><li><a href="https://www.jianshu.com/p/c91a426d4441">SpriteKit框架详细解析（二） —— 一个简单的动画实例（一）</a></li><li><a href="https://www.jianshu.com/p/20dd929453ec">SpriteKit框架详细解析（三） —— 创建一个简单的2D游戏（一）</a></li><li><a href="https://www.jianshu.com/p/33f28911db17">SpriteKit框架详细解析（四） —— 创建一个简单的2D游戏（二）</a></li><li><a href="https://www.jianshu.com/p/b77a9d2071f5">SpriteKit框架详细解析（五） —— 基于SpriteKit的游戏编程的三角函数（一）</a></li><li><a href="https://www.jianshu.com/p/663107955f39">SpriteKit框架详细解析（六） —— 基于SpriteKit的游戏编程的三角函数（二）</a></li><li><a href="https://www.jianshu.com/p/2686a0df4c2e">教你用 SpriteKit 做一个自己的”割绳子“游戏（Swift 3）</a></li><li><a href="https://www.jianshu.com/p/2efc153200c9">SpriteKit框架之最全动作介绍 没有之一</a></li><li><a href="https://www.jianshu.com/p/ea5af90ebd32">SpriteKit实现经典英雄打怪小游戏</a></li><li><a href="https://www.jianshu.com/p/e9de9f428c39">Spritekit 小游戏- 熊猫快跑之运气与实力并存</a></li><li><a href="https://www.jianshu.com/p/2f01c48902d1">SpriteKit学习笔记(子节点随父节点移动)</a></li><li><a href="https://www.jianshu.com/p/d18930488df2">SpriteKit框架之鸿蒙初辟</a></li><li><a href="https://juejin.im/post/5ae2bb99f265da0b9d77f0e5">(iOS)SpriteKit 制作简易手游虚拟摇杆(UIKit通用) Double零组件系列</a></li><li><a href="https://www.raywenderlich.com/71-spritekit-tutorial-for-beginners">SpriteKit Tutorial for Beginners</a></li><li><a href="https://juejin.im/entry/578ef0bb8ac2470060b3da76">(翻译)用 Swift 创建有 AI(人工智能) 的 Tic Tac Toe 游戏</a></li><li><a href="https://juejin.im/entry/578486dd7db2a20063f8284b">(原文)用 Swift 以及 AI 创建你自己的 iOS 游戏</a></li><li><a href="https://juejin.im/post/599aaf746fb9a02477072380">巧用 ARKit 和 SpriteKit 从零开始做 AR 游戏</a></li><li><a href="https://blog.pusher.com/building-ar-game-arkit-spritekit">Building an AR game with ARKit and SpriteKit</a></li><li><a href="https://juejin.im/entry/573e6894f38c8400676f9765">通过 SpriteKit 内置工具粒子发射器实现酷炫的可定制装载动画</a></li><li><a href="https://www.jianshu.com/p/a38dd2057860">SpriteKit学习笔记（一）</a></li><li><a href="https://www.jianshu.com/p/f71cdebfc4af">SpriteKit学习笔记（二）</a></li><li><a href="https://www.jianshu.com/p/5a2274fe46b4">SpriteKit 苹果官方文档翻译（Swift）：1</a></li><li><a href="https://www.jianshu.com/p/304e84a12b91">iOS SpriteKit 小游戏开发实例 - Flappy Bird</a></li><li><a href="https://blog.csdn.net/qq_30932479/article/details/88527720">Swift SpriteKit写一个简单的打飞碟小游戏（一）</a></li><li><a href="https://blog.csdn.net/qq_30932479/article/details/88535779">Swift SpriteKit写一个简单的打飞碟小游戏（二）</a></li><li><a href="https://blog.csdn.net/qq_30932479/article/details/88542409">Swift SpriteKit写一个简单的打飞碟小游戏（三）</a></li></ol><h2 id="SceneKit"><a href="#SceneKit" class="headerlink" title="SceneKit"></a>SceneKit</h2><ul><li><a href="https://www.jianshu.com/p/44a4f842cf87">1. SceneKit框架详细解析（一） —— 基本概览（一）</a></li><li><a href="https://www.jianshu.com/p/840f30b64146">2. SceneKit框架详细解析（二） —— 基于SceneKit的简单游戏示例的实现（一）</a></li><li><a href="https://www.jianshu.com/p/f79bc36a6809">3. SceneKit框架详细解析（三） —— 基于SceneKit的简单游戏示例的实现（二）</a></li><li><a href="https://www.jianshu.com/p/88e1b173c1ba">4. SceneKit框架详细解析（四） —— 基于SceneKit的简单游戏示例的实现（三）</a></li><li><a href="https://www.jianshu.com/p/5dc9953c5f22">5. SceneKit框架详细解析（五） —— 基于SceneKit的简单游戏示例的实现（四）</a></li><li><a href="https://www.jianshu.com/p/b14a78ebd6ad">6. SceneKit框架详细解析（六） —— 基于SceneKit的简单游戏示例的实现（五）</a></li><li><a href="https://www.jianshu.com/p/79bb282a9b3a">7. SceneKit框架详细解析（七） —— 基于SceneKit的简单游戏示例的实现（六）</a></li></ul><h2 id="LeanCloud"><a href="#LeanCloud" class="headerlink" title="LeanCloud"></a>LeanCloud</h2><ol><li><a href="https://leancloud.cn/docs/leanstorage_guide-swift.html">数据存储开发指南 · Swift</a></li></ol><h2 id="Alamofire"><a href="#Alamofire" class="headerlink" title="Alamofire"></a>Alamofire</h2><ul><li><a href="https://www.raywenderlich.com/35-alamofire-tutorial-getting-started">Alamofire Tutorial: Getting Started</a></li><li><a href="https://www.jianshu.com/p/63359d481d70">Alamofire 教程：入门指南</a></li><li><a href="https://blog.csdn.net/SunFlowerInRain/article/details/76207022">Alamofire的使用教程</a></li><li><a href="https://github.com/LINDreaming/DailyTools">Alamofire的使用教程-项目地址</a></li><li><a href="https://www.jianshu.com/p/42aa9b5b70a3">超简单 Alamofire4.1 的详细使用步骤</a></li><li><a href="https://www.cnblogs.com/xiguapijiamuguanaicha/p/5672543.html">Alamofire 的使用</a></li><li><a href="http://www.cocoachina.com/ios/20141202/10390.html">Alamofire网络库基础教程：使用 Alamofire 轻松实现 Swift 网络请求</a>  </li><li><a href="http://www.cocoachina.com/ios/20141203/10514.html">Alamofire网络库进阶教程</a></li><li><a href="https://blog.csdn.net/hbblzjy/article/details/53392135">Swift基础之使用Alamofire库进行网络请求和断点下载</a></li></ul><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><ol><li><a href="https://www.jianshu.com/p/83b99f34d67c">对于 iOS 开发，人工智能意味着什么？</a></li><li><a href="https://zhuanlan.zhihu.com/machine-learning-book">写给大家看的机器学习书</a></li><li><a href="https://www.jianshu.com/p/7de4af5ba4c7">iOS机器学习初探</a></li><li><a href="https://www.jianshu.com/p/0cbf4d17ac88">iOS-调戏CoreML-这是花瓶？</a></li><li><a href="https://www.jianshu.com/p/f7e19bff84a6">iOS中的人工智能（Core ML）</a></li><li><a href="http://www.cocoachina.com/ios/20170621/19592.html">iOS中的机器学习</a></li><li><a href="http://www.cocoachina.com/programmer/20170105/18510.html">普通程序员如何转向AI方向</a></li><li><a href="http://www.sohu.com/a/164569342_505915">我花了四个晚上，拿到了吴恩达Deeplearning.ai深度学习课程证书</a></li></ol><p>&nbsp;</p><h1 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h1><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><ol><li><a href="https://blog.csdn.net/lovechris00/article/details/79935134">macOS 设置文件默认打开方式</a></li><li><a href="https://jingyan.baidu.com/article/f3ad7d0f55154309c3345bdd.html">Mac系统如何编辑hosts文件</a></li><li><a href="http://www.kejunfeng.com/2018/07/12/webstorm.html">WebStorm2018.3 中文汉化最新破解激活版 Mac&#x2F;Win</a></li><li><a href="https://blog.csdn.net/wang19891106/article/details/51127133">NodeJS入门–环境搭建 IntelliJ IDEA</a></li><li><a href="https://www.jianshu.com/p/d7d16c42aed1">解决最新版 Cocoapods repo安装慢更新慢的问题</a></li><li><a href="https://www.jianshu.com/p/8f812d71e659">iPhone has denied the launch request</a></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li><a href="https://www.cnblogs.com/provedl/p/9830061.html">使用Hbuilder将自己app发布到App Store（一）</a></li><li><a href="https://www.cnblogs.com/jukaiit/p/9755857.html">libstdc++适配Xcode10与iOS12</a></li><li><a href="https://www.cnblogs.com/jingxin1992/p/9805822.html">iOS根据图片url获取尺寸</a></li><li><a href="https://www.cnblogs.com/KiVen2015/p/9721887.html">《看书总结》</a></li><li><a href="https://www.cnblogs.com/zhanggui/p/9686155.html">关于Xcode10的那些事</a></li><li><a href="https://www.cnblogs.com/alan12138/p/9619336.html">iOS 类似微博或朋友圈的信息流</a></li><li><a href="https://www.cnblogs.com/jordanYang/archive/2016/04.html">Swift基础语法</a></li><li><a href="https://blog.csdn.net/kmyhy/article/details/68488986">用 SpriteKit 和 Swift3 创建交互式儿童读物</a></li><li><a href="https://store.raywenderlich.com/products/2d-apple-games-by-tutorials-source-code">2D Apple Games by Tutorials Source Code-Swift4</a></li><li><a href="https://blog.csdn.net/kmyhy/column/info/14060">iOS开发问与答系列</a></li><li><a href="https://blog.csdn.net/kmyhy/column/info/13913">iOS动画专栏</a></li><li><a href="https://www.raywenderlich.com/library?domain_ids%5B%5D=1&category_ids%5B%5D=161">raywenderlich Game专栏</a></li><li><a href="https://juejin.im/post/5ca170ee6fb9a05e505c4940">CocoaPods使用小结</a></li><li><a href="https://mp.weixin.qq.com/s/eXzojM0lCaaCW4JxBaU6BQ">敏捷开发与动态更新在支付宝 App 内的实践</a></li><li><a href="https://juejin.im/post/5c8ca84ce51d456f43189dbd">LLDB 知多少</a></li><li><a href="https://github.com/insidegui/WWDC">WWDC: 非官方的WWDC macOS客户端</a></li></ol><p>&nbsp;</p><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><ol><li><a href="http://www.cocoachina.com/ios/20190109/26077.html">iOS使用fastlane自动化打包</a></li><li><a href="https://juejin.im/post/5c4141a2e51d455210541b01">如何阅读苹果开发文档</a></li><li><a href="https://www.jianshu.com/p/8a13cb1dc07f">iOS 客户端微信扫码登录</a></li><li><a href="https://juejin.im/post/5c0a17d6e51d4570cf60d102">iOS App冷启动治理：来自美团外卖的实践</a></li><li><a href="https://juejin.im/post/595f1f2c5188250d8a605d69">开发者眼中 iOS 11 都更新了什么？</a></li><li><a href="https://onevcat.com/#blog">王巍博客，值得研读</a></li><li><a href="https://blog.csdn.net/mo_xiao_mo/article/details/52612443">Swift - 获取当前时间的时间戳（时间戳与时间互相转换）</a></li><li><a href="https://blog.csdn.net/shenjie_xsj/article/details/79033861">Swift4中对于日期时间的处理（Date、DateComponents、Calendar、DateFormatter、Locale）(超详细)</a></li><li><a href="https://www.jianshu.com/p/e3de4fbd105f">开源和开放设计 - Make Icons Witch Sketch</a></li><li><a href="https://juejin.im/post/5c94b03d6fb9a070d20f2041">最近被苹果拒绝的条款和解决方法</a></li><li><a href="https://juejin.im/post/5c972b165188252d6458309a">我的 WWDC 2019 Scholarship &amp; 来一次完整的使用 Playground（二）</a></li><li><a href="https://juejin.im/post/5c97a5e3f265da60cb377a6d">一个优质的项目应该具有什么特点</a></li></ol><h2 id="Sketch"><a href="#Sketch" class="headerlink" title="Sketch"></a>Sketch</h2><ol><li><a href="https://www.jianshu.com/p/eb6bd68954c7">Sketch APP UI 10天特训 - 1</a></li><li><a href="https://www.jianshu.com/p/2eca64aca16e">Sketch APP UI 10天特训 - 2</a></li><li><a href="https://www.jianshu.com/p/99be9893b3b8">Sketch APP UI 10天特训 - 3</a></li><li><a href="https://www.jianshu.com/p/e55fe4ee2515">Sketch APP UI 10天特训 - 4</a></li><li><a href="https://www.jianshu.com/p/6e2dfcb83336">Sketch APP UI 10天特训 - 5</a></li><li><a href="https://www.jianshu.com/p/d249e29650e2">Sketch Tutorial - 从零开始学Sketch 第一课</a></li><li><a href="https://www.jianshu.com/p/3bb00814f488">Sketch Tutorial - 从零开始学Sketch 第二课</a></li><li><a href="https://www.jianshu.com/p/f183f572dd9b">Sketch Tutorial - 从零开始学Sketch 第三课</a></li><li><a href="https://www.jianshu.com/p/5a28da384cbb">Sketch Tutorial - 从零开始学Sketch 第四课</a></li><li><a href="https://www.jianshu.com/p/98a28943af6f">Sketch Tutorial - 从零开始学Sketch 第五课</a></li><li><a href="https://www.jianshu.com/p/d12566fad35c">Sketch Tutorial - 从零开始学Sketch 第六课</a></li><li><a href="https://www.jianshu.com/p/020ee943ea13">Sketch入门（一）安装及了解基本功能</a></li><li><a href="https://www.jianshu.com/p/02262677f437">Sketch入门（二）练习APP登录界面设计</a></li><li><a href="https://www.jianshu.com/p/0d2430e4c9f8">Sketch入门（三）如何切图</a></li><li><a href="https://www.jianshu.com/p/bac4ef58c3a6">Sketch技巧（一）常用快捷键</a></li><li><a href="https://www.jianshu.com/p/51a43397c763">Sketch技巧（二）自定义快捷键</a></li><li><a href="https://www.jianshu.com/p/20c511c11a51">Sketch技巧（三）八个高效的快捷方式</a></li><li><a href="https://www.jianshu.com/p/ea7deafcbbe1">Sketch技巧（四）Sketch高效实用的插件</a></li></ol><p>&nbsp;<br><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpriteKit</tag>
      
      <tag>Swift4</tag>
      
      <tag>Sketch</tag>
      
      <tag>Cocoapods</tag>
      
      <tag>Alamofire</tag>
      
      <tag>UserNotifications</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA经验汇总</title>
    <link href="/2019/01/09/idea/"/>
    <url>/2019/01/09/idea/</url>
    
    <content type="html"><![CDATA[<h2 id="IDEA经验汇总"><a href="#IDEA经验汇总" class="headerlink" title="IDEA经验汇总"></a>IDEA经验汇总</h2><h3 id="添加servlet的jar及源码"><a href="#添加servlet的jar及源码" class="headerlink" title="添加servlet的jar及源码"></a>添加servlet的jar及源码</h3><ul><li><p>Maven的仓库路径：D:\Java\repo</p></li><li><p>下载jar，在项目的pom.xml文件增加如下依赖，然后选中项目，点击右键【Run As】-&gt;【Maven Install】：                                                       </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>将<a href="/download/javax.servlet-api-3.0.1-sources.jar">源码</a>放到jar包下载的位置，如：D:\Java\repo\javax\servlet\javax.servlet-api\3.0.1<br>  源代码的名称为：javax.servlet-api-3.0.1-sources.jar</p></li><li><p>关联源代码</p><ol><li>选中项目，使用组合键【Ctrl+Alt+Shift+S】打开【Project Structure】面板</li><li>【Platform Settings】-&gt;【Globals Libraries】-&gt;【】，然后点击中间【+】图标来增加源代码包，如：D:\Java\jdk1.8.0_191\src.zip或<a href="http://docs.oracle.com/javase/8/docs/api/">http://docs.oracle.com/javase/8/docs/api/</a></li></ol></li><li><p>最终效果：</p><img src="/2019/01/09/idea/01_Project_Structure_Libs.png" class=""></li></ul><h3 id="鼠标移动到类上显示文档JavaDoc内容"><a href="#鼠标移动到类上显示文档JavaDoc内容" class="headerlink" title="鼠标移动到类上显示文档JavaDoc内容"></a>鼠标移动到类上显示文档JavaDoc内容</h3><ul><li>【File】-&gt;【Settings】-&gt;【Editor】-&gt;【General】-&gt;【Show quick documentation on mouse move】</li></ul><h3 id="为jdk下载或指定-JavaDoc"><a href="#为jdk下载或指定-JavaDoc" class="headerlink" title="为jdk下载或指定 JavaDoc"></a>为jdk下载或指定 JavaDoc</h3><ol><li>选中项目，使用组合键【Ctrl+Alt+Shift+S】打开【Project Structure】面板</li><li>【Platform Settings】-&gt;【SDKs】-&gt;【XX（1.8）】-&gt;【Documentation Paths】，然后点击【+】图标来增加源代码包，如：D:\Java\jdk1.8.0_191\src.zip或<a href="http://docs.oracle.com/javase/8/docs/api/">http://docs.oracle.com/javase/8/docs/api/</a></li></ol><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol><li><a href="https://blog.csdn.net/u013905744/article/details/73162294">IntelliJ idea鼠标移动到类上显示文档document（javadoc）内容</a></li><li><a href="https://www.cnblogs.com/printN/p/6574232.html">代码生成利器：IDEA 强大的 Live Templates</a></li><li><a href="https://blog.csdn.net/kiwi_coder/article/details/17575629">IntelliJ Live Template进阶使用</a></li><li><a href="https://www.jianshu.com/p/ee023c7f6241">IDEA快捷键拆解系列（十八）：Live Templates篇</a></li></ol><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ol><li>Ctrl+B，快速打开光标处的类或方法</li><li>CTRL+ALT+B， 找所有的子类  </li><li>Ctrl+H，显示类结构图（类的继承层次）</li><li>Ctrl+N，可以快速打开类</li><li>Ctrl+Shift+N，可以快速打开文件</li><li>Ctrl+F12，可以显示当前文件的结构</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA</tag>
      
      <tag>IDE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java</title>
    <link href="/2019/01/09/Java/"/>
    <url>/2019/01/09/Java/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://www.cnblogs.com/iamAnonymous/p/6051769.html">JAVA学习笔记-数组的三种初始化方式</a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//静态初始化</span><br><span class="hljs-type">int</span> c[] = &#123;<span class="hljs-number">23</span>,<span class="hljs-number">43</span>,<span class="hljs-number">56</span>,<span class="hljs-number">78</span>&#125;;<span class="hljs-comment">//长度：4，索引范围：[0,3]</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Activiti 相关文档</title>
    <link href="/2019/01/06/Activiti/"/>
    <url>/2019/01/06/Activiti/</url>
    
    <content type="html"><![CDATA[<h2 id="Activiti-相关文档"><a href="#Activiti-相关文档" class="headerlink" title="Activiti 相关文档"></a>Activiti 相关文档</h2><ul><li><a href="https://github.com/CoderDream/workflow">springboot2 + acticiti6 + 流程设计器 + thymeleaf3 + mysql5.7 + jdk1.8-x64 + druid</a></li><li><a href="https://github.com/one-byte-jiang/activiti6Note">Activiti6学习笔记</a></li></ul><p><escape><span id="more"></span></escape></p>]]></content>
    
    
    
    <tags>
      
      <tag>Activiti6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年第1周</title>
    <link href="/2019/01/03/Year2019Week01/"/>
    <url>/2019/01/03/Year2019Week01/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019年第1周（2018-12-31-2019-01-06）"><a href="#2019年第1周（2018-12-31-2019-01-06）" class="headerlink" title="2019年第1周（2018&#x2F;12&#x2F;31~2019&#x2F;01&#x2F;06）"></a>2019年第1周（2018&#x2F;12&#x2F;31~2019&#x2F;01&#x2F;06）</h2><ol><li><a href="https://www.cnbeta.com/articles/tech/804437.htm">用Windows 10太卡？教你快速干掉Windows Defender</a></li><li><a href="https://www.cnblogs.com/javaleon/p/4220027.html">BPMN2.0中文版</a></li><li><a href="https://blog.csdn.net/qq_33458228/article/details/80810280">JUnit单元测试使用log4j输出日志</a></li></ol><p><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BPMN</tag>
      
      <tag>JUnit</tag>
      
      <tag>log4j</tag>
      
      <tag>Windows10</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018年第52周</title>
    <link href="/2018/12/24/Year2018Week52/"/>
    <url>/2018/12/24/Year2018Week52/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2018年第52周（2018-12-24-2018-12-30）"><a href="#2018年第52周（2018-12-24-2018-12-30）" class="headerlink" title="2018年第52周（2018&#x2F;12&#x2F;24~2018&#x2F;12&#x2F;30）"></a>2018年第52周（2018&#x2F;12&#x2F;24~2018&#x2F;12&#x2F;30）</h2><ol><li><a href="https://www.cr173.com/soft/856150.html">TeamViewer无限自动改ID版 V14.0.13488.0绿色版</a></li><li><a href="https://blog.csdn.net/qq_27937043/article/details/74025150">Failed to load the JNI shared library 解决方法</a></li><li><a href="https://www.v2ex.com/t/348114">一个简单 Web App 用于查看你的 GitHub star 总数以及项目排行版</a></li><li><a href="https://blog.csdn.net/qqxx6661/article/details/71106434">查看自己的项目fork和star</a></li><li><a href="https://www.cnblogs.com/skyshalo/p/7251378.html">关于mysql-connector-java（JDBC驱动）的一些坑</a></li><li><a href="https://www.cnblogs.com/gyfluck/p/9881762.html">查看mysql库中所有表的大小和记录数</a></li><li><a href="https://hot.cnbeta.com/articles/game/802833">中国游戏市场增长放缓 但已爆发的小游戏2019年更值得期待</a></li><li><a href="https://blog.csdn.net/qq_19734597/article/details/84440287">Activiti6.0踩坑记录（一）-用admin登录后台配置终端提示“Endpoint configuration for ‘Activiti app’ is invalid</a></li><li><a href="https://www.jianshu.com/nb/31974153">简书Activiti文章</a></li><li><a href="https://github.com/Yiyuery/capsule-web">Spring-Boot + Mybatis 综合模块化开发,合并打包</a></li><li><a href="https://www.activiti.org/userguide/">activiti user guide</a></li><li><a href="https://www.activiti.org/quick-start">activiti quick start</a></li><li><a href="http://www.kafeitu.me/activiti.html">Activiti相关博文</a></li><li><a href="https://blog.csdn.net/acmman/article/category/6732665">Activiti工作流 - 11篇</a></li><li><a href="https://blog.csdn.net/acmman/article/details/55662160">1.工作流概念</a></li><li><a href="https://blog.csdn.net/gaojingyuan/article/details/78979716">1.Activiti6-快速开始</a></li></ol><p><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TeamViewer</tag>
      
      <tag>GitHub</tag>
      
      <tag>Activiti6</tag>
      
      <tag>Spring-Boot</tag>
      
      <tag>小游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018年第51周</title>
    <link href="/2018/12/17/Year2018Week51/"/>
    <url>/2018/12/17/Year2018Week51/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2018年第51周（2018-12-17-2018-12-23）"><a href="#2018年第51周（2018-12-17-2018-12-23）" class="headerlink" title="2018年第51周（2018&#x2F;12&#x2F;17~2018&#x2F;12&#x2F;23）"></a>2018年第51周（2018&#x2F;12&#x2F;17~2018&#x2F;12&#x2F;23）</h2><ol><li>[dyld&#96;__abort_with_payload: With no error message](<a href="https://stackoverflow.com/questions/42027601/dyld-abort-with-payload-with-no-error-message">https://stackoverflow.com/questions/42027601/dyld-abort-with-payload-with-no-error-message</a>)</li><li><a href="https://github.com/xitu/gold-miner/blob/master/ios.md">所有 iOS 译文</a></li><li><a href="https://coderdream.github.io/DNS_NGINX#20185101">CentOS7下安装 DNS</a></li><li><a href="https://www.cnblogs.com/moxiaoan/p/5683743.html">CentOS7使用firewalld打开关闭防火墙与端口</a></li><li><a href="http://www.cnblogs.com/starksoft/p/9292794.html">CentOS 7 安装Nginx 并配置自动启动</a></li><li><a href="https://www.cnblogs.com/jimisun/p/8057156.html">Linux安装nginx</a></li><li><a href="https://blog.csdn.net/wangfei0904306/article/details/70561971">CentOS自动安装nginx(shell脚本方式)</a></li><li><a href="https://github.com/chenqingwh/node-micirservice-platform/blob/master/docs/dns_setupandconfig.md">CentOS7 DNS服务器安装与配置</a></li><li><a href="https://github.com/chenqingwh/node-micirservice-platform/blob/master/docs/nginx_setupandconfig.md">CentOS7 Nginx安装与配置</a></li></ol><h2 id="2018年第50周（2018-12-10-2018-12-16）"><a href="#2018年第50周（2018-12-10-2018-12-16）" class="headerlink" title="2018年第50周（2018&#x2F;12&#x2F;10~2018&#x2F;12&#x2F;16）"></a>2018年第50周（2018&#x2F;12&#x2F;10~2018&#x2F;12&#x2F;16）</h2><ol><li><a href="https://httpbin.org/">免费网络请求测试</a></li><li><a href="https://coderdream.github.io/201850">RC交付人员导入笔记</a></li><li><a href="https://coderdream.github.io/iOS">iOS相关文档</a></li></ol><h2 id="2018年第47周（2018-11-19-2018-11-25）"><a href="#2018年第47周（2018-11-19-2018-11-25）" class="headerlink" title="2018年第47周（2018&#x2F;11&#x2F;19~2018&#x2F;11&#x2F;25）"></a>2018年第47周（2018&#x2F;11&#x2F;19~2018&#x2F;11&#x2F;25）</h2><ol><li><a href="https://blog.csdn.net/oriency755/article/details/8255733">BI SSIS应用系列之发送邮件</a></li><li><a href="https://www.cnblogs.com/ljhdo/p/4844119.html">SSIS 发送邮件(HTML格式)</a></li><li><a href="https://www.cnblogs.com/izhaofu/p/4730263.html">C#使用 System.Net.Mail发送邮件功能</a></li><li><a href="https://coderdream.github.io/tools/MicroKMS_v18.10.06.rar">KMS在线激活Windows和Office之MicroKMS 神龙版</a></li></ol><h2 id="2018年第46周（2018-11-12-2018-11-18）"><a href="#2018年第46周（2018-11-12-2018-11-18）" class="headerlink" title="2018年第46周（2018&#x2F;11&#x2F;12~2018&#x2F;11&#x2F;18）"></a>2018年第46周（2018&#x2F;11&#x2F;12~2018&#x2F;11&#x2F;18）</h2><ol><li><a href="https://www.jb51.net/article/100382.htm">Swift中 ！和 ？的区别及使用</a></li><li><a href="http://blog.sina.com.cn/s/blog_4ddc30040102wdjz.html">全网首发联想小新V3000装黑苹果UEFI+GPT+ CLOVER引导+双系统+双硬盘</a></li><li><a href="https://www.netsarang.com/download/down_form.html?code=622">Xshell 6 Download</a></li><li><a href="https://www.netsarang.com/download/down_form.html?code=623">Xftp 6 Download</a></li><li><a href="http://www.cnblogs.com/zhouyalei/p/6390979.html">CentOS7系统下 docker 环境搭建</a></li><li><a href="https://www.cnblogs.com/zhouyalei/p/6400951.html">制作docker-jdk7-zookeeper镜像(非集群版)</a></li><li><a href="https://www.cnblogs.com/zhouyalei/p/6411614.html">CentOS7系统下搭建docker本地镜像仓库</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1613797-1-1.html">免AHCI补丁</a></li><li><a href="http://bbs.pcbeta.com/forum.php?mod=viewthread&tid=1753051&highlight=ACHI">老古董电脑P35主板+ICH9, 没有ACHI选项怎么破?</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1499277-1-1.html">主板BIOS下无AHCI设置，装OS X 10.9.2成功，分享有效补丁</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1788946-1-1.html">几乎完美8700k&#x2F;8600k + z370 HD3 + 英伟达显卡+10.13.5的EFI分享</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1773155-1-1.html">黑苹果工具箱，福音来了，随便挑随便选！！！</a></li><li><a href="https://jingyan.baidu.com/article/a378c960ee45e2b3282830b0.html">Windows 7下硬盘安装黑苹果Mac OS X图文教程</a></li><li><a href="https://www.cnblogs.com/Mr-Owl/p/5580479.html">Windows环境下使用Clover四叶草引导双硬盘安装OSX 10.11.5原版镜像</a></li><li><a href="">黑苹果安装从0开始—-clover优盘引导改硬盘引导篇</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1169005-1-1.html">在 win7 &#x2F; win8 下安装苹果系统 (懒人版)</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1740837-1-1.html">重大更新Clover_v2.4k_r4757安装界面改版 支持10.14 Mojave</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1762375-1-1.html">配置是I5-7600K+技嘉Z270X-UD3+GTX 1050+简单利用Clover四叶草安装U盘安装黑苹果</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1665056-1-1.html">Dell optiplex 390 安装 El Capitan</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1420871-1-1.html">关于dell optiplex 390安装黑苹果的解决方案</a></li><li><a href="https://coderdream.github.io/Hackintosh">Hackintosh</a></li></ol><h2 id="2018年第45周（2018-11-05-2018-11-11）"><a href="#2018年第45周（2018-11-05-2018-11-11）" class="headerlink" title="2018年第45周（2018&#x2F;11&#x2F;05~2018&#x2F;11&#x2F;11）"></a>2018年第45周（2018&#x2F;11&#x2F;05~2018&#x2F;11&#x2F;11）</h2><ol><li><a href="https://www.jianshu.com/p/b4389e7346d2">iOS9 不能正常使用 Http 的解决方法</a></li><li><a href="http://www.cnblogs.com/yzwdli/p/5337881.html">计算数据库中各个表的数据量和每行记录所占用空间</a></li><li><a href="http://blog.sina.com.cn/s/articlelist_1436983063_12_1.html"></a></li></ol><h2 id="2018年第44周（2018-10-29-2018-11-04）"><a href="#2018年第44周（2018-10-29-2018-11-04）" class="headerlink" title="2018年第44周（2018&#x2F;10&#x2F;29~2018&#x2F;11&#x2F;04）"></a>2018年第44周（2018&#x2F;10&#x2F;29~2018&#x2F;11&#x2F;04）</h2><ol><li><a href="https://jingyan.baidu.com/article/fb48e8bee0f8446e622e1416.html">2018最新谷歌账号注册方法，注册Gmail有效方法</a></li><li><a href="https://blog.csdn.net/andyxia/article/details/50684133">为VMWare中的Mac OS X 10.11硬盘扩容</a></li><li><a href="https://github.com/Microsoft/sql-server-samples/releases/tag/adventureworks2008r2">AdventureWorks2008R2数据库</a></li><li><a href="https://www.cnblogs.com/blogernice/articles/9857154.html">Swift 编程入门</a></li><li><a href="https://docs.microsoft.com/zh-cn/previous-versions/sql/sql-server-2008-r2/ms169917(v%3dsql.105">SSIS 教程：创建简单的 ETL 包 https://docs.microsoft.com/zh-cn/previous-versions/sql/sql-server-2008-r2/ms169917(v%3dsql.105)  </a> </li><li><a href="https://www.zhihu.com/question/21230857">PDF文档时如何实现全屏模式下的双页观看</a></li></ol><h2 id="2018年第43周（2018-10-22-2018-10-28）"><a href="#2018年第43周（2018-10-22-2018-10-28）" class="headerlink" title="2018年第43周（2018&#x2F;10&#x2F;22~2018&#x2F;10&#x2F;28）"></a>2018年第43周（2018&#x2F;10&#x2F;22~2018&#x2F;10&#x2F;28）</h2><ol><li><a href="https://blog.csdn.net/u014351782/article/details/49794491">XCode常用快捷键的使用</a></li><li><a href="https://yantuz.cn/373.html">Chrome同步助手 借助插件实现国内环境同步浏览器数据</a></li><li><a href="http://www.cnblogs.com/guoxiangyue/p/9598961.html">解决新版chrome无法手动拖动安装插件 提示“无法从该网站添加应用，扩展程序和用户脚本”</a></li><li><a href="https://www.cnblogs.com/supermarx/p/7762828.html">关于Google下插件SwitchyOmega用法</a></li><li><a href="https://stackoverflow.com/questions/24099364/no-such-module-cocoa-in-swift-playground">No such module ‘Cocoa’ in Swift Playground</a></li><li><a href="https://blog.csdn.net/uxyheaven/article/details/50818107">用OCLint给iOS代码做静态分析 - TODO</a></li><li><a href="https://coderdream.github.io/201843#20184301">SQLServer 数据库查看各表的记录数</a></li><li><a href="https://coderdream.github.io/201843#20184302">SQLServer 查询所有表名和表结构</a></li><li><a href="https://coderdream.github.io/201843#20184303">SQLServer 数据库拷贝</a></li><li><a href="https://coderdream.github.io/201843#20184304">Notepad++及实用插件安装</a></li></ol><h2 id="2018年第42周（2018-10-15-2018-10-21）"><a href="#2018年第42周（2018-10-15-2018-10-21）" class="headerlink" title="2018年第42周（2018&#x2F;10&#x2F;15~2018&#x2F;10&#x2F;21）"></a>2018年第42周（2018&#x2F;10&#x2F;15~2018&#x2F;10&#x2F;21）</h2><ol><li><a href="https://www.cnblogs.com/cui-cui/p/8507435.html">WebStorm mac下如何安装WebStorm + 破解</a></li><li><a href="https://segmentfault.com/a/1190000007735211">Nodejs进阶：如何玩转子进程（child_process）（TODO）</a></li><li><a href="http://nodejs.cn/api/child_process.html#child_process_spawning_bat_and_cmd_files_on_windows">child_process - 子进程 - 官方教程</a></li><li><a href="https://blog.csdn.net/jiuluguoshidai/article/details/51583684">解决虚拟机中安装的mac os系统无法识别ios设备的问题</a></li><li><a href="https://blog.csdn.net/sodino/article/details/51275638">【Node.js】’readline’ 逐行读取、写入文件内容</a></li><li><a href="https://www.cnblogs.com/yipu/archive/2013/03/14/2958977.html">Xcode：Home键光标移动到行首和End键光标移动到行尾</a></li></ol><h2 id="2018年第41周（2018-10-08-2018-10-14）"><a href="#2018年第41周（2018-10-08-2018-10-14）" class="headerlink" title="2018年第41周（2018&#x2F;10&#x2F;08~2018&#x2F;10&#x2F;14）"></a>2018年第41周（2018&#x2F;10&#x2F;08~2018&#x2F;10&#x2F;14）</h2><ol><li><a href="https://blog.csdn.net/dongmelon/article/details/78686344">nodejs – 执行bat脚本</a></li><li><a href="https://www.jianshu.com/p/8ef89220545f">第一次编写bat脚本</a></li><li><a href="https://blog.csdn.net/chenyufeng1991/article/details/60474644">nodejs读取文件时相对路径的正确写法(使用fs模块)</a></li><li><a href="https://blog.csdn.net/zsensei/article/details/79094714">Node.js 中 __dirname 和 .&#x2F; 的区别</a></li><li><a href="https://blog.csdn.net/liuyaqi1993/article/details/78723797">Node.js调用cmd输出中文乱码</a></li><li><a href="https://www.cnblogs.com/JessicaIsEvolving/p/9471188.html">NodeJs测试框架Mocha的安装与使用</a></li><li><a href="https://www.cnblogs.com/whybxy/p/7645578.html">ES6 Promise 用法讲解</a></li><li><a href="https://www.cnblogs.com/hustskyking/p/promise.html">细嗅Promise</a></li><li><a href="https://blog.csdn.net/weixin_43299649/article/details/82881567">VMware15安装MAC（MAC OS 10.13）(OS X 10.14)原版可升级最新可解锁macOS Unlocker3.0（OS X 10.13）</a></li><li><a href="https://blog.csdn.net/galaxy_yyg/article/details/82891044">VMWare15 安装 Mac OS 系统</a></li></ol><h2 id="2018年第39周（2018-09-24-2018-09-30）"><a href="#2018年第39周（2018-09-24-2018-09-30）" class="headerlink" title="2018年第39周（2018&#x2F;09&#x2F;24~2018&#x2F;09&#x2F;30）"></a>2018年第39周（2018&#x2F;09&#x2F;24~2018&#x2F;09&#x2F;30）</h2><ol><li><a href="https://www.cnblogs.com/gudujianxiao/category/350476.html">SSIS学习系列文章</a></li><li><a href="https://www.cnblogs.com/wljqds/p/cookie_session_node.html">Cookie和Session在Node.JS中的实践（一）</a></li><li><a href="https://www.cnblogs.com/wljqds/p/session.html">Cookie和Session在Node.JS中的实践（二）</a></li><li><a href="https://www.cnblogs.com/jianxuanbing/p/9158830.html">npm install “Unexpected end of JSON input while parsing near”问题</a></li><li><a href="https://www.jianshu.com/p/4721ddd27027">如何为 Markdown 文件自动生成目录</a></li></ol><h2 id="2018年第38周（2018-09-17-2018-09-23）"><a href="#2018年第38周（2018-09-17-2018-09-23）" class="headerlink" title="2018年第38周（2018&#x2F;09&#x2F;17~2018&#x2F;09&#x2F;23）"></a>2018年第38周（2018&#x2F;09&#x2F;17~2018&#x2F;09&#x2F;23）</h2><ol><li><a href="https://blog.jetbrains.com/webstorm/2016/05/getting-started-with-electron-in-webstorm/">Getting started with Electron in WebStorm</a> </li><li><a href="http://npm.taobao.org/mirrors/electron/2.0.9/">taobao electron mirrors</a></li><li><a href="https://blog.csdn.net/changhuzhao/article/details/78684967?tdsourcetag=s_pctim_aiomsg">electron 完整项目构建过程</a></li><li><a href="https://www.npmjs.com/package/date-format-lite">NodeJS日期格式化</a></li><li><a href="https://blog.csdn.net/u011127019/article/details/52134699">NodeJs forEach循环</a></li><li><a href="https://cnodejs.org/topic/52e8e78a953654bb712654cb">《nodejs开发指南》for与forEach之间的差别</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set">JavaScript 标准库 Set</a></li><li><a href="https://www.npmjs.com/package/random-int">NodeJS 随机数</a></li><li><a href="https://www.npmjs.com/package/compare-dates">日期比较</a></li><li><a href="https://blog.csdn.net/q3585914/article/details/78470649">node.js-ORM数据库框架sequelize使用总结 超时查询、缓存查询、多表关联查询(TODO)</a></li><li><a href="https://www.cnblogs.com/zhangpengnike/p/6122588.html">SQLServer 日期函数大全</a></li></ol><h2 id="2018年第37周（2018-09-10-2018-09-16）"><a href="#2018年第37周（2018-09-10-2018-09-16）" class="headerlink" title="2018年第37周（2018&#x2F;09&#x2F;10~2018&#x2F;09&#x2F;16）"></a>2018年第37周（2018&#x2F;09&#x2F;10~2018&#x2F;09&#x2F;16）</h2><ol><li><a href="https://segmentfault.com/a/1190000008501410">Seneca ：NodeJS 微服务框架入门指南</a> </li><li><a href="https://www.imooc.com/article/19162">mongoDB 学习笔记纯干货</a></li><li><a href="https://www.jianshu.com/p/2f54b90efe15">Mongoose增查改删学习笔记</a></li><li><a href="https://www.jianshu.com/p/594a1b73e54a">Mongoose教程翻译</a></li><li><a href="https://blog.csdn.net/hustzw07/article/details/73468970">测试框架Mocha</a></li><li><a href="https://www.cnblogs.com/tugenhua0707/p/8419534.html">学习测试框架Mocha</a></li></ol><h2 id="2018年第36周（2018-09-03-2018-09-09）"><a href="#2018年第36周（2018-09-03-2018-09-09）" class="headerlink" title="2018年第36周（2018&#x2F;09&#x2F;03~2018&#x2F;09&#x2F;09）"></a>2018年第36周（2018&#x2F;09&#x2F;03~2018&#x2F;09&#x2F;09）</h2><ol><li><a href="http://blog.fens.me/series-nodejs/">从零开始nodejs系列文章</a> </li><li><a href="https://blog.csdn.net/zhangyuan19880606/article/category/6246826">深入浅出Node.js系列</a></li><li><a href="https://github.com/chyingp/nodejs-learning-guide/blob/master/index.md">Nodejs学习笔记</a></li><li><a href="https://www.cnblogs.com/chris-oil/p/5625437.html">Nodejs基础中间件Connect</a></li><li><a href="https://www.cnblogs.com/yjfengwen/p/3827217.html">nodejs之日志管理</a></li><li><a href="http://blog.fens.me/nodejs-oauth-passport/">Passport现实社交网络OAuth登陆</a></li><li><a href="https://www.cnblogs.com/lenmom/p/9193183.html">CentOS 7 创建桌面快捷方式</a></li><li><a href="https://blog.csdn.net/Leeniux/article/details/80828074">CentOS7(GNOME)设置桌面图标大小缩放</a></li><li><a href="https://blog.csdn.net/Run_the_youth/article/details/51587077">CentOS7将应用快捷方式加到桌面</a></li><li><a href="https://www.liaoxuefeng.com/article/0014631488240837e3633d3d180476cb684ba7c10fda6f6000">使用Travis进行持续集成(Java)</a></li><li><a href="https://segmentfault.com/a/1190000011218410">Travis CI 系列：自动化部署博客(php)</a></li><li><a href="https://cnodejs.org/topic/558df089ebf9c92d17e73358">Nodejs开源项目里怎么样写测试、CI和代码测试覆盖率</a> </li><li><a href="https://www.zybuluo.com/XiangZhou/note/208532">Express 4.x API</a></li><li><a href="https://github.com/cramonDE/gulp-book">Gulp 入门指南</a></li><li><a href="https://blog.csdn.net/debimeng/article/details/74296152?utm_source=itdadao&utm_medium=referral">CentOS 7.2重启网络报错 Failed to start LSB: Bring up&#x2F;down—liux报错</a></li><li><a href="https://blog.csdn.net/lingbo229/article/details/79019658">Centos7 安装PhantomJS</a></li></ol><h2 id="2018年第35周（2018-08-27-2018-09-02）"><a href="#2018年第35周（2018-08-27-2018-09-02）" class="headerlink" title="2018年第35周（2018&#x2F;08&#x2F;27~2018&#x2F;09&#x2F;02）"></a>2018年第35周（2018&#x2F;08&#x2F;27~2018&#x2F;09&#x2F;02）</h2><ol><li><a href="https://blog.csdn.net/wangzuokun/article/details/70799976">CentOS7 安装 mongodb</a> </li><li><a href="http://www.mamicode.com/info-detail-2371195.html">CentOS 7上安装 MongoDB数据库 4.0.0最新版</a></li><li><a href="https://docs.mongodb.com/manual/reference/configuration-options/">mongoDB Configuration File Options</a></li><li><a href="https://blog.csdn.net/zhouzhiwengang/article/details/51446582">centos Mongodb 基础使用</a></li><li><a href="https://www.jb51.net/article/48217.htm">MongoDB常用操作命令大全</a></li><li><a href="https://coderdream.github.io/201835#20183501">CentOS 7上安装 MongoDB数据库 4.1.1最新版</a> </li><li><a href="https://coderdream.github.io/201835#20183502">CentOS查看和修改PATH环境变量的方法</a> </li><li><a href="https://coderdream.github.io/201835#20183503">CentOS下手动安装gcc最佳实践</a> </li><li><a href="https://coderdream.github.io/201835#20183504">CentOS下手动安装nodejs最佳实践</a> </li><li><a href="https://www.cnblogs.com/hongdada/p/6671065.html">CentOS7.2 安装Chrome</a> </li><li><a href="https://www.cnblogs.com/ywlaker/p/6113927.html">单点登录原理与简单实现</a> </li><li><a href="https://cnodejs.org/topic/55f6e69904556da7553d20dd">单点登录的三种实现方式</a></li><li><a href="https://blog.csdn.net/qq_24708791/article/details/78535565">单点登录之CAS原理和实现</a></li><li><a href="https://www.cnblogs.com/wxj-106/p/8097880.html">SSO单点登录三种情况的实现方式详解</a></li><li><a href="https://www.cnblogs.com/yexiaochai/p/4422460.html">认识单点登录(nodejs)</a></li><li><a href="https://www.cnblogs.com/lucio110/p/8192792.html">Sourcetree跳过注册的方法</a></li><li><a href="https://github.com/CoderDream/struts-examples/tree/master/crud">Struts2最佳实践之crud（Maven版）</a></li><li><a href="http://struts.apache.org/getting-started/how-to-create-a-struts2-web-application.html">How To Create A Struts 2 Web Application(官网)</a></li></ol><h2 id="2018年第34周（2018-08-20-2018-08-26）"><a href="#2018年第34周（2018-08-20-2018-08-26）" class="headerlink" title="2018年第34周（2018&#x2F;08&#x2F;20~2018&#x2F;08&#x2F;26）"></a>2018年第34周（2018&#x2F;08&#x2F;20~2018&#x2F;08&#x2F;26）</h2><ol><li><a href="https://coderdream.github.io/201834#20183401">nrm – NPM registry 管理工具</a> </li><li><a href="https://coderdream.github.io/201834#20183402">怎么样给linux文件添加可执行权限</a></li><li><a href="https://coderdream.github.io/201834#20183403">CentOS7下安装google chrome浏览器</a></li><li><a href="https://www.linuxidc.com/Linux/2017-04/142897.htm">vmware linux虚拟机与本地物理机共享文件夹</a></li></ol><h2 id="2018年第33周（2018-08-13-2018-08-19）"><a href="#2018年第33周（2018-08-13-2018-08-19）" class="headerlink" title="2018年第33周（2018&#x2F;08&#x2F;13~2018&#x2F;08&#x2F;19）"></a>2018年第33周（2018&#x2F;08&#x2F;13~2018&#x2F;08&#x2F;19）</h2><ol><li><a href="https://blog.csdn.net/mate_ge/article/details/78841351">centos6.5+postgresql10环境搭建</a> </li><li><a href="https://www.cnblogs.com/think8848/p/5877076.html">CentOS7下安装并简单设置PostgreSQL笔记</a></li><li><a href="https://www.cnblogs.com/renzhicai/p/7773080.html">CentOS下Redis的安装</a></li><li><a href="https://www.cnblogs.com/aimu/p/7047671.html">Redis可视化工具Redis Desktop Manager使用</a></li><li><a href="http://www.runoob.com/redis/redis-tutorial.html">Redis 教程</a></li><li><a href="https://cnodejs.org/topic/4fb1c1fd1975fe1e1310490b">在Node.js中使用TCP套接字编程</a></li><li><a href="https://blog.csdn.net/zhangxin09/article/details/12844975">学习 NodeJS 第八天：Socket 通讯</a></li><li><a href="https://github.com/xyfcode/zspeed">Node游戏服务器源代码（TCP通讯，mongodb，文件读写，数据加密，子父进程通讯）开心连三国</a></li><li><a href="https://blog.csdn.net/lupengfei1009/article/details/50832996">MongoDB+MongoVUE安装及入门</a></li></ol><h2 id="2018年第32周（2018-08-06-2018-08-12）"><a href="#2018年第32周（2018-08-06-2018-08-12）" class="headerlink" title="2018年第32周（2018&#x2F;08&#x2F;06~2018&#x2F;08&#x2F;12）"></a>2018年第32周（2018&#x2F;08&#x2F;06~2018&#x2F;08&#x2F;12）</h2><ol><li><a href="https://blog.csdn.net/dkbnull/article/details/61414350">使用WebStorm&#x2F;IDEA上传本地项目到GitHub</a></li><li><a href="http://www.cnblogs.com/limark/p/5200239.html">代码审查工具 StyleCop 的探索</a></li><li><a href="https://www.cnblogs.com/mxh1099/p/5332133.html">js之规范代码写法</a><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">for</span>(var key in obj)&#123;<br><span class="hljs-built_in">if</span>(!obj.hasOwnProperty(key)) continue;<br></code></pre></td></tr></table></figure></li><li><a href="https://blog.csdn.net/cc_fys/article/details/78281085">WebStorm 打开Node.js的代码提示功能</a></li><li><a href="https://www.oschina.net/question/2855414_2189024">用webstorm写jQuery代码提示有警告怎么处理？警告代码如下。麻烦大神指教</a></li><li><a href="https://blog.csdn.net/baidu_30809315/article/details/78548152">JQuery警告：Duplicated jQuery selector【divs &#x3D; $( “div” );】</a></li><li><a href="https://www.cnblogs.com/shuaijie/articles/5033309.html">代码审查工具StyleCop之一：介绍和使用</a></li><li><a href="https://blog.csdn.net/gwblue/article/details/25003031">StyleCop学习笔记——自定义规则</a></li><li><a href="https://www.cnblogs.com/chen110xi/p/5534994.html">StyleCop学习笔记——默认的规则</a></li><li><a href="https://coderdream.github.io/201831#20183102">VMWare怎样隐藏到托盘</a></li><li><a href="https://blog.csdn.net/u012102104/article/details/78950290">MarkDown支持高亮的语言</a></li><li><a href="http://www.bootcss.com/p/layoutit/">自定义表单–样例</a></li><li><a href="https://blog.csdn.net/wlmnzf/article/details/50678115">自定义表单（完）–（html5版本）</a></li><li><a href="https://blog.csdn.net/vkqiang/article/details/69371764">开源 java CMS - FreeCMS2.6 自定义表单</a></li><li><a href="http://www.cnblogs.com/webreport/archive/2009/09/02/1558731.html">web工作流管理系统开发之一 工作流概念</a></li><li><a href="https://coderdream.github.io/command-ls">ls命令</a></li><li><a href="https://coderdream.github.io/command-find">find命令</a></li></ol><h2 id="2018年第31周（2018-07-30-2018-08-05）"><a href="#2018年第31周（2018-07-30-2018-08-05）" class="headerlink" title="2018年第31周（2018&#x2F;07&#x2F;30~2018&#x2F;08&#x2F;05）"></a>2018年第31周（2018&#x2F;07&#x2F;30~2018&#x2F;08&#x2F;05）</h2><ol><li><a href="https://www.howtoing.com/how-to-install-vagrant-on-centos-7">如何在CentOS 7上安装Vagrant</a></li><li><a href="https://www.cnblogs.com/davenkin/p/vagrant-virtualbox.html">Vagrant入门</a></li><li><a href="https://c4ys.com/archives/1230">Vagrant box国内镜像及本地安装教程</a></li><li><a href="https://blog.csdn.net/xiaofeiaiai/article/details/55048812">CentOS7.2部署FTP</a></li><li><a href="https://blog.csdn.net/pmlpml/article/details/53925542">用 vagrant 快速部署 docker 虚拟机集群</a></li><li><a href="https://www.cnblogs.com/I-will-be-different/p/4353597.html">Docker个人学习总结</a></li><li><a href="https://www.cnblogs.com/52fhy/p/5638571.html">Docker学习笔记</a></li><li><a href="https://www.cnblogs.com/davenkin/p/vagrant-virtualbox.html">Vagrant入门</a></li><li><a href="https://blog.csdn.net/u011415782/article/details/78501799">CentOS7 ab压力测试安装与解释</a></li><li><a href="https://segmentfault.com/markdown">Markdown 编辑器语法指南</a></li><li><a href="https://blog.csdn.net/u012187452/article/details/73478028">Node.js学习之网络爬虫（使用cheerio抓取网页数据）</a></li><li><a href="https://cnodejs.org/topic/5203a71844e76d216a727d2e">通读cheerio API</a></li><li><a href="http://www.cnblogs.com/mingjiatang/archive/2017/12/13/8034953.html">NodeJS爬虫入门</a></li></ol><h2 id="2018年第30周（2018-07-23-2018-07-29）"><a href="#2018年第30周（2018-07-23-2018-07-29）" class="headerlink" title="2018年第30周（2018&#x2F;07&#x2F;23~2018&#x2F;07&#x2F;29）"></a>2018年第30周（2018&#x2F;07&#x2F;23~2018&#x2F;07&#x2F;29）</h2><ol><li><a href="https://coderdream.github.io/docker-cookbook#20180727">Docker 经典实例</a></li><li><a href="https://coderdream.github.io/centos-sinopia#20180727">CentOS 7 安装Sinopia</a></li></ol><h2 id="2018年第28周（2018-07-09-2018-07-15）"><a href="#2018年第28周（2018-07-09-2018-07-15）" class="headerlink" title="2018年第28周（2018&#x2F;07&#x2F;09~2018&#x2F;07&#x2F;15）"></a>2018年第28周（2018&#x2F;07&#x2F;09~2018&#x2F;07&#x2F;15）</h2><ol><li><a href="https://www.cnblogs.com/youyoui/p/8337147.html">Git 忽略提交 .gitignore</a></li><li><a href="http://www.mamicode.com/info-detail-1833843.html">selenium 3.0 键盘事件 +强制结束chromedriver进程代码</a></li></ol><h2 id="2018年第23周（2018-06-04-2018-06-10）"><a href="#2018年第23周（2018-06-04-2018-06-10）" class="headerlink" title="2018年第23周（2018&#x2F;06&#x2F;04~2018&#x2F;06&#x2F;10）"></a>2018年第23周（2018&#x2F;06&#x2F;04~2018&#x2F;06&#x2F;10）</h2><ol><li><a href="https://coderdream.github.io/201823#20182301">SQL Server查询数据的所有表名和行数</a></li><li><a href="https://coderdream.github.io/201823#20182302">SQL Server新增和删除约束</a></li><li><a href="https://blog.csdn.net/whhgarsky/article/details/70164180">用Enterprise Architect从源码自动生成类图（附图+工具）</a></li><li><a href="https://blog.csdn.net/u010156063/article/details/76199459">Enterprise Architect 数据库逆向工程（导入已经存在的数据表结构）</a></li><li><a href="https://www.cnblogs.com/blfshiye/p/4747252.html">UML造型——使用EA时序图工具的开发实践和经验</a></li></ol><h2 id="2017年第47周（2017-11-13-2017-11-19）"><a href="#2017年第47周（2017-11-13-2017-11-19）" class="headerlink" title="2017年第47周（2017&#x2F;11&#x2F;13~2017&#x2F;11&#x2F;19）"></a>2017年第47周（2017&#x2F;11&#x2F;13~2017&#x2F;11&#x2F;19）</h2><ol><li><a href="https://coderdream.github.io/201747#20174701">人力看板（高级查询）</a></li><li><a href="https://coderdream.github.io/201747#20174702">任务看板（高级查询）</a></li><li><a href="https://coderdream.github.io/201747#20174703">JavaScript获取当前根目录</a></li><li><a href="https://www.cnblogs.com/fish-li/archive/2011/06/06/2073626.html">看懂SqlServer查询计划</a></li><li><a href="http://files.cnblogs.com/files/fish-li/MyNorthwind.7z">看懂SqlServer查询计划-数据库文件</a></li></ol><h2 id="2017年第46周（2017-11-13-2017-11-19）"><a href="#2017年第46周（2017-11-13-2017-11-19）" class="headerlink" title="2017年第46周（2017&#x2F;11&#x2F;13~2017&#x2F;11&#x2F;19）"></a>2017年第46周（2017&#x2F;11&#x2F;13~2017&#x2F;11&#x2F;19）</h2><ol><li><a href="https://www.cnblogs.com/landeanfen/p/5035608.html">JS组件系列——Form表单验证神器： BootstrapValidator</a></li><li><a href="https://www.cnblogs.com/v-weiwang/p/4834672.html">基于jquery，bootstrap数据验证插件bootstrapValidator 教程</a></li><li><a href="https://www.cnblogs.com/nele/p/5493414.html">bootstrapValidator.js 做表单验证</a></li><li><a href="https://coderdream.github.io/201746#20174601">SpringMVC访问不到默认页的问题</a></li><li><a href="https://coderdream.github.io/201746#20174602">将外部jar打入本地maven仓库</a></li><li><a href="https://coderdream.github.io/201746#20174603">maven项目使用mybatis-generator自动生成代码</a></li><li><a href="https://www.cnblogs.com/gjkbendan/p/6497040.html">spring aop 实现用户操作日志记录功能(转）【本地实现为SystemLogAspect】</a></li></ol><h2 id="2017年第45周（2017-11-06-2017-11-12）"><a href="#2017年第45周（2017-11-06-2017-11-12）" class="headerlink" title="2017年第45周（2017&#x2F;11&#x2F;06~2017&#x2F;11&#x2F;12）"></a>2017年第45周（2017&#x2F;11&#x2F;06~2017&#x2F;11&#x2F;12）</h2><ol><li><a href="https://coderdream.github.io/weui/01_button">weui实例-button</a></li><li><a href="https://coderdream.github.io/weui/02_form">weui实例-form</a></li><li><a href="https://coderdream.github.io/jquery_weui/index">jquery-weui实例</a></li></ol><h2 id="2017年第44周（2017-10-30-2017-11-05）"><a href="#2017年第44周（2017-10-30-2017-11-05）" class="headerlink" title="2017年第44周（2017&#x2F;10&#x2F;30~2017&#x2F;11&#x2F;05）"></a>2017年第44周（2017&#x2F;10&#x2F;30~2017&#x2F;11&#x2F;05）</h2><ol><li><a href="https://coderdream.github.io/weui/index">weui实例</a></li></ol><h2 id="2017年第43周（2017-10-23-2017-10-29）"><a href="#2017年第43周（2017-10-23-2017-10-29）" class="headerlink" title="2017年第43周（2017&#x2F;10&#x2F;23~2017&#x2F;10&#x2F;29）"></a>2017年第43周（2017&#x2F;10&#x2F;23~2017&#x2F;10&#x2F;29）</h2><ol><li><a href="https://github.com/Yam-cn/pyalgotrade-cn">Pyalgotrade-cn</a></li><li><a href="https://zhuanlan.zhihu.com/p/21624000?refer=crossin">用 Python 实现你的量化交易策略</a></li><li><a href="http://blog.csdn.net/junbujianwpl/article/details/52038688">用 Python 写了个简单的股票量化交易框架</a></li><li><a href="http://www.cnblogs.com/dhcn/p/7121435.html">python做量化交易干货分享</a></li><li><a href="http://blog.csdn.net/jike080401/article/details/50510609">Python编程的例子—-股票数据接口</a></li><li><a href="http://www.cnblogs.com/chaosimple/p/4153083.html">【原】十分钟搞定pandas</a></li><li><a href="http://30daydo.com/article/11">30天学会量化交易模型 Day01</a></li><li><a href="http://blog.csdn.net/yagamil/article/details/51440285">发现使用python＋tushare做量化交易 其实不是很难</a></li><li><a href="https://www.zhihu.com/question/40210709">编程小白如何结合量化实例学习python量化建模？</a></li><li><a href="http://python.jobbole.com/87733/">用Python浅析股票数据</a></li><li><a href="http://blog.csdn.net/pangjiuzala/article/details/50410728"> 一个用Python编写的股票数据（沪深）爬虫和选股策略测试框架</a></li><li><a href="http://blog.csdn.net/djun100/article/details/25748419">Sina股票实时数据接口</a></li><li><a href="http://blog.csdn.net/ustbhacker/article/details/8365756">腾迅股票数据接口 http&#x2F;javascript</a></li><li><a href="https://github.com/Emptyset110/dHydra">dHydra 主要针对多数据源多策略实时计算的量化分析开发框架。提供新浪Level2等数据获取</a></li><li><a href="http://www.cnblogs.com/luluping/archive/2010/11/15/1877817.html">实时股票数据接口</a></li><li><a href="http://www.cnblogs.com/wyfighting/p/7497985.html">自学python之爬虫3股票数据爬虫</a></li><li><a href="http://www.cnblogs.com/CongZhang/p/5274486.html">Python3.5 queue模块详解</a></li><li><a href="https://github.com/felixglow/Stock">终端实时获取股票价格(GitHub)</a></li><li><a href="https://github.com/garydai/stock">雪球股票讨论度与价格走势的关系</a></li><li><a href="https://www.zhihu.com/question/22145919">如何下载股票历史数据？</a></li></ol><h2 id="2017年第42周（2017-10-16-2017-10-22）"><a href="#2017年第42周（2017-10-16-2017-10-22）" class="headerlink" title="2017年第42周（2017&#x2F;10&#x2F;16~2017&#x2F;10&#x2F;22）"></a>2017年第42周（2017&#x2F;10&#x2F;16~2017&#x2F;10&#x2F;22）</h2><ol><li><a href="https://coderdream.github.io/201742#20174201">JavaScript判断是否为整数类型方式</a></li><li><a href="http://www.cnblogs.com/Bonker/p/3584707.html">python+Eclipse+pydev环境搭建</a></li><li><a href="http://tushare.org/">现成的股票数据抓取工具啦，而且是免费、开源， ：TuShare</a></li></ol><h2 id="2017年第41周（2017-10-09-2017-10-15）"><a href="#2017年第41周（2017-10-09-2017-10-15）" class="headerlink" title="2017年第41周（2017&#x2F;10&#x2F;09~2017&#x2F;10&#x2F;15）"></a>2017年第41周（2017&#x2F;10&#x2F;09~2017&#x2F;10&#x2F;15）</h2><ol><li><a href="https://github.com/kripken/sql.js">sql.js-SQLite compiled to javascript</a></li><li><a href="https://coderdream.github.io/201741#20174101">JS操作SQLite</a></li></ol><h2 id="2017年第40周（2017-10-02-2017-10-08）"><a href="#2017年第40周（2017-10-02-2017-10-08）" class="headerlink" title="2017年第40周（2017&#x2F;10&#x2F;02~2017&#x2F;10&#x2F;08）"></a>2017年第40周（2017&#x2F;10&#x2F;02~2017&#x2F;10&#x2F;08）</h2><ol><li><a href="https://coderdream.github.io/art/basic">artTemplate-basic</a></li><li><a href="https://coderdream.github.io/art/include">artTemplate-include</a></li><li><a href="https://coderdream.github.io/art/compile">artTemplate-compile</a></li><li><a href="https://coderdream.github.io/art/compile-error">artTemplate-compile-error</a></li><li><a href="https://coderdream.github.io/art/filter">artTemplate-filter</a></li><li><a href="https://coderdream.github.io/art/no-escape">artTemplate-no-escape</a></li><li><a href="https://coderdream.github.io/art/print">artTemplate-print</a></li><li><a href="https://coderdream.github.io/art/runtime-error">artTemplate-runtime-error</a></li><li><a href="https://coderdream.github.io/chart/excavator">挖掘机运营状况</a></li></ol><h2 id="2017年第39周（2017-9-25-2017-10-1）"><a href="#2017年第39周（2017-9-25-2017-10-1）" class="headerlink" title="2017年第39周（2017&#x2F;9&#x2F;25~2017&#x2F;10&#x2F;1）"></a>2017年第39周（2017&#x2F;9&#x2F;25~2017&#x2F;10&#x2F;1）</h2><ol><li><a href="https://coderdream.github.io/201739#20173901">Tomcat管理页面403 Access Denied的解决方法</a></li><li><a href="https://coderdream.github.io/201739#20173902">MyBatis通过@调用Java类的静态代码和常量</a></li><li><a href="https://coderdream.github.io/201739#20173903">Tomcat 配置shared目录</a></li><li><a href="https://coderdream.github.io/201739#20173904">Maven打war包不包含jar</a></li><li><a href="https://coderdream.github.io/autotest/Chapter05">第五章 测试用例规划及TestNG的使用</a></li><li><a href="https://coderdream.github.io/201739#20173905">查看sqlserver被锁的表以及如何解锁</a></li></ol><h2 id="2017年第38周（2017-9-18-2017-9-24）"><a href="#2017年第38周（2017-9-18-2017-9-24）" class="headerlink" title="2017年第38周（2017&#x2F;9&#x2F;18~2017&#x2F;9&#x2F;24）"></a>2017年第38周（2017&#x2F;9&#x2F;18~2017&#x2F;9&#x2F;24）</h2><ol><li><a href="http://www.cnblogs.com/Ming8006/p/5811425.html">测试覆盖率工具：EclEmma</a></li><li><a href="http://www.cnblogs.com/choosewang/articles/3079983.html">TestNG.XML初级指南</a></li><li><a href="http://www.cnblogs.com/tobecrazy/p/4579414.html">testng 教程</a></li><li><a href="http://www.cnblogs.com/tobecrazy/p/4582173.html">testng教程之testng.xml的配置和使用，以及参数传递</a></li><li><a href="http://blog.csdn.net/lykangjia/article/details/56485295">TestNG详解-深度好文</a></li><li><a href="https://coderdream.github.io/201738#20173801">TextNG.xml配置实例</a></li><li><a href="https://coderdream.github.io/201738#20173802">Java获取本机MAC地址、IP地址</a></li><li><a href="http://blog.csdn.net/tanzhangwen/article/details/18733557">WebDriver中页面滚动(scrolling)</a></li><li><a href="https://coderdream.github.io/chart/sample_0101">Chart Samples – Bar Chart</a></li><li><a href="https://coderdream.github.io/chart/sample_0102">Chart Samples – Bar Chart 2</a></li><li><a href="http://blog.csdn.net/chenxiaodan_danny/article/details/53509393">JQuery $.each与$().each区别， for in 与 for of 区别</a></li></ol><h2 id="2017年第37周（2017-9-11-2017-9-17）"><a href="#2017年第37周（2017-9-11-2017-9-17）" class="headerlink" title="2017年第37周（2017&#x2F;9&#x2F;11~2017&#x2F;9&#x2F;17）"></a>2017年第37周（2017&#x2F;9&#x2F;11~2017&#x2F;9&#x2F;17）</h2><ol><li><a href="https://coderdream.github.io/201737#20173701">jQuery中radio Button根据值选中</a></li><li><a href="https://coderdream.github.io/201737#20173702">jQuery 下拉选单默认选中与单击事件</a></li><li><a href="http://www.cnblogs.com/Ming8006/p/5811425.html">测试覆盖率工具：EclEmma</a></li></ol><h2 id="2017年第36周（2017-9-4-2017-9-10）"><a href="#2017年第36周（2017-9-4-2017-9-10）" class="headerlink" title="2017年第36周（2017&#x2F;9&#x2F;4~2017&#x2F;9&#x2F;10）"></a>2017年第36周（2017&#x2F;9&#x2F;4~2017&#x2F;9&#x2F;10）</h2><ol><li><a href="https://coderdream.github.io/201736#20173601">getJSON获取数据</a></li><li><a href="https://coderdream.github.io/201736#20173602">jQuery ajax读取本地json文件</a></li></ol><h2 id="2017年第34周（2017-8-21-2017-8-27）"><a href="#2017年第34周（2017-8-21-2017-8-27）" class="headerlink" title="2017年第34周（2017&#x2F;8&#x2F;21~2017&#x2F;8&#x2F;27）"></a>2017年第34周（2017&#x2F;8&#x2F;21~2017&#x2F;8&#x2F;27）</h2><ol><li><a href="http://blog.csdn.net/dadiyang/article/details/52352632">Java发送包含网络和本地图片的HTML邮件</a></li><li><a href="https://coderdream.github.io/201734#20173401">查找项目经理超过x人的员工</a></li><li><a href="https://coderdream.github.io/201734#20173402">统计项目经理的项目个数</a></li><li><a href="https://coderdream.github.io/201734#20173403">项目经理手下存在项目经理超过X人的员工且该项目经理归属项目超过Y个</a></li><li><a href="https://coderdream.github.io/201734#20173404">遍历Map</a></li><li><a href="https://coderdream.github.io/201734#20173405">永久修改Jenkins启动端口的一种解决方法</a></li></ol><h2 id="2017年第33周（2017-8-14-2017-8-20）"><a href="#2017年第33周（2017-8-14-2017-8-20）" class="headerlink" title="2017年第33周（2017&#x2F;8&#x2F;14~2017&#x2F;8&#x2F;20）"></a>2017年第33周（2017&#x2F;8&#x2F;14~2017&#x2F;8&#x2F;20）</h2><ol><li><a href="https://coderdream.github.io/201733#20173301">sql server 2008 分页，ROW_NUMBER( )函数</a></li><li><a href="http://blog.csdn.net/thither_shore/article/details/52206016">CSDN-markdown 页间跳转（锚点链接）的实现</a></li></ol><h2 id="2017年第32周（2017-8-07-2017-8-13）"><a href="#2017年第32周（2017-8-07-2017-8-13）" class="headerlink" title="2017年第32周（2017&#x2F;8&#x2F;07~2017&#x2F;8&#x2F;13）"></a>2017年第32周（2017&#x2F;8&#x2F;07~2017&#x2F;8&#x2F;13）</h2><ol><li><a href="https://coderdream.github.io/201732#20173201">好文章序列</a></li></ol><p><escape><span id="more"></span></escape></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TeamViewer</tag>
      
      <tag>GitHub</tag>
      
      <tag>Activiti6</tag>
      
      <tag>Spring-Boot</tag>
      
      <tag>小游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018年第50周</title>
    <link href="/2018/12/10/Year2018Week23/"/>
    <url>/2018/12/10/Year2018Week23/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2018年第50周（2018-12-10-2018-12-16）"><a href="#2018年第50周（2018-12-10-2018-12-16）" class="headerlink" title="2018年第50周（2018&#x2F;12&#x2F;10~2018&#x2F;12&#x2F;16）"></a>2018年第50周（2018&#x2F;12&#x2F;10~2018&#x2F;12&#x2F;16）</h2><h2 id="SQL-Server查询数据的所有表名和行数"><a href="#SQL-Server查询数据的所有表名和行数" class="headerlink" title="SQL Server查询数据的所有表名和行数"></a><span id= "20182301">SQL Server查询数据的所有表名和行数</span></h2><p>查询查询所有表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name <span class="hljs-keyword">FROM</span> sysobjects <span class="hljs-keyword">WHERE</span> xtype <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;u&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.tables;<br></code></pre></td></tr></table></figure><p>查询数据库中所有的表名及行数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>a.name,<br>b. <span class="hljs-keyword">ROWS</span><br><span class="hljs-keyword">FROM</span><br>sysobjects <span class="hljs-keyword">AS</span> a<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> sysindexes <span class="hljs-keyword">AS</span> b <span class="hljs-keyword">ON</span> a.id <span class="hljs-operator">=</span> b.id<br><span class="hljs-keyword">WHERE</span><br>(a.type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;u&#x27;</span>)<br><span class="hljs-keyword">AND</span> (b.indid <span class="hljs-keyword">IN</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>a.name,<br>b. <span class="hljs-keyword">ROWS</span> <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p>查询所有的标明及空间占用量\行数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>object_name(id) tablename,<br><span class="hljs-number">8</span> <span class="hljs-operator">*</span> reserved <span class="hljs-operator">/</span> <span class="hljs-number">1024</span> reserved,<br>rtrim(<span class="hljs-number">8</span> <span class="hljs-operator">*</span> dpages) <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;kb&#x27;</span> used,<br><span class="hljs-number">8</span> <span class="hljs-operator">*</span> (reserved <span class="hljs-operator">-</span> dpages) <span class="hljs-operator">/</span> <span class="hljs-number">1024</span> unused,<br><span class="hljs-number">8</span> <span class="hljs-operator">*</span> dpages <span class="hljs-operator">/</span> <span class="hljs-number">1024</span> <span class="hljs-operator">-</span> <span class="hljs-keyword">ROWS</span> <span class="hljs-operator">/</span> <span class="hljs-number">1024</span> <span class="hljs-operator">*</span> minlen <span class="hljs-operator">/</span> <span class="hljs-number">1024</span> <span class="hljs-keyword">free</span>,<br><span class="hljs-keyword">ROWS</span> <span class="hljs-comment">--,*</span><br><span class="hljs-keyword">FROM</span><br>sysindexes<br><span class="hljs-keyword">WHERE</span><br>indid <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>tablename,<br>reserved <span class="hljs-keyword">DESC</span><br></code></pre></td></tr></table></figure><p><span id= "20182302">SQL Server新增和删除约束</span></p><p>删除约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">IF  <span class="hljs-keyword">EXISTS</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.foreign_keys <span class="hljs-keyword">WHERE</span> object_id <span class="hljs-operator">=</span> OBJECT_ID(N<span class="hljs-string">&#x27;[dbo].[FK_PDRC_Organization_PDRC_Organization]&#x27;</span>) <span class="hljs-keyword">AND</span> parent_object_id <span class="hljs-operator">=</span> OBJECT_ID(N<span class="hljs-string">&#x27;[dbo].[PDRC_Organization]&#x27;</span>))<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> [dbo].[PDRC_Organization] <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> [FK_PDRC_Organization_PDRC_Organization]<br>GO<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> [dbo].[PDRC_Organization]  <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">CHECK</span> <span class="hljs-keyword">ADD</span>  <span class="hljs-keyword">CONSTRAINT</span> [FK_PDRC_Organization_PDRC_Organization] <span class="hljs-keyword">FOREIGN</span> KEY([LeadeID])<br><span class="hljs-keyword">REFERENCES</span> [dbo].[PDRC_Organization] ([ID])<br>GO<br></code></pre></td></tr></table></figure><p>新增约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> [dbo].[PDRC_Organization] <span class="hljs-keyword">CHECK</span> <span class="hljs-keyword">CONSTRAINT</span> [FK_PDRC_Organization_PDRC_Organization]<br>GO<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018年第50周</title>
    <link href="/2018/12/10/Year2018Week50/"/>
    <url>/2018/12/10/Year2018Week50/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2018年第50周（2018-12-10-2018-12-16）"><a href="#2018年第50周（2018-12-10-2018-12-16）" class="headerlink" title="2018年第50周（2018&#x2F;12&#x2F;10~2018&#x2F;12&#x2F;16）"></a>2018年第50周（2018&#x2F;12&#x2F;10~2018&#x2F;12&#x2F;16）</h2><ul><li><p>直接将Excel或CSV文件导入新数据库中作为表</p><ol><li>打开“SQL Server Management Studio”</li><li>新建数据库</li><li>选择数据库，点击右键，依次选择【任务】-》【导入数据】</li><li>在“选择数据源“面板的数据源选项选择【平面文件源】</li><li>点击【浏览】按钮，选择需要导入的Excel或CSV文件</li><li>在【常规】面板勾选【在第一个数据行中显示列名称】，这样第一行数据会作为表的列名</li><li>在【高级】面板中设置正确的数据类型【DataType】，如带2位小数的数值要选择【数值[DT_NUMERIC]】,同时将DataScale（精度）设置为2</li><li>【下一步】选择目标数据库，直至完成后，点击【关闭】按钮</li></ol></li><li><p>CASE WHEN 用法</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a.TM工号,<br>       a.交付人员,<br>       a.[标准产能(BSM)],<br>       a.生效日期,<br>       a.技术平台,<br>       <span class="hljs-keyword">CASE</span><br>           <span class="hljs-keyword">WHEN</span> b.[交付人员] <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br>           <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span><br>           <span class="hljs-keyword">ELSE</span> <span class="hljs-number">1</span><br>       <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> bwid,<br>       <span class="hljs-keyword">CASE</span><br>           <span class="hljs-keyword">WHEN</span> c.交付人员 <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br>           <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span><br>           <span class="hljs-keyword">ELSE</span> <span class="hljs-number">1</span><br>       <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> cwid<br><span class="hljs-keyword">FROM</span> dbo.Staff01 <span class="hljs-keyword">AS</span> a<br>     <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> dbo.Staff02 <span class="hljs-keyword">AS</span> b <span class="hljs-keyword">ON</span> b.交付人员 <span class="hljs-operator">=</span> a.交付人员<br>     <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> dbo.Staff03 <span class="hljs-keyword">AS</span> c <span class="hljs-keyword">ON</span> c.交付人员 <span class="hljs-operator">=</span> a.交付人员;<br></code></pre></td></tr></table></figure><ul><li>运行结果如下</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">TM</span>工号交付人员BSM技术平台bwidcwid<br><span class="hljs-attribute">B</span>-<span class="hljs-number">27154</span>B-<span class="hljs-number">14853</span><span class="hljs-number">0</span>.<span class="hljs-number">80</span>测试<span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-attribute">B</span>-<span class="hljs-number">27154</span>B-<span class="hljs-number">15985</span><span class="hljs-number">1</span>.<span class="hljs-number">68</span>Java<span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-attribute">B</span>-<span class="hljs-number">27154</span>B-<span class="hljs-number">16514</span><span class="hljs-number">1</span>.<span class="hljs-number">08</span>Java<span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-attribute">B</span>-<span class="hljs-number">27154</span>B-<span class="hljs-number">20897</span><span class="hljs-number">1</span>.<span class="hljs-number">12</span>Java<span class="hljs-number">0</span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>将上面的查询语句作为一个视图selall（Select All）</p><p>下面的脚本分别得到Staff02和Staff03的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)  <span class="hljs-keyword">from</span> selall <span class="hljs-keyword">where</span> bwid <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)  <span class="hljs-keyword">from</span> selall <span class="hljs-keyword">where</span> cwid <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><ul><li>获取3张表的记录行数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/****** Script for SelectTopNRows command from SSMS  ******/</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> [BJC_PDRC].[dbo].[PDRC_StaffManage1];<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> [BJC_PDRC].[dbo].[PDRC_StaffManage2];<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> [BJC_PDRC].[dbo].[PDRC_StaffManage3];<br></code></pre></td></tr></table></figure><ul><li>查看tm的情况</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> d.workid,<br>       c.tm,<br>       d.tm<br><span class="hljs-keyword">FROM</span> PDRC_StaffManage1 d<br>     <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span><br>(<br>    <span class="hljs-keyword">SELECT</span> a.workid <span class="hljs-keyword">AS</span> workid,<br>           b.tm<br>    <span class="hljs-keyword">FROM</span> PDRC_StaffManage1 a<br>         <span class="hljs-keyword">JOIN</span> PDRC_StaffManage2 b <span class="hljs-keyword">ON</span> a.workid <span class="hljs-operator">=</span> b.workid<br>) <span class="hljs-keyword">AS</span> c <span class="hljs-keyword">ON</span> d.workid <span class="hljs-operator">=</span> c.workid;<br></code></pre></td></tr></table></figure><ul><li>结果：tm1为空则去tm2、tm1和tm2不相等则取tm2</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">workidtm1 tm2<br>B<span class="hljs-number">-21276</span>B<span class="hljs-number">-28309</span>B<span class="hljs-number">-28309</span><br>B<span class="hljs-number">-43229</span><span class="hljs-keyword">NULL</span>B<span class="hljs-number">-24644</span><br>B<span class="hljs-number">-34169</span>B<span class="hljs-number">-30987</span>B<span class="hljs-number">-28023</span><br>B<span class="hljs-number">-49033</span><span class="hljs-keyword">NULL</span>B<span class="hljs-number">-40354</span><br>B<span class="hljs-number">-26561</span><span class="hljs-keyword">NULL</span>B<span class="hljs-number">-35656</span><br>B<span class="hljs-number">-43037</span>B<span class="hljs-number">-22935</span>B<span class="hljs-number">-16981</span><br>B<span class="hljs-number">-14297</span>B<span class="hljs-number">-27189</span>B<span class="hljs-number">-28023</span><br>B<span class="hljs-number">-48901</span>B<span class="hljs-number">-22940</span>B<span class="hljs-number">-28023</span><br></code></pre></td></tr></table></figure><ul><li>正确结果：1461条数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> [TM工号],<br>       [交付人员],<br>       [标准产能(BSM)],<br>       [生效日期],<br>       [技术平台]<br><span class="hljs-keyword">FROM</span> selall<br><span class="hljs-keyword">WHERE</span> cwid <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>      <span class="hljs-keyword">AND</span> bwid <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> Staff02;<br><br></code></pre></td></tr></table></figure><ul><li>检查Staff02和Staff03是否存在相同交付人员的数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> dbo.Staff02 a <span class="hljs-keyword">join</span> Staff03 b <span class="hljs-keyword">on</span> b.交付人员 <span class="hljs-operator">=</span>a.交付人员 <br></code></pre></td></tr></table></figure><ul><li>现在数据库中TM不存在的交付人员列表（17）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span><br>(<br>    <span class="hljs-keyword">SELECT</span> [TM工号],<br>           [交付人员],<br>           [标准产能(BSM)],<br>           [生效日期],<br>           [技术平台]<br>    <span class="hljs-keyword">FROM</span> selall<br>    <span class="hljs-keyword">WHERE</span> cwid <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>          <span class="hljs-keyword">AND</span> bwid <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">UNION</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br>    <span class="hljs-keyword">FROM</span> Staff02<br>) i<br><span class="hljs-keyword">WHERE</span> i.[交付人员] <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span><br>(<br>    <span class="hljs-keyword">SELECT</span> f.[交付人员]<br>    <span class="hljs-keyword">FROM</span><br>    (<br>        <span class="hljs-keyword">SELECT</span> [TM工号],<br>               [交付人员],<br>               [标准产能(BSM)],<br>               [生效日期],<br>               [技术平台]<br>        <span class="hljs-keyword">FROM</span> selall<br>        <span class="hljs-keyword">WHERE</span> cwid <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>              <span class="hljs-keyword">AND</span> bwid <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">UNION</span><br>        <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br>        <span class="hljs-keyword">FROM</span> Staff02<br>    ) f<br>    <span class="hljs-keyword">JOIN</span> dbo.RC g <span class="hljs-keyword">ON</span> g.TM工号 <span class="hljs-operator">=</span> f.TM工号<br>);<br></code></pre></td></tr></table></figure><ul><li>Staff01中所有不存在TM的交付人员列表（414）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> Staff01 a<br><span class="hljs-keyword">WHERE</span> a.TM工号 <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span><br>(<br>    <span class="hljs-keyword">SELECT</span> b.TM工号<br>    <span class="hljs-keyword">FROM</span> RC b<br>);<br></code></pre></td></tr></table></figure><ul><li>Staff01中所有不存在TM列表（7）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span>(a.TM工号)  <span class="hljs-keyword">from</span> Staff01 a <span class="hljs-keyword">where</span> a.TM工号 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> b.TM工号 <span class="hljs-keyword">from</span> RC b);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018年第47周</title>
    <link href="/2018/11/19/Year2018Week47/"/>
    <url>/2018/11/19/Year2018Week47/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2018年第47周（2018-11-19-2019-12-25）"><a href="#2018年第47周（2018-11-19-2019-12-25）" class="headerlink" title="2018年第47周（2018&#x2F;11&#x2F;19~2019&#x2F;12&#x2F;25）"></a>2018年第47周（2018&#x2F;11&#x2F;19~2019&#x2F;12&#x2F;25）</h2><h2 id="SQLServer-数据数据行转列"><a href="#SQLServer-数据数据行转列" class="headerlink" title="SQLServer 数据数据行转列"></a><span id= "20184701">SQLServer 数据数据行转列</span></h2><ul><li><p>都是数字时聚集  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span><br>       FilterProjectType,<br>       IdleProjectNo,<br>       IdleManagerWorkID<br><span class="hljs-keyword">FROM</span><br>(<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CASE</span><br>               <span class="hljs-keyword">WHEN</span> ConfigKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;FilterProjectType&#x27;</span><br>               <span class="hljs-keyword">THEN</span> ConfigValue<br>               <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span><br>           <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> FilterProjectType,<br>           <span class="hljs-keyword">CASE</span><br>               <span class="hljs-keyword">WHEN</span> ConfigKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IdleProjectNo&#x27;</span><br>               <span class="hljs-keyword">THEN</span> ConfigKeyName<br>               <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;&#x27;</span><br>           <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> IdleProjectNo,<br>           <span class="hljs-keyword">CASE</span><br>               <span class="hljs-keyword">WHEN</span> ConfigKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IdleManagerWorkID&#x27;</span><br>               <span class="hljs-keyword">THEN</span> ConfigKeyName<br>               <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;&#x27;</span><br>           <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> IdleManagerWorkID<br>    <span class="hljs-keyword">FROM</span> dbo.BIConfig a<br>    <span class="hljs-keyword">WHERE</span> a.ConfigKey <span class="hljs-keyword">IN</span>(<span class="hljs-string">&#x27;FilterProjectType&#x27;</span>, <span class="hljs-string">&#x27;IdleProjectNo&#x27;</span>, <span class="hljs-string">&#x27;IdleManagerWorkID&#x27;</span>)<br>) aaa;<br></code></pre></td></tr></table></figure></li><li><p>一般方式  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a.ConfigValue <span class="hljs-keyword">AS</span> FilterProjectType,<br>       b.ConfigKeyName <span class="hljs-keyword">AS</span> IdleProjectNo,<br>       c.ConfigKeyName <span class="hljs-keyword">AS</span> IdleManagerWorkID<br><span class="hljs-keyword">FROM</span> BIConfig a<br>     <span class="hljs-keyword">JOIN</span> BIConfig b <span class="hljs-keyword">ON</span> b.ConfigKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IdleProjectNo&#x27;</span><br>     <span class="hljs-keyword">JOIN</span> BIConfig c <span class="hljs-keyword">ON</span> c.ConfigKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IdleManagerWorkID&#x27;</span><br><span class="hljs-keyword">WHERE</span> a.ConfigKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;FilterProjectType&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>输出结果  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">FilterProjectTypeIdleProjectNoIdleManagerWorkID<br>1.00IDLE20180308127B-19385<br></code></pre></td></tr></table></figure></li><li><p>ETL取值和弹窗  </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"> <span class="hljs-built_in">int</span> FilterProjectType = (<span class="hljs-built_in">int</span>) <span class="hljs-keyword">this</span>.Dts.Variables[<span class="hljs-string">&quot;User::FilterProjectType&quot;</span>].Value;<br>String IdleManagerWorkID = (String)<span class="hljs-keyword">this</span>.Dts.Variables[<span class="hljs-string">&quot;User::IdleManagerWorkID&quot;</span>].Value;<br>String IdleProjectNo = (String)<span class="hljs-keyword">this</span>.Dts.Variables[<span class="hljs-string">&quot;User::IdleProjectNo&quot;</span>].Value;<br>System.Windows.Forms.MessageBox.Show(FilterProjectType.ToString() + <span class="hljs-string">&quot; - &quot;</span> + IdleManagerWorkID + <span class="hljs-string">&quot; - &quot;</span> + IdleProjectNo);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018年第43周</title>
    <link href="/2018/10/22/Year2018Week43/"/>
    <url>/2018/10/22/Year2018Week43/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2018年第43周（2018-11-22-2018-11-28）"><a href="#2018年第43周（2018-11-22-2018-11-28）" class="headerlink" title="2018年第43周（2018&#x2F;11&#x2F;22~2018&#x2F;11&#x2F;28）"></a>2018年第43周（2018&#x2F;11&#x2F;22~2018&#x2F;11&#x2F;28）</h2><h2 id="SQLServer-数据库查看各表的记录数"><a href="#SQLServer-数据库查看各表的记录数" class="headerlink" title="SQLServer 数据库查看各表的记录数"></a><span id= "20184301">SQLServer 数据库查看各表的记录数</span></h2><ul><li>各表记录条数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a.name <span class="hljs-keyword">AS</span> 表名,<br>       <span class="hljs-built_in">MAX</span>(b.rows) <span class="hljs-keyword">AS</span> 记录条数<br><span class="hljs-keyword">FROM</span> sysobjects <span class="hljs-keyword">AS</span> a,<br>     sysindexes <span class="hljs-keyword">AS</span> b<br><span class="hljs-keyword">WHERE</span> a.id <span class="hljs-operator">=</span> b.id<br>      <span class="hljs-keyword">AND</span> a.xtype <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;u&#x27;</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> a.name<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">MAX</span>(b.rows) <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><ul><li>总记录条数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(记录条数) <span class="hljs-keyword">AS</span> 总记录数<br><span class="hljs-keyword">FROM</span><br>(<br>    <span class="hljs-keyword">SELECT</span> TOP <span class="hljs-number">10000</span> a.name <span class="hljs-keyword">AS</span> 表名,<br>                     <span class="hljs-built_in">MAX</span>(b.rows) <span class="hljs-keyword">AS</span> 记录条数<br>    <span class="hljs-keyword">FROM</span> sysobjects a,<br>         sysindexes b<br>    <span class="hljs-keyword">WHERE</span> a.id <span class="hljs-operator">=</span> b.id<br>          <span class="hljs-keyword">AND</span> a.xtype <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;u&#x27;</span><br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> a.name<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">MAX</span>(b.rows) <span class="hljs-keyword">DESC</span><br>) t1;<br></code></pre></td></tr></table></figure><h2 id="SQLServer-查询所有表名和表结构"><a href="#SQLServer-查询所有表名和表结构" class="headerlink" title="SQLServer 查询所有表名和表结构"></a><span id= "20184302">SQLServer 查询所有表名和表结构</span></h2><ul><li>表名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name <span class="hljs-keyword">FROM</span> sysobjects <span class="hljs-keyword">WHERE</span> xtype <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;U&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>SQLServer查询某表的表结构</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>syscolumns.name,<br>systypes.name,<br>syscolumns.isnullable,<br>syscolumns.length<br><span class="hljs-keyword">FROM</span><br>syscolumns,<br>systypes<br><span class="hljs-keyword">WHERE</span><br>syscolumns.xusertype <span class="hljs-operator">=</span> systypes.xusertype<br><span class="hljs-keyword">AND</span> syscolumns.id <span class="hljs-operator">=</span> object_id(<span class="hljs-string">&#x27;ISBG_HumanMap&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="SQLServer-数据库拷贝"><a href="#SQLServer-数据库拷贝" class="headerlink" title="SQLServer 数据库拷贝"></a><span id= "20184303">SQLServer 数据库拷贝</span></h2><ul><li>需求：将BJC_PDRC_UAT库直接备份生成生产库BJC_PDRC</li><li>步骤：</li></ul><ol><li>分离数据库</li><li>拷贝数据库文件（BJC_PDRC_UAT.mdf和BJC_PDRC.ldf），然后重命名（BJC_PDRC.mdf和BJC_PDRC.ldf）</li><li>附加数据库为生产库</li></ol><ul><li>分离数据库</li></ul><p><img src="https://coderdream.github.io/snapshot/sqlserverbackup/sqlserverbackup_0001.png"></p><ul><li>分离提示</li></ul><p><img src="https://coderdream.github.io/snapshot/sqlserverbackup/sqlserverbackup_0002.png"></p><ul><li>分离前点击【脚本】按钮</li></ul><p><img src="https://coderdream.github.io/snapshot/sqlserverbackup/sqlserverbackup_0003.png"></p><ul><li>复制并重命名数据库文件</li></ul><p><img src="https://coderdream.github.io/snapshot/sqlserverbackup/sqlserverbackup_0008.png"></p><ul><li>准备附加数据库</li></ul><p><img src="https://coderdream.github.io/snapshot/sqlserverbackup/sqlserverbackup_0004.png"></p><ul><li>选择准备好的数据库文件</li></ul><p><img src="https://coderdream.github.io/snapshot/sqlserverbackup/sqlserverbackup_0005.png"></p><ul><li>设置正确的数据库库名称</li></ul><p><img src="https://coderdream.github.io/snapshot/sqlserverbackup/sqlserverbackup_0006.png"></p><ul><li>刷新就可以看到新的数据库了</li></ul><p><img src="https://coderdream.github.io/snapshot/sqlserverbackup/sqlserverbackup_0007.png"></p><h2 id="Notepad-及实用插件安装"><a href="#Notepad-及实用插件安装" class="headerlink" title="Notepad++及实用插件安装"></a><span id= "20184304">Notepad++及实用插件安装</span></h2><p>参考文章：<a href="https://blog.csdn.net/z45689/article/details/57493338">Notepad++及实用插件安装</a></p><p>插件管理器下载：<a href="https://github.com/bruderstein/nppPluginManager/releases">nppPluginManager</a></p><p>解压后放入安装目录中。</p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018年第35周</title>
    <link href="/2018/08/27/Year2018Week35/"/>
    <url>/2018/08/27/Year2018Week35/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2018年第35周（2018-08-27-2018-09-02）"><a href="#2018年第35周（2018-08-27-2018-09-02）" class="headerlink" title="2018年第35周（2018&#x2F;08&#x2F;27~2018&#x2F;09&#x2F;02）"></a>2018年第35周（2018&#x2F;08&#x2F;27~2018&#x2F;09&#x2F;02）</h2><h2 id="CentOS-7上安装-MongoDB数据库-4-1-1最新版"><a href="#CentOS-7上安装-MongoDB数据库-4-1-1最新版" class="headerlink" title="CentOS 7上安装 MongoDB数据库 4.1.1最新版"></a><span id= "20183501">CentOS 7上安装 MongoDB数据库 4.1.1最新版</span></h2><p>下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget http://downloads.mongodb.org/linux/mongodb-linux-x86_64-4.1.1.tgz</span><br></code></pre></td></tr></table></figure><p>查进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ps aux | grep mongod</span><br></code></pre></td></tr></table></figure><p>杀进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">kill</span> -9 XXXX</span><br></code></pre></td></tr></table></figure><h2 id="CentOS查看和修改PATH环境变量的方法"><a href="#CentOS查看和修改PATH环境变量的方法" class="headerlink" title="CentOS查看和修改PATH环境变量的方法"></a><span id= "20183502">CentOS查看和修改PATH环境变量的方法</span></h2><p>查看PATH：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span></span><br></code></pre></td></tr></table></figure><p>以添加mongodb server为列</p><h3 id="修改方法一："><a href="#修改方法一：" class="headerlink" title="修改方法一："></a>修改方法一：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">export</span> PATH=/usr/local/mongodb/bin:<span class="hljs-variable">$PATH</span></span><br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;配置完后可以通过echo $PATH查看配置结果。<br>生效方法：立即生效<br>有效期限：临时改变，只能在当前的终端窗口中有效，当前窗口关闭后就会恢复原有的path配置<br>用户局限：仅对当前用户</p><h3 id="修改方法二："><a href="#修改方法二：" class="headerlink" title="修改方法二："></a>修改方法二：</h3><p>通过修改.bashrc文件:<br>vim ~&#x2F;.bashrc<br>&#x2F;&#x2F;在最后一行添上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">export</span> PATH=/usr/local/mongodb/bin:<span class="hljs-variable">$PATH</span></span><br></code></pre></td></tr></table></figure><p>生效方法：（有以下两种）<br>1、关闭当前终端窗口，重新打开一个新终端窗口就能生效<br>2、输入“source ~&#x2F;.bashrc”命令，立即生效<br>有效期限：永久有效<br>用户局限：仅对当前用户</p><h3 id="修改方法三"><a href="#修改方法三" class="headerlink" title="修改方法三:"></a>修改方法三:</h3><p>通过修改profile文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim /etc/profile</span><br></code></pre></td></tr></table></figure><p>&#x2F;export PATH &#x2F;&#x2F;找到设置PATH的行，添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">export</span> PATH=/usr/local/mongodb/bin:<span class="hljs-variable">$PATH</span></span><br></code></pre></td></tr></table></figure><p>生效方法：系统重启<br>有效期限：永久有效<br>用户局限：对所有用户</p><h3 id="修改方法四"><a href="#修改方法四" class="headerlink" title="修改方法四:"></a>修改方法四:</h3><p>通过修改environment文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim /etc/environment</span><br></code></pre></td></tr></table></figure><p>在PATH&#x3D;”&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;local&#x2F;games”中加入“:&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">PATH=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/mongodb/bin<br></code></pre></td></tr></table></figure><p>生效方法：系统重启<br>有效期限：永久有效<br>用户局限：对所有用户</p><h2 id="CentOS下手动安装gcc最佳实践"><a href="#CentOS下手动安装gcc最佳实践" class="headerlink" title="CentOS下手动安装gcc最佳实践"></a><span id= "20183503">CentOS下手动安装gcc最佳实践</span></h2><h3 id="1-获取安装包并解压"><a href="#1-获取安装包并解压" class="headerlink" title="1 获取安装包并解压"></a>1 获取安装包并解压</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://ftp.gnu.org/gnu/gcc/gcc-8.2.0/gcc-8.2.0.tar.gz<br>tar -jxvf gcc-8.2.0.tar.gz<br></code></pre></td></tr></table></figure><h3 id="2-下载供编译需求的依赖项"><a href="#2-下载供编译需求的依赖项" class="headerlink" title="2 下载供编译需求的依赖项"></a>2 下载供编译需求的依赖项</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd gcc-8.2.0<br>./contrib/download_prerequisites<br></code></pre></td></tr></table></figure><h3 id="3-建立一个目录供编译出的文件存放"><a href="#3-建立一个目录供编译出的文件存放" class="headerlink" title="3 建立一个目录供编译出的文件存放"></a>3 建立一个目录供编译出的文件存放</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir gcc-build-8.2.0<br>cd gcc-build-8.2.0<br></code></pre></td></tr></table></figure><h3 id="4-生成Makefile文件"><a href="#4-生成Makefile文件" class="headerlink" title="4 生成Makefile文件"></a>4 生成Makefile文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">../configure -enable-checking=release -enable-languages=c,c++ -disable-multilib<br></code></pre></td></tr></table></figure><h3 id="5-编译（注意：此步骤非常耗时）"><a href="#5-编译（注意：此步骤非常耗时）" class="headerlink" title="5 编译（注意：此步骤非常耗时）"></a>5 编译（注意：此步骤非常耗时）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make -j4<br></code></pre></td></tr></table></figure><p>-j4选项是make对多核处理器的优化，如果不成功请使用 make</p><h3 id="6-安装"><a href="#6-安装" class="headerlink" title="6 安装"></a>6 安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo make install<br></code></pre></td></tr></table></figure><h3 id="7-验证安装"><a href="#7-验证安装" class="headerlink" title="7 验证安装"></a>7 验证安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc -v<br></code></pre></td></tr></table></figure><h2 id="CentOS下手动安装nodejs最佳实践"><a href="#CentOS下手动安装nodejs最佳实践" class="headerlink" title="CentOS下手动安装nodejs最佳实践"></a><span id= "20183504">CentOS下手动安装nodejs最佳实践</span></h2><p>On RHEL, CentOS or Fedora, for Node.js v8 LTS:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -<br></code></pre></td></tr></table></figure><p>Alternatively for Node.js 10:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -<br></code></pre></td></tr></table></figure><p>Then install:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum -y install nodejs<br></code></pre></td></tr></table></figure><p>Optional: install build tools</p><p>To compile and install native addons from npm you may also need to install build tools:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install gcc-c++ make<br><span class="hljs-meta prompt_"># </span><span class="language-bash">or: sudo yum groupinstall <span class="hljs-string">&#x27;Development Tools&#x27;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018年第34周</title>
    <link href="/2018/08/20/Year2018Week34/"/>
    <url>/2018/08/20/Year2018Week34/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2018年第34周（2018-08-20-2018-08-26）"><a href="#2018年第34周（2018-08-20-2018-08-26）" class="headerlink" title="2018年第34周（2018&#x2F;08&#x2F;20~2018&#x2F;08&#x2F;26）"></a>2018年第34周（2018&#x2F;08&#x2F;20~2018&#x2F;08&#x2F;26）</h2><h2 id="nrm-–-NPM-registry-管理工具"><a href="#nrm-–-NPM-registry-管理工具" class="headerlink" title="nrm – NPM registry 管理工具"></a><span id= "20183401">nrm – NPM registry 管理工具</span></h2><p>开发的npm registry 管理工具 nrm,  能够查看和切换当前使用的registry, 最近NPM经常 down 掉, 这个还是很有用的哈哈</p><p>Install</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install -g nrm</span><br></code></pre></td></tr></table></figure><p>Example</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nrm <span class="hljs-built_in">ls</span></span><br><br>* npm ---- https://registry.npmjs.org/<br>  cnpm --- http://r.cnpmjs.org/<br>  eu ----- http://registry.npmjs.eu/<br>  au ----- http://registry.npmjs.org.au/<br>  sl ----- http://npm.strongloop.com/<br>  nj ----- https://registry.nodejitsu.com/<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nrm use cnpm //switch registry to cnpm</span><br>    Registry has been set to: http://r.cnpmjs.org/<br></code></pre></td></tr></table></figure><p>cmd</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">nrm help // show help<br>nrm list // show all registries<br>nrm use cnpm // switch to cnpm<br>nrm home // go to a registry home page<br></code></pre></td></tr></table></figure><p>Registries</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm<br>cnpm<br>strongloop<br>european<br>australia<br>nodejitsu<br></code></pre></td></tr></table></figure><h2 id="怎么样给-Linux-文件添加可执行权限"><a href="#怎么样给-Linux-文件添加可执行权限" class="headerlink" title="怎么样给 Linux 文件添加可执行权限"></a><span id= "20183402">怎么样给 Linux 文件添加可执行权限</span></h2><p>接着我们添加可执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod 777 test.sh<br></code></pre></td></tr></table></figure><p>设置完成之后在来看看文件属性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ll<br></code></pre></td></tr></table></figure><h2 id="CentOS7下安装Google-Chrome浏览器（最后更新：20181218）"><a href="#CentOS7下安装Google-Chrome浏览器（最后更新：20181218）" class="headerlink" title="CentOS7下安装Google Chrome浏览器（最后更新：20181218）"></a><span id= "20183403">CentOS7下安装Google Chrome浏览器（最后更新：20181218）</span></h2><ol><li><p>从google官方网站下载google chrome安装包</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm<br></code></pre></td></tr></table></figure></li><li><p>安装依赖包：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install pax*<br>yum install redhat-lsb*<br>yum -y install libXss*<br>yum install libXScrnSaver*<br>yum install epel-release<br>yum install libappindicator-gtk3<br>yum install -y liberation-fonts<br></code></pre></td></tr></table></figure></li><li><p>使用root权限进行安装</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -ivh google-chrome-stable_current_x86_64.rpm<br>warning: google-chrome-stable_current_x86_64.rpm: Header V4 DSA/SHA1 Signature, key ID 7fac5991: NOKEY<br>Preparing...                          ################################# [100%]<br>Updating / installing...<br>   1:google-chrome-stable-68.0.3440.10################################# [100%]<br>Redirecting to /bin/systemctl start atd.service<br></code></pre></td></tr></table></figure></li></ol><p>至此，Google Chrome安装成功，此时应用程序(Application-&gt;Internet)中已经有Google Chrome快捷方式了！</p><h3 id="如果上面的快捷方式失败，通过下面的方式解决："><a href="#如果上面的快捷方式失败，通过下面的方式解决：" class="headerlink" title="如果上面的快捷方式失败，通过下面的方式解决："></a>如果上面的快捷方式失败，通过下面的方式解决：</h3><ul><li><p>通过桌面顶部菜单依次选择【Places】-》【Computer】，然后依次进入&#x2F;usr&#x2F;share&#x2F;applications&#x2F;文件夹，找到Chrome图标，右键，属性，启动方式后面加上–no-sandbox，双击此图标即可启动Chrome。</p></li><li><p>如果需要创建Chrome桌面快捷方式，则把这个快捷方式复制到桌面即可。</p></li></ul><p>参考文档：<a href="https://blog.csdn.net/tiandaochouqin99/article/details/79643248">解决centos 7系统root用户下Chrome无法启动问题</a></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NPM</tag>
      
      <tag>Linux</tag>
      
      <tag>Chrome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018年第31周</title>
    <link href="/2018/07/30/Year2018Week31/"/>
    <url>/2018/07/30/Year2018Week31/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2018年第31周（2018-07-30-2018-08-05）"><a href="#2018年第31周（2018-07-30-2018-08-05）" class="headerlink" title="2018年第31周（2018&#x2F;07&#x2F;30~2018&#x2F;08&#x2F;05）"></a>2018年第31周（2018&#x2F;07&#x2F;30~2018&#x2F;08&#x2F;05）</h2><h2 id="CentOS7下npm的安装路径"><a href="#CentOS7下npm的安装路径" class="headerlink" title="CentOS7下npm的安装路径"></a><span id= "20183101">CentOS7下npm的安装路径</span></h2><p>CentOS7下npm的安装路径，在该路径下安装cheerio不会报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost node_modules]<span class="hljs-comment"># npm install cheerio</span><br>npm notice created a lockfile as package-lock.json. You should commit this file.<br>+ cheerio@1.0.0-rc.2<br>added 15 packages from 32 contributors <span class="hljs-keyword">in</span> 4.476s<br>[root@localhost node_modules]<span class="hljs-comment"># pwd</span><br>/usr/local/lib/node_modules/npm/node_modules<br><br></code></pre></td></tr></table></figure><p><span id= "20183102">vmware怎样隐藏到托盘</span></p><p>看到这个答案也是找了好久，也呵呵了，不知道是回答者不认字呢还是点赞者是水军。首先，VMware Authorization Service服务是默认开启的，没有这个服务，虚拟机是会崩溃的。其次，Vmwear玩了这么久，还没见过那个版本“编辑”下面有参数选项的，都是“首选项”，更不知道“在关闭后在后台运行电源已打开的虚拟机”这句话哪里来的，我只见过“Workstation关闭后保持虚拟机运行“</p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第47周</title>
    <link href="/2017/11/20/Year2017Week47/"/>
    <url>/2017/11/20/Year2017Week47/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2017年第47周（2017-11-20-2017-11-26）"><a href="#2017年第47周（2017-11-20-2017-11-26）" class="headerlink" title="2017年第47周（2017&#x2F;11&#x2F;20~2017&#x2F;11&#x2F;26）"></a>2017年第47周（2017&#x2F;11&#x2F;20~2017&#x2F;11&#x2F;26）</h2><h2 id="人力看板（高级查询）"><a href="#人力看板（高级查询）" class="headerlink" title="人力看板（高级查询）"></a><span id= "20174701">人力看板（高级查询）</span></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br><span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span><br>PDRC_V_Profile<br><span class="hljs-keyword">WHERE</span><br>ProfileId <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span><br>ProfileId<br><span class="hljs-keyword">FROM</span><br>PDRC_V_Profile<br><span class="hljs-keyword">WHERE</span><br>DomainKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DM01&#x27;</span><br><span class="hljs-keyword">AND</span> SkillKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SK01&#x27;</span><br><span class="hljs-keyword">AND</span> WorkPlaceKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CC02&#x27;</span><br><span class="hljs-keyword">AND</span> stateKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;E3566&#x27;</span><br>);<br></code></pre></td></tr></table></figure><p>ProfileMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ProfileViewResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.billjc.model.ProfileViewModel&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;WorkPlaceName&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;workPlaceName&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;IsCurrentWorkPlace&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isCurrentWorkPlace&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;SkillName&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skillName&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;DomainName&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;domainName&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ServiceYear&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;serviceYear&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ProfileId&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;profileId&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;WorkId&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;workId&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;UserName&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getProfileViewListByPramas&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ProfileViewResultMap&quot;</span>&gt;</span><br>SELECT<br>WorkPlaceName,<br>IsCurrentWorkPlace,<br>StateName,<br>SkillName,<br>DomainName,<br>ServiceYear,<br>ProfileId,<br>WorkID,<br>UserName<br>FROM<br>PDRC_V_Profile<br>WHERE<br>ProfileId IN (<br>SELECT DISTINCT<br>ProfileId<br>FROM<br>PDRC_V_Profile<br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;workPlaceKey != null and workPlaceKey != &#x27;&#x27;&quot;</span>&gt;</span><br>and workPlaceKey = &#x27;$&#123;workPlaceKey&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;skillKey != null and skillKey != &#x27;&#x27;&quot;</span>&gt;</span><br>and skillKey = &#x27;$&#123;skillKey&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;domainKey != null and domainKey != &#x27;&#x27;&quot;</span>&gt;</span><br>and domainKey = &#x27;$&#123;domainKey&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;serviceYear != null and serviceYear != &#x27;&#x27;&quot;</span>&gt;</span><br>and serviceYear &gt;= $&#123;serviceYear&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;stateKey != null and stateKey != &#x27;&#x27;&quot;</span>&gt;</span><br>and stateKey = &#x27;$&#123;stateKey&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>);<br><span class="hljs-comment">&lt;!-- &lt;if test=&quot;sortField != null&quot;&gt; ORDER by $&#123;sortField&#125; $&#123;sortOrder&#125; &lt;/if&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>视图：PDRC_V_Profile</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>pwp.WorkPlaceKey,<br>d1.[<span class="hljs-keyword">value</span>] <span class="hljs-keyword">AS</span> WorkPlaceName,<br>pwp.IsCurrentWorkPlace,<br>p.StateKey,<br>d2.[<span class="hljs-keyword">value</span>] <span class="hljs-keyword">AS</span> StateName,<br>ps.SkillKey SkillKey,<br>d3.[<span class="hljs-keyword">value</span>] <span class="hljs-keyword">AS</span> SkillName,<br>pd.DomainKey DomainKey,<br>d4.[<span class="hljs-keyword">value</span>] <span class="hljs-keyword">AS</span> DomainName,<br>pb.ServiceYear,<br>p.ID ProfileId,<br>p.WorkID WorkID,<br>u.username UserName<br><span class="hljs-keyword">FROM</span><br>PDRC_Profile p<br><span class="hljs-keyword">JOIN</span> PDRC_ProfileBaseInfo pb <span class="hljs-keyword">ON</span> p.WorkID <span class="hljs-operator">=</span> pb.WorkID<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_ProfileSkill ps <span class="hljs-keyword">ON</span> p.ID <span class="hljs-operator">=</span> ps.ProfileId<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_ProfileDomain pd <span class="hljs-keyword">ON</span> p.id <span class="hljs-operator">=</span> pd.ProfileId<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_ProfileWorkPlace pwp <span class="hljs-keyword">ON</span> p.id <span class="hljs-operator">=</span> pwp.ProfileId<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_User u <span class="hljs-keyword">ON</span> u.WorkId <span class="hljs-operator">=</span> p.WorkID<br><span class="hljs-keyword">JOIN</span> PDRC_Dictionary d2 <span class="hljs-keyword">ON</span> d2.KeyName <span class="hljs-operator">=</span> p.StateKey<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_Dictionary d1 <span class="hljs-keyword">ON</span> d1.KeyName <span class="hljs-operator">=</span> pwp.WorkPlaceKey<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_Dictionary d3 <span class="hljs-keyword">ON</span> d3.KeyName <span class="hljs-operator">=</span> SkillKey<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_Dictionary d4 <span class="hljs-keyword">ON</span> d4.KeyName <span class="hljs-operator">=</span> DomainKey<br></code></pre></td></tr></table></figure><h2 id="任务看板（高级查询）"><a href="#任务看板（高级查询）" class="headerlink" title="任务看板（高级查询）"></a><span id= "20174702">任务看板（高级查询）</span></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>TaskItemId,<br>TaskItemDescription,<br>SkillName,<br>DomainName,<br>ServiceYear,<br>BSM,<br>WorkPlaceName,<br>PlanStartDate,<br>PlanEndDate<br><span class="hljs-keyword">FROM</span><br>PDRC_V_TaskItem<br><span class="hljs-keyword">WHERE</span><br>TaskItemId <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span><br>TaskItemId<br><span class="hljs-keyword">FROM</span><br>PDRC_V_TaskItem<br><span class="hljs-keyword">WHERE</span><br>SkillKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SK01&#x27;</span><br><span class="hljs-keyword">AND</span> DomainKey <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DM01&#x27;</span><br><span class="hljs-keyword">AND</span> WorkPlace <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CC02&#x27;</span><br>);<br><br></code></pre></td></tr></table></figure><p>TaskItemMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TaskItemViewModelResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.billjc.model.TaskItemViewModel&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;TaskItemId&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;taskItemId&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;TaskItemDescription&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;taskItemDescription&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;SkillName&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skillName&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;DomainName&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;domainName&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ServiceYear&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;serviceYear&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;WorkPlaceName&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;workPlaceName&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;PlanStartDate&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;planStartDate&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;PlanEndDate&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;planEndDate&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTaskItemViewModelListByPramas&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TaskItemViewModelResultMap&quot;</span>&gt;</span><br>SELECT<br>TaskItemId,<br>TaskItemDescription,<br>SkillName,<br>DomainName,<br>ServiceYear,<br>BSM,<br>WorkPlaceName,<br>PlanStartDate,<br>PlanEndDate<br>FROM<br>PDRC_V_TaskItem<br>WHERE<br>TaskItemId IN (<br>SELECT DISTINCT<br>TaskItemId<br>FROM<br>PDRC_V_TaskItem<br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;workPlace != null and workPlace != &#x27;&#x27;&quot;</span>&gt;</span><br>and workPlace = &#x27;$&#123;workPlace&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;skillKey != null and skillKey != &#x27;&#x27;&quot;</span>&gt;</span><br>and skillKey = &#x27;$&#123;skillKey&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;domainKey != null and domainKey != &#x27;&#x27;&quot;</span>&gt;</span><br>and domainKey = &#x27;$&#123;domainKey&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;serviceYear != null and serviceYear != &#x27;&#x27;&quot;</span>&gt;</span><br>and serviceYear &gt;= $&#123;serviceYear&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;bsm != null and bsm != &#x27;&#x27;&quot;</span>&gt;</span><br>and bsm &gt;= $&#123;bsm&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;planStartDate != null and planStartDate != &#x27;&#x27;&quot;</span>&gt;</span><br>and planStartDate <span class="hljs-symbol">&amp;gt;</span>= &#x27;$&#123;planStartDate&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;planEndDate != null and planEndDate != &#x27;&#x27;&quot;</span>&gt;</span><br>and planEndDate <span class="hljs-symbol">&amp;lt;</span>= &#x27;$&#123;planEndDate&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>and TaskState=&#x27;$&#123;@com.billjc.util.Constants@TASK_STATE_OPEN&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>)<br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sortField != null&quot;</span>&gt;</span><br>ORDER by $&#123;sortField&#125; $&#123;sortOrder&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>视图：PDRC_V_TaskItem</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">DISTINCT</span> ti.Id <span class="hljs-keyword">as</span> TaskItemId,<br>ti.TaskItemDescription,<br>tis.SkillKey,<br>d1.[<span class="hljs-keyword">value</span>] <span class="hljs-keyword">as</span> SkillName,<br>tid.DomainKey,<br>d2.[<span class="hljs-keyword">value</span>] <span class="hljs-keyword">as</span> DomainName,<br>ti.ServiceYear,<br>ti.BSM,<br>ti.WorkPlace,<br>d3.[<span class="hljs-keyword">value</span>] <span class="hljs-keyword">as</span> WorkPlaceName,<br>ti.PlanStartDate,<br>ti.PlanEndDate,<br>t.TaskState<br><span class="hljs-keyword">FROM</span><br>PDRC_Task t<br><span class="hljs-keyword">JOIN</span> PDRC_TaskItem ti <span class="hljs-keyword">ON</span> t.ID <span class="hljs-operator">=</span> ti.TaskId<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_TaskItemSkill tis <span class="hljs-keyword">ON</span> ti.id <span class="hljs-operator">=</span> tis.TaskItemId<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_TaskItemDomain tid <span class="hljs-keyword">ON</span> ti.id <span class="hljs-operator">=</span> tid.TaskItemId<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_Dictionary d1 <span class="hljs-keyword">ON</span> d1.KeyName <span class="hljs-operator">=</span> SkillKey<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_Dictionary d2 <span class="hljs-keyword">ON</span> d2.KeyName <span class="hljs-operator">=</span> DomainKey<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> PDRC_Dictionary d3 <span class="hljs-keyword">ON</span> d3.KeyName <span class="hljs-operator">=</span> ti.WorkPlace<br></code></pre></td></tr></table></figure><h2 id="JavaScript获取当前根目录"><a href="#JavaScript获取当前根目录" class="headerlink" title="JavaScript获取当前根目录"></a><span id= "20174703">JavaScript获取当前根目录</span></h2><p>主要用到Location 对象，包含有关当前 URL 的信息,是 Window 对象的一个部分，可通过 window.location 属性来访问。</p><p>方法一 (window.document.location.href&#x2F;window.document.location.pathname) ————转自网络</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getRootPath_web</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-comment">//获取当前网址，如： http://localhost:8083/uimcardprj/share/meun.jsp</span><br>            <span class="hljs-keyword">var</span> curWwwPath = window.document.location.href;<br>            <span class="hljs-comment">//获取主机地址之后的目录，如： uimcardprj/share/meun.jsp</span><br>            <span class="hljs-keyword">var</span> pathName = window.document.location.pathname;<br>            <span class="hljs-keyword">var</span> pos = curWwwPath.<span class="hljs-built_in">indexOf</span>(pathName);<br>            <span class="hljs-comment">//获取主机地址，如： http://localhost:8083</span><br>            <span class="hljs-keyword">var</span> localhostPaht = curWwwPath.substring(<span class="hljs-number">0</span>, pos);<br>            <span class="hljs-comment">//获取带&quot;/&quot;的项目名，如：/uimcardprj</span><br>            <span class="hljs-keyword">var</span> projectName = pathName.substring(<span class="hljs-number">0</span>, pathName.substr(<span class="hljs-number">1</span>).<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> (localhostPaht + projectName);<br>        &#125;<br></code></pre></td></tr></table></figure><p>方法二(window.location.pathname&#x2F;window.location.protocol&#x2F;window.location.host)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> getRootPath_dc() &#123;<br>            var pathName = <span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.pathname.substring(<span class="hljs-number">1</span>);<br>            var webName = pathName == <span class="hljs-string">&#x27;&#x27;</span> ? <span class="hljs-string">&#x27;&#x27;</span> : pathName.substring(<span class="hljs-number">0</span>, pathName.indexOf(<span class="hljs-string">&#x27;/&#x27;</span>));<br>            <span class="hljs-keyword">if</span> (webName == &quot;&quot;) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.protocol + <span class="hljs-string">&#x27;//&#x27;</span> + <span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.host;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.protocol + <span class="hljs-string">&#x27;//&#x27;</span> + <span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.host + <span class="hljs-string">&#x27;/&#x27;</span> + webName;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>注：</p><p> 1、document默示的是一个文档对象，window默示的是一个窗口对象，一个窗口下可以有多个文档对象。<br>　　所以一个窗口下只有一个window.location.href，然则可能有多个document.URL、document.location.href————转自网络</p><p> 2、window.location.href和document.location.href可以被赋值，然后跳转到其它页面，document.URL只能读不克不及写————转自网络</p><p> 3、Location 对象详细信息参考w3school <a href="http://www.w3school.com.cn/jsref/dom_obj_location.asp">http://www.w3school.com.cn/jsref/dom_obj_location.asp</a></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第46周</title>
    <link href="/2017/11/13/Year2017Week46/"/>
    <url>/2017/11/13/Year2017Week46/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2017年第46周（2017-11-13-2017-11-19）"><a href="#2017年第46周（2017-11-13-2017-11-19）" class="headerlink" title="2017年第46周（2017&#x2F;11&#x2F;13~2017&#x2F;11&#x2F;19）"></a>2017年第46周（2017&#x2F;11&#x2F;13~2017&#x2F;11&#x2F;19）</h2><h2 id="SpringMVC访问不到默认页的问题"><a href="#SpringMVC访问不到默认页的问题" class="headerlink" title="SpringMVC访问不到默认页的问题"></a><span id= "20174601">SpringMVC访问不到默认页的问题</span></h2><p>在web.xml中配置了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.html<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也访问不到静态资源。</p><p>原来是spirngmvc框架原因。</p><p>在springmvc.xml配置文件中加上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>就能访问到默认页了。</p><ul><li>参考：<br><a href="https://www.cnblogs.com/valarchie/p/5525895.html">https://www.cnblogs.com/valarchie/p/5525895.html</a></li></ul><h2 id="将外部jar打入本地maven仓库"><a href="#将外部jar打入本地maven仓库" class="headerlink" title="将外部jar打入本地maven仓库"></a><span id= "20174602">将外部jar打入本地maven仓库</span></h2><p>cmd 进入jar包所在路径，执行以下命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mvn install:install-file <span class="hljs-attribute">-Dfile</span>=wx-tools-1.0.1.jar <span class="hljs-attribute">-DgroupId</span>=com.github <span class="hljs-attribute">-DartifactId</span>=wx-tools <span class="hljs-attribute">-Dversion</span>=1.0.1 <span class="hljs-attribute">-Dpackaging</span>=jar<br></code></pre></td></tr></table></figure><ul><li>参考：<br><a href="http://blog.csdn.net/pltuyuhong/article/details/50954017">http://blog.csdn.net/pltuyuhong/article/details/50954017</a></li></ul><h2 id="maven项目使用mybatis-generator自动生成代码"><a href="#maven项目使用mybatis-generator自动生成代码" class="headerlink" title="maven项目使用mybatis-generator自动生成代码"></a><span id= "20174603">maven项目使用mybatis-generator自动生成代码</span></h2><p><img src="http://images2015.cnblogs.com/blog/118133/201605/118133-20160523091847741-366651867.jpg"></p><ul><li><p>输入命令：  </p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">mybatis-generator:<span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure></li><li><p>参考：<br><a href="https://www.cnblogs.com/gosky/p/5518748.html">https://www.cnblogs.com/gosky/p/5518748.html</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
      <tag>Maven</tag>
      
      <tag>mybatis-generator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第43周</title>
    <link href="/2017/10/23/Year2017Week43/"/>
    <url>/2017/10/23/Year2017Week43/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2017年第43周（2017-10-23-2017-10-29）"><a href="#2017年第43周（2017-10-23-2017-10-29）" class="headerlink" title="2017年第43周（2017&#x2F;10&#x2F;23~2017&#x2F;10&#x2F;29）"></a>2017年第43周（2017&#x2F;10&#x2F;23~2017&#x2F;10&#x2F;29）</h2><h2 id="Python3没有queue模块"><a href="#Python3没有queue模块" class="headerlink" title="Python3没有queue模块"></a><span id= "20174301">Python3没有queue模块</span></h2><p>python3没有queue模块吗</p><p>有的 直接使用就可以了</p><pre><code class="hljs">import queuelr = queue.Queue()</code></pre><h2 id="学习内置filter函数"><a href="#学习内置filter函数" class="headerlink" title="学习内置filter函数"></a><span id= "20174302">学习内置filter函数</span></h2><p>学习内置filter函数：</p><pre><code class="hljs">a=[1,2,3,4,5,6,7]b=filter(lambda x:x&gt;5, a)print(b)</code></pre><p>为什么输出不是6,7？？<br>输出结果为&lt;filter object at 0x02CCCC10&gt;<br>为了实现预想的结果，我该怎么编写程序呢？<br>感谢~</p><p>用list转成列表即可。</p><pre><code class="hljs">filter(func,data) #python 2.x</code></pre><p>is equivalent to:</p><pre><code class="hljs">list(filter(func,data)) #python 3.x</code></pre><p>Python filter() 函数</p><pre><code class="hljs"># http://www.runoob.com/python/python-func-filter.html# Python filter() 函数# Python 内置函数 Python 内置函数# 描述# filter() 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。# 该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。# 语法# 以下是 filter() 方法的语法:# filter(function, iterable)# 参数# function -- 判断函数。# iterable -- 可迭代对象。# 返回值# 返回列表。# 实例# 以下展示了使用 filter 函数的实例：</code></pre><p>源代码：</p><pre><code class="hljs">#!/usr/bin/python# -*- coding: UTF-8 -*- # 过滤出列表中的所有奇数：def is_odd(n):    return n % 2 == 1# 过滤出1~100中平方根是整数的数：import math    def is_sqr(x):    return math.sqrt(x) % 1 == 0def filter_func():    newlist = list(filter(is_odd, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))    print(newlist)    # 输出结果 ：    # [1, 3, 5, 7, 9]    newlist = list(filter(is_sqr, range(1, 101)))    print(newlist)    # 输出结果 ：    # [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]    if __name__ == &#39;__main__&#39;:    filter_func()</code></pre><h2 id="Python3-4中filter函数，map函数和reduce函数"><a href="#Python3-4中filter函数，map函数和reduce函数" class="headerlink" title="Python3.4中filter函数，map函数和reduce函数"></a><span id= "20174303">Python3.4中filter函数，map函数和reduce函数</span></h2><p>2015-03-08 22:28 29357人阅读 评论(0) 收藏 举报<br><a href="http://blog.csdn.net/damotiansheng/article/details/44139111">http://blog.csdn.net/damotiansheng/article/details/44139111</a></p><h3 id="filter函数："><a href="#filter函数：" class="headerlink" title="filter函数：###"></a>filter函数：###</h3><p>filter()为已知的序列的每个元素调用给定的布尔函数，调用中，返回值为非零的元素将被添加至一个列表中</p><pre><code class="hljs">&gt;&gt;&gt; def f1(x):  if x &gt; 20:  return True  else:  return False  &gt;&gt;&gt; l1 = [ 1, 2, 3, 42, 67, 16 ]  &gt;&gt;&gt; filter( f1, l1)  &lt;filter object at 0x01F594F0&gt;  &gt;&gt;&gt; l2 = filter( f1, l1 )  &gt;&gt;&gt; print(l2)  &lt;filter object at 0x01FA30D0&gt;  &gt;&gt;&gt; l2.__next__  &lt;method-wrapper &#39;__next__&#39; of filter object at 0x01FA30D0&gt;  &gt;&gt;&gt; l2.__next__()  42  &gt;&gt;&gt; l2.__next__()  67  &gt;&gt;&gt; l2.__next__()  Traceback (most recent call last):    File &quot;&lt;pyshell#14&gt;&quot;, line 1, in &lt;module&gt;      l2.__next__()  StopIteration  </code></pre><h3 id="map函数："><a href="#map函数：" class="headerlink" title="map函数："></a>map函数：</h3><p>map()将函数调用映射到每个序列的对应元素上并返回一个含有所有返回值的列表</p><pre><code class="hljs">&gt;&gt;&gt; def f1( x, y ):  return (x,y)    &gt;&gt;&gt; l1 = [ 0, 1, 2, 3, 4, 5, 6 ]  &gt;&gt;&gt; l2 = [ &#39;Sun&#39;, &#39;M&#39;, &#39;T&#39;, &#39;W&#39;, &#39;T&#39;, &#39;F&#39;, &#39;S&#39; ]   &gt;&gt;&gt; l3 = map( f1, l1, l2 )  &gt;&gt;&gt; print(list(l3))  [(0, &#39;Sun&#39;), (1, &#39;M&#39;), (2, &#39;T&#39;), (3, &#39;W&#39;), (4, &#39;T&#39;), (5, &#39;F&#39;), (6, &#39;S&#39;)]    &gt;&gt;&gt; print( list(map(f2, l1) ))  [0, 2, 4, 6, 8, 10, 12]    &gt;&gt;&gt; print( list(map(f2, l2) ) )  [&#39;SunSun&#39;, &#39;MM&#39;, &#39;TT&#39;, &#39;WW&#39;, &#39;TT&#39;, &#39;FF&#39;, &#39;SS&#39;]    &gt;&gt;&gt; def f3( x, y ):  return x*2, y*2    &gt;&gt;&gt; print( list(map(f3, l1, l2) ))  [(0, &#39;SunSun&#39;), (2, &#39;MM&#39;), (4, &#39;TT&#39;), (6, &#39;WW&#39;), (8, &#39;TT&#39;), (10, &#39;FF&#39;), (12, &#39;SS&#39;)]  </code></pre><h3 id="reduce函数："><a href="#reduce函数：" class="headerlink" title="reduce函数：###"></a>reduce函数：###</h3><p>在Python 3里,reduce()函数已经被从全局名字空间里移除了,它现在被放置在fucntools模块里 用的话要 先引<br>入：</p><pre><code class="hljs">&gt;&gt;&gt; from functools import reduce &gt;&gt;&gt; print(l1)[0, 1, 2, 3, 4, 5, 6]&gt;&gt;&gt; reduce( f4, l1 )21</code></pre><p>三个函数比较类似，都是应用于序列的内置函数。常见的序列包括list、tuple、str。</p><p>1.map函数</p><p>map函数会根据提供的函数对指定序列做映射。</p><p>map函数的定义：</p><pre><code class="hljs">map(function, sequence[, sequence, ...]) -&gt; list</code></pre><p>通过定义可以看到，这个函数的第一个参数是一个函数，剩下的参数是一个或多个序列，返回值是一个集合。<br>function可以理解为是一个一对一或多对一函数，map的作用是以参数序列中的每一个元素调用function函数，返回包含每次function函数返回值的list。</p><p>比如要对一个序列中的每个元素进行平方运算：</p><pre><code class="hljs">map(lambda x: x ** 2, [1, 2, 3, 4, 5])</code></pre><p>返回结果为：</p><pre><code class="hljs">[1, 4, 9, 16, 25]</code></pre><p>在参数存在多个序列时，会依次以每个序列中相同位置的元素做参数调用function函数。</p><p>比如要对两个序列中的元素依次求和。</p><pre><code class="hljs">map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10])</code></pre><p>map返回的list中第一个元素为，参数序列1的第一个元素加参数序列2中的第一个元素(1 + 2)，<br>list中的第二个元素为，参数序列1中的第二个元素加参数序列2中的第二个元素(3 + 4)，<br>依次类推，最后的返回结果为：</p><pre><code class="hljs">[3, 7, 11, 15, 19]</code></pre><p>要注意function函数的参数数量，要和map中提供的集合数量相匹配。<br>如果集合长度不相等，会以最小长度对所有集合进行截取。<br>当函数为None时，操作和zip相似：</p><pre><code class="hljs">map(None, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10])</code></pre><p>返回结果为：</p><pre><code class="hljs">[(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]</code></pre><p>2.filter函数</p><p>filter函数会对指定序列执行过滤操作。</p><p>filter函数的定义：</p><pre><code class="hljs">filter(function or None, sequence) -&gt; list, tuple, or string</code></pre><p>function是一个谓词函数，接受一个参数，返回布尔值True或False。<br>filter函数会对序列参数sequence中的每个元素调用function函数，最后返回的结果包含调用结果为True的元素。<br>返回值的类型和参数sequence的类型相同</p><p>比如返回序列中的所有偶数：</p><pre><code class="hljs">def is_even(x):    return x &amp; 1 != 0filter(is_even, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])</code></pre><p>返回结果为：</p><pre><code class="hljs">[1, 3, 5, 7, 9]</code></pre><p>如果function参数为None，返回结果和sequence参数相同。</p><p>3.reduce函数</p><p>reduce函数，reduce函数会对参数序列中元素进行累积。</p><p>reduce函数的定义：</p><pre><code class="hljs">reduce(function, sequence[, initial]) -&gt; value</code></pre><p>function参数是一个有两个参数的函数，reduce依次从sequence中取一个元素，和上一次调用function的结果做参数再次调用function。</p><p>第一次调用function时，如果提供initial参数，会以sequence中的第一个元素和initial作为参数调用function，否则会以序列sequence中的前两个元素做参数调用function。</p><pre><code class="hljs">reduce(lambda x, y: x + y, [2, 3, 4, 5, 6], 1)</code></pre><p>结果为21(  (((((1+2)+3)+4)+5)+6)  )</p><pre><code class="hljs">reduce(lambda x, y: x + y, [2, 3, 4, 5, 6])</code></pre><p>结果为20</p><p>注意function函数不能为None。</p><p>转载来源：<a href="http://blog.sina.com.cn/s/blog_45ac0d0a010191rb.html">http://blog.sina.com.cn/s/blog_45ac0d0a010191rb.html</a></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第42周</title>
    <link href="/2017/10/16/Year2017Week42/"/>
    <url>/2017/10/16/Year2017Week42/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2017年第42周（2017-10-16-2017-10-22）"><a href="#2017年第42周（2017-10-16-2017-10-22）" class="headerlink" title="2017年第42周（2017&#x2F;10&#x2F;16~2017&#x2F;10&#x2F;22）"></a>2017年第42周（2017&#x2F;10&#x2F;16~2017&#x2F;10&#x2F;22）</h2><h2 id="JavaScript判断是否为整数类型方式"><a href="#JavaScript判断是否为整数类型方式" class="headerlink" title="JavaScript判断是否为整数类型方式"></a><span id= "20174201">JavaScript判断是否为整数类型方式</span></h2><p>ES6提供了Number.isInteger</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(<span class="hljs-number">3</span>) <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(<span class="hljs-number">3.1</span>) <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(<span class="hljs-string">&#x27;3&#x27;</span>) <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>([]) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>目前，最新的Firefox和Chrome已经支持。</p><h2 id="MyBatis-where配置"><a href="#MyBatis-where配置" class="headerlink" title="MyBatis where配置"></a><span id= "20174202">MyBatis where配置</span></h2><p>EmpMapper.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByWhere&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>select * from emp<br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;job != null and job != &#x27;&#x27;&quot;</span>&gt;</span><br>and job = #&#123;job&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;deptno != null&quot;</span>&gt;</span><br>and deptno = #&#123;deptno&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第41周</title>
    <link href="/2017/10/09/Year2017Week41/"/>
    <url>/2017/10/09/Year2017Week41/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2017年第41周（2017-10-09-2017-10-15）"><a href="#2017年第41周（2017-10-09-2017-10-15）" class="headerlink" title="2017年第41周（2017&#x2F;10&#x2F;09~2017&#x2F;10&#x2F;15）"></a>2017年第41周（2017&#x2F;10&#x2F;09~2017&#x2F;10&#x2F;15）</h2><h2 id="JS操作SQLite"><a href="#JS操作SQLite" class="headerlink" title="JS操作SQLite"></a><span id= "20174101">JS操作SQLite</span></h2><p>在github找到</p><p><a href="https://github.com/kripken/sql.js">https://github.com/kripken/sql.js </a></p><p>下载sql.js 引入网页。</p><ul><li>本地  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sql.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery-1.12.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tableName&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dbFileEle&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">     </span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> tableName = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;tableName&#x27;</span>).<span class="hljs-property">val</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span>== tableName || <span class="hljs-string">&#x27;&#x27;</span> == tableName) &#123;</span><br><span class="language-javascript">tableName = <span class="hljs-string">&#x27;COMPANY&#x27;</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> dbFileElm = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;dbFileEle&#x27;</span>);</span><br><span class="language-javascript">        dbFileElm.<span class="hljs-property">onchange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> f = dbFileElm.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> r = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>();</span><br><span class="language-javascript">            r.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> <span class="hljs-title class_">Uints</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(r.<span class="hljs-property">result</span>);</span><br><span class="language-javascript">                db = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">SQL</span>.<span class="hljs-title class_">Database</span>(<span class="hljs-title class_">Uints</span>);</span><br><span class="language-javascript">                <span class="hljs-comment">//console.log(db)</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> c = db.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&quot;SELECT * FROM &quot;</span> + tableName);</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> result = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> columns = c[<span class="hljs-number">0</span>].<span class="hljs-property">columns</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> values = c[<span class="hljs-number">0</span>].<span class="hljs-property">values</span></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;columns: &quot;</span> + columns);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;values: &quot;</span> + values);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;columns length: &quot;</span> + columns.<span class="hljs-property">length</span>);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;values length: &quot;</span> + values.<span class="hljs-property">length</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> columns_length = columns.<span class="hljs-property">length</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> values_length = values.<span class="hljs-property">length</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; values_length; i++ )&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; columns_length; j++ ) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(columns[j] + <span class="hljs-string">&#x27;:&#x27;</span> + values[i][j]);</span><br><span class="language-javascript">result += columns[j] + <span class="hljs-string">&#x27;:&#x27;</span> + values[i][j] + <span class="hljs-string">&#x27;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#x27;</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">result += <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">$.<span class="hljs-title function_">each</span>(c, <span class="hljs-keyword">function</span>(<span class="hljs-params">key, value</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key + <span class="hljs-string">&quot;:&quot;</span> + value);</span><br><span class="language-javascript"><span class="hljs-comment">//alert(key + &quot;:&quot; + value);</span></span><br><span class="language-javascript"><span class="hljs-comment">//alert(value.columns);</span></span><br><span class="language-javascript"><span class="hljs-comment">//alert(value.values);</span></span><br><span class="language-javascript">$.<span class="hljs-title function_">each</span>(value.<span class="hljs-property">values</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">key2, value2</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">//alert(key2 + &quot;:&quot; + value2);</span></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(key2 + <span class="hljs-string">&quot;:&quot;</span> + value2);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"><span class="hljs-comment">//var amounts = value;</span></span><br><span class="language-javascript"><span class="hljs-comment">//workday_amounts.push(amounts);</span></span><br><span class="language-javascript"><span class="hljs-comment">//str += &#x27;&lt;div&gt;日期:&#x27; + key + &#x27;, 数量：&#x27; + value + &#x27;&lt;/div&gt;&#x27;;</span></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//alert(c);</span></span><br><span class="language-javascript"><span class="hljs-comment">//alert(c.type);</span></span><br><span class="language-javascript"><span class="hljs-comment">//var PowerData = JSON.parse(c);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//alert(PowerData.columns);</span></span><br><span class="language-javascript"><span class="hljs-comment">//alert(PowerData.values);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(result)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            r.<span class="hljs-title function_">readAsArrayBuffer</span>(f);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p><a href="https://coderdream.github.io/sqlite/read">https://coderdream.github.io/sqlite/read</a></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>TextNG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第38周</title>
    <link href="/2017/09/18/Year2017Week38/"/>
    <url>/2017/09/18/Year2017Week38/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2017年第38周（2017-09-18-2017-09-24）"><a href="#2017年第38周（2017-09-18-2017-09-24）" class="headerlink" title="2017年第38周（2017&#x2F;09&#x2F;18~2017&#x2F;09&#x2F;24）"></a>2017年第38周（2017&#x2F;09&#x2F;18~2017&#x2F;09&#x2F;24）</h2><h2 id="TextNG-xml配置实例"><a href="#TextNG-xml配置实例" class="headerlink" title="TextNG.xml配置实例"></a><span id= "20173801">TextNG.xml配置实例</span></h2><ul><li><p>demo1  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">suite</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://testng.org/testng-1.0.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">suite</span> <span class="hljs-attr">thread-count</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Suite&quot;</span> <span class="hljs-attr">parallel</span>=<span class="hljs-string">&quot;tests&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Regression 1&quot;</span> <span class="hljs-attr">preserve-order</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;suite name=&quot;Suite1&quot; verbose=&quot;1&quot; &gt; &lt;test name=&quot;Regression1&quot; &gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packages</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.billjc.controller&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">packages</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>&lt;/<br></code></pre></td></tr></table></figure></li><li><p>demo2  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">suite</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://testng.org/testng-1.0.dtd&quot;</span> &gt;</span><br><span class="hljs-comment">&lt;!-- &lt;suite name=&quot;Preserve order test runs&quot;&gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">suite</span> <span class="hljs-attr">thread-count</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Suite&quot;</span> <span class="hljs-attr">parallel</span>=<span class="hljs-string">&quot;tests&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Regression 1&quot;</span> <span class="hljs-attr">preserve-order</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">classes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">class</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.billjc.controller.ProfileControllerTest&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">methods</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testMyProfile&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testProfileUpdate&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testProfileSave&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testPmEvaluateUpdate&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testPmEvaluateSave&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTmEvaluateUpdate&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTmEvaluateSave&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testSkillUpdate&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testSkillSave&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testSkillDelete&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testDomainUpdate&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testDomainSave&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testDomainDelete&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testMyProjectList&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testProfileQuery&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testQueryProfileListBySkill&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testQueryProfileListByDomain&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testQueryProfileListByWorkPlace&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">methods</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">class</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.billjc.controller.TaskControllerTest&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">methods</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTaskCreate&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTaskSave&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTaskUpdate&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTaskItemCreateAndSave&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTaskItemSkillCreateAndSave&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTaskItemDomainCreateAndSave&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTaskItemDomainCreateAndSaveAndDelete&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testMyTask&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTask&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTaskItem&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testTaskQuery&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testQueryTaskListBySkill&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testQueryTaskListByDomain&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testQueryTaskListByWorkPlace&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">methods</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">classes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">suite</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="Java获取本机MAC地址、IP地址"><a href="#Java获取本机MAC地址、IP地址" class="headerlink" title="Java获取本机MAC地址、IP地址"></a><span id= "20173802">Java获取本机MAC地址、IP地址</span></h2><p>源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.coderdream.util;<br><br><span class="hljs-keyword">import</span> java.net.Inet4Address;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.NetworkInterface;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span>: SystemTool</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 与系统相关的一些常用工具方法. 目前实现的有：获取MAC地址、IP地址、主机名</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SystemTool</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(SystemTool.class);<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>logger.debug(<span class="hljs-string">&quot;\tMacAddress:\t&quot;</span> + getMacAddress());<br>logger.debug(<span class="hljs-string">&quot;IpAddress:\t&quot;</span> + getIpAddress());<br>&#125;<br><br><span class="hljs-comment">// 获取mac地址</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getMacAddress</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>Enumeration&lt;NetworkInterface&gt; allNetInterfaces = NetworkInterface<br>.getNetworkInterfaces();<br><span class="hljs-type">byte</span>[] mac = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">while</span> (allNetInterfaces.hasMoreElements()) &#123;<br><span class="hljs-type">NetworkInterface</span> <span class="hljs-variable">netInterface</span> <span class="hljs-operator">=</span> (NetworkInterface) allNetInterfaces<br>.nextElement();<br><span class="hljs-keyword">if</span> (netInterface.isLoopback() || netInterface.isVirtual()<br>|| !netInterface.isUp()) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>mac = netInterface.getHardwareAddress();<br><span class="hljs-keyword">if</span> (mac != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mac.length; i++) &#123;<br>sb.append(String.format(<span class="hljs-string">&quot;%02X%s&quot;</span>, mac[i],<br>(i &lt; mac.length - <span class="hljs-number">1</span>) ? <span class="hljs-string">&quot;-&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>&#125;<br><span class="hljs-keyword">if</span> (sb.length() &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>logger.error(<span class="hljs-string">&quot;MAC地址获取失败&quot;</span>, e);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取ip地址</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getIpAddress</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>Enumeration&lt;NetworkInterface&gt; allNetInterfaces = NetworkInterface<br>.getNetworkInterfaces();<br><span class="hljs-type">InetAddress</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">while</span> (allNetInterfaces.hasMoreElements()) &#123;<br><span class="hljs-type">NetworkInterface</span> <span class="hljs-variable">netInterface</span> <span class="hljs-operator">=</span> (NetworkInterface) allNetInterfaces<br>.nextElement();<br><span class="hljs-keyword">if</span> (netInterface.isLoopback() || netInterface.isVirtual()<br>|| !netInterface.isUp()) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>Enumeration&lt;InetAddress&gt; addresses = netInterface<br>.getInetAddresses();<br><span class="hljs-keyword">while</span> (addresses.hasMoreElements()) &#123;<br>ip = addresses.nextElement();<br><span class="hljs-keyword">if</span> (ip != <span class="hljs-literal">null</span> &amp;&amp; ip <span class="hljs-keyword">instanceof</span> Inet4Address) &#123;<br><span class="hljs-keyword">return</span> ip.getHostAddress();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>logger.error(<span class="hljs-string">&quot;IP地址获取失败&quot;</span>, e);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">MacAddress</span>:<span class="hljs-number">78</span>-<span class="hljs-number">45</span>-C4-<span class="hljs-number">15</span>-<span class="hljs-number">6</span>B-<span class="hljs-number">5</span>A<br><span class="hljs-attribute">IpAddress</span>:<span class="hljs-number">10.50.20.123</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>TextNG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第39周</title>
    <link href="/2017/09/18/Year2017Week39/"/>
    <url>/2017/09/18/Year2017Week39/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2017年第39周（2017-09-25-2017-09-24）"><a href="#2017年第39周（2017-09-25-2017-09-24）" class="headerlink" title="2017年第39周（2017&#x2F;09&#x2F;25~2017&#x2F;09&#x2F;24）"></a>2017年第39周（2017&#x2F;09&#x2F;25~2017&#x2F;09&#x2F;24）</h2><h2 id="Tomcat管理页面403-Access-Denied的解决方法"><a href="#Tomcat管理页面403-Access-Denied的解决方法" class="headerlink" title="Tomcat管理页面403 Access Denied的解决方法"></a><span id= "20173901">Tomcat管理页面403 Access Denied的解决方法</span></h2><p>安装tomcat，配置好tomcat环境变量以后，访问manager app页面，出现403 Access Denied错误，解决的方法如下：<br>首先在conf&#x2F;tomcat-users.xml文件里面，在</tomcat-users>前面添加如下代码：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;role <span class="hljs-attribute">rolename</span>=<span class="hljs-string">&quot;manager-gui&quot;</span>/&gt;  <br>&lt;user <span class="hljs-attribute">password</span>=<span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-attribute">roles</span>=<span class="hljs-string">&quot;manager-gui&quot;</span> <span class="hljs-attribute">username</span>=<span class="hljs-string">&quot;tomcat&quot;</span>/&gt;  <br></code></pre></td></tr></table></figure><p>然后重启tomcat，重新访问manager app页面，如果此时仍然出现403 Access Denied错误，那么就是访问的ip地受到了限制，<br>我们打开**&#x2F;webapps&#x2F;manager&#x2F;META-INF&#x2F;目录下context.xml文件，不是conf&#x2F;目录下的context.xml文件**，一定不要搞错了</p><p>我们将里面的内容注释掉或者修改为</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;Valve className<span class="hljs-operator">=</span><span class="hljs-string">&quot;org.apache.catalina.valves.RemoteAddrValve&quot;</span>  <br><span class="hljs-attribute">allow</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1|\d+\.\d+\.\d+\.\d+&quot;</span> /&gt;  <br></code></pre></td></tr></table></figure><p>保存，然后重启tomcat，重新访问manager app页面，OK，问题得到解决。 如果没有生效，浏览器清空缓存。</p><h2 id="MyBatis通过-调用Java类的静态代码和常量"><a href="#MyBatis通过-调用Java类的静态代码和常量" class="headerlink" title="MyBatis通过@调用Java类的静态代码和常量"></a><span id= "20173902">MyBatis通过@调用Java类的静态代码和常量</span></h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&lt;<span class="hljs-keyword">select</span> id=<span class="hljs-string">&quot;getByParaCode&quot;</span> resultType=<span class="hljs-string">&quot;Sysconfig&quot;</span>&gt;  <br>    <span class="hljs-keyword">SELECT</span>   <br>        &lt;<span class="hljs-keyword">include</span> refid=<span class="hljs-string">&quot;columnList&quot;</span>/&gt;  <br>    <span class="hljs-keyword">FROM</span> C_SYS_PARA a  <br>    <span class="hljs-keyword">WHERE</span> a.PARA_CODE = #&#123;paraCode&#125; <span class="hljs-keyword">and</span> a.APPLICATION_CODE = <span class="hljs-string">&#x27;$&#123;@common.config.Global@getSysCode()&#125;&#x27;</span>  <br>&lt;/<span class="hljs-keyword">select</span>&gt;  <br>&lt;<span class="hljs-keyword">select</span> id=<span class="hljs-string">&quot;getByParaName&quot;</span> resultType=<span class="hljs-string">&quot;Sysconfig&quot;</span>&gt;  <br>    <span class="hljs-keyword">SELECT</span>   <br>        &lt;<span class="hljs-keyword">include</span> refid=<span class="hljs-string">&quot;columnList&quot;</span>/&gt;  <br>    <span class="hljs-keyword">FROM</span> C_SYS_PARA a  <br>    <span class="hljs-keyword">WHERE</span> a.PARA_NAME = #&#123;paraName&#125; <span class="hljs-keyword">and</span> a.APPLICATION_CODE = <span class="hljs-string">&#x27;$&#123;@ommon.config.Global@getSysCode()&#125;&#x27;</span>  <br>&lt;/<span class="hljs-keyword">select</span>&gt;<br></code></pre></td></tr></table></figure><p>通过@来调用常量和静态方法</p><h2 id="Tomcat-配置shared目录"><a href="#Tomcat-配置shared目录" class="headerlink" title="Tomcat 配置shared目录"></a><span id= "20173903">Tomcat 配置shared目录</span></h2><p>${catalina.home}&#x2F;conf&#x2F;catalina.properties文件使用来配置tomcat内置classloadder的load范围，通过修改此文件设置参数来实现shared文件夹中的jar加载。</p><p>tomcat中lib目录下新建share文件夹，放入所需要的jar包；修改配置文件catalina.properties中的“shared.loader&#x3D;”属性，参数为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$&#123;catalina.base&#125;</span>/lib/share,<span class="hljs-variable">$&#123;catalina.base&#125;</span>/lib/share/*.jar,<span class="hljs-variable">$&#123;catalina.home&#125;</span>/lib/share,<span class="hljs-variable">$&#123;catalina.home&#125;</span>/lib/share/*.jar<br></code></pre></td></tr></table></figure><h2 id="Maven打war包不包含jar"><a href="#Maven打war包不包含jar" class="headerlink" title="Maven打war包不包含jar"></a><span id= "20173904">Maven打war包不包含jar</span></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packagingExcludes</span>&gt;</span>WEB-INF/lib/*.jar<span class="hljs-tag">&lt;/<span class="hljs-name">packagingExcludes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="查看sqlserver被锁的表以及如何解锁"><a href="#查看sqlserver被锁的表以及如何解锁" class="headerlink" title="查看sqlserver被锁的表以及如何解锁"></a><span id= "20173905">查看sqlserver被锁的表以及如何解锁</span></h2><p>查看被锁表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> request_session_id spid,<br>       OBJECT_NAME(resource_associated_entity_id) tableName<br><span class="hljs-keyword">FROM</span> sys.dm_tran_locks<br><span class="hljs-keyword">WHERE</span> resource_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;OBJECT&#x27;</span>;<br></code></pre></td></tr></table></figure><p>spid   锁表进程 </p><p>tableName   被锁表名</p><p>解锁：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@spid</span> <span class="hljs-type">INT</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@spid</span> <span class="hljs-operator">=</span> <span class="hljs-number">236</span>; <span class="hljs-comment">--锁表进程</span><br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@sql</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">1000</span>);<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;kill &#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">CAST</span>(<span class="hljs-variable">@spid</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">VARCHAR</span>);<br><span class="hljs-keyword">EXEC</span> (<span class="hljs-variable">@sql</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>TextNG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第37周</title>
    <link href="/2017/09/11/Year2017Week37/"/>
    <url>/2017/09/11/Year2017Week37/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2017年第37周（2017-09-11-2017-09-17）"><a href="#2017年第37周（2017-09-11-2017-09-17）" class="headerlink" title="2017年第37周（2017&#x2F;09&#x2F;11~2017&#x2F;09&#x2F;17）"></a>2017年第37周（2017&#x2F;09&#x2F;11~2017&#x2F;09&#x2F;17）</h2><h2 id="jQuery中radio-Button根据值选中"><a href="#jQuery中radio-Button根据值选中" class="headerlink" title="jQuery中radio Button根据值选中"></a><span id= "20173701">jQuery中radio Button根据值选中</span></h2><p>jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;fieldset data-role=<span class="hljs-string">&quot;controlgroup&quot;</span> data-type=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;<br>&lt;legend&gt;性别：&lt;/legend&gt;<br>&lt;input type=<span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;genderValue&quot;</span> id=<span class="hljs-string">&quot;radio-choice-h-2a&quot;</span> value=<span class="hljs-string">&quot;1&quot;</span>&gt;<br>&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;radio-choice-h-2a&quot;</span>&gt;男性&lt;/label&gt;<br>&lt;input type=<span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;genderValue&quot;</span> id=<span class="hljs-string">&quot;radio-choice-h-2b&quot;</span> value=<span class="hljs-string">&quot;0&quot;</span>&gt;<br>&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;radio-choice-h-2b&quot;</span>&gt;女性&lt;/label&gt;<br>&lt;/fieldset&gt;<br></code></pre></td></tr></table></figure><p>js （默认选中与单击事件）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;:radio[name=&#x27;genderValue&#x27;][value=&#x27;&quot;</span> + sex + <span class="hljs-string">&quot;&#x27;]&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>, <span class="hljs-string">&quot;checked&quot;</span>).<span class="hljs-title function_">checkboxradio</span>(<span class="hljs-string">&quot;refresh&quot;</span>);<br><br>$(<span class="hljs-string">&quot;input[name=&#x27;genderValue&#x27;]&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>$(<span class="hljs-string">&quot;#gender&quot;</span>).<span class="hljs-title function_">val</span>($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">val</span>());<br><span class="hljs-comment">//alert(&quot;您是...&quot; + $(this).val());</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="jQuery-下拉选单默认选中与单击事件"><a href="#jQuery-下拉选单默认选中与单击事件" class="headerlink" title=" jQuery 下拉选单默认选中与单击事件"></a><span id= "20173702"> jQuery 下拉选单默认选中与单击事件</span></h2><p>jsp:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;educationItem&quot;</span>&gt;学历：&lt;/label&gt; &lt;select id=<span class="hljs-string">&#x27;educationItem&#x27;</span>&gt;<br>&lt;option value=<span class="hljs-string">&#x27;&#x27;</span>&gt;--请选择学历--&lt;/option&gt;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><p>js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> educationItem = $(<span class="hljs-string">&quot;#educationItem&quot;</span>);<br><span class="hljs-keyword">var</span> url = <span class="hljs-string">&quot;/pdrc/dictionary/education&quot;</span>;<br>$.<span class="hljs-title function_">ajax</span>(&#123;<br>url : url,<br>dataType : <span class="hljs-string">&quot;json&quot;</span>,<br>crossDomain : <span class="hljs-literal">false</span>,<br>data : <span class="hljs-string">&quot;&quot;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br><span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> html = educationItem.<span class="hljs-title function_">html</span>();<br><span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> response) &#123;<br>html += <span class="hljs-string">&#x27;&lt;option value=&quot;&#x27;</span> + key + <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span> + response[key]<br>+ <span class="hljs-string">&#x27;&lt;/option&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> education = $(<span class="hljs-string">&quot;#education&quot;</span>).<span class="hljs-title function_">val</span>();<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;&#x27;</span> == education) &#123;<br>educationItem.<span class="hljs-title function_">html</span>(html);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>educationItem.<span class="hljs-title function_">html</span>(html).<span class="hljs-title function_">val</span>(education).<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&quot;change&quot;</span>);<br>&#125;<br>&#125;);<br><br>$(<span class="hljs-string">&quot;#educationItem&quot;</span>).<span class="hljs-title function_">change</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">//var checkText = $(&quot;#educationItem&quot;).find(&quot;option:selected&quot;).text(); // 获取Select选择的Text</span><br><span class="hljs-keyword">var</span> checkValue = $(<span class="hljs-string">&quot;#educationItem&quot;</span>).<span class="hljs-title function_">val</span>(); <span class="hljs-comment">// 获取Select选择的Value</span><br><span class="hljs-comment">//var educationItem = $(&quot;#educationItem&quot;);</span><br><br>$(<span class="hljs-string">&quot;#education&quot;</span>).<span class="hljs-title function_">val</span>(checkValue);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery</tag>
      
      <tag>JSON</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第36周</title>
    <link href="/2017/09/04/Year2017Week36/"/>
    <url>/2017/09/04/Year2017Week36/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2017年第36周（2017-09-04-2017-09-10）"><a href="#2017年第36周（2017-09-04-2017-09-10）" class="headerlink" title="2017年第36周（2017&#x2F;09&#x2F;04~2017&#x2F;09&#x2F;10）"></a>2017年第36周（2017&#x2F;09&#x2F;04~2017&#x2F;09&#x2F;10）</h2><h2 id="getJSON获取数据"><a href="#getJSON获取数据" class="headerlink" title="getJSON获取数据"></a><span id= "20173601">getJSON获取数据</span></h2><p><a href="https://coderdream.github.io/readjson.html">https://coderdream.github.io/readjson.html</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>$(<span class="hljs-string">&quot;#btn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>$.<span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&quot;js/userinfo.json&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123; <br><span class="hljs-keyword">var</span> $jsontip = $(<span class="hljs-string">&quot;#jsonTip&quot;</span>); <br><span class="hljs-keyword">var</span> strHtml = <span class="hljs-string">&quot;123&quot;</span>;<span class="hljs-comment">//存储数据的变量 </span><br>$jsontip.<span class="hljs-title function_">empty</span>();<span class="hljs-comment">//清空内容 </span><br>$.<span class="hljs-title function_">each</span>(data,<span class="hljs-keyword">function</span>(<span class="hljs-params">infoIndex,info</span>)&#123; <br>strHtml += <span class="hljs-string">&quot;姓名：&quot;</span>+info[<span class="hljs-string">&quot;name&quot;</span>]+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>; <br>strHtml += <span class="hljs-string">&quot;性别：&quot;</span>+info[<span class="hljs-string">&quot;sex&quot;</span>]+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>; <br>strHtml += <span class="hljs-string">&quot;邮箱：&quot;</span>+info[<span class="hljs-string">&quot;email&quot;</span>]+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>; <br>strHtml += <span class="hljs-string">&quot;&lt;hr&gt;&quot;</span> <br>&#125;) <br>$jsontip.<span class="hljs-title function_">html</span>(strHtml);<span class="hljs-comment">//显示处理后的数据 </span><br>&#125;) <br>&#125;) <br></code></pre></td></tr></table></figure><h2 id="jQuery-ajax读取本地json文件"><a href="#jQuery-ajax读取本地json文件" class="headerlink" title=" jQuery ajax读取本地json文件"></a><span id= "20173602"> jQuery ajax读取本地json文件</span></h2><p><a href="https://coderdream.github.io/readjson2.html">https://coderdream.github.io/readjson2.html</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>$.<span class="hljs-title function_">ajax</span>(&#123;<br>   <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;js/test.json&quot;</span>,<span class="hljs-comment">//json文件位置</span><br>   <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-comment">//请求方式为get</span><br>   <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>, <span class="hljs-comment">//返回数据格式为json</span><br>   <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<span class="hljs-comment">//请求成功完成后要执行的方法 </span><br>   <span class="hljs-comment">//each循环 使用$.each方法遍历返回的数据date</span><br>   <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span>;<br>   $.<span class="hljs-title function_">each</span>(data.<span class="hljs-property">first</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">i, item</span>) &#123;<br>str += <span class="hljs-string">&#x27;&lt;div&gt;姓名:&#x27;</span> + item.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;性别：&#x27;</span> + item.<span class="hljs-property">sex</span> + <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>;<br><span class="hljs-comment">//document.write(str);</span><br>   &#125;)<br>   <span class="hljs-keyword">var</span> jsonTip2 = $(<span class="hljs-string">&quot;#jsonTip2&quot;</span>);<br>   jsonTip2.<span class="hljs-title function_">html</span>(str);<br>   &#125;<br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery</tag>
      
      <tag>JSON</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第34周</title>
    <link href="/2017/08/21/Year2017Week34/"/>
    <url>/2017/08/21/Year2017Week34/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2017年第34周（2017-08-21-2017-08-27）"><a href="#2017年第34周（2017-08-21-2017-08-27）" class="headerlink" title="2017年第34周（2017&#x2F;08&#x2F;21~2017&#x2F;08&#x2F;27）"></a>2017年第34周（2017&#x2F;08&#x2F;21~2017&#x2F;08&#x2F;27）</h2><h2 id="查找项目经理超过x人的员工"><a href="#查找项目经理超过x人的员工" class="headerlink" title="查找项目经理超过x人的员工"></a><span id= "20173401">查找项目经理超过x人的员工</span></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>cnt,<br>Staff_Work_Id<br><span class="hljs-keyword">FROM</span><br>(<br><span class="hljs-keyword">SELECT</span><br><span class="hljs-built_in">COUNT</span> (pmID) <span class="hljs-keyword">AS</span> cnt,<br>Staff_Work_Id<br><span class="hljs-keyword">FROM</span><br>(<br><span class="hljs-keyword">SELECT</span><br><span class="hljs-built_in">COUNT</span> (p.Project_Mgr_Work_Id) <span class="hljs-keyword">AS</span> pmID,<br>h.Staff_Work_Id<br><span class="hljs-keyword">FROM</span><br>PDRC_HumanMap h,<br>PDRC_Project p<br><span class="hljs-keyword">WHERE</span><br>h.Project_Id <span class="hljs-operator">=</span> p.id <span class="hljs-comment">--AND h.Staff_Work_Id = &#x27;B-29803&#x27;</span><br><span class="hljs-keyword">AND</span> p.Project_Start_Date <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;2016-7-1&#x27;</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>h.Staff_Work_Id,<br>p.Project_Mgr_Work_Id<br>) a<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>a.Staff_Work_Id<br>) b<br><span class="hljs-keyword">WHERE</span><br>b.cnt <span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><h2 id="统计项目经理的项目个数"><a href="#统计项目经理的项目个数" class="headerlink" title=" 统计项目经理的项目个数"></a><span id= "20173402"> 统计项目经理的项目个数</span></h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> cnt,<br>       Project_Mgr_Work_Id,<br>       Project_Mgr_Name<br><span class="hljs-keyword">FROM</span><br>(<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(p.Project_Mgr_Work_Id) <span class="hljs-keyword">AS</span> cnt,<br>           p.Project_Mgr_Work_Id,<br>           p.Project_Mgr_Name<br>    <span class="hljs-keyword">FROM</span> PDRC_Project p<br>    <span class="hljs-keyword">WHERE</span> p.Project_Start_Date &gt; <span class="hljs-string">&#x27;2017-1-1&#x27;</span><br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> p.Project_Mgr_Work_Id,<br>             p.Project_Mgr_Name<br>) <span class="hljs-keyword">AS</span> a<br><span class="hljs-keyword">WHERE</span> cnt &gt; <span class="hljs-number">5</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> cnt <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><h2 id="项目经理手下存在项目经理超过X人的员工且该项目经理归属项目超过Y个"><a href="#项目经理手下存在项目经理超过X人的员工且该项目经理归属项目超过Y个" class="headerlink" title="项目经理手下存在项目经理超过X人的员工且该项目经理归属项目超过Y个"></a><span id= "20173403">项目经理手下存在项目经理超过X人的员工且该项目经理归属项目超过Y个</span></h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span><br>       (p.Project_Mgr_Work_Id),<br>       p.Project_Mgr_Name<br><span class="hljs-keyword">FROM</span> PDRC_HumanMap h,<br>     PDRC_Project p,<br>(<br>    <span class="hljs-keyword">SELECT</span> Staff_Work_Id<br>    <span class="hljs-keyword">FROM</span><br>    (<br>        <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(pmID) <span class="hljs-keyword">AS</span> cnt,<br>               Staff_Work_Id<br>        <span class="hljs-keyword">FROM</span><br>        (<br>            <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(p.Project_Mgr_Work_Id) <span class="hljs-keyword">AS</span> pmID,<br>                   h.Staff_Work_Id<br>            <span class="hljs-keyword">FROM</span> PDRC_HumanMap h,<br>                 PDRC_Project p<br>            <span class="hljs-keyword">WHERE</span> h.Project_Id = p.id --<span class="hljs-keyword">AND</span> h.Staff_Work_Id = <span class="hljs-string">&#x27;B-29803&#x27;</span><br>                  <span class="hljs-keyword">AND</span> p.Project_Start_Date &gt; <span class="hljs-string">&#x27;2016-9-1&#x27;</span><br>            <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> h.Staff_Work_Id,<br>                     p.Project_Mgr_Work_Id<br>        ) a<br>        <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> a.Staff_Work_Id<br>    ) b<br>    <span class="hljs-keyword">WHERE</span> b.cnt &gt; <span class="hljs-number">5</span><br>) c<br><span class="hljs-keyword">WHERE</span> h.Project_Id = p.Id<br>      <span class="hljs-keyword">AND</span> h.Staff_Work_Id = c.Staff_Work_Id;<br></code></pre></td></tr></table></figure><h2 id="遍历Map"><a href="#遍历Map" class="headerlink" title="遍历Map"></a><span id= "20173404">遍历Map</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;<br>System.out.println(<span class="hljs-string">&quot;Key = &quot;</span> + entry.getKey() + <span class="hljs-string">&quot;, Value = &quot;</span><br>+ entry.getValue());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="永久修改Jenkins启动端口的一种解决方法"><a href="#永久修改Jenkins启动端口的一种解决方法" class="headerlink" title="永久修改Jenkins启动端口的一种解决方法"></a><span id= "20173405">永久修改Jenkins启动端口的一种解决方法</span></h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span><span class="hljs-keyword">jenkins.war </span>--httpPort=<span class="hljs-number">8099</span><br></code></pre></td></tr></table></figure><p><a href="http://blog.csdn.net/csdnhundan/article/details/44829643">http://blog.csdn.net/csdnhundan/article/details/44829643</a></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第33周</title>
    <link href="/2017/08/14/Year2017Week33/"/>
    <url>/2017/08/14/Year2017Week33/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2017年第33周（2017-08-14-2017-08-20）"><a href="#2017年第33周（2017-08-14-2017-08-20）" class="headerlink" title="2017年第33周（2017&#x2F;08&#x2F;14~2017&#x2F;08&#x2F;20）"></a>2017年第33周（2017&#x2F;08&#x2F;14~2017&#x2F;08&#x2F;20）</h2><h2 id="sql-server-2008-分页，ROW-NUMBER-函数"><a href="#sql-server-2008-分页，ROW-NUMBER-函数" class="headerlink" title="sql server 2008 分页，ROW_NUMBER( )函数"></a><span id= "20173301">sql server 2008 分页，ROW_NUMBER( )函数</span></h2><p>语法：</p><pre><code class="hljs">SELECT t.字段名 FROM (SELECT 字段（可以是多表关联的字段） ,row_number() over(order by 某个排序字段 desc) r FROM 表名 where 过滤条件 ) t where t.r &lt;= (每页显示条数*要查询的页) and t.r &gt; (每页显示条数*(要查询的页-1))</code></pre><p>实例一：</p><pre><code class="hljs">SELECT *FROM(  SELECT ROW_NUMBER( ) OVER( ORDER BY id ASC )  AS rowNumber,         *  FROM  (    SELECT *    FROM OPENQUERY( [10.100.254.101], &#39;select * from BJC_Finance.dbo.ISBG_Project&#39; )  )  AS A)AS BWHERE rowNumber BETWEEN 1 AND 5;</code></pre><p>实例二：</p><pre><code class="hljs">select * from (select row_number() over (order by id) as row_num,* from table)t where row_num between 1 and 30</code></pre><hr>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年第32周</title>
    <link href="/2017/08/07/Year2017Week32/"/>
    <url>/2017/08/07/Year2017Week32/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2017年第32周（2017-08-07-2017-08-13）"><a href="#2017年第32周（2017-08-07-2017-08-13）" class="headerlink" title="2017年第32周（2017&#x2F;08&#x2F;07~2017&#x2F;08&#x2F;13）"></a>2017年第32周（2017&#x2F;08&#x2F;07~2017&#x2F;08&#x2F;13）</h2><h3 id="Question1"><a href="#Question1" class="headerlink" title="Question1:"></a>Question1:</h3><hr><p>Jsp file can not find the tag library descriptor for “<a href="http://java.sun.com/jsp/jstl/core">http://java.sun.com/jsp/jstl/core</a>“</p><p>add code to pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Question2"><a href="#Question2" class="headerlink" title="Question2:"></a>Question2:</h3><hr><p>eclipse导入新工程报错：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Referenced <span class="hljs-built_in">file</span> <span class="hljs-keyword">contains</span> errors (<span class="hljs-keyword">http</span>://www.springframework.org/schema/beans/spring-beans<span class="hljs-number">-3.1</span>.xsd). <br>For more information, <span class="hljs-literal">right</span> click <span class="hljs-keyword">on</span> <span class="hljs-title">the</span> <span class="hljs-title">message</span> <span class="hljs-title">in</span> <span class="hljs-title">the</span> <span class="hljs-title">Problems</span> <span class="hljs-title">View</span> <span class="hljs-title">and</span> <br>select <span class="hljs-string">&quot;Show Details...&quot;</span><br></code></pre></td></tr></table></figure><p>解决方案：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">把<span class="hljs-keyword">project</span>菜单里的clean点击一下就OK了<br></code></pre></td></tr></table></figure><h2 id="好文章序列"><a href="#好文章序列" class="headerlink" title="好文章序列"></a><span id= "20173201">好文章序列</span></h2><h4 id="1、Eclipse中执行maven命令"><a href="#1、Eclipse中执行maven命令" class="headerlink" title="1、Eclipse中执行maven命令"></a>1、Eclipse中执行maven命令</h4><p><a href="http://blog.csdn.net/u011939453/article/details/43017865">http://blog.csdn.net/u011939453/article/details/43017865</a></p><h4 id="2、pom文件常用配置"><a href="#2、pom文件常用配置" class="headerlink" title="2、pom文件常用配置"></a>2、pom文件常用配置</h4><ul><li>解决控制台乱码</li><li>编译时不运行单元测试</li></ul><p>pom.xml</p><pre><code class="hljs">&lt;properties&gt;    &lt;argLine&gt;-Dfile.encoding=UTF-8&lt;/argLine&gt;&lt;/properties&gt;&lt;build&gt;    &lt;finalName&gt;pdrc&lt;/finalName&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;            &lt;version&gt;2.3.2&lt;/version&gt;            &lt;configuration&gt;                &lt;source&gt;1.8&lt;/source&gt;                &lt;target&gt;1.8&lt;/target&gt;                &lt;encoding&gt;UTF-8&lt;/encoding&gt;            &lt;/configuration&gt;        &lt;/plugin&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;            &lt;configuration&gt;                &lt;skip&gt;true&lt;/skip&gt;            &lt;/configuration&gt;        &lt;/plugin&gt;        &lt;plugin&gt;            &lt;!-- https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-maven-plugin --&gt;            &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;            &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;            &lt;version&gt;9.4.6.v20170531&lt;/version&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;</code></pre><h3 id="jQuery-获取当前页面的URL信息"><a href="#jQuery-获取当前页面的URL信息" class="headerlink" title="jQuery 获取当前页面的URL信息"></a>jQuery 获取当前页面的URL信息</h3><ul><li><p>(一)设置或获取对象指定的文件名或路径  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.pathname<br></code></pre></td></tr></table></figure><p>例：<a href="http://localhost:8086/topic/index?topicId=361">http://localhost:8086/topic/index?topicId=361</a><br>alert(window.location.pathname); 则输出：&#x2F;topic&#x2F;index</p></li><li><p>(二)设置或获取整个 URL 为字符串  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.href<br></code></pre></td></tr></table></figure><p>例：<a href="http://localhost:8086/topic/index?topicId=361">http://localhost:8086/topic/index?topicId=361</a><br>alert(window.location.href); 则输出：<a href="http://localhost:8086/topic/index?topicId=361">http://localhost:8086/topic/index?topicId=361</a></p></li><li><p>(三)设置或获取与 URL 关联的端口号码  </p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">window</span>.location.<span class="hljs-keyword">port</span><br></code></pre></td></tr></table></figure><p>例：<a href="http://localhost:8086/topic/index?topicId=361">http://localhost:8086/topic/index?topicId=361</a><br>alert(window.location.port); 则输出：8086</p></li><li><p>(四)设置或获取 URL 的协议部分  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.protocol<br></code></pre></td></tr></table></figure><p>例：<a href="http://localhost:8086/topic/index?topicId=361">http://localhost:8086/topic/index?topicId=361</a><br>alert(window.location.protocol); 则输出：http:</p></li><li><p>(五)设置或获取 href 属性中在井号“#”后面的分段  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.hash<br></code></pre></td></tr></table></figure></li><li><p>(六)设置或获取 location 或 URL 的 hostname 和 port  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.host<br></code></pre></td></tr></table></figure><p>例：<a href="http://localhost:8086/topic/index?topicId=361">http://localhost:8086/topic/index?topicId=361</a><br>alert(window.location.host); 则输出：http:localhost:8086</p></li><li><p>(七)设置或获取 href 属性中跟在问号后面的部分  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.<span class="hljs-keyword">search</span><br></code></pre></td></tr></table></figure><p>例：<a href="http://localhost:8086/topic/index?topicId=361">http://localhost:8086/topic/index?topicId=361</a><br>alert(window.location.search); 则输出：?topicId&#x3D;361</p></li></ul><p>(八)window.location</p><table><thead><tr><th align="center">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">hash</td><td align="left">设置或获取 href属性中在井号“#”后面的分段。</td></tr><tr><td align="center">host</td><td align="left">设置或获取 location 或 URL 的hostname 和 port 号码。</td></tr><tr><td align="center">hostname</td><td align="left">设置或获取 location 或 URL 的主机名称部分。</td></tr><tr><td align="center">href</td><td align="left">设置或获取整个 URL为字符串。</td></tr><tr><td align="center">pathname</td><td align="left">设置或获取对象指定的文件名或路径。</td></tr><tr><td align="center">port</td><td align="left">设置或获取与 URL关联的端口号码。</td></tr><tr><td align="center">protocol</td><td align="left">设置或获取 URL 的协议部分。</td></tr><tr><td align="center">search</td><td align="left">设置或获取 href属性中跟在问号后面的部分。</td></tr></tbody></table><pre><code class="hljs">                                                                        |</code></pre><h3 id="c-if标签用法"><a href="#c-if标签用法" class="headerlink" title="c:if标签用法"></a>c:if标签用法</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;c<span class="hljs-keyword">:if</span> <span class="hljs-attribute">test</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;profileView.gender==1&#125;</span>&quot;</span>&gt;checked&lt;/c:if&gt;<br></code></pre></td></tr></table></figure><h3 id="TestNg"><a href="#TestNg" class="headerlink" title="TestNg"></a>TestNg</h3><ul><li>eclipse插件地址</li></ul><p><a href="http://dl.bintray.com/testng-team/testng-eclipse-release/zipped/6.11.0.201703011520/">http://dl.bintray.com/testng-team/testng-eclipse-release/zipped/6.11.0.201703011520/</a></p><h3 id="sqlserver中如何修改字段类型？"><a href="#sqlserver中如何修改字段类型？" class="headerlink" title="sqlserver中如何修改字段类型？"></a>sqlserver中如何修改字段类型？</h3><p>我有一张表，字段类型是varchar,我现在要把这个字段变成text类型，sql如何写？？？？？</p><p>alter table 表名 alter column 字段名  text</p><h3 id="【Maven】maven工程-调试出现-Source-not-found-，开启jetty调试"><a href="#【Maven】maven工程-调试出现-Source-not-found-，开启jetty调试" class="headerlink" title="【Maven】maven工程 调试出现 Source not found ，开启jetty调试"></a>【Maven】maven工程 调试出现 Source not found ，开启jetty调试</h3><p>问题：maven工程使用jetty 调试出现 Source not found，解决如下：</p><p><a href="http://blog.csdn.net/dracotianlong/article/details/47975969">http://blog.csdn.net/dracotianlong/article/details/47975969</a></p><p>1、开启MAVEN_OPTS的调试参数<br>配置如下：  </p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm">-<span class="hljs-type">Xdebug</span> -<span class="hljs-type">Xrunjdwp</span>:trans<span class="hljs-keyword">port</span>=dt_socket,server=y,suspend=n,address=1066<br></code></pre></td></tr></table></figure><p>配置的地方如下：</p><p><img src="http://img.blog.csdn.net/20150825135525560?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>2、参数含义如下：<br>-Xdebug :通知JVM工作DEBUG模式下<br>-Xrunjdwp:通知JVM使用Java Debug wire protocol来运行环境<br>transport ：调试数据的传送方式，dt_socket使用socket方式<br>server ：是否支持server模式的vm中<br>suspend：是否在调试客户端建立起来后，再执行JVM<br>address：是和调试器通信的端口，不是服务的端口号<br>-Xnoagent: 禁用默认sun.tools.debug调试器<br>-Djava.compiler&#x3D;NONE: 禁止JIT编译器的加载<br>dt_shmem: 共享内存传输，仅限于Windows </p><h3 id="Map-遍历"><a href="#Map-遍历" class="headerlink" title="Map 遍历"></a>Map 遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Integer&gt;();  <br><span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123;    <br>    System.out.println(<span class="hljs-string">&quot;Key = &quot;</span> + entry.getKey() + <span class="hljs-string">&quot;, Value = &quot;</span> + entry.getValue());  <br>&#125; <br></code></pre></td></tr></table></figure><h3 id="eclipse-jetty-debug-source-not-found"><a href="#eclipse-jetty-debug-source-not-found" class="headerlink" title="eclipse jetty debug source not found"></a>eclipse jetty debug source not found</h3><p>eclipse</p><p> 在eclipse中用jetty maven插件debug 时，会找不到源代码， 可以用以下办法解决：<br>安装 Dynamic Source Lookup plugin 插件，<br>插件主页如下，<br> <a href="https://github.com/ifedorenko/com.ifedorenko.m2e.sourcelookup">https://github.com/ifedorenko/com.ifedorenko.m2e.sourcelookup</a></p><pre><code class="hljs">com.ifedorenko.m2e m2e extensions - http://ifedorenko.github.io/m2e-extras/</code></pre><p><img src="http://dl2.iteye.com/upload/attachment/0110/2472/a62befbb-620f-3c96-9740-f0e828a645d2.bmp"></p><p>然后点击【Add】按钮，等待几秒钟，Name就会刷出【m2e extentensions】出来！</p><h3 id="MyBatise-多个参数"><a href="#MyBatise-多个参数" class="headerlink" title="MyBatise 多个参数"></a>MyBatise 多个参数</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">where</span> profileid = #&#123;param1&#125; and projectid = #&#123;param2&#125;;<br></code></pre></td></tr></table></figure><h3 id="解决Dynamic-Web-Module-3-1-requires-Java-1-7-or-newer"><a href="#解决Dynamic-Web-Module-3-1-requires-Java-1-7-or-newer" class="headerlink" title="解决Dynamic Web Module 3.1 requires Java 1.7 or newer"></a>解决Dynamic Web Module 3.1 requires Java 1.7 or newer</h3><p><a href="http://blog.csdn.net/qq_31614947/article/details/70231289">http://blog.csdn.net/qq_31614947/article/details/70231289</a></p><p>概述：使用maven构建web项目时，经常会遇见这个问题，问题原因报错讲述的很清晰明了，就是web模块需要使用java1.7及以后的版本，目前的版本不符合。因而只需要修改java版本到1.7及以上即可。</p><p>解决方法：</p><ol><li><p>在eclipse 构建 web中关于java版本有三处需要修改统一。</p><p> （1）在 Java Build Path的libraries中修改</p><p> （2）在Java Compiler 中修改</p><p> （3）在Project Facet中修改</p></li><li><p>大部分按上上述修改就应该可以了，但总是有意外，还是报错。因为使用了 maven构建项目，因而最好在pom.xml文件中的build标签中加入以下代码：</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span>     //如果是1.8，修改为1.8<br>                 <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span>      //如果是1.8，修改为1.8<br>             <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.最后再右键使用maven的Update Project 即可。 </p><h3 id="Maven项目配置jetty9插件"><a href="#Maven项目配置jetty9插件" class="headerlink" title="Maven项目配置jetty9插件"></a>Maven项目配置jetty9插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.eclipse.jetty<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.4.6.v20170531<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scanIntervalSeconds</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">scanIntervalSeconds</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">httpConnector</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>9080<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">idleTimeout</span>&gt;</span>60000<span class="hljs-tag">&lt;/<span class="hljs-name">idleTimeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">httpConnector</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">webApp</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">contextPath</span>&gt;</span>/$&#123;project.build.finalName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">contextPath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">webApp</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Nginx启动报错：10013-An-attempt-was-made-to-access-a-socket-in-a-way-forbidden"><a href="#Nginx启动报错：10013-An-attempt-was-made-to-access-a-socket-in-a-way-forbidden" class="headerlink" title="Nginx启动报错：10013: An attempt was made to access a socket in a way forbidden"></a>Nginx启动报错：10013: An attempt was made to access a socket in a way forbidden</h3><p>Nginx在win7，win2008下启动报错：bind() to 0.0.0.0:80 failed (10013: An attempt was made to access a socket in a way forbidden by its access permissions) 。</p><p>原因是Win7下nginx默认80端口被System占用，造成nginx启动报错的解决方案。</p><p>在cmd窗口运行如下命令：</p><pre><code class="hljs">C:\Users\Administrator&gt;netstat -aon | findstr :80  </code></pre><p>看到80端口果真被占用。发现占用的pid是4，名字是System。怎么禁用呢？</p><p>1、打开注册表：regedit</p><p>2、找到：HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\HTTP</p><p>3、找到一个REG_DWORD类型的项Start，将其改为0</p><p>4、重启系统，System进程不会占用80端口</p><p>重启之后，start nginx.exe 。在浏览器中，输入127.0.01，即可看到亲爱的“Welcome to nginx!” 了。</p><p><a href="http://www.360sdn.com/Nginx/2014/0807/4044.html">http://www.360sdn.com/Nginx/2014/0807/4044.html</a></p><h3 id="如何查看某个端口被谁占用"><a href="#如何查看某个端口被谁占用" class="headerlink" title="如何查看某个端口被谁占用"></a>如何查看某个端口被谁占用</h3><p><a href="http://jingyan.baidu.com/article/3c48dd34491d47e10be358b8.html">http://jingyan.baidu.com/article/3c48dd34491d47e10be358b8.html</a></p><p>查看被占用端口对应的PID，输入命令：netstat -aon|findstr “49157”，回车，记下最后一位数字，即PID,这里是2720</p><h3 id="Welcome-to-the-PMD-for-Eclipse-Update-Site"><a href="#Welcome-to-the-PMD-for-Eclipse-Update-Site" class="headerlink" title="Welcome to the PMD for Eclipse Update Site"></a>Welcome to the PMD for Eclipse Update Site</h3><p>Please use from now on directly the following URL as the eclipse update site URL: </p><p><a href="https://dl.bintray.com/pmd/pmd-eclipse-plugin/updates/">https://dl.bintray.com/pmd/pmd-eclipse-plugin/updates/</a></p><p>This website provides updates for the Eclipse plugin for PMD.<br>More Information</p><pre><code class="hljs">Release NotesPMD HomepageBug ReportsPlugin installation</code></pre><p>If you have previously installed a version of the PMD Eclipse plugin prior to November 2012, then you should remove&#x2F;uninstall it first. To install the PMD for Eclipse plugin:</p><ol><li>In Eclipse, click on Help -&gt; Install New Software…</li><li>Click on Add..</li><li>Enter the following: <ul><li>Name: PMD for Eclipse Update Site</li><li>URL: <a href="https://dl.bintray.com/pmd/pmd-eclipse-plugin/updates/">https://dl.bintray.com/pmd/pmd-eclipse-plugin/updates/</a></li></ul></li><li>and click OK.</li><li>You should see PMD for Eclipse 4. Select the checkbox next to it and click Next &gt;.</li><li>You’ll need to accept the license and confirm you want to install a plugin that is not digitally signed. Go ahead and install it anyway.</li><li>Restart eclipse.</li></ol><h3 id="Maven-jetty指定端口启动"><a href="#Maven-jetty指定端口启动" class="headerlink" title="Maven jetty指定端口启动"></a>Maven jetty指定端口启动</h3><p>eclipse里修改 Goals值</p><ul><li>Tomcat:   <figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm">-<span class="hljs-type">Dmaven</span>.tomcat.<span class="hljs-keyword">port</span>=8080 tomcat:run<br></code></pre></td></tr></table></figure></li><li>Jetty:  <figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm">-<span class="hljs-type">Djetty</span>.<span class="hljs-keyword">port</span>=8081 jetty:run<br></code></pre></td></tr></table></figure></li></ul><h3 id="Java-保证顺序的-Map"><a href="#Java-保证顺序的-Map" class="headerlink" title="Java 保证顺序的 Map"></a>Java 保证顺序的 Map</h3><p>LinkedHashMap 才能保证迭代的时候取出的顺序和存入的顺序相同</p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery</tag>
      
      <tag>eclipse</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
